/* eslint-disable */
//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useQuery, UseQueryOptions } from 'react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Amount: any;
  Any: unknown;
  Cursor: string;
  Date: string;
  Email: any;
  HTML: any;
  InvalidData: Record<string, Array<string>>;
  /**
   * # For Localization of every data from backend
   * ```javascript
   * {
   *    local: "localized data based on user lang setting",
   *    en: "data in english",
   *    np: "data in nepali"
   * }
   * ```
   */
  Localized: Record<'local' | 'en' | 'np', string>;
  Map: Record<string, string>;
  Time: string;
};

export enum Account_Type {
  Loan = 'LOAN',
  Saving = 'SAVING',
}

export type AbbsTransaction = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  payableAccountId?: Maybe<Scalars['String']>;
  receivableAccountId?: Maybe<Scalars['String']>;
};

export type Account = {
  accountNumber: Scalars['String'];
  accountType: Account_Type;
  amount: Scalars['Float'];
  history?: Maybe<Array<AccountHistory>>;
  id: Scalars['String'];
  interestBooked: Scalars['Float'];
  interestEarned: Scalars['Float'];
  interestRate: Scalars['Float'];
  isDefault: Scalars['Boolean'];
  name: Scalars['String'];
  subscribedDate: Scalars['Date'];
  transactions?: Maybe<Array<Transactions>>;
};

export type AccountConnection = {
  edges: Array<AccountEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type AccountEdge = {
  cursor: Scalars['Cursor'];
  node: Account;
};

export type AccountFilter = {
  id?: InputMaybe<Scalars['String']>;
};

export type AccountHistory = {
  balance: Scalars['Float'];
  date: Scalars['Date'];
  id: Scalars['String'];
};

export enum AccountOperationType {
  Joint = 'JOINT',
  Single = 'SINGLE',
}

export type AccountOperatorDetailsFormState = {
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanenetAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type AccountOperatorDetailsType = {
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanenetAddress?: Maybe<KymAddress>;
  specimenSignature?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type AccountSummary = {
  totalLoan: Scalars['Float'];
  totalSaving: Scalars['Float'];
};

export type AccountTypeDetailsUnion =
  | BankChartsOfAccount
  | JournalChartsOfAccount;

export type AddCoaAccountInput = {
  accountType: CoaTypesOfAccount;
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  balanceSheetAccount: Scalars['Boolean'];
  bankAccountNumber?: InputMaybe<Scalars['Int']>;
  bankGLCode?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['ID']>;
  classId: Scalars['ID'];
  code: Scalars['String'];
  currency: Scalars['String'];
  ibtAccount: Scalars['Boolean'];
  inTransitAccount: Scalars['Boolean'];
  journalCode?: InputMaybe<Scalars['String']>;
  ledgerAccount: Scalars['Boolean'];
  name: Scalars['String'];
  openingBalance: Scalars['Float'];
  parentId: Scalars['ID'];
  profitAndLossAccount: Scalars['Boolean'];
  summationAccount: Scalars['Boolean'];
};

export type AddChartsOfAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ChartsOfAccountSettingsQuery>;
  record?: Maybe<ChartsOfAccount>;
  recordId: Scalars['ID'];
};

export type Address = {
  coordinates?: Maybe<Coordinate>;
  district?: Maybe<Scalars['Localized']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernment?: Maybe<Scalars['Localized']>;
  locality?: Maybe<Scalars['Localized']>;
  state?: Maybe<Scalars['Localized']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AddressType = {
  permanent?: Maybe<Address>;
  temporary?: Maybe<Address>;
};

export type AdministrationQuery = {
  all: Array<Province>;
  districts: Array<Result>;
  municipalities: Array<Result>;
  provinces: Array<Result>;
  wards: Array<Scalars['Int']>;
};

export type AdministrationQueryDistrictsArgs = {
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryMunicipalitiesArgs = {
  districtId?: InputMaybe<Scalars['Int']>;
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryWardsArgs = {
  districtId: Scalars['Int'];
  municipalityId: Scalars['Int'];
  provinceId: Scalars['Int'];
};

export type AdministrativeAddress = {
  district: District;
  locality?: Maybe<Scalars['String']>;
  municipality: Municipality;
  province: Province;
  wardNo: Scalars['Int'];
};

export type AffiliatedDirectorDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  directorName?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type AffiliatedDirectorDetailsType = {
  addressOfInstitution?: Maybe<KymAddress>;
  designation?: Maybe<Scalars['String']>;
  nameOfDirector?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type AmountLimit = {
  avgAmount?: InputMaybe<Scalars['Amount']>;
  maxAmount?: InputMaybe<Scalars['Amount']>;
  minAmount?: InputMaybe<Scalars['Amount']>;
};

export type AmountLimitFormState = {
  avgAmount?: Maybe<Scalars['Amount']>;
  maxAmount?: Maybe<Scalars['Amount']>;
  minAmount?: Maybe<Scalars['Amount']>;
};

export enum Arrange {
  Asc = 'ASC',
  Desc = 'DESC',
}

export type AuthMutation = {
  login?: Maybe<LoginResult>;
  token?: Maybe<AuthTokenResult>;
};

export type AuthMutationLoginArgs = {
  data: LoginInput;
};

export type AuthMutationTokenArgs = {
  refreshToken: Scalars['String'];
};

export type AuthQuery = {
  me: MeResult;
};

export type AuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type AuthTokenResult = {
  error?: Maybe<MutationError>;
  token?: Maybe<AuthToken>;
};

export type AuthorizationError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type BadRequestError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type Bank = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  logo?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
};

export type BankAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankDataQuery>;
  record: Bank;
  recordId: Scalars['ID'];
};

export type BankBranch = Base & {
  address?: Maybe<Address>;
  bankId?: Maybe<Scalars['ID']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
};

export type BankBranchAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankBranchQuery>;
  record: BankBranch;
  recordId: Scalars['ID'];
};

export type BankBranchDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankBranchQuery>;
  recordId: Scalars['ID'];
};

export type BankBranchGetResult = {
  data?: Maybe<BankBranch>;
  error?: Maybe<QueryError>;
};

export type BankBranchInput = {
  bankId?: InputMaybe<Scalars['ID']>;
  districtId?: InputMaybe<Scalars['Int']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  name?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BankBranchMutation = {
  add: BankBranchAddResult;
  delete: BankBranchDeleteResult;
};

export type BankBranchMutationAddArgs = {
  data?: InputMaybe<BankBranchInput>;
  id: Scalars['ID'];
};

export type BankBranchMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type BankBranchQuery = {
  get?: Maybe<BankBranchGetResult>;
  /** This is to get all the branches of one Bank */
  getBranches?: Maybe<Array<Maybe<BankBranch>>>;
  list?: Maybe<Array<Maybe<BankBranch>>>;
};

export type BankBranchQueryGetArgs = {
  id: Scalars['ID'];
};

export type BankBranchQueryGetBranchesArgs = {
  bankId: Scalars['ID'];
};

export type BankBranchQueryListArgs = {
  filter?: InputMaybe<BankBranchSearchFilter>;
};

export type BankBranchSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type BankChartsOfAccount = {
  bankAccountNumber: Scalars['Int'];
  bankGLCode: Scalars['String'];
  bankId: Scalars['ID'];
};

export type BankDataMutation = {
  add: BankAddResult;
  delete: BankDeleteResult;
};

export type BankDataMutationAddArgs = {
  data?: InputMaybe<BankInput>;
  id: Scalars['ID'];
};

export type BankDataMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type BankDataQuery = {
  get?: Maybe<BankGetResult>;
  list?: Maybe<Array<Maybe<Bank>>>;
};

export type BankDataQueryGetArgs = {
  id: Scalars['ID'];
};

export type BankDataQueryListArgs = {
  filter?: InputMaybe<BankSearchFilter>;
};

export type BankDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankDataQuery>;
  recordId: Scalars['ID'];
};

export type BankGetResult = {
  data?: Maybe<Bank>;
  error?: Maybe<QueryError>;
};

export type BankInput = {
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type BankMutation = {
  bank?: Maybe<BankDataMutation>;
  branch?: Maybe<BankBranchMutation>;
};

export type BankQuery = {
  bank?: Maybe<BankDataQuery>;
  branch?: Maybe<BankBranchQuery>;
};

export type BankSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type Branch = {
  abbsTransaction?: Maybe<AbbsTransaction>;
  address?: Maybe<Address>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  contactNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  manager?: Maybe<Member>;
  name?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
};

export type BranchAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<GeneralBranchSettingsQuery>;
  record?: Maybe<Branch>;
  recordId: Scalars['ID'];
};

export enum BranchCategory {
  BranchOffice = 'BRANCH_OFFICE',
  ContactOffice = 'CONTACT_OFFICE',
  HeadOffice = 'HEAD_OFFICE',
  RegionalOffice = 'REGIONAL_OFFICE',
  ServiceCenter = 'SERVICE_CENTER',
}

export type BranchConnection = {
  edges?: Maybe<Array<BranchEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type BranchDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<GeneralBranchSettingsQuery>;
  recordId: Scalars['ID'];
};

export type BranchEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Branch>;
};

export type BranchFormData = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  districtId?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['Date']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<LocationCoordinate>;
  managerId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  payableAccountId?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  receivableAccountId?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type BranchGetResult = {
  data?: Maybe<BranchFormData>;
  error?: Maybe<QueryError>;
};

export type BranchInput = {
  abbsStatus?: InputMaybe<Scalars['Boolean']>;
  branchCode?: InputMaybe<Scalars['String']>;
  branchStatus?: InputMaybe<Scalars['Boolean']>;
  category?: InputMaybe<BranchCategory>;
  districtId?: InputMaybe<Scalars['Int']>;
  email?: InputMaybe<Scalars['String']>;
  estDate?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  managerId?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  payableAccountId?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  plTransferId?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  receivableAccountId?: InputMaybe<Scalars['String']>;
  tdsTransaferId?: InputMaybe<Scalars['String']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BranchSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export enum CoaTypesOfAccount {
  Bank = 'BANK',
  Cash = 'CASH',
  Journal = 'JOURNAL',
}

export type ChartsOfAccount = Base & {
  accountType: CoaTypesOfAccount;
  accountTypeDetails?: Maybe<AccountTypeDetailsUnion>;
  active: Scalars['Boolean'];
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  classId: Scalars['ID'];
  code: Scalars['String'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  currency: Scalars['String'];
  hasSubAccounts: Scalars['Boolean'];
  id: Scalars['ID'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  /**  can be either account or a group */
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  level: Scalars['Int'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['String'];
  objState: ObjState;
  openingBalance: Scalars['Float'];
  parent?: Maybe<Account>;
};

export type ChartsOfAccountClass = {
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ChartsOfAccountClassResult = {
  data: Array<ChartsOfAccountClass>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountFilter = {
  active?: InputMaybe<Scalars['Boolean']>;
  classId?: InputMaybe<Scalars['ID']>;
  hasSubAccounts?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  isLedgerAccount?: InputMaybe<Scalars['Boolean']>;
  parentId?: InputMaybe<Scalars['ID']>;
};

export type ChartsOfAccountMutation = {
  add: AddChartsOfAccountResult;
};

export type ChartsOfAccountMutationAddArgs = {
  data: AddCoaAccountInput;
};

export type ChartsOfAccountResult = {
  data?: Maybe<Array<ChartsOfAccount>>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountSettingsMutation = {
  account?: Maybe<ChartsOfAccountMutation>;
};

export type ChartsOfAccountSettingsQuery = {
  accounts: ChartsOfAccountResult;
  class?: Maybe<ChartsOfAccountClassResult>;
};

export type ChartsOfAccountSettingsQueryAccountsArgs = {
  filter: ChartsOfAccountFilter;
};

export type ChequePastRequest = {
  account: Account;
  branch: Branch;
  id: Scalars['ID'];
  requestNumber: Scalars['Int'];
  requestType: Scalars['String'];
  status: EBankingServiceStatus;
};

export type Citizenship = {
  inNepali?: Maybe<CitizenshipInNepali>;
  issueDate?: Maybe<Scalars['String']>;
  issuePlace?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type CitizenshipInNepali = {
  issuePlace?: Maybe<Scalars['String']>;
};

export enum ComparatorType {
  EqualTo = 'EqualTo',
  GreaterThan = 'GreaterThan',
  LessThan = 'LessThan',
}

export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type ConfigQuery = {
  bank?: Maybe<Bank>;
  banks?: Maybe<Array<Maybe<Bank>>>;
  countries?: Maybe<Array<Maybe<Country>>>;
  country?: Maybe<Country>;
};

export type ConfigQueryBankArgs = {
  id: Scalars['ID'];
};

export type ConfigQueryCountryArgs = {
  code: Scalars['String'];
};

export type Contact = {
  mobile?: Maybe<Scalars['String']>;
  office?: Maybe<Scalars['String']>;
  residence?: Maybe<Scalars['String']>;
};

export type CoopRelatedTraining = {
  dateOfTraining?: InputMaybe<Scalars['Date']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type CoopRelatedTrainingType = {
  dateOfTraining?: Maybe<Scalars['Date']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CoopUnionAccountOperatorDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<KymCoopUnionAccountOperatorDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCoopUnionAccountOperatorStatus>;
  bodDetails?: Maybe<KymCoopUnionBodDetailsStatus>;
  centralRepresentativeDetails?: Maybe<KymCoopUnionCentralRepresentativeStatus>;
  declaration?: Maybe<KymCoopUnionDeclarationStatus>;
  economicDetails?: Maybe<KymCoopUnionEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCoopUnionInstitutionalInformationStatus>;
};

export type CoopUnionBodDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<KymCoopUnionBodDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionCentralRepresentativeDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionCentralRepresentativeDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionDeclarationInput = {
  documents?: InputMaybe<Array<InputMaybe<KymCoopUnionDocumentsInput>>>;
};

export type CoopUnionDeclarationResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionDeclaration>;
  recordId: Scalars['ID'];
};

export type CoopUnionEconomicDetailsInput = {
  administrativeExpense?: InputMaybe<Scalars['Float']>;
  bankCurrent?: InputMaybe<Scalars['Float']>;
  bankTarget?: InputMaybe<Scalars['Float']>;
  capitalGrantCurrent?: InputMaybe<Scalars['Float']>;
  capitalGrantTarget?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  deferredTaxExpense?: InputMaybe<Scalars['Float']>;
  directExpense?: InputMaybe<Scalars['Float']>;
  financialCost?: InputMaybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromSales?: InputMaybe<Scalars['Float']>;
  incomeFromServiceOperation?: InputMaybe<Scalars['Float']>;
  investmentsCurrent?: InputMaybe<Scalars['Float']>;
  investmentsTarget?: InputMaybe<Scalars['Float']>;
  loanAccountCurrent?: InputMaybe<Scalars['Float']>;
  loanAccountTarget?: InputMaybe<Scalars['Float']>;
  loanCurrent?: InputMaybe<Scalars['Float']>;
  loanTarget?: InputMaybe<Scalars['Float']>;
  miscellaneousIncome?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  otherIncome?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  purchase?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusTarget?: InputMaybe<Scalars['Float']>;
  riskManagementCost?: InputMaybe<Scalars['Float']>;
  savingDepositCurrent?: InputMaybe<Scalars['Float']>;
  savingDepositTarget?: InputMaybe<Scalars['Float']>;
  shareCapitalCurrent?: InputMaybe<Scalars['Float']>;
  shareCapitalTarget?: InputMaybe<Scalars['Float']>;
};

export type CoopUnionEconomicDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionEconomicDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionInstitutionInformationInput = {
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  applicantContactNo?: InputMaybe<Scalars['String']>;
  applicantDateOfMembership?: InputMaybe<Scalars['String']>;
  applicantDesignationEn?: InputMaybe<Scalars['String']>;
  applicantDesignationNp?: InputMaybe<Scalars['String']>;
  applicantEmail?: InputMaybe<Scalars['String']>;
  applicantHighestQualification?: InputMaybe<Scalars['String']>;
  applicantIsPermanentAndTemporaryAddrSame?: InputMaybe<Scalars['Boolean']>;
  applicantName?: InputMaybe<Scalars['String']>;
  applicantNameNp?: InputMaybe<Scalars['String']>;
  applicantPanNo?: InputMaybe<Scalars['String']>;
  applicantPermanentAddress?: InputMaybe<KymAddressInput>;
  applicantTemporaryAddress?: InputMaybe<KymAddressInput>;
  branchOfficeAddress?: InputMaybe<KymAddressInput>;
  contactEmail?: InputMaybe<Scalars['String']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  fax?: InputMaybe<Scalars['String']>;
  institutionType?: InputMaybe<Scalars['ID']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  lastAgmDate?: InputMaybe<Scalars['Date']>;
  nameOfBank?: InputMaybe<Scalars['ID']>;
  nameOfInstitutionEn?: InputMaybe<Scalars['String']>;
  nameOfInstitutionNp?: InputMaybe<Scalars['String']>;
  natureOfBusinessEn?: InputMaybe<Scalars['String']>;
  natureOfBusinessNp?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  noOfEmployee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfInstitutionalMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfInstitutionalMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberTarget?: InputMaybe<Scalars['Int']>;
  operatingOfficeAddress?: InputMaybe<KymAddressInput>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  regdAddress?: InputMaybe<KymAddressInput>;
  regdDate?: InputMaybe<Scalars['Date']>;
  regdNo?: InputMaybe<Scalars['String']>;
  vatOrPan?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type CoopUnionInstitutionInformationResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionInstitutionInformation>;
  recordId: Scalars['ID'];
};

export type CoopUnionPersonnelDetails = {
  centralRepID?: Maybe<Scalars['ID']>;
  citizenshipNo?: Maybe<Scalars['String']>;
  cooperativeUnionId?: Maybe<Scalars['ID']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designationEn?: Maybe<Scalars['String']>;
  designationNp?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNumber?: Maybe<Scalars['String']>;
  notAmongDirectors?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type CoopUnionPersonnelDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CoopUnionPersonnelDetails>;
  recordId?: Maybe<Scalars['String']>;
};

export type CoopUnionPersonnelInput = {
  centralRepID?: InputMaybe<Scalars['ID']>;
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  designationEn?: InputMaybe<Scalars['String']>;
  designationNp?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  fullNameNp?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  /**  The two fields below are only applicable for Central representative section  */
  notAmongDirectors?: InputMaybe<Scalars['Boolean']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  trainingAttended?: InputMaybe<Array<InputMaybe<CoopRelatedTraining>>>;
};

export enum CoopUnionSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  Declaration = 'DECLARATION',
  EconomicDetails = 'ECONOMIC_DETAILS',
  InstitutionInformation = 'INSTITUTION_INFORMATION',
  MemberDetails = 'MEMBER_DETAILS',
}

export type CooperativeAccountOperatorDetails = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateofTrainig?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<Address>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CooperativeAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCooperativeAccountOperatorStatus>;
  bodDetails?: Maybe<KymCooperativeBodDetailsStatus>;
  declaration?: Maybe<KymCooperativeDeclarationStatus>;
  economicDetails?: Maybe<KymCooperativeEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCooperativeInstitutionalInformationStatus>;
};

export type CooperativeBodDetails = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<Address>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
};

export type CooperativeDeclaration = {
  accountHolderdocuments?: Maybe<Array<Maybe<CooperativeDocuments>>>;
  accountHoldersName?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<CooperativeDocuments>>>;
};

export type CooperativeDocuments = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type CooperativeEconomicDetails = {
  bank?: Maybe<Scalars['Float']>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  investments?: Maybe<Scalars['Float']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
};

export type CooperativeMember = {
  accountOperatorsDetails?: Maybe<CooperativeAccountOperatorDetails>;
  boardOfDirectorsDetails?: Maybe<CooperativeBodDetails>;
  declaration?: Maybe<CooperativeDeclaration>;
  economicDetails?: Maybe<CooperativeEconomicDetails>;
  organizationInformation?: Maybe<CooperativeOrganizationInformation>;
};

export type CooperativeOrganizationInformation = {
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeTypeId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['Date']>;
  lastAuditDate?: Maybe<Scalars['Date']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmloyee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  operatingAddress?: Maybe<Address>;
  oprLatitude?: Maybe<Scalars['String']>;
  oprLongitude?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Address>;
  regdDate?: Maybe<Scalars['Date']>;
  regdLatitude?: Maybe<Scalars['String']>;
  regdLongitude?: Maybe<Scalars['String']>;
  regdNumber?: Maybe<Scalars['Int']>;
  regdOffice?: Maybe<Scalars['String']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export type CooperativeUnionAccountOperatorDetails = {
  accountOperatorsDetails?: Maybe<
    Array<Maybe<KymCoopUnionAccountOperatorDetails>>
  >;
};

export type CooperativeUnionBodDetails = {
  boardOfDirectorsDetails?: Maybe<Array<Maybe<KymCoopUnionBodDetails>>>;
};

export type CooperativeUnionCentralRepresentativeDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  crDecisionDocument?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  notAmongDirectors?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type CooperativeUnionDeclaration = {
  documents?: Maybe<Array<Maybe<KymCoopUnionDocuments>>>;
};

export type CooperativeUnionEconomicDetails = {
  administrativeExpense?: Maybe<Scalars['Float']>;
  bankCurrent?: Maybe<Scalars['Float']>;
  bankTarget?: Maybe<Scalars['Float']>;
  capitalGrantCurrent?: Maybe<Scalars['Float']>;
  capitalGrantTarget?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: Maybe<Scalars['Float']>;
  currentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  currentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  deferredTaxExpense?: Maybe<Scalars['Float']>;
  directExpense?: Maybe<Scalars['Float']>;
  financialCost?: Maybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromInvestment?: Maybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromSales?: Maybe<Scalars['Float']>;
  incomeFromServiceOperation?: Maybe<Scalars['Float']>;
  investmentsCurrent?: Maybe<Scalars['Float']>;
  investmentsTarget?: Maybe<Scalars['Float']>;
  loanAccountCurrent?: Maybe<Scalars['Float']>;
  loanAccountTarget?: Maybe<Scalars['Float']>;
  loanCurrent?: Maybe<Scalars['Float']>;
  loanTarget?: Maybe<Scalars['Float']>;
  miscellaneousIncome?: Maybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  otherIncome?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  purchase?: Maybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: Maybe<Scalars['Float']>;
  reserveAndSurplusTarget?: Maybe<Scalars['Float']>;
  riskManagementCost?: Maybe<Scalars['Float']>;
  savingDepositCurrent?: Maybe<Scalars['Float']>;
  savingDepositTarget?: Maybe<Scalars['Float']>;
  shareCapitalCurrent?: Maybe<Scalars['Float']>;
  shareCapitalTarget?: Maybe<Scalars['Float']>;
};

export type CooperativeUnionInstitutionInformation = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  applicantContactNo?: Maybe<Scalars['String']>;
  applicantDateOfMembership?: Maybe<Scalars['String']>;
  applicantDesignationEn?: Maybe<Scalars['String']>;
  applicantDesignationNp?: Maybe<Scalars['String']>;
  applicantEmail?: Maybe<Scalars['String']>;
  applicantHighestQualification?: Maybe<Scalars['String']>;
  applicantIsPermanentAndTemporaryAddrSame?: Maybe<Scalars['Boolean']>;
  applicantName?: Maybe<Scalars['String']>;
  applicantNameNp?: Maybe<Scalars['String']>;
  applicantPanNo?: Maybe<Scalars['String']>;
  applicantPermanentAddress?: Maybe<KymAddress>;
  applicantTemporaryAddress?: Maybe<KymAddress>;
  branchOfficeAddress?: Maybe<KymAddress>;
  contactEmail?: Maybe<Scalars['String']>;
  declarationAgreement?: Maybe<Scalars['Boolean']>;
  fax?: Maybe<Scalars['String']>;
  institutionType?: Maybe<Scalars['ID']>;
  issuingOffice?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['Date']>;
  nameOfBank?: Maybe<Scalars['ID']>;
  nameOfInstitutionEn?: Maybe<Scalars['String']>;
  nameOfInstitutionNp?: Maybe<Scalars['String']>;
  natureOfBusinessEn?: Maybe<Scalars['String']>;
  natureOfBusinessNp?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  noOfEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: Maybe<Scalars['Int']>;
  noOfInstitutionalMemberCurrent?: Maybe<Scalars['Int']>;
  noOfInstitutionalMemberTarget?: Maybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfMaleMemberTarget?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<KymAddress>;
  regdDate?: Maybe<Scalars['Date']>;
  regdNo?: Maybe<Scalars['String']>;
  vatOrPan?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type CooperativeUnionMember = {
  accountOperatorsDetails?: Maybe<KymCooperativeUnionPersonnelDetails>;
  boardOfDirectorsDetails?: Maybe<KymCooperativeUnionPersonnelDetails>;
  centralRepresentativeDetails?: Maybe<CoopUnionPersonnelDetails>;
  declaration?: Maybe<CooperativeUnionDeclaration>;
  economicDetails?: Maybe<CooperativeUnionEconomicDetails>;
  id?: Maybe<Scalars['ID']>;
  institutionInformation?: Maybe<CooperativeUnionInstitutionInformation>;
};

export enum CooperativeUnionPersonnelSection {
  AccountOperators = 'ACCOUNT_OPERATORS',
  CentralRepresentative = 'CENTRAL_REPRESENTATIVE',
  Directors = 'DIRECTORS',
}

export type Coordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type CoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type Country = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export enum CriteriaSection {
  Age = 'AGE',
  CooperativeType = 'COOPERATIVE_TYPE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  Ethnicity = 'ETHNICITY',
  ForeignEmployment = 'FOREIGN_EMPLOYMENT',
  Gender = 'GENDER',
  MaritalStatus = 'MARITAL_STATUS',
  NatureOfBusinessCoopunion = 'NATURE_OF_BUSINESS_COOPUNION',
  NatureOfBusinessInstitutions = 'NATURE_OF_BUSINESS_INSTITUTIONS',
  OccupationDetails = 'OCCUPATION_DETAILS',
}

export type CustomFormListQueryResult = {
  data?: Maybe<Array<Maybe<FormElement>>>;
  error?: Maybe<QueryError>;
};

export type CustomFormQuery = {
  list: CustomFormListQueryResult;
};

export type CustomFormQueryListArgs = {
  filter: CustomListFilter;
};

export type CustomListFilter = {
  category: FormCategory;
};

export type DashboardData = {
  listDashboardTask?: Maybe<Array<Maybe<DashboardTask>>>;
  listTodayTrend?: Maybe<Array<Maybe<TodayTrend>>>;
};

export type DashboardEmployee = {
  id: Scalars['ID'];
  image: Scalars['String'];
  name?: Maybe<Scalars['String']>;
};

export type DashboardQuery = {
  dashboardData?: Maybe<DashboardData>;
};

export type DashboardTask = {
  createdBy?: Maybe<DashboardEmployee>;
  createdFor?: Maybe<DashboardEmployee>;
  description?: Maybe<Scalars['String']>;
  due?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  title?: Maybe<Scalars['String']>;
};

export enum DashboardTodayType {
  Deposits = 'DEPOSITS',
  Loan = 'LOAN',
  Transaction = 'TRANSACTION',
  Withdraws = 'WITHDRAWS',
}

export enum DateType {
  Ad = 'AD',
  Bs = 'BS',
}

export type Declaration = Base & {
  content: Scalars['Localized'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  for: DeclarationFor;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export enum DeclarationFor {
  KymCoop = 'KYM_COOP',
  KymCoopUnion = 'KYM_COOP_UNION',
  KymIndividual = 'KYM_INDIVIDUAL',
  KymInstitution = 'KYM_INSTITUTION',
}

export type DeclarationGetResult = {
  data?: Maybe<Declaration>;
  error?: Maybe<QueryError>;
};

export type DeclarationInput = {
  dataEn?: InputMaybe<Scalars['String']>;
  dataNp?: InputMaybe<Scalars['String']>;
  for: DeclarationFor;
};

export type DeclarationMutation = {
  update: DeclarationUpdateResult;
};

export type DeclarationMutationUpdateArgs = {
  data: DeclarationInput;
};

export type DeclarationQuery = {
  get?: Maybe<DeclarationGetResult>;
};

export type DeclarationQueryGetArgs = {
  for?: InputMaybe<DeclarationFor>;
};

export type DeclarationSettingMutation = {
  declaration: DeclarationMutation;
};

export type DeclarationSettingQuery = {
  declaration: DeclarationQuery;
};

export type DeclarationUpdateResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DeclarationQuery>;
  record?: Maybe<Declaration>;
};

export type DepositIro = {
  id: Scalars['ID'];
  iroAddress?: Maybe<Scalars['String']>;
  iroCode?: Maybe<Scalars['String']>;
  iroName?: Maybe<Scalars['String']>;
};

export type DepositIroFormStateData = {
  iroAddress?: Maybe<Scalars['String']>;
  iroCode?: Maybe<Scalars['String']>;
  iroName?: Maybe<Scalars['String']>;
};

export type DepositIroFormStateResult = {
  data?: Maybe<DepositIroFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositIroInput = {
  iroAddress?: InputMaybe<Scalars['String']>;
  iroCode?: InputMaybe<Scalars['String']>;
  iroName?: InputMaybe<Scalars['String']>;
};

export type DepositIroResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositSettingsQuery>;
  record?: Maybe<DepositIro>;
  recordId: Scalars['ID'];
};

export type DepositLoanAccount = Base & {
  agentId?: Maybe<Scalars['ID']>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  boardAuthority?: Maybe<Scalars['Boolean']>;
  ceoAuthority?: Maybe<Scalars['Boolean']>;
  chequeIssue?: Maybe<Scalars['Boolean']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  depositFrequencyDay?: Maybe<Scalars['Int']>;
  depositFrequencyDayOfWeek?: Maybe<Week>;
  depositFrequencyFrequencyDay?: Maybe<Scalars['String']>;
  depositFrequencyMonthly?: Maybe<WeeklyFrequency>;
  depositFrequencyWeekly?: Maybe<Week>;
  depositFrequencyYearlyDay?: Maybe<Week>;
  depositFrequencyYearlyMonth?: Maybe<Months>;
  id: Scalars['ID'];
  interestRate?: Maybe<Scalars['Float']>;
  memberId: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  productId: Scalars['ID'];
  tenure?: Maybe<FrequencyTenure>;
  tenureNumber?: Maybe<Scalars['Int']>;
};

export type DepositLoanAccountConnection = {
  edges: Array<DepositLoanAccountEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type DepositLoanAccountEdge = {
  cursor: Scalars['Cursor'];
  node: DepositLoanAccount;
};

export type DepositLoanAccountFormStateResult = {
  data?: Maybe<DepositLoanAccount>;
  error?: Maybe<QueryError>;
};

export type DepositLoanAccountInput = {
  agentId?: InputMaybe<Scalars['ID']>;
  atmFacility?: InputMaybe<Scalars['Boolean']>;
  boardAuthority?: InputMaybe<Scalars['Boolean']>;
  ceoAuthority?: InputMaybe<Scalars['Boolean']>;
  chequeIssue?: InputMaybe<Scalars['Boolean']>;
  depositFrequencyDay?: InputMaybe<Scalars['Int']>;
  depositFrequencyDayOfWeek?: InputMaybe<Week>;
  depositFrequencyFrequencyDay?: InputMaybe<Scalars['String']>;
  depositFrequencyMonthly?: InputMaybe<WeeklyFrequency>;
  depositFrequencyWeekly?: InputMaybe<Week>;
  depositFrequencyYearlyDay?: InputMaybe<Week>;
  depositFrequencyYearlyMonth?: InputMaybe<Months>;
  interestRate?: InputMaybe<Scalars['Float']>;
  memberId: Scalars['ID'];
  productId: Scalars['ID'];
  tenure?: InputMaybe<FrequencyTenure>;
  tenureNumber?: InputMaybe<Scalars['Int']>;
};

export type DepositLoanAccountMutation = {
  add?: Maybe<DepositLoanAccountResult>;
};

export type DepositLoanAccountMutationAddArgs = {
  data?: InputMaybe<DepositLoanAccountInput>;
  id: Scalars['ID'];
};

export type DepositLoanAccountQuery = {
  formState?: Maybe<DepositLoanAccountFormStateResult>;
  get?: Maybe<DepositLoanAccount>;
  list?: Maybe<DepositLoanAccountConnection>;
};

export type DepositLoanAccountQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryGetArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryListArgs = {
  filter?: InputMaybe<DepositLoanAccountSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositLoanAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositLoanAccountQuery>;
  record?: Maybe<DepositLoanAccount>;
  recordId: Scalars['ID'];
};

export type DepositLoanAccountSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type DepositProduct = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate: Scalars['String'];
  id: Scalars['ID'];
  interest: Scalars['Float'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  nature: NatureOfDepositProduct;
  objState: ObjState;
  productCode: Scalars['String'];
  productName: Scalars['String'];
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
};

export type DepositProductConnection = {
  edges: Array<DepositProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type DepositProductEdge = {
  cursor: Scalars['Cursor'];
  node: DepositProduct;
};

export type DepositProductFormStateData = {
  accountType?: Maybe<Scalars['ID']>;
  allowLoan?: Maybe<Scalars['Boolean']>;
  alternativeChannels?: Maybe<Scalars['Boolean']>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  autoOpen?: Maybe<Scalars['Boolean']>;
  balanceLimit?: Maybe<AmountLimitFormState>;
  chequeIssue?: Maybe<Scalars['Boolean']>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  depositAmount?: Maybe<AmountLimitFormState>;
  depositFrequency?: Maybe<Frequency>;
  dormantSetup?: Maybe<Array<Maybe<DormantSetupFormState>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  individualDocuments?: Maybe<Array<Maybe<IndividualRequiredDocument>>>;
  institutionDocuments?: Maybe<Array<Maybe<InstitutionRequiredDocument>>>;
  interest?: Maybe<InterestFormState>;
  ladderRate?: Maybe<Scalars['Boolean']>;
  ladderRateData?: Maybe<Array<Maybe<LadderRateFormState>>>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxPostingFreqDifference?: Maybe<Scalars['Int']>;
  maxTenure?: Maybe<Scalars['Boolean']>;
  maxTenureUnit?: Maybe<Frequency>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minTenure?: Maybe<Scalars['Boolean']>;
  minTenureUnit?: Maybe<Frequency>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  nature?: Maybe<NatureOfDepositProduct>;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penalty?: Maybe<Scalars['Boolean']>;
  penaltyData?: Maybe<PenaltyFormState>;
  percentageOfDeposit?: Maybe<Scalars['Float']>;
  postingFrequency?: Maybe<Frequency>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  productCode: ProductCodeFormState;
  productName?: Maybe<Scalars['String']>;
  rebate?: Maybe<Scalars['Boolean']>;
  rebateData?: Maybe<RebateFormState>;
  serviceCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  specifyWithdrawRestriction?: Maybe<Scalars['String']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultiple?: Maybe<Scalars['Boolean']>;
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: Maybe<Scalars['Boolean']>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductFormStateResult = {
  data?: Maybe<DepositProductFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositProductInput = {
  accountType?: InputMaybe<Scalars['ID']>;
  allowLoan?: InputMaybe<Scalars['Boolean']>;
  alternativeChannels?: InputMaybe<Scalars['Boolean']>;
  atmFacility?: InputMaybe<Scalars['Boolean']>;
  autoOpen?: InputMaybe<Scalars['Boolean']>;
  balanceLimit?: InputMaybe<AmountLimit>;
  chequeIssue?: InputMaybe<Scalars['Boolean']>;
  cooperativeType?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  criteria?: InputMaybe<Array<InputMaybe<CriteriaSection>>>;
  depositAmount?: InputMaybe<AmountLimit>;
  depositFrequency?: InputMaybe<Frequency>;
  dormantSetup?: InputMaybe<Array<InputMaybe<DormantSetup>>>;
  educationQualification?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  ethnicity?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  foreignEmployment?: InputMaybe<Scalars['Boolean']>;
  genderId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  individualDocuments?: InputMaybe<
    Array<InputMaybe<IndividualRequiredDocument>>
  >;
  institutionDocuments?: InputMaybe<
    Array<InputMaybe<InstitutionRequiredDocument>>
  >;
  interest: InterestRate;
  ladderRate?: InputMaybe<Scalars['Boolean']>;
  ladderRateData?: InputMaybe<Array<InputMaybe<LadderRate>>>;
  maritalStatusId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  maxAge?: InputMaybe<Scalars['Int']>;
  maxPostingFreqDifference?: InputMaybe<Scalars['Int']>;
  maxTenure?: InputMaybe<Scalars['Boolean']>;
  maxTenureUnit?: InputMaybe<Frequency>;
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minTenure?: InputMaybe<Scalars['Boolean']>;
  minTenureUnit?: InputMaybe<Frequency>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  nature: NatureOfDepositProduct;
  natureOFBusinessCoop?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  penalty?: InputMaybe<Scalars['Boolean']>;
  penaltyData?: InputMaybe<PenaltyInput>;
  percentageOfDeposit?: InputMaybe<Scalars['Float']>;
  postingFrequency?: InputMaybe<Frequency>;
  prematurePenalty?: InputMaybe<PrematurePenalty>;
  productCode: ProductCode;
  productName: Scalars['String'];
  rebate?: InputMaybe<Scalars['Boolean']>;
  rebateData?: InputMaybe<RebateInput>;
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  specifyWithdrawRestriction?: InputMaybe<Scalars['String']>;
  staffProduct?: InputMaybe<Scalars['Boolean']>;
  supportMultiple?: InputMaybe<Scalars['Boolean']>;
  typeOfMember?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: InputMaybe<Scalars['Boolean']>;
  withdrawRestricted?: InputMaybe<Scalars['Boolean']>;
};

export type DepositProductList = {
  data?: Maybe<Array<Maybe<DepositProduct>>>;
  error?: Maybe<QueryError>;
};

export type DepositProductResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositProductSettingsQuery>;
  record?: Maybe<DepositProduct>;
  recordId: Scalars['ID'];
};

export type DepositProductSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type DepositProductSettingsMutation = {
  add?: Maybe<DepositProductResult>;
};

export type DepositProductSettingsMutationAddArgs = {
  data?: InputMaybe<DepositProductInput>;
  id: Scalars['ID'];
};

export type DepositProductSettingsQuery = {
  formState?: Maybe<DepositProductFormStateResult>;
  get?: Maybe<DepositProduct>;
  getProductList?: Maybe<DepositProductList>;
  list?: Maybe<DepositProductConnection>;
};

export type DepositProductSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetProductListArgs = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type DepositProductSettingsQueryListArgs = {
  filter?: InputMaybe<DepositProductSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositSettingsMutation = {
  iroSetup?: Maybe<DepositIroResult>;
  tdsSetup?: Maybe<DepositTdsResult>;
};

export type DepositSettingsMutationIroSetupArgs = {
  data?: InputMaybe<DepositIroInput>;
};

export type DepositSettingsMutationTdsSetupArgs = {
  data?: InputMaybe<DepositTdsInput>;
};

export type DepositSettingsQuery = {
  iroFormState?: Maybe<DepositIroFormStateResult>;
  tdsFormState?: Maybe<DepositTdsFormStateResult>;
};

export type DepositTds = {
  coopUnion?: Maybe<Scalars['Float']>;
  cooperative?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  individual?: Maybe<Scalars['Float']>;
  institution?: Maybe<Scalars['Float']>;
};

export type DepositTdsFormStateData = {
  coopUnion?: Maybe<Scalars['Float']>;
  cooperative?: Maybe<Scalars['Float']>;
  individual?: Maybe<Scalars['Float']>;
  institution?: Maybe<Scalars['Float']>;
};

export type DepositTdsFormStateResult = {
  data?: Maybe<DepositTdsFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositTdsInput = {
  coopUnion?: InputMaybe<Scalars['Float']>;
  cooperative?: InputMaybe<Scalars['Float']>;
  individual?: InputMaybe<Scalars['Float']>;
  institution?: InputMaybe<Scalars['Float']>;
};

export type DepositTdsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositSettingsQuery>;
  record?: Maybe<DepositTds>;
  recordId: Scalars['ID'];
};

export type DirectorAffiliatedFirms = {
  addressOfInstitution?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type DirectorDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  firmDetails?: Maybe<AffiliatedDirectorDetailsFormState>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isAffiliatedWithOtherFirms?: Maybe<Scalars['Boolean']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type DirectorDetailsType = {
  affiliatedFirms?: Maybe<Array<Maybe<DirectorAffiliatedFirms>>>;
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  documentPhotograph?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  isAffiliatedWithOtherFirms?: Maybe<Scalars['Boolean']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanenetAddress?: Maybe<KymAddress>;
  photograph?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type District = {
  id: Scalars['Int'];
  municipalities: Array<Municipality>;
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type Document = {
  photo?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
};

export type DocumentMutation = {
  KYMUpsert: DocumentMutationResult;
  Subscription: SubscriptionMutation;
};

export type DocumentMutationKymUpsertArgs = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
  memberId: Scalars['String'];
};

export type DocumentMutationSubscriptionArgs = {
  subscriptionId: Scalars['String'];
};

export type DocumentMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UploadedDocument>;
  recordId?: Maybe<Scalars['ID']>;
};

export type DocumentQuery = {
  listKYMDocuments: DocumentResult;
  listSubscriptionDocuments: DocumentResult;
};

export type DocumentQueryListKymDocumentsArgs = {
  memberId: Scalars['String'];
};

export type DocumentQueryListSubscriptionDocumentsArgs = {
  subscriptionId: Scalars['String'];
};

export type DocumentResult = {
  data?: Maybe<Array<Maybe<UploadedDocument>>>;
  error?: Maybe<QueryError>;
};

export type DormantSetup = {
  condition?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
};

export type DormantSetupFormState = {
  condition?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['String']>;
};

export type EBankingAccountQuery = {
  get?: Maybe<Account>;
  list?: Maybe<AccountConnection>;
  summary?: Maybe<AccountSummary>;
};

export type EBankingAccountQueryGetArgs = {
  id: Scalars['ID'];
};

export type EBankingAccountQueryListArgs = {
  paginate?: InputMaybe<Pagination>;
};

export enum EBankingActiveLoanStatus {
  Pending = 'Pending',
  Processing = 'Processing',
  Scheduled = 'Scheduled',
}

export type EBankingAnnouncementQuery = {
  list: Array<Maybe<EBankingAppAnnouncement>>;
};

export type EBankingAnnouncementQueryListArgs = {
  filter?: InputMaybe<NotificationFilter>;
};

export type EBankingAppAnnouncement = {
  date: Scalars['Date'];
  details: Scalars['HTML'];
  id: Scalars['ID'];
  summary: Scalars['String'];
  title: Scalars['String'];
};

export type EBankingAppNotification = {
  date: Scalars['Date'];
  description: Scalars['String'];
  id: Scalars['ID'];
  parameters: Scalars['Map'];
  subject: Scalars['String'];
};

export type EBankingAppNotificationQuery = {
  list: Array<Maybe<EBankingAppNotification>>;
};

export type EBankingAppNotificationQueryListArgs = {
  filter?: InputMaybe<NotificationFilter>;
};

export type EBankingApplyLoanInput = {
  amount?: InputMaybe<Scalars['Float']>;
  branch?: InputMaybe<BranchInput>;
  purpose?: InputMaybe<Scalars['String']>;
};

export type EBankingApplyLoanResult = {
  error?: Maybe<EBankingCooperativeServiceError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<EBankingLoanHistory>;
  recordID: Scalars['ID'];
};

export type EBankingChequeBlockInput = {
  chequeNumber?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<Scalars['String']>;
};

export type EBankingChequeMutation = {
  block?: Maybe<EBankingChequeResult>;
  request?: Maybe<EBankingChequeResult>;
  withdrawViaCollector?: Maybe<EBankingChequeResult>;
};

export type EBankingChequeMutationBlockArgs = {
  data?: InputMaybe<EBankingChequeBlockInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeMutationRequestArgs = {
  data?: InputMaybe<EBankingChequeRequestInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeMutationWithdrawViaCollectorArgs = {
  data?: InputMaybe<EBankingChequeWithdrawViaCollectorInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeQuery = {
  options: Array<EBankingCooperativeServiceOption>;
  pastRequests: Array<ChequePastRequest>;
};

export type EBankingChequeQueryPastRequestsArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
};

export type EBankingChequeRequestInput = {
  branch?: InputMaybe<BranchInput>;
  collector?: InputMaybe<Scalars['ID']>;
  type: EBankingChequeRequestType;
};

export enum EBankingChequeRequestType {
  SelfPickup = 'Self_Pickup',
  ThroughAgent = 'Through_agent',
}

export type EBankingChequeResult = {
  error?: Maybe<EBankingCooperativeServiceError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<ChequePastRequest>;
  recordID: Scalars['ID'];
};

export type EBankingChequeWithdrawViaCollectorInput = {
  amount?: InputMaybe<Scalars['Float']>;
  branch?: InputMaybe<Scalars['ID']>;
  collector?: InputMaybe<Scalars['ID']>;
};

export type EBankingCombined = {
  accounts: Array<Maybe<Account>>;
  recentTransactions: Array<Maybe<Transactions>>;
  services: Array<Maybe<Services>>;
  share: EbankingShare;
  utilityPayments: Array<Maybe<UtilityPayments>>;
};

export type EBankingComplaintHistory = {
  applicationNumber: Scalars['Int'];
  detailedAccount?: Maybe<Scalars['String']>;
  feedbackDate: Scalars['Date'];
  id: Scalars['ID'];
  peopleInvolved?: Maybe<Scalars['String']>;
  proposedSolution?: Maybe<Scalars['String']>;
  status: EBankingServiceStatus;
  violatedPolicies?: Maybe<Scalars['String']>;
};

export type EBankingComplaintMutation = {
  register?: Maybe<EBankingComplaintRegisterResult>;
};

export type EBankingComplaintMutationRegisterArgs = {
  data?: InputMaybe<EBankingRegisterComplaintInput>;
  memberID: Scalars['String'];
};

export type EBankingComplaintQuery = {
  history: Array<EBankingComplaintHistory>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingComplaintQueryHistoryArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
};

export type EBankingComplaintRegisterResult = {
  error?: Maybe<EBankingCooperativeServiceError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<EBankingComplaintHistory>;
  recordID: Scalars['ID'];
};

export type EBankingCooperativeServiceError =
  EBankingCooperativeServiceInvalidDataError;

export type EBankingCooperativeServiceFilter = {
  status?: InputMaybe<EBankingServiceStatus>;
};

export type EBankingCooperativeServiceInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type EBankingCooperativeServiceMutation = {
  cheque?: Maybe<EBankingChequeMutation>;
  complaint?: Maybe<EBankingComplaintMutation>;
  loan?: Maybe<EBankingLoanMutation>;
};

export type EBankingCooperativeServiceOption = {
  enabled: Scalars['Boolean'];
  name: Scalars['String'];
  requestType?: Maybe<Scalars['String']>;
};

export type EBankingCooperativeServiceQuery = {
  cheque?: Maybe<EBankingChequeQuery>;
  complaint?: Maybe<EBankingComplaintQuery>;
  downloads?: Maybe<EBankingDownloadsQuery>;
  loan?: Maybe<EBankingLoanQuery>;
  organizationInfo: Organization;
};

export type EBankingCooperativeServiceQueryOrganizationInfoArgs = {
  id: Scalars['ID'];
};

export type EBankingDownloadFile = {
  category: Scalars['String'];
  extension: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  size: Scalars['String'];
  url: Scalars['String'];
};

export type EBankingDownloadsFilter = {
  category?: InputMaybe<Scalars['String']>;
};

export type EBankingDownloadsQuery = {
  files: Array<EBankingDownloadFile>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingDownloadsQueryFilesArgs = {
  filter?: InputMaybe<EBankingDownloadsFilter>;
};

export type EBankingKymAddFormStatus = {
  lastUpdated: EBankingKymAddLus;
  sectionStatus?: Maybe<EBankingKymAddSectionStatus>;
};

export type EBankingKymAddLus =
  | EBankingKymCooperativeLus
  | EBankingKymDeclarationLus
  | EBankingKymPersonalLus
  | EBankingKymProfessionalLus;

export type EBankingKymAddLastUpdated = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMemberStatus>;
  declaration?: Maybe<EBankingKymDeclarationStatus>;
  personal?: Maybe<EBankingKymPersonalStatus>;
  professional?: Maybe<EBankingKymProfessionalStatus>;
};

export type EBankingKymAddSectionStatus = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMemberStatus>;
  declaration?: Maybe<EBankingKymDeclarationStatus>;
  personal?: Maybe<EBankingKymPersonalStatus>;
  professional?: Maybe<EBankingKymProfessionalStatus>;
};

export type EBankingKymCooperativeLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymCooperativeMemberSection {
  BackgroundInformation = 'BACKGROUND_INFORMATION',
  EstimatedTransactions = 'ESTIMATED_TRANSACTIONS',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
}

export type EBankingKymCooperativeMemberStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymCooperativeMemberSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymCooperativeMemberSection>>>;
};

export type EBankingKymCooperativeMembership = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['ID']>;
  familyMemberInThisCooperative?: Maybe<
    Array<Maybe<KymFamilyMemberDetailsInThisCooperativeFormState>>
  >;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  loan?: Maybe<Scalars['Float']>;
  memberNumberInAnotherCooperative?: Maybe<Scalars['String']>;
  nameAndAddressOfAnotherCooperative?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['Float']>;
  purposeId?: Maybe<Scalars['ID']>;
  savings?: Maybe<Scalars['Float']>;
  share?: Maybe<Scalars['Int']>;
};

export type EBankingKymCooperativeMembershipInput = {
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['ID']>;
  familyMemberInThisCooperative?: InputMaybe<
    Array<InputMaybe<KymFamilyMemberDetailsInThisCooperative>>
  >;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  loan?: InputMaybe<Scalars['Float']>;
  memberNumberInAnotherCooperative?: InputMaybe<Scalars['String']>;
  nameAndAddressOfAnotherCooperative?: InputMaybe<Scalars['String']>;
  other?: InputMaybe<Scalars['Float']>;
  purposeId?: InputMaybe<Scalars['ID']>;
  savings?: InputMaybe<Scalars['Float']>;
  share?: InputMaybe<Scalars['Int']>;
};

export type EBankingKymCooperativeMembershipResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymDeclaration = {
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['ID']>;
  convictionDetails?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<KymDocumentsFormState>>>;
  foreignResidencyType?: Maybe<Scalars['ID']>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  localKinAddress?: Maybe<Scalars['String']>;
  localKinContact?: Maybe<Scalars['String']>;
  localKinName?: Maybe<Scalars['String']>;
  localKinRelationshipId?: Maybe<Scalars['ID']>;
};

export type EBankingKymDeclarationInput = {
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['ID']>;
  convictionDetails?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<KymDocuments>>>;
  foreignResidencyType?: InputMaybe<Scalars['ID']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  localKinAddress?: InputMaybe<Scalars['String']>;
  localKinContact?: InputMaybe<Scalars['String']>;
  localKinName?: InputMaybe<Scalars['String']>;
  localKinRelationshipId?: InputMaybe<Scalars['ID']>;
};

export type EBankingKymDeclarationLus = {
  name: EBankingKymPersonalSection;
};

export type EBankingKymDeclarationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export enum EBankingKymDeclarationSection {
  DeclarationInformation = 'DECLARATION_INFORMATION',
}

export type EBankingKymDeclarationStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymDeclarationSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymDeclarationSection>>>;
};

export type EBankingKymFormData = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMembership>;
  declaration?: Maybe<EBankingKymDeclaration>;
  personalInformation?: Maybe<EBankingKymPersonalInformation>;
  professionalInformation?: Maybe<EBankingKymProfessionalInformation>;
};

export type EBankingKymFormState = {
  formData?: Maybe<EBankingKymFormData>;
  lastUpdated: EBankingKymAddLus;
  sectionStatus?: Maybe<EBankingKymAddSectionStatus>;
};

export type EBankingKymFormStateQuery = {
  data?: Maybe<EBankingKymFormState>;
};

export type EBankingKymIndAddError = EBankingKymInvalidDataError;

export type EBankingKymInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type EBankingKymMutation = {
  add?: Maybe<EBankingKymSectionMutation>;
  newKymId: Scalars['ID'];
};

export type EBankingKymMutationAddArgs = {
  id: Scalars['ID'];
};

export type EBankingKymMutationNewKymIdArgs = {
  cooperativeId: Scalars['ID'];
  memberId: Scalars['ID'];
};

export type EBankingKymPersonalInformation = {
  dateOfBirth?: Maybe<Scalars['String']>;
  educationQualificationId?: Maybe<Scalars['ID']>;
  email?: Maybe<Scalars['String']>;
  ethnicityId?: Maybe<Scalars['ID']>;
  familyDetails?: Maybe<Array<Maybe<KymFamilyDetailsFormState>>>;
  firstName?: Maybe<Scalars['String']>;
  genderId?: Maybe<Scalars['ID']>;
  identification?: Maybe<Array<Maybe<KymIdentificationFormState>>>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['String']>;
  livingInRentedHouse?: Maybe<Scalars['Boolean']>;
  longitude?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['ID']>;
  middleName?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['Int']>;
  nationalityId?: Maybe<Scalars['ID']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLocalityId?: Maybe<Scalars['ID']>;
  permanentMunicipalityId?: Maybe<Scalars['ID']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentTole?: Maybe<Scalars['String']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  phoneNumber?: Maybe<Scalars['Int']>;
  religionId?: Maybe<Scalars['ID']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLocalityId?: Maybe<Scalars['ID']>;
  temporaryMunicipalityId?: Maybe<Scalars['ID']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryTole?: Maybe<Scalars['String']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
};

export type EBankingKymPersonalInformationInput = {
  dateOfBirth?: InputMaybe<Scalars['String']>;
  educationQualificationId?: InputMaybe<Scalars['ID']>;
  email?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['ID']>;
  familyDetails?: InputMaybe<Array<InputMaybe<KymFamilyDetails>>>;
  firstName?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['ID']>;
  identification?: InputMaybe<Array<InputMaybe<KymIdentification>>>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  latitude?: InputMaybe<Scalars['String']>;
  livingInRentedHouse?: InputMaybe<Scalars['Boolean']>;
  longitude?: InputMaybe<Scalars['String']>;
  maritalStatusId?: InputMaybe<Scalars['ID']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['Int']>;
  nationalityId?: InputMaybe<Scalars['ID']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentMunicipalityId?: InputMaybe<Scalars['ID']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  phoneNumber?: InputMaybe<Scalars['Int']>;
  religionId?: InputMaybe<Scalars['ID']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryMunicipalityId?: InputMaybe<Scalars['ID']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
};

export type EBankingKymPersonalInformationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymPersonalLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymPersonalSection {
  Address = 'ADDRESS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  FamilyDetails = 'FAMILY_DETAILS',
  IdentificationDetails = 'IDENTIFICATION_DETAILS',
}

export type EBankingKymPersonalStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymPersonalSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymPersonalSection>>>;
};

export type EBankingKymProfessionalInformation = {
  annualIncomeSourceId?: Maybe<Scalars['ID']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymIncomeSourceDetailsFormState>>>;
  mainOccupation?: Maybe<Array<Maybe<KymOccupationDetailsFormState>>>;
  spouseOccupation?: Maybe<Array<Maybe<KymOccupationDetailsFormState>>>;
};

export type EBankingKymProfessionalInformationInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['ID']>;
  incomeSourceDetails?: InputMaybe<Array<InputMaybe<KymIncomeSourceDetails>>>;
  mainOccupation?: InputMaybe<Array<InputMaybe<KymOccupationDetails>>>;
  spouseOccupation?: InputMaybe<Array<InputMaybe<KymOccupationDetails>>>;
};

export type EBankingKymProfessionalInformationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymProfessionalLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymProfessionalSection {
  IncomeSource = 'INCOME_SOURCE',
  MainProfession = 'MAIN_PROFESSION',
  Profession = 'PROFESSION',
  SpouseOccupation = 'SPOUSE_OCCUPATION',
}

export type EBankingKymProfessionalStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymProfessionalSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymProfessionalSection>>>;
};

export type EBankingKymQuery = {
  formState: EBankingKymFormStateQuery;
};

export type EBankingKymQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type EBankingKymSectionMutation = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMembershipResult>;
  declaration?: Maybe<EBankingKymDeclarationResult>;
  personalInformation?: Maybe<EBankingKymPersonalInformationResult>;
  professionalInformation?: Maybe<EBankingKymProfessionalInformationResult>;
};

export type EBankingKymSectionMutationCooperativeMembershipArgs = {
  data?: InputMaybe<EBankingKymCooperativeMembershipInput>;
};

export type EBankingKymSectionMutationDeclarationArgs = {
  data?: InputMaybe<EBankingKymDeclarationInput>;
};

export type EBankingKymSectionMutationPersonalInformationArgs = {
  data?: InputMaybe<EBankingKymPersonalInformationInput>;
};

export type EBankingKymSectionMutationProfessionalInformationArgs = {
  data?: InputMaybe<EBankingKymProfessionalInformationInput>;
};

export type EBankingLoanHistory = {
  activeLoanStatus?: Maybe<EBankingActiveLoanStatus>;
  amount: Scalars['Float'];
  appliedDate: Scalars['Date'];
  branch: Branch;
  id: Scalars['String'];
  scheduledDate?: Maybe<Scalars['Date']>;
  status: EBankingServiceStatus;
  type: Scalars['String'];
};

export type EBankingLoanMutation = {
  apply?: Maybe<EBankingApplyLoanResult>;
};

export type EBankingLoanMutationApplyArgs = {
  data?: InputMaybe<EBankingApplyLoanInput>;
  memberID: Scalars['String'];
};

export type EBankingLoanQuery = {
  history: Array<EBankingLoanHistory>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingLoanQueryHistoryArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
};

export type EBankingMutation = {
  cooperativeServices?: Maybe<EBankingCooperativeServiceMutation>;
  kym?: Maybe<EBankingKymMutation>;
  utilityPayment: UtilityPayemntMutation;
};

export type EBankingNotificationQuery = {
  announcements?: Maybe<EBankingAnnouncementQuery>;
  appNotifications?: Maybe<EBankingAppNotificationQuery>;
};

export type EBankingQuery = {
  account?: Maybe<EBankingAccountQuery>;
  cooperativeServices?: Maybe<EBankingCooperativeServiceQuery>;
  home: EBankingCombined;
  kym?: Maybe<EBankingKymQuery>;
  me?: Maybe<Member>;
  notification?: Maybe<EBankingNotificationQuery>;
  services?: Maybe<Array<Maybe<Services>>>;
  share?: Maybe<EBankingShareQuery>;
  transaction?: Maybe<EBankingTransactionQuery>;
  utilityPayments?: Maybe<Array<Maybe<UtilityPayments>>>;
};

export type EBankingRegisterComplaintInput = {
  date?: InputMaybe<Scalars['Date']>;
  detailedAccount?: InputMaybe<Scalars['String']>;
  peopleInvolved?: InputMaybe<Scalars['String']>;
  policiesViolated?: InputMaybe<Scalars['String']>;
  proposedSolution?: InputMaybe<Scalars['String']>;
};

export enum EBankingServiceStatus {
  Active = 'Active',
  Completed = 'Completed',
  Declined = 'Declined',
}

export type EBankingShareQuery = {
  history?: Maybe<Array<Maybe<EbankingShareHistory>>>;
  summary: EbankingShare;
};

export type EBankingShareQueryHistoryArgs = {
  filter?: InputMaybe<EbankingShareFilter>;
};

export type EBankingTransactionQuery = {
  monthly: Array<Maybe<MonthlyTransactions>>;
  recent?: Maybe<Array<Maybe<Transactions>>>;
};

export type EBankingTransactionQueryMonthlyArgs = {
  filter?: InputMaybe<Filter>;
};

export type EBankingTransactionQueryRecentArgs = {
  filter?: InputMaybe<RecentTransactionFilter>;
};

export type EbankingShare = {
  totalShare: Scalars['Int'];
  value: Scalars['Float'];
};

export type EbankingShareFilter = {
  page: Scalars['String'];
};

export type EbankingShareHistory = {
  amount: Scalars['Float'];
  date: Scalars['Date'];
  id: Scalars['String'];
  numberOfShares: Scalars['Int'];
  title: Scalars['String'];
  transactionDirection: Transaction_Direction;
};

export type Example = {
  age: Scalars['Int'];
  enrolledAt: Scalars['Time'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ExampleInput = {
  age?: InputMaybe<Scalars['Int']>;
  enrolledAt?: InputMaybe<Scalars['Time']>;
  name: Scalars['String'];
};

export type ExampleMutation = {
  level1: Level1;
};

export type ExampleQuery = {
  localization: LocalizationExample;
  testDb: TestDbResult;
};

export enum File_Variant {
  Doc = 'DOC',
  Docx = 'DOCX',
  Jpeg = 'JPEG',
  Jpg = 'JPG',
  Other = 'OTHER',
  Pdf = 'PDF',
  Png = 'PNG',
}

export type FamilyDetails = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  inNepali?: Maybe<FamilyDetailsInNepali>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FamilyDetailsInNepali = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FieldDetailsQueryResult = {
  data?: Maybe<FormField>;
  error?: Maybe<QueryError>;
};

export type Filter = {
  orConditions: Array<OrConditions>;
};

export enum FormCategory {
  KymCoop = 'KYM_COOP',
  KymCoopUnion = 'KYM_COOP_UNION',
  KymIndividual = 'KYM_INDIVIDUAL',
  KymInstitution = 'KYM_INSTITUTION',
}

export type FormDynamicFieldsFilter = {
  category: FormCategory;
  searchTerm: FormSectionSearchTerm;
};

export type FormElement = FormField | FormSection;

export type FormElementDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormElementResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormElement>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormField = Base & {
  category: FormCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dependsOn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: FormFieldType;
  hasOtherField: Scalars['Boolean'];
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  options?: Maybe<Array<FormOption>>;
  order: Scalars['Int'];
  search_term?: Maybe<FormFieldSearchTerm>;
  section?: Maybe<FormSection>;
};

export type FormFieldDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormFieldInput = {
  category: FormCategory;
  dependsOn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: FormFieldType;
  hasOtherField: Scalars['Boolean'];
  maxSize?: InputMaybe<Scalars['Int']>;
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Array<FormOptionInput>>;
};

export type FormFieldMutation = {
  /**  Condition of fields should always be depended on options only  */
  condition: FormFieldMutationResult;
  delete: FormFieldDeleteResult;
  move: FormFieldMutationResult;
  update: FormFieldMutationResult;
  /**
   *  If SectionId is given then the field is wrapped by a section and this field won't have any options.
   *    if sectionID isn't given then this field will have options so, its type will only be   SINGLE_SELECT & MULTIPLE_SELECT
   */
  upsert: FormFieldMutationResult;
};

export type FormFieldMutationConditionArgs = {
  dependsOn: Array<InputMaybe<Scalars['ID']>>;
  fieldId: Scalars['ID'];
};

export type FormFieldMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormFieldMutationMoveArgs = {
  id: Scalars['ID'];
  to: Scalars['Int'];
};

export type FormFieldMutationUpdateArgs = {
  data: FormFieldUpdateInput;
  id: Scalars['ID'];
};

export type FormFieldMutationUpsertArgs = {
  data: FormFieldUpsertInput;
  sectionId?: InputMaybe<Scalars['ID']>;
};

export type FormFieldMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormField>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormFieldQuery = {
  details: FieldDetailsQueryResult;
};

export type FormFieldQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type FormFieldQueryResult = {
  data?: Maybe<Array<Maybe<FormField>>>;
  error?: Maybe<QueryError>;
};

export enum FormFieldSearchTerm {
  /**  KYM_COOP  */
  CooperativeType = 'COOPERATIVE_TYPE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction = 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity = 'ETHNICITY',
  ExpectedMonthlyTransaction = 'EXPECTED_MONTHLY_TRANSACTION',
  ExpectedMonthlyTurnover = 'EXPECTED_MONTHLY_TURNOVER',
  FamilyIncomeSource = 'FAMILY_INCOME_SOURCE',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions = 'FOREIGN_EMPLOYMENT_OPTIONS',
  /** KYM_INDIVIDUAL */
  Gender = 'GENDER',
  MaritalStatus = 'MARITAL_STATUS',
  Nationality = 'NATIONALITY',
  Occupation = 'OCCUPATION',
  /**  KYM_INSTITUTION */
  OrganizationType = 'ORGANIZATION_TYPE',
  Purpose = 'PURPOSE',
  Relationship = 'RELATIONSHIP',
  Religion = 'RELIGION',
}

export enum FormFieldType {
  /**  For Custom Variant  */
  Address = 'ADDRESS',
  Amount = 'AMOUNT',
  Bank = 'BANK',
  Date = 'DATE',
  District = 'DISTRICT',
  Email = 'EMAIL',
  Fax = 'FAX',
  /**  These are for SEARCH fields  */
  LocalLevel = 'LOCAL_LEVEL',
  MultipleFile = 'MULTIPLE_FILE',
  MultipleSelect = 'MULTIPLE_SELECT',
  NumberInput = 'NUMBER_INPUT',
  Paragraph = 'PARAGRAPH',
  PhoneNumber = 'PHONE_NUMBER',
  PoBox = 'PO_BOX',
  Province = 'PROVINCE',
  /**  These are for file   */
  SingleFile = 'SINGLE_FILE',
  /**  These are for SINGLE_SELECT, MULTI_SELECT  */
  SingleSelect = 'SINGLE_SELECT',
  TextInput = 'TEXT_INPUT',
  Url = 'URL',
}

export type FormFieldUpdateInput = {
  dependsOn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  fieldType?: InputMaybe<FormFieldType>;
  hasOtherField?: InputMaybe<Scalars['Boolean']>;
  maxSize?: InputMaybe<Scalars['Int']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

/**  This option will be always be added in last order */
export type FormFieldUpsertInput = {
  data?: InputMaybe<FormFieldInput>;
  /**  If id is supplied then it will be update operation else it will be insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormOption = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  field: FormField;
  id: Scalars['ID'];
  isDefault: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  order: Scalars['Int'];
};

export type FormOptionDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormOptionInput = {
  enabled: Scalars['Boolean'];
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormOptionMutation = {
  delete: FormOptionDeleteResult;
  move: FormOptionResult;
  update: FormOptionResult;
  upsert: FormOptionResult;
};

export type FormOptionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormOptionMutationMoveArgs = {
  id: Scalars['ID'];
  to: Scalars['Int'];
};

export type FormOptionMutationUpdateArgs = {
  data: FormOptionUpdateInput;
  id: Scalars['ID'];
};

export type FormOptionMutationUpsertArgs = {
  data: FormOptionUpsertInput;
  fieldId: Scalars['ID'];
};

export type FormOptionResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormOption>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormOptionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

/**  This option will be always be added in last order */
export type FormOptionUpsertInput = {
  data?: InputMaybe<FormOptionInput>;
  /**  If Id is Present then this will be an update operation.. else it will be an insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormOptionsGetFilter = {
  fieldId: Scalars['ID'];
};

export type FormOptionsPredefinedFilter = {
  category: FormCategory;
  searchTerm: FormFieldSearchTerm;
};

export type FormOptionsQuery = {
  get?: Maybe<FormOptionsQueryResult>;
  predefined?: Maybe<FormOptionsQueryResult>;
};

export type FormOptionsQueryGetArgs = {
  filter: FormOptionsGetFilter;
};

export type FormOptionsQueryPredefinedArgs = {
  filter: FormOptionsPredefinedFilter;
};

export type FormOptionsQueryResult = {
  data?: Maybe<Array<Maybe<FormOption>>>;
  error?: Maybe<QueryError>;
};

export type FormQuery = {
  dynamicFields?: Maybe<FormFieldQueryResult>;
  options: FormOptionsQuery;
};

export type FormQueryDynamicFieldsArgs = {
  filter: FormOptionsPredefinedFilter;
};

export enum FormSearchTerm {
  AccountCoopTraining = 'ACCOUNT_COOP_TRAINING',
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  AccountHolderDetails = 'ACCOUNT_HOLDER_DETAILS',
  AccountHolderDocuments = 'ACCOUNT_HOLDER_DOCUMENTS',
  AccountOperator = 'ACCOUNT_OPERATOR',
  AccountOperatorDetails = 'ACCOUNT_OPERATOR_DETAILS',
  AccountOperatorDocument = 'ACCOUNT_OPERATOR_DOCUMENT',
  /**  KYM_COOP_UNION  */
  Applicant = 'APPLICANT',
  ApplicantDetails = 'APPLICANT_DETAILS',
  ApplicantDocument = 'APPLICANT_DOCUMENT',
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  CentralRepresentativeCoopTraining = 'CENTRAL_REPRESENTATIVE_COOP_TRAINING',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  CentralRepresentativeDocument = 'CENTRAL_REPRESENTATIVE_DOCUMENT',
  Citizenship = 'CITIZENSHIP',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION && KYM_COOP && KYM_COOP_UNION */
  ContactDetails = 'CONTACT_DETAILS',
  CooperativeType = 'COOPERATIVE_TYPE',
  /**  KYM_COOP && KYM_COOP_UNION  */
  CurrentMembers = 'CURRENT_MEMBERS',
  Director = 'DIRECTOR',
  DirectorsAffiliationDetails = 'DIRECTORS_AFFILIATION_DETAILS',
  DirectorCoopTraining = 'DIRECTOR_COOP_TRAINING',
  DirectorDetails = 'DIRECTOR_DETAILS',
  DirectorDocument = 'DIRECTOR_DOCUMENT',
  DrivingLicense = 'DRIVING_LICENSE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction = 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity = 'ETHNICITY',
  ExpectedMonthlyTransaction = 'EXPECTED_MONTHLY_TRANSACTION',
  ExpectedMonthlyTurnover = 'EXPECTED_MONTHLY_TURNOVER',
  FamilyIncomeSource = 'FAMILY_INCOME_SOURCE',
  FamilyInformation = 'FAMILY_INFORMATION',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION */
  FileUploads = 'FILE_UPLOADS',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions = 'FOREIGN_EMPLOYMENT_OPTIONS',
  /**  KYM_INDIVIDUAL  */
  Gender = 'GENDER',
  Identification = 'IDENTIFICATION',
  IncomeSourceDetails = 'INCOME_SOURCE_DETAILS',
  MaritalStatus = 'MARITAL_STATUS',
  Nationality = 'NATIONALITY',
  NationalIdentity = 'NATIONAL_IDENTITY',
  NextToKinInformation = 'NEXT_TO_KIN_INFORMATION',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  Occupation = 'OCCUPATION',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION */
  OccupationDetails = 'OCCUPATION_DETAILS',
  /** KYM_INSTITUTION  */
  OrganizationType = 'ORGANIZATION_TYPE',
  OtherCooperativeDetails = 'OTHER_COOPERATIVE_DETAILS',
  Passport = 'PASSPORT',
  Purpose = 'PURPOSE',
  RegisteredDetails = 'REGISTERED_DETAILS',
  Relationship = 'RELATIONSHIP',
  Religion = 'RELIGION',
  /**  KYM_COOP  */
  Representative = 'REPRESENTATIVE',
  SisterConcernDetails = 'SISTER_CONCERN_DETAILS',
  TransactionDetails = 'TRANSACTION_DETAILS',
  VoterId = 'VOTER_ID',
}

export type FormSection = Base & {
  category: FormCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  fields?: Maybe<Array<FormField>>;
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  parent?: Maybe<FormSection>;
  search_term?: Maybe<FormSectionSearchTerm>;
  sectionType: FormSectionType;
  subSections?: Maybe<Array<FormSection>>;
};

export type FormSectionDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormSectionInput = {
  category: FormCategory;
  enabled: Scalars['Boolean'];
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormSectionMutation = {
  delete: FormSectionDeleteResult;
  /**  The new section will always be an INPUT section. UPLOAD and GROUP type aren't allowed to be created  */
  subSection: FormSectionMutationResult;
  update: FormSectionMutationResult;
  /**  The new section will always be an INPUT section. UPLOAD and GROUP type aren't allowed to be created  */
  upsert: FormSectionMutationResult;
};

export type FormSectionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormSectionMutationSubSectionArgs = {
  data?: InputMaybe<FormSectionInput>;
  sectionId: Scalars['ID'];
};

export type FormSectionMutationUpdateArgs = {
  data: FormSectionUpdateInput;
  id: Scalars['ID'];
};

export type FormSectionMutationUpsertArgs = {
  data: FormSectionUpsertInput;
};

export type FormSectionMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormSection>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormSectionQuery = {
  details: SectionDetailsQueryResult;
};

export type FormSectionQueryDetailsArgs = {
  id: Scalars['ID'];
};

export enum FormSectionSearchTerm {
  AccountCoopTraining = 'ACCOUNT_COOP_TRAINING',
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  AccountHolderDetails = 'ACCOUNT_HOLDER_DETAILS',
  AccountHolderDocuments = 'ACCOUNT_HOLDER_DOCUMENTS',
  AccountOperator = 'ACCOUNT_OPERATOR',
  AccountOperatorDetails = 'ACCOUNT_OPERATOR_DETAILS',
  AccountOperatorDocument = 'ACCOUNT_OPERATOR_DOCUMENT',
  /**  KYM_COOP_UNION  */
  Applicant = 'APPLICANT',
  ApplicantDetails = 'APPLICANT_DETAILS',
  ApplicantDocument = 'APPLICANT_DOCUMENT',
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  CentralRepresentativeCoopTraining = 'CENTRAL_REPRESENTATIVE_COOP_TRAINING',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  CentralRepresentativeDocument = 'CENTRAL_REPRESENTATIVE_DOCUMENT',
  Citizenship = 'CITIZENSHIP',
  ContactDetails = 'CONTACT_DETAILS',
  /**  KYM_COOP  */
  CurrentMembers = 'CURRENT_MEMBERS',
  /**  KYM_INSTITUTION && KYM_COOP  */
  Director = 'DIRECTOR',
  DirectorsAffiliationDetails = 'DIRECTORS_AFFILIATION_DETAILS',
  DirectorCoopTraining = 'DIRECTOR_COOP_TRAINING',
  DirectorDetails = 'DIRECTOR_DETAILS',
  DirectorDocument = 'DIRECTOR_DOCUMENT',
  DrivingLicense = 'DRIVING_LICENSE',
  FamilyInformation = 'FAMILY_INFORMATION',
  /** KYM_INDIVIDUAL && KYM_INSTITUTION && KYM_COOP */
  FileUploads = 'FILE_UPLOADS',
  Identification = 'IDENTIFICATION',
  IncomeSourceDetails = 'INCOME_SOURCE_DETAILS',
  NationalIdentity = 'NATIONAL_IDENTITY',
  NextToKinInformation = 'NEXT_TO_KIN_INFORMATION',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  OccupationDetails = 'OCCUPATION_DETAILS',
  OtherCooperativeDetails = 'OTHER_COOPERATIVE_DETAILS',
  /** KYM_INDIVIDUAL */
  Passport = 'PASSPORT',
  /**  KYM_INSTITUTION */
  RegisteredDetails = 'REGISTERED_DETAILS',
  Representative = 'REPRESENTATIVE',
  SisterConcernDetails = 'SISTER_CONCERN_DETAILS',
  TransactionDetails = 'TRANSACTION_DETAILS',
  VoterId = 'VOTER_ID',
}

export enum FormSectionType {
  Group = 'GROUP',
  Input = 'INPUT',
  Upload = 'UPLOAD',
}

export type FormSectionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormSectionUpsertInput = {
  data?: InputMaybe<FormSectionInput>;
  /**  If id is supplied then it will be update operation else it will be insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormSettingMutation = {
  delete: FormElementDeleteResult;
  field: FormFieldMutation;
  maxSize: FormElementResult;
  option: FormOptionMutation;
  section: FormSectionMutation;
};

export type FormSettingMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormSettingMutationMaxSizeArgs = {
  id: Scalars['ID'];
  maxSize: Scalars['Int'];
};

export type FormSettingQuery = {
  custom: CustomFormQuery;
  field: FormFieldQuery;
  predefined: PredefinedFormQuery;
  section: FormSectionQuery;
};

export enum Frequency {
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY',
}

export enum FrequencyTenure {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR',
}

export type GeneralBranchSettingsMutation = {
  add: BranchAddResult;
  delete?: Maybe<BranchDeleteResult>;
};

export type GeneralBranchSettingsMutationAddArgs = {
  data?: InputMaybe<BranchInput>;
  id: Scalars['ID'];
};

export type GeneralBranchSettingsMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type GeneralBranchSettingsQuery = {
  formState?: Maybe<BranchGetResult>;
  list?: Maybe<BranchConnection>;
  mine?: Maybe<Branch>;
};

export type GeneralBranchSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type GeneralBranchSettingsQueryListArgs = {
  filter?: InputMaybe<BranchSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type GeneralSettingsMutation = {
  KYM?: Maybe<KymMutation>;
  branch?: Maybe<GeneralBranchSettingsMutation>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  deposit?: Maybe<DepositSettingsMutation>;
  depositProduct?: Maybe<DepositProductSettingsMutation>;
  loanProducts?: Maybe<LoanProductsMutation>;
  organization?: Maybe<OrganizationSettingsMutation>;
  valuator?: Maybe<ValuatorSettingsMutation>;
};

export type GeneralSettingsQuery = {
  KYM?: Maybe<KymQuery>;
  branch?: Maybe<GeneralBranchSettingsQuery>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  deposit?: Maybe<DepositSettingsQuery>;
  depositProduct?: Maybe<DepositProductSettingsQuery>;
  loanProducts?: Maybe<LoanProductsQuery>;
  organization?: Maybe<OrganizationSettingsQuery>;
  valuator?: Maybe<ValuatorSettingsQuery>;
};

export type Identity = {
  id: Scalars['ID'];
  name: Scalars['String'];
  userType: UserType;
  username: Scalars['String'];
};

export type IndividualMember = {
  cooperativeMembership?: Maybe<KymCoopMembershipDetails>;
  declaration?: Maybe<KymIndDeclarations>;
  personalInformation?: Maybe<KymIndPersonalInformation>;
  professionalInformation?: Maybe<KymIndProfessionalInformation>;
};

export enum IndividualRequiredDocument {
  Fingerprint = 'FINGERPRINT',
  Form = 'FORM',
  NomineeDocument = 'NOMINEE_DOCUMENT',
  Photo = 'PHOTO',
  Signature = 'SIGNATURE',
}

export type InstitutionAccountOperatoionsDetails = {
  accountOperatorsDetails?: Maybe<Array<Maybe<AccountOperatorDetailsType>>>;
  accountType?: Maybe<AccountOperationType>;
  companyStamp?: Maybe<Scalars['String']>;
  isCompanyStampCompulsory?: Maybe<Scalars['Boolean']>;
  specialInstruction?: Maybe<Scalars['String']>;
};

export type InstitutionDeclaration = {
  accountHolderAddress?: Maybe<KymAddress>;
  accountHolderEmail?: Maybe<Scalars['String']>;
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderPhone?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  institutionDocuments?: Maybe<Array<Maybe<KymInstitutionDocumentsType>>>;
};

export enum InstitutionExpectedMonthlyTransaction {
  Above_25Lakhs = 'ABOVE_25_LAKHS',
  LessThan_10Lakhs = 'LESS_THAN_10_LAKHS',
  LessThan_25Lakhs = 'LESS_THAN_25_LAKHS',
}

export type InstitutionMember = {
  accoountOperationsDetails?: Maybe<InstitutionAccountOperatoionsDetails>;
  declaration?: Maybe<InstitutionDeclaration>;
  organizationInformation?: Maybe<InstitutionOrganizationInformation>;
  proprietorAndDirectorDetails?: Maybe<InstitutionProprietorAndDirectorDetails>;
  transactionProfile?: Maybe<InstitutionTransactionProfile>;
};

export type InstitutionOrganizationInformation = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<KymAddress>;
  dateOfLastAGM?: Maybe<Scalars['Date']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionTypeId?: Maybe<Scalars['String']>;
  issuingOffice?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Date']>;
  sisterConcernDetails?: Maybe<Array<Maybe<SisterConcernDetailsType>>>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type InstitutionProprietorAndDirectorDetails = {
  detailsOfDirectors?: Maybe<Array<Maybe<DirectorDetailsType>>>;
  detailsOfDirectorsWithAffiliation?: Maybe<
    Array<Maybe<AffiliatedDirectorDetailsType>>
  >;
};

export enum InstitutionRequiredDocument {
  Decision = 'DECISION',
  Registered = 'REGISTERED',
  Signature = 'SIGNATURE',
  TaxClearance = 'TAX_CLEARANCE',
}

export type InstitutionTransactionProfile = {
  annualTurnover?: Maybe<Scalars['Float']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
};

export type InterestFormState = {
  additionalRate?: Maybe<Scalars['Float']>;
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  defaultRate?: Maybe<Scalars['Float']>;
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export type InterestRate = {
  additionalRate?: InputMaybe<Scalars['Float']>;
  boardAuthority?: InputMaybe<Scalars['Float']>;
  ceoAuthority?: InputMaybe<Scalars['Float']>;
  defaultRate: Scalars['Float'];
  maxRate?: InputMaybe<Scalars['Float']>;
  minRate?: InputMaybe<Scalars['Float']>;
};

export type InterestRateType = {
  additionalRate?: Maybe<Scalars['Float']>;
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  defaultRate: Scalars['Float'];
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
  postingFrequency?: Maybe<Frequency>;
};

export type InvItems = {
  id: Scalars['ID'];
  itemCode: Scalars['String'];
  itemQuantity: Scalars['Float'];
  name: Scalars['String'];
  type: Scalars['String'];
  unitPrice: Scalars['Float'];
};

export type InvItemsAddResult = {
  error?: Maybe<InvItemsError>;
  query?: Maybe<InvItemsQuery>;
  record?: Maybe<InvItems>;
  recordId: Scalars['ID'];
};

export type InvItemsConnection = {
  edges: Array<Maybe<InvItemsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvItemsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsEdge = {
  cursor: Scalars['Cursor'];
  node: InvItems;
};

export type InvItemsError = InvItemsInvalidDataError;

export type InvItemsGroup = {
  description: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupAddResult = {
  error?: Maybe<InvItemsGroupError>;
  query?: Maybe<InvItemsGroupQuery>;
  record?: Maybe<InvItemsGroup>;
  recordId: Scalars['ID'];
};

export type InvItemsGroupConnection = {
  edges: Array<Maybe<InvItemsGroupEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvItemsGroupDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsGroupEdge = {
  cursor: Scalars['Cursor'];
  node: InvItemsGroup;
};

export type InvItemsGroupError = InvItemsGroupInvalidDataError;

export type InvItemsGroupInput = {
  description: Scalars['String'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvItemsGroupMutation = {
  add: InvItemsGroupAddResult;
};

export type InvItemsGroupMutationAddArgs = {
  data: InvItemsGroupInput;
};

export type InvItemsGroupQuery = {
  get: InvItemsGroup;
  list?: Maybe<InvItemsGroupConnection>;
};

export type InvItemsGroupQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvItemsGroupQueryListArgs = {
  filter?: InputMaybe<InvItemsGroupDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvItemsInput = {
  itemCode: Scalars['String'];
  itemGroup: Scalars['String'];
  itemQuantity: Scalars['Float'];
  name: Scalars['String'];
  primaryUnit: Scalars['String'];
  tax: Scalars['String'];
  type: Scalars['String'];
  unitPrice: Scalars['Float'];
};

export type InvItemsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvItemsMutation = {
  add: InvItemsAddResult;
};

export type InvItemsMutationAddArgs = {
  data: InvItemsInput;
};

export type InvItemsQuery = {
  get: InvItems;
  getNewItemCode: Scalars['String'];
  list?: Maybe<InvItemsConnection>;
};

export type InvItemsQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvItemsQueryGetNewItemCodeArgs = {
  type?: InputMaybe<Scalars['String']>;
};

export type InvItemsQueryListArgs = {
  filter?: InputMaybe<InvItemsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvUnitOfMeasure = {
  acceptFraction: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureAddResult = {
  error?: Maybe<InvUnitOfMeasureError>;
  query?: Maybe<InvUnitOfMeasureQuery>;
  record?: Maybe<InvUnitOfMeasure>;
  recordId: Scalars['ID'];
};

export type InvUnitOfMeasureConnection = {
  edges: Array<Maybe<InvUnitOfMeasureEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvUnitOfMeasureDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvUnitOfMeasureEdge = {
  cursor: Scalars['Cursor'];
  node: InvUnitOfMeasure;
};

export type InvUnitOfMeasureError = InvUnitOfMeasureInvalidDataError;

export type InvUnitOfMeasureInput = {
  acceptFraction: Scalars['Boolean'];
  description: Scalars['String'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvUnitOfMeasureMutation = {
  add: InvUnitOfMeasureAddResult;
};

export type InvUnitOfMeasureMutationAddArgs = {
  data: InvUnitOfMeasureInput;
};

export type InvUnitOfMeasureQuery = {
  get: InvUnitOfMeasure;
  list?: Maybe<InvUnitOfMeasureConnection>;
};

export type InvUnitOfMeasureQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvUnitOfMeasureQueryListArgs = {
  filter?: InputMaybe<InvUnitOfMeasureDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvVendors = {
  email: Scalars['String'];
  id: Scalars['ID'];
  location: Scalars['String'];
  name: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type InvVendorsAddResult = {
  error?: Maybe<InvVendorsError>;
  query?: Maybe<InvVendorsQuery>;
  record?: Maybe<InvVendors>;
  recordId: Scalars['ID'];
};

export type InvVendorsConnection = {
  edges: Array<Maybe<InvVendorsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvVendorsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvVendorsEdge = {
  cursor: Scalars['Cursor'];
  node: InvVendors;
};

export type InvVendorsError = InvVendorsInvalidDataError;

export type InvVendorsInput = {
  contactName: Scalars['String'];
  contactPhoneNo: Scalars['String'];
  creditLimit?: InputMaybe<Scalars['Float']>;
  creditTerms?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  location: Scalars['String'];
  name: Scalars['String'];
  openingBalance?: InputMaybe<Scalars['Float']>;
  panNo: Scalars['String'];
  phoneNumber: Scalars['String'];
  vendorCode: Scalars['String'];
};

export type InvVendorsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvVendorsMutation = {
  add: InvVendorsAddResult;
};

export type InvVendorsMutationAddArgs = {
  data: InvVendorsInput;
};

export type InvVendorsQuery = {
  get: InvVendors;
  list?: Maybe<InvVendorsConnection>;
};

export type InvVendorsQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvVendorsQueryListArgs = {
  filter?: InputMaybe<InvVendorsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InventoryMutation = {
  items?: Maybe<InvItemsMutation>;
  itemsGroup?: Maybe<InvItemsGroupMutation>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureMutation>;
  vendors?: Maybe<InvVendorsMutation>;
};

export type InventoryQuery = {
  items?: Maybe<InvItemsQuery>;
  itemsGroup?: Maybe<InvItemsGroupQuery>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureQuery>;
  vendors?: Maybe<InvVendorsQuery>;
};

export type JournalChartsOfAccount = {
  journalCode: Scalars['String'];
};

export type KymAddress = {
  coordinates?: Maybe<Coordinate>;
  districtId?: Maybe<Scalars['Int']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['Localized']>;
  provinceId?: Maybe<Scalars['Int']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type KymAddressInput = {
  coordinates?: InputMaybe<CoordinateInput>;
  districtId?: InputMaybe<Scalars['Int']>;
  houseNo?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type KymAllowed = {
  allowed: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type KymAllowedError = KymAllowedInvalidDataError;

export type KymAllowedInput = {
  allowed: Scalars['Boolean'];
  id: Scalars['ID'];
};

export type KymAllowedInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymAllowedResult = {
  error?: Maybe<KymAllowedError>;
  query?: Maybe<KymQuery>;
  record?: Maybe<KymAllowed>;
  recordId: Scalars['ID'];
};

export type KymDeclaration = Base & {
  content: Scalars['Localized'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  for: DeclarationFor;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type KymDynamicEntry = {
  fieldId: Scalars['String'];
  id: Scalars['ID'];
  value: Scalars['Localized'];
};

export type KymDynamicEntryFilter = {
  fieldName?: InputMaybe<Scalars['String']>;
  foreignId: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  sectionId?: InputMaybe<Scalars['String']>;
};

export type KymDynamicEntryResult = {
  data?: Maybe<Array<Maybe<KymDynamicEntry>>>;
  error?: Maybe<QueryError>;
};

export type KymEntryInput = {
  fieldId: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  parentSectionId: Scalars['String'];
  value: Scalars['Localized'];
};

export type KymEntryMutation = {
  upsertDynamic: KymEntryMutationResult;
};

export type KymEntryMutationUpsertDynamicArgs = {
  data: KymEntryInput;
};

export type KymEntryMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymEntryQuery>;
  record?: Maybe<KymDynamicEntry>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymEntryQuery = {
  getDynamic?: Maybe<KymDynamicEntryResult>;
};

export type KymEntryQueryGetDynamicArgs = {
  filter: KymDynamicEntryFilter;
};

export type KymFieldData = {
  id?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
};

export type KymFieldInputData = {
  id?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
};

export type KymGeneralSettingsMutation = {
  addRiskLevel: KymMemberRiskResult;
  switchAllowed: KymAllowedResult;
  updateRiskLevel: KymMemberRiskResult;
};

export type KymGeneralSettingsMutationAddRiskLevelArgs = {
  data: KymMemberRiskInput;
};

export type KymGeneralSettingsMutationSwitchAllowedArgs = {
  input: KymAllowedInput;
};

export type KymGeneralSettingsMutationUpdateRiskLevelArgs = {
  data: KymMemberRiskInput;
};

export type KymGeneralSettingsQuery = {
  allowed: Array<KymAllowed>;
  riskLevel: Array<Maybe<KymMemberRisk>>;
};

export type KymIndBasicInformation = {
  dateOfBirth?: Maybe<Scalars['String']>;
  educationQualificationId?: Maybe<Scalars['String']>;
  ethnicityId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['Localized']>;
  genderId?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['Localized']>;
  middleName?: Maybe<Scalars['Localized']>;
  nationalityId?: Maybe<Scalars['String']>;
  religionId?: Maybe<Scalars['String']>;
};

export type KymIndContactDetails = {
  email?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

export type KymIndDeclaration = {
  beneficialFullName?: Maybe<Scalars['Localized']>;
  beneficialRelationshipId?: Maybe<Scalars['String']>;
  convictedDetails?: Maybe<Scalars['String']>;
  declarationAgreement?: Maybe<Scalars['Boolean']>;
  foreignResidentialPermitTypeId?: Maybe<Scalars['String']>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  politicallyExposedDetails?: Maybe<Scalars['String']>;
};

export type KymIndEstimatedTransactions = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['String']>;
};

export type KymIndFamilyMember = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  dateOfBirth?: Maybe<Scalars['String']>;
  familyMemberId?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['Localized']>;
  id: Scalars['String'];
  relationshipId?: Maybe<Scalars['String']>;
};

export type KymIndFamilyMemberInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  dateOfBirth?: InputMaybe<Scalars['String']>;
  familyMemberId?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  relationshipId?: InputMaybe<Scalars['String']>;
};

export type KymIndFamilyMemberMutation = {
  delete: KymIndFamilyMemberResult;
  upsert: KymIndFamilyMemberResult;
};

export type KymIndFamilyMemberMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndFamilyMemberMutationUpsertArgs = {
  data: KymIndFamilyMemberInput;
};

export type KymIndFamilyMemberQueryResult = {
  data?: Maybe<Array<Maybe<KymIndFamilyMember>>>;
  error?: Maybe<QueryError>;
};

export type KymIndFamilyMemberResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndFamilyMember>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndForeignEmployment = {
  foreignEmpCountryId?: Maybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: Maybe<Scalars['String']>;
  isForeignEmployment?: Maybe<Scalars['Boolean']>;
  typeOfVisaId?: Maybe<Scalars['String']>;
};

export type KymIndIdentification = {
  citizenshipIssueDate?: Maybe<Scalars['String']>;
  citizenshipIssuePlace?: Maybe<Scalars['String']>;
  citizenshipNo?: Maybe<Scalars['String']>;
  drivingLicenseIssueDate?: Maybe<Scalars['String']>;
  drivingLicenseIssuePlace?: Maybe<Scalars['String']>;
  drivingLicenseNo?: Maybe<Scalars['String']>;
  identificationSelection?: Maybe<Array<Maybe<Scalars['String']>>>;
  nationalIDNo?: Maybe<Scalars['String']>;
  passportIssueDate?: Maybe<Scalars['String']>;
  passportIssuePlace?: Maybe<Scalars['String']>;
  passportNo?: Maybe<Scalars['String']>;
  voterCardNo?: Maybe<Scalars['String']>;
  voterPollingStation?: Maybe<Scalars['String']>;
};

export type KymIndIncomeSource = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  amount?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  incomeSource?: Maybe<Scalars['Localized']>;
};

export type KymIndIncomeSourceInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  incomeSource?: InputMaybe<Scalars['String']>;
};

export type KymIndIncomeSourceMutation = {
  delete: KymIndIncomeSourceResult;
  upsert: KymIndIncomeSourceResult;
};

export type KymIndIncomeSourceMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndIncomeSourceMutationUpsertArgs = {
  data: KymIndIncomeSourceInput;
};

export type KymIndIncomeSourceQueryResult = {
  data?: Maybe<Array<Maybe<KymIndIncomeSource>>>;
  error?: Maybe<QueryError>;
};

export type KymIndIncomeSourceResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndIncomeSource>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndInitialTransactionDetails = {
  initialLoan?: Maybe<Scalars['String']>;
  initialSaving?: Maybe<Scalars['String']>;
  initialShare?: Maybe<Scalars['Int']>;
  otherFinancialAmount?: Maybe<Scalars['String']>;
};

export type KymIndIntroducers = {
  firstIntroducerId?: Maybe<Scalars['String']>;
  secondIntroducerId?: Maybe<Scalars['String']>;
};

export type KymIndMembershipDetails = {
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  otherCoopBranchId?: Maybe<Scalars['String']>;
  otherCoopMemberId?: Maybe<Scalars['String']>;
  otherCoopName?: Maybe<Scalars['Localized']>;
  purposeId?: Maybe<Scalars['String']>;
};

export type KymIndOccupation = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  address?: Maybe<Scalars['Localized']>;
  contact?: Maybe<Scalars['String']>;
  establishedDate?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  isOwner?: Maybe<Scalars['Boolean']>;
  occupationId?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['Localized']>;
  panVatNo?: Maybe<Scalars['String']>;
  registrationNo?: Maybe<Scalars['String']>;
};

export type KymIndOccupationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['String']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  isOwner?: InputMaybe<Scalars['Boolean']>;
  occupationId?: InputMaybe<Scalars['String']>;
  orgName?: InputMaybe<Scalars['String']>;
  panVatNo?: InputMaybe<Scalars['String']>;
  registrationNo?: InputMaybe<Scalars['String']>;
};

export type KymIndOccupationMutation = {
  delete: KymIndOccupationResult;
  upsert: KymIndOccupationResult;
};

export type KymIndOccupationMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndOccupationMutationUpsertArgs = {
  data: KymIndOccupationInput;
  isSpouse: Scalars['Boolean'];
};

export type KymIndOccupationQueryResult = {
  data?: Maybe<Array<Maybe<KymIndOccupation>>>;
  error?: Maybe<QueryError>;
};

export type KymIndOccupationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndOccupation>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndProfession = {
  otherProfession?: Maybe<Scalars['String']>;
  professionId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type KymIndRentedHouse = {
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['Localized']>;
};

export type KymIndTemporaryAddress = {
  address?: Maybe<KymAddress>;
  sameTempAsPermanentAddress?: Maybe<Scalars['Boolean']>;
};

export type KymMemberRisk = {
  id: Scalars['ID'];
  name: Scalars['String'];
  years: Scalars['Float'];
};

export type KymMemberRiskError = KymMemberRiskInvalidDataError;

export type KymMemberRiskInput = {
  id: Scalars['ID'];
  name: Scalars['String'];
  years: Scalars['Float'];
};

export type KymMemberRiskInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymMemberRiskResult = {
  error?: Maybe<KymMemberRiskError>;
  query?: Maybe<KymQuery>;
  record?: Maybe<KymMemberRisk>;
  recordId: Scalars['ID'];
};

export type KymMutation = {
  general?: Maybe<KymGeneralSettingsMutation>;
};

export type KymQuery = {
  general?: Maybe<KymGeneralSettingsQuery>;
};

export type KymAdditionalFields = {
  fieldId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type KymAdditionalFieldsFormState = {
  fieldId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Localized']>;
};

export type KymAdditionalFieldsType = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type KymCoopAccountOperatorDetails = {
  Delete?: Maybe<KymCooperativeAddResult>;
  Upsert?: Maybe<KymCooperativeAddResult>;
};

export type KymCoopAccountOperatorDetailsDeleteArgs = {
  accOperatorId: Scalars['ID'];
};

export type KymCoopAccountOperatorDetailsUpsertArgs = {
  accOperatorId: Scalars['ID'];
  data: KymCoopAccountOperatorDetailsFormInput;
};

export type KymCoopAccountOperatorDetailsFormInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  coopRelatedTraining?: InputMaybe<Array<InputMaybe<CoopRelatedTraining>>>;
  cooperativeId?: InputMaybe<Scalars['ID']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymCoopAccountOperatorQuery = {
  data?: Maybe<Array<Maybe<KymCooperativeAccountOperatorDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymCoopDirectorDetails = {
  Delete?: Maybe<KymCooperativeAddResult>;
  Upsert?: Maybe<KymCooperativeAddResult>;
};

export type KymCoopDirectorDetailsDeleteArgs = {
  dirId: Scalars['ID'];
};

export type KymCoopDirectorDetailsUpsertArgs = {
  data: KymCoopDirectorDetailsFormInput;
  dirId: Scalars['ID'];
};

export type KymCoopDirectorDetailsFormInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  cooperativeId?: InputMaybe<Scalars['ID']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymCoopDirectorQuery = {
  data?: Maybe<Array<Maybe<KymCooperativeBodDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymCoopMembershipDetails = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['ID']>;
  familyMemberInThisCooperative?: Maybe<
    Array<Maybe<KymFamilyMemberDetailsInThisCooperativeType>>
  >;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  loan?: Maybe<Scalars['Float']>;
  memberIdentityLevel?: Maybe<MemberIdentityLevel>;
  other?: Maybe<Scalars['Float']>;
  purposeId?: Maybe<Scalars['ID']>;
  savings?: Maybe<Scalars['Float']>;
  share?: Maybe<Scalars['Int']>;
};

export type KymCoopUnionAccountOperatorDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type KymCoopUnionAccountOperatorLus = {
  name: KymCoopUnionAccountOperatorSection;
};

export enum KymCoopUnionAccountOperatorSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
}

export type KymCoopUnionAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorSection>>>;
};

export type KymCoopUnionAddError = KymCoopUnionAddInvalidDataError;

export type KymCoopUnionAddFormStatus = {
  formData?: Maybe<CooperativeUnionMember>;
  lastUpdated?: Maybe<KymCoopUnionAddLus>;
  sectionStatus?: Maybe<KymCoopUnionAddSectionStatus>;
};

export type KymCoopUnionAddInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymCoopUnionAddLus =
  | KymCoopUnionAccountOperatorLus
  | KymCoopUnionBodlus
  | KymCoopUnionCentralRepresentativeLus
  | KymCoopUnionDeclarationLus
  | KymCoopUnionEconomicDetailsLus
  | KymCoopUnionInstitutionInformationLus;

export type KymCoopUnionAddSectionStatus = {
  accountOperatorDetails?: Maybe<KymCoopUnionAccountOperatorStatus>;
  bodDetails?: Maybe<KymCoopUnionBodDetailsStatus>;
  centralRepresentativeDetails?: Maybe<KymCoopUnionCentralRepresentativeStatus>;
  declaration?: Maybe<KymCoopUnionDeclarationStatus>;
  economicDetails?: Maybe<KymCoopUnionEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCoopUnionInstitutionalInformationStatus>;
};

export type KymCoopUnionBodDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isCentralRepresentative?: Maybe<Scalars['Boolean']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type KymCoopUnionBodlus = {
  name: KymCoopUnionBodSection;
};

export enum KymCoopUnionBodSection {
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
}

export type KymCoopUnionBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionBodSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionBodSection>>>;
};

export type KymCoopUnionCentralRepresentativeLus = {
  name: KymCoopUnionCentralRepresentativeSection;
};

export enum KymCoopUnionCentralRepresentativeSection {
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
}

export type KymCoopUnionCentralRepresentativeStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionCentralRepresentativeSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionCentralRepresentativeSection>>>;
};

export type KymCoopUnionDeclarationLus = {
  name: KymCoopUnionDeclarationSection;
};

export enum KymCoopUnionDeclarationSection {
  DocumentsDeclaration = 'DOCUMENTS_DECLARATION',
}

export type KymCoopUnionDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionDeclarationSection>>>;
};

export type KymCoopUnionDeletion = {
  recordId: Scalars['ID'];
};

export type KymCoopUnionDocuments = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionDocumentsInput = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionEconomicDetailsLus = {
  name: KymCoopUnionEconomicDetailsSection;
};

export enum KymCoopUnionEconomicDetailsSection {
  Assets = 'ASSETS',
  EquityAndLiabilities = 'EQUITY_AND_LIABILITIES',
  ExpenseDetails = 'EXPENSE_DETAILS',
  IncomeDetails = 'INCOME_DETAILS',
}

export type KymCoopUnionEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionEconomicDetailsSection>>>;
};

export type KymCoopUnionFormStateQuery = {
  data?: Maybe<KymCoopUnionAddFormStatus>;
};

export type KymCoopUnionInstitutionInformationLus = {
  name: KymCoopUnionInstitutionInformationSection;
};

export enum KymCoopUnionInstitutionInformationSection {
  Applicant = 'APPLICANT',
  BankDetails = 'BANK_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  CooperativeMemberInformation = 'COOPERATIVE_MEMBER_INFORMATION',
  RegisteredDetails = 'REGISTERED_DETAILS',
}

export type KymCoopUnionInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionInstitutionInformationSection>>>;
};

export type KymCoopUnionMutation = {
  add?: Maybe<KymCoopUnionSectionMutation>;
  delete?: Maybe<KymCoopUnionDeletion>;
  deletePersonnel?: Maybe<KymCoopUnionDeletion>;
};

export type KymCoopUnionMutationAddArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionMutationDeletePersonnelArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionQuery = {
  formState?: Maybe<KymCoopUnionAddFormStatus>;
};

export type KymCoopUnionQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionSectionMutation = {
  declaration?: Maybe<CoopUnionDeclarationResult>;
  economicDetails?: Maybe<CoopUnionEconomicDetailsResult>;
  institutionInformation?: Maybe<CoopUnionInstitutionInformationResult>;
  personnelDetails?: Maybe<CoopUnionPersonnelDetailsResult>;
};

export type KymCoopUnionSectionMutationDeclarationArgs = {
  data?: InputMaybe<CoopUnionDeclarationInput>;
};

export type KymCoopUnionSectionMutationEconomicDetailsArgs = {
  data?: InputMaybe<CoopUnionEconomicDetailsInput>;
};

export type KymCoopUnionSectionMutationInstitutionInformationArgs = {
  data?: InputMaybe<CoopUnionInstitutionInformationInput>;
};

export type KymCoopUnionSectionMutationPersonnelDetailsArgs = {
  data?: InputMaybe<CoopUnionPersonnelInput>;
  recordId?: InputMaybe<Scalars['String']>;
  sectionType: CooperativeUnionPersonnelSection;
};

export type KymCooperativeAccountOperatorDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  coopRelatedTraining?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type KymCooperativeAccountOperatorDetailsInput = {
  citizenshipNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  dateofTrainig?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeAccountOperatorLus = {
  name: KymCooperativeAccountOperatorSection;
};

export enum KymCooperativeAccountOperatorSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
}

export type KymCooperativeAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
};

export type KymCooperativeAddFormStatus = {
  formData?: Maybe<KymCooperativeFormData>;
  lastUpdated: KymCooperativeAddLus;
  sectionStatus?: Maybe<KymCooperativeAddSectionStatus>;
};

export type KymCooperativeAddLus =
  | KymCooperativeAccountOperatorLus
  | KymCooperativeBodlus
  | KymCooperativeDeclarationLus
  | KymCooperativeEconomicDetailsLus
  | KymCooperativeInstitutionInformationLus;

export type KymCooperativeAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymCooperativeQuery>;
  record?: Maybe<KymCooperativeGetResult>;
  recordId: Scalars['ID'];
};

export type KymCooperativeAddSectionStatus = {
  accountOperatorDetails?: Maybe<KymCooperativeAccountOperatorStatus>;
  bodDetails?: Maybe<KymCooperativeBodDetailsStatus>;
  declaration?: Maybe<KymCooperativeDeclarationStatus>;
  economicDetails?: Maybe<KymCooperativeEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCooperativeInstitutionalInformationStatus>;
};

export type KymCooperativeBodDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type KymCooperativeBodDetailsInput = {
  citizenshipNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
};

export type KymCooperativeBodlus = {
  name: KymCooperativeBodSection;
};

export enum KymCooperativeBodSection {
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
}

export type KymCooperativeBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
};

export type KymCooperativeDeclarationLus = {
  name: KymCooperativeDeclarationSection;
};

export enum KymCooperativeDeclarationSection {
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  DocumentDeclaration = 'DOCUMENT_DECLARATION',
}

export type KymCooperativeDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
};

export type KymCooperativeDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeDocumentsInput = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeEconomicDetailsLus = {
  name: KymCooperativeEconomicDetailsSection;
};

export enum KymCooperativeEconomicDetailsSection {
  Assets = 'ASSETS',
  EquityAndLiabilities = 'EQUITY_AND_LIABILITIES',
}

export type KymCooperativeEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
};

export type KymCooperativeFormData = {
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountHoldersName?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['Float']>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeTypeId?: Maybe<Scalars['String']>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  email?: Maybe<Scalars['String']>;
  hasTCAccepted?: Maybe<Scalars['Boolean']>;
  investments?: Maybe<Scalars['Float']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  lastAgmDate?: Maybe<Scalars['Date']>;
  lastAuditDate?: Maybe<Scalars['Date']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  operatingAddress?: Maybe<KymAddress>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  permanentRepresentativeAddress?: Maybe<KymAddress>;
  regdDate?: Maybe<Scalars['Date']>;
  regdNumber?: Maybe<Scalars['Int']>;
  regdOffice?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  representativeContactNumber?: Maybe<Scalars['String']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeEmail?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  representativePanNo?: Maybe<Scalars['String']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
  temporaryRepresentativeAddress?: Maybe<KymAddress>;
  totalAssets?: Maybe<Scalars['Float']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  totalEquityAndLiabilities?: Maybe<Scalars['Float']>;
  website?: Maybe<Scalars['String']>;
};

export type KymCooperativeFormInput = {
  accountHoldersName?: InputMaybe<Scalars['String']>;
  bank?: InputMaybe<Scalars['Float']>;
  capitalGrant?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalent?: InputMaybe<Scalars['Float']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  cooperativeTypeId?: InputMaybe<Scalars['String']>;
  currentLiabilities?: InputMaybe<Scalars['Float']>;
  email?: InputMaybe<Scalars['String']>;
  hasTCAccepted?: InputMaybe<Scalars['Boolean']>;
  investments?: InputMaybe<Scalars['Float']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  lastAgmDate?: InputMaybe<Scalars['Date']>;
  lastAuditDate?: InputMaybe<Scalars['Date']>;
  loan?: InputMaybe<Scalars['Float']>;
  loanAccount?: InputMaybe<Scalars['Float']>;
  mainServiceProduct?: InputMaybe<Scalars['String']>;
  nameOfOrganization?: InputMaybe<Scalars['String']>;
  noOfFemaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMembers?: InputMaybe<Scalars['Int']>;
  noOfMaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfMaleMembers?: InputMaybe<Scalars['Int']>;
  noOfOtherMembers?: InputMaybe<Scalars['Int']>;
  nonCurrentAssets?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilities?: InputMaybe<Scalars['Float']>;
  operatingAddress?: InputMaybe<KymAddressInput>;
  otherNonCurrentAssets?: InputMaybe<Scalars['Float']>;
  permanentRepresentativeAddress?: InputMaybe<KymAddressInput>;
  regdDate?: InputMaybe<Scalars['Date']>;
  regdNumber?: InputMaybe<Scalars['Int']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<KymAddressInput>;
  representativeContactNumber?: InputMaybe<Scalars['String']>;
  representativeDesignatiton?: InputMaybe<Scalars['String']>;
  representativeEmail?: InputMaybe<Scalars['String']>;
  representativeFullName?: InputMaybe<Scalars['String']>;
  representativePanNo?: InputMaybe<Scalars['String']>;
  reserveAndSurplus?: InputMaybe<Scalars['Float']>;
  savingDeposit?: InputMaybe<Scalars['Float']>;
  shareCapital?: InputMaybe<Scalars['Float']>;
  temporaryRepresentativeAddress?: InputMaybe<KymAddressInput>;
  totalAssets?: InputMaybe<Scalars['Float']>;
  totalEmployee?: InputMaybe<Scalars['Int']>;
  totalEquityLiabilities?: InputMaybe<Scalars['Float']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeFormStateQuery = {
  data?: Maybe<KymCooperativeAddFormStatus>;
  error?: Maybe<QueryError>;
};

export type KymCooperativeGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymCooperativeAddFormStatus>;
};

export type KymCooperativeInstitutionInformationLus = {
  name: KymCooperativeInstitutionInformationSection;
};

export enum KymCooperativeInstitutionInformationSection {
  AdditionalCooperativeDetails = 'ADDITIONAL_COOPERATIVE_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  CurrentMembers = 'CURRENT_MEMBERS',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  OperatingAddress = 'OPERATING_ADDRESS',
  RegisteredAddress = 'REGISTERED_ADDRESS',
  Representative = 'REPRESENTATIVE',
}

export type KymCooperativeInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
};

export type KymCooperativeMutation = {
  accountOperatorDetail?: Maybe<KymCoopAccountOperatorDetails>;
  add?: Maybe<KymCooperativeAddResult>;
  directorDetails?: Maybe<KymCoopDirectorDetails>;
};

export type KymCooperativeMutationAddArgs = {
  data: KymCooperativeFormInput;
};

export type KymCooperativeQuery = {
  formState?: Maybe<KymCooperativeFormStateQuery>;
  listAccountOperators?: Maybe<KymCoopAccountOperatorQuery>;
  listDirectors?: Maybe<KymCoopDirectorQuery>;
};

export type KymCooperativeQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeQueryListAccountOperatorsArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeQueryListDirectorsArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeUnionPersonnelDetails = {
  personnelDetails?: Maybe<Array<Maybe<CoopUnionPersonnelDetails>>>;
};

export type KymDocuments = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsType = {
  documentsUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymFamilyDetails = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsFormState = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsType = {
  fullName?: Maybe<Scalars['String']>;
  relationshipId: Scalars['ID'];
};

export type KymFamilyMemberDetailsInThisCooperative = {
  memberId?: InputMaybe<Scalars['ID']>;
  relationshipId?: InputMaybe<Scalars['ID']>;
};

export type KymFamilyMemberDetailsInThisCooperativeFormState = {
  memberId?: Maybe<Scalars['ID']>;
  relationshipId?: Maybe<Scalars['ID']>;
};

export type KymFamilyMemberDetailsInThisCooperativeType = {
  fullName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  relationshipId: Scalars['ID'];
};

export type KymIdentification = {
  fields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymIdentificationFormState = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  id: Scalars['ID'];
};

export type KymIdentificationType = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsType>>>;
  id?: Maybe<Scalars['ID']>;
};

export type KymIncomeSourceDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['Float']>;
  source?: InputMaybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsFormState = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsType = {
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIndAddError = KymIndAddInvalidDataError;

export type KymIndAddFormStatus = {
  lastUpdated?: Maybe<KymIndAddLus>;
  sectionStatus?: Maybe<KymIndAddSectionStatus>;
};

export type KymIndAddInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymIndAddLus =
  | KymIndCooperativeLus
  | KymIndDeclarationLus
  | KymIndPersonalLus
  | KymIndProfessionalLus;

export type KymIndAddLastUpdated = {
  cooperativeMembership?: Maybe<KymIndCooperativeMemberStatus>;
  declaration?: Maybe<KymIndDeclarationStatus>;
  personal?: Maybe<KymIndPersonalStatus>;
  professional?: Maybe<KymIndProfessionalStatus>;
};

export type KymIndAddResult = {
  error?: Maybe<KymIndAddError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndGetResult>;
  recordId: Scalars['ID'];
};

export type KymIndAddSectionStatus = {
  cooperativeMembership?: Maybe<KymIndCooperativeMemberStatus>;
  declaration?: Maybe<KymIndDeclarationStatus>;
  personal?: Maybe<KymIndPersonalStatus>;
  professional?: Maybe<KymIndProfessionalStatus>;
};

export type KymIndCooperativeLus = {
  name: KymIndPersonalSection;
};

export enum KymIndCooperativeMemberSection {
  EstimatedAmount = 'ESTIMATED_AMOUNT',
  IsFamilyAMember = 'IS_FAMILY_A_MEMBER',
  MemberOfAnotherCooperative = 'MEMBER_OF_ANOTHER_COOPERATIVE',
  Purpose = 'PURPOSE',
  TransactionDetails = 'TRANSACTION_DETAILS',
}

export type KymIndCooperativeMemberStatus = {
  completed?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
  error?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
};

export type KymIndDeclarationLus = {
  name: KymIndPersonalSection;
};

export enum KymIndDeclarationSection {
  BeneficialOwner = 'BENEFICIAL_OWNER',
  Conviction = 'CONVICTION',
  FamilyMemberInPolitics = 'FAMILY_MEMBER_IN_POLITICS',
  ForeignResidentialPermit = 'FOREIGN_RESIDENTIAL_PERMIT',
}

export type KymIndDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
};

export type KymIndDeclarations = {
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['ID']>;
  convictionDetails?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<KymDocumentsType>>>;
  foreignResidentialPermitDetails?: Maybe<Array<Maybe<KymIdentificationType>>>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  localKinAddress?: Maybe<Scalars['String']>;
  localKinContact?: Maybe<Scalars['String']>;
  localKinName?: Maybe<Scalars['String']>;
  localKinRelationshipId?: Maybe<Scalars['ID']>;
};

export type KymIndFormData = {
  annualIncomeSourceId?: Maybe<Scalars['String']>;
  basicInformation?: Maybe<KymIndBasicInformation>;
  contactDetails?: Maybe<KymIndContactDetails>;
  declaration?: Maybe<KymIndDeclaration>;
  estimatedTransactions?: Maybe<KymIndEstimatedTransactions>;
  foreignEmployment?: Maybe<KymIndForeignEmployment>;
  identification?: Maybe<KymIndIdentification>;
  initialTransactionDetails?: Maybe<KymIndInitialTransactionDetails>;
  introducers?: Maybe<KymIndIntroducers>;
  isFamilyAMember?: Maybe<Scalars['Boolean']>;
  maritalStatusId?: Maybe<Scalars['String']>;
  membershipDetails?: Maybe<KymIndMembershipDetails>;
  permanentAddress?: Maybe<KymAddress>;
  profession?: Maybe<KymIndProfession>;
  rentedHouse?: Maybe<KymIndRentedHouse>;
  temporaryAddress?: Maybe<KymIndTemporaryAddress>;
};

export type KymIndFormState = {
  formData?: Maybe<KymIndFormData>;
  lastUpdated: KymIndAddLus;
  sectionStatus?: Maybe<KymIndAddSectionStatus>;
};

export type KymIndGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymIndAddFormStatus>;
};

export type KymIndMemberInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['String']>;
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['String']>;
  citizenshipIssueDate?: InputMaybe<Scalars['String']>;
  citizenshipIssuePlace?: InputMaybe<Scalars['String']>;
  citizenshipNo?: InputMaybe<Scalars['String']>;
  convictedDetails?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['String']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  drivingLicenseIssueDate?: InputMaybe<Scalars['String']>;
  drivingLicenseIssuePlace?: InputMaybe<Scalars['String']>;
  drivingLicenseNo?: InputMaybe<Scalars['String']>;
  educationQualificationId?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['String']>;
  firstIntroducerId?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  foreignEmpCountryId?: InputMaybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  foreignResidentialPermitTypeId?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['String']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  identificationSelection?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  initialLoan?: InputMaybe<Scalars['String']>;
  initialSaving?: InputMaybe<Scalars['String']>;
  initialShare?: InputMaybe<Scalars['Int']>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isFamilyAMember?: InputMaybe<Scalars['Boolean']>;
  isForeignEmployment?: InputMaybe<Scalars['Boolean']>;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  maritalStatusId?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  nationalIDNo?: InputMaybe<Scalars['String']>;
  nationalityId?: InputMaybe<Scalars['String']>;
  otherCoopBranchId?: InputMaybe<Scalars['String']>;
  otherCoopMemberId?: InputMaybe<Scalars['String']>;
  otherCoopName?: InputMaybe<Scalars['String']>;
  otherFinancialAmount?: InputMaybe<Scalars['String']>;
  otherProfession?: InputMaybe<Scalars['String']>;
  passportIssueDate?: InputMaybe<Scalars['String']>;
  passportIssuePlace?: InputMaybe<Scalars['String']>;
  passportNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  politicallyExposedDetails?: InputMaybe<Scalars['String']>;
  professionId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purposeId?: InputMaybe<Scalars['String']>;
  religionId?: InputMaybe<Scalars['String']>;
  sameTempAsPermanentAddress?: InputMaybe<Scalars['Boolean']>;
  secondIntroducerId?: InputMaybe<Scalars['String']>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  typeOfVisaId?: InputMaybe<Scalars['String']>;
  voterCardNo?: InputMaybe<Scalars['String']>;
  voterPollingStation?: InputMaybe<Scalars['String']>;
};

export type KymIndMutation = {
  add?: Maybe<KymIndAddResult>;
  familyMember: KymIndFamilyMemberMutation;
  incomeSource: KymIndIncomeSourceMutation;
  occupation: KymIndOccupationMutation;
};

export type KymIndMutationAddArgs = {
  data: KymIndMemberInput;
};

export type KymIndPersonalInformation = {
  contact?: Maybe<Contact>;
  dateOfBirth?: Maybe<Scalars['String']>;
  educationQualificationId?: Maybe<Scalars['ID']>;
  ethnicityId?: Maybe<Scalars['ID']>;
  familyDetails?: Maybe<Array<Maybe<KymFamilyDetailsType>>>;
  firstName: Scalars['String'];
  genderId?: Maybe<Scalars['ID']>;
  identification?: Maybe<Array<Maybe<KymIdentificationType>>>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['ID']>;
  middleName?: Maybe<Scalars['String']>;
  nationalityId?: Maybe<Scalars['ID']>;
  permanentAddress?: Maybe<Address>;
  religionId?: Maybe<Scalars['ID']>;
  temporaryAddress?: Maybe<Address>;
};

export type KymIndPersonalLus = {
  name: KymIndPersonalSection;
};

export enum KymIndPersonalSection {
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  FamilyDetails = 'FAMILY_DETAILS',
  IdentificationDetails = 'IDENTIFICATION_DETAILS',
  PermanentAddress = 'PERMANENT_ADDRESS',
  RentedHouse = 'RENTED_HOUSE',
  TemporaryAddress = 'TEMPORARY_ADDRESS',
}

export type KymIndPersonalStatus = {
  completed?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
  error?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
};

export type KymIndProfessionalInformation = {
  annualIncomeSourceId?: Maybe<Scalars['ID']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymIncomeSourceDetailsType>>>;
  mainOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
  occupationId?: Maybe<Scalars['ID']>;
  spouseOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
};

export type KymIndProfessionalLus = {
  name: KymIndPersonalSection;
};

export enum KymIndProfessionalSection {
  IncomeSource = 'INCOME_SOURCE',
  MainProfession = 'MAIN_PROFESSION',
  Profession = 'PROFESSION',
  SpouseOccupation = 'SPOUSE_OCCUPATION',
}

export type KymIndProfessionalStatus = {
  completed?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
  error?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
};

export type KymIndQuery = {
  formState?: Maybe<KymIndFormStateQuery>;
  listFamilyMember?: Maybe<KymIndFamilyMemberQueryResult>;
  listIncomeSource?: Maybe<KymIndIncomeSourceQueryResult>;
  listOccupation?: Maybe<KymIndOccupationQueryResult>;
};

export type KymIndQueryListFamilyMemberArgs = {
  isMember?: InputMaybe<Scalars['Boolean']>;
};

export type KymIndQueryListOccupationArgs = {
  isSpouse: Scalars['Boolean'];
};

export type KymInsAccountLus = {
  name: KymInsAccountSection;
};

export type KymInsAccountOperator = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsAccountOperatorDeleteArgs = {
  operatorId: Scalars['ID'];
};

export type KymInsAccountOperatorUpsertArgs = {
  data: KymInsAccountOperatorInput;
  operatorId: Scalars['ID'];
};

export type KymInsAccountOperatorInput = {
  contact?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export enum KymInsAccountSection {
  AccountOperationInstruction = 'ACCOUNT_OPERATION_INSTRUCTION',
  DetailsOfAccountOperators = 'DETAILS_OF_ACCOUNT_OPERATORS',
}

export type KymInsAccountStatus = {
  completed?: Maybe<Array<Maybe<KymInsAccountSection>>>;
  error?: Maybe<Array<Maybe<KymInsAccountSection>>>;
};

export type KymInsAddLus =
  | KymInsAccountLus
  | KymInsDeclarationLus
  | KymInsDirectorDetailsLus
  | KymInsInformationLus
  | KymInsTransactionLus;

export type KymInsAddResult = {
  error?: Maybe<KymIndAddError>;
  query?: Maybe<KymInsQuery>;
  record?: Maybe<KymInsRecord>;
  recordId: Scalars['ID'];
};

export type KymInsAddSectionStatus = {
  account?: Maybe<KymInsAccountStatus>;
  declaration?: Maybe<KymInsDeclarationStatus>;
  directorDetails?: Maybe<KymInsDirectorDetailsStatus>;
  information?: Maybe<KymInsInformationStatus>;
  transaction?: Maybe<KymInsTransactionStatus>;
};

export type KymInsDeclarationLus = {
  name: KymInsDeclarationSection;
};

export enum KymInsDeclarationSection {
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  DocumentsDeclaration = 'DOCUMENTS_DECLARATION',
}

export type KymInsDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
};

export type KymInsDirector = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsDirectorDeleteArgs = {
  directorId: Scalars['ID'];
};

export type KymInsDirectorUpsertArgs = {
  data: KymInsDirectorInput;
  directorId: Scalars['ID'];
};

export type KymInsDirectorAffiliatedFirmInput = {
  address?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  directorName?: InputMaybe<Scalars['String']>;
  institutionName?: InputMaybe<Scalars['String']>;
  yearlyIncome?: InputMaybe<Scalars['Float']>;
};

export type KymInsDirectorDetailsLus = {
  name: KymInsDirectorDetailsSection;
};

export enum KymInsDirectorDetailsSection {
  DetailsOfDirectors = 'DETAILS_OF_DIRECTORS',
  DetailsOfDirectorsAffiliated = 'DETAILS_OF_DIRECTORS_AFFILIATED',
}

export type KymInsDirectorDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
};

export type KymInsDirectorInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firmDetails?: InputMaybe<KymInsDirectorAffiliatedFirmInput>;
  highestQualification?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  isAffiliatedWithOtherFirms?: InputMaybe<Scalars['Boolean']>;
  isHeadOfOrganization?: InputMaybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymInsFormData = {
  accountHolderAddress?: Maybe<KymAddress>;
  accountHolderEmail?: Maybe<Scalars['String']>;
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderPhone?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountOperatorsDetails?: Maybe<
    Array<Maybe<AccountOperatorDetailsFormState>>
  >;
  accountType?: Maybe<AccountOperationType>;
  annualTurnover?: Maybe<Scalars['Float']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<KymAddress>;
  companyStamp?: Maybe<Scalars['String']>;
  dateOfLastAGM?: Maybe<Scalars['Date']>;
  detailsOfDirectors?: Maybe<Array<Maybe<DirectorDetailsFormState>>>;
  documents?: Maybe<Array<Maybe<KymFieldData>>>;
  email?: Maybe<Scalars['String']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionTypeId?: Maybe<Scalars['String']>;
  isCompanyStampCompulsory?: Maybe<Scalars['Boolean']>;
  issuingOffice?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Date']>;
  sisterConcernDetails?: Maybe<Array<Maybe<SisterConcernDetailsFormState>>>;
  specialInstruction?: Maybe<Scalars['String']>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type KymInsFormStateQuery = {
  data?: Maybe<KymInsFormStatus>;
};

export type KymInsFormStatus = {
  formData?: Maybe<KymInsFormData>;
  lastUpdated: KymInsAddLus;
  sectionStatus?: Maybe<KymInsAddSectionStatus>;
};

export type KymInsInformationLus = {
  name: KymInsInformationSection;
};

export enum KymInsInformationSection {
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  DetailsOfSisterConcern = 'DETAILS_OF_SISTER_CONCERN',
  RegisteredDetails = 'REGISTERED_DETAILS',
}

export type KymInsInformationStatus = {
  completed?: Maybe<Array<Maybe<KymInsInformationSection>>>;
  error?: Maybe<Array<Maybe<KymInsInformationSection>>>;
};

export type KymInsInput = {
  accountHolderAddress?: InputMaybe<KymAddressInput>;
  accountHolderEmail?: InputMaybe<Scalars['String']>;
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderPhone?: InputMaybe<Scalars['String']>;
  accountHolderSignature?: InputMaybe<Scalars['String']>;
  accountHolderStamp?: InputMaybe<Scalars['String']>;
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<AccountOperationType>;
  annualTurnover?: InputMaybe<Scalars['Float']>;
  bank?: InputMaybe<Scalars['ID']>;
  branchOfficeAddress?: InputMaybe<KymAddressInput>;
  companyStamp?: InputMaybe<Scalars['String']>;
  dateOfLastAGM?: InputMaybe<Scalars['Date']>;
  email?: InputMaybe<Scalars['String']>;
  expectedMonthlyTransaction?: InputMaybe<Scalars['String']>;
  expectedMonthlyTurnover?: InputMaybe<Scalars['String']>;
  fax?: InputMaybe<Scalars['String']>;
  initialDepositAmount?: InputMaybe<Scalars['Float']>;
  institutionName?: InputMaybe<Scalars['String']>;
  institutionTypeId?: InputMaybe<Scalars['String']>;
  isCompanyStampCompulsory?: InputMaybe<Scalars['Boolean']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  natureOfTransaction?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  numberOfEmployee?: InputMaybe<Scalars['Int']>;
  operatingOfficeAddress?: InputMaybe<KymAddressInput>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<KymAddressInput>;
  registeredNumber?: InputMaybe<Scalars['String']>;
  registrationDate?: InputMaybe<Scalars['Date']>;
  specialInstruction?: InputMaybe<Scalars['String']>;
  vatOrPanNo?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymInsListAccountOperatorsQuery = {
  data?: Maybe<Array<Maybe<AccountOperatorDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymInsListDirectorsQuery = {
  data?: Maybe<Array<Maybe<DirectorDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymInsListSisterConcernQuery = {
  data?: Maybe<Array<Maybe<SisterConcernDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymInsMutation = {
  accountOperator?: Maybe<KymInsAccountOperator>;
  add?: Maybe<KymInsAddResult>;
  director?: Maybe<KymInsDirector>;
  sisterConcern?: Maybe<KymInsSisterConcern>;
};

export type KymInsMutationAddArgs = {
  data: KymInsInput;
};

export type KymInsQuery = {
  formState?: Maybe<KymInsFormStateQuery>;
  listAccountOperators?: Maybe<KymInsListAccountOperatorsQuery>;
  listDirectors?: Maybe<KymInsListDirectorsQuery>;
  listSisterConcerns?: Maybe<KymInsListSisterConcernQuery>;
};

export type KymInsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListAccountOperatorsArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListDirectorsArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListSisterConcernsArgs = {
  id: Scalars['ID'];
};

export type KymInsRecord = {
  member: Member;
  sectionStatus?: Maybe<KymInsFormStatus>;
};

export type KymInsSisterConcern = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsSisterConcernDeleteArgs = {
  sisterConcernId: Scalars['ID'];
};

export type KymInsSisterConcernUpsertArgs = {
  data: KymInsSisterConcernInput;
  sisterConcernId: Scalars['ID'];
};

export type KymInsSisterConcernInput = {
  address?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type KymInsTransactionLus = {
  name: KymInsTransactionSection;
};

export enum KymInsTransactionSection {
  TransactionDetails = 'TRANSACTION_DETAILS',
}

export type KymInsTransactionStatus = {
  completed?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
  error?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
};

export type KymInstitutionDocumentsFormState = {
  agmBODDecisionDocument?: Maybe<Scalars['String']>;
  latestAuditReport?: Maybe<Scalars['String']>;
  moaAOA?: Maybe<Scalars['String']>;
  panCertificate?: Maybe<Scalars['String']>;
  registeredCertificate?: Maybe<Scalars['String']>;
  taxClearance?: Maybe<Scalars['String']>;
};

export type KymInstitutionDocumentsType = {
  agmBodDecisionDocument?: Maybe<Scalars['String']>;
  latestAuditReport?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  minuteOfCentralRep?: Maybe<Scalars['String']>;
  moaAOA?: Maybe<Scalars['String']>;
  panCertificate?: Maybe<Scalars['String']>;
  registeredCertificate?: Maybe<Scalars['String']>;
  taxClearance?: Maybe<Scalars['String']>;
};

export type KymMemberDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<ObjState>;
  query?: InputMaybe<Scalars['String']>;
};

export type KymMemberListConnection = {
  edges?: Maybe<Array<Maybe<KymMemberListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type KymMemberListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Member>;
};

export type KymMemberTypes = {
  id: Scalars['ID'];
  type?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
};

export enum KymMemberTypesEnum {
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
  Individual = 'INDIVIDUAL',
  Institution = 'INSTITUTION',
}

export type KymOccupationDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['Float']>;
  idNumber?: InputMaybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: InputMaybe<Scalars['String']>;
};

export type KymOccupationDetailsFormState = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type KymOccupationDetailsType = {
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type LadderRate = {
  amount?: InputMaybe<Scalars['Amount']>;
  rate?: InputMaybe<Scalars['Float']>;
  type?: InputMaybe<Scalars['String']>;
};

export type LadderRateFormState = {
  amount?: Maybe<Scalars['Amount']>;
  rate?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['String']>;
};

export enum Language {
  English = 'ENGLISH',
  Nepali = 'NEPALI',
}

export type Level1 = {
  level2: Level2;
};

export type Level1Level2Args = {
  id: Scalars['String'];
};

export type Level2 = {
  add: Example;
  hello: Example;
};

export type Level2AddArgs = {
  data: ExampleInput;
};

export type Level2HelloArgs = {
  data: ExampleInput;
};

export enum LoanPaymentInstallmentType {
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
}

export enum LoanPaymentMode {
  Installment = 'INSTALLMENT',
}

export type LoanProduct = Base & {
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  badLoanProvision?: Maybe<Scalars['Float']>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate: Scalars['String'];
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  disburementOfDMV?: Maybe<Scalars['Float']>;
  disburementOfFMV?: Maybe<Scalars['Float']>;
  doubtfulLoanProvision?: Maybe<Scalars['Float']>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  goodLoanProvision?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  installmentType?: Maybe<LoanPaymentInstallmentType>;
  interest?: Maybe<InterestRateType>;
  isCollateralRequired?: Maybe<Scalars['Boolean']>;
  isInsuranceApplicable?: Maybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: Maybe<Scalars['Boolean']>;
  isPenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isRebateApplicable?: Maybe<Scalars['Boolean']>;
  isStaffProduct?: Maybe<Scalars['Boolean']>;
  loanScheduleChangeOverride?: Maybe<Scalars['Boolean']>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxGraceDurationUnit?: Maybe<Frequency>;
  maxGraceDurationUnitNumber?: Maybe<Scalars['Int']>;
  maxLoanAmount?: Maybe<Scalars['Amount']>;
  maxTenure?: Maybe<Scalars['Boolean']>;
  maxTenureUnit?: Maybe<Frequency>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minGraceDurationUnit?: Maybe<Frequency>;
  minGraceDurationUnitNumber?: Maybe<Scalars['Int']>;
  minTenure?: Maybe<Scalars['Boolean']>;
  minTenureUnit?: Maybe<Frequency>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  minimumLoanAmount?: Maybe<Scalars['Amount']>;
  modeOfPayment?: Maybe<LoanPaymentMode>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  objState: ObjState;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  overrideInterest?: Maybe<Scalars['Boolean']>;
  penalty?: Maybe<Penalty>;
  problematicLoanProvision?: Maybe<Scalars['Float']>;
  productCode?: Maybe<ProductCodeType>;
  productCodeString?: Maybe<Scalars['String']>;
  productName: Scalars['String'];
  productNature: NatureOfLoanProduct;
  productSubType: LoanProductSubType;
  productType: LoanProductType;
  rebate?: Maybe<Rebate>;
  repaymentScheme: LoanRepaymentScheme;
  requiredDocuments?: Maybe<Array<Maybe<LoanRequiredDocuments>>>;
  serviceCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  supportMultipleAccounts?: Maybe<Scalars['Boolean']>;
  typeOfMember: Array<Maybe<KymMemberTypesEnum>>;
};

export type LoanProductConnection = {
  edges: Array<LoanProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type LoanProductEdge = {
  cursor: Scalars['Cursor'];
  node: LoanProduct;
};

export type LoanProductInput = {
  allowPartialInstallment?: InputMaybe<Scalars['Boolean']>;
  badLoanProvision?: InputMaybe<Scalars['Float']>;
  cooperativeType?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  criteria?: InputMaybe<Array<InputMaybe<CriteriaSection>>>;
  disburementOfDMV?: InputMaybe<Scalars['Float']>;
  disburementOfFMV?: InputMaybe<Scalars['Float']>;
  doubtfulLoanProvision?: InputMaybe<Scalars['Float']>;
  educationQualification?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  ethnicity?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  foreignEmployment?: InputMaybe<Scalars['Boolean']>;
  genderId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  goodLoanProvision?: InputMaybe<Scalars['Float']>;
  installmentType?: InputMaybe<LoanPaymentInstallmentType>;
  interest?: InputMaybe<InterestRate>;
  isCollateralRequired?: InputMaybe<Scalars['Boolean']>;
  isInsuranceApplicable?: InputMaybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: InputMaybe<Scalars['Boolean']>;
  isPenaltyApplicable?: InputMaybe<Scalars['Boolean']>;
  isRebateApplicable?: InputMaybe<Scalars['Boolean']>;
  isStaffProduct?: InputMaybe<Scalars['Boolean']>;
  loanScheduleChangeOverride?: InputMaybe<Scalars['Boolean']>;
  maritalStatusId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  maxAge?: InputMaybe<Scalars['Int']>;
  maxGraceDurationUnit?: InputMaybe<Frequency>;
  maxGraceDurationUnitNumber?: InputMaybe<Scalars['Int']>;
  maxLoanAmount?: InputMaybe<Scalars['Amount']>;
  maxTenure?: InputMaybe<Scalars['Boolean']>;
  maxTenureUnit?: InputMaybe<Frequency>;
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minGraceDurationUnit?: InputMaybe<Frequency>;
  minGraceDurationUnitNumber?: InputMaybe<Scalars['Int']>;
  minTenure?: InputMaybe<Scalars['Boolean']>;
  minTenureUnit?: InputMaybe<Frequency>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minimumLoanAmount?: InputMaybe<Scalars['Amount']>;
  modeOfPayment?: InputMaybe<LoanPaymentMode>;
  natureOFBusinessCoop?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  overrideInterest?: InputMaybe<Scalars['Boolean']>;
  penalty?: InputMaybe<PenaltyInput>;
  problematicLoanProvision?: InputMaybe<Scalars['Float']>;
  productCode?: InputMaybe<ProductCode>;
  productName: Scalars['String'];
  productNature: NatureOfLoanProduct;
  productSubType: LoanProductSubType;
  productType: LoanProductType;
  rebate?: InputMaybe<RebateInput>;
  repaymentScheme: LoanRepaymentScheme;
  requiredDocuments?: InputMaybe<Array<InputMaybe<LoanRequiredDocuments>>>;
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  supportMultipleAccounts?: InputMaybe<Scalars['Boolean']>;
  typeOfMember: Array<InputMaybe<KymMemberTypesEnum>>;
};

export type LoanProductSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export enum LoanProductSubType {
  AgricultureBusiness = 'AGRICULTURE_BUSINESS',
  BigIndustrial = 'BIG_INDUSTRIAL',
  BioGas = 'BIO_GAS',
  BusinessLineOfCredit = 'BUSINESS_LINE_OF_CREDIT',
  CashCropsFraming = 'CASH_CROPS_FRAMING',
  ConstructionEquipmentBusiness = 'CONSTRUCTION_EQUIPMENT_BUSINESS',
  ConsumerGoodsBusiness = 'CONSUMER_GOODS_BUSINESS',
  CooperativePromotion = 'COOPERATIVE_PROMOTION',
  Emergency = 'EMERGENCY',
  ForeignEducation = 'FOREIGN_EDUCATION',
  ForeignEmployeeDependentVisa = 'FOREIGN_EMPLOYEE_DEPENDENT_VISA',
  ForeignEmployeeWorkingVisa = 'FOREIGN_EMPLOYEE_WORKING_VISA',
  FruitsAndHorticulture = 'FRUITS_AND_HORTICULTURE',
  HandicraftPromotional = 'HANDICRAFT_PROMOTIONAL',
  HigherEducation = 'HIGHER_EDUCATION',
  HirePurchaseLoan_2Wheeler = 'HIRE_PURCHASE_LOAN_2_WHEELER',
  HirePurchaseLoan_4Wheeler = 'HIRE_PURCHASE_LOAN_4_WHEELER',
  HirePurchaseLoanHeavyEquipment = 'HIRE_PURCHASE_LOAN_HEAVY_EQUIPMENT',
  HomeAppliance = 'HOME_APPLIANCE',
  HomeConstructionAndMaintenance = 'HOME_CONSTRUCTION_AND_MAINTENANCE',
  HomeExpenses = 'HOME_EXPENSES',
  HoneyBeeFarming = 'HONEY_BEE_FARMING',
  HousePurchase = 'HOUSE_PURCHASE',
  LandAndBuildingBusiness = 'LAND_AND_BUILDING_BUSINESS',
  LandPurchase = 'LAND_PURCHASE',
  LineOfCredit = 'LINE_OF_CREDIT',
  LiquidityManagement = 'LIQUIDITY_MANAGEMENT',
  Livestock = 'LIVESTOCK',
  LivestockBusiness = 'LIVESTOCK_BUSINESS',
  MicroEnterprisePromotion = 'MICRO_ENTERPRISE_PROMOTION',
  MicroEntrepreneur = 'MICRO_ENTREPRENEUR',
  MicroEntrepreneurGroup = 'MICRO_ENTREPRENEUR_GROUP',
  PoultryFarming = 'POULTRY_FARMING',
  ReligiousWork = 'RELIGIOUS_WORK',
  ServiceBusiness = 'SERVICE_BUSINESS',
  ShortTerm = 'SHORT_TERM',
  SmallAndMediumEnterprises = 'SMALL_AND_MEDIUM_ENTERPRISES',
  SmallIndustrial = 'SMALL_INDUSTRIAL',
  SocialWork = 'SOCIAL_WORK',
  SolarEnergy = 'SOLAR_ENERGY',
  SpiceProduction = 'SPICE_PRODUCTION',
  StaffHirepurchase = 'STAFF_HIREPURCHASE',
  StaffLandAndBuilding = 'STAFF_LAND_AND_BUILDING',
  StaffPersonal = 'STAFF_PERSONAL',
  StationaryBusiness = 'STATIONARY_BUSINESS',
  TechnicalEducation = 'TECHNICAL_EDUCATION',
  VegetableAndSeasonalFarming = 'VEGETABLE_AND_SEASONAL_FARMING',
  YouthSelfEmployment = 'YOUTH_SELF__EMPLOYMENT',
}

export enum LoanProductType {
  Agriculture = 'AGRICULTURE',
  AlternativeEnergy = 'ALTERNATIVE_ENERGY',
  AssetsPurchasesAndMaintenance = 'ASSETS_PURCHASES_AND_MAINTENANCE',
  Business = 'BUSINESS',
  CreditUnion = 'CREDIT_UNION',
  Educational = 'EDUCATIONAL',
  ForeignEmployee = 'FOREIGN_EMPLOYEE',
  HirePurchase = 'HIRE_PURCHASE',
  Industrial = 'INDUSTRIAL',
  MicroEntrepreneur = 'MICRO_ENTREPRENEUR',
  SocialSector = 'SOCIAL_SECTOR',
  Staff = 'STAFF',
}

export type LoanProductsMutation = {
  upsert?: Maybe<LoanProductsResult>;
};

export type LoanProductsMutationUpsertArgs = {
  data?: InputMaybe<LoanProductInput>;
  id?: InputMaybe<Scalars['ID']>;
};

export type LoanProductsQuery = {
  formState?: Maybe<LoanProduct>;
  list?: Maybe<LoanProductConnection>;
};

export type LoanProductsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type LoanProductsQueryListArgs = {
  filter?: InputMaybe<LoanProductSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanProductsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<Scalars['Any']>;
  record?: Maybe<LoanProduct>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum LoanRepaymentScheme {
  Emi = 'EMI',
  Epi = 'EPI',
  Flat = 'FLAT',
}

export enum LoanRequiredDocuments {
  Citizenship = 'CITIZENSHIP',
  Form = 'FORM',
  LoanChangeDocument = 'LOAN_CHANGE_DOCUMENT',
  PolicyDocument = 'POLICY_DOCUMENT',
}

export type LocalizationExample = {
  name?: Maybe<Scalars['Localized']>;
};

export type LocationCoordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type LocationCoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type LoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type LoginRecord = {
  token: AuthToken;
  user: User;
};

export type LoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<LoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MeResult = {
  data?: Maybe<User>;
  error?: Maybe<QueryError>;
};

export type Member = Base & {
  address?: Maybe<Address>;
  code: Scalars['String'];
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dateJoined?: Maybe<Scalars['Date']>;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['Localized']>;
  objState: ObjState;
  profile?: Maybe<MemberProfile>;
  share?: Maybe<MemberShare>;
  type: KymMemberTypesEnum;
};

export type MemberDetailsResult = {
  data?: Maybe<Member>;
  error?: Maybe<QueryError>;
};

export enum MemberIdentityLevel {
  General = 'GENERAL',
  Mid = 'MID',
  Vip = 'VIP',
}

export type MemberMutation = {
  cooperative?: Maybe<KymCooperativeMutation>;
  cooperativeUnion?: Maybe<KymCoopUnionMutation>;
  entry: KymEntryMutation;
  generateExcel: Scalars['String'];
  individual?: Maybe<KymIndMutation>;
  institution?: Maybe<KymInsMutation>;
  memberPDF: Scalars['String'];
  /**  id is the ID of member  */
  translate?: Maybe<TranslateData>;
};

export type MemberMutationCooperativeArgs = {
  id: Scalars['ID'];
};

export type MemberMutationEntryArgs = {
  memberId: Scalars['String'];
};

export type MemberMutationGenerateExcelArgs = {
  filename: Scalars['String'];
  id: Scalars['ID'];
};

export type MemberMutationIndividualArgs = {
  id: Scalars['ID'];
};

export type MemberMutationInstitutionArgs = {
  id: Scalars['ID'];
};

export type MemberMutationMemberPdfArgs = {
  id: Scalars['ID'];
};

export type MemberMutationTranslateArgs = {
  data: TranslateInput;
  memberId: Scalars['ID'];
};

export type MemberProfile =
  | CooperativeMember
  | CooperativeUnionMember
  | IndividualMember
  | InstitutionMember;

export type MemberQuery = {
  cooperative?: Maybe<KymCooperativeQuery>;
  cooperativeUnion?: Maybe<KymCoopUnionQuery>;
  details: MemberDetailsResult;
  entry?: Maybe<KymEntryQuery>;
  individual?: Maybe<KymIndQuery>;
  institution?: Maybe<KymInsQuery>;
  list: KymMemberListConnection;
  memberTypes: MemberTypeResult;
  translate: TranslateQueryResult;
};

export type MemberQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type MemberQueryEntryArgs = {
  membeId: Scalars['String'];
};

export type MemberQueryIndividualArgs = {
  id: Scalars['String'];
};

export type MemberQueryListArgs = {
  filter?: InputMaybe<KymMemberDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type MemberQueryTranslateArgs = {
  id: Scalars['ID'];
};

export type MemberShare = {
  history?: Maybe<Array<Maybe<ShareRegister>>>;
  summary?: Maybe<ShareBalance>;
};

export type MemberTypeResult = {
  data?: Maybe<Array<Maybe<KymMemberTypes>>>;
  error?: Maybe<QueryError>;
};

export type MonthlyTransactions = {
  closingBalance?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  month: Scalars['String'];
  transactions: Array<Maybe<Transactions>>;
};

export enum Months {
  April = 'APRIL',
  August = 'AUGUST',
  December = 'DECEMBER',
  February = 'FEBRUARY',
  January = 'JANUARY',
  July = 'JULY',
  June = 'JUNE',
  March = 'MARCH',
  May = 'MAY',
  November = 'NOVEMBER',
  October = 'OCTOBER',
  September = 'SEPTEMBER',
}

export type Municipality = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
  wards: Array<Scalars['Int']>;
};

export type Mutation = {
  account: DepositLoanAccountMutation;
  auth: AuthMutation;
  bank: BankMutation;
  document: DocumentMutation;
  eBanking: EBankingMutation;
  example: ExampleMutation;
  inventory: InventoryMutation;
  members: MemberMutation;
  newId: Scalars['String'];
  presignedUrl: PresignedUrlMutation;
  seed: Scalars['Boolean'];
  settings: SettingsMutation;
  share: ShareMutation;
  user: UserMutation;
};

export type MutationError =
  | AuthorizationError
  | BadRequestError
  | NotFoundError
  | ServerError
  | ValidationError;

export type Name = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
};

export enum NatureOfDepositProduct {
  Mandatory = 'MANDATORY',
  RecurringSaving = 'RECURRING_SAVING',
  TermSavingOrFd = 'TERM_SAVING_OR_FD',
  VoluntaryOrOptional = 'VOLUNTARY_OR_OPTIONAL',
}

export enum NatureOfLoanProduct {
  Productive = 'PRODUCTIVE',
  Unproductive = 'UNPRODUCTIVE',
}

export type Nominee = {
  address?: Maybe<Address>;
  citizenship?: Maybe<Citizenship>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NomineeInNepali = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NotFoundError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type NotificationFilter = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum ObjState {
  Approved = 'APPROVED',
  Draft = 'DRAFT',
  Inactive = 'INACTIVE',
  Validated = 'VALIDATED',
}

export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export type Organization = Base & {
  address?: Maybe<Address>;
  basicDetails?: Maybe<OrganizationBasicDetails>;
  contactDetails?: Maybe<OrganizationContactDetails>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  mainContactPerson?: Maybe<OrganizationMainContactPerson>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  registrationDetails?: Maybe<OrganizationRegistrationDetails>;
  statistics?: Maybe<OrganizationStatistics>;
};

export type OrganizationAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  record?: Maybe<Organization>;
  recordId: Scalars['ID'];
};

export type OrganizationBasicDetails = {
  TypeOfOrganization?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type OrganizationContactDetails = {
  email?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  recordId: Scalars['ID'];
};

export type OrganizationDocument = {
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type OrganizationFormData = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<LocationCoordinate>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panOrVat?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  totalCapital?: Maybe<Scalars['Float']>;
  totalMembers?: Maybe<Scalars['Int']>;
  typeOfOrganization?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  wardNo?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationFormState = {
  formData?: Maybe<OrganizationFormData>;
};

export type OrganizationFormStateResult = {
  data?: Maybe<OrganizationFormState>;
  error?: Maybe<QueryError>;
};

export type OrganizationGetResult = {
  data?: Maybe<Organization>;
  error?: Maybe<QueryError>;
};

export type OrganizationInput = {
  contactPersonContactNumber?: InputMaybe<Scalars['String']>;
  contactPersonName?: InputMaybe<Scalars['String']>;
  districtId?: InputMaybe<Scalars['Int']>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  email?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  panOrVat?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  regdAddress?: InputMaybe<Scalars['String']>;
  regdNo?: InputMaybe<Scalars['String']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  totalCapital?: InputMaybe<Scalars['Float']>;
  totalMembers?: InputMaybe<Scalars['Int']>;
  typeOfOrganization?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  wardNo?: InputMaybe<Scalars['Int']>;
  website?: InputMaybe<Scalars['String']>;
};

export type OrganizationListResult = {
  data?: Maybe<Array<Maybe<Organization>>>;
  error?: Maybe<QueryError>;
};

export type OrganizationMainContactPerson = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type OrganizationRegistrationDetails = {
  panOrVat?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
};

export type OrganizationSettingsMutation = {
  delete?: Maybe<OrganizationDeleteResult>;
  initialSetup?: Maybe<OrganizationAddResult>;
};

export type OrganizationSettingsMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type OrganizationSettingsMutationInitialSetupArgs = {
  data: OrganizationInput;
  id: Scalars['ID'];
};

export type OrganizationSettingsQuery = {
  formState?: Maybe<OrganizationFormStateResult>;
  list?: Maybe<OrganizationListResult>;
  /** This is to get organization details of a logged in employee. id of that email will be extracted from the employee who sends the request */
  mine?: Maybe<OrganizationGetResult>;
};

export type OrganizationSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type OrganizationSettingsQueryListArgs = {
  filter?: InputMaybe<OrganizationFilter>;
};

export type OrganizationStatistics = {
  totalCapital: Scalars['Float'];
  totalMembers: Scalars['Int'];
};

export enum Payment_Mode {
  Account = 'ACCOUNT',
  BankVoucher = 'BANK_VOUCHER',
  Cash = 'CASH',
}

export type PageInfo = {
  endCursor?: Maybe<Scalars['Cursor']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Pagination = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<Order>;
};

export type Penalty = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  flatRatePenalty?: Maybe<Scalars['Float']>;
  minimumAmount?: Maybe<Scalars['Amount']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyRate?: Maybe<Scalars['Float']>;
  rateType?: Maybe<PenaltyRateType>;
};

export type PenaltyFormState = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  flatRatePenalty?: Maybe<Scalars['Float']>;
  minimumAmount?: Maybe<Scalars['String']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyRate?: Maybe<Scalars['Float']>;
  rateType?: Maybe<PenaltyRateType>;
};

export type PenaltyInput = {
  dayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  flatRatePenalty?: InputMaybe<Scalars['Float']>;
  minimumAmount?: InputMaybe<Scalars['Amount']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
  rateType?: InputMaybe<PenaltyRateType>;
};

export enum PenaltyRateType {
  FlatRate = 'FLAT_RATE',
  RelativeRate = 'RELATIVE_RATE',
}

export type PersonalInformation = {
  citizenship?: Maybe<Citizenship>;
  dateOfBirth?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  inNepali?: Maybe<PersonalInformationInNepali>;
  name?: Maybe<Name>;
  nationality?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
  panNumber?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type PersonalInformationInNepali = {
  name?: Maybe<Name>;
  occupation?: Maybe<Scalars['String']>;
};

export type PredefinedElementFilter = {
  category: FormCategory;
  searchTerm: FormSearchTerm;
};

export type PredefinedElementListFilter = {
  category?: InputMaybe<FormCategory>;
};

export type PredefinedElementListQueryResult = {
  data?: Maybe<Array<Maybe<FormElement>>>;
  error?: Maybe<QueryError>;
};

export type PredefinedElementQueryResult = {
  data?: Maybe<FormElement>;
  error?: Maybe<QueryError>;
};

export type PredefinedFormQuery = {
  details: PredefinedElementQueryResult;
  list: PredefinedElementListQueryResult;
};

export type PredefinedFormQueryDetailsArgs = {
  filter: PredefinedElementFilter;
};

export type PredefinedFormQueryListArgs = {
  filter: PredefinedElementListFilter;
};

export type PrematurePenalty = {
  noOfDays?: InputMaybe<Scalars['Int']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyDateType?: InputMaybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export enum PrematurePenaltyDateType {
  EffectiveDaysFromStart = 'EFFECTIVE_DAYS_FROM_START',
  RemainingDaysToGetMatured = 'REMAINING_DAYS_TO_GET_MATURED',
}

export type PrematurePenaltyFormState = {
  noOfDays?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDateType?: Maybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PresignedUrlMutation = {
  upload: PresignedUrlOutput;
};

export type PresignedUrlMutationUploadArgs = {
  contentType?: InputMaybe<Scalars['String']>;
};

export type PresignedUrlOutput = {
  filename?: Maybe<Scalars['String']>;
  getUrl?: Maybe<Scalars['String']>;
  putUrl?: Maybe<Scalars['String']>;
};

export type ProductCode = {
  initialNo: Scalars['String'];
  prefix: Scalars['String'];
};

export type ProductCodeFormState = {
  initialNo: Scalars['String'];
  prefix: Scalars['String'];
};

export type ProductCodeType = {
  initialNo: Scalars['String'];
  prefix: Scalars['String'];
};

export type Province = {
  districts: Array<District>;
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type Query = {
  account: DepositLoanAccountQuery;
  administration: AdministrationQuery;
  auth: AuthQuery;
  bank: BankQuery;
  config: ConfigQuery;
  dashboard: DashboardQuery;
  document: DocumentQuery;
  eBanking: EBankingQuery;
  example: ExampleQuery;
  form: FormQuery;
  inventory: InventoryQuery;
  members: MemberQuery;
  routesAndCodes: RoutesAndCodesQuery;
  settings: SettingsQuery;
  share: ShareQuery;
  user: UserQuery;
};

export type QueryError =
  | AuthorizationError
  | BadRequestError
  | NotFoundError
  | ServerError;

export type Rebate = {
  daysBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  percentage?: Maybe<Scalars['Float']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
};

export type RebateFormState = {
  daysBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  percentage?: Maybe<Scalars['Float']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
};

export type RebateInput = {
  daysBeforeInstallmentDate?: InputMaybe<Scalars['Int']>;
  noOfInstallment?: InputMaybe<Scalars['Int']>;
  percentage?: InputMaybe<Scalars['Float']>;
  rebateAmount?: InputMaybe<Scalars['Amount']>;
};

export type RecentTransactionFilter = {
  limit: Scalars['Int'];
};

export type Result = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type RoutesAndCodes = {
  code?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type RoutesAndCodesFilter = {
  code?: InputMaybe<Scalars['Int']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type RoutesAndCodesQuery = {
  list: Array<RoutesAndCodes>;
};

export type RoutesAndCodesQueryListArgs = {
  filter?: InputMaybe<RoutesAndCodesFilter>;
};

export enum Share_Status {
  Active = 'ACTIVE',
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED',
}

export enum Share_Transaction_Direction {
  Purchase = 'PURCHASE',
  Return = 'RETURN',
}

export type SectionDetailsFilter = {
  id: Scalars['ID'];
};

export type SectionDetailsQueryResult = {
  data?: Maybe<FormSection>;
  error?: Maybe<QueryError>;
};

export type ServerError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type ServiceType = {
  amount?: InputMaybe<Scalars['Amount']>;
  ledgerName?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
};

export type ServiceTypeFormState = {
  amount?: Maybe<Scalars['Amount']>;
  ledgerName?: Maybe<Scalars['String']>;
  serviceName?: Maybe<Scalars['String']>;
};

export type Services = {
  enabled: Scalars['Boolean'];
  icon: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  service_id: Scalars['String'];
};

export type SettingsMutation = {
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  declaration: DeclarationMutation;
  form?: Maybe<FormSettingMutation>;
  general?: Maybe<GeneralSettingsMutation>;
};

export type SettingsQuery = {
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  declaration: DeclarationQuery;
  form?: Maybe<FormSettingQuery>;
  general?: Maybe<GeneralSettingsQuery>;
};

export type ShareBalance = Base & {
  balance: Scalars['Int'];
  count: Scalars['Int'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  member: Member;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  shareNumbers?: Maybe<Array<Maybe<ShareNumber>>>;
};

export type ShareBalanceConnection = {
  edges: Array<ShareBalanceEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ShareBalanceEdge = {
  cursor: Scalars['String'];
  node: ShareBalance;
};

export type ShareBalanceFilter = {
  id?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  memberSearchText?: InputMaybe<Scalars['String']>;
};

export type ShareExtraCharges = {
  name: Scalars['String'];
  value: Scalars['Float'];
};

export type ShareExtraChargesInput = {
  name: Scalars['String'];
  value: Scalars['Float'];
};

export type ShareMutation = {
  purchase: SharePurchaseResult;
  return: ShareReturnResult;
};

export type ShareMutationPurchaseArgs = {
  data: SharePurchaseInput;
  id: Scalars['ID'];
};

export type ShareMutationReturnArgs = {
  data: ShareReturnInput;
  id: Scalars['ID'];
};

export type ShareNumber = {
  end?: Maybe<Scalars['Int']>;
  start?: Maybe<Scalars['Int']>;
};

export type SharePurchaseError = InvalidDataError;

export type SharePurchaseInput = {
  accountId?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<Payment_Mode>;
  shareAmount?: InputMaybe<Scalars['Float']>;
  shareCount?: InputMaybe<Scalars['Int']>;
  totalAmount?: InputMaybe<Scalars['Float']>;
  voucherNumber?: InputMaybe<Scalars['String']>;
};

export type SharePurchaseResult = {
  error?: Maybe<SharePurchaseError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type ShareQuery = {
  balance?: Maybe<ShareBalanceConnection>;
  register?: Maybe<ShareRegisterConnection>;
};

export type ShareQueryBalanceArgs = {
  filter?: InputMaybe<ShareBalanceFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type ShareQueryRegisterArgs = {
  filter?: InputMaybe<ShareRegisterFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type ShareRegister = Base & {
  accountId?: Maybe<Scalars['String']>;
  balance: Scalars['Int'];
  bankId?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  credit?: Maybe<Scalars['Int']>;
  debit?: Maybe<Scalars['Int']>;
  endNumber: Scalars['Int'];
  extraFee?: Maybe<Array<Maybe<ShareExtraCharges>>>;
  id: Scalars['ID'];
  member: Member;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  paymentMode: Payment_Mode;
  shareAmount?: Maybe<Scalars['Float']>;
  startNumber: Scalars['Int'];
  status: Share_Status;
  totalAmount?: Maybe<Scalars['Float']>;
  transactionDate: Scalars['Date'];
  transactionDirection: Share_Transaction_Direction;
  voucherNumber?: Maybe<Scalars['String']>;
};

export type ShareRegisterConnection = {
  edges: Array<ShareRegisterEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ShareRegisterEdge = {
  cursor: Scalars['String'];
  node: ShareRegister;
};

export type ShareRegisterFilter = {
  dateFrom?: InputMaybe<Scalars['Date']>;
  dateTo?: InputMaybe<Scalars['Date']>;
  id?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  memberSearchText?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Share_Status>;
  transactionDirection?: InputMaybe<Share_Transaction_Direction>;
};

export type ShareReturnError = InvalidDataError;

export type ShareReturnInput = {
  accountId?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId?: InputMaybe<Scalars['String']>;
  noOfReturnedShares?: InputMaybe<Scalars['Int']>;
  paymentMode?: InputMaybe<Payment_Mode>;
  remainingShare?: InputMaybe<Scalars['Int']>;
  remainingShareValue?: InputMaybe<Scalars['Float']>;
  selectAllShares?: InputMaybe<Scalars['Boolean']>;
  totalAmount?: InputMaybe<Scalars['Float']>;
  voucherNumber?: InputMaybe<Scalars['String']>;
  withdrawAmount?: InputMaybe<Scalars['Float']>;
};

export type ShareReturnResult = {
  error?: Maybe<ShareReturnError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type SisterConcernDetails = {
  address?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
};

export type SisterConcernDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type SisterConcernDetailsType = {
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type SubscriptionMutation = {
  ReferenceKYM: DocumentMutationResult;
  Upsert: DocumentMutationResult;
};

export type SubscriptionMutationReferenceKymArgs = {
  deference?: InputMaybe<Scalars['Boolean']>;
  fieldId: Scalars['String'];
  memberId: Scalars['String'];
};

export type SubscriptionMutationUpsertArgs = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
};

export enum Transaction_Direction {
  Purchased = 'PURCHASED',
  Sold = 'SOLD',
}

export enum Transaction_Type {
  Deposit = 'DEPOSIT',
  SharePurchase = 'SHARE_PURCHASE',
  Transfer = 'TRANSFER',
  Withdraw = 'WITHDRAW',
}

export type TestDbResult = {
  name: Scalars['String'];
};

export enum TextFormat {
  Email = 'EMAIL',
  IPv4 = 'IPv4',
  IPv6 = 'IPv6',
}

export enum TimePeriod {
  Day = 'DAY',
  Fortnight = 'FORTNIGHT',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR',
}

export type TodayTrend = {
  trendData?: Maybe<Array<Maybe<Scalars['Float']>>>;
  type: DashboardTodayType;
  value: Scalars['Float'];
  yesterdayValue: Scalars['Float'];
};

export type TodayTrendTrendDataArgs = {
  filter: TrendDataFilter;
};

export type TransactionFilter = {
  fromDate?: InputMaybe<Scalars['Date']>;
  id: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  toDate?: InputMaybe<Scalars['Date']>;
  type?: InputMaybe<TranslateInput>;
};

export type Transactions = {
  amount: Scalars['Float'];
  date: Scalars['Date'];
  id: Scalars['String'];
  name: Scalars['String'];
  transactionDirection: Transaction_Direction;
  transactionType: Transaction_Type;
};

export type TranslateData = {
  data?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: Maybe<Scalars['String']>;
};

export type TranslateInput = {
  data?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: InputMaybe<Scalars['String']>;
};

export type TranslateQueryResult = {
  data?: Maybe<Array<Maybe<TranslateData>>>;
  error?: Maybe<QueryError>;
};

export type TrendDataFilter = {
  fromDate?: InputMaybe<Scalars['Date']>;
  period?: InputMaybe<TimePeriod>;
  toDate?: InputMaybe<Scalars['Date']>;
};

export enum TypeOfOrganization {
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
}

export type UploadedDocument = {
  docData: Array<Maybe<UploadedDocumentData>>;
  fieldId?: Maybe<Scalars['String']>;
};

export type UploadedDocumentData = {
  identifier: Scalars['String'];
  url: Scalars['String'];
};

export type User = Base & {
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['Localized'];
  id: Scalars['ID'];
  lastName: Scalars['Localized'];
  middleName: Scalars['Localized'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  organization: Organization;
  username: Scalars['String'];
};

export type UserMutation = {
  preference?: Maybe<UserPreferenceMutation>;
};

export type UserPreference = {
  date?: Maybe<DateType>;
  id?: Maybe<Scalars['ID']>;
  language?: Maybe<Language>;
  languageCode?: Maybe<Scalars['String']>;
};

export type UserPreferenceInput = {
  date?: InputMaybe<DateType>;
  language?: InputMaybe<Language>;
};

export type UserPreferenceMutation = {
  update?: Maybe<UserPreferenceResult>;
};

export type UserPreferenceMutationUpdateArgs = {
  data: UserPreferenceInput;
  id: Scalars['ID'];
};

export type UserPreferenceQuery = {
  get?: Maybe<UserPreference>;
};

export type UserPreferenceQueryGetArgs = {
  id: Scalars['ID'];
};

export type UserPreferenceResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UserPreference>;
  recordId?: Maybe<Scalars['ID']>;
};

export type UserQuery = {
  preference?: Maybe<UserPreferenceQuery>;
};

export enum UserType {
  Human = 'HUMAN',
  System = 'SYSTEM',
}

export type UtilityPayemntMutation = {
  post?: Maybe<UtilityPaymentResult>;
};

export type UtilityPayemntMutationPostArgs = {
  serviceID: Scalars['ID'];
  state?: InputMaybe<Scalars['Map']>;
  type?: InputMaybe<Scalars['String']>;
};

export type UtilityPaymentError = UtilityPaymentInvalidDataError;

export type UtilityPaymentInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type UtilityPaymentLayoutComponent = {
  contents?: Maybe<Scalars['Map']>;
  type?: Maybe<Scalars['String']>;
};

export type UtilityPaymentRecord = {
  components?: Maybe<Array<Maybe<UtilityPaymentLayoutComponent>>>;
  header_name?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Map']>;
  type?: Maybe<Scalars['String']>;
};

export type UtilityPaymentResult = {
  error?: Maybe<UtilityPaymentError>;
  record?: Maybe<UtilityPaymentRecord>;
  transactionID?: Maybe<Scalars['ID']>;
};

export type UtilityPayments = {
  enabled: Scalars['Boolean'];
  icon: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  service_id: Scalars['String'];
};

export type ValidationError = {
  code: Scalars['Int'];
  message: Scalars['InvalidData'];
};

export type Valuator = Base & {
  academicQualification?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  contractDate?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  insurancePremium?: Maybe<Scalars['Float']>;
  mobileNo?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  phoneNo?: Maybe<Scalars['String']>;
  renewalDate?: Maybe<Scalars['String']>;
  valuationLisenceNo?: Maybe<Scalars['String']>;
  valuatorId?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
  valuatorType?: Maybe<ValuatorType>;
};

export type ValuatorConnection = {
  edges?: Maybe<Array<ValuatorEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ValuatorEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Valuator>;
};

export type ValuatorFormStateData = {
  academicQualification?: Maybe<Scalars['String']>;
  contractDate?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  houseNo?: Maybe<Scalars['String']>;
  insurancePremium?: Maybe<Scalars['Float']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<Coordinate>;
  mobileNo?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  renewalDate?: Maybe<Scalars['String']>;
  valuationLisenceNo?: Maybe<Scalars['String']>;
  valuatorId?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
  valuatorType?: Maybe<ValuatorType>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type ValuatorFormStateResult = {
  data?: Maybe<ValuatorFormStateData>;
  error?: Maybe<QueryError>;
};

export type ValuatorInput = {
  academicQualification?: InputMaybe<Scalars['String']>;
  contractDate?: InputMaybe<Scalars['String']>;
  districtId?: InputMaybe<Scalars['Int']>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  email?: InputMaybe<Scalars['String']>;
  houseNo?: InputMaybe<Scalars['String']>;
  insurancePremium?: InputMaybe<Scalars['Float']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<CoordinateInput>;
  mobileNo?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  renewalDate?: InputMaybe<Scalars['String']>;
  valuationLisenceNo?: InputMaybe<Scalars['String']>;
  valuatorId?: InputMaybe<Scalars['String']>;
  valuatorName?: InputMaybe<Scalars['String']>;
  valuatorType?: InputMaybe<ValuatorType>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type ValuatorResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ValuatorSettingsQuery>;
  record?: Maybe<Valuator>;
  recordId: Scalars['ID'];
};

export type ValuatorSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type ValuatorSettingsMutation = {
  add?: Maybe<ValuatorResult>;
};

export type ValuatorSettingsMutationAddArgs = {
  data?: InputMaybe<ValuatorInput>;
  id: Scalars['ID'];
};

export type ValuatorSettingsQuery = {
  formState?: Maybe<ValuatorFormStateResult>;
  list?: Maybe<ValuatorConnection>;
};

export type ValuatorSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type ValuatorSettingsQueryListArgs = {
  filter?: InputMaybe<ValuatorSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export enum ValuatorType {
  Individual = 'INDIVIDUAL',
  Organization = 'ORGANIZATION',
}

export enum Week {
  Friday = 'FRIDAY',
  Monday = 'MONDAY',
  Saturday = 'SATURDAY',
  Sunday = 'SUNDAY',
  Thursaday = 'THURSADAY',
  Tuesday = 'TUESDAY',
  Wednesday = 'WEDNESDAY',
}

export enum WeeklyFrequency {
  Day = 'DAY',
  DayOfTheWeek = 'DAY_OF_THE_WEEK',
}

export type KymIndFormStateQuery = {
  data?: Maybe<KymIndFormState>;
  error?: Maybe<QueryError>;
};

export type GetAccountListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAccountListQuery = {
  eBanking: {
    account?: {
      list?: {
        edges: Array<{
          node: {
            id: string;
            name: string;
            amount: number;
            isDefault: boolean;
            accountNumber: string;
            interestRate: number;
          };
        }>;
      } | null;
    } | null;
  };
};

export type GetAccountSummaryQueryVariables = Exact<{ [key: string]: never }>;

export type GetAccountSummaryQuery = {
  eBanking: {
    account?: {
      summary?: { totalSaving: number; totalLoan: number } | null;
    } | null;
  };
};

export type GetAccountDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountDetailsQuery = {
  eBanking: {
    account?: {
      get?: {
        id: string;
        name: string;
        accountNumber: string;
        isDefault: boolean;
        amount: number;
        interestRate: number;
        accountType: Account_Type;
        interestBooked: number;
        interestEarned: number;
        subscribedDate: string;
        history?: Array<{ id: string; date: string; balance: number }> | null;
        transactions?: Array<{
          id: string;
          name: string;
          date: string;
          amount: number;
          transactionType: Transaction_Type;
          transactionDirection: Transaction_Direction;
        }> | null;
      } | null;
    } | null;
  };
};

export type GetCoopChequeServicesQueryVariables = Exact<{
  [key: string]: never;
}>;

export type GetCoopChequeServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      cheque?: { options: Array<{ name: string; enabled: boolean }> } | null;
    } | null;
  };
};

export type GetCoopLoanServicesQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopLoanServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      loan?: {
        options: Array<{
          name: string;
          enabled: boolean;
          requestType?: string | null;
        }>;
      } | null;
    } | null;
  };
};

export type GetCoopComplaintServicesQueryVariables = Exact<{
  [key: string]: never;
}>;

export type GetCoopComplaintServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      complaint?: {
        options: Array<{
          name: string;
          enabled: boolean;
          requestType?: string | null;
        }>;
      } | null;
    } | null;
  };
};

export type GetCoopDownloadsQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopDownloadsQuery = {
  eBanking: {
    cooperativeServices?: {
      downloads?: {
        options: Array<{
          name: string;
          enabled: boolean;
          requestType?: string | null;
        }>;
      } | null;
    } | null;
  };
};

export type GetAnnouncementListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAnnouncementListQuery = {
  eBanking: {
    notification?: {
      announcements?: {
        list: Array<{
          id: string;
          details: any;
          summary: string;
          title: string;
          date: string;
        } | null>;
      } | null;
    } | null;
  };
};

export type GetHomeServiceListQueryVariables = Exact<{ [key: string]: never }>;

export type GetHomeServiceListQuery = {
  eBanking: {
    services?: Array<{
      id: string;
      name: string;
      service_id: string;
      icon: string;
      enabled: boolean;
    } | null> | null;
  };
};

export type GetRecentTransactionsQueryVariables = Exact<{
  [key: string]: never;
}>;

export type GetRecentTransactionsQuery = {
  eBanking: {
    transaction?: {
      recent?: Array<{
        id: string;
        name: string;
        transactionType: Transaction_Type;
        date: string;
        transactionDirection: Transaction_Direction;
        amount: number;
      } | null> | null;
    } | null;
  };
};

export type GetUtilityListQueryVariables = Exact<{ [key: string]: never }>;

export type GetUtilityListQuery = {
  eBanking: {
    utilityPayments?: Array<{
      id: string;
      name: string;
      enabled: boolean;
      icon: string;
      service_id: string;
    } | null> | null;
  };
};

export const GetAccountListDocument = `
    query getAccountList {
  eBanking {
    account {
      list(paginate: {first: 6}) {
        edges {
          node {
            id
            name
            amount
            isDefault
            accountNumber
            interestRate
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountListQuery = <
  TData = GetAccountListQuery,
  TError = unknown
>(
  variables?: GetAccountListQueryVariables,
  options?: UseQueryOptions<GetAccountListQuery, TError, TData>
) =>
  useQuery<GetAccountListQuery, TError, TData>(
    variables === undefined
      ? ['getAccountList']
      : ['getAccountList', variables],
    useAxios<GetAccountListQuery, GetAccountListQueryVariables>(
      GetAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountSummaryDocument = `
    query getAccountSummary {
  eBanking {
    account {
      summary {
        totalSaving
        totalLoan
      }
    }
  }
}
    `;
export const useGetAccountSummaryQuery = <
  TData = GetAccountSummaryQuery,
  TError = unknown
>(
  variables?: GetAccountSummaryQueryVariables,
  options?: UseQueryOptions<GetAccountSummaryQuery, TError, TData>
) =>
  useQuery<GetAccountSummaryQuery, TError, TData>(
    variables === undefined
      ? ['getAccountSummary']
      : ['getAccountSummary', variables],
    useAxios<GetAccountSummaryQuery, GetAccountSummaryQueryVariables>(
      GetAccountSummaryDocument
    ).bind(null, variables),
    options
  );
export const GetAccountDetailsDocument = `
    query getAccountDetails($id: ID!) {
  eBanking {
    account {
      get(id: $id) {
        id
        name
        accountNumber
        isDefault
        amount
        interestRate
        accountType
        interestBooked
        interestEarned
        subscribedDate
        history {
          id
          date
          balance
        }
        transactions {
          id
          name
          date
          amount
          transactionType
          transactionDirection
        }
      }
    }
  }
}
    `;
export const useGetAccountDetailsQuery = <
  TData = GetAccountDetailsQuery,
  TError = unknown
>(
  variables: GetAccountDetailsQueryVariables,
  options?: UseQueryOptions<GetAccountDetailsQuery, TError, TData>
) =>
  useQuery<GetAccountDetailsQuery, TError, TData>(
    ['getAccountDetails', variables],
    useAxios<GetAccountDetailsQuery, GetAccountDetailsQueryVariables>(
      GetAccountDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetCoopChequeServicesDocument = `
    query getCoopChequeServices {
  eBanking {
    cooperativeServices {
      cheque {
        options {
          name
          enabled
        }
      }
    }
  }
}
    `;
export const useGetCoopChequeServicesQuery = <
  TData = GetCoopChequeServicesQuery,
  TError = unknown
>(
  variables?: GetCoopChequeServicesQueryVariables,
  options?: UseQueryOptions<GetCoopChequeServicesQuery, TError, TData>
) =>
  useQuery<GetCoopChequeServicesQuery, TError, TData>(
    variables === undefined
      ? ['getCoopChequeServices']
      : ['getCoopChequeServices', variables],
    useAxios<GetCoopChequeServicesQuery, GetCoopChequeServicesQueryVariables>(
      GetCoopChequeServicesDocument
    ).bind(null, variables),
    options
  );
export const GetCoopLoanServicesDocument = `
    query getCoopLoanServices {
  eBanking {
    cooperativeServices {
      loan {
        options {
          name
          enabled
          requestType
        }
      }
    }
  }
}
    `;
export const useGetCoopLoanServicesQuery = <
  TData = GetCoopLoanServicesQuery,
  TError = unknown
>(
  variables?: GetCoopLoanServicesQueryVariables,
  options?: UseQueryOptions<GetCoopLoanServicesQuery, TError, TData>
) =>
  useQuery<GetCoopLoanServicesQuery, TError, TData>(
    variables === undefined
      ? ['getCoopLoanServices']
      : ['getCoopLoanServices', variables],
    useAxios<GetCoopLoanServicesQuery, GetCoopLoanServicesQueryVariables>(
      GetCoopLoanServicesDocument
    ).bind(null, variables),
    options
  );
export const GetCoopComplaintServicesDocument = `
    query getCoopComplaintServices {
  eBanking {
    cooperativeServices {
      complaint {
        options {
          name
          enabled
          requestType
        }
      }
    }
  }
}
    `;
export const useGetCoopComplaintServicesQuery = <
  TData = GetCoopComplaintServicesQuery,
  TError = unknown
>(
  variables?: GetCoopComplaintServicesQueryVariables,
  options?: UseQueryOptions<GetCoopComplaintServicesQuery, TError, TData>
) =>
  useQuery<GetCoopComplaintServicesQuery, TError, TData>(
    variables === undefined
      ? ['getCoopComplaintServices']
      : ['getCoopComplaintServices', variables],
    useAxios<
      GetCoopComplaintServicesQuery,
      GetCoopComplaintServicesQueryVariables
    >(GetCoopComplaintServicesDocument).bind(null, variables),
    options
  );
export const GetCoopDownloadsDocument = `
    query getCoopDownloads {
  eBanking {
    cooperativeServices {
      downloads {
        options {
          name
          enabled
          requestType
        }
      }
    }
  }
}
    `;
export const useGetCoopDownloadsQuery = <
  TData = GetCoopDownloadsQuery,
  TError = unknown
>(
  variables?: GetCoopDownloadsQueryVariables,
  options?: UseQueryOptions<GetCoopDownloadsQuery, TError, TData>
) =>
  useQuery<GetCoopDownloadsQuery, TError, TData>(
    variables === undefined
      ? ['getCoopDownloads']
      : ['getCoopDownloads', variables],
    useAxios<GetCoopDownloadsQuery, GetCoopDownloadsQueryVariables>(
      GetCoopDownloadsDocument
    ).bind(null, variables),
    options
  );
export const GetAnnouncementListDocument = `
    query getAnnouncementList {
  eBanking {
    notification {
      announcements {
        list {
          id
          details
          summary
          title
          date
        }
      }
    }
  }
}
    `;
export const useGetAnnouncementListQuery = <
  TData = GetAnnouncementListQuery,
  TError = unknown
>(
  variables?: GetAnnouncementListQueryVariables,
  options?: UseQueryOptions<GetAnnouncementListQuery, TError, TData>
) =>
  useQuery<GetAnnouncementListQuery, TError, TData>(
    variables === undefined
      ? ['getAnnouncementList']
      : ['getAnnouncementList', variables],
    useAxios<GetAnnouncementListQuery, GetAnnouncementListQueryVariables>(
      GetAnnouncementListDocument
    ).bind(null, variables),
    options
  );
export const GetHomeServiceListDocument = `
    query getHomeServiceList {
  eBanking {
    services {
      id
      name
      service_id
      icon
      enabled
    }
  }
}
    `;
export const useGetHomeServiceListQuery = <
  TData = GetHomeServiceListQuery,
  TError = unknown
>(
  variables?: GetHomeServiceListQueryVariables,
  options?: UseQueryOptions<GetHomeServiceListQuery, TError, TData>
) =>
  useQuery<GetHomeServiceListQuery, TError, TData>(
    variables === undefined
      ? ['getHomeServiceList']
      : ['getHomeServiceList', variables],
    useAxios<GetHomeServiceListQuery, GetHomeServiceListQueryVariables>(
      GetHomeServiceListDocument
    ).bind(null, variables),
    options
  );
export const GetRecentTransactionsDocument = `
    query getRecentTransactions {
  eBanking {
    transaction {
      recent {
        id
        name
        transactionType
        date
        transactionDirection
        amount
      }
    }
  }
}
    `;
export const useGetRecentTransactionsQuery = <
  TData = GetRecentTransactionsQuery,
  TError = unknown
>(
  variables?: GetRecentTransactionsQueryVariables,
  options?: UseQueryOptions<GetRecentTransactionsQuery, TError, TData>
) =>
  useQuery<GetRecentTransactionsQuery, TError, TData>(
    variables === undefined
      ? ['getRecentTransactions']
      : ['getRecentTransactions', variables],
    useAxios<GetRecentTransactionsQuery, GetRecentTransactionsQueryVariables>(
      GetRecentTransactionsDocument
    ).bind(null, variables),
    options
  );
export const GetUtilityListDocument = `
    query getUtilityList {
  eBanking {
    utilityPayments {
      id
      name
      enabled
      icon
      service_id
    }
  }
}
    `;
export const useGetUtilityListQuery = <
  TData = GetUtilityListQuery,
  TError = unknown
>(
  variables?: GetUtilityListQueryVariables,
  options?: UseQueryOptions<GetUtilityListQuery, TError, TData>
) =>
  useQuery<GetUtilityListQuery, TError, TData>(
    variables === undefined
      ? ['getUtilityList']
      : ['getUtilityList', variables],
    useAxios<GetUtilityListQuery, GetUtilityListQueryVariables>(
      GetUtilityListDocument
    ).bind(null, variables),
    options
  );
