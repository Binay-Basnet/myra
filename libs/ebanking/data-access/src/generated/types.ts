/* eslint-disable */
//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Amount: any;
  Any: unknown;
  Cursor: string;
  Date: string;
  Email: any;
  HTML: any;
  InvalidData: Record<string, Array<string>>;
  Localized: Record<'local' | 'en' | 'np', string>;
  Map: Record<string, string>;
  Time: string;
};

export type AbbsTransaction = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  payableAccountId?: Maybe<Scalars['String']>;
  receivableAccountId?: Maybe<Scalars['String']>;
};

export type AccountConnection = {
  edges: Array<AccountEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type AccountEdge = {
  cursor: Scalars['Cursor'];
  node: EbankingAccount;
};

export type AccountFilter = {
  id?: InputMaybe<Scalars['String']>;
};

export type AccountHistory = {
  balance: Scalars['Float'];
  date: Scalars['String'];
  id: Scalars['String'];
};

export type AccountMinimal = {
  accountNumber: Scalars['String'];
  balance: Scalars['String'];
  id: Scalars['String'];
  interestRate: Scalars['Float'];
  isDefault: Scalars['Boolean'];
  name: Scalars['String'];
  productName: Scalars['String'];
};

export type AccountMinimalResult = {
  accountIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  accounts?: Maybe<Array<Maybe<AccountMinimal>>>;
  recentTransactions?: Maybe<EbankingTransactionConnection>;
  totalBalance?: Maybe<Scalars['String']>;
};

export type AccountMinimalResultRecentTransactionsArgs = {
  filter?: InputMaybe<EbankingTransactionFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type AccountSummary = {
  totalLoan: Scalars['Float'];
  totalSaving: Scalars['Float'];
};

export type Address = {
  coordinates?: Maybe<Coordinate>;
  district?: Maybe<Scalars['Localized']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernment?: Maybe<Scalars['Localized']>;
  locality?: Maybe<Scalars['Localized']>;
  state?: Maybe<Scalars['Localized']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AdministrationQuery = {
  all: Array<Province>;
  districts: Array<Result>;
  municipalities: Array<Result>;
  provinces: Array<Result>;
  wards: Array<Scalars['Int']>;
};

export type AdministrationQueryDistrictsArgs = {
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryMunicipalitiesArgs = {
  districtId?: InputMaybe<Scalars['Int']>;
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryWardsArgs = {
  districtId: Scalars['Int'];
  municipalityId: Scalars['Int'];
  provinceId: Scalars['Int'];
};

export type AdministrativeAddress = {
  district: District;
  locality?: Maybe<Scalars['String']>;
  municipality: Municipality;
  province: Province;
  wardNo: Scalars['Int'];
};

export type AmountLimitFormState = {
  avgAmount?: Maybe<Scalars['Amount']>;
  maxAmount?: Maybe<Scalars['Amount']>;
  minAmount?: Maybe<Scalars['Amount']>;
};

export const Arrange = {
  Asc: 'ASC',
  Desc: 'DESC',
} as const;

export type Arrange = typeof Arrange[keyof typeof Arrange];
export type AuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type AuthTokenResult = {
  error?: Maybe<MutationError>;
  token?: Maybe<AuthToken>;
};

export type AuthorizationError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type BadRequestError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export const BalanceType = {
  Cr: 'CR',
  Dr: 'DR',
} as const;

export type BalanceType = typeof BalanceType[keyof typeof BalanceType];
export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type Branch = {
  abbsTransaction?: Maybe<AbbsTransaction>;
  address?: Maybe<Address>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  contactNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
};

export const BranchCategory = {
  BranchOffice: 'BRANCH_OFFICE',
  ContactOffice: 'CONTACT_OFFICE',
  HeadOffice: 'HEAD_OFFICE',
  RegionalOffice: 'REGIONAL_OFFICE',
  ServiceCenter: 'SERVICE_CENTER',
} as const;

export type BranchCategory = typeof BranchCategory[keyof typeof BranchCategory];
export type BranchFormData = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  districtId?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<LocationCoordinate>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  payableAccountId?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  receivableAccountId?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type BranchGetData = {
  data?: Maybe<Array<Maybe<BranchFormData>>>;
  error?: Maybe<QueryError>;
};

export type ChequePastRequest = {
  branch?: Maybe<Branch>;
  chequeBlockNumber?: Maybe<Scalars['String']>;
  chequeBlockReason?: Maybe<Scalars['String']>;
  chequeRequestType?: Maybe<EBankingChequeRequestType>;
  collector?: Maybe<MyraUser>;
  createdDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  note?: Maybe<Scalars['String']>;
  serviceStatus: EBankingActiveLoanStatus;
  status: EBankingServiceStatus;
  typeOfRequest?: Maybe<EbankingServiceRequestType>;
  withdrawAmount?: Maybe<Scalars['Amount']>;
  withdrawDate?: Maybe<Scalars['String']>;
};

export type CollateralFormState = {
  maxDV?: Maybe<Scalars['Float']>;
  maxFMV?: Maybe<Scalars['Float']>;
  maxValue?: Maybe<Scalars['Float']>;
  minDV?: Maybe<Scalars['Float']>;
  minFMV?: Maybe<Scalars['Float']>;
  minValue?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export const ComparatorType = {
  Between: 'BETWEEN',
  Contains: 'CONTAINS',
  EqualTo: 'EqualTo',
  GreaterThan: 'GreaterThan',
  HasNoValue: 'HasNoValue',
  HasValue: 'HasValue',
  In: 'IN',
  LessThan: 'LessThan',
} as const;

export type ComparatorType = typeof ComparatorType[keyof typeof ComparatorType];
export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type CoopStatistics = {
  totalBranches: Scalars['Int'];
  totalCapital?: Maybe<Scalars['String']>;
  totalMembers: Scalars['Int'];
};

export type CooperativeConnectInput = {
  cooperativeId?: InputMaybe<Scalars['ID']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  pinCode?: InputMaybe<Scalars['Int']>;
};

export type CooperativeInformation = {
  id: Scalars['ID'];
  logoId?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  organizationCode?: Maybe<Scalars['String']>;
};

export type Coordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type CoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export const CriteriaSection = {
  Age: 'AGE',
  CooperativeType: 'COOPERATIVE_TYPE',
  EducationQualification: 'EDUCATION_QUALIFICATION',
  Ethnicity: 'ETHNICITY',
  ForeignEmployment: 'FOREIGN_EMPLOYMENT',
  Gender: 'GENDER',
  MaritalStatus: 'MARITAL_STATUS',
  NatureOfBusinessCoopunion: 'NATURE_OF_BUSINESS_COOPUNION',
  NatureOfBusinessInstitutions: 'NATURE_OF_BUSINESS_INSTITUTIONS',
  OccupationDetails: 'OCCUPATION_DETAILS',
} as const;

export type CriteriaSection = typeof CriteriaSection[keyof typeof CriteriaSection];
export type DataType = {
  length?: Maybe<Scalars['String']>;
  minLength?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type DateFilter = {
  from?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
};

export const DefaultAccountType = {
  Current: 'CURRENT',
  Saving: 'SAVING',
} as const;

export type DefaultAccountType = typeof DefaultAccountType[keyof typeof DefaultAccountType];
export const DepositFrequency = {
  HalfYearly: 'HALF_YEARLY',
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
  Yearly: 'YEARLY',
} as const;

export type DepositFrequency = typeof DepositFrequency[keyof typeof DepositFrequency];
export type DepositProduct = Base & {
  accountClosingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  interest?: Maybe<Scalars['Float']>;
  isMandatorySaving?: Maybe<Scalars['Boolean']>;
  minimumBalance?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  nature: NatureOfDepositProduct;
  objState: ObjState;
  productCode: Scalars['String'];
  productName: Scalars['String'];
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductCategoryList = {
  data?: Maybe<Array<Maybe<DepositProductMinimal>>>;
  error?: Maybe<QueryError>;
};

export type DepositProductConnection = {
  edges: Array<DepositProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type DepositProductCriteria = {
  cooperativeType?: Maybe<Array<Maybe<Scalars['String']>>>;
  cooperativeUnion?: Maybe<Array<Maybe<Scalars['String']>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['String']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['String']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionType?: Maybe<Array<Maybe<Scalars['String']>>>;
  maritalStatus?: Maybe<Array<Maybe<Scalars['String']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DepositProductCriteriaResult = {
  data?: Maybe<DepositProductCriteria>;
  error?: Maybe<QueryError>;
};

export type DepositProductEdge = {
  cursor: Scalars['Cursor'];
  node: DepositProduct;
};

export type DepositProductFormStateData = {
  accountCloseCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  accountType?: Maybe<DefaultAccountType>;
  allowLoan?: Maybe<Scalars['Boolean']>;
  alternativeChannelCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  alternativeChannels?: Maybe<Scalars['Boolean']>;
  atmCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  autoOpen?: Maybe<Scalars['Boolean']>;
  balanceLimit?: Maybe<AmountLimitFormState>;
  chequeCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  chequeIssue?: Maybe<Scalars['Boolean']>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  depositAmount?: Maybe<AmountLimitFormState>;
  depositFrequency?: Maybe<Frequency>;
  description?: Maybe<Scalars['String']>;
  dormantSetup?: Maybe<Array<Maybe<DormantSetupFormState>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  fixedDepositAmountLimit?: Maybe<AmountLimitFormState>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id?: Maybe<Scalars['ID']>;
  individualDocuments?: Maybe<Array<Maybe<IndividualRequiredDocument>>>;
  institutionDocuments?: Maybe<Array<Maybe<InstitutionRequiredDocument>>>;
  interest?: Maybe<InterestFormState>;
  isForMinors?: Maybe<Scalars['Boolean']>;
  isMandatorySaving?: Maybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isTenureApplicable?: Maybe<Scalars['Boolean']>;
  ladderRate?: Maybe<Scalars['Boolean']>;
  ladderRateData?: Maybe<Array<Maybe<LadderRateFormState>>>;
  ledgerMapping?: Maybe<LedgerMappingFormState>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxPostingFreqDifference?: Maybe<Scalars['Int']>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  nature?: Maybe<NatureOfDepositProduct>;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  noOftransactionAllowed?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penalty?: Maybe<Scalars['Boolean']>;
  penaltyData?: Maybe<Penalty>;
  percentageOfDeposit?: Maybe<Scalars['Float']>;
  postingFrequency?: Maybe<DepositFrequency>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  productCode: ProductCodeFormState;
  productName?: Maybe<Scalars['String']>;
  productPremiumInterest?: Maybe<Scalars['Float']>;
  rebate?: Maybe<Scalars['Boolean']>;
  rebateData?: Maybe<Rebate>;
  serviceCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  specifyWithdrawRestriction?: Maybe<Scalars['String']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultiple?: Maybe<Scalars['Boolean']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  transactionAllowed?: Maybe<DepositFrequency>;
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: Maybe<Scalars['Boolean']>;
  withdrawAmountLimit?: Maybe<AmountLimitFormState>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductFormStateResult = {
  data?: Maybe<DepositProductFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositProductList = {
  allowed?: Maybe<Array<Maybe<DepositProduct>>>;
  error?: Maybe<QueryError>;
  notAllowed?: Maybe<Array<Maybe<DepositProductListData>>>;
};

export type DepositProductListData = {
  data?: Maybe<DepositProduct>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DepositProductMinimal = {
  id: Scalars['ID'];
  productName: Scalars['String'];
};

export const DepositProductStatus = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const;

export type DepositProductStatus = typeof DepositProductStatus[keyof typeof DepositProductStatus];
export type District = {
  id: Scalars['Int'];
  municipalities: Array<Municipality>;
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type DocumentDetails = {
  id?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type DormantSetup = {
  condition?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
};

export type DormantSetupFormState = {
  condition?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['String']>;
};

export type EBankingAccountMutation = {
  savingExcelExport?: Maybe<EbankingSavingStatementExportData>;
  setDefaultAccount?: Maybe<EbankingSetDefaultAccountResult>;
};

export type EBankingAccountMutationSavingExcelExportArgs = {
  data: EbankingSavingFilter;
};

export type EBankingAccountMutationSetDefaultAccountArgs = {
  accountId: Scalars['String'];
};

export type EBankingAccountQuery = {
  get?: Maybe<EbankingAccountResult>;
  list?: Maybe<AccountMinimalResult>;
  summary?: Maybe<AccountSummary>;
};

export type EBankingAccountQueryGetArgs = {
  id: Scalars['ID'];
};

export const EBankingActiveLoanStatus = {
  Pending: 'Pending',
  Processing: 'Processing',
  Scheduled: 'Scheduled',
} as const;

export type EBankingActiveLoanStatus =
  typeof EBankingActiveLoanStatus[keyof typeof EBankingActiveLoanStatus];
export type EBankingAnnouncementQuery = {
  list: Array<Maybe<EBankingAppAnnouncement>>;
};

export type EBankingAnnouncementQueryListArgs = {
  filter?: InputMaybe<NotificationFilter>;
};

export type EBankingAppAnnouncement = {
  date: Scalars['String'];
  details: Scalars['HTML'];
  id: Scalars['ID'];
  summary: Scalars['String'];
  title: Scalars['String'];
};

export type EBankingAppNotification = {
  date: Scalars['String'];
  description: Scalars['String'];
  id: Scalars['ID'];
  parameters: Scalars['Map'];
  subject: Scalars['String'];
};

export type EBankingAppNotificationQuery = {
  list: Array<Maybe<EBankingAppNotification>>;
};

export type EBankingAppNotificationQueryListArgs = {
  filter?: InputMaybe<NotificationFilter>;
};

export type EBankingApplyLoanInput = {
  amount?: InputMaybe<Scalars['Amount']>;
  branch?: InputMaybe<Scalars['ID']>;
  purpose?: InputMaybe<Scalars['String']>;
};

export type EBankingApplyLoanResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<EBankingLoanHistory>;
  recordID: Scalars['ID'];
};

export type EBankingAuthMutation = {
  changeCoopPin?: Maybe<EbankingChangeCoopPinResult>;
  changePassword?: Maybe<EbankingChangePasswordResult>;
  checkAccount?: Maybe<EbankingAccountExistsResult>;
  getNewToken?: Maybe<AuthTokenResult>;
  login?: Maybe<EbankingLoginResult>;
  loginToCooperative?: Maybe<EbankingCooperativeLoginResult>;
  requestSource?: Maybe<RequestSource>;
  resendOtp?: Maybe<EbankingOtpResult>;
  resetPassword?: Maybe<EbankingChangePasswordResult>;
  setNewPin?: Maybe<EbankingUserResult>;
  setPassword?: Maybe<EbankingPasswordResult>;
  signUp?: Maybe<EbankingSignUpResult>;
  verifyOtp?: Maybe<EbankingOtpResult>;
};

export type EBankingAuthMutationChangeCoopPinArgs = {
  newPin: Scalars['String'];
  oldPin: Scalars['String'];
};

export type EBankingAuthMutationChangePasswordArgs = {
  newPassword: Scalars['String'];
  oldPassword: Scalars['String'];
};

export type EBankingAuthMutationCheckAccountArgs = {
  coopId: Scalars['ID'];
  mobileNumber: Scalars['String'];
  pin: Scalars['Int'];
};

export type EBankingAuthMutationGetNewTokenArgs = {
  refreshToken: Scalars['String'];
  slug?: InputMaybe<Scalars['String']>;
  tokenFor: EBankingTokenType;
};

export type EBankingAuthMutationLoginArgs = {
  data: EbankingLoginInput;
};

export type EBankingAuthMutationLoginToCooperativeArgs = {
  cooperativeId: Scalars['ID'];
  mobileNumber: Scalars['String'];
  pinCode: Scalars['String'];
};

export type EBankingAuthMutationResendOtpArgs = {
  mobile: Scalars['String'];
  otpFor: OtpFor;
};

export type EBankingAuthMutationResetPasswordArgs = {
  mobileNo: Scalars['String'];
  newPassword: Scalars['String'];
  otp: Scalars['String'];
};

export type EBankingAuthMutationSetNewPinArgs = {
  data?: InputMaybe<CooperativeConnectInput>;
};

export type EBankingAuthMutationSetPasswordArgs = {
  data: EbankingPasswordInput;
  otp: Scalars['String'];
  userID: Scalars['ID'];
};

export type EBankingAuthMutationSignUpArgs = {
  mobileNo: Scalars['String'];
};

export type EBankingAuthMutationVerifyOtpArgs = {
  data: EbankingOtpInput;
};

export type EBankingChequeBlockInput = {
  accountId?: InputMaybe<Scalars['String']>;
  chequeNumber?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<Scalars['String']>;
};

export type EBankingChequeMutation = {
  block?: Maybe<EBankingChequeResult>;
  request?: Maybe<EBankingChequeResult>;
  withdrawViaCollector?: Maybe<EBankingChequeResult>;
};

export type EBankingChequeMutationBlockArgs = {
  data?: InputMaybe<EBankingChequeBlockInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeMutationRequestArgs = {
  data?: InputMaybe<EBankingChequeRequestInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeMutationWithdrawViaCollectorArgs = {
  data?: InputMaybe<EBankingChequeWithdrawViaCollectorInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeQuery = {
  branchList?: Maybe<BranchGetData>;
  collectors?: Maybe<MyraUserData>;
  options: Array<EBankingCooperativeServiceOption>;
  pastRequests?: Maybe<Array<Maybe<ChequePastRequest>>>;
};

export type EBankingChequeQueryPastRequestsArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
  memberId: Scalars['ID'];
};

export type EBankingChequeRequestInput = {
  accountId?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['ID']>;
  collector?: InputMaybe<Scalars['ID']>;
  noOfLeaves?: InputMaybe<Scalars['Int']>;
  note?: InputMaybe<Scalars['String']>;
  type: EBankingChequeRequestType;
};

export const EBankingChequeRequestType = {
  SelfPickup: 'Self_Pickup',
  ThroughAgent: 'Through_agent',
} as const;

export type EBankingChequeRequestType =
  typeof EBankingChequeRequestType[keyof typeof EBankingChequeRequestType];
export type EBankingChequeResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<ChequePastRequest>;
  recordID: Scalars['ID'];
};

export type EBankingChequeWithdrawViaCollectorInput = {
  accountId?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['ID']>;
  collector?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
};

export type EBankingCombined = {
  accounts: Array<Maybe<EbankingAccount>>;
  recentTransactions: Array<Maybe<EbankingTransaction>>;
  services: Array<Maybe<Services>>;
  share: EbankingShare;
  utilityPayments: Array<Maybe<UtilityPayments>>;
};

export type EBankingComplaintHistory = {
  applicationNumber: Scalars['Int'];
  complaintStatus: EBankingActiveLoanStatus;
  detailedAccount?: Maybe<Scalars['String']>;
  feedbackDate: Scalars['String'];
  id: Scalars['ID'];
  peopleInvolved?: Maybe<Scalars['String']>;
  proposedSolution?: Maybe<Scalars['String']>;
  status: EBankingServiceStatus;
  violatedPolicies?: Maybe<Scalars['String']>;
};

export type EBankingComplaintHistoryData = {
  data?: Maybe<Array<Maybe<EBankingComplaintHistory>>>;
  error?: Maybe<QueryError>;
};

export type EBankingComplaintMutation = {
  register?: Maybe<EBankingComplaintRegisterResult>;
};

export type EBankingComplaintMutationRegisterArgs = {
  data?: InputMaybe<EBankingRegisterComplaintInput>;
  memberID: Scalars['String'];
};

export type EBankingComplaintQuery = {
  history?: Maybe<EBankingComplaintHistoryData>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingComplaintQueryHistoryArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
  memberID: Scalars['ID'];
};

export type EBankingComplaintRegisterResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<EBankingComplaintHistory>;
  recordID: Scalars['ID'];
};

export type EBankingCooperativeServiceError = EBankingCooperativeServiceInvalidDataError;

export type EBankingCooperativeServiceFilter = {
  status?: InputMaybe<EBankingServiceStatus>;
};

export type EBankingCooperativeServiceInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type EBankingCooperativeServiceMutation = {
  cheque?: Maybe<EBankingChequeMutation>;
  complaint?: Maybe<EBankingComplaintMutation>;
  loan?: Maybe<EBankingLoanMutation>;
};

export type EBankingCooperativeServiceOption = {
  enabled: Scalars['Boolean'];
  name: Scalars['String'];
  requestType?: Maybe<Scalars['String']>;
};

export type EBankingCooperativeServiceQuery = {
  cheque?: Maybe<EBankingChequeQuery>;
  complaint?: Maybe<EBankingComplaintQuery>;
  coopStatistics?: Maybe<CoopStatistics>;
  downloads?: Maybe<EBankingDownloadsQuery>;
  loan?: Maybe<EBankingLoanQuery>;
};

export type EBankingDownloadFile = {
  category: Scalars['String'];
  extension: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  size: Scalars['String'];
  url: Scalars['String'];
};

export type EBankingDownloadsFilter = {
  category?: InputMaybe<Scalars['String']>;
};

export type EBankingDownloadsQuery = {
  files: Array<EBankingDownloadFile>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingDownloadsQueryFilesArgs = {
  filter?: InputMaybe<EBankingDownloadsFilter>;
};

export type EBankingLoanAccountQuery = {
  get?: Maybe<EbankingAccountResult>;
  getLoanPaymentIdealSchedule?: Maybe<LoanInstallments>;
  list?: Maybe<AccountMinimalResult>;
};

export type EBankingLoanAccountQueryGetArgs = {
  id: Scalars['ID'];
};

export type EBankingLoanAccountQueryGetLoanPaymentIdealScheduleArgs = {
  loanAccountId: Scalars['ID'];
};

export type EBankingLoanHistory = {
  activeLoanStatus?: Maybe<EBankingActiveLoanStatus>;
  amount?: Maybe<Scalars['Amount']>;
  appliedDate?: Maybe<Scalars['String']>;
  branch?: Maybe<Branch>;
  id: Scalars['String'];
  loanStatus: EBankingActiveLoanStatus;
  scheduledDate?: Maybe<Scalars['String']>;
  status?: Maybe<EBankingServiceStatus>;
  type?: Maybe<Scalars['String']>;
};

export type EBankingLoanMutation = {
  apply?: Maybe<EBankingApplyLoanResult>;
};

export type EBankingLoanMutationApplyArgs = {
  data?: InputMaybe<EBankingApplyLoanInput>;
  memberID: Scalars['String'];
};

export type EBankingLoanQuery = {
  history?: Maybe<EbankingLoanHistoryData>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingLoanQueryHistoryArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
  memberId: Scalars['ID'];
};

export type EBankingMutation = {
  account?: Maybe<EBankingAccountMutation>;
  auth?: Maybe<EBankingAuthMutation>;
  cooperativeServices?: Maybe<EBankingCooperativeServiceMutation>;
  membershipRequest?: Maybe<MembershipRequestMutation>;
  utility: UtilityMutation;
  utilityPayment: UtilityPayemntMutation;
  webUtilityPayments?: Maybe<EbankingWebUtilityPaymentsMutation>;
};

export type EBankingMutationAuthArgs = {
  type?: InputMaybe<RequestSource>;
};

export type EBankingNotificationQuery = {
  announcements?: Maybe<EBankingAnnouncementQuery>;
  appNotifications?: Maybe<EBankingAppNotificationQuery>;
};

export type EBankingQuery = {
  account?: Maybe<EBankingAccountQuery>;
  auth?: Maybe<EbankingAuthQuery>;
  cooperativeServices?: Maybe<EBankingCooperativeServiceQuery>;
  home: EBankingCombined;
  loanAccount?: Maybe<EBankingLoanAccountQuery>;
  neosysClientsList?: Maybe<Array<Maybe<NeosysClientMinimalInfo>>>;
  notification?: Maybe<EBankingNotificationQuery>;
  products?: Maybe<ProductsQuery>;
  profile?: Maybe<EbankingMemberProfileData>;
  services?: Maybe<Array<Maybe<Services>>>;
  share?: Maybe<EBankingShareQuery>;
  utility: UtilityQuery;
  utilityPayments?: Maybe<Array<Maybe<UtilityPayments>>>;
  withdraw?: Maybe<EbankingWithdrawQuery>;
};

export type EBankingRegisterComplaintInput = {
  date?: InputMaybe<Scalars['String']>;
  detailedAccount?: InputMaybe<Scalars['String']>;
  peopleInvolved?: InputMaybe<Scalars['String']>;
  policiesViolated?: InputMaybe<Scalars['String']>;
  proposedSolution?: InputMaybe<Scalars['String']>;
};

export const EBankingServiceStatus = {
  Active: 'Active',
  Completed: 'Completed',
  Declined: 'Declined',
} as const;

export type EBankingServiceStatus =
  typeof EBankingServiceStatus[keyof typeof EBankingServiceStatus];
export type EBankingShareQuery = {
  history?: Maybe<Array<Maybe<EbankingShareHistory>>>;
  summary?: Maybe<EbankingShare>;
};

export type EBankingShareQueryHistoryArgs = {
  filter?: InputMaybe<EbankingShareFilter>;
};

export const EBankingTokenType = {
  Cooperative: 'COOPERATIVE',
  Myra: 'MYRA',
} as const;

export type EBankingTokenType = typeof EBankingTokenType[keyof typeof EBankingTokenType];
export type EBankingTransactionQuery = {
  monthly: Array<Maybe<MonthlyTransactions>>;
  recent?: Maybe<EbankingTransactionConnection>;
};

export type EBankingTransactionQueryMonthlyArgs = {
  filter?: InputMaybe<Filter>;
};

export type EBankingTransactionQueryRecentArgs = {
  paginate?: InputMaybe<Pagination>;
};

export type EbankingAccount = {
  accountNumber: Scalars['String'];
  accountSubType: Scalars['String'];
  accountType: Scalars['String'];
  balance: Scalars['String'];
  history?: Maybe<Array<AccountHistory>>;
  id: Scalars['String'];
  interestBooked?: Maybe<Scalars['String']>;
  interestEarned?: Maybe<Scalars['String']>;
  interestRate: Scalars['Float'];
  isDefault: Scalars['Boolean'];
  name: Scalars['String'];
  productId?: Maybe<Scalars['String']>;
  repaymentScheme?: Maybe<Scalars['String']>;
  subscribedDate: Scalars['String'];
  transactions?: Maybe<EbankingTransactionConnection>;
};

export type EbankingAccountTransactionsArgs = {
  filter?: InputMaybe<EbankingTransactionFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type EbankingAccountExistsResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingUser>;
  success?: Maybe<Scalars['Boolean']>;
};

export type EbankingAccountRecord = {
  fullName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
};

export type EbankingAccountResult = {
  data?: Maybe<EbankingAccount>;
  error?: Maybe<QueryError>;
};

export type EbankingAccountTransferInput = {
  amount?: InputMaybe<Scalars['String']>;
  destinationAccount?: InputMaybe<Scalars['String']>;
  remarks?: InputMaybe<Scalars['String']>;
  sourceAccount?: InputMaybe<Scalars['String']>;
};

export type EbankingAccountTransferRecord = {
  amount: Scalars['String'];
  destinationAccount: Scalars['ID'];
  remarks?: Maybe<Scalars['String']>;
  sourceAccount: Scalars['ID'];
  transactionCode: Scalars['String'];
  transactionDate: Scalars['String'];
};

export type EbankingAccountTransferResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingAccountTransferRecord>;
  recordId?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
};

export const EbankingAccountType = {
  Loan: 'LOAN',
  Saving: 'SAVING',
} as const;

export type EbankingAccountType = typeof EbankingAccountType[keyof typeof EbankingAccountType];
export type EbankingAuthQuery = {
  meCooperativeUser?: Maybe<MeCooperativeUserResult>;
  meMyraUser?: Maybe<MeMyraUserResult>;
};

export type EbankingChangeCoopPinResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EbankingAuthQuery>;
  success: Scalars['Boolean'];
};

export type EbankingChangePasswordResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EbankingAuthQuery>;
  success: Scalars['Boolean'];
};

export type EbankingCheckAccountResult = {
  error?: Maybe<MutationError>;
  verified: Scalars['Boolean'];
};

export type EbankingCooperative = {
  cooperativeDistrict?: Maybe<Scalars['String']>;
  cooperativeId?: Maybe<Scalars['ID']>;
  cooperativeLocalGovt?: Maybe<Scalars['String']>;
  cooperativeName?: Maybe<Scalars['String']>;
  cooperativeProvince?: Maybe<Scalars['String']>;
  cooperativeSlug?: Maybe<Scalars['String']>;
  cooperativeWard?: Maybe<Scalars['Int']>;
  defaultAccount?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberMobileNo?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  myraUserId: Scalars['ID'];
};

export type EbankingCooperativeLoginRecord = {
  data?: Maybe<EbankingCooperative>;
  token: AuthToken;
};

export type EbankingCooperativeLoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingCooperativeLoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type EbankingLoanHistoryData = {
  data?: Maybe<Array<Maybe<EBankingLoanHistory>>>;
  error?: Maybe<QueryError>;
};

export type EbankingLoginInput = {
  mobileNo: Scalars['String'];
  password: Scalars['String'];
};

export type EbankingLoginRecord = {
  data?: Maybe<EbankingUser>;
  token: AuthToken;
};

export type EbankingLoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingLoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type EbankingMemberProfile = {
  branch?: Maybe<Scalars['String']>;
  citizenship?: Maybe<Array<Maybe<DocumentDetails>>>;
  dobAD?: Maybe<Scalars['String']>;
  dobBS?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  familyMembers?: Maybe<Array<Maybe<MemberFamilyDetails>>>;
  gender?: Maybe<Scalars['Localized']>;
  maritalStatus?: Maybe<Scalars['Localized']>;
  memberId?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  permanentAddress?: Maybe<Address>;
  photo?: Maybe<Array<Maybe<DocumentDetails>>>;
  temporaryAddress?: Maybe<Address>;
};

export type EbankingMemberProfileData = {
  data?: Maybe<EbankingMemberProfile>;
  error?: Maybe<QueryError>;
};

export type EbankingOtpInput = {
  mobile: Scalars['String'];
  otp: Scalars['String'];
  otpFor: OtpFor;
};

export type EbankingOtpResult = {
  error?: Maybe<MutationError>;
  success?: Maybe<Scalars['Boolean']>;
};

export type EbankingPasswordInput = {
  dob: Scalars['String'];
  name: Scalars['String'];
  password: Scalars['String'];
};

export type EbankingPasswordResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingUser>;
  recordId?: Maybe<Scalars['ID']>;
};

export type EbankingSavingFilter = {
  accountId: Scalars['ID'];
  memberId?: InputMaybe<Scalars['ID']>;
  period: LocalizedDateFilter;
};

export type EbankingSavingStatementExportData = {
  error?: Maybe<MutationError>;
  url?: Maybe<Scalars['String']>;
};

export type EbankingSendMoneyInput = {
  amount?: InputMaybe<Scalars['String']>;
  purposeOfTransaction?: InputMaybe<PurposeOfTransaction>;
  recipientAccountNumber?: InputMaybe<Scalars['String']>;
  recipientMobileNumber?: InputMaybe<Scalars['String']>;
  recipientName?: InputMaybe<Scalars['String']>;
  remarks?: InputMaybe<Scalars['String']>;
  sourceAccount?: InputMaybe<Scalars['String']>;
};

export type EbankingSendMoneyMutation = {
  check?: Maybe<EbankingCheckAccountResult>;
  proceed?: Maybe<EbankingSendMoneyResult>;
};

export type EbankingSendMoneyMutationCheckArgs = {
  data?: InputMaybe<EbankingSendMoneyInput>;
};

export type EbankingSendMoneyMutationProceedArgs = {
  data?: InputMaybe<EbankingSendMoneyInput>;
  transactionPin: Scalars['String'];
};

export type EbankingSendMoneyRecord = {
  amount: Scalars['String'];
  purposeOfTransaction?: Maybe<PurposeOfTransaction>;
  recipientAccountNumber: Scalars['String'];
  recipientMobileNumber: Scalars['String'];
  recipientName: Scalars['String'];
  remarks?: Maybe<Scalars['String']>;
  sourceAccount: Scalars['ID'];
  transactionCode: Scalars['String'];
  transactionDate: Scalars['String'];
};

export type EbankingSendMoneyResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingSendMoneyRecord>;
  recordId?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
};

export const EbankingServiceRequestType = {
  ChequeBlockRequest: 'CHEQUE_BLOCK_REQUEST',
  ChequeRequest: 'CHEQUE_REQUEST',
  WithdrawViaCollector: 'WITHDRAW_VIA_COLLECTOR',
} as const;

export type EbankingServiceRequestType =
  typeof EbankingServiceRequestType[keyof typeof EbankingServiceRequestType];
export type EbankingSetDefaultAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EBankingQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type EbankingShare = {
  totalShare: Scalars['Int'];
  value: Scalars['String'];
};

export type EbankingShareFilter = {
  page: Scalars['String'];
};

export type EbankingShareHistory = {
  amount: Scalars['String'];
  date: Scalars['String'];
  endNumber?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  numberOfShares: Scalars['Int'];
  startNumber?: Maybe<Scalars['Int']>;
  title: Scalars['String'];
  transactionDirection: Transaction_Direction;
};

export type EbankingSignUp = {
  id: Scalars['ID'];
  mobileNo: Scalars['String'];
};

export type EbankingSignUpResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingSignUp>;
  recordId?: Maybe<Scalars['ID']>;
};

export type EbankingTransaction = {
  accountId?: Maybe<Scalars['String']>;
  amount: Scalars['String'];
  balanceType?: Maybe<BalanceType>;
  countAll?: Maybe<Scalars['String']>;
  credit?: Maybe<Scalars['String']>;
  currentBalance: Scalars['String'];
  date: Scalars['Localized'];
  debit?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  month: Scalars['Localized'];
  name: Scalars['String'];
  transactionDirection: EbankingTransactionDirection;
  transactionId?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
};

export type EbankingTransactionConnection = {
  edges?: Maybe<Array<Maybe<EbankingTransactionEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  summary?: Maybe<TransactionListSummary>;
  totalCount?: Maybe<Scalars['Int']>;
};

export const EbankingTransactionCrOrDr = {
  Credit: 'CREDIT',
  Debit: 'DEBIT',
} as const;

export type EbankingTransactionCrOrDr =
  typeof EbankingTransactionCrOrDr[keyof typeof EbankingTransactionCrOrDr];
export const EbankingTransactionDirection = {
  Incoming: 'INCOMING',
  Outgoing: 'OUTGOING',
} as const;

export type EbankingTransactionDirection =
  typeof EbankingTransactionDirection[keyof typeof EbankingTransactionDirection];
export type EbankingTransactionEdge = {
  cursor: Scalars['String'];
  node: EbankingTransaction;
};

export type EbankingTransactionFilter = {
  accounts?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  date?: InputMaybe<DateFilter>;
  transactionDirection?: InputMaybe<EbankingTransactionCrOrDr>;
};

export const EbankingTransactionType = {
  Deposit: 'DEPOSIT',
  SharePurchase: 'SHARE_PURCHASE',
  Transfer: 'TRANSFER',
  Withdraw: 'WITHDRAW',
} as const;

export type EbankingTransactionType =
  typeof EbankingTransactionType[keyof typeof EbankingTransactionType];
export type EbankingUser = {
  cooperatives?: Maybe<Array<Maybe<CooperativeInformation>>>;
  dob?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastLoggedIn?: Maybe<Scalars['Time']>;
  mobile?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type EbankingUserResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingUser>;
  recordId?: Maybe<Scalars['ID']>;
};

export type EbankingWebUtilityPaymentsMutation = {
  accountTransfer?: Maybe<EbankingAccountTransferResult>;
  sendMoney?: Maybe<EbankingSendMoneyMutation>;
};

export type EbankingWebUtilityPaymentsMutationAccountTransferArgs = {
  data?: InputMaybe<EbankingAccountTransferInput>;
};

export type EbankingWithdrawQuery = {
  getAvailableSlips?: Maybe<EbankingWithdrawSlipResult>;
};

export type EbankingWithdrawQueryGetAvailableSlipsArgs = {
  accountId: Scalars['String'];
};

export type EbankingWithdrawSlipResult = {
  data?: Maybe<Array<SlipEntry>>;
};

export type Filter = {
  orConditions?: InputMaybe<Array<OrConditions>>;
  query?: InputMaybe<Scalars['String']>;
};

export const Frequency = {
  Daily: 'DAILY',
  Monthly: 'MONTHLY',
  Weekly: 'WEEKLY',
  Yearly: 'YEARLY',
} as const;

export type Frequency = typeof Frequency[keyof typeof Frequency];
export const FrequencyTenure = {
  Day: 'DAY',
  Month: 'MONTH',
  Week: 'WEEK',
  Year: 'YEAR',
} as const;

export type FrequencyTenure = typeof FrequencyTenure[keyof typeof FrequencyTenure];
export type GenderOption = {
  id?: Maybe<Scalars['String']>;
  nameEn?: Maybe<Scalars['String']>;
  nameNp?: Maybe<Scalars['String']>;
};

export const Id_Type = {
  Account: 'ACCOUNT',
  Address: 'ADDRESS',
  Bank: 'BANK',
  Bankbranch: 'BANKBRANCH',
  Branch: 'BRANCH',
  Chartsofaccount: 'CHARTSOFACCOUNT',
  Customfield: 'CUSTOMFIELD',
  Declaration: 'DECLARATION',
  Depositiro: 'DEPOSITIRO',
  Depositproduct: 'DEPOSITPRODUCT',
  Depositproductcriteria: 'DEPOSITPRODUCTCRITERIA',
  Deposittds: 'DEPOSITTDS',
  Document: 'DOCUMENT',
  Documentreference: 'DOCUMENTREFERENCE',
  Dynamicentry: 'DYNAMICENTRY',
  Formfield: 'FORMFIELD',
  Formoption: 'FORMOPTION',
  Formsection: 'FORMSECTION',
  Kymaccountoperatordetails: 'KYMACCOUNTOPERATORDETAILS',
  Kymcoopaccountoperatordetails: 'KYMCOOPACCOUNTOPERATORDETAILS',
  Kymcoopdirectordetails: 'KYMCOOPDIRECTORDETAILS',
  Kymcooperative: 'KYMCOOPERATIVE',
  Kymcooperativeunion: 'KYMCOOPERATIVEUNION',
  Kymcooperativeunionpers: 'KYMCOOPERATIVEUNIONPERS',
  Kymdocument: 'KYMDOCUMENT',
  Kymfield: 'KYMFIELD',
  Kymfieldoption: 'KYMFIELDOPTION',
  Kymidentification: 'KYMIDENTIFICATION',
  Kymindividual: 'KYMINDIVIDUAL',
  Kymindividualfamilymembers: 'KYMINDIVIDUALFAMILYMEMBERS',
  Kymindividualincomesource: 'KYMINDIVIDUALINCOMESOURCE',
  Kymindividualoccupation: 'KYMINDIVIDUALOCCUPATION',
  Kyminstitutions: 'KYMINSTITUTIONS',
  Kymsisterconcerndetails: 'KYMSISTERCONCERNDETAILS',
  Loanproduct: 'LOANPRODUCT',
  Loanproductcriteria: 'LOANPRODUCTCRITERIA',
  Member: 'MEMBER',
  Myrauser: 'MYRAUSER',
  Myrauseridetification: 'MYRAUSERIDETIFICATION',
  Organization: 'ORGANIZATION',
  Productdocument: 'PRODUCTDOCUMENT',
  Sharebalance: 'SHAREBALANCE',
  Shareextracharges: 'SHAREEXTRACHARGES',
  Sharenumbers: 'SHARENUMBERS',
  Shareregister: 'SHAREREGISTER',
  User: 'USER',
  Userpreference: 'USERPREFERENCE',
} as const;

export type Id_Type = typeof Id_Type[keyof typeof Id_Type];
export type Identity = {
  id: Scalars['ID'];
  name: Scalars['String'];
  userType: UserType;
  username: Scalars['String'];
};

export const IdetificationType = {
  Citizenship: 'CITIZENSHIP',
  DrivingLicense: 'DRIVING_LICENSE',
  NationalId: 'NATIONAL_ID',
  Passport: 'PASSPORT',
  VoterCard: 'VOTER_CARD',
} as const;

export type IdetificationType = typeof IdetificationType[keyof typeof IdetificationType];
export const IndividualRequiredDocument = {
  Fingerprint: 'FINGERPRINT',
  Form: 'FORM',
  NomineeDocument: 'NOMINEE_DOCUMENT',
  Photo: 'PHOTO',
  Signature: 'SIGNATURE',
} as const;

export type IndividualRequiredDocument =
  typeof IndividualRequiredDocument[keyof typeof IndividualRequiredDocument];
export const InstitutionRequiredDocument = {
  Decision: 'DECISION',
  Registered: 'REGISTERED',
  Signature: 'SIGNATURE',
  TaxClearance: 'TAX_CLEARANCE',
} as const;

export type InstitutionRequiredDocument =
  typeof InstitutionRequiredDocument[keyof typeof InstitutionRequiredDocument];
export type Insurance = {
  amount?: Maybe<Scalars['Amount']>;
  rate?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['String']>;
};

export type InterestFormState = {
  additionalRate?: Maybe<Scalars['Float']>;
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  defaultRate?: Maybe<Scalars['Float']>;
  interestMethod?: Maybe<InterestMethod>;
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export const InterestMethod = {
  Diminishing: 'DIMINISHING',
  Flat: 'FLAT',
} as const;

export type InterestMethod = typeof InterestMethod[keyof typeof InterestMethod];
export type InterestRateType = {
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  defaultRate: Scalars['Float'];
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export type KymAddress = {
  coordinates?: Maybe<Coordinate>;
  districtId?: Maybe<Scalars['Int']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['Localized']>;
  provinceId?: Maybe<Scalars['Int']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type KymAddressInput = {
  coordinates?: InputMaybe<CoordinateInput>;
  districtId?: InputMaybe<Scalars['Int']>;
  houseNo?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export const KymMemberTypesEnum = {
  Cooperative: 'COOPERATIVE',
  CooperativeUnion: 'COOPERATIVE_UNION',
  Individual: 'INDIVIDUAL',
  Institution: 'INSTITUTION',
} as const;

export type KymMemberTypesEnum = typeof KymMemberTypesEnum[keyof typeof KymMemberTypesEnum];
export type LadderRateFormState = {
  amount: Scalars['Amount'];
  rate: Scalars['Float'];
  type: Scalars['String'];
};

export type LedgerMappingFormState = {
  interestAccuredDaily?: Maybe<Scalars['String']>;
  interestIncome?: Maybe<Scalars['String']>;
  principal?: Maybe<Scalars['String']>;
};

export type LoanInstallment = {
  currentRemainingPrincipal: Scalars['String'];
  fullPrincipal?: Maybe<Scalars['String']>;
  installmentDate: Scalars['Localized'];
  installmentNo: Scalars['Int'];
  interest: Scalars['String'];
  isPartial?: Maybe<Scalars['Boolean']>;
  overDueDays?: Maybe<Scalars['Int']>;
  overdueAmount?: Maybe<Scalars['String']>;
  paidDate: Scalars['Localized'];
  payment: Scalars['String'];
  penalty?: Maybe<Scalars['String']>;
  principal: Scalars['String'];
  remainingInterest: Scalars['String'];
  remainingPrincipal: Scalars['String'];
  status?: Maybe<LoanInstallmentStatus>;
};

export const LoanInstallmentStatus = {
  Current: 'CURRENT',
  Overdue: 'OVERDUE',
  Paid: 'PAID',
  Partial: 'PARTIAL',
} as const;

export type LoanInstallmentStatus =
  typeof LoanInstallmentStatus[keyof typeof LoanInstallmentStatus];
export type LoanInstallments = {
  duesSince?: Maybe<Scalars['Localized']>;
  installments?: Maybe<Array<Maybe<LoanInstallment>>>;
  total: Scalars['String'];
  totalInterest?: Maybe<Scalars['String']>;
  totalPrincipal?: Maybe<Scalars['String']>;
  totalRemainingPayable?: Maybe<Scalars['String']>;
};

export const LoanInterestMethod = {
  Diminishing: 'DIMINISHING',
  Straight: 'STRAIGHT',
} as const;

export type LoanInterestMethod = typeof LoanInterestMethod[keyof typeof LoanInterestMethod];
export type LoanProduct = Base & {
  allowGurantee?: Maybe<Scalars['Boolean']>;
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  collateralTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  collateralValue?: Maybe<Array<Maybe<CollateralFormState>>>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate: Scalars['String'];
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  description?: Maybe<Scalars['String']>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id: Scalars['ID'];
  installmentFrequency?: Maybe<LoanProductInstallment>;
  insuranceType?: Maybe<Insurance>;
  interest?: Maybe<InterestRateType>;
  interestMaxGraceNumber?: Maybe<Scalars['Int']>;
  interestMethod?: Maybe<LoanInterestMethod>;
  isCollateralRequired?: Maybe<Scalars['Boolean']>;
  isInsuranceApplicable?: Maybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: Maybe<Scalars['Boolean']>;
  isPenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isRebateApplicable?: Maybe<Scalars['Boolean']>;
  isStaffProduct?: Maybe<Scalars['Boolean']>;
  isTenureApplicable?: Maybe<Scalars['Boolean']>;
  ledgerMapping?: Maybe<LedgerMappingFormState>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  loanScheduleChangeOverride?: Maybe<Scalars['Boolean']>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxLoanAmount?: Maybe<Scalars['Amount']>;
  maxPercentOfGurantee?: Maybe<Scalars['Float']>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  minimumLoanAmount?: Maybe<Scalars['Amount']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  objState: ObjState;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyRate?: Maybe<Scalars['Float']>;
  penaltyType?: Maybe<PenaltyType>;
  prematurePenaltySetup?: Maybe<PrematurePenaltyFormState>;
  principalMaxGraceNumber?: Maybe<Scalars['Int']>;
  productCode?: Maybe<ProductCodeType>;
  productCodeString?: Maybe<Scalars['String']>;
  productName: Scalars['String'];
  productNature: NatureOfLoanProduct;
  productPremiumInterest?: Maybe<Scalars['Float']>;
  productSubType: Scalars['String'];
  productType: Scalars['ID'];
  rebate?: Maybe<Rebate>;
  repaymentScheme?: Maybe<Array<Maybe<LoanRepaymentScheme>>>;
  requiredDocuments?: Maybe<Array<Maybe<LoanRequiredDocuments>>>;
  supportMultipleAccounts?: Maybe<Scalars['Boolean']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  typeOfMember: Array<Maybe<KymMemberTypesEnum>>;
  updateInterest?: Maybe<Scalars['Boolean']>;
  waiveInterest?: Maybe<Scalars['Boolean']>;
};

export type LoanProductConnection = {
  edges: Array<LoanProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type LoanProductCriteria = {
  cooperativeType?: Maybe<Array<Maybe<Scalars['String']>>>;
  cooperativeUnion?: Maybe<Array<Maybe<Scalars['String']>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['String']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['String']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionType?: Maybe<Array<Maybe<Scalars['String']>>>;
  maritalStatus?: Maybe<Array<Maybe<Scalars['String']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LoanProductCriteriaResult = {
  data?: Maybe<LoanProductCriteria>;
  error?: Maybe<QueryError>;
};

export type LoanProductData = {
  data?: Maybe<LoanProduct>;
  error?: Maybe<QueryError>;
};

export type LoanProductEdge = {
  cursor: Scalars['Cursor'];
  node: LoanProduct;
};

export const LoanProductInstallment = {
  Daily: 'DAILY',
  HalfYearly: 'HALF_YEARLY',
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
  Weekly: 'WEEKLY',
  Yearly: 'YEARLY',
} as const;

export type LoanProductInstallment =
  typeof LoanProductInstallment[keyof typeof LoanProductInstallment];
export type LoanProductLists = {
  data?: Maybe<Array<Maybe<LoanProductMinimal>>>;
  error?: Maybe<QueryError>;
};

export type LoanProductMinimal = {
  id: Scalars['ID'];
  productName: Scalars['String'];
};

export type LoanProductSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<DepositProductStatus>;
  query?: InputMaybe<Scalars['String']>;
};

export const LoanRepaymentScheme = {
  Emi: 'EMI',
  Epi: 'EPI',
  Flat: 'FLAT',
} as const;

export type LoanRepaymentScheme = typeof LoanRepaymentScheme[keyof typeof LoanRepaymentScheme];
export const LoanRequiredDocuments = {
  Citizenship: 'CITIZENSHIP',
  Form: 'FORM',
  LoanChangeDocument: 'LOAN_CHANGE_DOCUMENT',
  PolicyDocument: 'POLICY_DOCUMENT',
} as const;

export type LoanRequiredDocuments =
  typeof LoanRequiredDocuments[keyof typeof LoanRequiredDocuments];
export type LoanSettingsProductSubTypeData = {
  id?: Maybe<Scalars['ID']>;
  productSubType?: Maybe<Scalars['String']>;
  productTypeID?: Maybe<Scalars['ID']>;
};

export type LoanSettingsProductTypeData = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  productType?: Maybe<Scalars['String']>;
};

export type LocalizedDateFilter = {
  from: Scalars['Localized'];
  to: Scalars['Localized'];
};

export type LocationCoordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type MeCooperativeUserResult = {
  data?: Maybe<EbankingCooperative>;
  error?: Maybe<QueryError>;
};

export type MeMyraUserResult = {
  data?: Maybe<EbankingUser>;
  error?: Maybe<QueryError>;
};

export type MemberFamilyDetails = {
  name?: Maybe<Scalars['Localized']>;
  relationship?: Maybe<Scalars['Localized']>;
};

export type MembershipRequestInput = {
  dateOfBirth?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  phoneNumber?: InputMaybe<Scalars['String']>;
};

export type MembershipRequestMutation = {
  new?: Maybe<MembershipRequestResult>;
};

export type MembershipRequestMutationNewArgs = {
  cooperativeId: Scalars['String'];
  data?: InputMaybe<MembershipRequestInput>;
};

export type MembershipRequestResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export const MobileOperator = {
  Ncell: 'NCELL',
  Ntc: 'NTC',
  Ntcdma: 'NTCDMA',
  Smartcell: 'SMARTCELL',
  Utl: 'UTL',
} as const;

export type MobileOperator = typeof MobileOperator[keyof typeof MobileOperator];
export type MonthlyTransactions = {
  closingBalance?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  month: Scalars['String'];
  transactions: Array<Maybe<EbankingTransaction>>;
};

export type Municipality = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
  wards: Array<Scalars['Int']>;
};

export type Mutation = {
  eBanking: EBankingMutation;
  presignedUrl: PresignedUrlMutation;
};

export type MutationEBankingArgs = {
  source?: InputMaybe<RequestSource>;
};

export type MutationError =
  | AuthorizationError
  | BadRequestError
  | NotFoundError
  | ServerError
  | ValidationError;

export type MyraUser = Base & {
  branch?: Maybe<Branch>;
  contactNo?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  role?: Maybe<Roles>;
};

export type MyraUserConnection = {
  edges?: Maybe<Array<MyraUserEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type MyraUserData = {
  data?: Maybe<Array<Maybe<MyraUserFormStateData>>>;
  error?: Maybe<QueryError>;
};

export type MyraUserEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<MyraUser>;
};

export type MyraUserFormStateData = {
  branch?: Maybe<Scalars['String']>;
  contactNo?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  id?: Maybe<Scalars['String']>;
  identificationDetails?: Maybe<Array<Maybe<MyraUserIdentification>>>;
  identificationSelection?: Maybe<Array<Maybe<Scalars['String']>>>;
  isTempAsPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  profilePicture?: Maybe<Array<Maybe<PictureData>>>;
  role?: Maybe<Roles>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type MyraUserFormStateResult = {
  data?: Maybe<MyraUserFormStateData>;
  error?: Maybe<QueryError>;
};

export type MyraUserIdentification = {
  date?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  idNo?: Maybe<Scalars['String']>;
  idType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
};

export const NatureOfDepositProduct = {
  Current: 'CURRENT',
  RecurringSaving: 'RECURRING_SAVING',
  Saving: 'SAVING',
  TermSavingOrFd: 'TERM_SAVING_OR_FD',
} as const;

export type NatureOfDepositProduct =
  typeof NatureOfDepositProduct[keyof typeof NatureOfDepositProduct];
export const NatureOfLoanProduct = {
  Progressive: 'PROGRESSIVE',
  Unprogressive: 'UNPROGRESSIVE',
} as const;

export type NatureOfLoanProduct = typeof NatureOfLoanProduct[keyof typeof NatureOfLoanProduct];
export type NeosysClientMinimalInfo = {
  clientName?: Maybe<Scalars['String']>;
  dateJoined?: Maybe<Scalars['String']>;
  dbCreated?: Maybe<Scalars['Boolean']>;
  districtId?: Maybe<Scalars['String']>;
  houseNo?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['String']>;
  locality?: Maybe<Scalars['String']>;
  organizationCode?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type NotFoundError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type NotificationFilter = {
  id?: InputMaybe<Scalars['ID']>;
};

export const ObjState = {
  Active: 'ACTIVE',
  Approved: 'APPROVED',
  Dormant: 'DORMANT',
  Draft: 'DRAFT',
  Inactive: 'INACTIVE',
  Submitted: 'SUBMITTED',
  Validated: 'VALIDATED',
} as const;

export type ObjState = typeof ObjState[keyof typeof ObjState];
export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export const OtpFor = {
  ResetPassword: 'RESET_PASSWORD',
  SignUp: 'SIGN_UP',
} as const;

export type OtpFor = typeof OtpFor[keyof typeof OtpFor];
export type PageInfo = {
  endCursor?: Maybe<Scalars['Cursor']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Pagination = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<Order>;
};

export type Penalty = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PenaltyFormState = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export const PenaltyRateType = {
  FlatRate: 'FLAT_RATE',
  RelativeRate: 'RELATIVE_RATE',
} as const;

export type PenaltyRateType = typeof PenaltyRateType[keyof typeof PenaltyRateType];
export type PenaltyRebate = {
  penalty?: Maybe<PenaltyFormState>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  rebate?: Maybe<RebateFormState>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
};

export type PenaltyRebateResult = {
  data?: Maybe<PenaltyRebate>;
  error?: Maybe<QueryError>;
};

export const PenaltyType = {
  PenalInterest: 'PenalInterest',
  RemainingPrincipal: 'RemainingPrincipal',
} as const;

export type PenaltyType = typeof PenaltyType[keyof typeof PenaltyType];
export type PictureData = {
  identifier?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export const PrematurePenaltyDateType = {
  EffectiveDaysFromStart: 'EFFECTIVE_DAYS_FROM_START',
  RemainingDaysToGetMatured: 'REMAINING_DAYS_TO_GET_MATURED',
} as const;

export type PrematurePenaltyDateType =
  typeof PrematurePenaltyDateType[keyof typeof PrematurePenaltyDateType];
export type PrematurePenaltyFormState = {
  noOfDays?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDateType?: Maybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PresignedUrlMutation = {
  upload: PresignedUrlOutput;
};

export type PresignedUrlMutationUploadArgs = {
  contentType?: InputMaybe<Scalars['String']>;
};

export type PresignedUrlOutput = {
  filename?: Maybe<Scalars['String']>;
  getUrl?: Maybe<Scalars['String']>;
  putUrl?: Maybe<Scalars['String']>;
};

export type ProductCodeFormState = {
  initialNo: Scalars['String'];
  noOfDigits?: Maybe<Scalars['Int']>;
  prefix: Scalars['String'];
};

export type ProductCodeType = {
  initialNo: Scalars['String'];
  noOfDigits?: Maybe<Scalars['Int']>;
  prefix: Scalars['String'];
};

export const ProductOrganizationType = {
  OrganizationLoan: 'OrganizationLoan',
  OrganizationSaving: 'OrganizationSaving',
} as const;

export type ProductOrganizationType =
  typeof ProductOrganizationType[keyof typeof ProductOrganizationType];
export type ProductsQuery = {
  depositProductList?: Maybe<DepositProductCategoryList>;
  getDepositProduct?: Maybe<DepositProductFormStateResult>;
  getDepositProductCriteria?: Maybe<DepositProductCriteriaResult>;
  getLoanProduct?: Maybe<LoanProductData>;
  getLoanProductCriteria?: Maybe<LoanProductCriteriaResult>;
  getLoanProductType?: Maybe<LoanSettingsProductTypeData>;
  getOrganizationRate?: Maybe<Scalars['Float']>;
  loanProductList?: Maybe<LoanProductLists>;
  loanProductSubTypes?: Maybe<Array<Maybe<LoanSettingsProductSubTypeData>>>;
  loanProductTypes?: Maybe<Array<Maybe<LoanSettingsProductTypeData>>>;
};

export type ProductsQueryDepositProductListArgs = {
  filter: NatureOfDepositProduct;
};

export type ProductsQueryGetDepositProductArgs = {
  id: Scalars['ID'];
};

export type ProductsQueryGetDepositProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type ProductsQueryGetLoanProductArgs = {
  id: Scalars['ID'];
};

export type ProductsQueryGetLoanProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type ProductsQueryGetLoanProductTypeArgs = {
  id: Scalars['ID'];
};

export type ProductsQueryGetOrganizationRateArgs = {
  type: ProductOrganizationType;
};

export type ProductsQueryLoanProductListArgs = {
  productSubTypeId: Scalars['ID'];
};

export type Province = {
  districts: Array<District>;
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export const PurposeOfTransaction = {
  BillSharing: 'BILL_SHARING',
  FamilyExpenses: 'FAMILY_EXPENSES',
  LendOrBorrow: 'LEND_OR_BORROW',
  PersonalUse: 'PERSONAL_USE',
} as const;

export type PurposeOfTransaction = typeof PurposeOfTransaction[keyof typeof PurposeOfTransaction];
export type Query = {
  administration: AdministrationQuery;
  eBanking: EBankingQuery;
  genderOptions: Array<Maybe<GenderOption>>;
};

export type QueryGenderOptionsArgs = {
  cooperativeId: Scalars['String'];
};

export type QueryError = AuthorizationError | BadRequestError | NotFoundError | ServerError;

export type Rebate = {
  dayBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
  rebateLedgerMapping?: Maybe<Scalars['String']>;
  rebateRate?: Maybe<Scalars['Float']>;
};

export type RebateFormState = {
  dayBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
  rebateLedgerMapping?: Maybe<Scalars['String']>;
  rebateRate?: Maybe<Scalars['Float']>;
};

export type RecentTransactionFilter = {
  limit: Scalars['Int'];
};

export type RequestResponseOptions = {
  key?: Maybe<Scalars['String']>;
  param1?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export const RequestSource = {
  Ebanking: 'EBANKING',
  MobileBanking: 'MOBILE_BANKING',
} as const;

export type RequestSource = typeof RequestSource[keyof typeof RequestSource];
export type RequiredFields = {
  addnUrl?: Maybe<Scalars['String']>;
  dataType?: Maybe<DataType>;
  fieldLabel?: Maybe<Scalars['String']>;
  fieldName?: Maybe<Scalars['String']>;
  fieldType?: Maybe<Scalars['String']>;
  inputFormat?: Maybe<Scalars['String']>;
  isRequired?: Maybe<Scalars['String']>;
};

export type ResponseFieldMapping = {
  fieldLabel?: Maybe<Scalars['String']>;
  fieldName?: Maybe<Scalars['String']>;
  mapField?: Maybe<Scalars['String']>;
  options?: Maybe<RequestResponseOptions>;
};

export type Result = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export const Roles = {
  Agent: 'AGENT',
  BranchManager: 'BRANCH_MANAGER',
  HeadTeller: 'HEAD_TELLER',
  Superadmin: 'SUPERADMIN',
  Teller: 'TELLER',
} as const;

export type Roles = typeof Roles[keyof typeof Roles];
export type Sequence = {
  processSeq?: Maybe<Scalars['String']>;
  processUrl?: Maybe<Scalars['String']>;
  requiredFields?: Maybe<Array<Maybe<RequiredFields>>>;
  responseFieldMapping?: Maybe<Array<Maybe<ResponseFieldMapping>>>;
};

export type ServerError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type ServiceTypeFormState = {
  amount?: Maybe<Scalars['Amount']>;
  ledgerName?: Maybe<Scalars['String']>;
  serviceName?: Maybe<Scalars['String']>;
};

export type Services = {
  enabled: Scalars['Boolean'];
  icon: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  service_id: Scalars['String'];
};

export type SlipEntry = {
  date?: Maybe<Scalars['Localized']>;
  slipNumber: Scalars['String'];
  state?: Maybe<Scalars['String']>;
};

export const Transaction_Direction = {
  Purchased: 'PURCHASED',
  Sold: 'SOLD',
} as const;

export type Transaction_Direction =
  typeof Transaction_Direction[keyof typeof Transaction_Direction];
export const TextFormat = {
  Email: 'EMAIL',
  IPv4: 'IPv4',
  IPv6: 'IPv6',
} as const;

export type TextFormat = typeof TextFormat[keyof typeof TextFormat];
export type TransactionFilter = {
  fromDate?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  toDate?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<TranslateInput>;
};

export type TransactionListSummary = {
  accountBalanceMap?: Maybe<Scalars['Map']>;
  averageBalance?: Maybe<Scalars['String']>;
  expensesThisMonth?: Maybe<Scalars['String']>;
  totalDeposit?: Maybe<Scalars['String']>;
  totalPrincipalPaid?: Maybe<Scalars['String']>;
  totalRemainingPrincipal?: Maybe<Scalars['String']>;
  totalWithdraw?: Maybe<Scalars['String']>;
};

export type TranslateInput = {
  data?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: InputMaybe<Scalars['String']>;
};

export const UserGender = {
  Female: 'FEMALE',
  Male: 'MALE',
  Other: 'OTHER',
} as const;

export type UserGender = typeof UserGender[keyof typeof UserGender];
export const UserType = {
  Human: 'HUMAN',
  System: 'SYSTEM',
} as const;

export type UserType = typeof UserType[keyof typeof UserType];
export type UtilitiesListConnection = {
  edges?: Maybe<Array<Maybe<UtilititesListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type UtilititesEntry = {
  id: Scalars['String'];
  name: Scalars['String'];
  serviceType: Scalars['String'];
  slug: Scalars['String'];
};

export type UtilititesListEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<UtilititesEntry>;
};

export type Utility = {
  banner?: Maybe<Scalars['String']>;
  isActive: Scalars['String'];
  logo?: Maybe<Scalars['String']>;
  sequence: Array<Sequence>;
  slug: Scalars['String'];
  totalProcessingSequence: Scalars['String'];
  vendorUrl1: Scalars['String'];
};

export type UtilityInfoResult = {
  error?: Maybe<QueryError>;
  utility?: Maybe<Utility>;
};

export type UtilityInput = {
  inputData: Scalars['Map'];
  processSeq: Scalars['String'];
  slug: Scalars['String'];
  sourceAccount: Scalars['String'];
  totalProcessingSequence: Scalars['String'];
  txnPin?: InputMaybe<Scalars['String']>;
  vendor?: InputMaybe<Scalars['String']>;
};

export type UtilityMutation = {
  makePayment: UtilityResponseResult;
  useUtility: UtilityResponseResult;
};

export type UtilityMutationMakePaymentArgs = {
  input: UtilityInput;
};

export type UtilityMutationUseUtilityArgs = {
  input: UtilityInput;
};

export type UtilityPayemntMutation = {
  post?: Maybe<UtilityPaymentResult>;
};

export type UtilityPayemntMutationPostArgs = {
  serviceID: Scalars['ID'];
  state?: InputMaybe<Scalars['Map']>;
  type?: InputMaybe<Scalars['String']>;
};

export type UtilityPaymentError = UtilityPaymentInvalidDataError;

export type UtilityPaymentInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type UtilityPaymentLayoutComponent = {
  contents?: Maybe<Scalars['Map']>;
  type?: Maybe<Scalars['String']>;
};

export const UtilityPaymentObjectState = {
  Cancelled: 'CANCELLED',
  Pending: 'PENDING',
  Success: 'SUCCESS',
} as const;

export type UtilityPaymentObjectState =
  typeof UtilityPaymentObjectState[keyof typeof UtilityPaymentObjectState];
export type UtilityPaymentRecord = {
  components?: Maybe<Array<Maybe<UtilityPaymentLayoutComponent>>>;
  header_name?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Map']>;
  type?: Maybe<Scalars['String']>;
};

export type UtilityPaymentResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UtilityPaymentRecord>;
  transactionID?: Maybe<Scalars['ID']>;
};

export type UtilityPayments = {
  enabled: Scalars['Boolean'];
  icon: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  service_id: Scalars['String'];
};

export type UtilityQuery = {
  getUtility: UtilityInfoResult;
  listUtilities: UtilitiesListConnection;
};

export type UtilityQueryGetUtilityArgs = {
  slug: Scalars['String'];
};

export type UtilityQueryListUtilitiesArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type UtilityResponseResult = {
  data?: Maybe<Scalars['Map']>;
  error?: Maybe<MutationError>;
  status?: Maybe<UtilityPaymentObjectState>;
};

export type ValidationError = {
  code: Scalars['Int'];
  message: Scalars['InvalidData'];
};

export type WithdrawPenaltyFormState = {
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

type MutationError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type MutationError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type MutationError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type MutationError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

type MutationError_ValidationError_Fragment = {
  __typename: 'ValidationError';
  code: number;
  validationErrorMsg: Record<string, Array<string>>;
};

export type MutationErrorFragment =
  | MutationError_AuthorizationError_Fragment
  | MutationError_BadRequestError_Fragment
  | MutationError_NotFoundError_Fragment
  | MutationError_ServerError_Fragment
  | MutationError_ValidationError_Fragment;

type QueryError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type QueryError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type QueryError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type QueryError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

export type QueryErrorFragment =
  | QueryError_AuthorizationError_Fragment
  | QueryError_BadRequestError_Fragment
  | QueryError_NotFoundError_Fragment
  | QueryError_ServerError_Fragment;

export type PaginationFragment = {
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
};

export type SetDefaultAccountMutationVariables = Exact<{
  accountId: Scalars['String'];
}>;

export type SetDefaultAccountMutation = {
  eBanking: { account?: { setDefaultAccount?: { recordId?: string | null } | null } | null };
};

export type SavingExcelExportMutationVariables = Exact<{
  data: EbankingSavingFilter;
}>;

export type SavingExcelExportMutation = {
  eBanking: {
    account?: {
      savingExcelExport?: {
        url?: string | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type ChangeCoopPinMutationVariables = Exact<{
  oldPin: Scalars['String'];
  newPin: Scalars['String'];
}>;

export type ChangeCoopPinMutation = {
  eBanking: {
    auth?: {
      changeCoopPin?: {
        success: boolean;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type ChangeMyraPasswordMutationVariables = Exact<{
  newPassword: Scalars['String'];
  oldPassword: Scalars['String'];
}>;

export type ChangeMyraPasswordMutation = {
  eBanking: {
    auth?: {
      changePassword?: {
        success: boolean;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type SetChequeRequestDataMutationVariables = Exact<{
  memberID: Scalars['String'];
  data?: InputMaybe<EBankingChequeRequestInput>;
}>;

export type SetChequeRequestDataMutation = {
  eBanking: {
    cooperativeServices?: {
      cheque?: {
        request?: {
          recordID: string;
          error?:
            | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
            | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
            | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
            | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
            | {
                __typename: 'ValidationError';
                code: number;
                validationErrorMsg: Record<string, Array<string>>;
              }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetWithdrawViaCollectorRequestDataMutationVariables = Exact<{
  memberID: Scalars['String'];
  data?: InputMaybe<EBankingChequeWithdrawViaCollectorInput>;
}>;

export type SetWithdrawViaCollectorRequestDataMutation = {
  eBanking: {
    cooperativeServices?: {
      cheque?: { withdrawViaCollector?: { recordID: string } | null } | null;
    } | null;
  };
};

export type SetBlockChequeRequestDataMutationVariables = Exact<{
  memberID: Scalars['String'];
  data?: InputMaybe<EBankingChequeBlockInput>;
}>;

export type SetBlockChequeRequestDataMutation = {
  eBanking: {
    cooperativeServices?: { cheque?: { block?: { recordID: string } | null } | null } | null;
  };
};

export type ApplyForLoanMutationVariables = Exact<{
  memberId: Scalars['String'];
  data?: InputMaybe<EBankingApplyLoanInput>;
}>;

export type ApplyForLoanMutation = {
  eBanking: {
    cooperativeServices?: {
      loan?: {
        apply?: {
          recordID: string;
          error?:
            | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
            | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
            | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
            | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
            | {
                __typename: 'ValidationError';
                code: number;
                validationErrorMsg: Record<string, Array<string>>;
              }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AddNewComplaintMutationVariables = Exact<{
  memberId: Scalars['String'];
  data?: InputMaybe<EBankingRegisterComplaintInput>;
}>;

export type AddNewComplaintMutation = {
  eBanking: {
    cooperativeServices?: {
      complaint?: {
        register?: {
          recordID: string;
          error?:
            | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
            | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
            | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
            | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
            | {
                __typename: 'ValidationError';
                code: number;
                validationErrorMsg: Record<string, Array<string>>;
              }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AccountTransferMutationVariables = Exact<{
  data?: InputMaybe<EbankingAccountTransferInput>;
}>;

export type AccountTransferMutation = {
  eBanking: {
    webUtilityPayments?: {
      accountTransfer?: {
        recordId?: string | null;
        success: boolean;
        record?: {
          amount: string;
          destinationAccount: string;
          remarks?: string | null;
          sourceAccount: string;
          transactionCode: string;
          transactionDate: string;
        } | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type CheckForSendMoneyMutationVariables = Exact<{
  data?: InputMaybe<EbankingSendMoneyInput>;
}>;

export type CheckForSendMoneyMutation = {
  eBanking: {
    webUtilityPayments?: {
      sendMoney?: {
        check?: {
          verified: boolean;
          error?:
            | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
            | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
            | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
            | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
            | {
                __typename: 'ValidationError';
                code: number;
                validationErrorMsg: Record<string, Array<string>>;
              }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type CompleteSendMoneyMutationVariables = Exact<{
  data?: InputMaybe<EbankingSendMoneyInput>;
  transactionPin: Scalars['String'];
}>;

export type CompleteSendMoneyMutation = {
  eBanking: {
    webUtilityPayments?: {
      sendMoney?: {
        proceed?: {
          recordId?: string | null;
          error?:
            | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
            | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
            | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
            | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
            | {
                __typename: 'ValidationError';
                code: number;
                validationErrorMsg: Record<string, Array<string>>;
              }
            | null;
          record?: {
            amount: string;
            purposeOfTransaction?: PurposeOfTransaction | null;
            recipientAccountNumber: string;
            recipientMobileNumber: string;
            recipientName: string;
            remarks?: string | null;
            sourceAccount: string;
            transactionCode: string;
            transactionDate: string;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UseUtilityMutationVariables = Exact<{
  input: UtilityInput;
}>;

export type UseUtilityMutation = {
  eBanking: {
    utility: {
      useUtility: {
        data?: Record<string, string> | null;
        status?: UtilityPaymentObjectState | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      };
    };
  };
};

export type MakePaymentMutationVariables = Exact<{
  input: UtilityInput;
}>;

export type MakePaymentMutation = {
  eBanking: {
    utility: {
      makePayment: {
        data?: Record<string, string> | null;
        status?: UtilityPaymentObjectState | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      };
    };
  };
};

export type GetAccountListQueryVariables = Exact<{
  transactionPagination?: InputMaybe<Pagination>;
}>;

export type GetAccountListQuery = {
  eBanking: {
    account?: {
      list?: {
        totalBalance?: string | null;
        accounts?: Array<{
          id: string;
          name: string;
          productName: string;
          accountNumber: string;
          isDefault: boolean;
          balance: string;
          interestRate: number;
        } | null> | null;
        recentTransactions?: {
          edges?: Array<{
            cursor: string;
            node: {
              id: string;
              accountId?: string | null;
              name: string;
              date: Record<'local' | 'en' | 'np', string>;
              month: Record<'local' | 'en' | 'np', string>;
              transactionDirection: EbankingTransactionDirection;
              amount: string;
            };
          } | null> | null;
          pageInfo?: {
            startCursor?: string | null;
            endCursor?: string | null;
            hasNextPage: boolean;
            hasPreviousPage: boolean;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountSummaryQueryVariables = Exact<{ [key: string]: never }>;

export type GetAccountSummaryQuery = {
  eBanking: { account?: { summary?: { totalSaving: number; totalLoan: number } | null } | null };
};

export type GetTransactionListsQueryVariables = Exact<{
  filter?: InputMaybe<EbankingTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetTransactionListsQuery = {
  eBanking: {
    account?: {
      list?: {
        accounts?: Array<{ id: string; name: string; accountNumber: string } | null> | null;
        recentTransactions?: {
          summary?: { accountBalanceMap?: Record<string, string> | null } | null;
          edges?: Array<{
            node: {
              id: string;
              accountId?: string | null;
              name: string;
              date: Record<'local' | 'en' | 'np', string>;
              month: Record<'local' | 'en' | 'np', string>;
              transactionDirection: EbankingTransactionDirection;
              amount: string;
            };
          } | null> | null;
          pageInfo?: {
            endCursor?: string | null;
            startCursor?: string | null;
            hasNextPage: boolean;
            hasPreviousPage: boolean;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
  transactionPagination?: InputMaybe<Pagination>;
}>;

export type GetAccountDetailsQuery = {
  eBanking: {
    account?: {
      get?: {
        data?: {
          id: string;
          productId?: string | null;
          name: string;
          accountNumber: string;
          isDefault: boolean;
          balance: string;
          interestRate: number;
          accountType: string;
          accountSubType: string;
          interestBooked?: string | null;
          interestEarned?: string | null;
          subscribedDate: string;
          history?: Array<{ id: string; balance: number; date: string }> | null;
          transactions?: {
            edges?: Array<{
              node: {
                id: string;
                accountId?: string | null;
                name: string;
                date: Record<'local' | 'en' | 'np', string>;
                month: Record<'local' | 'en' | 'np', string>;
                transactionDirection: EbankingTransactionDirection;
                amount: string;
              };
            } | null> | null;
            pageInfo?: {
              startCursor?: string | null;
              endCursor?: string | null;
              hasNextPage: boolean;
              hasPreviousPage: boolean;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetEbankingLoanAccountsQueryVariables = Exact<{ [key: string]: never }>;

export type GetEbankingLoanAccountsQuery = {
  eBanking: {
    loanAccount?: {
      list?: {
        totalBalance?: string | null;
        accounts?: Array<{
          id: string;
          name: string;
          productName: string;
          accountNumber: string;
          isDefault: boolean;
          balance: string;
          interestRate: number;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetEbankLoanAccountDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
  transactionPagination?: InputMaybe<Pagination>;
}>;

export type GetEbankLoanAccountDetailsQuery = {
  eBanking: {
    loanAccount?: {
      get?: {
        data?: {
          id: string;
          productId?: string | null;
          name: string;
          accountNumber: string;
          isDefault: boolean;
          balance: string;
          interestRate: number;
          accountType: string;
          accountSubType: string;
          interestBooked?: string | null;
          interestEarned?: string | null;
          subscribedDate: string;
          history?: Array<{ id: string; balance: number; date: string }> | null;
          transactions?: {
            edges?: Array<{
              node: {
                id: string;
                accountId?: string | null;
                name: string;
                date: Record<'local' | 'en' | 'np', string>;
                month: Record<'local' | 'en' | 'np', string>;
                transactionDirection: EbankingTransactionDirection;
                amount: string;
              };
            } | null> | null;
            pageInfo?: {
              startCursor?: string | null;
              endCursor?: string | null;
              hasNextPage: boolean;
              hasPreviousPage: boolean;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetTotalExpenseQueryVariables = Exact<{ [key: string]: never }>;

export type GetTotalExpenseQuery = {
  eBanking: {
    account?: {
      list?: {
        recentTransactions?: {
          summary?: {
            expensesThisMonth?: string | null;
            accountBalanceMap?: Record<string, string> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoopMeQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopMeQuery = {
  eBanking: {
    auth?: {
      meCooperativeUser?: {
        data?: {
          defaultAccount?: string | null;
          myraUserId: string;
          cooperativeId?: string | null;
          cooperativeName?: string | null;
          cooperativeProvince?: string | null;
          cooperativeDistrict?: string | null;
          cooperativeWard?: number | null;
          cooperativeLocalGovt?: string | null;
          memberId?: string | null;
          memberName?: string | null;
          memberProfilePicId?: string | null;
          memberProfilePicUrl?: string | null;
          memberMobileNo?: string | null;
        } | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | null;
      } | null;
    } | null;
  };
};

export type GetCoopStatsQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopStatsQuery = {
  eBanking: {
    cooperativeServices?: {
      coopStatistics?: {
        totalBranches: number;
        totalMembers: number;
        totalCapital?: string | null;
      } | null;
    } | null;
  };
};

export type GetCoopChequeServicesQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopChequeServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      cheque?: { options: Array<{ name: string; enabled: boolean }> } | null;
    } | null;
  };
};

export type GetCoopLoanServicesQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopLoanServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      loan?: {
        options: Array<{ name: string; enabled: boolean; requestType?: string | null }>;
      } | null;
    } | null;
  };
};

export type GetCoopComplaintServicesQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopComplaintServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      complaint?: {
        options: Array<{ name: string; enabled: boolean; requestType?: string | null }>;
      } | null;
    } | null;
  };
};

export type GetCoopDownloadsQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopDownloadsQuery = {
  eBanking: {
    cooperativeServices?: {
      downloads?: {
        options: Array<{ name: string; enabled: boolean; requestType?: string | null }>;
      } | null;
    } | null;
  };
};

export type GetCoopPastChequeRequestsQueryVariables = Exact<{
  memberId: Scalars['ID'];
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
}>;

export type GetCoopPastChequeRequestsQuery = {
  eBanking: {
    cooperativeServices?: {
      cheque?: {
        pastRequests?: Array<{
          id: string;
          typeOfRequest?: EbankingServiceRequestType | null;
          chequeRequestType?: EBankingChequeRequestType | null;
          createdDate?: string | null;
          serviceStatus: EBankingActiveLoanStatus;
          withdrawAmount?: any | null;
          withdrawDate?: string | null;
          chequeBlockReason?: string | null;
          chequeBlockNumber?: string | null;
          status: EBankingServiceStatus;
          branch?: { name?: string | null } | null;
          collector?: { name?: string | null } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetComplaintsListQueryVariables = Exact<{
  memberId: Scalars['ID'];
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
}>;

export type GetComplaintsListQuery = {
  eBanking: {
    cooperativeServices?: {
      complaint?: {
        history?: {
          data?: Array<{
            id: string;
            feedbackDate: string;
            detailedAccount?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDownloadCoopListQueryVariables = Exact<{
  filter?: InputMaybe<EBankingDownloadsFilter>;
}>;

export type GetDownloadCoopListQuery = {
  eBanking: {
    cooperativeServices?: {
      downloads?: {
        files: Array<{
          id: string;
          name: string;
          category: string;
          extension: string;
          size: string;
          url: string;
        }>;
      } | null;
    } | null;
  };
};

export type GetBranchListeBankingQueryVariables = Exact<{ [key: string]: never }>;

export type GetBranchListeBankingQuery = {
  eBanking: {
    cooperativeServices?: {
      cheque?: {
        branchList?: {
          data?: Array<{
            id?: string | null;
            branchCode?: string | null;
            name?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCollectorListeBankingQueryVariables = Exact<{ [key: string]: never }>;

export type GetCollectorListeBankingQuery = {
  eBanking: {
    cooperativeServices?: {
      cheque?: {
        collectors?: {
          data?: Array<{ id?: string | null; name?: string | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanHistoryQueryVariables = Exact<{
  memberId: Scalars['ID'];
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
}>;

export type GetLoanHistoryQuery = {
  eBanking: {
    cooperativeServices?: {
      loan?: {
        history?: {
          data?: Array<{
            id: string;
            activeLoanStatus?: EBankingActiveLoanStatus | null;
            amount?: any | null;
            type?: string | null;
            branch?: { id: string; branchCode?: string | null; name?: string | null } | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAnnouncementListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAnnouncementListQuery = {
  eBanking: {
    notification?: {
      announcements?: {
        list: Array<{
          id: string;
          details: any;
          summary: string;
          title: string;
          date: string;
        } | null>;
      } | null;
    } | null;
  };
};

export type GetEbankingDepositProductsQueryVariables = Exact<{
  filter: NatureOfDepositProduct;
}>;

export type GetEbankingDepositProductsQuery = {
  eBanking: {
    products?: {
      depositProductList?: {
        data?: Array<{ id: string; productName: string } | null> | null;
      } | null;
    } | null;
  };
};

export type GetEbankingDepositProductQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEbankingDepositProductQuery = {
  eBanking: {
    products?: {
      getDepositProduct?: {
        data?: {
          id?: string | null;
          productName?: string | null;
          nature?: NatureOfDepositProduct | null;
          description?: string | null;
          typeOfMember?: Array<KymMemberTypesEnum | null> | null;
          criteria?: Array<CriteriaSection | null> | null;
          minAge?: number | null;
          maxAge?: number | null;
          genderId?: Array<string | null> | null;
          maritalStatusId?: Array<string | null> | null;
          educationQualification?: Array<string | null> | null;
          ethnicity?: Array<string | null> | null;
          occupation?: Array<string | null> | null;
          foreignEmployment?: boolean | null;
          natureOfBusinessInstitution?: Array<string | null> | null;
          natureOFBusinessCoop?: Array<string | null> | null;
          cooperativeType?: Array<string | null> | null;
          transactionAllowed?: DepositFrequency | null;
          noOftransactionAllowed?: number | null;
          depositFrequency?: Frequency | null;
          penalty?: boolean | null;
          rebate?: boolean | null;
          isTenureApplicable?: boolean | null;
          tenureUnit?: FrequencyTenure | null;
          minTenureUnitNumber?: number | null;
          maxTenureUnitNumber?: number | null;
          ladderRate?: boolean | null;
          postingFrequency?: DepositFrequency | null;
          maxPostingFreqDifference?: number | null;
          accountType?: DefaultAccountType | null;
          autoOpen?: boolean | null;
          allowLoan?: boolean | null;
          percentageOfDeposit?: number | null;
          alternativeChannels?: boolean | null;
          atmFacility?: boolean | null;
          isForMinors?: boolean | null;
          chequeIssue?: boolean | null;
          supportMultiple?: boolean | null;
          staffProduct?: boolean | null;
          withdrawRestricted?: boolean | null;
          specifyWithdrawRestriction?: string | null;
          wealthBuildingProduct?: boolean | null;
          isMandatorySaving?: boolean | null;
          individualDocuments?: Array<IndividualRequiredDocument | null> | null;
          institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
          isPrematurePenaltyApplicable?: boolean | null;
          productCode: { initialNo: string; prefix: string };
          depositAmount?: {
            avgAmount?: any | null;
            maxAmount?: any | null;
            minAmount?: any | null;
          } | null;
          withdrawAmountLimit?: {
            minAmount?: any | null;
            maxAmount?: any | null;
            avgAmount?: any | null;
          } | null;
          fixedDepositAmountLimit?: {
            minAmount?: any | null;
            maxAmount?: any | null;
            avgAmount?: any | null;
          } | null;
          penaltyData?: {
            dayAfterInstallmentDate?: number | null;
            penaltyAmount?: any | null;
            penaltyLedgerMapping?: string | null;
            penaltyRate?: number | null;
          } | null;
          rebateData?: {
            dayBeforeInstallmentDate?: number | null;
            noOfInstallment?: number | null;
            rebateAmount?: any | null;
            rebateLedgerMapping?: string | null;
            rebateRate?: number | null;
          } | null;
          balanceLimit?: {
            avgAmount?: any | null;
            maxAmount?: any | null;
            minAmount?: any | null;
          } | null;
          interest?: {
            additionalRate?: number | null;
            boardAuthority?: number | null;
            ceoAuthority?: number | null;
            defaultRate?: number | null;
            interestMethod?: InterestMethod | null;
            maxRate?: number | null;
            minRate?: number | null;
          } | null;
          ladderRateData?: Array<{ amount: any; rate: number; type: string } | null> | null;
          serviceCharge?: Array<{
            amount?: any | null;
            ledgerName?: string | null;
            serviceName?: string | null;
          } | null> | null;
          accountCloseCharge?: Array<{
            serviceName?: string | null;
            amount?: any | null;
            ledgerName?: string | null;
          } | null> | null;
          dormantSetup?: Array<{
            condition?: string | null;
            duration?: string | null;
          } | null> | null;
          alternativeChannelCharge?: Array<{
            ledgerName?: string | null;
            amount?: any | null;
            serviceName?: string | null;
          } | null> | null;
          atmCharge?: Array<{
            ledgerName?: string | null;
            amount?: any | null;
            serviceName?: string | null;
          } | null> | null;
          chequeCharge?: Array<{
            ledgerName?: string | null;
            amount?: any | null;
            serviceName?: string | null;
          } | null> | null;
          prematurePenalty?: {
            penaltyRate?: number | null;
            penaltyLedgerMapping?: string | null;
            penaltyAmount?: any | null;
            penaltyDateType?: PrematurePenaltyDateType | null;
          } | null;
          withdrawPenalty?: {
            penaltyAmount?: any | null;
            penaltyLedgerMapping?: string | null;
            penaltyRate?: number | null;
          } | null;
          ledgerMapping?: {
            interestAccuredDaily?: string | null;
            interestIncome?: string | null;
            principal?: string | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetEbankingDepositProductCriteriaQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEbankingDepositProductCriteriaQuery = {
  eBanking: {
    products?: {
      getDepositProductCriteria?: {
        data?: {
          minAge?: number | null;
          maxAge?: number | null;
          gender?: Array<string | null> | null;
          maritalStatus?: Array<string | null> | null;
          occupation?: Array<string | null> | null;
          educationQualification?: Array<string | null> | null;
          ethnicity?: Array<string | null> | null;
          foreignEmployment?: boolean | null;
          institutionType?: Array<string | null> | null;
          cooperativeUnion?: Array<string | null> | null;
          cooperativeType?: Array<string | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetEbankingLoanProductTypeListQueryVariables = Exact<{ [key: string]: never }>;

export type GetEbankingLoanProductTypeListQuery = {
  eBanking: {
    products?: {
      loanProductTypes?: Array<{
        id?: string | null;
        productType?: string | null;
        description?: string | null;
      } | null> | null;
    } | null;
  };
};

export type GetEbankingLoanProductSubTypeQueryVariables = Exact<{ [key: string]: never }>;

export type GetEbankingLoanProductSubTypeQuery = {
  eBanking: {
    products?: {
      loanProductSubTypes?: Array<{
        id?: string | null;
        productSubType?: string | null;
        productTypeID?: string | null;
      } | null> | null;
    } | null;
  };
};

export type GetEbankingLoanProductsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEbankingLoanProductsQuery = {
  eBanking: {
    products?: {
      loanProductList?: { data?: Array<{ id: string; productName: string } | null> | null } | null;
    } | null;
  };
};

export type GetEbankingLoanProductQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEbankingLoanProductQuery = {
  eBanking: {
    products?: {
      getLoanProduct?: {
        data?: {
          id: string;
          productName: string;
          productType: string;
          productSubType: string;
          productNature: NatureOfLoanProduct;
          description?: string | null;
          typeOfMember: Array<KymMemberTypesEnum | null>;
          minAge?: number | null;
          maxAge?: number | null;
          requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
          interestMethod?: LoanInterestMethod | null;
          repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
          installmentFrequency?: LoanProductInstallment | null;
          isStaffProduct?: boolean | null;
          isInsuranceApplicable?: boolean | null;
          isTenureApplicable?: boolean | null;
          isMonthlyInstallmentCompulsory?: boolean | null;
          isPenaltyApplicable?: boolean | null;
          isRebateApplicable?: boolean | null;
          isCollateralRequired?: boolean | null;
          updateInterest?: boolean | null;
          waiveInterest?: boolean | null;
          allowGurantee?: boolean | null;
          loanScheduleChangeOverride?: boolean | null;
          allowPartialInstallment?: boolean | null;
          supportMultipleAccounts?: boolean | null;
          minTenureUnitNumber?: number | null;
          maxTenureUnitNumber?: number | null;
          maxLoanAmount?: any | null;
          minimumLoanAmount?: any | null;
          principalMaxGraceNumber?: number | null;
          interestMaxGraceNumber?: number | null;
          penaltyType?: PenaltyType | null;
          penaltyDayAfterInstallmentDate?: number | null;
          penaltyRate?: number | null;
          penaltyAmount?: any | null;
          tenureUnit?: FrequencyTenure | null;
          productCode?: { initialNo: string; noOfDigits?: number | null; prefix: string } | null;
          insuranceType?: {
            amount?: any | null;
            type?: string | null;
            rate?: number | null;
          } | null;
          prematurePenaltySetup?: {
            penaltyDateType?: PrematurePenaltyDateType | null;
            noOfDays?: number | null;
            penaltyRate?: number | null;
            penaltyAmount?: any | null;
          } | null;
          loanProcessingCharge?: Array<{
            serviceName?: string | null;
            amount?: any | null;
          } | null> | null;
          rebate?: {
            dayBeforeInstallmentDate?: number | null;
            rebateAmount?: any | null;
            rebateRate?: number | null;
          } | null;
          interest?: {
            minRate?: number | null;
            maxRate?: number | null;
            defaultRate: number;
            ceoAuthority?: number | null;
            boardAuthority?: number | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetEbankingLoanProductCriteriaQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetEbankingLoanProductCriteriaQuery = {
  eBanking: {
    products?: {
      getLoanProductCriteria?: {
        data?: {
          minAge?: number | null;
          maxAge?: number | null;
          gender?: Array<string | null> | null;
          ethnicity?: Array<string | null> | null;
          educationQualification?: Array<string | null> | null;
          maritalStatus?: Array<string | null> | null;
          foreignEmployment?: boolean | null;
          occupation?: Array<string | null> | null;
          institutionType?: Array<string | null> | null;
          cooperativeType?: Array<string | null> | null;
          cooperativeUnion?: Array<string | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberProfileQueryVariables = Exact<{ [key: string]: never }>;

export type GetMemberProfileQuery = {
  eBanking: {
    profile?: {
      data?: {
        memberId?: string | null;
        name?: Record<'local' | 'en' | 'np', string> | null;
        dobAD?: string | null;
        dobBS?: string | null;
        gender?: Record<'local' | 'en' | 'np', string> | null;
        mobileNumber?: string | null;
        email?: string | null;
        maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
        temporaryAddress?: {
          district?: Record<'local' | 'en' | 'np', string> | null;
          houseNo?: string | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
          state?: Record<'local' | 'en' | 'np', string> | null;
          wardNo?: string | null;
          coordinates?: { latitude?: number | null; longitude?: number | null } | null;
        } | null;
        permanentAddress?: {
          district?: Record<'local' | 'en' | 'np', string> | null;
          houseNo?: string | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
          state?: Record<'local' | 'en' | 'np', string> | null;
          wardNo?: string | null;
          coordinates?: { latitude?: number | null; longitude?: number | null } | null;
        } | null;
        familyMembers?: Array<{
          name?: Record<'local' | 'en' | 'np', string> | null;
          relationship?: Record<'local' | 'en' | 'np', string> | null;
        } | null> | null;
        photo?: Array<{ id?: string | null; url?: string | null } | null> | null;
        citizenship?: Array<{ id?: string | null; url?: string | null } | null> | null;
      } | null;
    } | null;
  };
};

export type GetHomeServiceListQueryVariables = Exact<{ [key: string]: never }>;

export type GetHomeServiceListQuery = {
  eBanking: {
    services?: Array<{
      id: string;
      name: string;
      service_id: string;
      icon: string;
      enabled: boolean;
    } | null> | null;
  };
};

export type GetShareSummaryQueryVariables = Exact<{ [key: string]: never }>;

export type GetShareSummaryQuery = {
  eBanking: { share?: { summary?: { totalShare: number; value: string } | null } | null };
};

export type GetEbankingShareHistoryQueryVariables = Exact<{ [key: string]: never }>;

export type GetEbankingShareHistoryQuery = {
  eBanking: {
    share?: {
      history?: Array<{
        id: string;
        title: string;
        date: string;
        amount: string;
        transactionDirection: Transaction_Direction;
        numberOfShares: number;
      } | null> | null;
    } | null;
  };
};

export type GetUtilityListQueryVariables = Exact<{ [key: string]: never }>;

export type GetUtilityListQuery = {
  eBanking: {
    utilityPayments?: Array<{
      id: string;
      name: string;
      enabled: boolean;
      icon: string;
      service_id: string;
    } | null> | null;
  };
};

export type GetUtilityQueryVariables = Exact<{
  slug: Scalars['String'];
}>;

export type GetUtilityQuery = {
  eBanking: {
    utility: {
      getUtility: {
        utility?: {
          slug: string;
          isActive: string;
          logo?: string | null;
          banner?: string | null;
          totalProcessingSequence: string;
          vendorUrl1: string;
          sequence: Array<{
            processSeq?: string | null;
            processUrl?: string | null;
            requiredFields?: Array<{
              fieldName?: string | null;
              fieldLabel?: string | null;
              fieldType?: string | null;
              addnUrl?: string | null;
              isRequired?: string | null;
              inputFormat?: string | null;
              dataType?: {
                type?: string | null;
                length?: string | null;
                minLength?: string | null;
              } | null;
            } | null> | null;
            responseFieldMapping?: Array<{
              fieldName?: string | null;
              mapField?: string | null;
              fieldLabel?: string | null;
              options?: { key?: string | null; value?: string | null } | null;
            } | null> | null;
          }>;
        } | null;
      };
    };
  };
};

export type ListUtilitiesQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type ListUtilitiesQuery = {
  eBanking: {
    utility: {
      listUtilities: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: { id: string; name: string; slug: string; serviceType: string } | null;
        } | null> | null;
        pageInfo?: {
          endCursor?: string | null;
          startCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type SignUpMutationVariables = Exact<{
  mobileNo: Scalars['String'];
}>;

export type SignUpMutation = {
  eBanking: {
    auth?: {
      signUp?: {
        recordId?: string | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type VerifyOtpMutationVariables = Exact<{
  data: EbankingOtpInput;
}>;

export type VerifyOtpMutation = {
  eBanking: {
    auth?: {
      verifyOtp?: {
        success?: boolean | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type EBankingLoginMutationVariables = Exact<{
  data: EbankingLoginInput;
}>;

export type EBankingLoginMutation = {
  eBanking: {
    auth?: {
      login?: {
        recordId?: string | null;
        record?: {
          data?: {
            id: string;
            dob?: string | null;
            mobile?: string | null;
            name?: string | null;
            cooperatives?: Array<{
              id: string;
              name?: string | null;
              logoUrl?: string | null;
              mobileNo?: string | null;
            } | null> | null;
          } | null;
          token: { access: string; refresh: string };
        } | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type CheckAccountMutationVariables = Exact<{
  id: Scalars['ID'];
  mobileNumber: Scalars['String'];
  pin: Scalars['Int'];
}>;

export type CheckAccountMutation = {
  eBanking: {
    auth?: {
      checkAccount?: {
        success?: boolean | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type SetNewPinMutationVariables = Exact<{
  data?: InputMaybe<CooperativeConnectInput>;
}>;

export type SetNewPinMutation = {
  eBanking: {
    auth?: {
      setNewPin?: {
        record?: {
          name?: string | null;
          id: string;
          mobile?: string | null;
          cooperatives?: Array<{ id: string; mobileNo?: string | null } | null> | null;
        } | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type LoginToCooperativeMutationVariables = Exact<{
  cooperativeId: Scalars['ID'];
  pinCode: Scalars['String'];
  mobileNumber: Scalars['String'];
}>;

export type LoginToCooperativeMutation = {
  eBanking: {
    auth?: {
      loginToCooperative?: {
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
        record?: {
          data?: {
            myraUserId: string;
            cooperativeSlug?: string | null;
            cooperativeId?: string | null;
            cooperativeName?: string | null;
            cooperativeProvince?: string | null;
            cooperativeDistrict?: string | null;
            cooperativeWard?: number | null;
            cooperativeLocalGovt?: string | null;
            memberId?: string | null;
            memberName?: string | null;
            memberProfilePicId?: string | null;
            memberProfilePicUrl?: string | null;
            memberMobileNo?: string | null;
          } | null;
          token: { refresh: string; access: string };
        } | null;
      } | null;
    } | null;
  };
};

export type ResendOtpMutationVariables = Exact<{
  mobile: Scalars['String'];
  otpFor: OtpFor;
}>;

export type ResendOtpMutation = {
  eBanking: {
    auth?: {
      resendOtp?: {
        success?: boolean | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type NewMembershipRequestMutationVariables = Exact<{
  cooperativeId: Scalars['String'];
  data?: InputMaybe<MembershipRequestInput>;
}>;

export type NewMembershipRequestMutation = {
  eBanking: {
    membershipRequest?: {
      new?: {
        recordId?: string | null;
        error?:
          | { __typename: 'AuthorizationError'; code: number; authorizationErrorMsg: string }
          | { __typename: 'BadRequestError'; code: number; badRequestErrorMessage: string }
          | { __typename: 'NotFoundError'; code: number; notFoundErrorMsg: string }
          | { __typename: 'ServerError'; code: number; serverErrorMessage: string }
          | {
              __typename: 'ValidationError';
              code: number;
              validationErrorMsg: Record<string, Array<string>>;
            }
          | null;
      } | null;
    } | null;
  };
};

export type GetMyraMeQueryVariables = Exact<{ [key: string]: never }>;

export type GetMyraMeQuery = {
  eBanking: {
    auth?: {
      meMyraUser?: {
        data?: {
          id: string;
          name?: string | null;
          mobile?: string | null;
          dob?: string | null;
          cooperatives?: Array<{
            id: string;
            name?: string | null;
            logoUrl?: string | null;
            mobileNo?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoopListQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopListQuery = {
  eBanking: {
    neosysClientsList?: Array<{
      id?: string | null;
      clientName?: string | null;
      localGovernmentId?: string | null;
    } | null> | null;
  };
};

export type GetKymGenderQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetKymGenderQuery = {
  genderOptions: Array<{
    id?: string | null;
    nameEn?: string | null;
    nameNp?: string | null;
  } | null>;
};
