/* eslint-disable */
//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from '@tanstack/react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Amount: any;
  Any: unknown;
  Cursor: string;
  Date: string;
  Email: any;
  InvalidData: Record<string, Array<string>>;
  Localized: Record<'local' | 'en' | 'np', string>;
  Map: Record<string, string>;
  Time: string;
};

export type AbbsTransaction = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  payableAccountId?: Maybe<Scalars['String']>;
  receivableAccountId?: Maybe<Scalars['String']>;
};

export type AccountActivityEntry = {
  ID: Scalars['ID'];
  accountId?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentName?: Maybe<Scalars['String']>;
  agentPic?: Maybe<Scalars['String']>;
  agentPicUrl?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<Scalars['String']>;
  processedBy?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  state: TransactionState;
  transactionCode?: Maybe<Scalars['String']>;
};

export type AccountActivityListConnection = {
  edges?: Maybe<Array<Maybe<AccountActivityListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountActivityListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountActivityEntry>;
};

export type AccountAgent = {
  agentName?: Maybe<Scalars['String']>;
  assignedMember?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  phoneNo?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
};

export type AccountAgentListConnection = {
  edges?: Maybe<Array<Maybe<AccountAgentListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountAgentListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountAgent>;
};

export enum AccountClosePaymentMode {
  AccountTransfer = 'ACCOUNT_TRANSFER',
  BankCheque = 'BANK_CHEQUE',
  Cash = 'CASH',
}

export enum AccountCloseReason {
  Death = 'DEATH',
  Migration = 'MIGRATION',
  Other = 'OTHER',
  PersonalReason = 'PERSONAL_REASON',
}

export type AccountClosingReport = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  closedBalance?: Maybe<Scalars['String']>;
  closedBy?: Maybe<Scalars['String']>;
  closingDate?: Maybe<Scalars['Localized']>;
  memberId?: Maybe<Scalars['String']>;
  openingDate?: Maybe<Scalars['Localized']>;
};

export type AccountClosingReportInput = {
  branchId: Scalars['String'];
  filter?: InputMaybe<AccountOpeningReportInputFilter>;
  period: LocalizedDateFilter;
};

export type AccountClosingReportResult = {
  data?: Maybe<Array<Maybe<AccountClosingReport>>>;
  error?: Maybe<QueryError>;
};

export type AccountDetailsQueryResult = {
  data?: Maybe<MemberAccountDetails>;
  error?: Maybe<QueryError>;
};

export type AccountListFilter = {
  productID?: InputMaybe<Scalars['ID']>;
};

export type AccountOpeningReport = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  openedBy?: Maybe<Scalars['String']>;
  openingDate?: Maybe<Scalars['Localized']>;
};

export type AccountOpeningReportInput = {
  branchId: Scalars['String'];
  filter?: InputMaybe<AccountOpeningReportInputFilter>;
  period: LocalizedDateFilter;
};

export type AccountOpeningReportInputFilter = {
  user: Scalars['String'];
};

export type AccountOpeningReportResult = {
  data?: Maybe<Array<Maybe<AccountOpeningReport>>>;
  error?: Maybe<QueryError>;
};

export enum AccountOperationType {
  Joint = 'JOINT',
  Single = 'SINGLE',
}

export type AccountOperatorDetailsFormState = {
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type AccountOperatorDetailsType = {
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  specimenSignature?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type AccountTransactionFilter = {
  depositedBy?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  memberId?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
};

export type AccountTransferEntry = {
  ID: Scalars['ID'];
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  destAccountID: Scalars['String'];
  srcAccountID: Scalars['String'];
  state: TransactionState;
  transactionCode?: Maybe<Scalars['String']>;
  transferType: TransferType;
};

export type AccountTransferListConnection = {
  edges?: Maybe<Array<Maybe<AccountTransferListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountTransferListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountTransferEntry>;
};

export type AccountTransferPaymentForAccountClose = {
  amount: Scalars['String'];
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type AccountTransferPaymentForAlternativeChannel = {
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type AccountTransferView = {
  destinationAccount?: Maybe<DepositLoanAccount>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  objState?: Maybe<ObjState>;
  recipientMember?: Maybe<Member>;
  sourceAccount?: Maybe<DepositLoanAccount>;
  teller?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['String']>;
  transferAmount?: Maybe<Scalars['String']>;
  transferType?: Maybe<TransferType>;
  withdrawnBy?: Maybe<Scalars['String']>;
  withdrawnSlipNo?: Maybe<Scalars['String']>;
};

export type AccountTransferViewResult = {
  data?: Maybe<AccountTransferView>;
  error?: Maybe<QueryError>;
};

export type AccountTypeDetailsUnion = BankChartsOfAccount | JournalChartsOfAccount;

export enum AccountTypeFilter {
  Deposit = 'DEPOSIT',
  Loan = 'LOAN',
}

export type AccountWithdrawSlipMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<WithdrawSlipQuery>;
  recordId: Scalars['ID'];
};

export type AccountWithdrawSlipQueryResult = {
  data?: Maybe<Array<Maybe<SlipEntry>>>;
  error?: Maybe<QueryError>;
};

export type AccountWithdrawSlipRangeQueryResult = {
  error?: Maybe<QueryError>;
  range?: Maybe<SlipRange>;
};

export enum AccountingBankAccountType {
  Current = 'CURRENT',
  Saving = 'SAVING',
}

export type AccountingInvestmentAccountQueryResult = {
  data?: Maybe<InvestmentAccount>;
  error?: Maybe<QueryError>;
};

export type AccountingInvestmentEntryQueryResult = {
  data?: Maybe<InvestmentEntry>;
  error?: Maybe<QueryError>;
};

export type AccountingInvestmentMutation = {
  addTransaction: AccountingInvestmentMutationResult;
  upsertAccount: AccountingInvestmentMutationResult;
  upsertEntry: AccountingInvestmentMutationResult;
};

export type AccountingInvestmentMutationAddTransactionArgs = {
  data: InvestmentTransactionInput;
};

export type AccountingInvestmentMutationUpsertAccountArgs = {
  data: InvestmentAccountInput;
  id: Scalars['ID'];
};

export type AccountingInvestmentMutationUpsertEntryArgs = {
  data: InvestmentEntryInput;
  id: Scalars['ID'];
};

export type AccountingInvestmentMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<AccountingInvestmentQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type AccountingInvestmentQuery = {
  accountFormState: AccountingInvestmentAccountQueryResult;
  entryFormState: AccountingInvestmentEntryQueryResult;
  listAccount: InvestmentAccountListConnection;
  listEntry: InvestmentEntryListConnection;
  listTransaction: InvestmentTransactionListConnection;
};

export type AccountingInvestmentQueryAccountFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingInvestmentQueryEntryFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingInvestmentQueryListAccountArgs = {
  filter?: InputMaybe<InvestmentAccountFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingInvestmentQueryListEntryArgs = {
  filter?: InputMaybe<InvestmentEntryFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingInvestmentQueryListTransactionArgs = {
  filter?: InputMaybe<InvestmentTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingMutation = {
  bankAccounts: BankAccountMutation;
  externalLoan: ExternalLoanMutation;
  investment: AccountingInvestmentMutation;
  journalVoucher: JournalVoucherMutation;
  sales: AccountingSalesMutation;
};

export type AccountingQuery = {
  bankAccounts: BankAccountQuery;
  externalLoan: ExternalLoanQuery;
  investment: AccountingInvestmentQuery;
  journalVoucher: JournalVoucherQuery;
  sales: AccountingSalesQuery;
};

export type AccountingSalesCreditNoteQueryResult = {
  data?: Maybe<SalesCreditNote>;
  error?: Maybe<QueryError>;
};

export type AccountingSalesCustomerPaymentQueryResult = {
  data?: Maybe<SalesCustomerPayment>;
  error?: Maybe<QueryError>;
};

export type AccountingSalesCustomerQueryResult = {
  data?: Maybe<SalesCustomer>;
  error?: Maybe<QueryError>;
};

export type AccountingSalesMutation = {
  upsertCreditNote: AccountingSalesMutationResult;
  upsertCustomer: AccountingSalesMutationResult;
  upsertCustomerPayment: AccountingSalesMutationResult;
  upsertSaleEntry: AccountingSalesMutationResult;
};

export type AccountingSalesMutationUpsertCreditNoteArgs = {
  data: SalesCreditNoteInput;
  id: Scalars['ID'];
};

export type AccountingSalesMutationUpsertCustomerArgs = {
  data: SalesCustomerInput;
  id: Scalars['ID'];
};

export type AccountingSalesMutationUpsertCustomerPaymentArgs = {
  data: SalesCustomerPaymentInput;
  id: Scalars['ID'];
};

export type AccountingSalesMutationUpsertSaleEntryArgs = {
  data: SalesSaleEntryInput;
  id: Scalars['ID'];
};

export type AccountingSalesMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<AccountingSalesQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type AccountingSalesQuery = {
  creditNoteFormState: AccountingSalesCreditNoteQueryResult;
  customerFormState: AccountingSalesCustomerQueryResult;
  customerPaymentFormState: AccountingSalesCustomerPaymentQueryResult;
  listCreditNote: SalesCreditNoteListConnection;
  listCustomer: SalesCustomerListConnection;
  listCustomerPayment: SalesCustomerPaymentListConnection;
  listSaleEntry: SalesSaleEntryListConnection;
  saleEntryFormState: AccountingSalesSaleEntryQueryResult;
};

export type AccountingSalesQueryCreditNoteFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryCustomerFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryCustomerPaymentFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryListCreditNoteArgs = {
  filter?: InputMaybe<SalesCreditNoteFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingSalesQueryListCustomerArgs = {
  filter?: InputMaybe<SalesCustomerFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingSalesQueryListCustomerPaymentArgs = {
  filter?: InputMaybe<SalesCustomerPaymentFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingSalesQueryListSaleEntryArgs = {
  filter?: InputMaybe<SalesSaleEntryFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingSalesQuerySaleEntryFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesSaleEntryQueryResult = {
  data?: Maybe<SalesSaleEntry>;
  error?: Maybe<QueryError>;
};

export type AccountsTransactionFilter = {
  accountIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  date?: InputMaybe<LocalizedDateFilter>;
  memberIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type AccountsUnderLeafNode = {
  accountId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type ActiveInactiveMemberReport = {
  branchDetails?: Maybe<Branch>;
  branchID: Scalars['ID'];
  reportStatement?: Maybe<Array<Maybe<ActiveInactiveMemberStatement>>>;
  summary?: Maybe<ActiveInactiveMemberReportSummary>;
};

export type ActiveInactiveMemberReportData = {
  branchId: Scalars['ID'];
  filter?: InputMaybe<MemberReportFilters>;
  period: LocalizedDateFilter;
};

export type ActiveInactiveMemberReportSummary = {
  activeTotal?: Maybe<Scalars['Int']>;
  inactiveTotal?: Maybe<Scalars['Int']>;
  totalMember?: Maybe<Scalars['Int']>;
};

export type ActiveInactiveMemberStatement = {
  address?: Maybe<Scalars['String']>;
  age?: Maybe<Scalars['Int']>;
  contactNo?: Maybe<Scalars['String']>;
  district?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Localized']>;
  gender?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  memberRegistrationDate?: Maybe<Scalars['Localized']>;
  memberType?: Maybe<KymMemberTypesEnum>;
  occupation?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  status?: Maybe<MemberStatus>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AddCoaAccountInput = {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  bankAccountNumber?: InputMaybe<Scalars['String']>;
  bankGLCode?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['ID']>;
  currency: Scalars['String'];
  isAllowFreeEntry: Scalars['Boolean'];
  isAllowTransaction: Scalars['Boolean'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  journalCode?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  openingBalance: Scalars['Float'];
  under?: InputMaybe<Scalars['ID']>;
};

export type AddChartsOfAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ChartsOfAccountSettingsQuery>;
  record?: Maybe<ChartsOfAccount>;
  recordId: Scalars['ID'];
};

export type Address = {
  coordinates?: Maybe<Coordinate>;
  district?: Maybe<Scalars['Localized']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernment?: Maybe<Scalars['Localized']>;
  locality?: Maybe<Scalars['Localized']>;
  state?: Maybe<Scalars['Localized']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AddressType = {
  permanent?: Maybe<Address>;
  temporary?: Maybe<Address>;
};

export type AdministrationQuery = {
  all: Array<Province>;
  districts: Array<Result>;
  municipalities: Array<Result>;
  provinces: Array<Result>;
  wards: Array<Scalars['Int']>;
};

export type AdministrationQueryDistrictsArgs = {
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryMunicipalitiesArgs = {
  districtId?: InputMaybe<Scalars['Int']>;
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryWardsArgs = {
  districtId: Scalars['Int'];
  municipalityId: Scalars['Int'];
  provinceId: Scalars['Int'];
};

export type AdministrativeAddress = {
  district: District;
  locality?: Maybe<Scalars['String']>;
  municipality: Municipality;
  province: Province;
  wardNo: Scalars['Int'];
};

export type AffiliatedDirectorDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  directorName?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type AffiliatedDirectorDetailsType = {
  addressOfInstitution?: Maybe<KymAddress>;
  designation?: Maybe<Scalars['String']>;
  nameOfDirector?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type AgentDetails = {
  branch?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  totalMembers?: Maybe<Scalars['Int']>;
};

export type AgentRecord = {
  data?: Maybe<AgentDetails>;
  error?: Maybe<QueryError>;
};

export type AgentTodayList = {
  account?: Maybe<DepositLoanAccount>;
  amount?: Maybe<Scalars['Amount']>;
  member?: Maybe<Member>;
  paid?: Maybe<Scalars['Boolean']>;
};

export type AgentTodayListData = {
  error?: Maybe<QueryError>;
  record?: Maybe<Array<Maybe<AgentTodayList>>>;
};

export type AgentTodayListInput = {
  account?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['Amount']>;
  member?: InputMaybe<Scalars['String']>;
  paid?: InputMaybe<Scalars['Boolean']>;
};

export type AgentTodayListResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<Array<Maybe<AgentTodayList>>>;
};

export type AgentTransactionView = {
  assignedMember?: Maybe<Array<Maybe<AssignedMemberView>>>;
  status: Scalars['String'];
  totalAmount?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['String']>;
  transactionId: Scalars['ID'];
};

export type AgentTransactionViewResult = {
  data?: Maybe<AgentTransactionView>;
  error?: Maybe<QueryError>;
};

export type AllTransactionFilter = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AllTransactionsConnection = {
  edges?: Maybe<Array<Maybe<AllTransactionsEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AllTransactionsEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<TransactionInfo>;
};

export type AlternativeChannelActivation = {
  coopConnection?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  lastActive?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  phoneNumber?: Maybe<Scalars['String']>;
  serviceStatus?: Maybe<AlternativeChannelStatus>;
  serviceType?: Maybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelCharges = {
  amount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  serviceType?: Maybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelChargesInput = {
  amount?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  ledgerId?: InputMaybe<Scalars['String']>;
  serviceType?: InputMaybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelChargesRecord = {
  data?: Maybe<Array<Maybe<AlternativeChannelCharges>>>;
  error?: Maybe<QueryError>;
};

export type AlternativeChannelChargesResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Array<Maybe<AlternativeChannelCharges>>>;
};

export type AlternativeChannelConnection = {
  edges?: Maybe<Array<Maybe<AlternativeChannelEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export enum AlternativeChannelDepositedBy {
  Others = 'OTHERS',
  Self = 'SELF',
}

export type AlternativeChannelEdge = {
  cursor: Scalars['String'];
  data?: Maybe<AlternativeChannelActivation>;
};

export type AlternativeChannelFilter = {
  serviceType?: InputMaybe<AlternativeChannelServiceType>;
  status?: InputMaybe<AlternativeChannelStatus>;
};

export type AlternativeChannelMemberActivations = {
  eBanking?: Maybe<Scalars['Boolean']>;
  mobileBanking?: Maybe<Scalars['Boolean']>;
  smsBanking?: Maybe<Scalars['Boolean']>;
};

export type AlternativeChannelMutation = {
  serviceActivation?: Maybe<AlternativeChannelServiceActivationResult>;
};

export type AlternativeChannelMutationServiceActivationArgs = {
  data?: InputMaybe<AlternativeChannelServiceActivationInput>;
};

export enum AlternativeChannelPaymentMode {
  Account = 'ACCOUNT',
  BankVoucher = 'BANK_VOUCHER',
  Cash = 'CASH',
}

export type AlternativeChannelQuery = {
  list?: Maybe<AlternativeChannelConnection>;
  memberActivations?: Maybe<AlternativeChannelMemberActivations>;
};

export type AlternativeChannelQueryListArgs = {
  filter?: InputMaybe<AlternativeChannelFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type AlternativeChannelQueryMemberActivationsArgs = {
  memberId: Scalars['String'];
};

export type AlternativeChannelServiceActivationInput = {
  accountTransfer?: InputMaybe<AccountTransferPaymentForAlternativeChannel>;
  bankCheque?: InputMaybe<BankChequePaymentForAlternativeChannel>;
  cash?: InputMaybe<DepositCash>;
  email?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  paymentMode: AlternativeChannelPaymentMode;
  phoneNumber?: InputMaybe<Scalars['String']>;
  pin?: InputMaybe<Scalars['Int']>;
  service?: InputMaybe<Array<InputMaybe<AlternativeChannelServiceType>>>;
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type AlternativeChannelServiceActivationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<AlternativeChannelQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export enum AlternativeChannelServiceType {
  Ebanking = 'EBANKING',
  MobileBanking = 'MOBILE_BANKING',
  SmsBanking = 'SMS_BANKING',
}

export type AlternativeChannelSettingsMutation = {
  feesAndCharges?: Maybe<AlternativeChannelChargesResult>;
};

export type AlternativeChannelSettingsMutationFeesAndChargesArgs = {
  data?: InputMaybe<Array<InputMaybe<AlternativeChannelChargesInput>>>;
};

export type AlternativeChannelSettingsQuery = {
  feesAndCharges?: Maybe<AlternativeChannelChargesRecord>;
};

export enum AlternativeChannelStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
}

export type AmountLimit = {
  avgAmount?: InputMaybe<Scalars['Amount']>;
  maxAmount?: InputMaybe<Scalars['Amount']>;
  minAmount?: InputMaybe<Scalars['Amount']>;
};

export type AmountLimitFormState = {
  avgAmount?: Maybe<Scalars['Amount']>;
  maxAmount?: Maybe<Scalars['Amount']>;
  minAmount?: Maybe<Scalars['Amount']>;
};

export type ApproveOrDeclineMutation = {
  membershipRequest?: Maybe<RequestApproveOrDeclineResult>;
};

export type ApproveOrDeclineMutationMembershipRequestArgs = {
  data?: InputMaybe<RequestApproveOrDeclineInput>;
};

export enum Arrange {
  Asc = 'ASC',
  Desc = 'DESC',
}

export type AssignMembersInput = {
  accountId: Scalars['String'];
  memberId: Scalars['String'];
};

export type AssignedMemberList = {
  account?: Maybe<DepositLoanAccount>;
  assignedDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  product?: Maybe<DepositProduct>;
};

export type AssignedMemberListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AssignedMemberList>;
};

export type AssignedMemberListFiler = {
  agentId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type AssignedMemberView = {
  account?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  member?: Maybe<Scalars['String']>;
};

export type AssignedMembersListConnection = {
  edges?: Maybe<Array<Maybe<AssignedMemberListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AuditLog = {
  action?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  metaData?: Maybe<Scalars['String']>;
  objectId?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type AuditLogHumanizeResult = {
  data?: Maybe<Array<Maybe<HumanizeAuditLog>>>;
  error?: Maybe<QueryError>;
};

export type AuditLogQuery = {
  humanize?: Maybe<AuditLogResult>;
  raw?: Maybe<AuditLogResult>;
};

export type AuditLogResult = AuditLogHumanizeResult | RawAuditLog;

export type AuditTransactionReport = {
  temp?: Maybe<Scalars['String']>;
};

export type AuthMutation = {
  login?: Maybe<LoginResult>;
  token?: Maybe<AuthTokenResult>;
};

export type AuthMutationLoginArgs = {
  data: LoginInput;
};

export type AuthMutationTokenArgs = {
  refreshToken: Scalars['String'];
};

export type AuthQuery = {
  me: MeResult;
};

export type AuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type AuthTokenResult = {
  error?: Maybe<MutationError>;
  token?: Maybe<AuthToken>;
};

export type AuthorizationError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type BadRequestError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type Bank = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  logo?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
};

export type BankAccount = {
  accountNo?: Maybe<Scalars['String']>;
  accountType?: Maybe<AccountingBankAccountType>;
  balance?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type BankAccountConnection = {
  edges?: Maybe<Array<Maybe<BankAccountEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type BankAccountEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<BankAccount>;
};

export type BankAccountFilter = {
  bankId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type BankAccountMutation = {
  new?: Maybe<NewBankAccountResult>;
};

export type BankAccountMutationNewArgs = {
  data?: InputMaybe<NewBankAccountInput>;
};

export type BankAccountQuery = {
  list?: Maybe<BankAccountConnection>;
};

export type BankAccountQueryListArgs = {
  filter?: InputMaybe<BankAccountFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type BankAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankDataQuery>;
  record: Bank;
  recordId: Scalars['ID'];
};

export type BankBranch = Base & {
  address?: Maybe<Address>;
  bankId?: Maybe<Scalars['ID']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
};

export type BankBranchAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankBranchQuery>;
  record: BankBranch;
  recordId: Scalars['ID'];
};

export type BankBranchDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankBranchQuery>;
  recordId: Scalars['ID'];
};

export type BankBranchGetResult = {
  data?: Maybe<BankBranch>;
  error?: Maybe<QueryError>;
};

export type BankBranchInput = {
  bankId?: InputMaybe<Scalars['ID']>;
  districtId?: InputMaybe<Scalars['Int']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  name?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BankBranchMutation = {
  add: BankBranchAddResult;
  delete: BankBranchDeleteResult;
};

export type BankBranchMutationAddArgs = {
  data?: InputMaybe<BankBranchInput>;
  id: Scalars['ID'];
};

export type BankBranchMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type BankBranchQuery = {
  get?: Maybe<BankBranchGetResult>;
  /** This is to get all the branches of one Bank */
  getBranches?: Maybe<Array<Maybe<BankBranch>>>;
  list?: Maybe<Array<Maybe<BankBranch>>>;
};

export type BankBranchQueryGetArgs = {
  id: Scalars['ID'];
};

export type BankBranchQueryGetBranchesArgs = {
  bankId: Scalars['ID'];
};

export type BankBranchQueryListArgs = {
  filter?: InputMaybe<BankBranchSearchFilter>;
};

export type BankBranchSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type BankChartsOfAccount = {
  bankAccountNumber: Scalars['String'];
  bankGLCode: Scalars['String'];
  bankId: Scalars['ID'];
};

export type BankChequePaymentForAccountClose = {
  amount: Scalars['String'];
  bank: Scalars['ID'];
  cheque_no: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type BankChequePaymentForAlternativeChannel = {
  bank: Scalars['ID'];
  depositedBy?: InputMaybe<AlternativeChannelDepositedBy>;
  deposited_date?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  voucher_id: Scalars['String'];
};

export type BankDataMutation = {
  add: BankAddResult;
  delete: BankDeleteResult;
};

export type BankDataMutationAddArgs = {
  data?: InputMaybe<BankInput>;
  id: Scalars['ID'];
};

export type BankDataMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type BankDataQuery = {
  get?: Maybe<BankGetResult>;
  list?: Maybe<Array<Maybe<Bank>>>;
};

export type BankDataQueryGetArgs = {
  id: Scalars['ID'];
};

export type BankDataQueryListArgs = {
  filter?: InputMaybe<BankSearchFilter>;
};

export type BankDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankDataQuery>;
  recordId: Scalars['ID'];
};

export type BankDepositData = {
  amount: Scalars['String'];
  bankId: Scalars['String'];
  depositedBy: PaymentDepositedBy;
  depositedDate: Scalars['Localized'];
  voucherId: Scalars['String'];
};

export type BankGlDataEntry = {
  balance?: Maybe<Scalars['String']>;
  chequeNo?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  depositAmount?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  particular?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  withdrawAmount?: Maybe<Scalars['String']>;
};

export type BankGlStatementFilter = {
  branchId: Scalars['String'];
  filter?: InputMaybe<GlStatementFilter>;
  period: LocalizedDateFilter;
};

export type BankGlStatementResult = {
  data?: Maybe<Array<Maybe<BankGlDataEntry>>>;
  error?: Maybe<QueryError>;
};

export type BankGetResult = {
  data?: Maybe<Bank>;
  error?: Maybe<QueryError>;
};

export type BankInput = {
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type BankMutation = {
  bank?: Maybe<BankDataMutation>;
  branch?: Maybe<BankBranchMutation>;
};

export type BankQuery = {
  bank?: Maybe<BankDataQuery>;
  branch?: Maybe<BankBranchQuery>;
};

export type BankSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type BlockChequeRequestConnection = {
  edges?: Maybe<Array<Maybe<BlockChequeRequestEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type BlockChequeRequestEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<BlockChequeRequestList>;
};

export type BlockChequeRequestList = {
  accountNumber: Scalars['String'];
  accountType: Scalars['String'];
  approvalStatus: RequestStatus;
  chequeNumber: Scalars['String'];
  id: Scalars['String'];
  memberAge?: Maybe<Scalars['Int']>;
  memberCode?: Maybe<Scalars['String']>;
  memberGender?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNumber: Scalars['String'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  requestedDate: Scalars['String'];
};

export type Branch = {
  abbsTransaction?: Maybe<AbbsTransaction>;
  address?: Maybe<Address>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  contactNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  serviceCenterPhone?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
};

export type BranchAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<GeneralBranchSettingsQuery>;
  record?: Maybe<Branch>;
  recordId: Scalars['ID'];
};

export enum BranchCategory {
  BranchOffice = 'BRANCH_OFFICE',
  ContactOffice = 'CONTACT_OFFICE',
  ExtensionCounter = 'EXTENSION_COUNTER',
  HeadOffice = 'HEAD_OFFICE',
  RegionalOffice = 'REGIONAL_OFFICE',
  ServiceCenter = 'SERVICE_CENTER',
}

export type BranchConnection = {
  edges?: Maybe<Array<BranchEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type BranchEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Branch>;
};

export type BranchFormData = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  districtId?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<LocationCoordinate>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  payableAccountId?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  receivableAccountId?: Maybe<Scalars['String']>;
  serviceCenterPhone?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type BranchGetResult = {
  data?: Maybe<BranchFormData>;
  error?: Maybe<QueryError>;
};

export type BranchInfo = {
  membersToApprove?: Maybe<Scalars['Int']>;
  percentOfAccounts?: Maybe<Scalars['String']>;
  percentofMemberRequest?: Maybe<Scalars['String']>;
  totalAccounts?: Maybe<Scalars['Int']>;
  totalMembers?: Maybe<Scalars['Int']>;
};

export type BranchInput = {
  abbsStatus?: InputMaybe<Scalars['Boolean']>;
  branchCode?: InputMaybe<Scalars['String']>;
  branchStatus?: InputMaybe<Scalars['Boolean']>;
  category?: InputMaybe<BranchCategory>;
  districtId?: InputMaybe<Scalars['Int']>;
  email?: InputMaybe<Scalars['String']>;
  estDate?: InputMaybe<Scalars['Localized']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  managerName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  payableAccountId?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  plTransferId?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  receivableAccountId?: InputMaybe<Scalars['String']>;
  serviceCenterPhone?: InputMaybe<Scalars['String']>;
  tdsTransaferId?: InputMaybe<Scalars['String']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export enum BranchPaymentMode {
  BankCheque = 'BANK_CHEQUE',
  Cash = 'CASH',
}

export type BranchReport = {
  branchReport?: Maybe<BranchReportResult>;
};

export type BranchReportBranchReportArgs = {
  data?: InputMaybe<BranchReportFilter>;
};

export type BranchReportFilter = {
  filter?: InputMaybe<BranchReportFilterType>;
  period: LocalizedDateFilter;
};

export type BranchReportFilterType = {
  districtId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  isExtensionCounter?: InputMaybe<Scalars['Boolean']>;
  localGovernmentId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  provinceId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BranchReportResult = {
  Summary?: Maybe<Scalars['Map']>;
  data?: Maybe<Array<Maybe<ServiceCenter>>>;
  error?: Maybe<QueryError>;
  meta?: Maybe<Scalars['Map']>;
};

export type BranchSearchFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export enum BuildingType {
  Commercial = 'COMMERCIAL',
  Industrial = 'INDUSTRIAL',
  Institutional = 'INSTITUTIONAL',
  Residential = 'RESIDENTIAL',
}

export type BulkDepositInput = {
  accounts?: InputMaybe<Array<InputMaybe<BulkDepositInstanceInput>>>;
  agentId?: InputMaybe<Scalars['String']>;
  bankVoucher?: InputMaybe<DepositBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  depositedBy: DepositedBy;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  other_doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  other_name?: InputMaybe<Scalars['String']>;
  payment_type: DepositPaymentType;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  withdrawSlip?: InputMaybe<WithdrawSlip>;
};

export type BulkDepositInstanceInput = {
  accountId: Scalars['String'];
  amount: Scalars['String'];
  fine?: InputMaybe<Scalars['String']>;
  noOfInstallments?: InputMaybe<Scalars['Int']>;
  rebate?: InputMaybe<Scalars['String']>;
};

export type BulkDepositResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type BulkInstallmentResult = {
  accountId?: Maybe<Scalars['String']>;
  value?: Maybe<InstallmentResult>;
};

export type CbsCodeManagement = {
  codeType?: Maybe<CbsCodeType>;
  id?: Maybe<Scalars['ID']>;
  initialNo?: Maybe<Scalars['Int']>;
  noOfDigit?: Maybe<Scalars['Int']>;
  prefix?: Maybe<Scalars['String']>;
};

export type CbsCodeManagementData = {
  data?: Maybe<CbsCodeManagement>;
  error?: Maybe<QueryError>;
};

export type CbsCodeManagementList = {
  data?: Maybe<CbsCodeManagementListData>;
  error?: Maybe<QueryError>;
};

export type CbsCodeManagementListData = {
  share?: Maybe<Array<Maybe<CbsCodeManagement>>>;
  transfers?: Maybe<Array<Maybe<CbsCodeManagement>>>;
  withdrawSlip?: Maybe<Array<Maybe<CbsCodeManagement>>>;
};

export type CbsCodeManagementMutation = {
  add?: Maybe<CbsCodeMangementResult>;
};

export type CbsCodeManagementMutationAddArgs = {
  data?: InputMaybe<CodeManagementInput>;
};

export type CbsCodeManagementQuery = {
  allCbsCodes?: Maybe<CbsCodeManagementList>;
  get?: Maybe<CbsCodeManagementData>;
};

export type CbsCodeManagementQueryGetArgs = {
  codeType?: InputMaybe<CbsCodeType>;
};

export type CbsCodeMangementResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<CbsCodeManagementQuery>;
  record?: Maybe<CbsCodeManagement>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum CbsCodeType {
  BranchTransfer = 'BRANCH_TRANSFER',
  ShareCertificate = 'SHARE_CERTIFICATE',
  TellerTransfer = 'TELLER_TRANSFER',
  VaultTransfer = 'VAULT_TRANSFER',
  WithdrawSlipBlockRequest = 'WITHDRAW_SLIP_BLOCK_REQUEST',
  WithdrawSlipRequest = 'WITHDRAW_SLIP_REQUEST',
}

export type CoaAccount = {
  accountClass?: Maybe<Scalars['String']>;
  accountCode?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['Localized']>;
  parentGroup?: Maybe<Scalars['Localized']>;
};

export type CoaAccountListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<CoaAccount>;
};

export type CoaAccountListResult = {
  edges?: Maybe<Array<Maybe<CoaAccountListEdges>>>;
  error?: Maybe<QueryError>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export enum CoaAccountSetup {
  AllBranch = 'ALL_BRANCH',
  ThisBranch = 'THIS_BRANCH',
}

export type CoaAddAccountResult = {
  error?: Maybe<MutationError>;
  success: Scalars['Boolean'];
};

export enum CoaCategory {
  SystemDefined = 'SYSTEM_DEFINED',
  UserDefined = 'USER_DEFINED',
}

export type CoaFullView = {
  data?: Maybe<Array<Maybe<CoaView>>>;
  error?: Maybe<QueryError>;
};

export type CoaMinimal = {
  accountCode: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['Localized'];
};

export type CoaMinimalResult = {
  data?: Maybe<Array<Maybe<CoaMinimal>>>;
  error?: Maybe<QueryError>;
};

export enum CoaTypeOfTransaction {
  Both = 'BOTH',
  Credit = 'CREDIT',
  Debit = 'DEBIT',
}

export enum CoaTypesOfAccount {
  Bank = 'BANK',
  Cash = 'CASH',
  Journal = 'JOURNAL',
}

export type CoaView = {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  accountTypeDetails?: Maybe<AccountTypeDetailsUnion>;
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  allowedBalance?: Maybe<CoaTypeOfTransaction>;
  category?: Maybe<CoaCategory>;
  createdAt: Scalars['Time'];
  creatorId: Scalars['ID'];
  currency: Scalars['String'];
  id: Scalars['ID'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifierId: Scalars['ID'];
  name: Scalars['Localized'];
  objState: ObjState;
  openingBalance: Scalars['Float'];
  transactionAllowed?: Maybe<CoaTypeOfTransaction>;
  under?: Maybe<Scalars['ID']>;
};

export type CashDepositData = {
  cash: Scalars['String'];
  denominations?: InputMaybe<Array<InputMaybe<Denomination>>>;
  disableDenomination: Scalars['Boolean'];
  returned_amount: Scalars['String'];
  total: Scalars['String'];
};

export type CashInHandData = {
  fromVault?: Maybe<Scalars['String']>;
  percent?: Maybe<Scalars['String']>;
  todayValue?: Maybe<Scalars['String']>;
};

export type CashLedgerReport = {
  balance?: Maybe<Scalars['String']>;
  cashCr?: Maybe<Scalars['String']>;
  cashDr?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  ledgerCode?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  voucherNo?: Maybe<Scalars['String']>;
};

export type CashLedgerReportFilter = {
  ledgerWise?: InputMaybe<CashLedgerWiseFilter>;
  transactionWise?: InputMaybe<CashLedgerTransactionWiseFilter>;
  userIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CashLedgerReportFilterData = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<CashLedgerReportFilter>;
  period: LocalizedDateFilter;
};

export type CashLedgerReportResult = {
  closingBalance?: Maybe<Scalars['String']>;
  details?: Maybe<Array<Maybe<CashLedgerReport>>>;
  openingBalance?: Maybe<Scalars['String']>;
  summary?: Maybe<Array<Maybe<CashLedgerReport>>>;
};

export enum CashLedgerTransactionWiseFilter {
  All = 'ALL',
  CashPayment = 'CASH_PAYMENT',
  CashReceived = 'CASH_RECEIVED',
}

export enum CashLedgerWiseFilter {
  All = 'ALL',
  Details = 'DETAILS',
  Summary = 'SUMMARY',
}

export type CashReport = {
  cashLedgerReport?: Maybe<CashLedgerReportResult>;
};

export type CashReportCashLedgerReportArgs = {
  data?: InputMaybe<CashLedgerReportFilterData>;
};

export enum CashValue {
  Cash_1 = 'CASH_1',
  Cash_2 = 'CASH_2',
  Cash_5 = 'CASH_5',
  Cash_10 = 'CASH_10',
  Cash_20 = 'CASH_20',
  Cash_25 = 'CASH_25',
  Cash_50 = 'CASH_50',
  Cash_100 = 'CASH_100',
  Cash_500 = 'CASH_500',
  Cash_1000 = 'CASH_1000',
}

export type ChartsOfAccount = Base & {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  accountTypeDetails?: Maybe<AccountTypeDetailsUnion>;
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  currency: Scalars['String'];
  id: Scalars['ID'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  /**  can be either account or a group */
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  openingBalance: Scalars['Float'];
  under?: Maybe<Scalars['ID']>;
};

export type ChartsOfAccountClass = {
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ChartsOfAccountClassResult = {
  data: Array<ChartsOfAccountClass>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountFilter = {
  active?: InputMaybe<Scalars['Boolean']>;
  classId?: InputMaybe<Scalars['ID']>;
  hasSubAccounts?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  isLedgerAccount?: InputMaybe<Scalars['Boolean']>;
  parentId?: InputMaybe<Scalars['ID']>;
};

export type ChartsOfAccountMutation = {
  add: AddChartsOfAccountResult;
  addAccount?: Maybe<CoaAddAccountResult>;
  delete: AddChartsOfAccountResult;
  newGroup: NewCoaGroupResult;
};

export type ChartsOfAccountMutationAddArgs = {
  data: AddCoaAccountInput;
};

export type ChartsOfAccountMutationAddAccountArgs = {
  accountSetup: CoaAccountSetup;
  parentAccountCode: Scalars['String'];
};

export type ChartsOfAccountMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type ChartsOfAccountMutationNewGroupArgs = {
  data: NewCoaGroupInput;
};

export type ChartsOfAccountResult = {
  data?: Maybe<Array<ChartsOfAccount>>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountSettingsMutation = {
  account?: Maybe<ChartsOfAccountMutation>;
};

export type ChartsOfAccountSettingsQuery = {
  accounts: ChartsOfAccountResult;
  accountsUnder?: Maybe<CoaMinimalResult>;
  accountsUnderLeaf?: Maybe<Array<Maybe<AccountsUnderLeafNode>>>;
  class?: Maybe<ChartsOfAccountClassResult>;
  coaAccountList?: Maybe<CoaAccountListResult>;
  fullView: CoaFullView;
  search?: Maybe<CoaMinimalResult>;
};

export type ChartsOfAccountSettingsQueryAccountsArgs = {
  filter: ChartsOfAccountFilter;
};

export type ChartsOfAccountSettingsQueryAccountsUnderArgs = {
  accountCode?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ChartsOfAccountSettingsQueryAccountsUnderLeafArgs = {
  currentBranch?: InputMaybe<Scalars['Boolean']>;
  parentId: Array<InputMaybe<Scalars['String']>>;
};

export type ChartsOfAccountSettingsQueryCoaAccountListArgs = {
  branchId?: InputMaybe<Scalars['String']>;
  pagination?: InputMaybe<Pagination>;
};

export type ChartsOfAccountSettingsQuerySearchArgs = {
  name: Scalars['String'];
};

export type ChequeBookRequestConnection = {
  edges?: Maybe<Array<Maybe<ChequeBookRequestEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type ChequeBookRequestEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<ChequeBookRequestList>;
};

export type ChequeBookRequestList = {
  accountNumber: Scalars['String'];
  accountType: Scalars['String'];
  agentName?: Maybe<Scalars['String']>;
  approvalStatus: RequestStatus;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  memberAge?: Maybe<Scalars['Int']>;
  memberCode?: Maybe<Scalars['String']>;
  memberGender?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNumber: Scalars['String'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  numberOfLeaves?: Maybe<Scalars['Int']>;
  pickUpMethod?: Maybe<ChequePickUpMethod>;
  remarks?: Maybe<Scalars['String']>;
  requestedDate: Scalars['String'];
};

export enum ChequePickUpMethod {
  SelfPickup = 'Self_Pickup',
  ThroughAgent = 'Through_agent',
}

export type Citizenship = {
  inNepali?: Maybe<CitizenshipInNepali>;
  issueDate?: Maybe<Scalars['Localized']>;
  issuePlace?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type CitizenshipInNepali = {
  issuePlace?: Maybe<Scalars['String']>;
};

export type CodeManagementInput = {
  codeType: CbsCodeType;
  initialNo: Scalars['Int'];
  noOfDigit: Scalars['Int'];
  prefix: Scalars['String'];
};

export type CodeManagementMutation = {
  cbs?: Maybe<CbsCodeManagementMutation>;
};

export type CodeManagementQuery = {
  cbs?: Maybe<CbsCodeManagementQuery>;
};

export enum Collateral {
  DepositOrSaving = 'DEPOSIT_OR_SAVING',
  Documents = 'DOCUMENTS',
  Land = 'LAND',
  LandAndBuilding = 'LAND_AND_BUILDING',
  Others = 'OTHERS',
  Vehicle = 'VEHICLE',
}

export type CollateralFormState = {
  maxDV?: Maybe<Scalars['Float']>;
  maxFMV?: Maybe<Scalars['Float']>;
  maxValue?: Maybe<Scalars['Float']>;
  minDV?: Maybe<Scalars['Float']>;
  minFMV?: Maybe<Scalars['Float']>;
  minValue?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type CollateralInput = {
  maxDV?: InputMaybe<Scalars['Float']>;
  maxFMV?: InputMaybe<Scalars['Float']>;
  maxValue?: InputMaybe<Scalars['Float']>;
  minDV?: InputMaybe<Scalars['Float']>;
  minFMV?: InputMaybe<Scalars['Float']>;
  minValue?: InputMaybe<Scalars['Float']>;
  type?: InputMaybe<Scalars['String']>;
};

export type CollateralListData = {
  enabled?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

export type CollateralListInputData = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isDeleted?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

export enum ComparatorType {
  EqualTo = 'EqualTo',
  GreaterThan = 'GreaterThan',
  LessThan = 'LessThan',
}

export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type ConfigQuery = {
  bank?: Maybe<Bank>;
  banks?: Maybe<Array<Maybe<Bank>>>;
  countries?: Maybe<Array<Maybe<Country>>>;
  country?: Maybe<Country>;
};

export type ConfigQueryBankArgs = {
  id: Scalars['ID'];
};

export type ConfigQueryCountryArgs = {
  code: Scalars['String'];
};

export enum ConstructionType {
  ConcreteFrame = 'CONCRETE_FRAME',
  JoistedOrLoadBearingMasonry = 'JOISTED_OR_LOAD_BEARING_MASONRY',
  LightGaugeSteelFrame = 'LIGHT_GAUGE_STEEL_FRAME',
  PreEngineered = 'PRE_ENGINEERED',
  SteelFrame = 'STEEL_FRAME',
  WoodFrame = 'WOOD_FRAME',
}

export type Contact = {
  mobile?: Maybe<Scalars['String']>;
  office?: Maybe<Scalars['String']>;
  residence?: Maybe<Scalars['String']>;
};

export type CoopAdditionalDetails = {
  coopType?: Maybe<Scalars['String']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
};

export type CoopAssetDetails = {
  bank?: Maybe<Scalars['String']>;
  cashAndEquivalents?: Maybe<Scalars['String']>;
  investments?: Maybe<Scalars['String']>;
  loan?: Maybe<Scalars['String']>;
  nonCurrentAssets?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['String']>;
  otherNonCurrentAssets?: Maybe<Scalars['String']>;
};

export type CoopBio = {
  additionalCoopDetails?: Maybe<CoopAdditionalDetails>;
  assetDetails?: Maybe<CoopAssetDetails>;
  basicInfo?: Maybe<CooperativeBasicMinInfo>;
  contactDetails?: Maybe<CoopContactDetails>;
  currentMemberDetails?: Maybe<CoopCurrentMemberDetails>;
  declaration?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  employeeDetails?: Maybe<CoopEmployeeDetails>;
  equityLiabilities?: Maybe<CoopEquityLiabilityDetails>;
  operatingAddress?: Maybe<Address>;
  operatorDetails?: Maybe<Array<Maybe<InsOperatorDetails>>>;
  partnerDirectorDetails?: Maybe<Array<Maybe<InsPartnerDirectorDetails>>>;
  registeredAddress?: Maybe<Address>;
  representativeDetails?: Maybe<CoopRepresentativeDetails>;
};

export type CoopContactDetails = {
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type CoopCurrentMemberDetails = {
  lastAuditDate?: Maybe<Scalars['Localized']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
};

export type CoopEmployeeDetails = {
  female?: Maybe<Scalars['Int']>;
  male?: Maybe<Scalars['Int']>;
  other?: Maybe<Scalars['Int']>;
  total?: Maybe<Scalars['Int']>;
};

export type CoopEquityLiabilityDetails = {
  capitalGrant?: Maybe<Scalars['String']>;
  loanAccount?: Maybe<Scalars['String']>;
  reserveAndSurplus?: Maybe<Scalars['String']>;
  savingDeposit?: Maybe<Scalars['String']>;
  shareCapital?: Maybe<Scalars['String']>;
  total?: Maybe<Scalars['String']>;
};

export type CoopRelatedTraining = {
  dateOfTraining?: InputMaybe<Scalars['Localized']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type CoopRelatedTrainingType = {
  dateOfTraining?: Maybe<Scalars['Localized']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CoopRepresentativeDetails = {
  address?: Maybe<Address>;
  contactNumber?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panVatNo?: Maybe<Scalars['String']>;
};

export type CoopUnionAccountOperatorDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<KymCoopUnionAccountOperatorDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCoopUnionAccountOperatorStatus>;
  bodDetails?: Maybe<KymCoopUnionBodDetailsStatus>;
  centralRepresentativeDetails?: Maybe<KymCoopUnionCentralRepresentativeStatus>;
  declaration?: Maybe<KymCoopUnionDeclarationStatus>;
  economicDetails?: Maybe<KymCoopUnionEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCoopUnionInstitutionalInformationStatus>;
};

export type CoopUnionApplicantDetails = {
  address?: Maybe<Address>;
  contactNo?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
};

export type CoopUnionAssetDetails = {
  bankCurrent?: Maybe<Scalars['Float']>;
  bankTarget?: Maybe<Scalars['Float']>;
  cashAndEquivalentsCurrent?: Maybe<Scalars['Float']>;
  cashAndEquivalentsTarget?: Maybe<Scalars['Float']>;
  investmentsCurrent?: Maybe<Scalars['Float']>;
  investmentsTarget?: Maybe<Scalars['Float']>;
  loanCurrent?: Maybe<Scalars['Float']>;
  loanTarget?: Maybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  totalCurrent?: Maybe<Scalars['Float']>;
  totalTarget?: Maybe<Scalars['Float']>;
};

export type CoopUnionBodDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<KymCoopUnionBodDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionBankAccDetails = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['String']>;
};

export type CoopUnionBio = {
  address?: Maybe<Address>;
  applicantDetails?: Maybe<CoopUnionApplicantDetails>;
  assetDetails?: Maybe<CoopUnionAssetDetails>;
  bankAccDetails?: Maybe<CoopUnionBankAccDetails>;
  basicInfo?: Maybe<CooperativeUnionBasicMinInfo>;
  contactDetails?: Maybe<CoopUnionContactDetails>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  equityLiabilities?: Maybe<CoopUnionEquityLiabilityDetails>;
  expenseDetails?: Maybe<CoopUnionExpenseDetails>;
  incomeDetails?: Maybe<CoopUnionIncomeDetails>;
  memberInfo?: Maybe<CoopUnionMemberInfo>;
  operatingAddress?: Maybe<Address>;
  operatorDetails?: Maybe<Array<Maybe<InsOperatorDetails>>>;
  partnerDirectorDetails?: Maybe<Array<Maybe<InsPartnerDirectorDetails>>>;
  registrationDetails?: Maybe<CoopUnionRegistrationDetails>;
  serviceCenterAddress?: Maybe<Address>;
};

export type CoopUnionCentralRepresentativeDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<CooperativeUnionCentralRepresentativeDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionContactDetails = {
  agmDetails?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  noOfEmployees?: Maybe<Scalars['Int']>;
  phoneNo?: Maybe<Scalars['String']>;
  poBoxNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type CoopUnionDeclarationInput = {
  documents?: InputMaybe<Array<InputMaybe<KymCoopUnionDocumentsInput>>>;
};

export type CoopUnionDeclarationResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionDeclaration>;
  recordId: Scalars['ID'];
};

export type CoopUnionEconomicDetailsInput = {
  administrativeExpense?: InputMaybe<Scalars['Float']>;
  bankCurrent?: InputMaybe<Scalars['Float']>;
  bankTarget?: InputMaybe<Scalars['Float']>;
  capitalGrantCurrent?: InputMaybe<Scalars['Float']>;
  capitalGrantTarget?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  deferredTaxExpense?: InputMaybe<Scalars['Float']>;
  directExpense?: InputMaybe<Scalars['Float']>;
  financialCost?: InputMaybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromSales?: InputMaybe<Scalars['Float']>;
  incomeFromServiceOperation?: InputMaybe<Scalars['Float']>;
  investmentsCurrent?: InputMaybe<Scalars['Float']>;
  investmentsTarget?: InputMaybe<Scalars['Float']>;
  loanAccountCurrent?: InputMaybe<Scalars['Float']>;
  loanAccountTarget?: InputMaybe<Scalars['Float']>;
  loanCurrent?: InputMaybe<Scalars['Float']>;
  loanTarget?: InputMaybe<Scalars['Float']>;
  miscellaneousIncome?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  otherIncome?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  purchase?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusTarget?: InputMaybe<Scalars['Float']>;
  riskManagementCost?: InputMaybe<Scalars['Float']>;
  savingDepositCurrent?: InputMaybe<Scalars['Float']>;
  savingDepositTarget?: InputMaybe<Scalars['Float']>;
  shareCapitalCurrent?: InputMaybe<Scalars['Float']>;
  shareCapitalTarget?: InputMaybe<Scalars['Float']>;
};

export type CoopUnionEconomicDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<CooperativeUnionEconomicDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionEquityLiabilityDetails = {
  capitalGrantCurrent?: Maybe<Scalars['Float']>;
  capitalGrantTarget?: Maybe<Scalars['Float']>;
  liabilitiesPayableCurrent?: Maybe<Scalars['Float']>;
  liabilitiesPayableTarget?: Maybe<Scalars['Float']>;
  loanAccountCurrent?: Maybe<Scalars['Float']>;
  loanAccountTarget?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: Maybe<Scalars['Float']>;
  reserveAndSurplusTarget?: Maybe<Scalars['Float']>;
  savingDepositCurrent?: Maybe<Scalars['Float']>;
  savingDepositTarget?: Maybe<Scalars['Float']>;
  shareCapitalCurrent?: Maybe<Scalars['Float']>;
  shareCapitalTarget?: Maybe<Scalars['Float']>;
  totalCurrent?: Maybe<Scalars['Float']>;
  totalTarget?: Maybe<Scalars['Float']>;
};

export type CoopUnionExpenseDetails = {
  adminExpense?: Maybe<Scalars['Float']>;
  deferredTax?: Maybe<Scalars['Float']>;
  directExpense?: Maybe<Scalars['Float']>;
  financialCost?: Maybe<Scalars['Float']>;
  purchase?: Maybe<Scalars['Float']>;
  riskManagement?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

export type CoopUnionIncomeDetails = {
  financialInvestment?: Maybe<Scalars['Float']>;
  investment?: Maybe<Scalars['Float']>;
  miscIncome?: Maybe<Scalars['Float']>;
  nonFinancialInvestment?: Maybe<Scalars['Float']>;
  otherIncome?: Maybe<Scalars['Float']>;
  sales?: Maybe<Scalars['Float']>;
  serviceOperations?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

export type CoopUnionInstitutionInformationInput = {
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  applicantContactNo?: InputMaybe<Scalars['String']>;
  applicantDateOfMembership?: InputMaybe<Scalars['Localized']>;
  applicantDesignationEn?: InputMaybe<Scalars['String']>;
  applicantDesignationNp?: InputMaybe<Scalars['String']>;
  applicantEmail?: InputMaybe<Scalars['String']>;
  applicantHighestQualification?: InputMaybe<Scalars['String']>;
  applicantIsPermanentAndTemporaryAddrSame?: InputMaybe<Scalars['Boolean']>;
  applicantName?: InputMaybe<Scalars['String']>;
  applicantNameNp?: InputMaybe<Scalars['String']>;
  applicantPanNo?: InputMaybe<Scalars['String']>;
  applicantPermanentAddress?: InputMaybe<KymAddressInput>;
  applicantTemporaryAddress?: InputMaybe<KymAddressInput>;
  branchOfficeAddress?: InputMaybe<KymAddressInput>;
  contactEmail?: InputMaybe<Scalars['String']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  fax?: InputMaybe<Scalars['String']>;
  institutionType?: InputMaybe<Scalars['ID']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  lastAgmDate?: InputMaybe<Scalars['Localized']>;
  nameOfBank?: InputMaybe<Scalars['ID']>;
  nameOfInstitutionEn?: InputMaybe<Scalars['String']>;
  nameOfInstitutionNp?: InputMaybe<Scalars['String']>;
  natureOfBusinessEn?: InputMaybe<Scalars['String']>;
  natureOfBusinessNp?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  noOfEmployee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfInstitutionalMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfInstitutionalMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberTarget?: InputMaybe<Scalars['Int']>;
  operatingOfficeAddress?: InputMaybe<KymAddressInput>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  regdAddress?: InputMaybe<KymAddressInput>;
  regdDate?: InputMaybe<Scalars['Localized']>;
  regdNo?: InputMaybe<Scalars['String']>;
  vatOrPan?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type CoopUnionInstitutionInformationResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<CooperativeUnionInstitutionInformation>;
  recordId: Scalars['ID'];
};

export type CoopUnionMemberInfo = {
  noOfFemaleCurrent?: Maybe<Scalars['Int']>;
  noOfFemaleTarget?: Maybe<Scalars['Int']>;
  noOfInstitutionalCurrent?: Maybe<Scalars['Int']>;
  noOfInstitutionalTarget?: Maybe<Scalars['Int']>;
  noOfMaleCurrent?: Maybe<Scalars['Int']>;
  noOfMaleTarget?: Maybe<Scalars['Int']>;
  totalCurrent?: Maybe<Scalars['Int']>;
  totalTarget?: Maybe<Scalars['Int']>;
};

export type CoopUnionPersonnelDetails = {
  centralRepID?: Maybe<Scalars['ID']>;
  citizenshipNo?: Maybe<Scalars['String']>;
  cooperativeUnionId?: Maybe<Scalars['ID']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designationEn?: Maybe<Scalars['String']>;
  designationNp?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNumber?: Maybe<Scalars['String']>;
  notAmongDirectors?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type CoopUnionPersonnelDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<CoopUnionPersonnelDetails>;
  recordId?: Maybe<Scalars['String']>;
};

export type CoopUnionPersonnelDetailsResultType = {
  data?: Maybe<CoopUnionPersonnelDetails>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type CoopUnionPersonnelInput = {
  centralRepID?: InputMaybe<Scalars['ID']>;
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designationEn?: InputMaybe<Scalars['String']>;
  designationNp?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  fullNameNp?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  /**  The two fields below are only applicable for Central representative section  */
  notAmongDirectors?: InputMaybe<Scalars['Boolean']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  trainingAttended?: InputMaybe<Array<InputMaybe<CoopRelatedTraining>>>;
};

export type CoopUnionRegistrationDetails = {
  address?: Maybe<Address>;
  issuingOffice?: Maybe<Scalars['String']>;
  registeredNo?: Maybe<Scalars['String']>;
};

export enum CoopUnionSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  Declaration = 'DECLARATION',
  EconomicDetails = 'ECONOMIC_DETAILS',
  InstitutionInformation = 'INSTITUTION_INFORMATION',
  MemberDetails = 'MEMBER_DETAILS',
}

export type CooperativeAccountOperatorDetails = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  dateofTrainig?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<Address>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CooperativeAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCooperativeAccountOperatorStatus>;
  bodDetails?: Maybe<KymCooperativeBodDetailsStatus>;
  declaration?: Maybe<KymCooperativeDeclarationStatus>;
  economicDetails?: Maybe<KymCooperativeEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCooperativeInstitutionalInformationStatus>;
};

export type CooperativeBodDetails = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<Address>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
};

export type CooperativeBasicMinInfo = {
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  registrationNo?: Maybe<Scalars['String']>;
  registrationOffice?: Maybe<Scalars['String']>;
};

export type CooperativeDeclaration = {
  accountHolderdocuments?: Maybe<Array<Maybe<CooperativeDocuments>>>;
  accountHoldersName?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<CooperativeDocuments>>>;
};

export type CooperativeDocuments = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type CooperativeEconomicDetails = {
  bank?: Maybe<Scalars['Float']>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  investments?: Maybe<Scalars['Float']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
};

export type CooperativeMember = {
  accountOperatorsDetails?: Maybe<CooperativeAccountOperatorDetails>;
  boardOfDirectorsDetails?: Maybe<CooperativeBodDetails>;
  declaration?: Maybe<CooperativeDeclaration>;
  economicDetails?: Maybe<CooperativeEconomicDetails>;
  organizationInformation?: Maybe<CooperativeOrganizationInformation>;
};

export type CooperativeOrganizationInformation = {
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeTypeId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['Localized']>;
  lastAuditDate?: Maybe<Scalars['Localized']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmloyee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  operatingAddress?: Maybe<Address>;
  oprLatitude?: Maybe<Scalars['String']>;
  oprLongitude?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Address>;
  regdDate?: Maybe<Scalars['Localized']>;
  regdLatitude?: Maybe<Scalars['String']>;
  regdLongitude?: Maybe<Scalars['String']>;
  regdNumber?: Maybe<Scalars['Int']>;
  regdOffice?: Maybe<Scalars['String']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export type CooperativeUnionAccountOperatorDetails = {
  accountOperatorsDetails?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorDetails>>>;
};

export type CooperativeUnionBodDetails = {
  boardOfDirectorsDetails?: Maybe<Array<Maybe<KymCoopUnionBodDetails>>>;
};

export type CooperativeUnionBasicMinInfo = {
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  nature?: Maybe<Scalars['String']>;
  noOfServiceCenters?: Maybe<Scalars['Int']>;
  profilePic?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  type?: Maybe<Scalars['String']>;
  vatPanNo?: Maybe<Scalars['String']>;
};

export type CooperativeUnionCentralRepresentativeDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  crDecisionDocument?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  notAmongDirectors?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type CooperativeUnionDeclaration = {
  documents?: Maybe<Array<Maybe<KymCoopUnionDocuments>>>;
};

export type CooperativeUnionEconomicDetails = {
  administrativeExpense?: Maybe<Scalars['Float']>;
  bankCurrent?: Maybe<Scalars['Float']>;
  bankTarget?: Maybe<Scalars['Float']>;
  capitalGrantCurrent?: Maybe<Scalars['Float']>;
  capitalGrantTarget?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: Maybe<Scalars['Float']>;
  currentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  currentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  deferredTaxExpense?: Maybe<Scalars['Float']>;
  directExpense?: Maybe<Scalars['Float']>;
  financialCost?: Maybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromInvestment?: Maybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromSales?: Maybe<Scalars['Float']>;
  incomeFromServiceOperation?: Maybe<Scalars['Float']>;
  investmentsCurrent?: Maybe<Scalars['Float']>;
  investmentsTarget?: Maybe<Scalars['Float']>;
  loanAccountCurrent?: Maybe<Scalars['Float']>;
  loanAccountTarget?: Maybe<Scalars['Float']>;
  loanCurrent?: Maybe<Scalars['Float']>;
  loanTarget?: Maybe<Scalars['Float']>;
  miscellaneousIncome?: Maybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  otherIncome?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  purchase?: Maybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: Maybe<Scalars['Float']>;
  reserveAndSurplusTarget?: Maybe<Scalars['Float']>;
  riskManagementCost?: Maybe<Scalars['Float']>;
  savingDepositCurrent?: Maybe<Scalars['Float']>;
  savingDepositTarget?: Maybe<Scalars['Float']>;
  shareCapitalCurrent?: Maybe<Scalars['Float']>;
  shareCapitalTarget?: Maybe<Scalars['Float']>;
};

export type CooperativeUnionEconomicDetailsResult = {
  data?: Maybe<CooperativeUnionEconomicDetails>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type CooperativeUnionInstitutionInformation = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  applicantContactNo?: Maybe<Scalars['String']>;
  applicantDateOfMembership?: Maybe<Scalars['Localized']>;
  applicantDesignationEn?: Maybe<Scalars['String']>;
  applicantDesignationNp?: Maybe<Scalars['String']>;
  applicantEmail?: Maybe<Scalars['String']>;
  applicantHighestQualification?: Maybe<Scalars['String']>;
  applicantIsPermanentAndTemporaryAddrSame?: Maybe<Scalars['Boolean']>;
  applicantName?: Maybe<Scalars['String']>;
  applicantNameNp?: Maybe<Scalars['String']>;
  applicantPanNo?: Maybe<Scalars['String']>;
  applicantPermanentAddress?: Maybe<KymAddress>;
  applicantTemporaryAddress?: Maybe<KymAddress>;
  branchOfficeAddress?: Maybe<KymAddress>;
  contactEmail?: Maybe<Scalars['String']>;
  declarationAgreement?: Maybe<Scalars['Boolean']>;
  fax?: Maybe<Scalars['String']>;
  institutionType?: Maybe<Scalars['ID']>;
  issuingOffice?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['Localized']>;
  nameOfBank?: Maybe<Scalars['ID']>;
  nameOfInstitutionEn?: Maybe<Scalars['String']>;
  nameOfInstitutionNp?: Maybe<Scalars['String']>;
  natureOfBusinessEn?: Maybe<Scalars['String']>;
  natureOfBusinessNp?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  noOfEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: Maybe<Scalars['Int']>;
  noOfInstitutionalMemberCurrent?: Maybe<Scalars['Int']>;
  noOfInstitutionalMemberTarget?: Maybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfMaleMemberTarget?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<KymAddress>;
  regdDate?: Maybe<Scalars['Localized']>;
  regdNo?: Maybe<Scalars['String']>;
  vatOrPan?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type CooperativeUnionInstitutionInformationResult = {
  data?: Maybe<CooperativeUnionInstitutionInformation>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type CooperativeUnionMember = {
  accountOperatorsDetails?: Maybe<KymCooperativeUnionPersonnelDetailsResult>;
  boardOfDirectorsDetails?: Maybe<KymCooperativeUnionPersonnelDetailsResult>;
  centralRepresentativeDetails?: Maybe<CoopUnionPersonnelDetailsResultType>;
  declaration?: Maybe<CooperativeUnionDeclaration>;
  economicDetails?: Maybe<CooperativeUnionEconomicDetailsResult>;
  id?: Maybe<Scalars['ID']>;
  institutionInformation?: Maybe<CooperativeUnionInstitutionInformationResult>;
};

export enum CooperativeUnionPersonnelSection {
  AccountOperators = 'ACCOUNT_OPERATORS',
  CentralRepresentative = 'CENTRAL_REPRESENTATIVE',
  Directors = 'DIRECTORS',
}

export type Coordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type CoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type Country = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export enum CriteriaSection {
  Age = 'AGE',
  CooperativeType = 'COOPERATIVE_TYPE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  Ethnicity = 'ETHNICITY',
  ForeignEmployment = 'FOREIGN_EMPLOYMENT',
  Gender = 'GENDER',
  MaritalStatus = 'MARITAL_STATUS',
  NatureOfBusinessCoopunion = 'NATURE_OF_BUSINESS_COOPUNION',
  NatureOfBusinessInstitutions = 'NATURE_OF_BUSINESS_INSTITUTIONS',
  OccupationDetails = 'OCCUPATION_DETAILS',
}

export type CustomFormListQueryResult = {
  data?: Maybe<Array<Maybe<FormElement>>>;
  error?: Maybe<QueryError>;
};

export type CustomFormQuery = {
  list: CustomFormListQueryResult;
};

export type CustomFormQueryListArgs = {
  filter: CustomListFilter;
};

export type CustomListFilter = {
  category: FormCategory;
};

export type CustomPeriodInput = {
  from: Scalars['Localized'];
  to: Scalars['Localized'];
};

export type CustomPeriodType = {
  from: Scalars['String'];
  to: Scalars['String'];
};

export enum CustomerPayment {
  BankTransfer = 'BANK_TRANSFER',
  Cash = 'CASH',
  Cheque = 'CHEQUE',
}

export type DashboardInfo = {
  branchInfo?: Maybe<BranchInfo>;
  coopInfo?: Maybe<MyCoopInfo>;
  pendingRequest?: Maybe<PendingRequestInfo>;
};

export type DashboardInfoResult = {
  data?: Maybe<DashboardInfo>;
  error?: Maybe<QueryError>;
};

export type DashboardQuery = {
  dashboardInfo?: Maybe<DashboardInfoResult>;
  myDayInfo?: Maybe<TransactionMyDayData>;
};

export type DateFilter = {
  from?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
};

export enum DateType {
  Ad = 'AD',
  Bs = 'BS',
}

export type DayBookDataEntry = {
  amount?: Maybe<Scalars['String']>;
  ledger?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  voucherNo?: Maybe<Scalars['String']>;
};

export type DayBookDataValue = {
  accountHead?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  entries?: Maybe<Array<Maybe<DayBookDataEntry>>>;
};

export type DayBookReportData = {
  closingAmount?: Maybe<Scalars['String']>;
  openingBalance?: Maybe<Scalars['String']>;
  payments?: Maybe<Array<Maybe<DayBookDataValue>>>;
  receipts?: Maybe<Array<Maybe<DayBookDataValue>>>;
  totalAmount?: Maybe<Scalars['String']>;
  totalPayment?: Maybe<Scalars['String']>;
  totalReceipts?: Maybe<Scalars['String']>;
};

export type DayBookReportFilter = {
  branchId: Scalars['String'];
  period?: InputMaybe<LocalizedDateFilter>;
  user?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type DayBookReportResult = {
  data?: Maybe<DayBookReportData>;
  error?: Maybe<QueryError>;
};

export type Declaration = Base & {
  content: Scalars['Localized'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  for: DeclarationFor;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export enum DeclarationFor {
  KymCoop = 'KYM_COOP',
  KymCoopUnion = 'KYM_COOP_UNION',
  KymIndividual = 'KYM_INDIVIDUAL',
  KymInstitution = 'KYM_INSTITUTION',
}

export type DeclarationGetResult = {
  data?: Maybe<Declaration>;
  error?: Maybe<QueryError>;
};

export type DeclarationInput = {
  dataEn?: InputMaybe<Scalars['String']>;
  dataNp?: InputMaybe<Scalars['String']>;
  for: DeclarationFor;
};

export type DeclarationMutation = {
  update: DeclarationUpdateResult;
};

export type DeclarationMutationUpdateArgs = {
  data: DeclarationInput;
};

export type DeclarationQuery = {
  get?: Maybe<DeclarationGetResult>;
};

export type DeclarationQueryGetArgs = {
  for?: InputMaybe<DeclarationFor>;
};

export type DeclarationSettingMutation = {
  declaration: DeclarationMutation;
};

export type DeclarationSettingQuery = {
  declaration: DeclarationQuery;
};

export type DeclarationUpdateResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DeclarationQuery>;
  record?: Maybe<Declaration>;
};

export enum DefaultAccountType {
  Current = 'CURRENT',
  Saving = 'SAVING',
}

export type Denomination = {
  quantity: Scalars['Int'];
  value: CashValue;
};

export type DenominationValue = {
  amount?: Maybe<Scalars['String']>;
  quantity: Scalars['Int'];
  value: CashValue;
};

export type DepositAccount = Base & {
  accountExpiryDate?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountOpenedDate?: Maybe<Scalars['String']>;
  availableBalance?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dues?: Maybe<Dues>;
  guaranteedAmount?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  installmentAmount?: Maybe<Scalars['String']>;
  interestAccured?: Maybe<Scalars['String']>;
  interestTax?: Maybe<Scalars['String']>;
  lastTransactionDate?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  overDrawnBalance?: Maybe<Scalars['String']>;
  prematurePenalty?: Maybe<Scalars['String']>;
  product: DepositProduct;
};

export type DepositAccountClose = {
  accountID: Scalars['ID'];
  accountTransfer?: InputMaybe<AccountTransferPaymentForAccountClose>;
  adjustedInterest?: InputMaybe<Scalars['String']>;
  bankCheque?: InputMaybe<BankChequePaymentForAccountClose>;
  cash?: InputMaybe<DepositCash>;
  memberID: Scalars['ID'];
  notes?: InputMaybe<Scalars['String']>;
  otherReason?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<AccountClosePaymentMode>;
  reason: AccountCloseReason;
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceChargeInput>>>;
};

export type DepositAccountCloseResult = {
  calculatedAmount?: Maybe<Scalars['String']>;
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['Any']>;
  recordId: Scalars['ID'];
};

export type DepositAccountInstallmentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositLoanAccountQuery>;
  record?: Maybe<Installment>;
  recordId: Scalars['ID'];
};

export type DepositBankVoucher = {
  amount: Scalars['String'];
  bankId: Scalars['String'];
  depositedAt: Scalars['Localized'];
  depositedBy: Scalars['String'];
  voucherId: Scalars['String'];
};

export type DepositCash = {
  cashPaid: Scalars['String'];
  denominations?: InputMaybe<Array<Denomination>>;
  disableDenomination: Scalars['Boolean'];
  note?: InputMaybe<Scalars['String']>;
  returned_amount: Scalars['String'];
  total: Scalars['String'];
};

export enum DepositFrequency {
  Daily = 'DAILY',
  HalfYearly = 'HALF_YEARLY',
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
  Yearly = 'YEARLY',
}

export type DepositInput = {
  accountId?: InputMaybe<Scalars['String']>;
  agentId?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['String']>;
  bankVoucher?: InputMaybe<DepositBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  depositedBy: DepositedBy;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  fine?: InputMaybe<Scalars['String']>;
  isSuspicious?: InputMaybe<Scalars['Boolean']>;
  memberId?: InputMaybe<Scalars['String']>;
  noOfInstallments?: InputMaybe<Scalars['Int']>;
  notes?: InputMaybe<Scalars['String']>;
  other_doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  other_name?: InputMaybe<Scalars['String']>;
  payment_type: DepositPaymentType;
  rebate?: InputMaybe<Scalars['String']>;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  suspicionRemarks?: InputMaybe<Scalars['String']>;
  suspicionTopologies?: InputMaybe<Array<InputMaybe<SuspiciousTransactionTopology>>>;
  voucherId?: InputMaybe<Scalars['String']>;
  withdrawSlip?: InputMaybe<WithdrawSlip>;
};

export type DepositIro = {
  id: Scalars['ID'];
  iroAddress?: Maybe<Scalars['String']>;
  iroCode?: Maybe<Scalars['String']>;
  iroName?: Maybe<Scalars['String']>;
};

export type DepositIroFormStateData = {
  iroAddress?: Maybe<Scalars['String']>;
  iroCode?: Maybe<Scalars['String']>;
  iroName?: Maybe<Scalars['String']>;
};

export type DepositIroFormStateResult = {
  data?: Maybe<DepositIroFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositIroInput = {
  iroAddress?: InputMaybe<Scalars['String']>;
  iroCode?: InputMaybe<Scalars['String']>;
  iroName?: InputMaybe<Scalars['String']>;
};

export type DepositIroResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositSettingsQuery>;
  record?: Maybe<DepositIro>;
  recordId: Scalars['ID'];
};

export type DepositLoanAccount = Base & {
  accountName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['ID']>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  chequeFacility?: Maybe<Scalars['Boolean']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  defaultAmountDepositAccountName?: Maybe<Scalars['String']>;
  depositFrequencyDay?: Maybe<Scalars['Int']>;
  depositFrequencyDayOfWeek?: Maybe<Week>;
  depositFrequencyFrequencyDay?: Maybe<FrequencyDay>;
  depositFrequencyMonthly?: Maybe<WeeklyFrequency>;
  depositFrequencyWeekly?: Maybe<Week>;
  depositFrequencyYearlyDay?: Maybe<Scalars['Int']>;
  depositFrequencyYearlyMonth?: Maybe<Months>;
  dues?: Maybe<Dues>;
  eBanking?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  initialDepositAmount?: Maybe<Scalars['Amount']>;
  installmentAmount?: Maybe<Scalars['String']>;
  interestAuthority?: Maybe<InterestAuthority>;
  interestDoc?: Maybe<Array<Maybe<PictureData>>>;
  interestRate?: Maybe<Scalars['Float']>;
  memberId: Scalars['ID'];
  minor?: Maybe<Scalars['String']>;
  mobileBanking?: Maybe<Scalars['Boolean']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  productId: Scalars['ID'];
  serviceCharge?: Maybe<Array<Maybe<ServiceCharge>>>;
  smsBanking?: Maybe<Scalars['Boolean']>;
  tenure?: Maybe<FrequencyTenure>;
  tenureNumber?: Maybe<Scalars['Int']>;
};

export type DepositLoanAccountConnection = {
  edges?: Maybe<Array<DepositLoanAccountEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type DepositLoanAccountData = {
  data?: Maybe<DepositLoanAccount>;
  error?: Maybe<MutationError>;
};

export type DepositLoanAccountEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<DepositAccount>;
};

export type DepositLoanAccountFormStateResult = {
  data?: Maybe<DepositLoanAccount>;
  error?: Maybe<QueryError>;
};

export type DepositLoanAccountInput = {
  accountName?: InputMaybe<Scalars['String']>;
  agentId?: InputMaybe<Scalars['ID']>;
  atmFacility?: InputMaybe<Scalars['Boolean']>;
  chequeFacility?: InputMaybe<Scalars['Boolean']>;
  defaultAmountDepositAccountName?: InputMaybe<Scalars['String']>;
  depositFrequencyDay?: InputMaybe<Scalars['Int']>;
  depositFrequencyDayOfWeek?: InputMaybe<Week>;
  depositFrequencyFrequencyDay?: InputMaybe<FrequencyDay>;
  depositFrequencyMonthly?: InputMaybe<WeeklyFrequency>;
  depositFrequencyWeekly?: InputMaybe<Week>;
  depositFrequencyYearlyDay?: InputMaybe<Scalars['Int']>;
  depositFrequencyYearlyMonth?: InputMaybe<Months>;
  eBanking?: InputMaybe<Scalars['Boolean']>;
  initialDepositAmount?: InputMaybe<Scalars['Amount']>;
  installmentAmount?: InputMaybe<Scalars['String']>;
  interestAuthority?: InputMaybe<InterestAuthority>;
  interestDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  interestRate?: InputMaybe<Scalars['Float']>;
  memberId: Scalars['ID'];
  minor?: InputMaybe<Scalars['String']>;
  mobileBanking?: InputMaybe<Scalars['Boolean']>;
  openingPayment?: InputMaybe<DepositInput>;
  productId: Scalars['ID'];
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceChargeInput>>>;
  smsBanking?: InputMaybe<Scalars['Boolean']>;
  tenure?: InputMaybe<FrequencyTenure>;
  tenureNumber?: InputMaybe<Scalars['Int']>;
};

export type DepositLoanAccountListResult = {
  data?: Maybe<Array<Maybe<DepositLoanAccount>>>;
  error?: Maybe<QueryError>;
};

export type DepositLoanAccountMutation = {
  add?: Maybe<DepositLoanAccountResult>;
  close?: Maybe<DepositAccountCloseResult>;
  forgiveInstallment?: Maybe<DepositAccountInstallmentResult>;
};

export type DepositLoanAccountMutationAddArgs = {
  data?: InputMaybe<DepositLoanAccountInput>;
  id: Scalars['ID'];
};

export type DepositLoanAccountMutationCloseArgs = {
  data?: InputMaybe<DepositAccountClose>;
};

export type DepositLoanAccountMutationForgiveInstallmentArgs = {
  id: Scalars['ID'];
  installmentDate: Array<Scalars['String']>;
};

export type DepositLoanAccountQuery = {
  accountDetails?: Maybe<AccountDetailsQueryResult>;
  formState?: Maybe<DepositLoanAccountFormStateResult>;
  get?: Maybe<DepositLoanAccount>;
  getBulkInstallments?: Maybe<Array<Maybe<BulkInstallmentResult>>>;
  getInstallments?: Maybe<InstallmentResult>;
  list?: Maybe<DepositLoanAccountConnection>;
  listDefaultAccounts?: Maybe<DepositLoanAccountListResult>;
  listMinors?: Maybe<KymIndFamilyMemberQueryResult>;
  listTransactions?: Maybe<EbankingTransactionConnection>;
};

export type DepositLoanAccountQueryAccountDetailsArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryGetArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryGetBulkInstallmentsArgs = {
  ids: Array<InputMaybe<Scalars['ID']>>;
};

export type DepositLoanAccountQueryGetInstallmentsArgs = {
  from?: InputMaybe<Scalars['String']>;
  fromN?: InputMaybe<Scalars['Int']>;
  id: Scalars['ID'];
  to?: InputMaybe<Scalars['String']>;
  toN?: InputMaybe<Scalars['Int']>;
};

export type DepositLoanAccountQueryListArgs = {
  filter?: InputMaybe<DepositLoanAccountSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositLoanAccountQueryListDefaultAccountsArgs = {
  memberId: Scalars['ID'];
  productId: Scalars['ID'];
};

export type DepositLoanAccountQueryListMinorsArgs = {
  memberId: Scalars['ID'];
};

export type DepositLoanAccountQueryListTransactionsArgs = {
  filter: AccountsTransactionFilter;
  paginate: Pagination;
};

export type DepositLoanAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositLoanAccountQuery>;
  record?: Maybe<DepositLoanAccount>;
  recordId: Scalars['ID'];
};

export type DepositLoanAccountSearchFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  memberId?: InputMaybe<Scalars['String']>;
  objState?: InputMaybe<ObjState>;
  productID?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export enum DepositPaymentType {
  BankVoucher = 'BANK_VOUCHER',
  Cash = 'CASH',
  WithdrawSlip = 'WITHDRAW_SLIP',
}

export type DepositProduct = Base & {
  accountClosingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  interest?: Maybe<Scalars['Float']>;
  isMandatorySaving?: Maybe<Scalars['Boolean']>;
  minimumBalance?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  nature: NatureOfDepositProduct;
  objState: ObjState;
  productCode: Scalars['String'];
  productName: Scalars['String'];
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductConnection = {
  edges: Array<DepositProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type DepositProductCriteria = {
  cooperativeType?: Maybe<Array<Maybe<Scalars['String']>>>;
  cooperativeUnion?: Maybe<Array<Maybe<Scalars['String']>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['String']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['String']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionType?: Maybe<Array<Maybe<Scalars['String']>>>;
  maritalStatus?: Maybe<Array<Maybe<Scalars['String']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DepositProductCriteriaResult = {
  data?: Maybe<DepositProductCriteria>;
  error?: Maybe<QueryError>;
};

export type DepositProductEdge = {
  cursor: Scalars['Cursor'];
  node: DepositProduct;
};

export type DepositProductFormStateData = {
  accountCloseCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  accountType?: Maybe<DefaultAccountType>;
  allowLoan?: Maybe<Scalars['Boolean']>;
  alternativeChannelCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  alternativeChannels?: Maybe<Scalars['Boolean']>;
  atmCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  autoOpen?: Maybe<Scalars['Boolean']>;
  balanceLimit?: Maybe<AmountLimitFormState>;
  chequeCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  chequeIssue?: Maybe<Scalars['Boolean']>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  depositAmount?: Maybe<AmountLimitFormState>;
  depositFrequency?: Maybe<Frequency>;
  description?: Maybe<Scalars['String']>;
  dormantSetup?: Maybe<Array<Maybe<DormantSetupFormState>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  fixedDepositAmountLimit?: Maybe<AmountLimitFormState>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id?: Maybe<Scalars['ID']>;
  individualDocuments?: Maybe<Array<Maybe<IndividualRequiredDocument>>>;
  institutionDocuments?: Maybe<Array<Maybe<InstitutionRequiredDocument>>>;
  interest?: Maybe<InterestFormState>;
  isForMinors?: Maybe<Scalars['Boolean']>;
  isMandatorySaving?: Maybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isTenureApplicable?: Maybe<Scalars['Boolean']>;
  ladderRate?: Maybe<Scalars['Boolean']>;
  ladderRateData?: Maybe<Array<Maybe<LadderRateFormState>>>;
  ledgerMapping?: Maybe<LedgerMappingFormState>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxPostingFreqDifference?: Maybe<Scalars['Int']>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  nature?: Maybe<NatureOfDepositProduct>;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  noOfAccounts?: Maybe<Scalars['Int']>;
  noOfMembers?: Maybe<Scalars['Int']>;
  noOftransactionAllowed?: Maybe<Scalars['Int']>;
  objState?: Maybe<ObjState>;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penalty?: Maybe<Scalars['Boolean']>;
  penaltyData?: Maybe<Penalty>;
  percentageOfDeposit?: Maybe<Scalars['Float']>;
  postingFrequency?: Maybe<DepositFrequency>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  productCode: ProductCodeFormState;
  productName?: Maybe<Scalars['String']>;
  rebate?: Maybe<Scalars['Boolean']>;
  rebateData?: Maybe<Rebate>;
  savingCharges?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  serviceCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  specifyWithdrawRestriction?: Maybe<Scalars['String']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultiple?: Maybe<Scalars['Boolean']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  transactionAllowed?: Maybe<DepositFrequency>;
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: Maybe<Scalars['Boolean']>;
  withdrawAmountLimit?: Maybe<AmountLimitFormState>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductFormStateResult = {
  data?: Maybe<DepositProductFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositProductInactiveData = {
  id: Scalars['ID'];
  remarks: Scalars['String'];
};

export type DepositProductInactiveResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositProductSettingsQuery>;
  recordId: Scalars['ID'];
};

export type DepositProductInput = {
  accountCloseCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  accountType?: InputMaybe<DefaultAccountType>;
  allowLoan?: InputMaybe<Scalars['Boolean']>;
  alternativeChannelCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  alternativeChannels?: InputMaybe<Scalars['Boolean']>;
  atmCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  atmFacility?: InputMaybe<Scalars['Boolean']>;
  autoOpen?: InputMaybe<Scalars['Boolean']>;
  balanceLimit?: InputMaybe<AmountLimit>;
  chequeCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  chequeIssue?: InputMaybe<Scalars['Boolean']>;
  cooperativeType?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  criteria?: InputMaybe<Array<InputMaybe<CriteriaSection>>>;
  depositAmount?: InputMaybe<AmountLimit>;
  depositFrequency?: InputMaybe<Frequency>;
  description?: InputMaybe<Scalars['String']>;
  dormantSetup?: InputMaybe<Array<InputMaybe<DormantSetup>>>;
  educationQualification?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  ethnicity?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  fixedDepositAmountLimit?: InputMaybe<AmountLimit>;
  foreignEmployment?: InputMaybe<Scalars['Boolean']>;
  genderId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  individualDocuments?: InputMaybe<Array<InputMaybe<IndividualRequiredDocument>>>;
  institutionDocuments?: InputMaybe<Array<InputMaybe<InstitutionRequiredDocument>>>;
  interest?: InputMaybe<InterestRate>;
  isForMinors?: InputMaybe<Scalars['Boolean']>;
  isMandatorySaving?: InputMaybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: InputMaybe<Scalars['Boolean']>;
  isTenureApplicable?: InputMaybe<Scalars['Boolean']>;
  ladderRate?: InputMaybe<Scalars['Boolean']>;
  ladderRateData?: InputMaybe<Array<InputMaybe<LadderRate>>>;
  ledgerMapping?: InputMaybe<LedgerMapping>;
  maritalStatusId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  maxAge?: InputMaybe<Scalars['Int']>;
  maxPostingFreqDifference?: InputMaybe<Scalars['Int']>;
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  nature?: InputMaybe<NatureOfDepositProduct>;
  natureOFBusinessCoop?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  noOftransactionAllowed?: InputMaybe<Scalars['Int']>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  penalty?: InputMaybe<Scalars['Boolean']>;
  penaltyData?: InputMaybe<PenaltyTypeInput>;
  percentageOfDeposit?: InputMaybe<Scalars['Float']>;
  postingFrequency?: InputMaybe<DepositFrequency>;
  prematurePenalty?: InputMaybe<PrematurePenalty>;
  productCode?: InputMaybe<ProductCode>;
  productName?: InputMaybe<Scalars['String']>;
  rebate?: InputMaybe<Scalars['Boolean']>;
  rebateData?: InputMaybe<RebateTypeInput>;
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  specifyWithdrawRestriction?: InputMaybe<Scalars['String']>;
  staffProduct?: InputMaybe<Scalars['Boolean']>;
  supportMultiple?: InputMaybe<Scalars['Boolean']>;
  tenureUnit?: InputMaybe<FrequencyTenure>;
  transactionAllowed?: InputMaybe<DepositFrequency>;
  typeOfMember?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: InputMaybe<Scalars['Boolean']>;
  withdrawAmountLimit?: InputMaybe<AmountLimit>;
  withdrawPenalty?: InputMaybe<WithdrawPenalty>;
  withdrawRestricted?: InputMaybe<Scalars['Boolean']>;
};

export type DepositProductList = {
  allowed?: Maybe<Array<Maybe<DepositProduct>>>;
  error?: Maybe<QueryError>;
  notAllowed?: Maybe<Array<Maybe<DepositProductListData>>>;
};

export type DepositProductListData = {
  data?: Maybe<DepositProduct>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DepositProductMinimal = {
  id: Scalars['ID'];
  productName: Scalars['String'];
};

export type DepositProductResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositProductSettingsQuery>;
  record?: Maybe<DepositProduct>;
  recordId: Scalars['ID'];
};

export type DepositProductSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<DepositProductStatus>;
  query?: InputMaybe<Scalars['String']>;
};

export type DepositProductSettingsMutation = {
  activateProduct?: Maybe<ProductActivateResult>;
  add?: Maybe<DepositProductResult>;
  makeInactive?: Maybe<DepositProductInactiveResult>;
};

export type DepositProductSettingsMutationActivateProductArgs = {
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
  remarks: Scalars['String'];
};

export type DepositProductSettingsMutationAddArgs = {
  data?: InputMaybe<DepositProductInput>;
  id: Scalars['ID'];
};

export type DepositProductSettingsMutationMakeInactiveArgs = {
  data?: InputMaybe<DepositProductInactiveData>;
};

export type DepositProductSettingsQuery = {
  depositProductDetail?: Maybe<DepositProductFormStateResult>;
  formState?: Maybe<DepositProductFormStateResult>;
  get?: Maybe<DepositProduct>;
  getAccountlist?: Maybe<DepositLoanAccountConnection>;
  getPenaltyRebateInfo?: Maybe<PenaltyRebateResult>;
  getProductCriteria?: Maybe<DepositProductCriteriaResult>;
  getProductList?: Maybe<DepositProductList>;
  list?: Maybe<DepositProductConnection>;
};

export type DepositProductSettingsQueryDepositProductDetailArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetAccountlistArgs = {
  filter?: InputMaybe<DepositLoanAccountSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositProductSettingsQueryGetPenaltyRebateInfoArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryGetProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryGetProductListArgs = {
  memberId: Scalars['ID'];
};

export type DepositProductSettingsQueryListArgs = {
  filter?: InputMaybe<DepositProductSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export enum DepositProductStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
}

export type DepositRecord = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  depositedBy?: Maybe<DepositedBy>;
  fine?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<DepositPaymentType>;
  rebate?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionID?: Maybe<Scalars['ID']>;
};

export type DepositReport = {
  accountClosingReport?: Maybe<AccountClosingReportResult>;
  accountOpeningReport?: Maybe<AccountOpeningReportResult>;
  interestStatementReport: InterestPostingReportResult;
  interestTaxReport: InterestTaxReportResult;
  savingStatementReport?: Maybe<ReportResult>;
  suspiciousTransctionReport?: Maybe<SuspiciousTransactionReportResult>;
  thresholdTransactionReport: TtrReportResult;
};

export type DepositReportAccountClosingReportArgs = {
  data?: InputMaybe<AccountClosingReportInput>;
};

export type DepositReportAccountOpeningReportArgs = {
  data?: InputMaybe<AccountOpeningReportInput>;
};

export type DepositReportInterestStatementReportArgs = {
  data: InterestStatementFilter;
};

export type DepositReportInterestTaxReportArgs = {
  data: InterestTaxReportFilter;
};

export type DepositReportSavingStatementReportArgs = {
  data: SavingStatementReportSettings;
};

export type DepositReportSuspiciousTransctionReportArgs = {
  data?: InputMaybe<SuspiciousTransactionReportInput>;
};

export type DepositReportThresholdTransactionReportArgs = {
  data: TtrReportFilter;
};

export type DepositResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<DepositRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type DepositSettingsMutation = {
  iroSetup?: Maybe<DepositIroResult>;
  tdsSetup?: Maybe<DepositTdsResult>;
};

export type DepositSettingsMutationIroSetupArgs = {
  data?: InputMaybe<DepositIroInput>;
};

export type DepositSettingsMutationTdsSetupArgs = {
  data?: InputMaybe<DepositTdsInput>;
};

export type DepositSettingsQuery = {
  iroFormState?: Maybe<DepositIroFormStateResult>;
  tdsFormState?: Maybe<DepositTdsFormStateResult>;
};

export type DepositTds = {
  coopUnion?: Maybe<Scalars['Float']>;
  cooperative?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  individual?: Maybe<Scalars['Float']>;
  institution?: Maybe<Scalars['Float']>;
};

export type DepositTdsFormStateData = {
  coopUnion?: Maybe<Scalars['Float']>;
  cooperative?: Maybe<Scalars['Float']>;
  individual?: Maybe<Scalars['Float']>;
  institution?: Maybe<Scalars['Float']>;
};

export type DepositTdsFormStateResult = {
  data?: Maybe<DepositTdsFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositTdsInput = {
  coopUnion?: InputMaybe<Scalars['Float']>;
  cooperative?: InputMaybe<Scalars['Float']>;
  individual?: InputMaybe<Scalars['Float']>;
  institution?: InputMaybe<Scalars['Float']>;
};

export type DepositTdsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositSettingsQuery>;
  record?: Maybe<DepositTds>;
  recordId: Scalars['ID'];
};

export type DepositTransactionView = {
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  depositedBy?: Maybe<DepositedBy>;
  fine?: Maybe<Scalars['String']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  paymentMode?: Maybe<DepositPaymentType>;
  rebate?: Maybe<Scalars['String']>;
  sourceOfFund?: Maybe<Scalars['String']>;
  status?: Maybe<ObjState>;
  teller?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalDepositedAmount?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['String']>;
  voucherId?: Maybe<Scalars['String']>;
};

export type DepositTransactionViewResult = {
  data?: Maybe<DepositTransactionView>;
  error?: Maybe<QueryError>;
};

export enum DepositedBy {
  Agent = 'AGENT',
  Other = 'OTHER',
  Self = 'SELF',
}

export type DirectorAffiliatedFirms = {
  addressOfInstitution?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type DirectorDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firmDetails?: Maybe<AffiliatedDirectorDetailsFormState>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isAffiliatedWithOtherFirms?: Maybe<Scalars['Boolean']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type DirectorDetailsType = {
  affiliatedFirms?: Maybe<Array<Maybe<DirectorAffiliatedFirms>>>;
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  documentPhotograph?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  isAffiliatedWithOtherFirms?: Maybe<Scalars['Boolean']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  photograph?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type District = {
  id: Scalars['Int'];
  municipalities: Array<Municipality>;
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export enum DividendDistributionCondition {
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
}

export type DividendRate = {
  monthly?: Maybe<MonthlyDividendRate>;
  quarterly?: Maybe<QuarterlyDividendRate>;
};

export type DividendRateInput = {
  monthly?: InputMaybe<MonthlyDividendRateInput>;
  quarterly?: InputMaybe<QuarterlyDividendRateInput>;
};

export enum DividendTransferTreatment {
  AccountTransfer = 'ACCOUNT_TRANSFER',
  BookPayable = 'BOOK_PAYABLE',
  ShareAndAccount = 'SHARE_AND_ACCOUNT',
}

export type Document = {
  photo?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
};

export type DocumentMutation = {
  KYMUpsert: DocumentMutationResult;
  Subscription: SubscriptionMutation;
};

export type DocumentMutationKymUpsertArgs = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
  memberId: Scalars['String'];
};

export type DocumentMutationSubscriptionArgs = {
  subscriptionId: Scalars['String'];
};

export type DocumentMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UploadedDocument>;
  recordId?: Maybe<Scalars['ID']>;
};

export type DocumentQuery = {
  listKYMDocuments: DocumentResult;
  listSubscriptionDocuments: DocumentResult;
};

export type DocumentQueryListKymDocumentsArgs = {
  memberId: Scalars['String'];
};

export type DocumentQueryListSubscriptionDocumentsArgs = {
  subscriptionId: Scalars['String'];
};

export type DocumentResult = {
  data?: Maybe<Array<Maybe<UploadedDocument>>>;
  error?: Maybe<QueryError>;
};

export enum DormantCondition {
  Deposit = 'DEPOSIT',
  Withdraw = 'WITHDRAW',
}

export enum DormantDuration {
  Day = 'DAY',
  HalfYear = 'HALF_YEAR',
  Month = 'MONTH',
  Quarter = 'QUARTER',
  TwoYear = 'TWO_YEAR',
  Year = 'YEAR',
}

export type DormantSetup = {
  condition: DormantCondition;
  duration: DormantDuration;
};

export type DormantSetupFormState = {
  condition?: Maybe<DormantCondition>;
  duration?: Maybe<DormantDuration>;
};

export type Dues = {
  dueInstallments?: Maybe<Scalars['Int']>;
  fine?: Maybe<Scalars['String']>;
  totalDue?: Maybe<Scalars['String']>;
};

export enum EodOption {
  CompleteWithError = 'COMPLETE_WITH_ERROR',
  Reinitiate = 'REINITIATE',
}

export type EodResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['ID']>;
};

export type EodSatusResult = {
  cashInVault?: Maybe<EodState>;
  dormancy?: Maybe<EodState>;
  interestBooking?: Maybe<EodState>;
  interestPosting?: Maybe<EodState>;
  loanInterestBooking?: Maybe<EodState>;
  maturity?: Maybe<EodState>;
  transactionDate?: Maybe<EodState>;
};

export enum EodState {
  Completed = 'COMPLETED',
  CompletedWithErrors = 'COMPLETED_WITH_ERRORS',
  Ongoing = 'ONGOING',
}

export type EbankingRegistrationReportResult = {
  data?: Maybe<Array<Maybe<EbankingReportResult>>>;
  error?: Maybe<QueryError>;
};

export type EbankingReportFilter = {
  branchId?: InputMaybe<Scalars['ID']>;
  period: LocalizedDateFilter;
};

export type EbankingReportResult = {
  branchCode?: Maybe<Scalars['String']>;
  expDate?: Maybe<Scalars['Localized']>;
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['String']>;
  mobileNo?: Maybe<Scalars['String']>;
  regDate?: Maybe<Scalars['Localized']>;
  registeredBy?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type EbankingTransaction = {
  accountId?: Maybe<Scalars['String']>;
  amount: Scalars['String'];
  currentBalance: Scalars['String'];
  date: Scalars['Localized'];
  id: Scalars['String'];
  month: Scalars['Localized'];
  name: Scalars['String'];
  transactionDirection: EbankingTransactionDirection;
  transactionId?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
};

export type EbankingTransactionConnection = {
  edges?: Maybe<Array<Maybe<EbankingTransactionEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  summary?: Maybe<TransactionListSummary>;
  totalCount?: Maybe<Scalars['Int']>;
};

export enum EbankingTransactionCrOrDr {
  Credit = 'CREDIT',
  Debit = 'DEBIT',
}

export enum EbankingTransactionDirection {
  Incoming = 'INCOMING',
  Outgoing = 'OUTGOING',
}

export type EbankingTransactionEdge = {
  cursor: Scalars['String'];
  node: EbankingTransaction;
};

export type EbankingTransactionFilter = {
  accounts?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  date?: InputMaybe<DateFilter>;
  transactionDirection?: InputMaybe<EbankingTransactionCrOrDr>;
};

export type EmployeeReport = {
  userReport?: Maybe<UserReportResult>;
};

export type EmployeeReportUserReportArgs = {
  data?: InputMaybe<UserReportFilter>;
};

export type Example = {
  age: Scalars['Int'];
  enrolledAt: Scalars['Time'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ExampleInput = {
  age?: InputMaybe<Scalars['Int']>;
  enrolledAt?: InputMaybe<Scalars['Time']>;
  name: Scalars['String'];
};

export type ExampleMutation = {
  level1: Level1;
};

export type ExampleQuery = {
  localization: LocalizationExample;
  testDb: TestDbResult;
};

export enum ExpiryStatusFilter {
  All = 'ALL',
  Expired = 'EXPIRED',
  NotExpired = 'NOT_EXPIRED',
}

export type ExternalLoanAccount = {
  address?: Maybe<Address>;
  createdBy?: Maybe<Scalars['String']>;
  createdDate?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type ExternalLoanAccountConnection = {
  edges?: Maybe<Array<Maybe<ExternalLoanAccountEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ExternalLoanAccountEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<ExternalLoanAccount>;
};

export type ExternalLoanAccountFilter = {
  date?: InputMaybe<DateFilter>;
  id?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanAccountInput = {
  address?: InputMaybe<KymAddressInput>;
  name?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanAccountMutation = {
  new?: Maybe<ExternalLoanAccountResult>;
};

export type ExternalLoanAccountMutationNewArgs = {
  data?: InputMaybe<ExternalLoanAccountInput>;
  id?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanAccountQuery = {
  list?: Maybe<ExternalLoanAccountConnection>;
};

export type ExternalLoanAccountQueryListArgs = {
  filter?: InputMaybe<ExternalLoanAccountFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type ExternalLoanAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ExternalLoanAccountQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type ExternalLoanApplication = {
  amount?: Maybe<Scalars['String']>;
  appliedDate?: Maybe<Scalars['Localized']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  loanName?: Maybe<Scalars['String']>;
  loanType?: Maybe<ExternalLoanType>;
  organizationId?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
};

export type ExternalLoanApplicationConnection = {
  edges?: Maybe<Array<Maybe<ExternalLoanApplicationEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ExternalLoanApplicationDocumentInput = {
  application?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  bod?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  collateral?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  guarantor?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ExternalLoanApplicationEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<ExternalLoanApplication>;
};

export type ExternalLoanApplicationFilter = {
  date?: InputMaybe<DateFilter>;
  id?: InputMaybe<Scalars['String']>;
  loanType?: InputMaybe<ExternalLoanType>;
  organizationId?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanApplicationInput = {
  appliedAmount?: InputMaybe<Scalars['String']>;
  approvedAmount?: InputMaybe<Scalars['String']>;
  collateral?: InputMaybe<Array<InputMaybe<ExternalLoanCollateralInput>>>;
  documents?: InputMaybe<ExternalLoanApplicationDocumentInput>;
  effectiveStartDate?: InputMaybe<Scalars['Localized']>;
  fixDeposit?: InputMaybe<Scalars['String']>;
  installmentFrequency?: InputMaybe<InstallmentFrequency>;
  installmentType?: InputMaybe<LoanRepaymentScheme>;
  insurance?: InputMaybe<Scalars['Boolean']>;
  insuranceCompany?: InputMaybe<Scalars['String']>;
  insurancePremiumAmount?: InputMaybe<Scalars['String']>;
  insuranceStartDate?: InputMaybe<Scalars['Localized']>;
  insuranceValidUpto?: InputMaybe<Scalars['String']>;
  interestRate?: InputMaybe<Scalars['Float']>;
  loanAppliedDate?: InputMaybe<Scalars['Localized']>;
  loanApprovedDate?: InputMaybe<Scalars['Localized']>;
  loanCharges?: InputMaybe<Array<InputMaybe<ExternalLoanChargeInput>>>;
  loanName?: InputMaybe<Scalars['String']>;
  loanNumber?: InputMaybe<Scalars['String']>;
  maturityDate?: InputMaybe<Scalars['Localized']>;
  nameOfOrganization?: InputMaybe<Scalars['String']>;
  nameOfRepresentative?: InputMaybe<Scalars['String']>;
  paymentMethod?: InputMaybe<ExternalLoanPaymentMethod>;
  position?: InputMaybe<Scalars['String']>;
  tenure?: InputMaybe<Scalars['Int']>;
  tenureUnit?: InputMaybe<FrequencyTenure>;
  typeOfLoan?: InputMaybe<ExternalLoanType>;
};

export type ExternalLoanApplicationMutation = {
  new?: Maybe<ExternalLoanApplicationResult>;
};

export type ExternalLoanApplicationMutationNewArgs = {
  data?: InputMaybe<ExternalLoanApplicationInput>;
  id?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanApplicationQuery = {
  list?: Maybe<ExternalLoanApplicationConnection>;
};

export type ExternalLoanApplicationQueryListArgs = {
  filter?: InputMaybe<ExternalLoanApplicationFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type ExternalLoanApplicationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ExternalLoanApplicationQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type ExternalLoanChargeInput = {
  serviceCharge?: InputMaybe<Scalars['String']>;
  serviceId?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanCollateralInput = {
  details?: InputMaybe<Scalars['String']>;
  typeOfCollateral?: InputMaybe<Scalars['String']>;
  valuationAmount?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanMutation = {
  account?: Maybe<ExternalLoanAccountMutation>;
  loan?: Maybe<ExternalLoanApplicationMutation>;
  payment?: Maybe<ExternalLoanPaymentMutation>;
};

export type ExternalLoanPayment = {
  amount?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDate?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  loanId?: Maybe<Scalars['String']>;
  loanName?: Maybe<Scalars['String']>;
  paymentMode?: Maybe<ExternalLoanPaymentMethod>;
};

export type ExternalLoanPaymentConnection = {
  edges?: Maybe<Array<Maybe<ExternalLoanPaymentEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ExternalLoanPaymentEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<ExternalLoanPayment>;
};

export type ExternalLoanPaymentFilter = {
  date?: InputMaybe<DateFilter>;
  id?: InputMaybe<Scalars['String']>;
  loanId?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanPaymentInput = {
  amountPaid?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['Localized']>;
  fine?: InputMaybe<Scalars['String']>;
  installmentAmount?: InputMaybe<Scalars['String']>;
  loanId?: InputMaybe<Scalars['String']>;
  otherCharge?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<ExternalLoanPaymentMethod>;
  rebate?: InputMaybe<Scalars['String']>;
};

export enum ExternalLoanPaymentMethod {
  Bank = 'BANK',
  Cash = 'CASH',
  Other = 'OTHER',
}

export type ExternalLoanPaymentMutation = {
  new?: Maybe<ExternalLoanPaymentResult>;
};

export type ExternalLoanPaymentMutationNewArgs = {
  data?: InputMaybe<ExternalLoanPaymentInput>;
  id?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanPaymentQuery = {
  list?: Maybe<ExternalLoanPaymentConnection>;
};

export type ExternalLoanPaymentQueryListArgs = {
  filter?: InputMaybe<ExternalLoanPaymentFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type ExternalLoanPaymentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ExternalLoanPaymentQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type ExternalLoanQuery = {
  account?: Maybe<ExternalLoanAccountQuery>;
  loan?: Maybe<ExternalLoanApplicationQuery>;
  payment?: Maybe<ExternalLoanPaymentQuery>;
};

export enum ExternalLoanType {
  Collateral = 'COLLATERAL',
  LoanAgainstFd = 'LOAN_AGAINST_FD',
}

export type FdInvestment = {
  bankACNo: Scalars['String'];
  certificateNo: Scalars['String'];
  fdAmount: Scalars['String'];
  interestLedgerMapping: Scalars['String'];
  interestNomineeBank: Scalars['String'];
  maturityDate: Scalars['Localized'];
  notes?: Maybe<Scalars['String']>;
  rate: Scalars['Float'];
  startDate: Scalars['Localized'];
  type: FdInvestmentType;
};

export type FdInvestmentInput = {
  bankACNo: Scalars['String'];
  certificateNo: Scalars['String'];
  fdAmount: Scalars['String'];
  interestLedgerMapping: Scalars['String'];
  interestNomineeBank: Scalars['String'];
  maturityDate: Scalars['Localized'];
  notes?: InputMaybe<Scalars['String']>;
  rate: Scalars['Float'];
  startDate: Scalars['Localized'];
  type: FdInvestmentType;
};

export type FdInvestmentTransactionInput = {
  amount: Scalars['String'];
  type: FdInvestmentType;
};

export enum FdInvestmentType {
  Type_1 = 'TYPE_1',
  Type_2 = 'TYPE_2',
  Type_3 = 'TYPE_3',
}

export enum File_Variant {
  Doc = 'DOC',
  Docx = 'DOCX',
  Jpeg = 'JPEG',
  Jpg = 'JPG',
  Other = 'OTHER',
  Pdf = 'PDF',
  Png = 'PNG',
}

export enum Filter_Mode {
  And = 'AND',
  Or = 'OR',
}

export type FamilyDetails = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  inNepali?: Maybe<FamilyDetailsInNepali>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FamilyDetailsInNepali = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FamilyMemberDetails = {
  dob?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  relationship?: Maybe<Scalars['String']>;
};

export type FianancialTransactionReport = {
  bankGLStatementReport: BankGlStatementResult;
  dayBookReport: DayBookReportResult;
  tellerReport: TellerReportResult;
  trialSheetReport: TrialSheetReportResult;
  vaultBalanceReport: VaultBalanceReportResult;
};

export type FianancialTransactionReportBankGlStatementReportArgs = {
  data: BankGlStatementFilter;
};

export type FianancialTransactionReportDayBookReportArgs = {
  data: DayBookReportFilter;
};

export type FianancialTransactionReportTellerReportArgs = {
  data: TellerReportFilter;
};

export type FianancialTransactionReportTrialSheetReportArgs = {
  data: TrialSheetReportFilter;
};

export type FianancialTransactionReportVaultBalanceReportArgs = {
  data: VaultBalanceReportFilter;
};

export type FieldDetailsQueryResult = {
  data?: Maybe<FormField>;
  error?: Maybe<QueryError>;
};

export type Filter = {
  orConditions: Array<OrConditions>;
};

export enum FormCategory {
  KymCoop = 'KYM_COOP',
  KymCoopUnion = 'KYM_COOP_UNION',
  KymIndividual = 'KYM_INDIVIDUAL',
  KymInstitution = 'KYM_INSTITUTION',
}

export type FormDynamicFieldsFilter = {
  category: FormCategory;
  searchTerm: FormSectionSearchTerm;
};

export type FormElement = FormField | FormSection;

export type FormElementDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormElementResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormElement>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormField = Base & {
  category: FormCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dependsOn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: FormFieldType;
  hasOtherField: Scalars['Boolean'];
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  options?: Maybe<Array<FormOption>>;
  order: Scalars['Int'];
  search_term?: Maybe<FormFieldSearchTerm>;
  section?: Maybe<FormSection>;
};

export type FormFieldDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormFieldInput = {
  category: FormCategory;
  dependsOn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: FormFieldType;
  hasOtherField: Scalars['Boolean'];
  maxSize?: InputMaybe<Scalars['Int']>;
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Array<FormOptionInput>>;
};

export type FormFieldMutation = {
  /**  Condition of fields should always be depended on options only  */
  condition: FormFieldMutationResult;
  delete: FormFieldDeleteResult;
  move: FormFieldMutationResult;
  update: FormFieldMutationResult;
  /**
   *  If SectionId is given then the field is wrapped by a section and this field won't have any options.
   *    if sectionID isn't given then this field will have options so, its type will only be   SINGLE_SELECT & MULTIPLE_SELECT
   */
  upsert: FormFieldMutationResult;
};

export type FormFieldMutationConditionArgs = {
  dependsOn: Array<InputMaybe<Scalars['ID']>>;
  fieldId: Scalars['ID'];
};

export type FormFieldMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormFieldMutationMoveArgs = {
  id: Scalars['ID'];
  to: Scalars['Int'];
};

export type FormFieldMutationUpdateArgs = {
  data: FormFieldUpdateInput;
  id: Scalars['ID'];
};

export type FormFieldMutationUpsertArgs = {
  data: FormFieldUpsertInput;
  sectionId?: InputMaybe<Scalars['ID']>;
};

export type FormFieldMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormField>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormFieldQuery = {
  details: FieldDetailsQueryResult;
};

export type FormFieldQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type FormFieldQueryResult = {
  data?: Maybe<Array<Maybe<FormField>>>;
  error?: Maybe<QueryError>;
};

export enum FormFieldSearchTerm {
  /**  KYM_COOP  */
  CooperativeType = 'COOPERATIVE_TYPE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction = 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity = 'ETHNICITY',
  ExpectedMonthlyTransaction = 'EXPECTED_MONTHLY_TRANSACTION',
  ExpectedMonthlyTurnover = 'EXPECTED_MONTHLY_TURNOVER',
  FamilyIncomeSource = 'FAMILY_INCOME_SOURCE',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions = 'FOREIGN_EMPLOYMENT_OPTIONS',
  /** KYM_INDIVIDUAL */
  Gender = 'GENDER',
  MaritalStatus = 'MARITAL_STATUS',
  Nationality = 'NATIONALITY',
  Occupation = 'OCCUPATION',
  /**  KYM_INSTITUTION */
  OrganizationType = 'ORGANIZATION_TYPE',
  Purpose = 'PURPOSE',
  Relationship = 'RELATIONSHIP',
  Religion = 'RELIGION',
}

export enum FormFieldType {
  /**  For Custom Variant  */
  Address = 'ADDRESS',
  Amount = 'AMOUNT',
  Bank = 'BANK',
  Date = 'DATE',
  District = 'DISTRICT',
  Email = 'EMAIL',
  Fax = 'FAX',
  /**  These are for SEARCH fields  */
  LocalLevel = 'LOCAL_LEVEL',
  MultipleFile = 'MULTIPLE_FILE',
  MultipleSelect = 'MULTIPLE_SELECT',
  NumberInput = 'NUMBER_INPUT',
  Paragraph = 'PARAGRAPH',
  PhoneNumber = 'PHONE_NUMBER',
  PoBox = 'PO_BOX',
  Province = 'PROVINCE',
  /**  These are for file   */
  SingleFile = 'SINGLE_FILE',
  /**  These are for SINGLE_SELECT, MULTI_SELECT  */
  SingleSelect = 'SINGLE_SELECT',
  TextInput = 'TEXT_INPUT',
  Url = 'URL',
}

export type FormFieldUpdateInput = {
  dependsOn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  fieldType?: InputMaybe<FormFieldType>;
  hasOtherField?: InputMaybe<Scalars['Boolean']>;
  maxSize?: InputMaybe<Scalars['Int']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

/**  This option will be always be added in last order */
export type FormFieldUpsertInput = {
  data?: InputMaybe<FormFieldInput>;
  /**  If id is supplied then it will be update operation else it will be insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormOption = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  field: FormField;
  id: Scalars['ID'];
  isDefault: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  order: Scalars['Int'];
};

export type FormOptionDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormOptionInput = {
  enabled: Scalars['Boolean'];
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormOptionMutation = {
  delete: FormOptionDeleteResult;
  move: FormOptionResult;
  update: FormOptionResult;
  upsert: FormOptionResult;
};

export type FormOptionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormOptionMutationMoveArgs = {
  id: Scalars['ID'];
  to: Scalars['Int'];
};

export type FormOptionMutationUpdateArgs = {
  data: FormOptionUpdateInput;
  id: Scalars['ID'];
};

export type FormOptionMutationUpsertArgs = {
  data: FormOptionUpsertInput;
  fieldId: Scalars['ID'];
};

export type FormOptionResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormOption>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormOptionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

/**  This option will be always be added in last order */
export type FormOptionUpsertInput = {
  data?: InputMaybe<FormOptionInput>;
  /**  If Id is Present then this will be an update operation.. else it will be an insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormOptionsGetFilter = {
  fieldId: Scalars['ID'];
};

export type FormOptionsPredefinedFilter = {
  category: FormCategory;
  searchTerm: FormFieldSearchTerm;
};

export type FormOptionsQuery = {
  get?: Maybe<FormOptionsQueryResult>;
  predefined?: Maybe<FormOptionsQueryResult>;
};

export type FormOptionsQueryGetArgs = {
  filter: FormOptionsGetFilter;
};

export type FormOptionsQueryPredefinedArgs = {
  filter: FormOptionsPredefinedFilter;
};

export type FormOptionsQueryResult = {
  data?: Maybe<Array<Maybe<FormOption>>>;
  error?: Maybe<QueryError>;
};

export type FormQuery = {
  dynamicFields?: Maybe<FormFieldQueryResult>;
  options: FormOptionsQuery;
};

export type FormQueryDynamicFieldsArgs = {
  filter: FormOptionsPredefinedFilter;
};

export enum FormSearchTerm {
  AccountCoopTraining = 'ACCOUNT_COOP_TRAINING',
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  AccountHolderDetails = 'ACCOUNT_HOLDER_DETAILS',
  AccountHolderDocuments = 'ACCOUNT_HOLDER_DOCUMENTS',
  AccountOperator = 'ACCOUNT_OPERATOR',
  AccountOperatorDetails = 'ACCOUNT_OPERATOR_DETAILS',
  AccountOperatorDocument = 'ACCOUNT_OPERATOR_DOCUMENT',
  /**  KYM_COOP_UNION  */
  Applicant = 'APPLICANT',
  ApplicantDetails = 'APPLICANT_DETAILS',
  ApplicantDocument = 'APPLICANT_DOCUMENT',
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  CentralRepresentativeCoopTraining = 'CENTRAL_REPRESENTATIVE_COOP_TRAINING',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  CentralRepresentativeDocument = 'CENTRAL_REPRESENTATIVE_DOCUMENT',
  Citizenship = 'CITIZENSHIP',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION && KYM_COOP && KYM_COOP_UNION */
  ContactDetails = 'CONTACT_DETAILS',
  CooperativeType = 'COOPERATIVE_TYPE',
  /**  KYM_COOP && KYM_COOP_UNION  */
  CurrentMembers = 'CURRENT_MEMBERS',
  Director = 'DIRECTOR',
  DirectorsAffiliationDetails = 'DIRECTORS_AFFILIATION_DETAILS',
  DirectorCoopTraining = 'DIRECTOR_COOP_TRAINING',
  DirectorDetails = 'DIRECTOR_DETAILS',
  DirectorDocument = 'DIRECTOR_DOCUMENT',
  DrivingLicense = 'DRIVING_LICENSE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction = 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity = 'ETHNICITY',
  ExpectedMonthlyTransaction = 'EXPECTED_MONTHLY_TRANSACTION',
  ExpectedMonthlyTurnover = 'EXPECTED_MONTHLY_TURNOVER',
  FamilyIncomeSource = 'FAMILY_INCOME_SOURCE',
  FamilyInformation = 'FAMILY_INFORMATION',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION */
  FileUploads = 'FILE_UPLOADS',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions = 'FOREIGN_EMPLOYMENT_OPTIONS',
  /**  KYM_INDIVIDUAL  */
  Gender = 'GENDER',
  Identification = 'IDENTIFICATION',
  IncomeSourceDetails = 'INCOME_SOURCE_DETAILS',
  MaritalStatus = 'MARITAL_STATUS',
  Nationality = 'NATIONALITY',
  NationalIdentity = 'NATIONAL_IDENTITY',
  NextToKinInformation = 'NEXT_TO_KIN_INFORMATION',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  Occupation = 'OCCUPATION',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION */
  OccupationDetails = 'OCCUPATION_DETAILS',
  /** KYM_INSTITUTION  */
  OrganizationType = 'ORGANIZATION_TYPE',
  OtherCooperativeDetails = 'OTHER_COOPERATIVE_DETAILS',
  Passport = 'PASSPORT',
  Purpose = 'PURPOSE',
  RegisteredDetails = 'REGISTERED_DETAILS',
  Relationship = 'RELATIONSHIP',
  Religion = 'RELIGION',
  /**  KYM_COOP  */
  Representative = 'REPRESENTATIVE',
  SisterConcernDetails = 'SISTER_CONCERN_DETAILS',
  TransactionDetails = 'TRANSACTION_DETAILS',
  VoterId = 'VOTER_ID',
}

export type FormSection = Base & {
  category: FormCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  fields?: Maybe<Array<FormField>>;
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  parent?: Maybe<FormSection>;
  search_term?: Maybe<FormSectionSearchTerm>;
  sectionType: FormSectionType;
  subSections?: Maybe<Array<FormSection>>;
};

export type FormSectionDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormSectionInput = {
  category: FormCategory;
  enabled: Scalars['Boolean'];
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormSectionMutation = {
  delete: FormSectionDeleteResult;
  /**  The new section will always be an INPUT section. UPLOAD and GROUP type aren't allowed to be created  */
  subSection: FormSectionMutationResult;
  update: FormSectionMutationResult;
  /**  The new section will always be an INPUT section. UPLOAD and GROUP type aren't allowed to be created  */
  upsert: FormSectionMutationResult;
};

export type FormSectionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormSectionMutationSubSectionArgs = {
  data?: InputMaybe<FormSectionInput>;
  sectionId: Scalars['ID'];
};

export type FormSectionMutationUpdateArgs = {
  data: FormSectionUpdateInput;
  id: Scalars['ID'];
};

export type FormSectionMutationUpsertArgs = {
  data: FormSectionUpsertInput;
};

export type FormSectionMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormSection>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormSectionQuery = {
  details: SectionDetailsQueryResult;
};

export type FormSectionQueryDetailsArgs = {
  id: Scalars['ID'];
};

export enum FormSectionSearchTerm {
  AccountCoopTraining = 'ACCOUNT_COOP_TRAINING',
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  AccountHolderDetails = 'ACCOUNT_HOLDER_DETAILS',
  AccountHolderDocuments = 'ACCOUNT_HOLDER_DOCUMENTS',
  AccountOperator = 'ACCOUNT_OPERATOR',
  AccountOperatorDetails = 'ACCOUNT_OPERATOR_DETAILS',
  AccountOperatorDocument = 'ACCOUNT_OPERATOR_DOCUMENT',
  /**  KYM_COOP_UNION  */
  Applicant = 'APPLICANT',
  ApplicantDetails = 'APPLICANT_DETAILS',
  ApplicantDocument = 'APPLICANT_DOCUMENT',
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  CentralRepresentativeCoopTraining = 'CENTRAL_REPRESENTATIVE_COOP_TRAINING',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  CentralRepresentativeDocument = 'CENTRAL_REPRESENTATIVE_DOCUMENT',
  Citizenship = 'CITIZENSHIP',
  ContactDetails = 'CONTACT_DETAILS',
  /**  KYM_COOP  */
  CurrentMembers = 'CURRENT_MEMBERS',
  /**  KYM_INSTITUTION && KYM_COOP  */
  Director = 'DIRECTOR',
  DirectorsAffiliationDetails = 'DIRECTORS_AFFILIATION_DETAILS',
  DirectorCoopTraining = 'DIRECTOR_COOP_TRAINING',
  DirectorDetails = 'DIRECTOR_DETAILS',
  DirectorDocument = 'DIRECTOR_DOCUMENT',
  DrivingLicense = 'DRIVING_LICENSE',
  FamilyInformation = 'FAMILY_INFORMATION',
  /** KYM_INDIVIDUAL && KYM_INSTITUTION && KYM_COOP */
  FileUploads = 'FILE_UPLOADS',
  Identification = 'IDENTIFICATION',
  IncomeSourceDetails = 'INCOME_SOURCE_DETAILS',
  NationalIdentity = 'NATIONAL_IDENTITY',
  NextToKinInformation = 'NEXT_TO_KIN_INFORMATION',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  OccupationDetails = 'OCCUPATION_DETAILS',
  OtherCooperativeDetails = 'OTHER_COOPERATIVE_DETAILS',
  /** KYM_INDIVIDUAL */
  Passport = 'PASSPORT',
  /**  KYM_INSTITUTION */
  RegisteredDetails = 'REGISTERED_DETAILS',
  Representative = 'REPRESENTATIVE',
  SisterConcernDetails = 'SISTER_CONCERN_DETAILS',
  TransactionDetails = 'TRANSACTION_DETAILS',
  VoterId = 'VOTER_ID',
}

export enum FormSectionType {
  Group = 'GROUP',
  Input = 'INPUT',
  Upload = 'UPLOAD',
}

export type FormSectionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormSectionUpsertInput = {
  data?: InputMaybe<FormSectionInput>;
  /**  If id is supplied then it will be update operation else it will be insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormSettingMutation = {
  delete: FormElementDeleteResult;
  field: FormFieldMutation;
  maxSize: FormElementResult;
  option: FormOptionMutation;
  section: FormSectionMutation;
};

export type FormSettingMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormSettingMutationMaxSizeArgs = {
  id: Scalars['ID'];
  maxSize: Scalars['Int'];
};

export type FormSettingQuery = {
  custom: CustomFormQuery;
  field: FormFieldQuery;
  predefined: PredefinedFormQuery;
  section: FormSectionQuery;
};

export enum Frequency {
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY',
}

export enum FrequencyDay {
  First = 'FIRST',
  Last = 'LAST',
  Second = 'SECOND',
  Third = 'THIRD',
}

export enum FrequencyTenure {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR',
}

export type FundManagementConnection = {
  edges?: Maybe<Array<Maybe<FundManagementEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type FundManagementEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<FundManagementInfo>;
};

export type FundManagementFilter = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FundManagementInfo = {
  id?: Maybe<Scalars['String']>;
};

export type FundManagementInput = {
  cooperativePromotionFund?: InputMaybe<Scalars['Float']>;
  generalReserveFund?: InputMaybe<Scalars['Float']>;
  grossProfit?: InputMaybe<Scalars['String']>;
  incomeTax?: InputMaybe<Scalars['Float']>;
  otherFunds?: InputMaybe<Array<InputMaybe<OtherFundDistribution>>>;
  patronageRefundFund?: InputMaybe<Scalars['Float']>;
  staffBonusFund?: InputMaybe<Scalars['Float']>;
};

export type FundManagementMutation = {
  new?: Maybe<FundManagementResult>;
};

export type FundManagementMutationNewArgs = {
  data?: InputMaybe<FundManagementInput>;
};

export type FundManagementQuery = {
  list?: Maybe<FundManagementConnection>;
  previousYear?: Maybe<Array<Maybe<PreviousYearFundDistribution>>>;
};

export type FundManagementQueryListArgs = {
  filter?: InputMaybe<FundManagementFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type FundManagementResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<FundManagementQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type GlStatementFilter = {
  amount?: InputMaybe<MinMaxFilter>;
  bank?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  natureOfTransactions?: InputMaybe<NatureOfBankTransaction>;
};

export type GenderLedgerReportResult = {
  data?: Maybe<Array<Maybe<GeneralLedgerReportEntry>>>;
  error?: Maybe<QueryError>;
};

export type GeneralBranchSettingsMutation = {
  add: BranchAddResult;
};

export type GeneralBranchSettingsMutationAddArgs = {
  data?: InputMaybe<BranchInput>;
  id: Scalars['ID'];
};

export type GeneralBranchSettingsQuery = {
  formState?: Maybe<BranchGetResult>;
  list?: Maybe<BranchConnection>;
  mine?: Maybe<Branch>;
};

export type GeneralBranchSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type GeneralBranchSettingsQueryListArgs = {
  filter?: InputMaybe<BranchSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type GeneralLedgerFilter = {
  ledgerId: Scalars['ID'];
  period: LocalizedDateFilter;
};

export type GeneralLedgerReportEntry = {
  account?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  credit?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  debit?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

export type GeneralMemberData = {
  charge?: Maybe<Array<Maybe<MemberChargeData>>>;
  memberCode?: Maybe<MemberCode>;
  memberType?: Maybe<MemberActiveData>;
  risk?: Maybe<MemberRiskData>;
};

export type GeneralMemberInput = {
  charge?: InputMaybe<Array<InputMaybe<MemberChargeInput>>>;
  memberCode?: InputMaybe<MemberCodeInput>;
  memberType?: InputMaybe<MemberActiveInput>;
  risk?: InputMaybe<MemberRiskInput>;
};

export type GeneralMemberResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<GeneralMemberData>;
  recordId: Scalars['ID'];
};

export type GeneralSettingsMutation = {
  KYM?: Maybe<KymMutation>;
  alternativeChannel?: Maybe<AlternativeChannelSettingsMutation>;
  branch?: Maybe<GeneralBranchSettingsMutation>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  codes?: Maybe<CodeManagementMutation>;
  deposit?: Maybe<DepositSettingsMutation>;
  depositProduct?: Maybe<DepositProductSettingsMutation>;
  loan?: Maybe<LoanSettingsMutation>;
  loanProducts?: Maybe<LoanProductsMutation>;
  organization?: Maybe<OrganizationSettingsMutation>;
  share?: Maybe<ShareSettingsMutation>;
  valuator?: Maybe<ValuatorSettingsMutation>;
};

export type GeneralSettingsQuery = {
  KYM?: Maybe<KymQuery>;
  alternativeChannel?: Maybe<AlternativeChannelSettingsQuery>;
  branch?: Maybe<GeneralBranchSettingsQuery>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  codes?: Maybe<CodeManagementQuery>;
  deposit?: Maybe<DepositSettingsQuery>;
  depositProduct?: Maybe<DepositProductSettingsQuery>;
  loan?: Maybe<LoanSettingsQuery>;
  loanProducts?: Maybe<LoanProductsQuery>;
  organization?: Maybe<OrganizationSettingsQuery>;
  share?: Maybe<ShareSettingsQuery>;
  valuator?: Maybe<ValuatorSettingsQuery>;
};

export type GlTransaction = {
  account: Scalars['String'];
  credit?: Maybe<Scalars['String']>;
  debit?: Maybe<Scalars['String']>;
  serviceCenter?: Maybe<Scalars['String']>;
};

export enum GlobalPageAppName {
  AccountingSystem = 'ACCOUNTING_SYSTEM',
  CoreBankingSystem = 'CORE_BANKING_SYSTEM',
  InventoryMgmt = 'INVENTORY_MGMT',
  Settings = 'SETTINGS',
}

export enum GlobalPageMenuName {
  Accounts = 'ACCOUNTS',
  Loan = 'LOAN',
  Member = 'MEMBER',
  Reports = 'REPORTS',
  Share = 'SHARE',
  Transactions = 'TRANSACTIONS',
}

export enum GlobalPagesIconType {
  Add = 'ADD',
  List = 'LIST',
  Profile = 'PROFILE',
  Reports = 'REPORTS',
  Settings = 'SETTINGS',
}

export type GlobalPagesResultNode = {
  appName?: Maybe<GlobalPageAppName>;
  fullCode?: Maybe<Scalars['String']>;
  hasParam?: Maybe<Scalars['Boolean']>;
  iconType?: Maybe<GlobalPagesIconType>;
  menuName?: Maybe<GlobalPageMenuName>;
  page?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export enum GracePeriod {
  Interest = 'INTEREST',
  Principal = 'PRINCIPAL',
}

export type GraphData = {
  amount?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['Int']>;
};

export type HumanizeAuditLog = {
  extraData?: Maybe<Array<Maybe<Scalars['String']>>>;
  narration?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};

export enum Id_Type {
  Account = 'ACCOUNT',
  Address = 'ADDRESS',
  Bank = 'BANK',
  Bankbranch = 'BANKBRANCH',
  Branch = 'BRANCH',
  Chartsofaccount = 'CHARTSOFACCOUNT',
  Customfield = 'CUSTOMFIELD',
  Declaration = 'DECLARATION',
  Depositiro = 'DEPOSITIRO',
  Depositproduct = 'DEPOSITPRODUCT',
  Depositproductcriteria = 'DEPOSITPRODUCTCRITERIA',
  Deposittds = 'DEPOSITTDS',
  Document = 'DOCUMENT',
  Documentreference = 'DOCUMENTREFERENCE',
  Dynamicentry = 'DYNAMICENTRY',
  Formfield = 'FORMFIELD',
  Formoption = 'FORMOPTION',
  Formsection = 'FORMSECTION',
  Kymaccountoperatordetails = 'KYMACCOUNTOPERATORDETAILS',
  Kymcoopaccountoperatordetails = 'KYMCOOPACCOUNTOPERATORDETAILS',
  Kymcoopdirectordetails = 'KYMCOOPDIRECTORDETAILS',
  Kymcooperative = 'KYMCOOPERATIVE',
  Kymcooperativeunion = 'KYMCOOPERATIVEUNION',
  Kymcooperativeunionpers = 'KYMCOOPERATIVEUNIONPERS',
  Kymdocument = 'KYMDOCUMENT',
  Kymfield = 'KYMFIELD',
  Kymfieldoption = 'KYMFIELDOPTION',
  Kymidentification = 'KYMIDENTIFICATION',
  Kymindividual = 'KYMINDIVIDUAL',
  Kymindividualfamilymembers = 'KYMINDIVIDUALFAMILYMEMBERS',
  Kymindividualincomesource = 'KYMINDIVIDUALINCOMESOURCE',
  Kymindividualoccupation = 'KYMINDIVIDUALOCCUPATION',
  Kyminstitutions = 'KYMINSTITUTIONS',
  Kymsisterconcerndetails = 'KYMSISTERCONCERNDETAILS',
  Loanproduct = 'LOANPRODUCT',
  Loanproductcriteria = 'LOANPRODUCTCRITERIA',
  Member = 'MEMBER',
  Myrauser = 'MYRAUSER',
  Myrauseridetification = 'MYRAUSERIDETIFICATION',
  Organization = 'ORGANIZATION',
  Productdocument = 'PRODUCTDOCUMENT',
  Sharebalance = 'SHAREBALANCE',
  Shareextracharges = 'SHAREEXTRACHARGES',
  Sharenumbers = 'SHARENUMBERS',
  Shareregister = 'SHAREREGISTER',
  User = 'USER',
  Userpreference = 'USERPREFERENCE',
}

export type Identity = {
  id: Scalars['ID'];
  name: Scalars['String'];
  userType: UserType;
  username: Scalars['String'];
};

export enum IdetificationType {
  Citizenship = 'CITIZENSHIP',
  DrivingLicense = 'DRIVING_LICENSE',
  NationalId = 'NATIONAL_ID',
  Passport = 'PASSPORT',
  VoterCard = 'VOTER_CARD',
}

export type InactivateMemberCheck = {
  isAccountClosed: Scalars['Boolean'];
  isShareReturned: Scalars['Boolean'];
};

export type IncompleteSection = {
  incomplete?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionName?: Maybe<Scalars['String']>;
};

export type IndFamilyMemberDetails = {
  dob?: Maybe<Scalars['Localized']>;
  fullName?: Maybe<Scalars['String']>;
  relationship?: Maybe<Scalars['String']>;
};

export type IndividualBasicMinInfo = {
  address?: Maybe<Scalars['Localized']>;
  addressId?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  familyMembers?: Maybe<Array<Maybe<FamilyMemberDetails>>>;
  fathersName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['Localized']>;
  genderId?: Maybe<Scalars['String']>;
  grandFathersName?: Maybe<Scalars['String']>;
  isStaff?: Maybe<Scalars['Boolean']>;
  maritalStatus?: Maybe<Scalars['Localized']>;
  maritalStatusId?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  mothersName?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
};

export type IndividualBio = {
  currentAddress?: Maybe<Scalars['Localized']>;
  dob?: Maybe<Scalars['Localized']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  familyMembers?: Maybe<Array<Maybe<IndFamilyMemberDetails>>>;
  gender?: Maybe<Scalars['Localized']>;
  maritalStatus?: Maybe<Scalars['Localized']>;
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  mobile?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['Localized']>;
  profilePic?: Maybe<Scalars['String']>;
};

export type IndividualMember = {
  cooperativeMembership?: Maybe<KymCoopMembershipDetails>;
  declaration?: Maybe<KymIndDeclarations>;
  personalInformation?: Maybe<KymIndPersonalInformation>;
  professionalInformation?: Maybe<KymIndProfessionalInformation>;
};

export enum IndividualRequiredDocument {
  Fingerprint = 'FINGERPRINT',
  Form = 'FORM',
  NomineeDocument = 'NOMINEE_DOCUMENT',
  Photo = 'PHOTO',
  Signature = 'SIGNATURE',
}

export type InsBankAcDetails = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['String']>;
};

export type InsContactDetails = {
  agmDetails?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  noOfEmployees?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
  poBoxNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type InsDeclaration = {
  address?: Maybe<Address>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type InsOperatorDetails = {
  contactNo?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  pemAddress?: Maybe<Address>;
  tempAddress?: Maybe<Address>;
};

export type InsOperatorInstructionDetails = {
  accountType?: Maybe<Scalars['String']>;
  specialInstruction?: Maybe<Scalars['String']>;
  stampCompulsory?: Maybe<Scalars['Boolean']>;
};

export type InsPartnerDirectorDetails = {
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permAddress?: Maybe<Address>;
  tempAddress?: Maybe<Address>;
};

export type InsRegistrationDetails = {
  address?: Maybe<Address>;
  issuingOffice?: Maybe<Scalars['String']>;
  registeredNumber?: Maybe<Scalars['String']>;
};

export type InsSisterConcernDetails = {
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type InsTransactionProfileDetails = {
  annualTurnover?: Maybe<Scalars['String']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['String']>;
  nature?: Maybe<Scalars['String']>;
};

export type Installment = {
  dueDate: Scalars['Localized'];
  fine?: Maybe<Scalars['String']>;
  monthName: Scalars['Localized'];
  number: Scalars['Int'];
  rebate?: Maybe<Scalars['String']>;
  status: InstallmentState;
};

export type InstallmentDetailsView = {
  installmentNo?: Maybe<Scalars['Int']>;
  interestAmount?: Maybe<Scalars['String']>;
  payment?: Maybe<Scalars['String']>;
  principalAmount?: Maybe<Scalars['String']>;
};

export enum InstallmentFrequency {
  Daily = 'DAILY',
  HalfYearly = 'HALF_YEARLY',
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY',
}

export type InstallmentResult = {
  data?: Maybe<Array<Maybe<Installment>>>;
  error?: Maybe<QueryError>;
};

export enum InstallmentState {
  Cancelled = 'CANCELLED',
  Overdue = 'OVERDUE',
  Paid = 'PAID',
  Pending = 'PENDING',
}

export type InstitutionAccountOperatoionsDetails = {
  accountOperatorsDetails?: Maybe<Array<Maybe<AccountOperatorDetailsType>>>;
  accountType?: Maybe<AccountOperationType>;
  companyStamp?: Maybe<Scalars['String']>;
  isCompanyStampCompulsory?: Maybe<Scalars['Boolean']>;
  specialInstruction?: Maybe<Scalars['String']>;
};

export type InstitutionBasicMinInfo = {
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  nature?: Maybe<Scalars['String']>;
  noOfServiceCenters?: Maybe<Scalars['Int']>;
  profilePic?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  type?: Maybe<Scalars['String']>;
  vatPanNo?: Maybe<Scalars['String']>;
};

export type InstitutionBio = {
  addressDetails?: Maybe<Address>;
  bankAcDetails?: Maybe<InsBankAcDetails>;
  basicInfo?: Maybe<InstitutionBasicMinInfo>;
  contactDetails?: Maybe<InsContactDetails>;
  declaration?: Maybe<InsDeclaration>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  operatingOfficeAddress?: Maybe<Address>;
  operatorDetails?: Maybe<Array<Maybe<InsOperatorDetails>>>;
  operatorInstructionDetails?: Maybe<InsOperatorInstructionDetails>;
  partnerDirectorDetails?: Maybe<Array<Maybe<InsPartnerDirectorDetails>>>;
  registrationDetails?: Maybe<InsRegistrationDetails>;
  serviceCenterOfficeAddress?: Maybe<Address>;
  sisterConcernDetails?: Maybe<Array<Maybe<InsSisterConcernDetails>>>;
  transactionProfileDetails?: Maybe<InsTransactionProfileDetails>;
};

export type InstitutionDeclaration = {
  accountHolderAddress?: Maybe<KymAddress>;
  accountHolderEmail?: Maybe<Scalars['String']>;
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderPhone?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  institutionDocuments?: Maybe<Array<Maybe<KymInstitutionDocumentsType>>>;
};

export enum InstitutionExpectedMonthlyTransaction {
  Above_25Lakhs = 'ABOVE_25_LAKHS',
  LessThan_10Lakhs = 'LESS_THAN_10_LAKHS',
  LessThan_25Lakhs = 'LESS_THAN_25_LAKHS',
}

export type InstitutionMember = {
  accoountOperationsDetails?: Maybe<InstitutionAccountOperatoionsDetails>;
  declaration?: Maybe<InstitutionDeclaration>;
  organizationInformation?: Maybe<InstitutionOrganizationInformation>;
  proprietorAndDirectorDetails?: Maybe<InstitutionProprietorAndDirectorDetails>;
  transactionProfile?: Maybe<InstitutionTransactionProfile>;
};

export type InstitutionOrganizationInformation = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<KymAddress>;
  dateOfLastAGM?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionTypeId?: Maybe<Scalars['String']>;
  issuingOffice?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  sisterConcernDetails?: Maybe<Array<Maybe<SisterConcernDetailsType>>>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type InstitutionProprietorAndDirectorDetails = {
  detailsOfDirectors?: Maybe<Array<Maybe<DirectorDetailsType>>>;
  detailsOfDirectorsWithAffiliation?: Maybe<Array<Maybe<AffiliatedDirectorDetailsType>>>;
};

export enum InstitutionRequiredDocument {
  Decision = 'DECISION',
  Registered = 'REGISTERED',
  Signature = 'SIGNATURE',
  TaxClearance = 'TAX_CLEARANCE',
}

export type InstitutionTransactionProfile = {
  annualTurnover?: Maybe<Scalars['Float']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
};

export type Insurance = {
  amount?: Maybe<Scalars['Amount']>;
  rate?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['String']>;
};

export type InsuranceType = {
  amount?: InputMaybe<Scalars['Amount']>;
  rate?: InputMaybe<Scalars['Float']>;
  type?: InputMaybe<Scalars['String']>;
};

export enum InterestAuthority {
  Board = 'BOARD',
  Ceo = 'CEO',
}

export type InterestFormState = {
  additionalRate?: Maybe<Scalars['Float']>;
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  defaultRate?: Maybe<Scalars['Float']>;
  interestMethod?: Maybe<InterestMethod>;
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export enum InterestMethod {
  Diminishing = 'DIMINISHING',
  Flat = 'FLAT',
}

export type InterestPostingReportData = {
  accountNo?: Maybe<Scalars['String']>;
  accountType?: Maybe<NatureOfDepositProduct>;
  address?: Maybe<Address>;
  currentInterestRate?: Maybe<Scalars['Float']>;
  entries?: Maybe<Array<Maybe<InterestPostingReportEntry>>>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
};

export type InterestPostingReportEntry = {
  amount?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  days?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['Float']>;
  remarks?: Maybe<Scalars['String']>;
};

export type InterestPostingReportResult = {
  data?: Maybe<InterestPostingReportData>;
  error?: Maybe<QueryError>;
};

export type InterestRate = {
  additionalRate?: InputMaybe<Scalars['Float']>;
  boardAuthority?: InputMaybe<Scalars['Float']>;
  ceoAuthority?: InputMaybe<Scalars['Float']>;
  defaultRate?: InputMaybe<Scalars['Float']>;
  interestMethod?: InputMaybe<InterestMethod>;
  maxRate?: InputMaybe<Scalars['Float']>;
  minRate?: InputMaybe<Scalars['Float']>;
};

export type InterestRateType = {
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  defaultRate: Scalars['Float'];
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export type InterestStatementFilter = {
  accountId: Scalars['ID'];
  filter?: InputMaybe<InterestStatementRangeFilter>;
  period: LocalizedDateFilter;
};

export type InterestStatementRangeFilter = {
  interestAmount?: InputMaybe<MinMaxFilter>;
};

export type InterestTaxFilter = {
  interestAmount?: InputMaybe<MinMaxFilter>;
  savingBalance?: InputMaybe<MinMaxFilter>;
  taxAmount?: InputMaybe<MinMaxFilter>;
};

export type InterestTaxReportEntry = {
  accountNo?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  closingBalance?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  interest?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  panNo?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  savingBalance?: Maybe<Scalars['String']>;
  tax?: Maybe<Scalars['String']>;
};

export type InterestTaxReportFilter = {
  filter?: InputMaybe<InterestTaxFilter>;
  period: LocalizedDateFilter;
};

export type InterestTaxReportResult = {
  data?: Maybe<Array<Maybe<InterestTaxReportEntry>>>;
  error?: Maybe<QueryError>;
};

export type InvItems = {
  id: Scalars['ID'];
  itemCode: Scalars['String'];
  itemQuantity: Scalars['Float'];
  name: Scalars['String'];
  type: Scalars['String'];
  unitPrice: Scalars['Float'];
};

export type InvItemsAddResult = {
  error?: Maybe<InvItemsError>;
  query?: Maybe<InvItemsQuery>;
  record?: Maybe<InvItems>;
  recordId: Scalars['ID'];
};

export type InvItemsConnection = {
  edges: Array<Maybe<InvItemsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvItemsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsEdge = {
  cursor: Scalars['Cursor'];
  node: InvItems;
};

export type InvItemsError = InvItemsInvalidDataError;

export type InvItemsGroup = {
  description: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupAddResult = {
  error?: Maybe<InvItemsGroupError>;
  query?: Maybe<InvItemsGroupQuery>;
  record?: Maybe<InvItemsGroup>;
  recordId: Scalars['ID'];
};

export type InvItemsGroupConnection = {
  edges: Array<Maybe<InvItemsGroupEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvItemsGroupDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsGroupEdge = {
  cursor: Scalars['Cursor'];
  node: InvItemsGroup;
};

export type InvItemsGroupError = InvItemsGroupInvalidDataError;

export type InvItemsGroupInput = {
  description: Scalars['String'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvItemsGroupMutation = {
  add: InvItemsGroupAddResult;
};

export type InvItemsGroupMutationAddArgs = {
  data: InvItemsGroupInput;
};

export type InvItemsGroupQuery = {
  get: InvItemsGroup;
  list?: Maybe<InvItemsGroupConnection>;
};

export type InvItemsGroupQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvItemsGroupQueryListArgs = {
  filter?: InputMaybe<InvItemsGroupDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvItemsInput = {
  itemCode: Scalars['String'];
  itemGroup: Scalars['String'];
  itemQuantity: Scalars['Float'];
  name: Scalars['String'];
  primaryUnit: Scalars['String'];
  tax: Scalars['String'];
  type: Scalars['String'];
  unitPrice: Scalars['Float'];
};

export type InvItemsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvItemsMutation = {
  add: InvItemsAddResult;
};

export type InvItemsMutationAddArgs = {
  data: InvItemsInput;
};

export type InvItemsQuery = {
  get: InvItems;
  getNewItemCode: Scalars['String'];
  list?: Maybe<InvItemsConnection>;
};

export type InvItemsQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvItemsQueryGetNewItemCodeArgs = {
  type?: InputMaybe<Scalars['String']>;
};

export type InvItemsQueryListArgs = {
  filter?: InputMaybe<InvItemsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvUnitOfMeasure = {
  acceptFraction: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureAddResult = {
  error?: Maybe<InvUnitOfMeasureError>;
  query?: Maybe<InvUnitOfMeasureQuery>;
  record?: Maybe<InvUnitOfMeasure>;
  recordId: Scalars['ID'];
};

export type InvUnitOfMeasureConnection = {
  edges: Array<Maybe<InvUnitOfMeasureEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvUnitOfMeasureDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvUnitOfMeasureEdge = {
  cursor: Scalars['Cursor'];
  node: InvUnitOfMeasure;
};

export type InvUnitOfMeasureError = InvUnitOfMeasureInvalidDataError;

export type InvUnitOfMeasureInput = {
  acceptFraction: Scalars['Boolean'];
  description: Scalars['String'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvUnitOfMeasureMutation = {
  add: InvUnitOfMeasureAddResult;
};

export type InvUnitOfMeasureMutationAddArgs = {
  data: InvUnitOfMeasureInput;
};

export type InvUnitOfMeasureQuery = {
  get: InvUnitOfMeasure;
  list?: Maybe<InvUnitOfMeasureConnection>;
};

export type InvUnitOfMeasureQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvUnitOfMeasureQueryListArgs = {
  filter?: InputMaybe<InvUnitOfMeasureDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvVendors = {
  email: Scalars['String'];
  id: Scalars['ID'];
  location: Scalars['String'];
  name: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type InvVendorsAddResult = {
  error?: Maybe<InvVendorsError>;
  query?: Maybe<InvVendorsQuery>;
  record?: Maybe<InvVendors>;
  recordId: Scalars['ID'];
};

export type InvVendorsConnection = {
  edges: Array<Maybe<InvVendorsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvVendorsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvVendorsEdge = {
  cursor: Scalars['Cursor'];
  node: InvVendors;
};

export type InvVendorsError = InvVendorsInvalidDataError;

export type InvVendorsInput = {
  contactName: Scalars['String'];
  contactPhoneNo: Scalars['String'];
  creditLimit?: InputMaybe<Scalars['Float']>;
  creditTerms?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  location: Scalars['String'];
  name: Scalars['String'];
  openingBalance?: InputMaybe<Scalars['Float']>;
  panNo: Scalars['String'];
  phoneNumber: Scalars['String'];
  vendorCode: Scalars['String'];
};

export type InvVendorsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvVendorsMutation = {
  add: InvVendorsAddResult;
};

export type InvVendorsMutationAddArgs = {
  data: InvVendorsInput;
};

export type InvVendorsQuery = {
  get: InvVendors;
  list?: Maybe<InvVendorsConnection>;
};

export type InvVendorsQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvVendorsQueryListArgs = {
  filter?: InputMaybe<InvVendorsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InventoryMutation = {
  items?: Maybe<InvItemsMutation>;
  itemsGroup?: Maybe<InvItemsGroupMutation>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureMutation>;
  vendors?: Maybe<InvVendorsMutation>;
};

export type InventoryQuery = {
  items?: Maybe<InvItemsQuery>;
  itemsGroup?: Maybe<InvItemsGroupQuery>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureQuery>;
  vendors?: Maybe<InvVendorsQuery>;
};

export type InvestmentAccount = {
  address: KymAddress;
  name: Scalars['String'];
  type: InvestmentType;
};

export type InvestmentAccountEntry = {
  address?: Maybe<Address>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  type?: Maybe<InvestmentType>;
};

export type InvestmentAccountFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<InvestmentType>;
};

export type InvestmentAccountInput = {
  address: KymAddressInput;
  name: Scalars['String'];
  type: InvestmentType;
};

export type InvestmentAccountListConnection = {
  edges?: Maybe<Array<Maybe<InvestmentAccountListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvestmentAccountListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<InvestmentAccountEntry>;
};

export type InvestmentEntry = {
  accountID: Scalars['String'];
  fd?: Maybe<FdInvestment>;
  investmentType?: Maybe<InvestmentType>;
  saving?: Maybe<SavingInvestment>;
  share?: Maybe<ShareInvestment>;
};

export type InvestmentEntryEntry = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  type?: Maybe<InvestmentType>;
};

export type InvestmentEntryFilter = {
  accountId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<InvestmentType>;
};

export type InvestmentEntryInput = {
  accountID: Scalars['String'];
  fd?: InputMaybe<FdInvestmentInput>;
  investmentType?: InputMaybe<InvestmentType>;
  saving?: InputMaybe<SavingInvestmentInput>;
  share?: InputMaybe<ShareInvestmentInput>;
};

export type InvestmentEntryListConnection = {
  edges?: Maybe<Array<Maybe<InvestmentEntryListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvestmentEntryListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<InvestmentEntryEntry>;
};

export type InvestmentTransactionEntry = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  type?: Maybe<InvestmentType>;
};

export type InvestmentTransactionFilter = {
  accountId?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<InvestmentType>;
};

export type InvestmentTransactionInput = {
  entryID: Scalars['ID'];
  fd?: InputMaybe<FdInvestmentTransactionInput>;
  investmentType?: InputMaybe<InvestmentType>;
  saving?: InputMaybe<SavingInvestmentTransactionInput>;
  share?: InputMaybe<ShareInvestmentTransactionInput>;
};

export type InvestmentTransactionListConnection = {
  edges?: Maybe<Array<Maybe<InvestmentTransactionListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvestmentTransactionListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<InvestmentTransactionEntry>;
};

export enum InvestmentTransactionMethod {
  Cash = 'CASH',
  Cheque = 'CHEQUE',
}

export enum InvestmentType {
  FixedDeposit = 'FIXED_DEPOSIT',
  Saving = 'SAVING',
  Share = 'SHARE',
}

export type JournalChartsOfAccount = {
  journalCode: Scalars['String'];
};

export type JournalVoucher = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
};

export type JournalVoucherConnection = {
  edges?: Maybe<Array<Maybe<JournalVoucherEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type JournalVoucherDetail = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id?: Maybe<Scalars['ID']>;
  note?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
};

export type JournalVoucherDetailResult = {
  data?: Maybe<JournalVoucherDetail>;
  error?: Maybe<QueryError>;
};

export type JournalVoucherEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<JournalVoucher>;
};

export type JournalVoucherEntry = {
  accountId: Scalars['String'];
  crAmount?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  drAmount?: InputMaybe<Scalars['String']>;
};

export type JournalVoucherFilter = {
  id?: InputMaybe<Scalars['String']>;
};

export type JournalVoucherInput = {
  chequeNo?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['Localized']>;
  entries?: InputMaybe<Array<InputMaybe<JournalVoucherEntry>>>;
  notes?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<JournalVoucherPaymentMode>;
  reference?: InputMaybe<Scalars['String']>;
};

export type JournalVoucherMutation = {
  new?: Maybe<JournalVoucherResult>;
};

export type JournalVoucherMutationNewArgs = {
  data?: InputMaybe<JournalVoucherInput>;
};

export enum JournalVoucherPaymentMode {
  Cash = 'CASH',
  Cheque = 'CHEQUE',
}

export type JournalVoucherQuery = {
  list?: Maybe<JournalVoucherConnection>;
  viewJournalVoucherDetail?: Maybe<JournalVoucherDetailResult>;
};

export type JournalVoucherQueryListArgs = {
  filter?: InputMaybe<JournalVoucherFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type JournalVoucherQueryViewJournalVoucherDetailArgs = {
  entryId: Scalars['ID'];
};

export type JournalVoucherResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<JournalVoucherQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type KymAddress = {
  coordinates?: Maybe<Coordinate>;
  districtId?: Maybe<Scalars['Int']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['Localized']>;
  provinceId?: Maybe<Scalars['Int']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type KymAddressInput = {
  coordinates?: InputMaybe<CoordinateInput>;
  districtId?: InputMaybe<Scalars['Int']>;
  houseNo?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type KymDeclaration = Base & {
  content: Scalars['Localized'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  for: DeclarationFor;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type KymDynamicEntry = {
  fieldId: Scalars['String'];
  id: Scalars['ID'];
  value: Scalars['Localized'];
};

export type KymDynamicEntryFilter = {
  fieldName?: InputMaybe<Scalars['String']>;
  foreignId: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  sectionId?: InputMaybe<Scalars['String']>;
};

export type KymDynamicEntryResult = {
  data?: Maybe<Array<Maybe<KymDynamicEntry>>>;
  error?: Maybe<QueryError>;
};

export type KymEntryInput = {
  fieldId: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  parentSectionId: Scalars['String'];
  value: Scalars['Localized'];
};

export type KymEntryMutation = {
  upsertDynamic: KymEntryMutationResult;
};

export type KymEntryMutationUpsertDynamicArgs = {
  data: KymEntryInput;
};

export type KymEntryMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymEntryQuery>;
  record?: Maybe<KymDynamicEntry>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymEntryQuery = {
  getDynamic?: Maybe<KymDynamicEntryResult>;
};

export type KymEntryQueryGetDynamicArgs = {
  filter: KymDynamicEntryFilter;
};

export type KymFieldData = {
  id?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
};

export type KymFieldInputData = {
  id?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
};

export type KymGeneralSettingsMutation = {
  generalMember?: Maybe<GeneralMemberResult>;
};

export type KymGeneralSettingsMutationGeneralMemberArgs = {
  data: GeneralMemberInput;
};

export type KymGeneralSettingsQuery = {
  generalMember?: Maybe<GeneralMemberResult>;
};

export type KymIndBasicInformation = {
  age?: Maybe<Scalars['Int']>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  educationQualificationId?: Maybe<Scalars['String']>;
  ethnicityId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['Localized']>;
  gender?: Maybe<Scalars['Localized']>;
  genderId?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['Localized']>;
  middleName?: Maybe<Scalars['Localized']>;
  nationalityId?: Maybe<Scalars['String']>;
  religionId?: Maybe<Scalars['String']>;
};

export type KymIndContactDetails = {
  email?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

export type KymIndDeclaration = {
  beneficialFullName?: Maybe<Scalars['Localized']>;
  beneficialRelationshipId?: Maybe<Scalars['String']>;
  convictedDetails?: Maybe<Scalars['String']>;
  declarationAgreement?: Maybe<Scalars['Boolean']>;
  foreignResidentialPermitTypeId?: Maybe<Scalars['String']>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  politicallyExposedDetails?: Maybe<Scalars['String']>;
};

export type KymIndEstimatedTransactions = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['String']>;
};

export type KymIndFamilyMember = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  familyMemberId?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['Localized']>;
  id: Scalars['String'];
  relationshipId?: Maybe<Scalars['String']>;
};

export type KymIndFamilyMemberInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  dateOfBirth?: InputMaybe<Scalars['Localized']>;
  familyMemberId?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  relationshipId?: InputMaybe<Scalars['String']>;
};

export type KymIndFamilyMemberMutation = {
  delete: KymIndFamilyMemberResult;
  upsert: KymIndFamilyMemberResult;
};

export type KymIndFamilyMemberMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndFamilyMemberMutationUpsertArgs = {
  data: KymIndFamilyMemberInput;
};

export type KymIndFamilyMemberQueryResult = {
  data?: Maybe<Array<Maybe<KymIndFamilyMember>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndFamilyMemberResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndFamilyMember>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndForeignEmployment = {
  foreignEmpCountryId?: Maybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: Maybe<Scalars['String']>;
  isForeignEmployment?: Maybe<Scalars['Boolean']>;
  typeOfVisaId?: Maybe<Scalars['String']>;
};

export type KymIndIdentification = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['String'];
  idNo?: Maybe<Scalars['String']>;
  idType: Scalars['String'];
  place?: Maybe<Scalars['Localized']>;
};

export type KymIndIdentificationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  date?: InputMaybe<Scalars['Localized']>;
  id: Scalars['String'];
  idNo?: InputMaybe<Scalars['String']>;
  idType: Scalars['String'];
  place?: InputMaybe<Scalars['String']>;
};

export type KymIndIdentificationMutation = {
  delete: KymIndIdentificationResult;
  upsert: KymIndIdentificationResult;
};

export type KymIndIdentificationMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndIdentificationMutationUpsertArgs = {
  data: KymIndIdentificationInput;
};

export type KymIndIdentificationQueryResult = {
  data?: Maybe<Array<Maybe<KymIndIdentification>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndIdentificationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndIdentification>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndIncomeSource = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  amount?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  incomeSource?: Maybe<Scalars['Localized']>;
};

export type KymIndIncomeSourceInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  incomeSource?: InputMaybe<Scalars['String']>;
};

export type KymIndIncomeSourceMutation = {
  delete: KymIndIncomeSourceResult;
  upsert: KymIndIncomeSourceResult;
};

export type KymIndIncomeSourceMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndIncomeSourceMutationUpsertArgs = {
  data: KymIndIncomeSourceInput;
};

export type KymIndIncomeSourceQueryResult = {
  data?: Maybe<Array<Maybe<KymIndIncomeSource>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndIncomeSourceResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndIncomeSource>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndInitialTransactionDetails = {
  initialLoan?: Maybe<Scalars['String']>;
  initialSaving?: Maybe<Scalars['String']>;
  initialShare?: Maybe<Scalars['Int']>;
  otherFinancialAmount?: Maybe<Scalars['String']>;
};

export type KymIndIntroducers = {
  firstIntroducerId?: Maybe<Scalars['String']>;
  secondIntroducerId?: Maybe<Scalars['String']>;
};

export type KymIndMembershipDetails = {
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  otherCoopBranchId?: Maybe<Scalars['String']>;
  otherCoopMemberId?: Maybe<Scalars['String']>;
  otherCoopName?: Maybe<Scalars['Localized']>;
  purposeId?: Maybe<Scalars['String']>;
};

export type KymIndOccupation = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  address?: Maybe<Scalars['Localized']>;
  contact?: Maybe<Scalars['String']>;
  establishedDate?: Maybe<Scalars['Localized']>;
  estimatedAnnualIncome?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  isOwner?: Maybe<Scalars['Boolean']>;
  occupationId?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['Localized']>;
  panVatNo?: Maybe<Scalars['String']>;
  registrationNo?: Maybe<Scalars['String']>;
};

export type KymIndOccupationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['Localized']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  isOwner?: InputMaybe<Scalars['Boolean']>;
  occupationId?: InputMaybe<Scalars['String']>;
  orgName?: InputMaybe<Scalars['String']>;
  panVatNo?: InputMaybe<Scalars['String']>;
  registrationNo?: InputMaybe<Scalars['String']>;
};

export type KymIndOccupationMutation = {
  delete: KymIndOccupationResult;
  upsert: KymIndOccupationResult;
};

export type KymIndOccupationMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndOccupationMutationUpsertArgs = {
  data: KymIndOccupationInput;
  isSpouse: Scalars['Boolean'];
};

export type KymIndOccupationQueryResult = {
  data?: Maybe<Array<Maybe<KymIndOccupation>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndOccupationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndOccupation>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndProfession = {
  otherProfession?: Maybe<Scalars['String']>;
  professionId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type KymIndRentedHouse = {
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['Localized']>;
};

export type KymIndTemporaryAddress = {
  address?: Maybe<KymAddress>;
  sameTempAsPermanentAddress?: Maybe<Scalars['Boolean']>;
};

export type KymMutation = {
  general?: Maybe<KymGeneralSettingsMutation>;
};

export type KymQuery = {
  general?: Maybe<KymGeneralSettingsQuery>;
};

export type KymAdditionalFields = {
  fieldId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type KymAdditionalFieldsFormState = {
  fieldId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Localized']>;
};

export type KymAdditionalFieldsType = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type KymCoopAccountOperatorDetails = {
  Delete?: Maybe<KymCooperativeAddResult>;
  Upsert?: Maybe<KymCooperativeAddResult>;
};

export type KymCoopAccountOperatorDetailsDeleteArgs = {
  accOperatorId: Scalars['ID'];
};

export type KymCoopAccountOperatorDetailsUpsertArgs = {
  accOperatorId: Scalars['ID'];
  data: KymCoopAccountOperatorDetailsFormInput;
};

export type KymCoopAccountOperatorDetailsFormInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  coopRelatedTraining?: InputMaybe<Array<InputMaybe<CoopRelatedTraining>>>;
  cooperativeId?: InputMaybe<Scalars['ID']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymCoopAccountOperatorQuery = {
  data?: Maybe<Array<Maybe<KymCooperativeAccountOperatorDetailsFormState>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymCoopDirectorDetails = {
  Delete?: Maybe<KymCooperativeAddResult>;
  Upsert?: Maybe<KymCooperativeAddResult>;
};

export type KymCoopDirectorDetailsDeleteArgs = {
  dirId: Scalars['ID'];
};

export type KymCoopDirectorDetailsUpsertArgs = {
  data: KymCoopDirectorDetailsFormInput;
  dirId: Scalars['ID'];
};

export type KymCoopDirectorDetailsFormInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  cooperativeId?: InputMaybe<Scalars['ID']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymCoopDirectorQuery = {
  data?: Maybe<Array<Maybe<KymCooperativeBodDetailsFormState>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymCoopMembershipDetails = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['ID']>;
  familyMemberInThisCooperative?: Maybe<Array<Maybe<KymFamilyMemberDetailsInThisCooperativeType>>>;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  loan?: Maybe<Scalars['Float']>;
  memberIdentityLevel?: Maybe<MemberIdentityLevel>;
  other?: Maybe<Scalars['Float']>;
  purposeId?: Maybe<Scalars['ID']>;
  savings?: Maybe<Scalars['Float']>;
  share?: Maybe<Scalars['Int']>;
};

export type KymCoopUnionAccountOperatorDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type KymCoopUnionAccountOperatorLus = {
  name: KymCoopUnionAccountOperatorSection;
};

export enum KymCoopUnionAccountOperatorSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
}

export type KymCoopUnionAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorSection>>>;
};

export type KymCoopUnionAddError = KymCoopUnionAddInvalidDataError;

export type KymCoopUnionAddFormStatus = {
  formData?: Maybe<CooperativeUnionMember>;
  lastUpdated?: Maybe<KymCoopUnionAddLus>;
  sectionStatus?: Maybe<KymCoopUnionAddSectionStatus>;
};

export type KymCoopUnionAddInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymCoopUnionAddLus =
  | KymCoopUnionAccountOperatorLus
  | KymCoopUnionBodlus
  | KymCoopUnionCentralRepresentativeLus
  | KymCoopUnionDeclarationLus
  | KymCoopUnionEconomicDetailsLus
  | KymCoopUnionInstitutionInformationLus;

export type KymCoopUnionAddSectionStatus = {
  accountOperatorDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  bodDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  centralRepresentativeDetails?: Maybe<KymFormStatus>;
  declaration?: Maybe<KymFormStatus>;
  economicDetails?: Maybe<KymFormStatus>;
  institutionInformation?: Maybe<KymFormStatus>;
};

export type KymCoopUnionBodDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isCentralRepresentative?: Maybe<Scalars['Boolean']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type KymCoopUnionBodlus = {
  name: KymCoopUnionBodSection;
};

export enum KymCoopUnionBodSection {
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
}

export type KymCoopUnionBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionBodSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionBodSection>>>;
};

export type KymCoopUnionCentralRepresentativeLus = {
  name: KymCoopUnionCentralRepresentativeSection;
};

export enum KymCoopUnionCentralRepresentativeSection {
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
}

export type KymCoopUnionCentralRepresentativeStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionCentralRepresentativeSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionCentralRepresentativeSection>>>;
};

export type KymCoopUnionDeclarationLus = {
  name: KymCoopUnionDeclarationSection;
};

export enum KymCoopUnionDeclarationSection {
  DocumentsDeclaration = 'DOCUMENTS_DECLARATION',
}

export type KymCoopUnionDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionDeclarationSection>>>;
};

export type KymCoopUnionDeletion = {
  recordId: Scalars['ID'];
};

export type KymCoopUnionDocuments = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionDocumentsInput = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionEconomicDetailsLus = {
  name: KymCoopUnionEconomicDetailsSection;
};

export enum KymCoopUnionEconomicDetailsSection {
  Assets = 'ASSETS',
  EquityAndLiabilities = 'EQUITY_AND_LIABILITIES',
  ExpenseDetails = 'EXPENSE_DETAILS',
  IncomeDetails = 'INCOME_DETAILS',
}

export type KymCoopUnionEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionEconomicDetailsSection>>>;
};

export type KymCoopUnionFormStateQuery = {
  data?: Maybe<KymCoopUnionAddFormStatus>;
};

export type KymCoopUnionInstitutionInformationLus = {
  name: KymCoopUnionInstitutionInformationSection;
};

export enum KymCoopUnionInstitutionInformationSection {
  Applicant = 'APPLICANT',
  BankDetails = 'BANK_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  CooperativeMemberInformation = 'COOPERATIVE_MEMBER_INFORMATION',
  RegisteredDetails = 'REGISTERED_DETAILS',
}

export type KymCoopUnionInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionInstitutionInformationSection>>>;
};

export type KymCoopUnionMutation = {
  add?: Maybe<KymCoopUnionSectionMutation>;
  delete?: Maybe<KymCoopUnionDeletion>;
  deletePersonnel?: Maybe<KymCoopUnionDeletion>;
};

export type KymCoopUnionMutationAddArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionMutationDeletePersonnelArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionQuery = {
  formState?: Maybe<KymCoopUnionAddFormStatus>;
};

export type KymCoopUnionQueryFormStateArgs = {
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
};

export type KymCoopUnionSectionMutation = {
  declaration?: Maybe<CoopUnionDeclarationResult>;
  economicDetails?: Maybe<CoopUnionEconomicDetailsResult>;
  institutionInformation?: Maybe<CoopUnionInstitutionInformationResult>;
  personnelDetails?: Maybe<CoopUnionPersonnelDetailsResult>;
};

export type KymCoopUnionSectionMutationDeclarationArgs = {
  data?: InputMaybe<CoopUnionDeclarationInput>;
};

export type KymCoopUnionSectionMutationEconomicDetailsArgs = {
  data?: InputMaybe<CoopUnionEconomicDetailsInput>;
};

export type KymCoopUnionSectionMutationInstitutionInformationArgs = {
  data?: InputMaybe<CoopUnionInstitutionInformationInput>;
};

export type KymCoopUnionSectionMutationPersonnelDetailsArgs = {
  data?: InputMaybe<CoopUnionPersonnelInput>;
  recordId?: InputMaybe<Scalars['String']>;
  sectionType: CooperativeUnionPersonnelSection;
};

export type KymCooperativeAccountOperatorDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  coopRelatedTraining?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type KymCooperativeAccountOperatorDetailsInput = {
  citizenshipNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  dateofTrainig?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeAccountOperatorLus = {
  name: KymCooperativeAccountOperatorSection;
};

export enum KymCooperativeAccountOperatorSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
}

export type KymCooperativeAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
};

export type KymCooperativeAddFormStatus = {
  formData?: Maybe<KymCooperativeFormData>;
  lastUpdated?: Maybe<KymCooperativeAddLus>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymCooperativeAddLus =
  | KymCooperativeAccountOperatorLus
  | KymCooperativeBodlus
  | KymCooperativeDeclarationLus
  | KymCooperativeEconomicDetailsLus
  | KymCooperativeInstitutionInformationLus;

export type KymCooperativeAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymCooperativeQuery>;
  record?: Maybe<KymCooperativeGetResult>;
  recordId: Scalars['ID'];
};

export type KymCooperativeAddSectionStatus = {
  accountOperatorDetails?: Maybe<KymFormStatus>;
  bodDetails?: Maybe<KymFormStatus>;
  declaration?: Maybe<KymFormStatus>;
  economicDetails?: Maybe<KymFormStatus>;
  institutionInformation?: Maybe<KymFormStatus>;
};

export type KymCooperativeBodDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type KymCooperativeBodDetailsInput = {
  citizenshipNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
};

export type KymCooperativeBodlus = {
  name: KymCooperativeBodSection;
};

export enum KymCooperativeBodSection {
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
}

export type KymCooperativeBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
};

export type KymCooperativeDeclarationLus = {
  name: KymCooperativeDeclarationSection;
};

export enum KymCooperativeDeclarationSection {
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  DocumentDeclaration = 'DOCUMENT_DECLARATION',
}

export type KymCooperativeDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
};

export type KymCooperativeDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeDocumentsInput = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeEconomicDetailsLus = {
  name: KymCooperativeEconomicDetailsSection;
};

export enum KymCooperativeEconomicDetailsSection {
  Assets = 'ASSETS',
  EquityAndLiabilities = 'EQUITY_AND_LIABILITIES',
}

export type KymCooperativeEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
};

export type KymCooperativeFormData = {
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountHoldersName?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['Float']>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeTypeId?: Maybe<Scalars['String']>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  email?: Maybe<Scalars['String']>;
  hasTCAccepted?: Maybe<Scalars['Boolean']>;
  investments?: Maybe<Scalars['Float']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  lastAgmDate?: Maybe<Scalars['Localized']>;
  lastAuditDate?: Maybe<Scalars['Localized']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  operatingAddress?: Maybe<KymAddress>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  permanentRepresentativeAddress?: Maybe<KymAddress>;
  regdDate?: Maybe<Scalars['Localized']>;
  regdNumber?: Maybe<Scalars['Int']>;
  regdOffice?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  representativeContactNumber?: Maybe<Scalars['String']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeEmail?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  representativePanNo?: Maybe<Scalars['String']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
  temporaryRepresentativeAddress?: Maybe<KymAddress>;
  totalAssets?: Maybe<Scalars['Float']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  totalEquityAndLiabilities?: Maybe<Scalars['Float']>;
  website?: Maybe<Scalars['String']>;
};

export type KymCooperativeFormInput = {
  accountHoldersName?: InputMaybe<Scalars['String']>;
  bank?: InputMaybe<Scalars['Float']>;
  capitalGrant?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalent?: InputMaybe<Scalars['Float']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  cooperativeTypeId?: InputMaybe<Scalars['String']>;
  currentLiabilities?: InputMaybe<Scalars['Float']>;
  email?: InputMaybe<Scalars['String']>;
  hasTCAccepted?: InputMaybe<Scalars['Boolean']>;
  investments?: InputMaybe<Scalars['Float']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  lastAgmDate?: InputMaybe<Scalars['Localized']>;
  lastAuditDate?: InputMaybe<Scalars['Localized']>;
  loan?: InputMaybe<Scalars['Float']>;
  loanAccount?: InputMaybe<Scalars['Float']>;
  mainServiceProduct?: InputMaybe<Scalars['String']>;
  nameOfOrganization?: InputMaybe<Scalars['String']>;
  noOfFemaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMembers?: InputMaybe<Scalars['Int']>;
  noOfMaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfMaleMembers?: InputMaybe<Scalars['Int']>;
  noOfOtherMembers?: InputMaybe<Scalars['Int']>;
  nonCurrentAssets?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilities?: InputMaybe<Scalars['Float']>;
  operatingAddress?: InputMaybe<KymAddressInput>;
  otherNonCurrentAssets?: InputMaybe<Scalars['Float']>;
  permanentRepresentativeAddress?: InputMaybe<KymAddressInput>;
  regdDate?: InputMaybe<Scalars['Localized']>;
  regdNumber?: InputMaybe<Scalars['Int']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<KymAddressInput>;
  representativeContactNumber?: InputMaybe<Scalars['String']>;
  representativeDesignatiton?: InputMaybe<Scalars['String']>;
  representativeEmail?: InputMaybe<Scalars['String']>;
  representativeFullName?: InputMaybe<Scalars['String']>;
  representativePanNo?: InputMaybe<Scalars['String']>;
  reserveAndSurplus?: InputMaybe<Scalars['Float']>;
  savingDeposit?: InputMaybe<Scalars['Float']>;
  shareCapital?: InputMaybe<Scalars['Float']>;
  temporaryRepresentativeAddress?: InputMaybe<KymAddressInput>;
  totalAssets?: InputMaybe<Scalars['Float']>;
  totalEmployee?: InputMaybe<Scalars['Int']>;
  totalEquityLiabilities?: InputMaybe<Scalars['Float']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeFormStateQuery = {
  data?: Maybe<KymCooperativeAddFormStatus>;
  error?: Maybe<QueryError>;
};

export type KymCooperativeGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymCooperativeAddFormStatus>;
};

export type KymCooperativeInstitutionInformationLus = {
  name: KymCooperativeInstitutionInformationSection;
};

export enum KymCooperativeInstitutionInformationSection {
  AdditionalCooperativeDetails = 'ADDITIONAL_COOPERATIVE_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  CooperativeDate = 'COOPERATIVE_DATE',
  CurrentMembers = 'CURRENT_MEMBERS',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  OperatingAddress = 'OPERATING_ADDRESS',
  RegisteredAddress = 'REGISTERED_ADDRESS',
  Representative = 'REPRESENTATIVE',
}

export type KymCooperativeInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
};

export type KymCooperativeMutation = {
  accountOperatorDetail?: Maybe<KymCoopAccountOperatorDetails>;
  add?: Maybe<KymCooperativeAddResult>;
  directorDetails?: Maybe<KymCoopDirectorDetails>;
};

export type KymCooperativeMutationAddArgs = {
  data: KymCooperativeFormInput;
};

export type KymCooperativeOverallFormStatus = {
  accountOperatorDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  coopDetails?: Maybe<KymFormStatus>;
  directorsDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymCooperativeQuery = {
  formState?: Maybe<KymCooperativeFormStateQuery>;
  listAccountOperators?: Maybe<KymCoopAccountOperatorQuery>;
  listDirectors?: Maybe<KymCoopDirectorQuery>;
  overallFormStatus?: Maybe<KymCooperativeOverallFormStatus>;
};

export type KymCooperativeQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeQueryListAccountOperatorsArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeQueryListDirectorsArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeQueryOverallFormStatusArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeUnionPersonnelDetails = {
  personnelDetails?: Maybe<Array<Maybe<CoopUnionPersonnelDetails>>>;
};

export type KymCooperativeUnionPersonnelDetailsResult = {
  data?: Maybe<KymCooperativeUnionPersonnelDetails>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymDocuments = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsType = {
  documentsUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymFamilyDetails = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsFormState = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsType = {
  fullName?: Maybe<Scalars['String']>;
  relationshipId: Scalars['ID'];
};

export type KymFamilyMemberDetailsInThisCooperative = {
  memberId?: InputMaybe<Scalars['ID']>;
  relationshipId?: InputMaybe<Scalars['ID']>;
};

export type KymFamilyMemberDetailsInThisCooperativeFormState = {
  memberId?: Maybe<Scalars['ID']>;
  relationshipId?: Maybe<Scalars['ID']>;
};

export type KymFamilyMemberDetailsInThisCooperativeType = {
  fullName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  relationshipId: Scalars['ID'];
};

export type KymFormSectionStatus = {
  errors?: Maybe<Array<Scalars['String']>>;
  incomplete?: Maybe<Array<Scalars['String']>>;
};

export type KymFormStatus = {
  errors?: Maybe<Scalars['InvalidData']>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormSectionStatus>;
};

export type KymIdentification = {
  fields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymIdentificationFormState = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  id: Scalars['ID'];
};

export type KymIdentificationType = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsType>>>;
  id?: Maybe<Scalars['ID']>;
};

export type KymIncomeSourceDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['Float']>;
  source?: InputMaybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsFormState = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsType = {
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIndAddError = KymIndAddInvalidDataError;

export type KymIndAddFormStatus = {
  lastUpdated?: Maybe<KymIndAddLus>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndAddInvalidDataError = {
  error?: Maybe<Array<Maybe<SectionWiseError>>>;
};

export type KymIndAddLus =
  | KymIndCooperativeLus
  | KymIndDeclarationLus
  | KymIndPersonalLus
  | KymIndProfessionalLus;

export type KymIndAddLastUpdated = {
  cooperativeMembership?: Maybe<KymIndCooperativeMemberStatus>;
  declaration?: Maybe<KymIndDeclarationStatus>;
  personal?: Maybe<KymIndPersonalStatus>;
  professional?: Maybe<KymIndProfessionalStatus>;
};

export type KymIndAddResult = {
  error?: Maybe<KymIndAddError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndGetResult>;
  recordId: Scalars['ID'];
};

export type KymIndCooperativeLus = {
  name: KymIndPersonalSection;
};

export enum KymIndCooperativeMemberSection {
  EstimatedAmount = 'ESTIMATED_AMOUNT',
  IsFamilyAMember = 'IS_FAMILY_A_MEMBER',
  MemberOfAnotherCooperative = 'MEMBER_OF_ANOTHER_COOPERATIVE',
  Purpose = 'PURPOSE',
  TransactionDetails = 'TRANSACTION_DETAILS',
}

export type KymIndCooperativeMemberStatus = {
  completed?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
  error?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
};

export type KymIndDeclarationLus = {
  name: KymIndPersonalSection;
};

export enum KymIndDeclarationSection {
  BeneficialOwner = 'BENEFICIAL_OWNER',
  Conviction = 'CONVICTION',
  FamilyMemberInPolitics = 'FAMILY_MEMBER_IN_POLITICS',
  ForeignResidentialPermit = 'FOREIGN_RESIDENTIAL_PERMIT',
}

export type KymIndDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
};

export type KymIndDeclarations = {
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['ID']>;
  convictionDetails?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<KymDocumentsType>>>;
  foreignResidentialPermitDetails?: Maybe<Array<Maybe<KymIdentificationType>>>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  localKinAddress?: Maybe<Scalars['String']>;
  localKinContact?: Maybe<Scalars['String']>;
  localKinName?: Maybe<Scalars['String']>;
  localKinRelationshipId?: Maybe<Scalars['ID']>;
};

export type KymIndFormData = {
  annualIncomeSourceId?: Maybe<Scalars['String']>;
  basicInformation?: Maybe<KymIndBasicInformation>;
  contactDetails?: Maybe<KymIndContactDetails>;
  declaration?: Maybe<KymIndDeclaration>;
  estimatedTransactions?: Maybe<KymIndEstimatedTransactions>;
  foreignEmployment?: Maybe<KymIndForeignEmployment>;
  identificationSelection?: Maybe<Array<Maybe<Scalars['String']>>>;
  initialTransactionDetails?: Maybe<KymIndInitialTransactionDetails>;
  introducers?: Maybe<KymIndIntroducers>;
  isFamilyAMember?: Maybe<Scalars['Boolean']>;
  maritalStatus?: Maybe<Scalars['Localized']>;
  maritalStatusId?: Maybe<Scalars['String']>;
  membershipDetails?: Maybe<KymIndMembershipDetails>;
  permanentAddress?: Maybe<KymAddress>;
  profession?: Maybe<KymIndProfession>;
  rentedHouse?: Maybe<KymIndRentedHouse>;
  temporaryAddress?: Maybe<KymIndTemporaryAddress>;
};

export type KymIndFormState = {
  formData?: Maybe<KymIndFormData>;
};

export type KymIndFormStateQuery = {
  data?: Maybe<KymIndFormState>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymIndAddFormStatus>;
};

export type KymIndMemberInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['String']>;
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['String']>;
  convictedDetails?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['Localized']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  educationQualificationId?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['String']>;
  firstIntroducerId?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  foreignEmpCountryId?: InputMaybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  foreignResidentialPermitTypeId?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['String']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  identificationSelection?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  initialLoan?: InputMaybe<Scalars['String']>;
  initialSaving?: InputMaybe<Scalars['String']>;
  initialShare?: InputMaybe<Scalars['Int']>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isFamilyAMember?: InputMaybe<Scalars['Boolean']>;
  isForeignEmployment?: InputMaybe<Scalars['Boolean']>;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  maritalStatusId?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  nationalityId?: InputMaybe<Scalars['String']>;
  otherCoopBranchId?: InputMaybe<Scalars['String']>;
  otherCoopMemberId?: InputMaybe<Scalars['String']>;
  otherCoopName?: InputMaybe<Scalars['String']>;
  otherFinancialAmount?: InputMaybe<Scalars['String']>;
  otherProfession?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  politicallyExposedDetails?: InputMaybe<Scalars['String']>;
  professionId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purposeId?: InputMaybe<Scalars['String']>;
  religionId?: InputMaybe<Scalars['String']>;
  sameTempAsPermanentAddress?: InputMaybe<Scalars['Boolean']>;
  secondIntroducerId?: InputMaybe<Scalars['String']>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  typeOfVisaId?: InputMaybe<Scalars['String']>;
};

export type KymIndMutation = {
  add?: Maybe<KymIndAddResult>;
  familyMember: KymIndFamilyMemberMutation;
  identification: KymIndIdentificationMutation;
  incomeSource: KymIndIncomeSourceMutation;
  occupation: KymIndOccupationMutation;
};

export type KymIndMutationAddArgs = {
  data: KymIndMemberInput;
};

export type KymIndPersonalInformation = {
  contact?: Maybe<Contact>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  educationQualificationId?: Maybe<Scalars['ID']>;
  ethnicityId?: Maybe<Scalars['ID']>;
  familyDetails?: Maybe<Array<Maybe<KymFamilyDetailsType>>>;
  firstName: Scalars['String'];
  genderId?: Maybe<Scalars['ID']>;
  identification?: Maybe<Array<Maybe<KymIdentificationType>>>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['ID']>;
  middleName?: Maybe<Scalars['String']>;
  nationalityId?: Maybe<Scalars['ID']>;
  permanentAddress?: Maybe<Address>;
  religionId?: Maybe<Scalars['ID']>;
  temporaryAddress?: Maybe<Address>;
};

export type KymIndPersonalLus = {
  name: KymIndPersonalSection;
};

export enum KymIndPersonalSection {
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  FamilyDetails = 'FAMILY_DETAILS',
  IdentificationDetails = 'IDENTIFICATION_DETAILS',
  PermanentAddress = 'PERMANENT_ADDRESS',
  RentedHouse = 'RENTED_HOUSE',
  TemporaryAddress = 'TEMPORARY_ADDRESS',
}

export type KymIndPersonalStatus = {
  completed?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
  error?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
};

export type KymIndProfessionalInformation = {
  annualIncomeSourceId?: Maybe<Scalars['ID']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymIncomeSourceDetailsType>>>;
  mainOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
  occupationId?: Maybe<Scalars['ID']>;
  spouseOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
};

export type KymIndProfessionalLus = {
  name: KymIndPersonalSection;
};

export enum KymIndProfessionalSection {
  IncomeSource = 'INCOME_SOURCE',
  MainProfession = 'MAIN_PROFESSION',
  Profession = 'PROFESSION',
  SpouseOccupation = 'SPOUSE_OCCUPATION',
}

export type KymIndProfessionalStatus = {
  completed?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
  error?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
};

export type KymIndQuery = {
  formState?: Maybe<KymIndFormStateQuery>;
  listFamilyMember?: Maybe<KymIndFamilyMemberQueryResult>;
  listIdentification?: Maybe<KymIndIdentificationQueryResult>;
  listIncomeSource?: Maybe<KymIndIncomeSourceQueryResult>;
  listOccupation?: Maybe<KymIndOccupationQueryResult>;
};

export type KymIndQueryListFamilyMemberArgs = {
  isMember?: InputMaybe<Scalars['Boolean']>;
};

export type KymIndQueryListOccupationArgs = {
  isSpouse: Scalars['Boolean'];
};

export type KymInsAccountLus = {
  name: KymInsAccountSection;
};

export type KymInsAccountOperator = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsAccountOperatorDeleteArgs = {
  operatorId: Scalars['ID'];
};

export type KymInsAccountOperatorUpsertArgs = {
  data: KymInsAccountOperatorInput;
  operatorId: Scalars['ID'];
};

export type KymInsAccountOperatorInput = {
  contact?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export enum KymInsAccountSection {
  AccountOperationInstruction = 'ACCOUNT_OPERATION_INSTRUCTION',
  DetailsOfAccountOperators = 'DETAILS_OF_ACCOUNT_OPERATORS',
}

export type KymInsAccountStatus = {
  completed?: Maybe<Array<Maybe<KymInsAccountSection>>>;
  error?: Maybe<Array<Maybe<KymInsAccountSection>>>;
};

export type KymInsAddLus =
  | KymInsAccountLus
  | KymInsDeclarationLus
  | KymInsDirectorDetailsLus
  | KymInsInformationLus
  | KymInsTransactionLus;

export type KymInsAddResult = {
  error?: Maybe<KymIndAddError>;
  query?: Maybe<KymInsQuery>;
  record?: Maybe<KymInsRecord>;
  recordId: Scalars['ID'];
};

export type KymInsAddSectionStatus = {
  account?: Maybe<KymInsAccountStatus>;
  declaration?: Maybe<KymInsDeclarationStatus>;
  directorDetails?: Maybe<KymInsDirectorDetailsStatus>;
  information?: Maybe<KymInsInformationStatus>;
  transaction?: Maybe<KymInsTransactionStatus>;
};

export type KymInsDeclarationLus = {
  name: KymInsDeclarationSection;
};

export enum KymInsDeclarationSection {
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  DocumentsDeclaration = 'DOCUMENTS_DECLARATION',
}

export type KymInsDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
};

export type KymInsDirector = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsDirectorDeleteArgs = {
  directorId: Scalars['ID'];
};

export type KymInsDirectorUpsertArgs = {
  data: KymInsDirectorInput;
  directorId: Scalars['ID'];
};

export type KymInsDirectorAffiliatedFirmInput = {
  address?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  directorName?: InputMaybe<Scalars['String']>;
  institutionName?: InputMaybe<Scalars['String']>;
  yearlyIncome?: InputMaybe<Scalars['Float']>;
};

export type KymInsDirectorDetailsLus = {
  name: KymInsDirectorDetailsSection;
};

export enum KymInsDirectorDetailsSection {
  DetailsOfDirectors = 'DETAILS_OF_DIRECTORS',
  DetailsOfDirectorsAffiliated = 'DETAILS_OF_DIRECTORS_AFFILIATED',
}

export type KymInsDirectorDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
};

export type KymInsDirectorInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firmDetails?: InputMaybe<KymInsDirectorAffiliatedFirmInput>;
  highestQualification?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  isAffiliatedWithOtherFirms?: InputMaybe<Scalars['Boolean']>;
  isHeadOfOrganization?: InputMaybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymInsFormData = {
  accountHolderAddress?: Maybe<KymAddress>;
  accountHolderEmail?: Maybe<Scalars['String']>;
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderPhone?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountOperatorsDetails?: Maybe<Array<Maybe<AccountOperatorDetailsFormState>>>;
  accountType?: Maybe<AccountOperationType>;
  annualTurnover?: Maybe<Scalars['Float']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<KymAddress>;
  companyStamp?: Maybe<Scalars['String']>;
  dateOfLastAGM?: Maybe<Scalars['Localized']>;
  detailsOfDirectors?: Maybe<Array<Maybe<DirectorDetailsFormState>>>;
  documents?: Maybe<Array<Maybe<KymFieldData>>>;
  email?: Maybe<Scalars['String']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionTypeId?: Maybe<Scalars['String']>;
  isCompanyStampCompulsory?: Maybe<Scalars['Boolean']>;
  issuingOffice?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  sisterConcernDetails?: Maybe<Array<Maybe<SisterConcernDetailsFormState>>>;
  specialInstruction?: Maybe<Scalars['String']>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type KymInsFormStateQuery = {
  data?: Maybe<KymInsFormStatus>;
};

export type KymInsFormStatus = {
  formData?: Maybe<KymInsFormData>;
  lastUpdated?: Maybe<KymInsAddLus>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymInsInformationLus = {
  name: KymInsInformationSection;
};

export enum KymInsInformationSection {
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  DetailsOfSisterConcern = 'DETAILS_OF_SISTER_CONCERN',
  RegisteredDetails = 'REGISTERED_DETAILS',
}

export type KymInsInformationStatus = {
  completed?: Maybe<Array<Maybe<KymInsInformationSection>>>;
  error?: Maybe<Array<Maybe<KymInsInformationSection>>>;
};

export type KymInsInput = {
  accountHolderAddress?: InputMaybe<KymAddressInput>;
  accountHolderEmail?: InputMaybe<Scalars['String']>;
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderPhone?: InputMaybe<Scalars['String']>;
  accountHolderSignature?: InputMaybe<Scalars['String']>;
  accountHolderStamp?: InputMaybe<Scalars['String']>;
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<AccountOperationType>;
  annualTurnover?: InputMaybe<Scalars['Float']>;
  bank?: InputMaybe<Scalars['ID']>;
  branchOfficeAddress?: InputMaybe<KymAddressInput>;
  companyStamp?: InputMaybe<Scalars['String']>;
  dateOfLastAGM?: InputMaybe<Scalars['Localized']>;
  email?: InputMaybe<Scalars['String']>;
  expectedMonthlyTransaction?: InputMaybe<Scalars['String']>;
  expectedMonthlyTurnover?: InputMaybe<Scalars['String']>;
  fax?: InputMaybe<Scalars['String']>;
  initialDepositAmount?: InputMaybe<Scalars['Float']>;
  institutionName?: InputMaybe<Scalars['String']>;
  institutionTypeId?: InputMaybe<Scalars['String']>;
  isCompanyStampCompulsory?: InputMaybe<Scalars['Boolean']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  natureOfTransaction?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  numberOfEmployee?: InputMaybe<Scalars['Int']>;
  operatingOfficeAddress?: InputMaybe<KymAddressInput>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<KymAddressInput>;
  registeredNumber?: InputMaybe<Scalars['String']>;
  registrationDate?: InputMaybe<Scalars['Localized']>;
  specialInstruction?: InputMaybe<Scalars['String']>;
  vatOrPanNo?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymInsListAccountOperatorsQuery = {
  data?: Maybe<Array<Maybe<AccountOperatorDetailsFormState>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymInsListDirectorsQuery = {
  data?: Maybe<Array<Maybe<DirectorDetailsFormState>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymInsListSisterConcernQuery = {
  data?: Maybe<Array<Maybe<SisterConcernDetailsFormState>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymInsMutation = {
  accountOperator?: Maybe<KymInsAccountOperator>;
  add?: Maybe<KymInsAddResult>;
  director?: Maybe<KymInsDirector>;
  sisterConcern?: Maybe<KymInsSisterConcern>;
};

export type KymInsMutationAddArgs = {
  data: KymInsInput;
};

export type KymInsOverallFormStatus = {
  accountOperatorDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  directorDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  institutionDetails?: Maybe<KymFormStatus>;
  sisterConcernDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymInsQuery = {
  formState?: Maybe<KymInsFormStateQuery>;
  listAccountOperators?: Maybe<KymInsListAccountOperatorsQuery>;
  listDirectors?: Maybe<KymInsListDirectorsQuery>;
  listSisterConcerns?: Maybe<KymInsListSisterConcernQuery>;
  overallFormStatus?: Maybe<KymInsOverallFormStatus>;
};

export type KymInsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListAccountOperatorsArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListDirectorsArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListSisterConcernsArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryOverallFormStatusArgs = {
  id: Scalars['ID'];
};

export type KymInsRecord = {
  member: Member;
  sectionStatus?: Maybe<KymInsFormStatus>;
};

export type KymInsSisterConcern = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsSisterConcernDeleteArgs = {
  sisterConcernId: Scalars['ID'];
};

export type KymInsSisterConcernUpsertArgs = {
  data: KymInsSisterConcernInput;
  sisterConcernId: Scalars['ID'];
};

export type KymInsSisterConcernInput = {
  address?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type KymInsTransactionLus = {
  name: KymInsTransactionSection;
};

export enum KymInsTransactionSection {
  TransactionDetails = 'TRANSACTION_DETAILS',
}

export type KymInsTransactionStatus = {
  completed?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
  error?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
};

export type KymInstitutionDocumentsFormState = {
  agmBODDecisionDocument?: Maybe<Scalars['String']>;
  latestAuditReport?: Maybe<Scalars['String']>;
  moaAOA?: Maybe<Scalars['String']>;
  panCertificate?: Maybe<Scalars['String']>;
  registeredCertificate?: Maybe<Scalars['String']>;
  taxClearance?: Maybe<Scalars['String']>;
};

export type KymInstitutionDocumentsType = {
  agmBodDecisionDocument?: Maybe<Scalars['String']>;
  latestAuditReport?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  minuteOfCentralRep?: Maybe<Scalars['String']>;
  moaAOA?: Maybe<Scalars['String']>;
  panCertificate?: Maybe<Scalars['String']>;
  registeredCertificate?: Maybe<Scalars['String']>;
  taxClearance?: Maybe<Scalars['String']>;
};

export type KymMemberDataFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  memberCode?: InputMaybe<Scalars['String']>;
  memberType?: InputMaybe<KymMemberTypesEnum>;
  mobileNo?: InputMaybe<Scalars['String']>;
  objState?: InputMaybe<ObjState>;
  query?: InputMaybe<Scalars['String']>;
};

export type KymMemberListConnection = {
  edges?: Maybe<Array<Maybe<KymMemberListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type KymMemberListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Member>;
};

export type KymMemberTypes = {
  id: Scalars['ID'];
  type?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
};

export enum KymMemberTypesEnum {
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
  Individual = 'INDIVIDUAL',
  Institution = 'INSTITUTION',
}

export type KymOccupationDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['Float']>;
  idNumber?: InputMaybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: InputMaybe<Scalars['String']>;
};

export type KymOccupationDetailsFormState = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type KymOccupationDetailsType = {
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type KymStatusFilter = {
  riskCategory?: InputMaybe<RiskCategoryFilter>;
  status?: InputMaybe<ExpiryStatusFilter>;
};

export type KymStatusReport = {
  address?: Maybe<Address>;
  contact?: Maybe<Scalars['String']>;
  kymExpireDays?: Maybe<Scalars['String']>;
  kymStatus?: Maybe<Scalars['String']>;
  lastKymUpdatedDate?: Maybe<Scalars['Localized']>;
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['String']>;
  regDate?: Maybe<Scalars['Localized']>;
  riskCategory?: Maybe<Scalars['String']>;
};

export type KymStatusReportFilter = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<KymStatusFilter>;
  period: LocalizedDateFilter;
};

export type KymStatusReportResult = {
  Summary?: Maybe<Scalars['Map']>;
  data?: Maybe<Array<Maybe<KymStatusReport>>>;
  error?: Maybe<QueryError>;
  meta?: Maybe<Scalars['Map']>;
};

export type LadderRate = {
  amount: Scalars['Amount'];
  rate: Scalars['Float'];
  type: Scalars['String'];
};

export type LadderRateFormState = {
  amount: Scalars['Amount'];
  rate: Scalars['Float'];
  type: Scalars['String'];
};

export enum Language {
  English = 'ENGLISH',
  Nepali = 'NEPALI',
}

export type LedgerMapping = {
  interestAccuredDaily?: InputMaybe<Scalars['String']>;
  interestIncome?: InputMaybe<Scalars['String']>;
  principal?: InputMaybe<Scalars['String']>;
};

export type LedgerMappingFormState = {
  interestAccuredDaily?: Maybe<Scalars['String']>;
  interestIncome?: Maybe<Scalars['String']>;
  principal?: Maybe<Scalars['String']>;
};

export type Level1 = {
  level2: Level2;
};

export type Level1Level2Args = {
  id: Scalars['String'];
};

export type Level2 = {
  add: Example;
  hello: Example;
};

export type Level2AddArgs = {
  data: ExampleInput;
};

export type Level2HelloArgs = {
  data: ExampleInput;
};

export type LoanAccReportDetails = {
  accountNo?: Maybe<Scalars['String']>;
  approvedAmount?: Maybe<Scalars['String']>;
  charge?: Maybe<Scalars['String']>;
  installment?: Maybe<Scalars['Int']>;
  interestRate?: Maybe<Scalars['Float']>;
  issuedDate?: Maybe<Scalars['Localized']>;
  loanSubtype?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
};

export type LoanAccount = {
  LoanAccountName?: Maybe<Scalars['String']>;
  appliedLoanAmount: Scalars['String'];
  approvedDate?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  intrestRate?: Maybe<Scalars['Float']>;
  isBoardAuthority?: Maybe<Scalars['Boolean']>;
  isCeoAuthority?: Maybe<Scalars['Boolean']>;
  justifySanction?: Maybe<Scalars['String']>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  member: Member;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  note?: Maybe<Scalars['String']>;
  objState: LoanObjState;
  product: LoanProduct;
  productSubType: LoanSettingsProductSubTypeData;
  productType: Scalars['ID'];
  repaymentScheme?: Maybe<LoanRepaymentScheme>;
  tenure?: Maybe<Scalars['Int']>;
  tenureType?: Maybe<FrequencyTenure>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
  totalValuation?: Maybe<Scalars['String']>;
};

export type LoanAccountCollateral = {
  area?: Maybe<Scalars['Float']>;
  buildingType?: Maybe<BuildingType>;
  collateralDescription?: Maybe<Scalars['String']>;
  collateralFiles?: Maybe<Array<Maybe<Scalars['String']>>>;
  collateralType?: Maybe<Scalars['String']>;
  collaterallValuation?: Maybe<Scalars['Amount']>;
  constructionType?: Maybe<ConstructionType>;
  description?: Maybe<Scalars['String']>;
  documentName?: Maybe<Scalars['String']>;
  dvMinAmount?: Maybe<Scalars['String']>;
  fmvMaxAmount?: Maybe<Scalars['Amount']>;
  kittaNo?: Maybe<Scalars['Int']>;
  noOfStorey?: Maybe<Scalars['Int']>;
  ownerName?: Maybe<Scalars['String']>;
  plotNo?: Maybe<Scalars['Int']>;
  relation?: Maybe<Scalars['String']>;
  sheetNo?: Maybe<Scalars['Int']>;
  valuationAmount?: Maybe<Scalars['String']>;
  valuationFiles?: Maybe<Array<Maybe<Scalars['String']>>>;
  valuationMethod?: Maybe<ValuationMethod>;
  valuationPercent?: Maybe<Scalars['Float']>;
  valuatorId?: Maybe<Scalars['String']>;
  vehicleCapacity?: Maybe<Scalars['String']>;
  vehicleFuelType?: Maybe<Scalars['String']>;
  vehicleModelNo?: Maybe<Scalars['String']>;
  vehicleName?: Maybe<Scalars['String']>;
  vehicleNo?: Maybe<Scalars['String']>;
  vehicleRegistrationNo?: Maybe<Scalars['String']>;
  vehicleSeatCapacity?: Maybe<Scalars['Int']>;
  vehicleType?: Maybe<Scalars['String']>;
};

export type LoanAccountCollateralData = {
  area?: InputMaybe<Scalars['Float']>;
  buildingType?: InputMaybe<BuildingType>;
  collateralDescription?: InputMaybe<Scalars['String']>;
  collateralFiles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  collateralType?: InputMaybe<Scalars['String']>;
  collaterallValuation?: InputMaybe<Scalars['Amount']>;
  constructionType?: InputMaybe<ConstructionType>;
  description?: InputMaybe<Scalars['String']>;
  documentName?: InputMaybe<Scalars['String']>;
  dvMinAmount?: InputMaybe<Scalars['String']>;
  fmvMaxAmount?: InputMaybe<Scalars['Amount']>;
  kittaNo?: InputMaybe<Scalars['Int']>;
  noOfStorey?: InputMaybe<Scalars['Int']>;
  ownerName?: InputMaybe<Scalars['String']>;
  plotNo?: InputMaybe<Scalars['Int']>;
  relation?: InputMaybe<Scalars['String']>;
  sheetNo?: InputMaybe<Scalars['Int']>;
  valuationAmount?: InputMaybe<Scalars['String']>;
  valuationFiles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  valuationMethod?: InputMaybe<ValuationMethod>;
  valuationPercent?: InputMaybe<Scalars['Float']>;
  valuatorId?: InputMaybe<Scalars['String']>;
  vehicleCapacity?: InputMaybe<Scalars['String']>;
  vehicleFuelType?: InputMaybe<Scalars['String']>;
  vehicleModelNo?: InputMaybe<Scalars['String']>;
  vehicleName?: InputMaybe<Scalars['String']>;
  vehicleNo?: InputMaybe<Scalars['String']>;
  vehicleRegistrationNo?: InputMaybe<Scalars['String']>;
  vehicleSeatCapacity?: InputMaybe<Scalars['Int']>;
  vehicleType?: InputMaybe<Scalars['String']>;
};

export type LoanAccountCollateralResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId: Scalars['ID'];
};

export type LoanAccountConnection = {
  edges?: Maybe<Array<LoanAccountEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type LoanAccountDisbursement = {
  destinationAccount: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanAccountEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LoanAccount>;
};

export type LoanAccountFormState = {
  appliedLoanAmount?: Maybe<Scalars['String']>;
  collateralData?: Maybe<Array<Maybe<LoanAccountCollateral>>>;
  fingerprintDoc?: Maybe<Array<Maybe<Scalars['String']>>>;
  gracePeriod?: Maybe<LoanAccountGrace>;
  gurantee_details?: Maybe<Array<Maybe<LoanAccountGurantee>>>;
  interestAuthority?: Maybe<InterestAuthority>;
  interestDoc?: Maybe<Array<Maybe<PictureData>>>;
  intrestRate?: Maybe<Scalars['Float']>;
  justifySanction?: Maybe<Scalars['String']>;
  linkedAccountId?: Maybe<Scalars['String']>;
  loanAccountName?: Maybe<Scalars['String']>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  memberId?: Maybe<Scalars['ID']>;
  nomineeDoc?: Maybe<Array<Maybe<Scalars['String']>>>;
  note?: Maybe<Scalars['String']>;
  photoDoc?: Maybe<Array<Maybe<Scalars['String']>>>;
  productId?: Maybe<Scalars['ID']>;
  productSubType?: Maybe<Scalars['ID']>;
  productType: Scalars['ID'];
  repaymentScheme?: Maybe<LoanRepaymentScheme>;
  signatureDoc?: Maybe<Array<Maybe<Scalars['String']>>>;
  tenure?: Maybe<Scalars['Int']>;
  tenureType?: Maybe<FrequencyTenure>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
  totalValuation?: Maybe<Scalars['String']>;
};

export type LoanAccountFormStateResult = {
  data?: Maybe<LoanAccountFormState>;
  error?: Maybe<QueryError>;
};

export type LoanAccountGrace = {
  gracePeriod?: Maybe<GracePeriod>;
  installmentNo?: Maybe<Scalars['Int']>;
  interestGracePeriod?: Maybe<Scalars['Int']>;
  principalGracePeriod?: Maybe<Scalars['Int']>;
};

export type LoanAccountGraceInput = {
  gracePeriod?: InputMaybe<GracePeriod>;
  installmentNo?: InputMaybe<Scalars['Int']>;
  interestGracePeriod?: InputMaybe<Scalars['Int']>;
  principalGracePeriod?: InputMaybe<Scalars['Int']>;
};

export type LoanAccountGracePeriodResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccountGrace>;
  recordId: Scalars['ID'];
};

export type LoanAccountGurantee = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  guranteeAmount?: Maybe<Scalars['Amount']>;
  maxGuranteeAmountLimit?: Maybe<Scalars['Amount']>;
  memberId?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['Amount']>;
};

export type LoanAccountGuranteeInput = {
  accountId?: InputMaybe<Scalars['String']>;
  accountName?: InputMaybe<Scalars['String']>;
  guranteeAmount?: InputMaybe<Scalars['Amount']>;
  maxGuranteeAmountLimit?: InputMaybe<Scalars['Amount']>;
  memberId?: InputMaybe<Scalars['String']>;
  totalAmount?: InputMaybe<Scalars['Amount']>;
};

export type LoanAccountGuranteeResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccountGurantee>;
  recordId: Scalars['ID'];
};

export type LoanAccountInput = {
  appliedLoanAmount?: InputMaybe<Scalars['String']>;
  collateralData?: InputMaybe<Array<InputMaybe<LoanAccountCollateralData>>>;
  fingerprintDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  gurantee_details?: InputMaybe<Array<InputMaybe<LoanAccountGuranteeInput>>>;
  interestAuthority?: InputMaybe<InterestAuthority>;
  interestDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  intrestRate?: InputMaybe<Scalars['Float']>;
  justifySanction?: InputMaybe<Scalars['String']>;
  linkedAccountId?: InputMaybe<Scalars['String']>;
  loanAccountName?: InputMaybe<Scalars['String']>;
  loanProcessingCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  memberId?: InputMaybe<Scalars['ID']>;
  nomineeDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  note?: InputMaybe<Scalars['String']>;
  photoDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  productId?: InputMaybe<Scalars['ID']>;
  productSubType?: InputMaybe<Scalars['ID']>;
  productType?: InputMaybe<Scalars['ID']>;
  repaymentScheme?: InputMaybe<LoanRepaymentScheme>;
  signatureDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tenure?: InputMaybe<Scalars['Int']>;
  tenureType?: InputMaybe<FrequencyTenure>;
  totalSanctionedAmount?: InputMaybe<Scalars['String']>;
  totalValuation?: InputMaybe<Scalars['String']>;
};

export type LoanAccountMinimal = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type LoanAccountMutation = {
  add?: Maybe<LoanAccountResult>;
  approveOrCancel?: Maybe<LoanAccountResult>;
  disburse?: Maybe<LoanDisbursementResult>;
  repayment?: Maybe<LoanRepaymentResult>;
};

export type LoanAccountMutationAddArgs = {
  data?: InputMaybe<LoanAccountInput>;
  id: Scalars['ID'];
};

export type LoanAccountMutationApproveOrCancelArgs = {
  action: LoanApproveOrCancel;
  loanAccountId: Scalars['String'];
  remarks?: InputMaybe<Scalars['String']>;
};

export type LoanAccountMutationDisburseArgs = {
  data: LoanDisbursementInput;
  loanAccount: Scalars['ID'];
};

export type LoanAccountMutationRepaymentArgs = {
  data?: InputMaybe<LoanRepaymentInput>;
};

export type LoanAccountPaymentScheduleResult = {
  data?: Maybe<LoanInstallments>;
  error?: Maybe<QueryError>;
};

export type LoanAccountPreview = {
  accountId?: Maybe<Scalars['String']>;
  additionalFeatures?: Maybe<LoanPreviewAdditionalFeatures>;
  collateralAndGuarantees?: Maybe<Array<Maybe<LoanCollateralAndGuarantees>>>;
  criteria?: Maybe<LoanProductCriteria>;
  generalInformation?: Maybe<LoanPreviewGeneralInformation>;
  loanDetails?: Maybe<LoanPreviewLoanDetails>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['String']>;
  paymentSchedule?: Maybe<LoanInstallments>;
  productId?: Maybe<Scalars['String']>;
  repaymentDetails?: Maybe<LoanPreviewRepaymentDetails>;
  statistics?: Maybe<LoanPreviewStatistics>;
};

export type LoanAccountPreviewResult = {
  data?: Maybe<LoanAccountPreview>;
  error?: Maybe<QueryError>;
};

export type LoanAccountQuery = {
  formState?: Maybe<LoanAccountFormStateResult>;
  getLoanInstallments?: Maybe<LoanInstallmentResult>;
  getProductCriteria?: Maybe<LoanProductCriteriaResult>;
  getProductList?: Maybe<LoanProductList>;
  list?: Maybe<LoanAccountConnection>;
  loanPreview?: Maybe<LoanAccountPreviewResult>;
  memberDisbursedLoanAccounts?: Maybe<Array<Maybe<LoanAccountMinimal>>>;
  paymentSchedule?: Maybe<LoanAccountPaymentScheduleResult>;
  repaymentList?: Maybe<LoanRepaymentConnection>;
};

export type LoanAccountQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type LoanAccountQueryGetLoanInstallmentsArgs = {
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  interest: Scalars['Float'];
  productId: Scalars['ID'];
  repaymentScheme: LoanRepaymentScheme;
  sanctionAmount: Scalars['Int'];
  tenure: Scalars['Int'];
};

export type LoanAccountQueryGetProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type LoanAccountQueryGetProductListArgs = {
  memberId: Scalars['ID'];
  productSubTypeId: Scalars['ID'];
  productType: Scalars['ID'];
};

export type LoanAccountQueryListArgs = {
  filter?: InputMaybe<LoanAccountSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanAccountQueryLoanPreviewArgs = {
  loanAccountId: Scalars['String'];
};

export type LoanAccountQueryMemberDisbursedLoanAccountsArgs = {
  memberId: Scalars['ID'];
};

export type LoanAccountQueryPaymentScheduleArgs = {
  loanAccountId: Scalars['ID'];
};

export type LoanAccountQueryRepaymentListArgs = {
  filter?: InputMaybe<LoanRepaymentFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId: Scalars['ID'];
};

export type LoanAccountSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  objectState?: InputMaybe<LoanObjState>;
  productID?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type LoanAgingFilters = {
  disbursePrincipal?: InputMaybe<MinMaxFilter>;
  loanSubType?: InputMaybe<Scalars['String']>;
  loanType?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<LoanAgingPaymentMode>;
  remainingPrincipal?: InputMaybe<MinMaxFilter>;
};

export enum LoanAgingPaymentMode {
  All = 'ALL',
  HalfYearly = 'HALF_YEARLY',
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
  Yearly = 'YEARLY',
}

export enum LoanAgingPeriod {
  AboveTwelveMonths = 'ABOVE_TWELVE_MONTHS',
  All = 'ALL',
  Below_30Days = 'BELOW_30_DAYS',
  CustomPeriod = 'CUSTOM_PERIOD',
  OneTwelveMonths = 'ONE_TWELVE_MONTHS',
  ThisFiscalYearToDate = 'THIS_FISCAL_YEAR_TO_DATE',
  ThreeMonths = 'THREE_MONTHS',
  TwoMonths = 'TWO_MONTHS',
}

export type LoanAgingPeriodInput = {
  period: LocalizedDateFilter;
  periodType: LoanAgingPeriod;
};

export type LoanAgingStatementData = {
  report?: Maybe<Array<Maybe<LoanAgingStatementReport>>>;
  summary?: Maybe<LoanAgingStatementSummary>;
};

export type LoanAgingStatementInput = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<LoanAgingFilters>;
  period?: InputMaybe<LoanAgingPeriodInput>;
};

export type LoanAgingStatementReport = {
  address?: Maybe<Scalars['String']>;
  disbursePrincipal?: Maybe<Scalars['String']>;
  goodAmount?: Maybe<Scalars['String']>;
  installmentAmount?: Maybe<Scalars['String']>;
  installmentLateDays?: Maybe<Scalars['Int']>;
  issueDate?: Maybe<Scalars['Localized']>;
  lastInterestPaidDate?: Maybe<Scalars['Localized']>;
  lastPrincipalPaidDate?: Maybe<Scalars['Localized']>;
  loanMaturityDate?: Maybe<Scalars['Localized']>;
  loanNo?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  matured1To12Months?: Maybe<Scalars['String']>;
  matured1To30Days?: Maybe<Scalars['String']>;
  maturedAbove12Months?: Maybe<Scalars['String']>;
  memberNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  paymentMode?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
  remainingInstallmentAmount?: Maybe<Scalars['String']>;
  remainingInterest?: Maybe<Scalars['String']>;
  remainingPenalty?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  totalDueAmount?: Maybe<Scalars['String']>;
};

export type LoanAgingStatementReportResult = {
  data?: Maybe<LoanAgingStatementData>;
  error?: Maybe<QueryError>;
};

export type LoanAgingStatementSummary = {
  disbursePrincipalTotal?: Maybe<Scalars['String']>;
  dueAmountTotal?: Maybe<Scalars['String']>;
  goodAmountTotal?: Maybe<Scalars['String']>;
  installmentAmountTotal?: Maybe<Scalars['String']>;
  matured1To12MonthsTotal?: Maybe<Scalars['String']>;
  matured1To30DaysTotal?: Maybe<Scalars['String']>;
  maturedAbove12MonthsTotal?: Maybe<Scalars['String']>;
  remainingInstallmentAmountTotal?: Maybe<Scalars['String']>;
  remainingInterestTotal?: Maybe<Scalars['String']>;
  remainingPenaltyTotal?: Maybe<Scalars['String']>;
  remainingPrincipalTotal?: Maybe<Scalars['String']>;
};

export enum LoanApproveOrCancel {
  Approve = 'APPROVE',
  Cancel = 'CANCEL',
}

export type LoanBalanceFilter = {
  outstandingBalance?: InputMaybe<MinMaxFilter>;
  productNameIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  productSubTypes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  productTypes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type LoanBalanceFilterData = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<LoanBalanceFilter>;
  period: LocalizedDateFilter;
};

export type LoanBalanceReport = {
  lastPaymentDate?: Maybe<Scalars['String']>;
  loanAccountId?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  outstandingBalance?: Maybe<Scalars['String']>;
  productCode?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  remainingBalance?: Maybe<Scalars['String']>;
  remainingInterest?: Maybe<Scalars['String']>;
};

export type LoanBalanceReportResult = {
  data?: Maybe<Array<Maybe<LoanBalanceReport>>>;
  error?: Maybe<QueryError>;
  totalOutstandingBalance?: Maybe<Scalars['String']>;
  totalRemainingBalance?: Maybe<Scalars['String']>;
};

export type LoanBankDisbursement = {
  bankAccountId: Scalars['ID'];
  chequeNo: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanCollateralAndGuarantees = {
  name?: Maybe<Scalars['String']>;
  valuation?: Maybe<Scalars['String']>;
};

export type LoanDisbursementInput = {
  accountPayment?: InputMaybe<LoanAccountDisbursement>;
  amount: Scalars['String'];
  bankChequePayment?: InputMaybe<LoanBankDisbursement>;
  method: LoanDisbursementMethod;
};

export enum LoanDisbursementMethod {
  Account = 'ACCOUNT',
  BankCheque = 'BANK_CHEQUE',
}

export type LoanDisbursementResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanFilters = {
  amountRange?: InputMaybe<SavingAmountRange>;
  service?: InputMaybe<SavingServiceType>;
  transactionType?: InputMaybe<SavingTransactionType>;
};

export type LoanGeneralSettings = {
  /** accepted collateral list */
  collateralList?: Maybe<Array<Maybe<CollateralListData>>>;
  /**  loan repayment  */
  emi?: Maybe<Scalars['Boolean']>;
  epi?: Maybe<Scalars['Boolean']>;
  flat?: Maybe<Scalars['Boolean']>;
};

export type LoanGeneralSettingsInput = {
  /** accepted collateral list */
  collateralList?: InputMaybe<Array<InputMaybe<CollateralListInputData>>>;
  /**  loan repayment  */
  emi?: InputMaybe<Scalars['Boolean']>;
  epi?: InputMaybe<Scalars['Boolean']>;
  flat?: InputMaybe<Scalars['Boolean']>;
};

export type LoanInstallment = {
  installmentDate: Scalars['String'];
  installmentNo: Scalars['Int'];
  interest: Scalars['String'];
  paid: Scalars['Boolean'];
  payment: Scalars['String'];
  principal: Scalars['String'];
  remainingPrincipal: Scalars['String'];
};

export type LoanInstallmentResult = {
  data?: Maybe<LoanInstallments>;
  error?: Maybe<QueryError>;
};

export type LoanInstallments = {
  installments?: Maybe<Array<Maybe<LoanInstallment>>>;
  total: Scalars['String'];
  totalInterest?: Maybe<Scalars['String']>;
  totalPrincipal?: Maybe<Scalars['String']>;
};

export enum LoanInsurancePaymentType {
  Amount = 'AMOUNT',
  Percentage = 'PERCENTAGE',
}

export type LoanInsuranceScheme = {
  id: Scalars['ID'];
  insuranceCompany?: Maybe<Scalars['String']>;
  insurancePremiumPercent?: Maybe<Scalars['Float']>;
  maxAmount?: Maybe<Scalars['String']>;
  maxPercent?: Maybe<Scalars['Float']>;
  minAmount?: Maybe<Scalars['String']>;
  minPercent?: Maybe<Scalars['Float']>;
  paymentFrequency?: Maybe<Frequency>;
  paymentType?: Maybe<LoanInsurancePaymentType>;
  schemeName?: Maybe<Scalars['String']>;
};

export type LoanInsuranceSchemeInput = {
  id?: InputMaybe<Scalars['String']>;
  insuranceCompany?: InputMaybe<Scalars['String']>;
  insurancePremiumPercent?: InputMaybe<Scalars['Float']>;
  maxAmount?: InputMaybe<Scalars['String']>;
  maxPercent?: InputMaybe<Scalars['Float']>;
  minAmount?: InputMaybe<Scalars['String']>;
  minPercent?: InputMaybe<Scalars['Float']>;
  paymentFrequency?: InputMaybe<Frequency>;
  paymentType?: InputMaybe<LoanInsurancePaymentType>;
  schemeName?: InputMaybe<Scalars['String']>;
};

export enum LoanInterestMethod {
  Diminishing = 'DIMINISHING',
  Straight = 'STRAIGHT',
}

export type LoanNatureOfProductInput = {
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  natureOfProduct?: InputMaybe<Scalars['String']>;
};

export enum LoanObjState {
  Approved = 'APPROVED',
  Cancelled = 'CANCELLED',
  Completed = 'COMPLETED',
  Disbursed = 'DISBURSED',
  Submitted = 'SUBMITTED',
}

export enum LoanPaymentInstallmentType {
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
}

export enum LoanPaymentMode {
  Installment = 'INSTALLMENT',
}

export type LoanPenalty = {
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyRate?: Maybe<Scalars['Float']>;
  penaltyType?: Maybe<PenaltyType>;
};

export type LoanPreviewAdditionalFeatures = {
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  collateral?: Maybe<Scalars['Boolean']>;
  insurance?: Maybe<Scalars['Boolean']>;
  isMonthlyInterestCompulsory?: Maybe<Scalars['Boolean']>;
  loanScheduleChangeOverride?: Maybe<Scalars['Boolean']>;
  overrideInterest?: Maybe<Scalars['Boolean']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultipleAccount?: Maybe<Scalars['Boolean']>;
};

export type LoanPreviewGeneralInformation = {
  loanName?: Maybe<Scalars['String']>;
  loanProduct?: Maybe<Scalars['String']>;
  loanSubType?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  natureOfLoanProduct?: Maybe<NatureOfLoanProduct>;
  productCode?: Maybe<Scalars['String']>;
};

export type LoanPreviewInstallment = {
  fine?: Maybe<Scalars['String']>;
  installmentNo?: Maybe<Scalars['Int']>;
  interestAmount?: Maybe<Scalars['String']>;
  principal?: Maybe<Scalars['String']>;
};

export type LoanPreviewLoanDetails = {
  appliedLoanAmount?: Maybe<Scalars['String']>;
  disburseDate?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Scalars['String']>;
  /**  Extra fields for repayment page */
  interestAmount?: Maybe<Scalars['String']>;
  interestGracePeriod?: Maybe<Scalars['Int']>;
  interestMethod?: Maybe<LoanInterestMethod>;
  interestRate?: Maybe<Scalars['Float']>;
  loanRepaymentScheme?: Maybe<LoanRepaymentScheme>;
  paymentFrequency?: Maybe<LoanProductInstallment>;
  principalGracePeriod?: Maybe<Scalars['Int']>;
  processingCharges?: Maybe<Array<Maybe<ServiceCharge>>>;
  tenure?: Maybe<Scalars['Int']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  totalCollateralValuation?: Maybe<Scalars['String']>;
  totalDisbursedAmount?: Maybe<Scalars['String']>;
  totalGuaranteeValuation?: Maybe<Scalars['String']>;
  totalProcessingChargesValuation?: Maybe<Scalars['String']>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
};

export type LoanPreviewRepaymentDetails = {
  lastPaymentDate?: Maybe<Scalars['String']>;
  nextInstallmentNo?: Maybe<Scalars['Int']>;
  remainingInstallments?: Maybe<Array<Maybe<LoanPreviewInstallment>>>;
  remainingInterest?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  remainingTotal?: Maybe<Scalars['String']>;
  totalInstallmentAmount?: Maybe<Scalars['String']>;
};

export type LoanPreviewStatistics = {
  remainingPayableAmount?: Maybe<Scalars['String']>;
  totalPaidAmount?: Maybe<Scalars['String']>;
  totalPayableAmount?: Maybe<Scalars['String']>;
};

export type LoanProduct = Base & {
  allowGurantee?: Maybe<Scalars['Boolean']>;
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  collateralTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  collateralValue?: Maybe<Array<Maybe<CollateralFormState>>>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate: Scalars['String'];
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  description?: Maybe<Scalars['String']>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id: Scalars['ID'];
  installmentFrequency?: Maybe<LoanProductInstallment>;
  insuranceType?: Maybe<Insurance>;
  interest?: Maybe<InterestRateType>;
  interestMaxGraceNumber?: Maybe<Scalars['Int']>;
  interestMethod?: Maybe<LoanInterestMethod>;
  isCollateralRequired?: Maybe<Scalars['Boolean']>;
  isInsuranceApplicable?: Maybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: Maybe<Scalars['Boolean']>;
  isPenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isRebateApplicable?: Maybe<Scalars['Boolean']>;
  isStaffProduct?: Maybe<Scalars['Boolean']>;
  isTenureApplicable?: Maybe<Scalars['Boolean']>;
  ledgerMapping?: Maybe<LedgerMappingFormState>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  loanScheduleChangeOverride?: Maybe<Scalars['Boolean']>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxLoanAmount?: Maybe<Scalars['Amount']>;
  maxPercentOfGurantee?: Maybe<Scalars['Float']>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  minimumLoanAmount?: Maybe<Scalars['Amount']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  noOfMember?: Maybe<Scalars['Int']>;
  noOfaccount?: Maybe<Scalars['Int']>;
  objState: ObjState;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penalty?: Maybe<LoanPenalty>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyRate?: Maybe<Scalars['Float']>;
  penaltyType?: Maybe<PenaltyType>;
  postingFrequency?: Maybe<LoanProductInstallment>;
  prematurePenaltySetup?: Maybe<PrematurePenaltyFormState>;
  principalMaxGraceNumber?: Maybe<Scalars['Int']>;
  productCode?: Maybe<ProductCodeType>;
  productCodeString?: Maybe<Scalars['String']>;
  productName: Scalars['String'];
  productNature: NatureOfLoanProduct;
  productSubType: Scalars['String'];
  productType: Scalars['ID'];
  rebate?: Maybe<Rebate>;
  repaymentScheme?: Maybe<Array<Maybe<LoanRepaymentScheme>>>;
  requiredDocuments?: Maybe<Array<Maybe<LoanRequiredDocuments>>>;
  supportMultipleAccounts?: Maybe<Scalars['Boolean']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  typeOfMember: Array<Maybe<KymMemberTypesEnum>>;
  updateInterest?: Maybe<Scalars['Boolean']>;
  waiveInterest?: Maybe<Scalars['Boolean']>;
};

export type LoanProductConnection = {
  edges: Array<LoanProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type LoanProductCriteria = {
  cooperativeType?: Maybe<Array<Maybe<Scalars['String']>>>;
  cooperativeUnion?: Maybe<Array<Maybe<Scalars['String']>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['String']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['String']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionType?: Maybe<Array<Maybe<Scalars['String']>>>;
  maritalStatus?: Maybe<Array<Maybe<Scalars['String']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LoanProductCriteriaResult = {
  data?: Maybe<LoanProductCriteria>;
  error?: Maybe<QueryError>;
};

export type LoanProductData = {
  data?: Maybe<LoanProduct>;
  error?: Maybe<QueryError>;
};

export type LoanProductEdge = {
  cursor: Scalars['Cursor'];
  node: LoanProduct;
};

export type LoanProductInactiveData = {
  id: Scalars['ID'];
  remarks: Scalars['String'];
};

export type LoanProductInactiveResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanProductsQuery>;
  recordId: Scalars['ID'];
};

export type LoanProductInput = {
  allowGurantee?: InputMaybe<Scalars['Boolean']>;
  allowPartialInstallment?: InputMaybe<Scalars['Boolean']>;
  collateralTypes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  collateralValue?: InputMaybe<Array<InputMaybe<CollateralInput>>>;
  cooperativeType?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  criteria?: InputMaybe<Array<InputMaybe<CriteriaSection>>>;
  description?: InputMaybe<Scalars['String']>;
  educationQualification?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  ethnicity?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  foreignEmployment?: InputMaybe<Scalars['Boolean']>;
  genderId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  installmentFrequency?: InputMaybe<LoanProductInstallment>;
  insuranceType?: InputMaybe<InsuranceType>;
  interest?: InputMaybe<InterestRate>;
  interestMaxGraceNumber?: InputMaybe<Scalars['Int']>;
  interestMethod?: InputMaybe<LoanInterestMethod>;
  isCollateralRequired?: InputMaybe<Scalars['Boolean']>;
  isInsuranceApplicable?: InputMaybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: InputMaybe<Scalars['Boolean']>;
  isPenaltyApplicable?: InputMaybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: InputMaybe<Scalars['Boolean']>;
  isRebateApplicable?: InputMaybe<Scalars['Boolean']>;
  isStaffProduct?: InputMaybe<Scalars['Boolean']>;
  isTenureApplicable?: InputMaybe<Scalars['Boolean']>;
  ledgerMapping?: InputMaybe<LedgerMapping>;
  loanProcessingCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  loanScheduleChangeOverride?: InputMaybe<Scalars['Boolean']>;
  maritalStatusId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  maxAge?: InputMaybe<Scalars['Int']>;
  maxLoanAmount?: InputMaybe<Scalars['Amount']>;
  maxPercentOfGurantee?: InputMaybe<Scalars['Float']>;
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minimumLoanAmount?: InputMaybe<Scalars['Amount']>;
  natureOFBusinessCoop?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyDayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
  penaltyType?: InputMaybe<PenaltyType>;
  postingFrequency?: InputMaybe<LoanProductInstallment>;
  prematurePenaltySetup?: InputMaybe<PrematurePenalty>;
  principalMaxGraceNumber?: InputMaybe<Scalars['Int']>;
  productCode?: InputMaybe<ProductCode>;
  productName?: InputMaybe<Scalars['String']>;
  productNature?: InputMaybe<NatureOfLoanProduct>;
  productSubType?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['ID']>;
  rebate?: InputMaybe<RebateTypeInput>;
  repaymentScheme?: InputMaybe<Array<InputMaybe<LoanRepaymentScheme>>>;
  requiredDocuments?: InputMaybe<Array<InputMaybe<LoanRequiredDocuments>>>;
  supportMultipleAccounts?: InputMaybe<Scalars['Boolean']>;
  tenureUnit?: InputMaybe<FrequencyTenure>;
  typeOfMember?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  updateInterest?: InputMaybe<Scalars['Boolean']>;
  waiveInterest?: InputMaybe<Scalars['Boolean']>;
};

export enum LoanProductInstallment {
  Daily = 'DAILY',
  HalfYearly = 'HALF_YEARLY',
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY',
}

export type LoanProductList = {
  allowed?: Maybe<Array<Maybe<LoanProduct>>>;
  error?: Maybe<QueryError>;
  notAllowed?: Maybe<Array<Maybe<LoanProductListData>>>;
};

export type LoanProductListData = {
  data?: Maybe<LoanProduct>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LoanProductMinimal = {
  id: Scalars['ID'];
  productName: Scalars['String'];
};

export type LoanProductSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<DepositProductStatus>;
  query?: InputMaybe<Scalars['String']>;
};

export enum LoanProductSubType {
  AgricultureBusiness = 'AGRICULTURE_BUSINESS',
  BigIndustrial = 'BIG_INDUSTRIAL',
  BioGas = 'BIO_GAS',
  BusinessLineOfCredit = 'BUSINESS_LINE_OF_CREDIT',
  CashCropsFraming = 'CASH_CROPS_FRAMING',
  ConstructionEquipmentBusiness = 'CONSTRUCTION_EQUIPMENT_BUSINESS',
  ConsumerGoodsBusiness = 'CONSUMER_GOODS_BUSINESS',
  CooperativePromotion = 'COOPERATIVE_PROMOTION',
  Emergency = 'EMERGENCY',
  ForeignEducation = 'FOREIGN_EDUCATION',
  ForeignEmployeeDependentVisa = 'FOREIGN_EMPLOYEE_DEPENDENT_VISA',
  ForeignEmployeeWorkingVisa = 'FOREIGN_EMPLOYEE_WORKING_VISA',
  FruitsAndHorticulture = 'FRUITS_AND_HORTICULTURE',
  HandicraftPromotional = 'HANDICRAFT_PROMOTIONAL',
  HigherEducation = 'HIGHER_EDUCATION',
  HirePurchaseLoan_2Wheeler = 'HIRE_PURCHASE_LOAN_2_WHEELER',
  HirePurchaseLoan_4Wheeler = 'HIRE_PURCHASE_LOAN_4_WHEELER',
  HirePurchaseLoanHeavyEquipment = 'HIRE_PURCHASE_LOAN_HEAVY_EQUIPMENT',
  HomeAppliance = 'HOME_APPLIANCE',
  HomeConstructionAndMaintenance = 'HOME_CONSTRUCTION_AND_MAINTENANCE',
  HomeExpenses = 'HOME_EXPENSES',
  HoneyBeeFarming = 'HONEY_BEE_FARMING',
  HousePurchase = 'HOUSE_PURCHASE',
  LandAndBuildingBusiness = 'LAND_AND_BUILDING_BUSINESS',
  LandPurchase = 'LAND_PURCHASE',
  LineOfCredit = 'LINE_OF_CREDIT',
  LiquidityManagement = 'LIQUIDITY_MANAGEMENT',
  Livestock = 'LIVESTOCK',
  LivestockBusiness = 'LIVESTOCK_BUSINESS',
  MicroEnterprisePromotion = 'MICRO_ENTERPRISE_PROMOTION',
  MicroEntrepreneur = 'MICRO_ENTREPRENEUR',
  MicroEntrepreneurGroup = 'MICRO_ENTREPRENEUR_GROUP',
  PoultryFarming = 'POULTRY_FARMING',
  ReligiousWork = 'RELIGIOUS_WORK',
  ServiceBusiness = 'SERVICE_BUSINESS',
  ShortTerm = 'SHORT_TERM',
  SmallAndMediumEnterprises = 'SMALL_AND_MEDIUM_ENTERPRISES',
  SmallIndustrial = 'SMALL_INDUSTRIAL',
  SocialWork = 'SOCIAL_WORK',
  SolarEnergy = 'SOLAR_ENERGY',
  SpiceProduction = 'SPICE_PRODUCTION',
  StaffHirepurchase = 'STAFF_HIREPURCHASE',
  StaffLandAndBuilding = 'STAFF_LAND_AND_BUILDING',
  StaffPersonal = 'STAFF_PERSONAL',
  StationaryBusiness = 'STATIONARY_BUSINESS',
  TechnicalEducation = 'TECHNICAL_EDUCATION',
  VegetableAndSeasonalFarming = 'VEGETABLE_AND_SEASONAL_FARMING',
  YouthSelfEmployment = 'YOUTH_SELF__EMPLOYMENT',
}

export type LoanProductSubTypeInput = {
  id?: InputMaybe<Scalars['ID']>;
  productSubType?: InputMaybe<Scalars['String']>;
  productTypeID?: InputMaybe<Scalars['ID']>;
};

export enum LoanProductType {
  InvestmentInAgriculturalSector = 'INVESTMENT_IN_AGRICULTURAL_SECTOR',
  InvestmentInIndustrialSector = 'INVESTMENT_IN_INDUSTRIAL_SECTOR',
  InvestmentInOtherSector = 'INVESTMENT_IN_OTHER_SECTOR',
}

export type LoanProductTypeInput = {
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  productType?: InputMaybe<Scalars['String']>;
};

export type LoanProductsMutation = {
  makeInactive?: Maybe<LoanProductInactiveResult>;
  upsert?: Maybe<LoanProductsResult>;
};

export type LoanProductsMutationMakeInactiveArgs = {
  data?: InputMaybe<LoanProductInactiveData>;
};

export type LoanProductsMutationUpsertArgs = {
  data?: InputMaybe<LoanProductInput>;
  id?: InputMaybe<Scalars['ID']>;
};

export type LoanProductsQuery = {
  formState?: Maybe<LoanProductData>;
  getLoanAccountlist?: Maybe<LoanAccountConnection>;
  getProductCriteria?: Maybe<LoanProductCriteriaResult>;
  getProductDetail?: Maybe<LoanProductData>;
  list?: Maybe<LoanProductConnection>;
};

export type LoanProductsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type LoanProductsQueryGetLoanAccountlistArgs = {
  filter?: InputMaybe<LoanAccountSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanProductsQueryGetProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type LoanProductsQueryGetProductDetailArgs = {
  id: Scalars['ID'];
};

export type LoanProductsQueryListArgs = {
  filter?: InputMaybe<LoanProductSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanProductsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanProductsQuery>;
  record?: Maybe<LoanProduct>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanRepaymentAccountMode = {
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanRepaymentBankVoucher = {
  bank: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
  voucher_no: Scalars['String'];
};

export type LoanRepaymentConnection = {
  edges?: Maybe<Array<LoanRepaymentEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type LoanRepaymentDetail = {
  amount: Scalars['String'];
  id: Scalars['String'];
  loanAccountId: Scalars['String'];
  loanAccountName: Scalars['String'];
  loanProductId: Scalars['String'];
  loanProductName: Scalars['String'];
  memberCode?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  paymentDate: Scalars['String'];
};

export type LoanRepaymentEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LoanRepaymentDetail>;
};

export type LoanRepaymentFilter = {
  loanAccountId?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
};

export type LoanRepaymentInput = {
  account?: InputMaybe<LoanRepaymentAccountMode>;
  amountPaid: Scalars['String'];
  bankVoucher?: InputMaybe<LoanRepaymentBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  isSuspicious?: InputMaybe<Scalars['Boolean']>;
  loanAccountId: Scalars['ID'];
  memberId: Scalars['ID'];
  paymentMethod: LoanRepaymentMethod;
  suspicionRemarks?: InputMaybe<Scalars['String']>;
  suspicionTopologies?: InputMaybe<Array<InputMaybe<SuspiciousTransactionTopology>>>;
};

export enum LoanRepaymentMethod {
  Account = 'ACCOUNT',
  BankVoucher = 'BANK_VOUCHER',
  Cash = 'CASH',
}

export type LoanRepaymentRecord = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  installmentNo?: Maybe<Scalars['String']>;
  interestAmount?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  paymentMethod?: Maybe<LoanRepaymentMethod>;
  penaltyAmount?: Maybe<Scalars['String']>;
  principalAmount?: Maybe<Scalars['String']>;
  rebateAmount?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type LoanRepaymentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanRepaymentRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum LoanRepaymentScheme {
  Emi = 'EMI',
  Epi = 'EPI',
  Flat = 'FLAT',
}

export type LoanRepaymentView = {
  fine?: Maybe<Scalars['String']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  installmentAmount?: Maybe<Scalars['String']>;
  installmentDetails?: Maybe<Array<Maybe<InstallmentDetailsView>>>;
  installmentNo?: Maybe<Scalars['String']>;
  loanAccountId?: Maybe<Scalars['String']>;
  loanAccountName?: Maybe<Scalars['String']>;
  loanSubType?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  objState: Scalars['String'];
  paymentMode?: Maybe<Scalars['String']>;
  repaymentDate?: Maybe<Scalars['String']>;
  repaymentId: Scalars['ID'];
  teller?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalRepaymentAmount?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
};

export type LoanRepaymentViewResult = {
  data?: Maybe<LoanRepaymentView>;
  error?: Maybe<QueryError>;
};

export type LoanReport = {
  loanAgingStatementReport?: Maybe<LoanAgingStatementReportResult>;
  loanBalanceReport: LoanBalanceReportResult;
  loanStatementReport?: Maybe<ReportResult>;
};

export type LoanReportLoanAgingStatementReportArgs = {
  data?: InputMaybe<LoanAgingStatementInput>;
};

export type LoanReportLoanBalanceReportArgs = {
  data: LoanBalanceFilterData;
};

export type LoanReportLoanStatementReportArgs = {
  data: LoanStatementReportSettings;
};

export type LoanRequestConnection = {
  edges?: Maybe<Array<Maybe<LoanRequestEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type LoanRequestEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<LoanRequestList>;
};

export type LoanRequestList = {
  approvalStatus: RequestStatus;
  id: Scalars['String'];
  lastModifiedDate: Scalars['String'];
  loanAmount: Scalars['String'];
  memberAge?: Maybe<Scalars['Int']>;
  memberCode?: Maybe<Scalars['String']>;
  memberGender?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNumber: Scalars['String'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
};

export enum LoanRequiredDocuments {
  Citizenship = 'CITIZENSHIP',
  Form = 'FORM',
  LoanChangeDocument = 'LOAN_CHANGE_DOCUMENT',
  PolicyDocument = 'POLICY_DOCUMENT',
}

export type LoanSettingsMutation = {
  general?: Maybe<LoanSettingsResult>;
  insuranceScheme?: Maybe<LoanSettingsResult>;
  productType?: Maybe<LoanSettingsResult>;
};

export type LoanSettingsMutationGeneralArgs = {
  data?: InputMaybe<LoanGeneralSettingsInput>;
};

export type LoanSettingsMutationInsuranceSchemeArgs = {
  data?: InputMaybe<Array<InputMaybe<LoanInsuranceSchemeInput>>>;
};

export type LoanSettingsMutationProductTypeArgs = {
  data?: InputMaybe<LoanSettingsProductTypeInput>;
};

export type LoanSettingsNatureOfProductData = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  natureOfProduct?: Maybe<Scalars['String']>;
};

export type LoanSettingsProductSubTypeData = {
  id?: Maybe<Scalars['ID']>;
  productSubType?: Maybe<Scalars['String']>;
  productTypeID?: Maybe<Scalars['ID']>;
};

export type LoanSettingsProductType = {
  loanProducts?: Maybe<Array<Maybe<LoanProductMinimal>>>;
  multipleProductSubTypes?: Maybe<Array<Maybe<LoanSettingsProductSubTypeData>>>;
  natureOfProduct?: Maybe<Array<Maybe<LoanSettingsNatureOfProductData>>>;
  productSubTypes?: Maybe<Array<Maybe<LoanSettingsProductSubTypeData>>>;
  productTypes?: Maybe<Array<Maybe<LoanSettingsProductTypeData>>>;
};

export type LoanSettingsProductTypeLoanProductsArgs = {
  subTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type LoanSettingsProductTypeMultipleProductSubTypesArgs = {
  productTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type LoanSettingsProductTypeProductSubTypesArgs = {
  productTypeID?: InputMaybe<Scalars['String']>;
};

export type LoanSettingsProductTypeData = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  productType?: Maybe<Scalars['String']>;
};

export type LoanSettingsProductTypeInput = {
  natureOfProduct?: InputMaybe<Array<InputMaybe<LoanNatureOfProductInput>>>;
  productSubTypes?: InputMaybe<Array<InputMaybe<LoanProductSubTypeInput>>>;
  productTypes?: InputMaybe<Array<InputMaybe<LoanProductTypeInput>>>;
};

export type LoanSettingsQuery = {
  general?: Maybe<LoanGeneralSettings>;
  insuranceSchemes?: Maybe<Array<Maybe<LoanInsuranceScheme>>>;
  productType?: Maybe<LoanSettingsProductType>;
};

export type LoanSettingsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanSettingsQuery>;
  record?: Maybe<LoanSettingsQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanStatement = {
  date?: Maybe<Scalars['Localized']>;
  disbursePrinciple?: Maybe<Scalars['String']>;
  discount?: Maybe<Scalars['String']>;
  finePaid?: Maybe<Scalars['String']>;
  interestPaid?: Maybe<Scalars['String']>;
  paidPrinciple?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  remainingPrinciple?: Maybe<Scalars['String']>;
  txnId?: Maybe<Scalars['String']>;
};

export type LoanStatementFooter = {
  disbursePrincipleTotal?: Maybe<Scalars['String']>;
  discountTotal?: Maybe<Scalars['String']>;
  interestPaidTotal?: Maybe<Scalars['String']>;
  paidPrincipleTotal?: Maybe<Scalars['String']>;
  penaltyPaidTotal?: Maybe<Scalars['String']>;
  remainingPrincipleTotal?: Maybe<Scalars['String']>;
};

export type LoanStatementReport = {
  footer?: Maybe<LoanStatementFooter>;
  loanStatement?: Maybe<Array<Maybe<LoanStatement>>>;
  meta?: Maybe<LoanAccReportDetails>;
};

export type LoanStatementReportSettings = {
  loanAccountId: Scalars['ID'];
  memberId: Scalars['ID'];
  period: LocalizedDateFilter;
};

export type LocalizationExample = {
  name?: Maybe<Scalars['Localized']>;
};

export type LocalizedDateFilter = {
  from: Scalars['Localized'];
  to: Scalars['Localized'];
};

export type LocationCoordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type LocationCoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type LoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type LoginRecord = {
  data: UserData;
  token: AuthToken;
};

export type LoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<LoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MBankingTransactionData = {
  amount?: Maybe<Scalars['String']>;
  destAccount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  initiatorName?: Maybe<Scalars['String']>;
  narration?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
  srcAccount?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  transDate?: Maybe<Scalars['Localized']>;
  transThrough?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
};

export type MBankingTransactionFilter = {
  filter?: InputMaybe<MBankingTransactionFilterData>;
  period: LocalizedDateFilter;
};

export type MBankingTransactionFilterData = {
  transactionType?: InputMaybe<Array<InputMaybe<TransactionTypeFilter>>>;
};

export type MBankingTransactionResult = {
  data?: Maybe<Array<Maybe<MBankingTransactionData>>>;
  error?: Maybe<QueryError>;
};

export type MeResult = {
  data?: Maybe<UserData>;
  error?: Maybe<QueryError>;
};

export type Member = Base & {
  activeDate?: Maybe<Scalars['Localized']>;
  address?: Maybe<Address>;
  branch?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dateJoined?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['Localized']>;
  objState: ObjState;
  profile?: Maybe<MemberProfile>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  share?: Maybe<MemberShare>;
  signaturePicUrl?: Maybe<Scalars['String']>;
  signaturepic?: Maybe<Scalars['String']>;
  type: KymMemberTypesEnum;
};

export type MemberAccountData = {
  depositAccount?: Maybe<Array<Maybe<DepositAccount>>>;
  loanAccount?: Maybe<Array<Maybe<LoanAccount>>>;
  memberId?: Maybe<Scalars['String']>;
};

export type MemberAccountDataDepositAccountArgs = {
  filter?: InputMaybe<Array<InputMaybe<NatureOfDepositProduct>>>;
  includeActiveAccountsOnly?: InputMaybe<Scalars['Boolean']>;
};

export type MemberAccountDetails = {
  accountBalance?: Maybe<Scalars['String']>;
  accountBranch?: Maybe<Scalars['String']>;
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountOpenDate?: Maybe<Scalars['Localized']>;
  accountType?: Maybe<NatureOfDepositProduct>;
  allowLoan?: Maybe<Scalars['Boolean']>;
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  alternativeChannel?: Maybe<Scalars['Boolean']>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  autoOpen?: Maybe<Scalars['Boolean']>;
  chequeIssue?: Maybe<Scalars['Boolean']>;
  defaultAccountType?: Maybe<DefaultAccountType>;
  guaranteedAmount?: Maybe<Scalars['String']>;
  installmentAmount?: Maybe<Scalars['String']>;
  insurance?: Maybe<Scalars['Boolean']>;
  interestAccrued?: Maybe<Scalars['String']>;
  interestEarned?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['Float']>;
  isForMinors?: Maybe<Scalars['Boolean']>;
  isMandatory?: Maybe<Scalars['Boolean']>;
  member?: Maybe<Member>;
  monthlyInterestCompulsory?: Maybe<Scalars['Boolean']>;
  productName?: Maybe<Scalars['String']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultiple?: Maybe<Scalars['Boolean']>;
  totalDepositBalance?: Maybe<Scalars['String']>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type MemberAccountMinView = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  interestBooked?: Maybe<Scalars['String']>;
  interestEarned?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  productType?: Maybe<Scalars['String']>;
  subscriptionDate?: Maybe<Scalars['Localized']>;
  totalBalance?: Maybe<Scalars['String']>;
};

export type MemberAccountResult = {
  data?: Maybe<MemberAccountData>;
  error?: Maybe<QueryError>;
  memberId?: Maybe<Scalars['String']>;
};

export type MemberActivateCheck = {
  isAccountUpdated: Scalars['Boolean'];
  isFeePaid: Scalars['Boolean'];
  isShareIssued: Scalars['Boolean'];
};

export type MemberActivateMutation = {
  membershipPayment?: Maybe<MembershipPaymentResult>;
};

export type MemberActivateMutationMembershipPaymentArgs = {
  data?: InputMaybe<MembershipPaymentInput>;
  memberId: Scalars['ID'];
};

export type MemberActivateQuery = {
  accountUpdateCheck: Scalars['Boolean'];
  getMembershipFee?: Maybe<MembershipFeeQueryResult>;
  memberActivateChecks?: Maybe<MemberActivateCheck>;
};

export type MemberActivateQueryAccountUpdateCheckArgs = {
  accountId: Scalars['ID'];
  memberId: Scalars['ID'];
};

export type MemberActivateQueryGetMembershipFeeArgs = {
  memberID: Scalars['ID'];
};

export type MemberActivateQueryMemberActivateChecksArgs = {
  memberId: Scalars['ID'];
};

export type MemberActiveData = {
  cooperative?: Maybe<Scalars['Boolean']>;
  cooperativeUnion?: Maybe<Scalars['Boolean']>;
  individual?: Maybe<Scalars['Boolean']>;
  institution?: Maybe<Scalars['Boolean']>;
};

export type MemberActiveInput = {
  cooperative?: InputMaybe<Scalars['Boolean']>;
  cooperativeUnion?: InputMaybe<Scalars['Boolean']>;
  individual?: InputMaybe<Scalars['Boolean']>;
  institution?: InputMaybe<Scalars['Boolean']>;
};

export type MemberAgeRange = {
  max?: InputMaybe<Scalars['Int']>;
  min?: InputMaybe<Scalars['Int']>;
};

export type MemberBasicInfoView =
  | CooperativeBasicMinInfo
  | CooperativeUnionBasicMinInfo
  | IndividualBasicMinInfo
  | InstitutionBasicMinInfo;

export type MemberChargeData = {
  charge: Scalars['Int'];
  ledgerId: Scalars['ID'];
  memberType: KymMemberTypesEnum;
};

export type MemberChargeInput = {
  charge: Scalars['Int'];
  ledgerId: Scalars['ID'];
  memberType: KymMemberTypesEnum;
};

export type MemberChequeDetails = {
  accountName?: Maybe<Scalars['String']>;
  cancelled?: Maybe<Scalars['Int']>;
  issued?: Maybe<Scalars['Int']>;
  left?: Maybe<Scalars['Int']>;
  used?: Maybe<Scalars['Int']>;
};

export type MemberClassificationFilter = {
  period: LocalizedDateFilter;
};

export type MemberClassificationReportAddressData = {
  district?: Maybe<Array<Maybe<ReportEntry>>>;
  province?: Maybe<Array<Maybe<ReportEntry>>>;
};

export type MemberClassificationReportData = {
  address?: Maybe<MemberClassificationReportAddressData>;
  age?: Maybe<Array<Maybe<ReportEntry>>>;
  education?: Maybe<Array<Maybe<ReportEntry>>>;
  gender?: Maybe<Array<Maybe<ReportEntry>>>;
  income?: Maybe<Array<Maybe<ReportEntry>>>;
  memberCategory?: Maybe<Array<Maybe<ReportEntry>>>;
  occupation?: Maybe<Array<Maybe<ReportEntry>>>;
};

export type MemberClassificationReportResult = {
  data?: Maybe<MemberClassificationReportData>;
  error?: Maybe<QueryError>;
};

export type MemberCode = {
  initialNo?: Maybe<Scalars['String']>;
  noOfDigits?: Maybe<Scalars['Int']>;
  prefix?: Maybe<Scalars['String']>;
};

export type MemberCodeInput = {
  initialNo?: InputMaybe<Scalars['String']>;
  noOfDigits?: InputMaybe<Scalars['Int']>;
  prefix?: InputMaybe<Scalars['String']>;
};

export type MemberDeleteDraftResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MemberDetailsResult = {
  data?: Maybe<Member>;
};

export type MemberDocumentDetails = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type MemberGraphData = {
  data?: Maybe<Array<Maybe<GraphData>>>;
  periodType?: Maybe<PeriodTypeEnum>;
};

export enum MemberIdentityLevel {
  General = 'GENERAL',
  Mid = 'MID',
  Vip = 'VIP',
}

export type MemberInactivateQuery = {
  accountCloseCheck: Scalars['Boolean'];
  inactivateCheck?: Maybe<InactivateMemberCheck>;
};

export type MemberInactivateQueryAccountCloseCheckArgs = {
  accountId: Scalars['ID'];
  accounttype: AccountTypeFilter;
  memberId: Scalars['ID'];
};

export type MemberInactivateQueryInactivateCheckArgs = {
  memberId: Scalars['ID'];
};

export type MemberInactiveResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymEntryQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MemberIndividualData = {
  SpouseName?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  contactNo?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  fatherName?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['Boolean']>;
  grandFatherName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['Boolean']>;
  profession?: Maybe<Scalars['String']>;
  shareInfo?: Maybe<ShareInformation>;
};

export type MemberMutation = {
  activateMember?: Maybe<MemberActivateMutation>;
  cooperative?: Maybe<KymCooperativeMutation>;
  cooperativeUnion?: Maybe<KymCoopUnionMutation>;
  deleteDraft?: Maybe<MemberDeleteDraftResult>;
  entry: KymEntryMutation;
  generateExcel: Scalars['String'];
  individual?: Maybe<KymIndMutation>;
  institution?: Maybe<KymInsMutation>;
  makeInactive?: Maybe<MemberInactiveResult>;
  officialUse?: Maybe<OfficialUseResult>;
  /**  id is the ID of member  */
  translate?: Maybe<TranslateData>;
};

export type MemberMutationCooperativeArgs = {
  id: Scalars['ID'];
};

export type MemberMutationDeleteDraftArgs = {
  memberId: Scalars['ID'];
};

export type MemberMutationEntryArgs = {
  memberId: Scalars['String'];
};

export type MemberMutationGenerateExcelArgs = {
  filename: Scalars['String'];
  id: Scalars['ID'];
};

export type MemberMutationIndividualArgs = {
  id: Scalars['ID'];
};

export type MemberMutationInstitutionArgs = {
  id: Scalars['ID'];
};

export type MemberMutationMakeInactiveArgs = {
  memberId: Scalars['ID'];
};

export type MemberMutationOfficialUseArgs = {
  data: OfficialUseInputData;
};

export type MemberMutationTranslateArgs = {
  data: TranslateInput;
  memberId: Scalars['ID'];
};

export type MemberOtherData = {
  address?: Maybe<Address>;
  authPersonName?: Maybe<Scalars['String']>;
  balanceSheet?: Maybe<Scalars['String']>;
  contactNo?: Maybe<Scalars['String']>;
  doe?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Boolean']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['String']>;
  post?: Maybe<Scalars['String']>;
  shareInfo?: Maybe<ShareInformation>;
  stamp?: Maybe<Scalars['Boolean']>;
  totalMember?: Maybe<Scalars['String']>;
  typeOfInstitution?: Maybe<Scalars['String']>;
  workingArea?: Maybe<Scalars['String']>;
};

export type MemberOverviewAccountsView = {
  accounts?: Maybe<Array<Maybe<MemberAccountMinView>>>;
  payments?: Maybe<Array<Maybe<MemberPaymentView>>>;
};

export type MemberOverviewBio = CoopBio | CoopUnionBio | IndividualBio | InstitutionBio;

export type MemberOverviewData = {
  accounts?: Maybe<MemberOverviewAccountsView>;
  bio?: Maybe<MemberOverviewBio>;
  cheques?: Maybe<Array<Maybe<MemberChequeDetails>>>;
  loan?: Maybe<MemberOverviewLoanView>;
  overview?: Maybe<OverviewView>;
  reports?: Maybe<MemberOverviewReportView>;
  share?: Maybe<MemberOverviewShareView>;
};

export type MemberOverviewGraphs = {
  deposit?: Maybe<MemberGraphData>;
  withdraw?: Maybe<MemberGraphData>;
};

export type MemberOverviewLoanView = {
  accounts?: Maybe<Array<Maybe<MemberAccountMinView>>>;
  payments?: Maybe<Array<Maybe<MemberPaymentView>>>;
};

export type MemberOverviewReportView = {
  list?: Maybe<Array<Maybe<MemberReportView>>>;
};

export type MemberOverviewResult = {
  data?: Maybe<MemberOverviewData>;
  error?: Maybe<QueryError>;
};

export type MemberOverviewShareView = {
  balanceDetails?: Maybe<ShareRegisterConnection>;
  registerDetails?: Maybe<Array<Maybe<ShareRegisterDetails>>>;
  shareInfo?: Maybe<ShareInfoView>;
};

export type MemberPaymentView = {
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  installmentNo?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
};

export type MemberProfile =
  | CooperativeUnionMember
  | KymCooperativeFormStateQuery
  | KymIndFormStateQuery
  | KymInsFormStateQuery;

export type MemberQuery = {
  activateMember?: Maybe<MemberActivateQuery>;
  cooperative?: Maybe<KymCooperativeQuery>;
  cooperativeUnion?: Maybe<KymCoopUnionQuery>;
  details: MemberDetailsResult;
  entry?: Maybe<KymEntryQuery>;
  getAllAccounts?: Maybe<MemberAccountResult>;
  inactivateMember?: Maybe<MemberInactivateQuery>;
  individual?: Maybe<KymIndQuery>;
  institution?: Maybe<KymInsQuery>;
  list: KymMemberListConnection;
  memberOverview?: Maybe<MemberOverviewResult>;
  memberPDF: Scalars['String'];
  memberTypes: MemberTypeResult;
  officialUse?: Maybe<OfficialUseResult>;
  translate: TranslateQueryResult;
};

export type MemberQueryCooperativeArgs = {
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
};

export type MemberQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type MemberQueryEntryArgs = {
  membeId: Scalars['String'];
};

export type MemberQueryGetAllAccountsArgs = {
  memberId: Scalars['ID'];
};

export type MemberQueryIndividualArgs = {
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['String'];
};

export type MemberQueryInstitutionArgs = {
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
};

export type MemberQueryListArgs = {
  filter?: InputMaybe<KymMemberDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type MemberQueryMemberOverviewArgs = {
  id: Scalars['ID'];
};

export type MemberQueryMemberPdfArgs = {
  id: Scalars['ID'];
};

export type MemberQueryOfficialUseArgs = {
  id: Scalars['ID'];
};

export type MemberQueryTranslateArgs = {
  id: Scalars['ID'];
};

export type MemberRecentTransactionView = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  noOfShares?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  txnType?: Maybe<MemberRecentTransactionViewTxnType>;
};

export enum MemberRecentTransactionViewTxnType {
  Credit = 'CREDIT',
  Debit = 'DEBIT',
}

export type MemberRegFilters = {
  gender?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  institutionType?: InputMaybe<Scalars['ID']>;
  memberType?: InputMaybe<Array<InputMaybe<MemberType>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type MemberRegistrationReport = {
  individual?: Maybe<Array<Maybe<MemberIndividualData>>>;
  other?: Maybe<Array<Maybe<MemberOtherData>>>;
};

export type MemberRegistrationReportData = {
  filter?: InputMaybe<MemberRegFilters>;
  period: LocalizedDateFilter;
};

export type MemberRegistrationReportResult = {
  data?: Maybe<MemberRegistrationReport>;
  error?: Maybe<QueryError>;
};

export type MemberReport = {
  activeInactiveMemberReport?: Maybe<ReportResult>;
  kymStatusReport?: Maybe<KymStatusReportResult>;
  memberClassificationReport: MemberClassificationReportResult;
  memberRegistrationReport?: Maybe<MemberRegistrationReportResult>;
};

export type MemberReportActiveInactiveMemberReportArgs = {
  data?: InputMaybe<ActiveInactiveMemberReportData>;
};

export type MemberReportKymStatusReportArgs = {
  data?: InputMaybe<KymStatusReportFilter>;
};

export type MemberReportMemberClassificationReportArgs = {
  data: MemberClassificationFilter;
};

export type MemberReportMemberRegistrationReportArgs = {
  data?: InputMaybe<MemberRegistrationReportData>;
};

export type MemberReportFilters = {
  ageRange?: InputMaybe<MemberAgeRange>;
  gender?: InputMaybe<Scalars['ID']>;
  institutionType?: InputMaybe<Scalars['ID']>;
  memberType?: InputMaybe<MemberType>;
  occupation?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<MemberStatus>;
};

export type MemberReportView = {
  category?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  reportName?: Maybe<Scalars['String']>;
};

export type MemberRiskData = {
  generalRisk?: Maybe<Scalars['Int']>;
  highRisk?: Maybe<Scalars['Int']>;
  mediumRisk?: Maybe<Scalars['Int']>;
};

export type MemberRiskInput = {
  generalRisk?: InputMaybe<Scalars['Int']>;
  highRisk?: InputMaybe<Scalars['Int']>;
  mediumRisk?: InputMaybe<Scalars['Int']>;
};

export type MemberShare = {
  history?: Maybe<Array<Maybe<ShareRegister>>>;
  summary?: Maybe<ShareBalance>;
};

export type MemberStatisticsView = {
  accountBalance?: Maybe<Scalars['String']>;
  loanBalance?: Maybe<Scalars['String']>;
  totalShareValue?: Maybe<Scalars['String']>;
};

export enum MemberStatus {
  Active = 'ACTIVE',
  All = 'ALL',
  Inactive = 'INACTIVE',
}

export enum MemberType {
  All = 'ALL',
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
  Individual = 'INDIVIDUAL',
  Institution = 'INSTITUTION',
}

export type MemberTypeResult = {
  data?: Maybe<Array<Maybe<KymMemberTypes>>>;
  error?: Maybe<QueryError>;
};

export type MembershipFeeQueryResult = {
  data?: Maybe<MemberChargeData>;
  error?: Maybe<QueryError>;
};

export type MembershipPaymentInput = {
  amount?: InputMaybe<Scalars['String']>;
  bankDeposit?: InputMaybe<BankDepositData>;
  cashData?: InputMaybe<CashDepositData>;
  depositedBy?: InputMaybe<DepositedBy>;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  otherName?: InputMaybe<Scalars['String']>;
  other_doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentMode: DepositPaymentType;
  remark?: InputMaybe<Scalars['String']>;
  sourceFund?: InputMaybe<Scalars['String']>;
  withdrawSlipData?: InputMaybe<WithdrawSlipDepositData>;
};

export type MembershipPaymentRecord = {
  id: Scalars['ID'];
};

export type MembershipPaymentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<MemberQuery>;
  record?: Maybe<MembershipPaymentRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MembershipRequest = {
  dateOfBirth?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  phoneNumber?: Maybe<Scalars['String']>;
  requestedDate?: Maybe<Scalars['Localized']>;
  status?: Maybe<RequestStatus>;
};

export type MembershipRequestConnection = {
  edges?: Maybe<Array<Maybe<MembershipRequestEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type MembershipRequestEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<MembershipRequest>;
};

export type MinMaxFilter = {
  max?: InputMaybe<Scalars['String']>;
  min?: InputMaybe<Scalars['String']>;
};

export enum MinorWiseFilter {
  All = 'ALL',
  MinorProduct = 'MINOR_PRODUCT',
  NotMinorProduct = 'NOT_MINOR_PRODUCT',
}

export type MobileBankingReport = {
  mBankingExpiryReport?: Maybe<EbankingRegistrationReportResult>;
  mBankingTransactionReport?: Maybe<MBankingTransactionResult>;
  mbankingRegistrationReport?: Maybe<EbankingRegistrationReportResult>;
};

export type MobileBankingReportMBankingExpiryReportArgs = {
  data?: InputMaybe<EbankingReportFilter>;
};

export type MobileBankingReportMBankingTransactionReportArgs = {
  data?: InputMaybe<MBankingTransactionFilter>;
};

export type MobileBankingReportMbankingRegistrationReportArgs = {
  data?: InputMaybe<EbankingReportFilter>;
};

export type MonthlyDividendRate = {
  eightMonth?: Maybe<Scalars['Float']>;
  eleventhMonth?: Maybe<Scalars['Float']>;
  fifthMonth?: Maybe<Scalars['Float']>;
  firstMonth?: Maybe<Scalars['Float']>;
  fourthMonth?: Maybe<Scalars['Float']>;
  ninthMonth?: Maybe<Scalars['Float']>;
  secondMonth?: Maybe<Scalars['Float']>;
  seventhMonth?: Maybe<Scalars['Float']>;
  sixthMonth?: Maybe<Scalars['Float']>;
  tenthMonth?: Maybe<Scalars['Float']>;
  thirdMonth?: Maybe<Scalars['Float']>;
  twelfthMonth?: Maybe<Scalars['Float']>;
};

export type MonthlyDividendRateInput = {
  eightMonth?: InputMaybe<Scalars['Float']>;
  eleventhMonth?: InputMaybe<Scalars['Float']>;
  fifthMonth?: InputMaybe<Scalars['Float']>;
  firstMonth?: InputMaybe<Scalars['Float']>;
  fourthMonth?: InputMaybe<Scalars['Float']>;
  ninthMonth?: InputMaybe<Scalars['Float']>;
  secondMonth?: InputMaybe<Scalars['Float']>;
  seventhMonth?: InputMaybe<Scalars['Float']>;
  sixthMonth?: InputMaybe<Scalars['Float']>;
  tenthMonth?: InputMaybe<Scalars['Float']>;
  thirdMonth?: InputMaybe<Scalars['Float']>;
  twelfthMonth?: InputMaybe<Scalars['Float']>;
};

export enum Months {
  April = 'APRIL',
  August = 'AUGUST',
  December = 'DECEMBER',
  February = 'FEBRUARY',
  January = 'JANUARY',
  July = 'JULY',
  June = 'JUNE',
  March = 'MARCH',
  May = 'MAY',
  November = 'NOVEMBER',
  October = 'OCTOBER',
  September = 'SEPTEMBER',
}

export type Municipality = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
  wards: Array<Scalars['Int']>;
};

export type Mutation = {
  account: DepositLoanAccountMutation;
  accounting: AccountingMutation;
  alternativeChannel?: Maybe<AlternativeChannelMutation>;
  auth: AuthMutation;
  bank: BankMutation;
  document: DocumentMutation;
  example: ExampleMutation;
  inventory: InventoryMutation;
  loanAccount: LoanAccountMutation;
  members: MemberMutation;
  newId: Scalars['String'];
  presignedUrl: PresignedUrlMutation;
  profitToFundManagement: FundManagementMutation;
  report: ReportMutation;
  requests: RequestsMutation;
  seed: Scalars['Boolean'];
  settings: SettingsMutation;
  share: ShareMutation;
  transaction: TransactionMutation;
  user: UserMutation;
  withdrawSlip: WithdrawSlipMutation;
};

export type MutationNewIdArgs = {
  idType?: InputMaybe<Id_Type>;
};

export type MutationError =
  | AuthorizationError
  | BadRequestError
  | NotFoundError
  | ServerError
  | ValidationError;

export type MyCoopInfo = {
  totalBranch?: Maybe<Scalars['Int']>;
  totalMembers?: Maybe<Scalars['Int']>;
  totalShareIssued?: Maybe<Scalars['Int']>;
};

export type MyraUser = Base & {
  branch?: Maybe<Branch>;
  contactNo?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  empCode?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  id: Scalars['ID'];
  isCoreEmployee?: Maybe<Scalars['Boolean']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  role?: Maybe<Roles>;
};

export type MyraUserConnection = {
  edges?: Maybe<Array<MyraUserEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type MyraUserEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<MyraUser>;
};

export type MyraUserFormStateData = {
  branch?: Maybe<Scalars['String']>;
  contactNo?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  empCode?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  id?: Maybe<Scalars['String']>;
  identificationDetails?: Maybe<Array<Maybe<MyraUserIdentification>>>;
  identificationSelection?: Maybe<Array<Maybe<Scalars['String']>>>;
  isCoreEmployee?: Maybe<Scalars['Boolean']>;
  isTempAsPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  profilePicture?: Maybe<Array<Maybe<PictureData>>>;
  role?: Maybe<Roles>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type MyraUserFormStateResult = {
  data?: Maybe<MyraUserFormStateData>;
  error?: Maybe<QueryError>;
};

export type MyraUserIdentification = {
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  idNo?: Maybe<Scalars['String']>;
  idType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
};

export type MyraUserIdentificationInput = {
  date?: InputMaybe<Scalars['Localized']>;
  idNo?: InputMaybe<Scalars['String']>;
  idType?: InputMaybe<Scalars['String']>;
  place?: InputMaybe<Scalars['String']>;
};

export type MyraUserIdentificationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<MyraUserQuery>;
  record?: Maybe<MyraUserIdentification>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MyraUserInput = {
  branch?: InputMaybe<Scalars['String']>;
  contactNo: Scalars['String'];
  dob: Scalars['Localized'];
  email: Scalars['String'];
  empCode?: InputMaybe<Scalars['String']>;
  gender: UserGender;
  identificationDetails?: InputMaybe<Array<InputMaybe<MyraUserIdentificationInput>>>;
  identificationSelection?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  isCoreEmployee?: InputMaybe<Scalars['Boolean']>;
  isTempAsPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  permanentAddress?: InputMaybe<KymAddressInput>;
  profilePicture?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  role: Roles;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type MyraUserMutation = {
  add?: Maybe<MyraUserResult>;
};

export type MyraUserMutationAddArgs = {
  data?: InputMaybe<MyraUserInput>;
  id: Scalars['ID'];
};

export type MyraUserQuery = {
  formState?: Maybe<MyraUserFormStateResult>;
  list?: Maybe<MyraUserConnection>;
};

export type MyraUserQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type MyraUserQueryListArgs = {
  filter?: InputMaybe<MyraUserSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type MyraUserResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<MyraUserQuery>;
  record?: Maybe<MyraUser>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MyraUserSearchFilter = {
  branchId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Array<InputMaybe<Roles>>>;
};

export type Name = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
};

export enum NatureOfBankTransaction {
  All = 'ALL',
  Deposit = 'DEPOSIT',
  Withdraw = 'WITHDRAW',
}

export enum NatureOfDepositProduct {
  Current = 'CURRENT',
  RecurringSaving = 'RECURRING_SAVING',
  Saving = 'SAVING',
  TermSavingOrFd = 'TERM_SAVING_OR_FD',
}

export enum NatureOfLoanProduct {
  Progressive = 'PROGRESSIVE',
  Unprogressive = 'UNPROGRESSIVE',
}

export enum NatureOfTransaction {
  AccountClose = 'ACCOUNT_CLOSE',
  All = 'ALL',
  AlternateChannel = 'ALTERNATE_CHANNEL',
  Deposit = 'DEPOSIT',
  Ebanking = 'EBANKING',
  InterestBooking = 'INTEREST_BOOKING',
  InterestPosting = 'INTEREST_POSTING',
  JournalVoucher = 'JOURNAL_VOUCHER',
  LoanDisbursment = 'LOAN_DISBURSMENT',
  LoanRepayment = 'LOAN_REPAYMENT',
  Membership = 'MEMBERSHIP',
  OpeningBalance = 'OPENING_BALANCE',
  SharePurchase = 'SHARE_PURCHASE',
  ShareReturn = 'SHARE_RETURN',
  TellerTransfer = 'TELLER_TRANSFER',
  Transfer = 'TRANSFER',
  Withdraw = 'WITHDRAW',
}

export type NewBankAccountInput = {
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<AccountingBankAccountType>;
  bankId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  openingBalance?: InputMaybe<Scalars['String']>;
};

export type NewBankAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankAccountQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type NewCoaGroupInput = {
  accountClass?: InputMaybe<Scalars['String']>;
  accountCode?: InputMaybe<Scalars['String']>;
  accountSetup?: InputMaybe<CoaAccountSetup>;
  allowedBalance?: InputMaybe<CoaTypeOfTransaction>;
  groupName?: InputMaybe<Scalars['String']>;
  typeOfTransaction?: InputMaybe<CoaTypeOfTransaction>;
  underAccountCode?: InputMaybe<Scalars['String']>;
};

export type NewCoaGroupResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ChartsOfAccountSettingsQuery>;
  recordId: Scalars['ID'];
};

export type Nominee = {
  address?: Maybe<Address>;
  citizenship?: Maybe<Citizenship>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NomineeInNepali = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NotFoundError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export enum ObjState {
  Active = 'ACTIVE',
  Approved = 'APPROVED',
  Dormant = 'DORMANT',
  Draft = 'DRAFT',
  Inactive = 'INACTIVE',
  Submitted = 'SUBMITTED',
  Validated = 'VALIDATED',
}

export type OfficialUseData = {
  acceptableAddressDoc?: Maybe<Scalars['Boolean']>;
  checkNegative?: Maybe<Scalars['Boolean']>;
  checkSanction?: Maybe<Scalars['Boolean']>;
  docCollectedAndVerified?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  isStaff?: Maybe<Scalars['Boolean']>;
  riskCategory?: Maybe<OfficialUseRiskCategory>;
};

export type OfficialUseInputData = {
  acceptableAddressDoc?: InputMaybe<Scalars['Boolean']>;
  checkNegative?: InputMaybe<Scalars['Boolean']>;
  checkSanction?: InputMaybe<Scalars['Boolean']>;
  docCollectedAndVerified?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isStaff?: InputMaybe<Scalars['Boolean']>;
  riskCategory?: InputMaybe<OfficialUseRiskCategory>;
};

export type OfficialUseResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<OfficialUseData>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum OfficialUseRiskCategory {
  High = 'HIGH',
  Low = 'LOW',
  Medium = 'MEDIUM',
  Pep = 'PEP',
}

export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export type Organization = {
  address?: Maybe<Address>;
  basicDetails?: Maybe<OrganizationBasicDetails>;
  contactDetails?: Maybe<OrganizationContactDetails>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  mainContactPerson?: Maybe<OrganizationMainContactPerson>;
  registrationDetails?: Maybe<OrganizationRegistrationDetails>;
  statistics?: Maybe<OrganizationStatistics>;
};

export type OrganizationAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  record?: Maybe<Organization>;
  recordId: Scalars['ID'];
};

export type OrganizationBasicDetails = {
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  typeOfOrganization?: Maybe<TypeOfOrganization>;
};

export type OrganizationContactDetails = {
  email?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  recordId: Scalars['ID'];
};

export type OrganizationDocument = {
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type OrganizationFormData = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<LocationCoordinate>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panOrVat?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  totalCapital?: Maybe<Scalars['Float']>;
  totalMembers?: Maybe<Scalars['Int']>;
  typeOfOrganization?: Maybe<TypeOfOrganization>;
  wardNo?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationFormStateResult = {
  data?: Maybe<OrganizationFormData>;
  error?: Maybe<QueryError>;
};

export type OrganizationGetResult = {
  data?: Maybe<Organization>;
  error?: Maybe<QueryError>;
};

export type OrganizationInput = {
  contactPersonContactNumber?: InputMaybe<Scalars['String']>;
  contactPersonName?: InputMaybe<Scalars['String']>;
  districtId?: InputMaybe<Scalars['Int']>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  email?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  panOrVat?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  regdAddress?: InputMaybe<Scalars['String']>;
  regdNo?: InputMaybe<Scalars['String']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  totalCapital?: InputMaybe<Scalars['Float']>;
  totalMembers?: InputMaybe<Scalars['Int']>;
  typeOfOrganization?: InputMaybe<TypeOfOrganization>;
  wardNo?: InputMaybe<Scalars['Int']>;
  website?: InputMaybe<Scalars['String']>;
};

export type OrganizationListResult = {
  data?: Maybe<Array<Maybe<Organization>>>;
  error?: Maybe<QueryError>;
};

export type OrganizationMainContactPerson = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type OrganizationRegistrationDetails = {
  panOrVat?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
};

export type OrganizationSettingsMutation = {
  initialSetup?: Maybe<OrganizationAddResult>;
};

export type OrganizationSettingsMutationInitialSetupArgs = {
  data: OrganizationInput;
};

export type OrganizationSettingsQuery = {
  formState?: Maybe<OrganizationFormStateResult>;
  /** This is to get organization details of a logged in employee. id of that email will be extracted from the employee who sends the request */
  mine?: Maybe<OrganizationGetResult>;
};

export type OrganizationStatistics = {
  totalCapital: Scalars['Float'];
  totalMembers: Scalars['Int'];
};

export type OtherFundDistribution = {
  accountCode?: InputMaybe<Scalars['String']>;
  percent?: InputMaybe<Scalars['Float']>;
};

export type OtherReport = {
  generalLedgerReport: GenderLedgerReportResult;
  savingsBalanceReport: SavingsBalanceReportResult;
};

export type OtherReportGeneralLedgerReportArgs = {
  data: GeneralLedgerFilter;
};

export type OtherReportSavingsBalanceReportArgs = {
  data: SavingsBalanceFilterData;
};

export type OverviewView = {
  basicInformation?: Maybe<MemberBasicInfoView>;
  memberGraphs?: Maybe<MemberOverviewGraphs>;
  payments?: Maybe<Array<Maybe<MemberPaymentView>>>;
  pendingView?: Maybe<Array<Maybe<PendingOverview>>>;
  recentTransactions?: Maybe<Array<Maybe<MemberRecentTransactionView>>>;
  statistics?: Maybe<MemberStatisticsView>;
};

export type PageInfo = {
  endCursor?: Maybe<Scalars['Cursor']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Pagination = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<Order>;
};

export type PasswordRecoveryData = {
  newPassword: Scalars['String'];
  token: Scalars['String'];
};

export type PasswordRecoveryInput = {
  email: Scalars['String'];
  url: Scalars['String'];
};

export type PasswordRecoveryMutation = {
  sendRecoveryEmail?: Maybe<PasswordRecoveryResult>;
  setNewPassword?: Maybe<PasswordRecoveryResult>;
};

export type PasswordRecoveryMutationSendRecoveryEmailArgs = {
  data: PasswordRecoveryInput;
};

export type PasswordRecoveryMutationSetNewPasswordArgs = {
  data?: InputMaybe<PasswordRecoveryData>;
};

export type PasswordRecoveryResult = {
  error?: Maybe<MutationError>;
  recordID?: Maybe<Scalars['ID']>;
};

export type PaymentAllocation = {
  amount: Scalars['String'];
  date: Scalars['Localized'];
  leftToAllocate: Scalars['String'];
  thisAllocation: Scalars['String'];
  type: Scalars['String'];
};

export type PaymentAllocationInput = {
  amount: Scalars['String'];
  date: Scalars['Localized'];
  leftToAllocate: Scalars['String'];
  thisAllocation: Scalars['String'];
  type: Scalars['String'];
};

export enum PaymentDepositedBy {
  Other = 'OTHER',
  Self = 'SELF',
}

export type Penalty = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PenaltyFormState = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PenaltyInput = {
  dayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  flatRatePenalty?: InputMaybe<Scalars['Float']>;
  minimumAmount?: InputMaybe<Scalars['Amount']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
  rateType?: InputMaybe<PenaltyRateType>;
};

export enum PenaltyRateType {
  FlatRate = 'FLAT_RATE',
  RelativeRate = 'RELATIVE_RATE',
}

export type PenaltyRebate = {
  penalty?: Maybe<PenaltyFormState>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  rebate?: Maybe<RebateFormState>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
};

export type PenaltyRebateResult = {
  data?: Maybe<PenaltyRebate>;
  error?: Maybe<QueryError>;
};

export enum PenaltyType {
  PenalInterest = 'PenalInterest',
  RemainingPrincipal = 'RemainingPrincipal',
}

export type PenaltyTypeInput = {
  dayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export type PendingOverview = {
  account?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
};

export type PendingRequestInfo = {
  loanApplicationRequest?: Maybe<Scalars['Int']>;
  loanDisbursementRequest?: Maybe<Scalars['Int']>;
  memberRequestCount?: Maybe<Scalars['Int']>;
  withdrawSlipCount?: Maybe<Scalars['Int']>;
};

export type PeriodType = {
  period?: Maybe<CustomPeriodType>;
  periodType: ReportPeriodType;
};

export enum PeriodTypeEnum {
  Last_7Days = 'LAST_7_DAYS',
  Last_14Days = 'LAST_14_DAYS',
  Last_30Days = 'LAST_30_DAYS',
  Lifetime = 'LIFETIME',
  ThisFiscalYearToDate = 'THIS_FISCAL_YEAR_TO_DATE',
  Today = 'TODAY',
  Yesterday = 'YESTERDAY',
}

export type PersonalInformation = {
  citizenship?: Maybe<Citizenship>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  gender?: Maybe<Scalars['String']>;
  inNepali?: Maybe<PersonalInformationInNepali>;
  name?: Maybe<Name>;
  nationality?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
  panNumber?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type PersonalInformationInNepali = {
  name?: Maybe<Name>;
  occupation?: Maybe<Scalars['String']>;
};

export enum PickupMethod {
  MarketRepresentative = 'MARKET_REPRESENTATIVE',
  Self = 'SELF',
}

export type PictureData = {
  identifier?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type PredefinedElementFilter = {
  category: FormCategory;
  searchTerm: FormSearchTerm;
};

export type PredefinedElementListFilter = {
  category?: InputMaybe<FormCategory>;
};

export type PredefinedElementListQueryResult = {
  data?: Maybe<Array<Maybe<FormElement>>>;
  error?: Maybe<QueryError>;
};

export type PredefinedElementQueryResult = {
  data?: Maybe<FormElement>;
  error?: Maybe<QueryError>;
};

export type PredefinedFormQuery = {
  details: PredefinedElementQueryResult;
  list: PredefinedElementListQueryResult;
};

export type PredefinedFormQueryDetailsArgs = {
  filter: PredefinedElementFilter;
};

export type PredefinedFormQueryListArgs = {
  filter: PredefinedElementListFilter;
};

export type PrematurePenalty = {
  noOfDays?: InputMaybe<Scalars['Int']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyDateType?: InputMaybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export enum PrematurePenaltyDateType {
  EffectiveDaysFromStart = 'EFFECTIVE_DAYS_FROM_START',
  RemainingDaysToGetMatured = 'REMAINING_DAYS_TO_GET_MATURED',
}

export type PrematurePenaltyFormState = {
  noOfDays?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDateType?: Maybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PresignedUrlMutation = {
  upload: PresignedUrlOutput;
};

export type PresignedUrlMutationUploadArgs = {
  contentType?: InputMaybe<Scalars['String']>;
};

export type PresignedUrlOutput = {
  filename?: Maybe<Scalars['String']>;
  getUrl?: Maybe<Scalars['String']>;
  putUrl?: Maybe<Scalars['String']>;
};

export type PreviousYearFundDistribution = {
  accountCode?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  percent?: Maybe<Scalars['Float']>;
};

export type ProductActivateResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['ID'];
};

export type ProductCode = {
  initialNo?: InputMaybe<Scalars['String']>;
  noOfDigits?: InputMaybe<Scalars['Int']>;
  prefix?: InputMaybe<Scalars['String']>;
};

export type ProductCodeFormState = {
  initialNo: Scalars['String'];
  noOfDigits?: Maybe<Scalars['Int']>;
  prefix: Scalars['String'];
};

export type ProductCodeType = {
  initialNo: Scalars['String'];
  noOfDigits?: Maybe<Scalars['Int']>;
  prefix: Scalars['String'];
};

export type Province = {
  districts: Array<District>;
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type QuarterlyDividendRate = {
  firstQuarter?: Maybe<Scalars['Float']>;
  fourthQuarter?: Maybe<Scalars['Float']>;
  secondQuarter?: Maybe<Scalars['Float']>;
  thirdQuarter?: Maybe<Scalars['Float']>;
};

export type QuarterlyDividendRateInput = {
  firstQuarter?: InputMaybe<Scalars['Float']>;
  fourthQuarter?: InputMaybe<Scalars['Float']>;
  secondQuarter?: InputMaybe<Scalars['Float']>;
  thirdQuarter?: InputMaybe<Scalars['Float']>;
};

export type Query = {
  account: DepositLoanAccountQuery;
  accounting: AccountingQuery;
  administration: AdministrationQuery;
  alternativeChannel: AlternativeChannelQuery;
  auditLog: AuditLogQuery;
  auth: AuthQuery;
  bank: BankQuery;
  config: ConfigQuery;
  dashboard: DashboardQuery;
  document: DocumentQuery;
  example: ExampleQuery;
  form: FormQuery;
  inventory: InventoryQuery;
  loanAccount: LoanAccountQuery;
  members: MemberQuery;
  profitToFundManagement: FundManagementQuery;
  report: ReportQuery;
  requests: RequestsQuery;
  routesAndCodes: RoutesAndCodesQuery;
  search: SearchQuery;
  settings: SettingsQuery;
  share: ShareQuery;
  transaction: TransactionQuery;
  user: UserQuery;
  withdrawSlip: WithdrawSlipQuery;
};

export type QueryError = AuthorizationError | BadRequestError | NotFoundError | ServerError;

export type RawAuditLog = {
  data?: Maybe<Array<Maybe<AuditLog>>>;
  error?: Maybe<QueryError>;
};

export type Rebate = {
  dayBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
  rebateLedgerMapping?: Maybe<Scalars['String']>;
  rebateRate?: Maybe<Scalars['Float']>;
};

export type RebateFormState = {
  dayBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
  rebateLedgerMapping?: Maybe<Scalars['String']>;
  rebateRate?: Maybe<Scalars['Float']>;
};

export type RebateInput = {
  daysBeforeInstallmentDate?: InputMaybe<Scalars['Int']>;
  noOfInstallment?: InputMaybe<Scalars['Int']>;
  percentage?: InputMaybe<Scalars['Float']>;
  rebateAmount?: InputMaybe<Scalars['Amount']>;
};

export type RebateTypeInput = {
  dayBeforeInstallmentDate?: InputMaybe<Scalars['Int']>;
  noOfInstallment?: InputMaybe<Scalars['Int']>;
  rebateAmount?: InputMaybe<Scalars['Amount']>;
  rebateLedgerMapping?: InputMaybe<Scalars['String']>;
  rebateRate?: InputMaybe<Scalars['Float']>;
};

export type ReportDetail = {
  id: Scalars['ID'];
  lastModifiedDate: Scalars['Localized'];
  name: Scalars['String'];
  reportType: Scalars['String'];
  savedBy: Scalars['String'];
};

export type ReportEntry = {
  entryName?: Maybe<Scalars['String']>;
  inNumber?: Maybe<Scalars['Int']>;
  inPercent?: Maybe<Scalars['String']>;
};

export type ReportListConnection = {
  edges?: Maybe<Array<Maybe<ReportListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ReportListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<ReportDetail>;
};

export type ReportListFilter = {
  name?: InputMaybe<Scalars['String']>;
  reportType?: InputMaybe<Scalars['String']>;
  savedBy?: InputMaybe<Scalars['String']>;
};

export type ReportMutation = {
  statementReport?: Maybe<ReportResult>;
};

export type ReportMutationStatementReportArgs = {
  data: StatementReportInput;
};

export enum ReportPeriodType {
  CustomPeriod = 'CUSTOM_PERIOD',
  Last_7Days = 'LAST_7_DAYS',
  Last_14Days = 'LAST_14_DAYS',
  Last_30Days = 'LAST_30_DAYS',
  LastYear = 'LAST_YEAR',
  Lifetime = 'LIFETIME',
  ThisFiscalYearToDate = 'THIS_FISCAL_YEAR_TO_DATE',
  ThisYear = 'THIS_YEAR',
  Today = 'TODAY',
  Yesterday = 'YESTERDAY',
}

export type ReportQuery = {
  branchReport: BranchReport;
  cashReport: CashReport;
  depositReport: DepositReport;
  employeeReport: EmployeeReport;
  getReport?: Maybe<SavedReportResponse>;
  listReports: ReportListConnection;
  loanReport: LoanReport;
  memberReport: MemberReport;
  mobileBankingReport: MobileBankingReport;
  otherReport: OtherReport;
  shareReport: ShareReport;
  transactionReport: TransactionReport;
};

export type ReportQueryGetReportArgs = {
  reportId: Scalars['ID'];
};

export type ReportQueryListReportsArgs = {
  filter?: InputMaybe<ReportListFilter>;
  organizationId?: InputMaybe<Scalars['ID']>;
  pagination?: InputMaybe<Pagination>;
};

export type ReportResult = {
  error?: Maybe<QueryError>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['ID']>;
  statement?: Maybe<StatementReport>;
};

export type RequestApproveOrDeclineInput = {
  approve: Scalars['Boolean'];
  notifyMember?: InputMaybe<Scalars['Boolean']>;
  purposedDate?: InputMaybe<Scalars['Localized']>;
  reasonForDeclination?: InputMaybe<Scalars['String']>;
  requestId: Scalars['String'];
};

export type RequestApproveOrDeclineResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<RequestsQuery>;
  requestId?: Maybe<Scalars['String']>;
};

export type RequestFilter = {
  id?: InputMaybe<Scalars['ID']>;
  requestStatus?: InputMaybe<RequestStatus>;
  requestType?: InputMaybe<Scalars['String']>;
};

export enum RequestStatus {
  Approved = 'APPROVED',
  Declined = 'DECLINED',
  Pending = 'PENDING',
}

export enum RequestType {
  BlockCheque = 'BLOCK_CHEQUE',
  ChequeBookRequest = 'CHEQUE_BOOK_REQUEST',
  LoanRequest = 'LOAN_REQUEST',
  WithdrawRequest = 'WITHDRAW_REQUEST',
}

export type RequestsList = {
  blockCheque?: Maybe<BlockChequeRequestConnection>;
  chequeBookRequest?: Maybe<ChequeBookRequestConnection>;
  loanRequest?: Maybe<LoanRequestConnection>;
  membershipRequest?: Maybe<MembershipRequestConnection>;
  withdrawViaCollector?: Maybe<WithdrawViaCollectorConnection>;
};

export type RequestsListBlockChequeArgs = {
  filter?: InputMaybe<RequestFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsListChequeBookRequestArgs = {
  filter?: InputMaybe<RequestFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsListLoanRequestArgs = {
  filter?: InputMaybe<RequestFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsListMembershipRequestArgs = {
  filter?: InputMaybe<RequestFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsListWithdrawViaCollectorArgs = {
  filter?: InputMaybe<RequestFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsMutation = {
  approveOrDecline?: Maybe<ApproveOrDeclineMutation>;
  requestApproveOrDecline?: Maybe<RequestApproveOrDeclineResult>;
};

export type RequestsMutationRequestApproveOrDeclineArgs = {
  data?: InputMaybe<RequestApproveOrDeclineInput>;
  requestType: RequestType;
};

export type RequestsQuery = {
  list?: Maybe<RequestsList>;
};

export type ResetPasswordData = {
  newPassword: Scalars['String'];
  userId: Scalars['String'];
};

export type ResetPasswordResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type Result = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export enum RiskCategoryFilter {
  All = 'ALL',
  High = 'HIGH',
  Low = 'LOW',
  Medium = 'MEDIUM',
}

export enum Roles {
  Agent = 'AGENT',
  BranchManager = 'BRANCH_MANAGER',
  HeadTeller = 'HEAD_TELLER',
  Superadmin = 'SUPERADMIN',
  Teller = 'TELLER',
}

export enum RolesFilter {
  Agent = 'AGENT',
  BranchManager = 'BRANCH_MANAGER',
  HeadTeller = 'HEAD_TELLER',
  Superadmin = 'SUPERADMIN',
  Teller = 'TELLER',
}

export type RoutesAndCodes = {
  code?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type RoutesAndCodesFilter = {
  code?: InputMaybe<Scalars['Int']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type RoutesAndCodesQuery = {
  list: Array<RoutesAndCodes>;
};

export type RoutesAndCodesQueryListArgs = {
  filter?: InputMaybe<RoutesAndCodesFilter>;
};

export enum Share_Status {
  Active = 'ACTIVE',
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED',
}

export enum Share_Transaction_Direction {
  Purchase = 'PURCHASE',
  Return = 'RETURN',
}

export type SaleProduct = {
  amount: Scalars['String'];
  name: Scalars['String'];
  productDescription?: Maybe<Scalars['String']>;
  quantity: Scalars['String'];
  rate: Scalars['String'];
  salesLedger?: Maybe<Scalars['String']>;
  tax: Scalars['Float'];
  warehousePartition?: Maybe<Scalars['String']>;
};

export type SaleProductInput = {
  amount: Scalars['String'];
  name: Scalars['String'];
  productDescription?: InputMaybe<Scalars['String']>;
  quantity: Scalars['String'];
  rate: Scalars['String'];
  salesLedger?: InputMaybe<Scalars['String']>;
  tax: Scalars['Float'];
  warehousePartition?: InputMaybe<Scalars['String']>;
};

export type SalesCreditNote = {
  customerID: Scalars['ID'];
  date: Scalars['Localized'];
  invoiceReference: Scalars['String'];
  nonTaxableTotal?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  products: Array<SaleProduct>;
  subTotal?: Maybe<Scalars['String']>;
  taxableTotal?: Maybe<Scalars['String']>;
  vat?: Maybe<Scalars['String']>;
};

export type SalesCreditNoteEntry = {
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
};

export type SalesCreditNoteFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SalesCreditNoteInput = {
  customerID: Scalars['ID'];
  date: Scalars['Localized'];
  invoiceReference: Scalars['String'];
  nonTaxableTotal?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  products: Array<SaleProductInput>;
  subTotal?: InputMaybe<Scalars['String']>;
  taxableTotal?: InputMaybe<Scalars['String']>;
  vat?: InputMaybe<Scalars['String']>;
};

export type SalesCreditNoteListConnection = {
  edges?: Maybe<Array<Maybe<SalesCreditNoteListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalesCreditNoteListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SalesCreditNoteEntry>;
};

export type SalesCustomer = {
  address: KymAddress;
  code: Scalars['String'];
  creditLimit?: Maybe<Scalars['String']>;
  creditTerms?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  openingBalance?: Maybe<Scalars['String']>;
  pan: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type SalesCustomerEntry = {
  address?: Maybe<Address>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

export type SalesCustomerFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SalesCustomerInput = {
  address: KymAddressInput;
  code: Scalars['String'];
  creditLimit?: InputMaybe<Scalars['String']>;
  creditTerms?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  openingBalance?: InputMaybe<Scalars['String']>;
  pan: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type SalesCustomerListConnection = {
  edges?: Maybe<Array<Maybe<SalesCustomerListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalesCustomerListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SalesCustomerEntry>;
};

export type SalesCustomerPayment = {
  notes?: Maybe<Scalars['String']>;
  paymentAllocation: Array<PaymentAllocation>;
  paymentMethod: CustomerPayment;
  paymentReferenceNo?: Maybe<Scalars['String']>;
  receivedAccount: Scalars['String'];
  receivedAmount: Scalars['String'];
  receivedDate: Scalars['Localized'];
  receivedFrom: Scalars['String'];
  tds: Scalars['Boolean'];
  tdsAccount?: Maybe<Scalars['String']>;
  tdsAmount?: Maybe<Scalars['String']>;
  tdsType?: Maybe<Scalars['String']>;
};

export type SalesCustomerPaymentEntry = {
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  paymentMode?: Maybe<CustomerPayment>;
  receivedFrom?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
};

export type SalesCustomerPaymentFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SalesCustomerPaymentInput = {
  notes?: InputMaybe<Scalars['String']>;
  paymentAllocation: Array<PaymentAllocationInput>;
  paymentMethod: CustomerPayment;
  paymentReferenceNo?: InputMaybe<Scalars['String']>;
  receivedAccount: Scalars['String'];
  receivedAmount: Scalars['String'];
  receivedDate: Scalars['Localized'];
  receivedFrom: Scalars['String'];
  tds: Scalars['Boolean'];
  tdsAccount?: InputMaybe<Scalars['String']>;
  tdsAmount?: InputMaybe<Scalars['String']>;
  tdsType?: InputMaybe<Scalars['String']>;
};

export type SalesCustomerPaymentListConnection = {
  edges?: Maybe<Array<Maybe<SalesCustomerPaymentListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalesCustomerPaymentListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SalesCustomerPaymentEntry>;
};

export type SalesSaleEntry = {
  customerID: Scalars['ID'];
  discount?: Maybe<Scalars['String']>;
  dueDate: Scalars['Localized'];
  invoiceDate: Scalars['Localized'];
  notes?: Maybe<Scalars['String']>;
  products: Array<SaleProduct>;
  reference: Scalars['String'];
  subTotal?: Maybe<Scalars['String']>;
  taxableTotal?: Maybe<Scalars['String']>;
  vat?: Maybe<Scalars['String']>;
};

export type SalesSaleEntryEntry = {
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
};

export type SalesSaleEntryFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SalesSaleEntryInput = {
  customerID: Scalars['ID'];
  discount?: InputMaybe<Scalars['String']>;
  dueDate: Scalars['Localized'];
  invoiceDate: Scalars['Localized'];
  notes?: InputMaybe<Scalars['String']>;
  products: Array<SaleProductInput>;
  reference: Scalars['String'];
  subTotal?: InputMaybe<Scalars['String']>;
  taxableTotal?: InputMaybe<Scalars['String']>;
  vat?: InputMaybe<Scalars['String']>;
};

export type SalesSaleEntryListConnection = {
  edges?: Maybe<Array<Maybe<SalesSaleEntryListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalesSaleEntryListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SalesSaleEntryEntry>;
};

export type SavedReportResponse = {
  name?: Maybe<Scalars['String']>;
  settings?: Maybe<SavedReportSettings>;
};

export type SavedReportSettings = ShareStatementReportSettingsType;

export type SavingAmountRange = {
  max?: InputMaybe<Scalars['Int']>;
  min?: InputMaybe<Scalars['Int']>;
};

export type SavingFilters = {
  amountRange?: InputMaybe<SavingAmountRange>;
  service?: InputMaybe<SavingServiceType>;
  transactionType?: InputMaybe<SavingTransactionType>;
};

export type SavingInvestment = {
  frequency: InstallmentFrequency;
  initialDepositAmount?: Maybe<Scalars['String']>;
  installmentAmount: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  openDate: Scalars['Localized'];
  rate: Scalars['Float'];
  type: SavingInvestmentType;
};

export type SavingInvestmentInput = {
  frequency: InstallmentFrequency;
  initialDepositAmount?: InputMaybe<Scalars['String']>;
  installmentAmount: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  openDate: Scalars['Localized'];
  rate: Scalars['Float'];
  type: SavingInvestmentType;
};

export type SavingInvestmentTransactionInput = {
  amount: Scalars['String'];
  date: Scalars['Localized'];
  notes?: InputMaybe<Scalars['String']>;
  paymentMethod: InvestmentTransactionMethod;
  type: SavingInvestmentType;
};

export enum SavingInvestmentType {
  Type_1 = 'TYPE_1',
  Type_2 = 'TYPE_2',
  Type_3 = 'TYPE_3',
}

export enum SavingServiceType {
  Charges = 'CHARGES',
  CustomerInitiated = 'CUSTOMER_INITIATED',
  Interest = 'INTEREST',
}

export type SavingStatement = {
  balanceAmount?: Maybe<Scalars['String']>;
  chequeOrVoucherNo?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  depositCr?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  withdrawDr?: Maybe<Scalars['String']>;
};

export type SavingStatementReport = {
  savingStatement?: Maybe<Array<Maybe<SavingStatement>>>;
  totals?: Maybe<SavingTotalReport>;
};

export type SavingStatementReportSettings = {
  accountId: Scalars['ID'];
  filter?: InputMaybe<SavingFilters>;
  memberId: Scalars['ID'];
  period: LocalizedDateFilter;
};

export type SavingTotalReport = {
  totalBalance?: Maybe<Scalars['String']>;
  totalDeposit?: Maybe<Scalars['String']>;
  totalWithdraw?: Maybe<Scalars['String']>;
};

export enum SavingTransactionType {
  All = 'ALL',
  Deposit = 'DEPOSIT',
  Withdraw = 'WITHDRAW',
}

export type SavingsBalanceFilter = {
  amount?: InputMaybe<MinMaxFilter>;
  memberIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  memberType?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  minorWise?: InputMaybe<MinorWiseFilter>;
  productTypes?: InputMaybe<Array<InputMaybe<NatureOfDepositProduct>>>;
};

export type SavingsBalanceFilterData = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SavingsBalanceFilter>;
  period: LocalizedDateFilter;
};

export type SavingsBalanceReport = {
  accountId?: Maybe<Scalars['String']>;
  accountOpeningDate?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  memberType?: Maybe<KymMemberTypesEnum>;
  productCode?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
};

export type SavingsBalanceReportResult = {
  data?: Maybe<Array<Maybe<SavingsBalanceReport>>>;
  error?: Maybe<QueryError>;
  totalBalance?: Maybe<Scalars['String']>;
};

export type SearchFilterData = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<ObjState>;
  page?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export type SearchListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SearchResultNode>;
};

export type SearchQuery = {
  globalPages: SearchQueryResult;
};

export type SearchQueryGlobalPagesArgs = {
  filter?: InputMaybe<SearchFilterData>;
  pagination?: InputMaybe<Pagination>;
};

export type SearchQueryResult = {
  data?: Maybe<SearchQueryResultData>;
  error?: Maybe<QueryError>;
};

export type SearchQueryResultData = {
  edges?: Maybe<Array<Maybe<SearchListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SearchResultNode = GlobalPagesResultNode;

export type SectionDetailsFilter = {
  id: Scalars['ID'];
};

export type SectionDetailsQueryResult = {
  data?: Maybe<FormSection>;
  error?: Maybe<QueryError>;
};

export type SectionWiseError = {
  errors?: Maybe<Scalars['InvalidData']>;
  sectionName?: Maybe<Scalars['String']>;
};

export type ServerError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type ServiceCenter = {
  address?: Maybe<Address>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  contactNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  isExtensionCounter?: Maybe<Scalars['Boolean']>;
  managerContact?: Maybe<Scalars['String']>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  serviceCenterCode?: Maybe<Scalars['String']>;
};

export type ServiceCharge = {
  amount?: Maybe<Scalars['Amount']>;
  name: Scalars['String'];
};

export type ServiceChargeInput = {
  amount: Scalars['Amount'];
  name: Scalars['String'];
};

export type ServiceType = {
  amount?: InputMaybe<Scalars['Amount']>;
  ledgerName?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
};

export type ServiceTypeFormState = {
  amount?: Maybe<Scalars['Amount']>;
  ledgerName?: Maybe<Scalars['String']>;
  serviceName?: Maybe<Scalars['String']>;
};

export type SettingsMutation = {
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  declaration: DeclarationMutation;
  form?: Maybe<FormSettingMutation>;
  general?: Maybe<GeneralSettingsMutation>;
  myraUser?: Maybe<MyraUserMutation>;
};

export type SettingsQuery = {
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  declaration: DeclarationQuery;
  form?: Maybe<FormSettingQuery>;
  general?: Maybe<GeneralSettingsQuery>;
  myraUser?: Maybe<MyraUserQuery>;
};

export type ShareBalance = {
  amount: Scalars['Int'];
  count: Scalars['Int'];
  id?: Maybe<Scalars['ID']>;
  member: Member;
  memberId?: Maybe<Scalars['ID']>;
};

export type ShareBalanceConnection = {
  edges: Array<ShareBalanceEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ShareBalanceEdge = {
  cursor: Scalars['String'];
  node: ShareBalance;
};

export type ShareBalanceFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['String']>;
  memberCode?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  memberName?: InputMaybe<Scalars['String']>;
  memberSearchText?: InputMaybe<Scalars['String']>;
};

export type ShareBalanceFilterData = {
  balanceRange?: InputMaybe<MinMaxFilter>;
};

export type ShareBalanceReportData = {
  address?: Maybe<Address>;
  balance?: Maybe<Scalars['String']>;
  contactNo?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  membershipDate?: Maybe<Scalars['Localized']>;
  noOfKitta?: Maybe<Scalars['Int']>;
  shareCertificateNo?: Maybe<Scalars['String']>;
  shareType?: Maybe<Scalars['String']>;
};

export type ShareBalanceReportFilter = {
  branchId: Scalars['ID'];
  filter?: InputMaybe<ShareBalanceFilterData>;
  period: LocalizedDateFilter;
};

export type ShareBalanceReportResult = {
  data?: Maybe<Array<Maybe<ShareBalanceReportData>>>;
  error?: Maybe<QueryError>;
  totalBalance?: Maybe<Scalars['String']>;
};

export type ShareBonusSettingsBonusResult = {
  accountMapping?: Maybe<Scalars['ID']>;
  taxPayer?: Maybe<TaxPayerOptions>;
  taxRate?: Maybe<Scalars['Float']>;
};

export type ShareBonusSettingsInput = {
  accountMapping?: InputMaybe<Scalars['ID']>;
  taxPayer?: InputMaybe<TaxPayerOptions>;
  taxRate?: InputMaybe<Scalars['Float']>;
};

export type ShareCharge = {
  charge?: Maybe<Scalars['String']>;
  ledgerMapping?: Maybe<Scalars['ID']>;
  maxShare?: Maybe<Scalars['Int']>;
  minShare?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<ShareChargeType>;
};

export type ShareChargeInput = {
  charge?: InputMaybe<Scalars['String']>;
  ledgerMapping?: InputMaybe<Scalars['ID']>;
  maxShare?: InputMaybe<Scalars['Int']>;
  minShare?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ShareChargeType>;
};

export enum ShareChargeType {
  FixedAmount = 'FIXED_AMOUNT',
  Percentage = 'PERCENTAGE',
}

export type ShareCharges = {
  charge?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type ShareDetailData = {
  amount?: Maybe<Scalars['String']>;
  charges?: Maybe<Array<Maybe<ShareExtraChargeDetails>>>;
  date?: Maybe<Scalars['Localized']>;
  fromTo?: Maybe<ShareNumber>;
  glTransactions?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  noOfShare?: Maybe<Scalars['Int']>;
  paymentDetail?: Maybe<SharePaymentDetail>;
  status?: Maybe<Scalars['String']>;
  teller?: Maybe<Scalars['String']>;
  total?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalShareAmount?: Maybe<Scalars['String']>;
  totalShareCount?: Maybe<Scalars['Int']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type ShareDetailResult = {
  data?: Maybe<ShareDetailData>;
  error?: Maybe<QueryError>;
};

export type ShareDividendSettingsInput = {
  accountForFractionalDividends?: InputMaybe<Scalars['ID']>;
  accountForShareDividends?: InputMaybe<Scalars['ID']>;
  distributionCondition?: InputMaybe<DividendDistributionCondition>;
  dividendRate?: InputMaybe<DividendRateInput>;
  dividendTransferTreatment?: InputMaybe<DividendTransferTreatment>;
  organizationFundForDividends?: InputMaybe<Scalars['ID']>;
};

export type ShareDividendSettingsResult = {
  accountForFractionalDividends?: Maybe<Scalars['ID']>;
  accountForShareDividends?: Maybe<Scalars['ID']>;
  distributionCondition?: Maybe<DividendDistributionCondition>;
  dividendRate?: Maybe<DividendRate>;
  dividendTransferTreatment?: Maybe<DividendTransferTreatment>;
  organizationFundForDividends?: Maybe<Scalars['ID']>;
};

export type ShareExtraChargeDetails = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type ShareExtraCharges = {
  name: Scalars['String'];
  value: Scalars['Float'];
};

export type ShareExtraChargesInput = {
  Id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type ShareHistory = {
  balance?: Maybe<ShareBalance>;
  history?: Maybe<Array<Maybe<ShareRegister>>>;
};

export type ShareInfoView = {
  issuedCount?: Maybe<Scalars['String']>;
  returnedCount?: Maybe<Scalars['String']>;
  totalBalance?: Maybe<Scalars['String']>;
  totalCount?: Maybe<Scalars['String']>;
};

export type ShareInformation = {
  amount?: Maybe<Scalars['String']>;
  kitta?: Maybe<Scalars['String']>;
  perShareAmount?: Maybe<Scalars['String']>;
};

export type ShareInvestment = {
  certificateNo: Scalars['String'];
  count: Scalars['Int'];
  date: Scalars['Localized'];
  notes?: Maybe<Scalars['String']>;
  purchaseAmount: Scalars['String'];
  rate: Scalars['String'];
};

export type ShareInvestmentInput = {
  certificateNo: Scalars['String'];
  count: Scalars['Int'];
  date: Scalars['Localized'];
  notes?: InputMaybe<Scalars['String']>;
  purchaseAmount: Scalars['String'];
  rate: Scalars['String'];
};

export type ShareInvestmentTransactionInput = {
  bonusAmount?: InputMaybe<Scalars['String']>;
  date: Scalars['Localized'];
  dividendAmount?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  sharePerKitta?: InputMaybe<Scalars['String']>;
  shareQuantity?: InputMaybe<Scalars['Int']>;
  shareReturnKitta?: InputMaybe<Scalars['Int']>;
  totalAmount?: InputMaybe<Scalars['String']>;
  totalShareReturnAmount?: InputMaybe<Scalars['String']>;
  type: ShareInvestmentType;
};

export enum ShareInvestmentType {
  ShareBonusDividend = 'SHARE_BONUS_DIVIDEND',
  ShareReturn = 'SHARE_RETURN',
}

export type ShareIssueChargesInput = {
  other?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
  shareCertificate?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
};

export type ShareIssueChargesResult = {
  other?: Maybe<Array<Maybe<ShareCharge>>>;
  shareCertificate?: Maybe<Array<Maybe<ShareCharge>>>;
};

export type ShareMutation = {
  purchase: SharePurchaseResult;
  return: ShareReturnResult;
};

export type ShareMutationPurchaseArgs = {
  data: SharePurchaseInput;
};

export type ShareMutationReturnArgs = {
  data: ShareReturnInput;
};

export type ShareNumber = {
  end?: Maybe<Scalars['Int']>;
  start?: Maybe<Scalars['Int']>;
};

export type SharePaymentDetail = {
  amount?: Maybe<Scalars['String']>;
  paymentMode?: Maybe<SharePaymentMode>;
  sourceOfFund?: Maybe<Scalars['String']>;
};

export enum SharePaymentMode {
  Account = 'ACCOUNT',
  BankVoucherOrCheque = 'BANK_VOUCHER_OR_CHEQUE',
  Cash = 'CASH',
}

export type SharePurchaseError = InvalidDataError;

export type SharePurchaseInput = {
  account?: InputMaybe<ShareTransactionAccountPayment>;
  bankVoucher?: InputMaybe<ShareTransactionVoucherPayment>;
  cash?: InputMaybe<ShareTransactionCash>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId: Scalars['String'];
  paymentMode?: InputMaybe<SharePaymentMode>;
  shareCount: Scalars['Int'];
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type SharePurchaseRegisterFilter = {
  type?: InputMaybe<ShareTransactionType>;
};

export type SharePurchaseRegisterReport = {
  kittaNumFrom?: Maybe<Scalars['String']>;
  kittaNumTo?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  perShareAmount?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  totalKitta?: Maybe<Scalars['String']>;
};

export type SharePurchaseRegisterReportFilter = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SharePurchaseRegisterFilter>;
  period: LocalizedDateFilter;
};

export type SharePurchaseRegisterResult = {
  Summary?: Maybe<Scalars['Map']>;
  data?: Maybe<Array<Maybe<SharePurchaseRegisterReport>>>;
  error?: Maybe<QueryError>;
  meta?: Maybe<Scalars['Map']>;
};

export type SharePurchaseResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type ShareQuery = {
  balance?: Maybe<ShareBalanceConnection>;
  charges?: Maybe<Array<Maybe<ShareCharges>>>;
  history?: Maybe<ShareHistory>;
  register?: Maybe<ShareRegisterConnection>;
  shareDetail?: Maybe<ShareDetailResult>;
};

export type ShareQueryBalanceArgs = {
  filter?: InputMaybe<ShareBalanceFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type ShareQueryChargesArgs = {
  shareCount: Scalars['Int'];
  transactionType: Share_Transaction_Direction;
};

export type ShareQueryHistoryArgs = {
  memberId: Scalars['ID'];
};

export type ShareQueryRegisterArgs = {
  filter?: InputMaybe<ShareRegisterFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type ShareQueryShareDetailArgs = {
  transactionID: Scalars['ID'];
};

export type ShareRegister = {
  accountId?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['Int']>;
  bankId?: Maybe<Scalars['String']>;
  credit?: Maybe<Scalars['Int']>;
  debit?: Maybe<Scalars['Int']>;
  endNumber: Scalars['Int'];
  extraFee?: Maybe<Array<Maybe<ShareExtraCharges>>>;
  id?: Maybe<Scalars['ID']>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['String']>;
  noOfShare?: Maybe<Scalars['String']>;
  otherCharge?: Maybe<Scalars['String']>;
  paymentMode?: Maybe<SharePaymentMode>;
  shareAmount?: Maybe<Scalars['String']>;
  shareCertificateCharge?: Maybe<Scalars['String']>;
  startNumber: Scalars['Int'];
  status?: Maybe<Share_Status>;
  totalAmount?: Maybe<Scalars['Float']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  transactionDirection: Share_Transaction_Direction;
  transactionId?: Maybe<Scalars['String']>;
  voucherNumber?: Maybe<Scalars['String']>;
};

export type ShareRegisterConnection = {
  edges: Array<ShareRegisterEdge>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ShareRegisterDetails = {
  date?: Maybe<Scalars['Localized']>;
  noOfShares?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  txnAmount?: Maybe<Scalars['String']>;
  txnType?: Maybe<ShareTransactionType>;
};

export type ShareRegisterEdge = {
  cursor: Scalars['String'];
  node: ShareRegister;
};

export type ShareRegisterFilter = {
  dateFrom?: InputMaybe<Scalars['String']>;
  dateTo?: InputMaybe<Scalars['String']>;
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['String']>;
  memberCode?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  memberName?: InputMaybe<Scalars['String']>;
  memberSearchText?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Share_Status>;
  transactionDirection?: InputMaybe<Share_Transaction_Direction>;
};

export type ShareReport = {
  shareBalanceReport?: Maybe<ShareBalanceReportResult>;
  sharePurchaseRegisterReport?: Maybe<SharePurchaseRegisterResult>;
  shareStatementReport?: Maybe<ReportResult>;
  shareTransactionReport?: Maybe<ShareTransactionReportResult>;
};

export type ShareReportShareBalanceReportArgs = {
  data?: InputMaybe<ShareBalanceReportFilter>;
};

export type ShareReportSharePurchaseRegisterReportArgs = {
  data?: InputMaybe<SharePurchaseRegisterReportFilter>;
};

export type ShareReportShareStatementReportArgs = {
  data: ShareStatementReportSettings;
};

export type ShareReportShareTransactionReportArgs = {
  data?: InputMaybe<ShareTransactionReportFilter>;
};

export type ShareReturnChargesInput = {
  other?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
};

export type ShareReturnChargesResult = {
  other?: Maybe<Array<Maybe<ShareCharge>>>;
};

export type ShareReturnError = InvalidDataError;

export type ShareReturnInput = {
  account?: InputMaybe<ShareTransactionAccountPayment>;
  bankCheque?: InputMaybe<ShareTransactionChequePayment>;
  cash?: InputMaybe<ShareTransactionCash>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId: Scalars['String'];
  noOfReturnedShares: Scalars['Int'];
  paymentMode?: InputMaybe<SharePaymentMode>;
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type ShareReturnResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type ShareSettingsAddMutation = {
  bonus?: Maybe<ShareSettingsQuery>;
  dividend?: Maybe<ShareSettingsQuery>;
  general?: Maybe<ShareSettingsQuery>;
  shareIssueCharges?: Maybe<ShareSettingsQuery>;
  shareReturnCharges?: Maybe<ShareSettingsQuery>;
  transfer?: Maybe<ShareSettingsQuery>;
};

export type ShareSettingsAddMutationBonusArgs = {
  data?: InputMaybe<ShareBonusSettingsInput>;
};

export type ShareSettingsAddMutationDividendArgs = {
  data?: InputMaybe<ShareDividendSettingsInput>;
};

export type ShareSettingsAddMutationGeneralArgs = {
  data?: InputMaybe<ShareSettingsGeneralInput>;
};

export type ShareSettingsAddMutationShareIssueChargesArgs = {
  data?: InputMaybe<ShareIssueChargesInput>;
};

export type ShareSettingsAddMutationShareReturnChargesArgs = {
  data?: InputMaybe<ShareReturnChargesInput>;
};

export type ShareSettingsAddMutationTransferArgs = {
  data?: InputMaybe<ShareTransferSettingsInput>;
};

export type ShareSettingsGeneralInput = {
  endNumber?: InputMaybe<Scalars['Int']>;
  incrementor?: InputMaybe<Scalars['Int']>;
  maximumQuantityOfShare?: InputMaybe<Scalars['Int']>;
  minimumQuantityOfShare?: InputMaybe<Scalars['Int']>;
  multiplicityFactor?: InputMaybe<Scalars['Int']>;
  noOfAuthorisedPaidUpShare?: InputMaybe<Scalars['Int']>;
  noOfDigits?: InputMaybe<Scalars['Int']>;
  noOfIssuedShare?: InputMaybe<Scalars['Int']>;
  paidUpShareRate?: InputMaybe<Scalars['Int']>;
  shareIssueAuthority?: InputMaybe<Array<InputMaybe<BranchCategory>>>;
  startNumber?: InputMaybe<Scalars['Int']>;
  typeOfShare?: InputMaybe<TypeOfShare>;
  typeOfShareKitta?: InputMaybe<TypeOfShare>;
};

export type ShareSettingsGeneralResult = {
  endNumber?: Maybe<Scalars['Int']>;
  incrementor?: Maybe<Scalars['Int']>;
  maximumQuantityOfShare?: Maybe<Scalars['Int']>;
  minimumQuantityOfShare?: Maybe<Scalars['Int']>;
  multiplicityFactor?: Maybe<Scalars['Int']>;
  noOfAuthorisedPaidUpShare?: Maybe<Scalars['Int']>;
  noOfDigits?: Maybe<Scalars['Int']>;
  noOfIssuedShare?: Maybe<Scalars['Int']>;
  paidUpShareRate?: Maybe<Scalars['Int']>;
  shareIssueAuthority?: Maybe<Array<Maybe<BranchCategory>>>;
  startNumber?: Maybe<Scalars['Int']>;
  typeOfShare?: Maybe<TypeOfShare>;
  typeOfShareKitta?: Maybe<TypeOfShare>;
};

export type ShareSettingsMutation = {
  add?: Maybe<ShareSettingsAddMutation>;
};

export type ShareSettingsQuery = {
  bonus?: Maybe<ShareBonusSettingsBonusResult>;
  dividend?: Maybe<ShareDividendSettingsResult>;
  general?: Maybe<ShareSettingsGeneralResult>;
  shareIssueCharges?: Maybe<ShareIssueChargesResult>;
  shareReturnCharges?: Maybe<ShareReturnChargesResult>;
  transfer?: Maybe<ShareTransferSettingsResult>;
};

export type ShareStatement = {
  balanceSheet: Scalars['Int'];
  date: Scalars['Localized'];
  noOfShares: Scalars['Int'];
  particular: Scalars['String'];
  purchaseAmountCr: Scalars['Int'];
  returnAmountDr: Scalars['Int'];
};

export type ShareStatementReport = {
  shareStatement?: Maybe<Array<Maybe<ShareStatement>>>;
  totals?: Maybe<TotalReport>;
};

export type ShareStatementReportSettings = {
  filter?: InputMaybe<ShareTransactionType>;
  memberId: Scalars['ID'];
  period: LocalizedDateFilter;
};

export type ShareStatementReportSettingsType = {
  filter?: Maybe<ShareTransactionType>;
  memberId: Scalars['ID'];
  period: PeriodType;
};

export type ShareTransactionAccountPayment = {
  accountId: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type ShareTransactionCash = {
  cashPaid: Scalars['String'];
  denominations?: InputMaybe<Array<Denomination>>;
  disableDenomination: Scalars['Boolean'];
  fileUpload?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  returned_amount: Scalars['String'];
  sourceOfFund?: InputMaybe<Scalars['String']>;
  total: Scalars['String'];
};

export type ShareTransactionChequePayment = {
  bankId: Scalars['ID'];
  chequeNo: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type ShareTransactionFilter = {
  ageRange?: InputMaybe<MemberAgeRange>;
  districtId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  education?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  gender?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  localGovernmentId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  provinceId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export type ShareTransactionFooter = {
  totalBalance?: Maybe<Scalars['String']>;
  totalCr?: Maybe<Scalars['String']>;
  totalDr?: Maybe<Scalars['String']>;
};

export type ShareTransactionReport = {
  balance?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  shareIssueCr?: Maybe<Scalars['String']>;
  shareReturnDr?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
};

export type ShareTransactionReportFilter = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ShareTransactionFilter>;
  period: LocalizedDateFilter;
};

export type ShareTransactionReportResult = {
  avgSharePerMember?: Maybe<Scalars['String']>;
  data?: Maybe<Array<Maybe<ShareTransactionReport>>>;
  error?: Maybe<QueryError>;
  footer?: Maybe<ShareTransactionFooter>;
  openingValue?: Maybe<Scalars['String']>;
  totalShareIssued?: Maybe<Scalars['String']>;
};

export enum ShareTransactionType {
  All = 'ALL',
  Issue = 'ISSUE',
  Return = 'RETURN',
}

export type ShareTransactionVoucherPayment = {
  bankId: Scalars['ID'];
  citizenshipDocument?: InputMaybe<Scalars['String']>;
  depositedBy: ShareVoucherDepositedBy;
  depositedByOtherName?: InputMaybe<Scalars['String']>;
  depositedDate: Scalars['Localized'];
  fileUpload?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  voucherId: Scalars['String'];
};

export type ShareTransferSettingsInput = {
  accountForShareFund?: InputMaybe<Scalars['ID']>;
  mappedShareLedger?: InputMaybe<Scalars['ID']>;
  type?: InputMaybe<ShareTransferType>;
};

export type ShareTransferSettingsResult = {
  accountForShareFund?: Maybe<Scalars['ID']>;
  mappedShareLedger?: Maybe<Scalars['ID']>;
  type?: Maybe<ShareTransferType>;
};

export enum ShareTransferType {
  MemberToMember = 'MEMBER_TO_MEMBER',
  ShareRefund = 'SHARE_REFUND',
}

export enum ShareVoucherDepositedBy {
  Other = 'OTHER',
  Self = 'SELF',
}

export type SisterConcernDetails = {
  address?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type SisterConcernDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type SisterConcernDetailsType = {
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type SlipEntry = {
  date?: Maybe<Scalars['Localized']>;
  slipNumber: Scalars['String'];
  state: SlipState;
};

export type SlipRange = {
  from: Scalars['String'];
  to: Scalars['String'];
};

export type SlipRangeInput = {
  from: Scalars['Int'];
  to: Scalars['Int'];
};

export enum SlipState {
  Cancelled = 'CANCELLED',
  Issued = 'ISSUED',
  Used = 'USED',
}

export type StatementReport =
  | ActiveInactiveMemberReport
  | LoanStatementReport
  | SavingStatementReport
  | ShareStatementReport;

export type StatementReportInput = {
  data?: InputMaybe<ShareStatementReportSettings>;
  id: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
  reportType?: InputMaybe<Scalars['String']>;
};

export type SubscriptionMutation = {
  ReferenceKYM: DocumentMutationResult;
  Upsert: DocumentMutationResult;
};

export type SubscriptionMutationReferenceKymArgs = {
  deference?: InputMaybe<Scalars['Boolean']>;
  fieldId: Scalars['String'];
  memberId: Scalars['String'];
};

export type SubscriptionMutationUpsertArgs = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
};

export type SuspiciousTransactionReport = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  product_name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Boolean']>;
  tranxType?: Maybe<NatureOfTransaction>;
};

export type SuspiciousTransactionReportInput = {
  branchId: Scalars['String'];
  filter?: InputMaybe<SuspiciousTransactionReportInputFilter>;
  period: LocalizedDateFilter;
};

export type SuspiciousTransactionReportInputFilter = {
  amount?: InputMaybe<MinMaxFilter>;
  memberId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  nature?: InputMaybe<Array<InputMaybe<NatureOfTransaction>>>;
};

export type SuspiciousTransactionReportResult = {
  data?: Maybe<Array<Maybe<SuspiciousTransactionReport>>>;
  error?: Maybe<QueryError>;
};

export enum SuspiciousTransactionTopology {
  ChequeFraud = 'CHEQUE_FRAUD',
  CorruptionGratuity = 'CORRUPTION_GRATUITY',
  CounterfeitInstrument = 'COUNTERFEIT_INSTRUMENT',
  DebitCreditOrOtherCardFraud = 'DEBIT_CREDIT_OR_OTHER_CARD_FRAUD',
  FalseStatement = 'FALSE_STATEMENT',
  IdentityTheft = 'IDENTITY_THEFT',
  LoanFraud = 'LOAN_FRAUD',
  MisuseOfPositionOrSelf = 'MISUSE_OF_POSITION_OR_SELF',
  MysteriousDisapperanceBehaviour = 'MYSTERIOUS_DISAPPERANCE_BEHAVIOUR',
  TaxEvasion = 'TAX_EVASION',
  TerroristFinancing = 'TERRORIST_FINANCING',
}

export enum Transaction_Direction {
  Purchased = 'PURCHASED',
  Sold = 'SOLD',
}

export type TtrDataEntry = {
  accountNo?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  amount?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  nature?: Maybe<NatureOfTransaction>;
  remarks?: Maybe<Scalars['String']>;
  sourceOfFund?: Maybe<Scalars['String']>;
};

export type TtrFilter = {
  amount?: InputMaybe<MinMaxFilter>;
  fiscalYear?: InputMaybe<LocalizedDateFilter>;
  member?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  natureOfTransactions?: InputMaybe<Array<InputMaybe<NatureOfTransaction>>>;
};

export type TtrReportData = {
  perTranx?: Maybe<Array<Maybe<TtrDataEntry>>>;
  yearly?: Maybe<Array<Maybe<TtrDataEntry>>>;
};

export type TtrReportFilter = {
  branchId: Scalars['String'];
  filter?: InputMaybe<TtrFilter>;
  period: LocalizedDateFilter;
};

export type TtrReportResult = {
  data?: Maybe<TtrReportData>;
  error?: Maybe<QueryError>;
};

export enum TaxPayerOptions {
  Cooperative = 'COOPERATIVE',
  Member = 'MEMBER',
}

export type TellerActivityEntry = {
  ID: Scalars['ID'];
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  denomination?: Maybe<Array<Maybe<DenominationValue>>>;
  destBranch?: Maybe<Scalars['Localized']>;
  destProfilePic?: Maybe<Scalars['String']>;
  destProfilePicUrl?: Maybe<Scalars['String']>;
  destTeller?: Maybe<Scalars['Localized']>;
  srcBranch?: Maybe<Scalars['Localized']>;
  srcProfilePic?: Maybe<Scalars['String']>;
  srcProfilePicUrl?: Maybe<Scalars['String']>;
  srcTeller?: Maybe<Scalars['Localized']>;
  transferCode?: Maybe<Scalars['String']>;
  transferState: TellerActivityState;
  transferType: TellerTransferType;
};

export type TellerActivityListConnection = {
  edges?: Maybe<Array<Maybe<TellerActivityListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type TellerActivityListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<TellerActivityEntry>;
};

export enum TellerActivityState {
  Approved = 'APPROVED',
  Cancelled = 'CANCELLED',
  Pending = 'PENDING',
}

export type TellerDataEntry = {
  balance?: Maybe<Scalars['String']>;
  inAmount?: Maybe<Scalars['String']>;
  inTransit?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outAmount?: Maybe<Scalars['String']>;
  stack?: Maybe<Scalars['String']>;
  tellerId?: Maybe<Scalars['String']>;
};

export type TellerDataHolder = {
  balanceTotal?: Maybe<Scalars['String']>;
  entries?: Maybe<Array<Maybe<TellerDataEntry>>>;
  inAmountTotal?: Maybe<Scalars['String']>;
  inTransitTotal?: Maybe<Scalars['String']>;
  outAmountTotal?: Maybe<Scalars['String']>;
  stackTotal?: Maybe<Scalars['String']>;
};

export type TellerFilter = {
  tellerId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tellerType?: InputMaybe<TellerType>;
};

export type TellerReportData = {
  headTeller?: Maybe<TellerDataHolder>;
  teller?: Maybe<TellerDataHolder>;
};

export type TellerReportFilter = {
  branchId: Scalars['String'];
  filter?: InputMaybe<TellerFilter>;
  period: LocalizedDateFilter;
};

export type TellerReportResult = {
  data?: Maybe<TellerReportData>;
  error?: Maybe<QueryError>;
};

export type TellerTransactionFilter = {
  type?: InputMaybe<Array<InputMaybe<TellerTransferType>>>;
};

export type TellerTransferActionResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<Scalars['ID']>;
};

export type TellerTransferInput = {
  amount?: InputMaybe<Scalars['String']>;
  branchPaymentMode?: InputMaybe<BranchPaymentMode>;
  denominations?: InputMaybe<Array<Denomination>>;
  destBranch?: InputMaybe<Scalars['String']>;
  destTellerID?: InputMaybe<Scalars['String']>;
  srcBranch?: InputMaybe<Scalars['String']>;
  srcTellerID?: InputMaybe<Scalars['String']>;
  transferType: TellerTransferType;
};

export type TellerTransferResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<Scalars['ID']>;
};

export enum TellerTransferType {
  BranchTransfer = 'BRANCH_TRANSFER',
  CashToVault = 'CASH_TO_VAULT',
  TellerTransfer = 'TELLER_TRANSFER',
  VaultToCash = 'VAULT_TO_CASH',
}

export enum TellerType {
  All = 'ALL',
  HeadTeller = 'HEAD_TELLER',
  Teller = 'TELLER',
}

export type TestDbResult = {
  name: Scalars['String'];
};

export enum TextFormat {
  Email = 'EMAIL',
  IPv4 = 'IPv4',
  IPv6 = 'IPv6',
}

export type TotalReport = {
  totalBalanceSheet?: Maybe<Scalars['Int']>;
  totalCr?: Maybe<Scalars['Int']>;
  totalDr?: Maybe<Scalars['Int']>;
  totalShares?: Maybe<Scalars['Int']>;
};

export type TransactionData = {
  noOfTransaction?: Maybe<Scalars['Int']>;
  percent?: Maybe<Scalars['String']>;
  todayValue?: Maybe<Scalars['String']>;
};

export type TransactionInfo = {
  amount: Scalars['String'];
  date: Scalars['Localized'];
  id: Scalars['String'];
  narration: Scalars['String'];
  transactionType: Scalars['String'];
};

export type TransactionListSummary = {
  averageBalance?: Maybe<Scalars['String']>;
  expensesThisMonth?: Maybe<Scalars['String']>;
  totalDeposit?: Maybe<Scalars['String']>;
  totalWithdraw?: Maybe<Scalars['String']>;
};

export enum TransactionMode {
  Ebanking = 'EBANKING',
  Mobile = 'MOBILE',
  MyraErp = 'MYRA_ERP',
}

export type TransactionMutation = {
  addMemberToAgent?: Maybe<DepositLoanAccountData>;
  agentTodayDeposit?: Maybe<AgentTodayListResult>;
  agentTodayList?: Maybe<AgentTodayListResult>;
  bulkDeposit: BulkDepositResult;
  deposit: DepositResult;
  endOfDay?: Maybe<EodResult>;
  tellerTransfer: TellerTransferResult;
  tellerTransferAction: TellerTransferActionResult;
  transfer: TransferResult;
  withdraw: WithdrawResult;
};

export type TransactionMutationAddMemberToAgentArgs = {
  agentId: Scalars['String'];
  data?: InputMaybe<AssignMembersInput>;
  override?: InputMaybe<Scalars['Boolean']>;
};

export type TransactionMutationAgentTodayDepositArgs = {
  agentID: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>>>;
};

export type TransactionMutationAgentTodayListArgs = {
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>>>;
  id: Scalars['ID'];
};

export type TransactionMutationBulkDepositArgs = {
  data?: InputMaybe<BulkDepositInput>;
};

export type TransactionMutationDepositArgs = {
  data: DepositInput;
};

export type TransactionMutationEndOfDayArgs = {
  option?: InputMaybe<EodOption>;
};

export type TransactionMutationTellerTransferArgs = {
  data: TellerTransferInput;
};

export type TransactionMutationTellerTransferActionArgs = {
  action: TransferRequestAction;
  declineReason?: InputMaybe<Scalars['String']>;
  requestId: Scalars['ID'];
};

export type TransactionMutationTransferArgs = {
  data: TransferInput;
};

export type TransactionMutationWithdrawArgs = {
  data: WithdrawInput;
};

export type TransactionMyDay = {
  cashInHand?: Maybe<CashInHandData>;
  deposit?: Maybe<TransactionData>;
  withdraw?: Maybe<TransactionData>;
};

export type TransactionMyDayData = {
  data?: Maybe<TransactionMyDay>;
  error?: Maybe<QueryError>;
};

export type TransactionQuery = {
  agentDetail?: Maybe<AgentRecord>;
  assignedMemberList: AssignedMembersListConnection;
  endOfDayDate: Scalars['String'];
  eodStatus?: Maybe<EodSatusResult>;
  listAgent: AccountAgentListConnection;
  listAgentTask?: Maybe<AgentTodayListData>;
  listAllTransactions?: Maybe<AllTransactionsConnection>;
  listDeposit: AccountActivityListConnection;
  listTellerTransaction: TellerActivityListConnection;
  listTransfer: AccountTransferListConnection;
  listWithdraw: AccountActivityListConnection;
  viewAccountTransfer?: Maybe<AccountTransferViewResult>;
  viewAgentList?: Maybe<AgentTransactionViewResult>;
  viewDeposit?: Maybe<DepositTransactionViewResult>;
  viewLoanRepayment?: Maybe<LoanRepaymentViewResult>;
  viewWithdraw?: Maybe<WithdrawTransactionViewResult>;
};

export type TransactionQueryAgentDetailArgs = {
  id: Scalars['ID'];
};

export type TransactionQueryAssignedMemberListArgs = {
  filter?: InputMaybe<AssignedMemberListFiler>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListAgentArgs = {
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListAgentTaskArgs = {
  id: Scalars['ID'];
};

export type TransactionQueryListAllTransactionsArgs = {
  filter?: InputMaybe<AllTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListDepositArgs = {
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListTellerTransactionArgs = {
  filter?: InputMaybe<TellerTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListTransferArgs = {
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListWithdrawArgs = {
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryViewAccountTransferArgs = {
  transactionId: Scalars['ID'];
};

export type TransactionQueryViewAgentListArgs = {
  agentId: Scalars['ID'];
  date: Scalars['String'];
};

export type TransactionQueryViewDepositArgs = {
  transactionId: Scalars['ID'];
};

export type TransactionQueryViewLoanRepaymentArgs = {
  paymentId: Scalars['ID'];
};

export type TransactionQueryViewWithdrawArgs = {
  transactionId: Scalars['ID'];
};

export type TransactionReport = {
  audit: AuditTransactionReport;
  financial: FianancialTransactionReport;
};

export enum TransactionState {
  Active = 'ACTIVE',
  Submitted = 'SUBMITTED',
}

export enum TransactionTypeFilter {
  All = 'ALL',
  Ibft = 'IBFT',
  Qr = 'QR',
  Wallet = 'WALLET',
}

export type TransferData = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  fine?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  payeeNumber?: Maybe<Scalars['String']>;
  receiverAccountId?: Maybe<Scalars['String']>;
  receiverAccountName?: Maybe<Scalars['String']>;
  receiverMemberId?: Maybe<Scalars['String']>;
  receiverMemberName?: Maybe<Scalars['Localized']>;
  remarks?: Maybe<Scalars['String']>;
  senderAccountId?: Maybe<Scalars['String']>;
  senderAccountName?: Maybe<Scalars['String']>;
  senderMemberId?: Maybe<Scalars['String']>;
  senderMemberName?: Maybe<Scalars['Localized']>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionAccount?: Maybe<Scalars['String']>;
  transactionMode?: Maybe<TransactionMode>;
  transferType?: Maybe<TransferType>;
  withdrawWith?: Maybe<WithdrawWith>;
};

export type TransferInput = {
  amount: Scalars['String'];
  counterSlipNo?: InputMaybe<Scalars['String']>;
  destAccountId: Scalars['String'];
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  pin?: InputMaybe<Scalars['Int']>;
  srcAccountId: Scalars['String'];
  transferMode?: InputMaybe<TransactionMode>;
  transferType?: InputMaybe<TransferType>;
  withdrawSlipNo?: InputMaybe<Scalars['String']>;
  withdrawWith?: InputMaybe<WithdrawWith>;
};

export enum TransferRequestAction {
  Approve = 'APPROVE',
  Decline = 'DECLINE',
}

export type TransferResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<TransferData>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum TransferType {
  Member = 'MEMBER',
  Self = 'SELF',
}

export type TranslateData = {
  data?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: Maybe<Scalars['String']>;
};

export type TranslateInput = {
  data?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: InputMaybe<Scalars['String']>;
};

export type TranslateQueryResult = {
  data?: Maybe<Array<Maybe<TranslateData>>>;
  error?: Maybe<QueryError>;
};

export type TrialSheetFilter = {
  includeZero?: InputMaybe<Scalars['Boolean']>;
};

export type TrialSheetReportData = {
  assets?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  assetsTotal?: Maybe<Scalars['String']>;
  equityAndLiablities?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  equityAndLiablitiesTotal?: Maybe<Scalars['String']>;
  expenseTotal?: Maybe<Scalars['String']>;
  expenses?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  income?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  incomeTotal?: Maybe<Scalars['String']>;
  offBalance?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  offBalanceTotal?: Maybe<Scalars['String']>;
  totalAssetExpense?: Maybe<Scalars['String']>;
  totalLiablitiesIncome?: Maybe<Scalars['String']>;
  totalProfitLoss?: Maybe<Scalars['String']>;
};

export type TrialSheetReportDataEntry = {
  balance?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  ledgerName?: Maybe<Scalars['Localized']>;
  under?: Maybe<Scalars['String']>;
};

export type TrialSheetReportFilter = {
  branchId: Scalars['String'];
  filter?: InputMaybe<TrialSheetFilter>;
  period: LocalizedDateFilter;
};

export type TrialSheetReportResult = {
  data?: Maybe<TrialSheetReportData>;
  error?: Maybe<QueryError>;
};

export enum TypeOfOrganization {
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
}

export enum TypeOfShare {
  PaidUp = 'PAID_UP',
}

export type UploadedDocument = {
  docData: Array<Maybe<UploadedDocumentData>>;
  fieldId?: Maybe<Scalars['String']>;
};

export type UploadedDocumentData = {
  identifier: Scalars['String'];
  url: Scalars['String'];
};

export type User = Base & {
  branch?: Maybe<Branch>;
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['Localized'];
  id: Scalars['ID'];
  lastName: Scalars['Localized'];
  middleName: Scalars['Localized'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  organization?: Maybe<Organization>;
  profilePic?: Maybe<Scalars['String']>;
  role?: Maybe<Roles>;
  username: Scalars['String'];
};

export type UserData = {
  preference?: Maybe<UserPreference>;
  user?: Maybe<User>;
};

export enum UserGender {
  Female = 'FEMALE',
  Male = 'MALE',
  Other = 'OTHER',
}

export type UserMutation = {
  passwordRecovery?: Maybe<PasswordRecoveryMutation>;
  preference?: Maybe<UserPreferenceMutation>;
  resetPassword?: Maybe<ResetPasswordResult>;
};

export type UserMutationResetPasswordArgs = {
  data: ResetPasswordData;
};

export type UserPreference = {
  date?: Maybe<DateType>;
  id?: Maybe<Scalars['ID']>;
  language?: Maybe<Language>;
  languageCode?: Maybe<Scalars['String']>;
};

export type UserPreferenceInput = {
  date?: InputMaybe<DateType>;
  language?: InputMaybe<Language>;
};

export type UserPreferenceMutation = {
  update?: Maybe<UserPreferenceResult>;
};

export type UserPreferenceMutationUpdateArgs = {
  data: UserPreferenceInput;
  id: Scalars['ID'];
};

export type UserPreferenceQuery = {
  get?: Maybe<UserPreference>;
};

export type UserPreferenceQueryGetArgs = {
  id: Scalars['ID'];
};

export type UserPreferenceResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UserPreference>;
  recordId?: Maybe<Scalars['ID']>;
};

export type UserQuery = {
  preference?: Maybe<UserPreferenceQuery>;
};

export type UserReport = {
  accessForBranch?: Maybe<Scalars['String']>;
  accessForGroup?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDate?: Maybe<Scalars['Localized']>;
  empCode?: Maybe<Scalars['String']>;
  employeeName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  isCoreEmployee?: Maybe<Scalars['Boolean']>;
  remarks?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  usernameCode?: Maybe<Scalars['String']>;
};

export type UserReportFilter = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<UserReportFilterData>;
  period: LocalizedDateFilter;
};

export type UserReportFilterData = {
  isCoreEmployee?: InputMaybe<Scalars['Boolean']>;
  role?: InputMaybe<Array<InputMaybe<RolesFilter>>>;
};

export type UserReportResult = {
  data?: Maybe<Array<Maybe<UserReport>>>;
  error?: Maybe<QueryError>;
};

export enum UserType {
  Human = 'HUMAN',
  System = 'SYSTEM',
}

export type ValidationError = {
  code: Scalars['Int'];
  message: Scalars['InvalidData'];
};

export enum ValuationMethod {
  Dv = 'DV',
  Fmv = 'FMV',
}

export type Valuator = Base & {
  academicQualification?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  contractDate?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  insurancePremium?: Maybe<Scalars['Float']>;
  mobileNo?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  phoneNo?: Maybe<Scalars['String']>;
  renewalDate?: Maybe<Scalars['String']>;
  valuationLicenseNo?: Maybe<Scalars['String']>;
  valuatorId?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
  valuatorType?: Maybe<ValuatorType>;
};

export type ValuatorConnection = {
  edges?: Maybe<Array<ValuatorEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ValuatorEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Valuator>;
};

export type ValuatorFormStateData = {
  academicQualification?: Maybe<Scalars['String']>;
  address?: Maybe<KymAddress>;
  contractDate?: Maybe<Scalars['Localized']>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  insurancePremium?: Maybe<Scalars['Float']>;
  mobileNo?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
  renewalDate?: Maybe<Scalars['Localized']>;
  valuationLicenseNo?: Maybe<Scalars['String']>;
  valuatorId?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
  valuatorType?: Maybe<ValuatorType>;
};

export type ValuatorFormStateResult = {
  data?: Maybe<ValuatorFormStateData>;
  error?: Maybe<QueryError>;
};

export type ValuatorInput = {
  academicQualification?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<KymAddressInput>;
  contractDate?: InputMaybe<Scalars['Localized']>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  email?: InputMaybe<Scalars['String']>;
  insurancePremium?: InputMaybe<Scalars['Float']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
  renewalDate?: InputMaybe<Scalars['Localized']>;
  valuationLicenseNo?: InputMaybe<Scalars['String']>;
  valuatorId?: InputMaybe<Scalars['String']>;
  valuatorName?: InputMaybe<Scalars['String']>;
  valuatorType?: InputMaybe<ValuatorType>;
};

export type ValuatorResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ValuatorSettingsQuery>;
  record?: Maybe<Valuator>;
  recordId: Scalars['ID'];
};

export type ValuatorSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type ValuatorSettingsMutation = {
  add?: Maybe<ValuatorResult>;
};

export type ValuatorSettingsMutationAddArgs = {
  data?: InputMaybe<ValuatorInput>;
  id: Scalars['ID'];
};

export type ValuatorSettingsQuery = {
  formState?: Maybe<ValuatorFormStateResult>;
  list?: Maybe<ValuatorConnection>;
};

export type ValuatorSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type ValuatorSettingsQueryListArgs = {
  filter?: InputMaybe<ValuatorSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export enum ValuatorType {
  Individual = 'INDIVIDUAL',
  Organization = 'ORGANIZATION',
}

export type VaultBalanceDataEntry = {
  amountTotal?: Maybe<Scalars['String']>;
  denomination?: Maybe<Array<Maybe<DenominationValue>>>;
  noneAmount?: Maybe<Scalars['String']>;
  noteTotal?: Maybe<Scalars['String']>;
};

export type VaultBalanceReportData = {
  closing?: Maybe<VaultBalanceDataEntry>;
  opening?: Maybe<VaultBalanceDataEntry>;
  vaultIn?: Maybe<VaultBalanceDataEntry>;
  vaultOut?: Maybe<VaultBalanceDataEntry>;
};

export type VaultBalanceReportFilter = {
  branchId: Scalars['String'];
  period: LocalizedDateFilter;
};

export type VaultBalanceReportResult = {
  data?: Maybe<VaultBalanceReportData>;
  error?: Maybe<QueryError>;
};

export enum Week {
  Friday = 'FRIDAY',
  Monday = 'MONDAY',
  Saturday = 'SATURDAY',
  Sunday = 'SUNDAY',
  Thursday = 'THURSDAY',
  Tuesday = 'TUESDAY',
  Wednesday = 'WEDNESDAY',
}

export enum WeeklyFrequency {
  Day = 'DAY',
  DayOfTheWeek = 'DAY_OF_THE_WEEK',
}

export type WithdrawBankCheque = {
  amount: Scalars['String'];
  bankId: Scalars['String'];
  chequeNo: Scalars['String'];
};

export enum WithdrawBy {
  Agent = 'AGENT',
  Self = 'SELF',
}

export type WithdrawInput = {
  accountId: Scalars['String'];
  agentId?: InputMaybe<Scalars['String']>;
  amount: Scalars['String'];
  bankCheque?: InputMaybe<WithdrawBankCheque>;
  cash?: InputMaybe<DepositCash>;
  counterSlipNo?: InputMaybe<Scalars['String']>;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  fine?: InputMaybe<Scalars['String']>;
  isSuspicious?: InputMaybe<Scalars['Boolean']>;
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  override?: InputMaybe<Scalars['Boolean']>;
  payment_type: WithdrawPaymentType;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  suspicionRemarks?: InputMaybe<Scalars['String']>;
  suspicionTopologies?: InputMaybe<Array<InputMaybe<SuspiciousTransactionTopology>>>;
  withdrawSlipNo?: InputMaybe<Scalars['String']>;
  withdrawWith: WithdrawWith;
  withdrawnBy: WithdrawBy;
};

export enum WithdrawPaymentType {
  BankCheque = 'BANK_CHEQUE',
  Cash = 'CASH',
}

export type WithdrawPenalty = {
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export type WithdrawPenaltyFormState = {
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type WithdrawRecord = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  fine?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<WithdrawPaymentType>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionID?: Maybe<Scalars['ID']>;
  withdrawWith?: Maybe<WithdrawWith>;
  withdrawnBy?: Maybe<WithdrawBy>;
};

export type WithdrawResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<WithdrawRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type WithdrawSlip = {
  accId: Scalars['String'];
  amount: Scalars['String'];
  isDifferentMember?: InputMaybe<Scalars['Boolean']>;
  memberId?: InputMaybe<Scalars['String']>;
  withdrawSlipNo: Scalars['String'];
};

export type WithdrawSlipDepositData = {
  accountId: Scalars['String'];
  agentID?: InputMaybe<Scalars['ID']>;
  amount: Scalars['String'];
  depositedBy: DepositedBy;
  isDifferentMember?: InputMaybe<Scalars['Boolean']>;
  memberId?: InputMaybe<Scalars['String']>;
  withdrawSlipNo: Scalars['String'];
};

export type WithdrawSlipIssueInput = {
  accountId: Scalars['ID'];
  branchId: Scalars['String'];
  count: Scalars['Int'];
  marketRepresentative?: InputMaybe<Scalars['String']>;
  pickupMethod: PickupMethod;
};

export type WithdrawSlipMutation = {
  cancelSlip?: Maybe<AccountWithdrawSlipMutationResult>;
  issueNew?: Maybe<AccountWithdrawSlipMutationResult>;
};

export type WithdrawSlipMutationCancelSlipArgs = {
  accountId: Scalars['ID'];
  reason?: InputMaybe<Scalars['String']>;
  slipNumber?: InputMaybe<Scalars['Int']>;
  slipRange?: InputMaybe<SlipRangeInput>;
};

export type WithdrawSlipMutationIssueNewArgs = {
  data: WithdrawSlipIssueInput;
};

export type WithdrawSlipQuery = {
  getAvailableRange?: Maybe<AccountWithdrawSlipRangeQueryResult>;
  listAvailableSlips?: Maybe<AccountWithdrawSlipQueryResult>;
  listPastSlips?: Maybe<AccountWithdrawSlipQueryResult>;
};

export type WithdrawSlipQueryGetAvailableRangeArgs = {
  count: Scalars['Int'];
};

export type WithdrawSlipQueryListAvailableSlipsArgs = {
  accountId: Scalars['ID'];
};

export type WithdrawSlipQueryListPastSlipsArgs = {
  accountId: Scalars['ID'];
};

export type WithdrawTransactionView = {
  accountName?: Maybe<Scalars['String']>;
  chequeNo?: Maybe<Scalars['String']>;
  fine?: Maybe<Scalars['String']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  marketRepId?: Maybe<Scalars['String']>;
  marketRepName?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  paymentMode?: Maybe<WithdrawPaymentType>;
  status?: Maybe<ObjState>;
  teller?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalWithdrawnAmount?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['String']>;
  withdrawAmount?: Maybe<Scalars['String']>;
  withdrawWith?: Maybe<WithdrawWith>;
  withdrawnBy?: Maybe<WithdrawBy>;
};

export type WithdrawTransactionViewResult = {
  data?: Maybe<WithdrawTransactionView>;
  error?: Maybe<QueryError>;
};

export type WithdrawViaCollectorConnection = {
  edges?: Maybe<Array<Maybe<WithdrawViaCollectorEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type WithdrawViaCollectorEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<WithdrawViaCollectorList>;
};

export type WithdrawViaCollectorList = {
  accountNumber: Scalars['String'];
  accountType: Scalars['String'];
  amount: Scalars['String'];
  approvalStatus: RequestStatus;
  collectorName: Scalars['String'];
  id: Scalars['String'];
  memberAge?: Maybe<Scalars['Int']>;
  memberCode?: Maybe<Scalars['String']>;
  memberGender?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNumber: Scalars['String'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  requestedDate: Scalars['String'];
};

export enum WithdrawWith {
  CounterSlip = 'COUNTER_SLIP',
  WithdrawSlip = 'WITHDRAW_SLIP',
}

export type SetBankAccountsMutationVariables = Exact<{
  data?: InputMaybe<NewBankAccountInput>;
}>;

export type SetBankAccountsMutation = {
  accounting: {
    bankAccounts: {
      new?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    };
  };
};

export type SetJournalVoucherDataMutationVariables = Exact<{
  data?: InputMaybe<JournalVoucherInput>;
}>;

export type SetJournalVoucherDataMutation = {
  accounting: {
    journalVoucher: {
      new?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    };
  };
};

export type SetExternalLoanMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<ExternalLoanApplicationInput>;
}>;

export type SetExternalLoanMutation = {
  accounting: {
    externalLoan: {
      loan?: {
        new?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    };
  };
};

export type SetExternalAccountMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<ExternalLoanAccountInput>;
}>;

export type SetExternalAccountMutation = {
  accounting: {
    externalLoan: {
      account?: {
        new?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    };
  };
};

export type SetExternalPaymentMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<ExternalLoanPaymentInput>;
}>;

export type SetExternalPaymentMutation = {
  accounting: {
    externalLoan: {
      payment?: {
        new?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    };
  };
};

export type SetInvestmentAccountDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: InvestmentAccountInput;
}>;

export type SetInvestmentAccountDataMutation = {
  accounting: {
    investment: {
      upsertAccount: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetInvestmentEntryDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: InvestmentEntryInput;
}>;

export type SetInvestmentEntryDataMutation = {
  accounting: {
    investment: {
      upsertEntry: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetInvestmentTransactionDataMutationVariables = Exact<{
  data: InvestmentTransactionInput;
}>;

export type SetInvestmentTransactionDataMutation = {
  accounting: {
    investment: {
      addTransaction: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetSalesCustomerDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: SalesCustomerInput;
}>;

export type SetSalesCustomerDataMutation = {
  accounting: {
    sales: {
      upsertCustomer: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetSalesSaleEntryDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: SalesSaleEntryInput;
}>;

export type SetSalesSaleEntryDataMutation = {
  accounting: {
    sales: {
      upsertSaleEntry: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetSalesCreditNoteDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: SalesCreditNoteInput;
}>;

export type SetSalesCreditNoteDataMutation = {
  accounting: {
    sales: {
      upsertCreditNote: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetSalesCustomerPaymentDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: SalesCustomerPaymentInput;
}>;

export type SetSalesCustomerPaymentDataMutation = {
  accounting: {
    sales: {
      upsertCustomerPayment: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetAccountCloseDataMutationVariables = Exact<{
  data?: InputMaybe<DepositAccountClose>;
}>;

export type SetAccountCloseDataMutation = {
  account: {
    close?: {
      recordId: string;
      calculatedAmount?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAccountOpenDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: DepositLoanAccountInput;
}>;

export type SetAccountOpenDataMutation = {
  account: {
    add?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAccountDocumentDataMutationVariables = Exact<{
  subscriptionId: Scalars['String'];
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetAccountDocumentDataMutation = {
  document: { Subscription: { Upsert: { recordId?: string | null } } };
};

export type SetIssueNewSlipMutationVariables = Exact<{
  data: WithdrawSlipIssueInput;
}>;

export type SetIssueNewSlipMutation = {
  withdrawSlip: {
    issueNew?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAddMemberToAgentDataMutationVariables = Exact<{
  agentId: Scalars['String'];
  data?: InputMaybe<AssignMembersInput>;
  override?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetAddMemberToAgentDataMutation = {
  transaction: {
    addMemberToAgent?: {
      data?: { id: string } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAgentTodayListDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>> | InputMaybe<AgentTodayListInput>>;
}>;

export type SetAgentTodayListDataMutation = {
  transaction: {
    agentTodayList?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAgentTodayDepositDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>> | InputMaybe<AgentTodayListInput>>;
}>;

export type SetAgentTodayDepositDataMutation = {
  transaction: {
    agentTodayDeposit?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type LoginMutationVariables = Exact<{
  data: LoginInput;
}>;

export type LoginMutation = {
  auth: {
    login?: {
      recordId?: string | null;
      record?: {
        token: { access: string; refresh: string };
        data: {
          user?: {
            id: string;
            objState: ObjState;
            username: string;
            firstName: Record<'local' | 'en' | 'np', string>;
            middleName: Record<'local' | 'en' | 'np', string>;
            lastName: Record<'local' | 'en' | 'np', string>;
            role?: Roles | null;
            profilePic?: string | null;
            branch?: { id: string; name?: string | null } | null;
            organization?: {
              basicDetails?: { name?: string | null; logo?: string | null } | null;
              contactDetails?: {
                website?: string | null;
                phoneNumber?: string | null;
                email?: string | null;
              } | null;
              address?: {
                district?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                state?: Record<'local' | 'en' | 'np', string> | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              registrationDetails?: { regdNo?: string | null; panOrVat?: string | null } | null;
            } | null;
          } | null;
          preference?: {
            language?: Language | null;
            languageCode?: string | null;
            date?: DateType | null;
          } | null;
        };
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type RefreshMutationVariables = Exact<{
  refreshToken: Scalars['String'];
}>;

export type RefreshMutation = {
  auth: {
    token?: {
      token?: { access: string; refresh: string } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ResetPasswordMutationVariables = Exact<{
  userId: Scalars['String'];
  newPassword: Scalars['String'];
}>;

export type ResetPasswordMutation = {
  user: {
    resetPassword?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetRecoveryPasswordMutationVariables = Exact<{
  email: Scalars['String'];
  url: Scalars['String'];
}>;

export type SetRecoveryPasswordMutation = {
  user: {
    passwordRecovery?: {
      sendRecoveryEmail?: {
        recordID?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetNewPasswordMutationVariables = Exact<{
  token: Scalars['String'];
  newPassword: Scalars['String'];
}>;

export type SetNewPasswordMutation = {
  user: {
    passwordRecovery?: {
      setNewPassword?: {
        recordID?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type AddNewAccountInCoaMutationVariables = Exact<{
  data: AddCoaAccountInput;
}>;

export type AddNewAccountInCoaMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        add: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type DeleteCoaMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteCoaMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        delete: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type AddGroupMutationVariables = Exact<{
  data: NewCoaGroupInput;
}>;

export type AddGroupMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        newGroup: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type AddAccountInCoaMutationVariables = Exact<{
  accountSetup: CoaAccountSetup;
  parentAccountCode: Scalars['String'];
}>;

export type AddAccountInCoaMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        addAccount?: {
          success: boolean;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetCooperativeDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymCooperativeFormInput;
}>;

export type SetCooperativeDataMutation = {
  members: { cooperative?: { add?: { recordId: string } | null } | null };
};

export type SetCoopAccOperatorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  accOperatorId: Scalars['ID'];
  data: KymCoopAccountOperatorDetailsFormInput;
}>;

export type SetCoopAccOperatorDataMutation = {
  members: {
    cooperative?: {
      accountOperatorDetail?: { Upsert?: { recordId: string } | null } | null;
    } | null;
  };
};

export type DeleteCoopAccOperatorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  accOperatorId: Scalars['ID'];
}>;

export type DeleteCoopAccOperatorDataMutation = {
  members: {
    cooperative?: {
      accountOperatorDetail?: { Delete?: { recordId: string } | null } | null;
    } | null;
  };
};

export type SetCooPdirectorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  dirId: Scalars['ID'];
  data: KymCoopDirectorDetailsFormInput;
}>;

export type SetCooPdirectorDataMutation = {
  members: {
    cooperative?: { directorDetails?: { Upsert?: { recordId: string } | null } | null } | null;
  };
};

export type DeleteCooPdirectorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  dirId: Scalars['ID'];
}>;

export type DeleteCooPdirectorDataMutation = {
  members: {
    cooperative?: { directorDetails?: { Delete?: { recordId: string } | null } | null } | null;
  };
};

export type SetCooperativeUnionInstitutionDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionInstitutionInformationInput>;
}>;

export type SetCooperativeUnionInstitutionDataMutation = {
  members: {
    cooperativeUnion?: {
      add?: { institutionInformation?: { recordId: string } | null } | null;
    } | null;
  };
};

export type SetPersonnelDetailsMutationVariables = Exact<{
  id: Scalars['ID'];
  personnelId?: InputMaybe<Scalars['String']>;
  sectionType: CooperativeUnionPersonnelSection;
  data?: InputMaybe<CoopUnionPersonnelInput>;
}>;

export type SetPersonnelDetailsMutation = {
  members: {
    cooperativeUnion?: {
      add?: { personnelDetails?: { recordId?: string | null } | null } | null;
    } | null;
  };
};

export type DeletePersonnelDetailsMutationVariables = Exact<{
  personnelId: Scalars['ID'];
}>;

export type DeletePersonnelDetailsMutation = {
  members: { cooperativeUnion?: { deletePersonnel?: { recordId: string } | null } | null };
};

export type SetEconomicDetailsDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionEconomicDetailsInput>;
}>;

export type SetEconomicDetailsDataMutation = {
  members: {
    cooperativeUnion?: { add?: { economicDetails?: { recordId: string } | null } | null } | null;
  };
};

export type SetDeclarationDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionDeclarationInput>;
}>;

export type SetDeclarationDataMutation = {
  members: {
    cooperativeUnion?: { add?: { declaration?: { recordId: string } | null } | null } | null;
  };
};

export type AddProfitToFundManagementDataMutationVariables = Exact<{
  data: FundManagementInput;
}>;

export type AddProfitToFundManagementDataMutation = {
  profitToFundManagement: {
    new?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SendLoanApplicationForApprovalMutationVariables = Exact<{
  id: Scalars['ID'];
  data: LoanAccountInput;
}>;

export type SendLoanApplicationForApprovalMutation = {
  loanAccount: {
    add?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetDisburseLoanMutationVariables = Exact<{
  loanAccountId: Scalars['ID'];
  data: LoanDisbursementInput;
}>;

export type SetDisburseLoanMutation = {
  loanAccount: {
    disburse?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ApproveLoanAccountMutationVariables = Exact<{
  id: Scalars['String'];
  action: LoanApproveOrCancel;
  remarks?: InputMaybe<Scalars['String']>;
}>;

export type ApproveLoanAccountMutation = {
  loanAccount: {
    approveOrCancel?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetLoanRepaymentMutationVariables = Exact<{
  data?: InputMaybe<LoanRepaymentInput>;
}>;

export type SetLoanRepaymentMutation = {
  loanAccount: {
    repayment?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type GetNewIdMutationVariables = Exact<{
  idType?: InputMaybe<Id_Type>;
}>;

export type GetNewIdMutation = { newId: string };

export type SetMemberDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndMemberInput;
}>;

export type SetMemberDataMutation = {
  members: {
    individual?: {
      add?: {
        recordId: string;
        error?: {
          error?: Array<{
            sectionName?: string | null;
            errors?: Record<string, Array<string>> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetMemberFamilyDetailsMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndFamilyMemberInput;
}>;

export type SetMemberFamilyDetailsMutation = {
  members: { individual?: { familyMember: { upsert: { recordId?: string | null } } } | null };
};

export type DeleteMemberFamilyDetailsMutationVariables = Exact<{
  memberId: Scalars['ID'];
  id: Scalars['ID'];
}>;

export type DeleteMemberFamilyDetailsMutation = {
  members: { individual?: { familyMember: { delete: { recordId?: string | null } } } | null };
};

export type SetMemberOccupationMutationVariables = Exact<{
  id: Scalars['ID'];
  isSpouse: Scalars['Boolean'];
  data: KymIndOccupationInput;
}>;

export type SetMemberOccupationMutation = {
  members: { individual?: { occupation: { upsert: { recordId?: string | null } } } | null };
};

export type DeleteMemberOccupationMutationVariables = Exact<{
  memberId: Scalars['ID'];
  id: Scalars['ID'];
}>;

export type DeleteMemberOccupationMutation = {
  members: { individual?: { occupation: { delete: { recordId?: string | null } } } | null };
};

export type SetMemberIncomeSourceMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndIncomeSourceInput;
}>;

export type SetMemberIncomeSourceMutation = {
  members: { individual?: { incomeSource: { upsert: { recordId?: string | null } } } | null };
};

export type DeleteMemberIncomeSourceMutationVariables = Exact<{
  memberId: Scalars['ID'];
  id: Scalars['ID'];
}>;

export type DeleteMemberIncomeSourceMutation = {
  members: { individual?: { incomeSource: { delete: { recordId?: string | null } } } | null };
};

export type SetKymCooperativeDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymCooperativeFormInput;
}>;

export type SetKymCooperativeDataMutation = {
  members: { cooperative?: { add?: { recordId: string } | null } | null };
};

export type SetKymDocumentDataMutationVariables = Exact<{
  memberId: Scalars['String'];
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetKymDocumentDataMutation = { document: { KYMUpsert: { recordId?: string | null } } };

export type SetKymIndividualIdentificationDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndIdentificationInput;
}>;

export type SetKymIndividualIdentificationDataMutation = {
  members: { individual?: { identification: { upsert: { recordId?: string | null } } } | null };
};

export type SetOfficialUseMutationVariables = Exact<{
  id: Scalars['ID'];
  isStaff?: InputMaybe<Scalars['Boolean']>;
  checkSanction?: InputMaybe<Scalars['Boolean']>;
  checkNegative?: InputMaybe<Scalars['Boolean']>;
  riskCategory?: InputMaybe<OfficialUseRiskCategory>;
  docCollectedAndVerified?: InputMaybe<Scalars['Boolean']>;
  acceptableAddressDoc?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetOfficialUseMutation = {
  members: {
    officialUse?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type DeleteDraftMutationVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type DeleteDraftMutation = {
  members: {
    deleteDraft?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type PayMembershipMutationVariables = Exact<{
  data?: InputMaybe<MembershipPaymentInput>;
  memberId: Scalars['ID'];
}>;

export type PayMembershipMutation = {
  members: {
    activateMember?: {
      membershipPayment?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type InactivateMemberMutationVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type InactivateMemberMutation = {
  members: { makeInactive?: { recordId?: string | null } | null };
};

export type SetInstitutionDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymInsInput;
}>;

export type SetInstitutionDataMutation = {
  members: {
    institution?: {
      add?: {
        recordId: string;
        error?: {
          error?: Array<{
            sectionName?: string | null;
            errors?: Record<string, Array<string>> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSisterConcernsMutationVariables = Exact<{
  id: Scalars['ID'];
  sis: Scalars['ID'];
  data: KymInsSisterConcernInput;
}>;

export type SetSisterConcernsMutation = {
  members: {
    institution?: { sisterConcern?: { Upsert?: { recordId: string } | null } | null } | null;
  };
};

export type DeleteSisterConcernsMutationVariables = Exact<{
  insId: Scalars['ID'];
  sis: Scalars['ID'];
}>;

export type DeleteSisterConcernsMutation = {
  members: {
    institution?: { sisterConcern?: { Delete?: { recordId: string } | null } | null } | null;
  };
};

export type SetAddDirectorInstitutionMutationVariables = Exact<{
  id: Scalars['ID'];
  dir: Scalars['ID'];
  data: KymInsDirectorInput;
}>;

export type SetAddDirectorInstitutionMutation = {
  members: { institution?: { director?: { Upsert?: { recordId: string } | null } | null } | null };
};

export type DeleteDirectorInstitutionMutationVariables = Exact<{
  insId: Scalars['ID'];
  dir: Scalars['ID'];
}>;

export type DeleteDirectorInstitutionMutation = {
  members: { institution?: { director?: { Delete?: { recordId: string } | null } | null } | null };
};

export type SetAddAccountOperatorInstitutionMutationVariables = Exact<{
  id: Scalars['ID'];
  acc: Scalars['ID'];
  data: KymInsAccountOperatorInput;
}>;

export type SetAddAccountOperatorInstitutionMutation = {
  members: {
    institution?: { accountOperator?: { Upsert?: { recordId: string } | null } | null } | null;
  };
};

export type DeleteAccountOperatorInstitutionMutationVariables = Exact<{
  insId: Scalars['ID'];
  acc: Scalars['ID'];
}>;

export type DeleteAccountOperatorInstitutionMutation = {
  members: {
    institution?: { accountOperator?: { Delete?: { recordId: string } | null } | null } | null;
  };
};

export type SetOrganizationDataMutationVariables = Exact<{
  data: OrganizationInput;
}>;

export type SetOrganizationDataMutation = {
  settings: {
    general?: {
      organization?: {
        initialSetup?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreSignedUrlMutationVariables = Exact<{
  contentType?: InputMaybe<Scalars['String']>;
}>;

export type GetPreSignedUrlMutation = {
  presignedUrl: {
    upload: { filename?: string | null; getUrl?: string | null; putUrl?: string | null };
  };
};

export type SaveNewReportMutationVariables = Exact<{
  data: StatementReportInput;
}>;

export type SaveNewReportMutation = {
  report: {
    statementReport?: {
      member?: {
        id: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
      } | null;
      statement?:
        | {
            shareStatement?: Array<{
              date: Record<'local' | 'en' | 'np', string>;
              particular: string;
              noOfShares: number;
              returnAmountDr: number;
              purchaseAmountCr: number;
              balanceSheet: number;
            } | null> | null;
            totals?: {
              totalShares?: number | null;
              totalDr?: number | null;
              totalCr?: number | null;
              totalBalanceSheet?: number | null;
            } | null;
          }
        | {}
        | null;
    } | null;
  };
};

export type ApproveOrDeclineRequestMutationVariables = Exact<{
  data?: InputMaybe<RequestApproveOrDeclineInput>;
  requestType: RequestType;
}>;

export type ApproveOrDeclineRequestMutation = {
  requests: {
    requestApproveOrDecline?: {
      requestId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type CancelWithdrawSlipRequestMutationVariables = Exact<{
  accountId: Scalars['ID'];
  slipNumber?: InputMaybe<Scalars['Int']>;
  slipRange?: InputMaybe<SlipRangeInput>;
  reason?: InputMaybe<Scalars['String']>;
}>;

export type CancelWithdrawSlipRequestMutation = {
  withdrawSlip: {
    cancelSlip?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ApproveOrDeclineMemberRequestMutationVariables = Exact<{
  data?: InputMaybe<RequestApproveOrDeclineInput>;
}>;

export type ApproveOrDeclineMemberRequestMutation = {
  requests: {
    approveOrDecline?: {
      membershipRequest?: {
        requestId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SaveAlternativeChargesMutationVariables = Exact<{
  data?: InputMaybe<
    Array<InputMaybe<AlternativeChannelChargesInput>> | InputMaybe<AlternativeChannelChargesInput>
  >;
}>;

export type SaveAlternativeChargesMutation = {
  settings: {
    general?: {
      alternativeChannel?: {
        feesAndCharges?: {
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: Array<{
            id?: string | null;
            amount?: string | null;
            ledgerId?: string | null;
            serviceType?: AlternativeChannelServiceType | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ActivateServiceMutationVariables = Exact<{
  data?: InputMaybe<AlternativeChannelServiceActivationInput>;
}>;

export type ActivateServiceMutation = {
  alternativeChannel?: {
    serviceActivation?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  } | null;
};

export type SetBranchDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: BranchInput;
}>;

export type SetBranchDataMutation = {
  settings: {
    general?: {
      branch?: {
        add: {
          record?: { id: string } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type SetCbsCodeMutationVariables = Exact<{
  data?: InputMaybe<CodeManagementInput>;
}>;

export type SetCbsCodeMutation = {
  settings: {
    general?: {
      codes?: {
        cbs?: {
          add?: {
            recordId?: string | null;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositProductMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<DepositProductInput>;
}>;

export type SetDepositProductMutation = {
  settings: {
    general?: {
      depositProduct?: {
        add?: {
          recordId: string;
          record?: {
            id: string;
            productCode: string;
            productName: string;
            createdDate?: string | null;
            interest?: number | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositProductInactiveMutationVariables = Exact<{
  data?: InputMaybe<DepositProductInactiveData>;
}>;

export type SetDepositProductInactiveMutation = {
  settings: {
    general?: { depositProduct?: { makeInactive?: { recordId: string } | null } | null } | null;
  };
};

export type ActivateSavingsProductMutationVariables = Exact<{
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
  remarks: Scalars['String'];
}>;

export type ActivateSavingsProductMutation = {
  settings: {
    general?: {
      depositProduct?: {
        activateProduct?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositIroMutationVariables = Exact<{
  data?: InputMaybe<DepositIroInput>;
}>;

export type SetDepositIroMutation = {
  settings: {
    general?: {
      deposit?: {
        iroSetup?: {
          recordId: string;
          record?: {
            id: string;
            iroName?: string | null;
            iroAddress?: string | null;
            iroCode?: string | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | { __typename: 'ValidationError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositTdsMutationVariables = Exact<{
  data?: InputMaybe<DepositTdsInput>;
}>;

export type SetDepositTdsMutation = {
  settings: {
    general?: {
      deposit?: {
        tdsSetup?: {
          recordId: string;
          record?: {
            id: string;
            individual?: number | null;
            institution?: number | null;
            cooperative?: number | null;
            coopUnion?: number | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | { __typename: 'ValidationError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanProductMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<LoanProductInput>;
}>;

export type SetLoanProductMutation = {
  settings: {
    general?: {
      loanProducts?: {
        upsert?: {
          recordId?: string | null;
          record?: {
            id: string;
            objState: ObjState;
            productName: string;
            productType: string;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanProductInactiveMutationVariables = Exact<{
  data?: InputMaybe<LoanProductInactiveData>;
}>;

export type SetLoanProductInactiveMutation = {
  settings: {
    general?: { loanProducts?: { makeInactive?: { recordId: string } | null } | null } | null;
  };
};

export type SetProductActiveMutationVariables = Exact<{
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
  remarks: Scalars['String'];
}>;

export type SetProductActiveMutation = {
  settings: {
    general?: {
      depositProduct?: {
        activateProduct?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanGeneralSettingsMutationVariables = Exact<{
  emi?: InputMaybe<Scalars['Boolean']>;
  epi?: InputMaybe<Scalars['Boolean']>;
  flat?: InputMaybe<Scalars['Boolean']>;
  collateralList?: InputMaybe<
    Array<InputMaybe<CollateralListInputData>> | InputMaybe<CollateralListInputData>
  >;
}>;

export type SetLoanGeneralSettingsMutation = {
  settings: {
    general?: {
      loan?: {
        general?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanInsuranceSchemeMutationVariables = Exact<{
  data?: InputMaybe<
    Array<InputMaybe<LoanInsuranceSchemeInput>> | InputMaybe<LoanInsuranceSchemeInput>
  >;
}>;

export type SetLoanInsuranceSchemeMutation = {
  settings: {
    general?: {
      loan?: {
        insuranceScheme?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetProductTypeMutationVariables = Exact<{
  productType?: InputMaybe<
    Array<InputMaybe<LoanProductTypeInput>> | InputMaybe<LoanProductTypeInput>
  >;
  productSubType?: InputMaybe<
    Array<InputMaybe<LoanProductSubTypeInput>> | InputMaybe<LoanProductSubTypeInput>
  >;
}>;

export type SetProductTypeMutation = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AddGeneralMemberMutationVariables = Exact<{
  data: GeneralMemberInput;
}>;

export type AddGeneralMemberMutation = {
  settings: {
    general?: {
      KYM?: {
        general?: {
          generalMember?: {
            recordId: string;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpsertNewOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  data: FormOptionUpsertInput;
}>;

export type UpsertNewOptionMutation = {
  settings: {
    form?: {
      option: {
        upsert: {
          recordId?: string | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            enabled: boolean;
            order: number;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteOptionMutationVariables = Exact<{
  optionId: Scalars['ID'];
}>;

export type DeleteOptionMutation = {
  settings: { form?: { option: { delete: { recordId?: string | null } } } | null };
};

export type MoveOptionMutationVariables = Exact<{
  optionId: Scalars['ID'];
  to: Scalars['Int'];
}>;

export type MoveOptionMutation = {
  settings: {
    form?: {
      option: {
        move: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type ToggleFieldOtherOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  hasOtherField?: InputMaybe<Scalars['Boolean']>;
}>;

export type ToggleFieldOtherOptionMutation = {
  settings: {
    form?: {
      field: {
        update: {
          record?: { name: Record<'local' | 'en' | 'np', string>; hasOtherField: boolean } | null;
        };
      };
    } | null;
  };
};

export type UpsertSectionOptionMutationVariables = Exact<{
  sectionId: Scalars['ID'];
  data: FormFieldUpsertInput;
}>;

export type UpsertSectionOptionMutation = {
  settings: {
    form?: {
      field: {
        upsert: {
          recordId?: string | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            enabled: boolean;
            fieldType: FormFieldType;
            order: number;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteFieldMutationVariables = Exact<{
  fieldId: Scalars['ID'];
}>;

export type DeleteFieldMutation = {
  settings: {
    form?: {
      field: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type MoveFieldMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  to: Scalars['Int'];
}>;

export type MoveFieldMutation = {
  settings: {
    form?: {
      field: {
        move: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type AddConditionOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  dependsOn: Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>;
}>;

export type AddConditionOptionMutation = {
  settings: {
    form?: {
      field: {
        condition: {
          recordId?: string | null;
          record?: {
            id: string;
            dependsOn?: Array<string | null> | null;
            name: Record<'local' | 'en' | 'np', string>;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type AddFileSizeToSectionMutationVariables = Exact<{
  sectionId: Scalars['ID'];
  maxSize: Scalars['Int'];
}>;

export type AddFileSizeToSectionMutation = {
  settings: {
    form?: {
      maxSize: {
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
        record?:
          | { id: string; name: Record<'local' | 'en' | 'np', string>; maxSize?: number | null }
          | {}
          | null;
      };
    } | null;
  };
};

export type UpsertCustomSectionMutationVariables = Exact<{
  data: FormSectionUpsertInput;
}>;

export type UpsertCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        upsert: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            isCustom: boolean;
          } | null;
        };
      };
    } | null;
  };
};

export type UpsertCustomFieldMutationVariables = Exact<{
  data: FormFieldUpsertInput;
}>;

export type UpsertCustomFieldMutation = {
  settings: {
    form?: {
      field: {
        upsert: {
          record?: { id: string } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteCustomSectionMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteCustomSectionFieldMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteCustomSectionFieldMutation = {
  settings: {
    form?: {
      field: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type UpdateCustomSectionMutationVariables = Exact<{
  id: Scalars['ID'];
  data: FormSectionUpdateInput;
}>;

export type UpdateCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        update: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            isCustom: boolean;
          } | null;
        };
      };
    } | null;
  };
};

export type UpdateCustomSectionFieldMutationVariables = Exact<{
  id: Scalars['ID'];
  data: FormFieldUpdateInput;
}>;

export type UpdateCustomSectionFieldMutation = {
  settings: { form?: { field: { update: { record?: { id: string } | null } } } | null };
};

export type UpdateDeclarationMutationVariables = Exact<{
  data: DeclarationInput;
}>;

export type UpdateDeclarationMutation = {
  settings: {
    declaration: { update: { record?: { content: Record<'local' | 'en' | 'np', string> } | null } };
  };
};

export type SetSettingsShareBonusMutationVariables = Exact<{
  data?: InputMaybe<ShareBonusSettingsInput>;
}>;

export type SetSettingsShareBonusMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          bonus?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareDividendMutationVariables = Exact<{
  data?: InputMaybe<ShareDividendSettingsInput>;
}>;

export type SetSettingsShareDividendMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          dividend?: {
            dividend?: {
              distributionCondition?: DividendDistributionCondition | null;
              dividendTransferTreatment?: DividendTransferTreatment | null;
              accountForFractionalDividends?: string | null;
              accountForShareDividends?: string | null;
              organizationFundForDividends?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareIssueChargesMutationVariables = Exact<{
  data?: InputMaybe<ShareIssueChargesInput>;
}>;

export type SetSettingsShareIssueChargesMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          shareIssueCharges?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareReturnChargesMutationVariables = Exact<{
  data?: InputMaybe<ShareReturnChargesInput>;
}>;

export type SetSettingsShareReturnChargesMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          shareReturnCharges?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareGeneralMutationVariables = Exact<{
  data?: InputMaybe<ShareSettingsGeneralInput>;
}>;

export type SetSettingsShareGeneralMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          general?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareTransferMutationVariables = Exact<{
  data?: InputMaybe<ShareTransferSettingsInput>;
}>;

export type SetSettingsShareTransferMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          transfer?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsUserDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<MyraUserInput>;
}>;

export type SetSettingsUserDataMutation = {
  settings: {
    myraUser?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetPreferenceMutationVariables = Exact<{
  id: Scalars['ID'];
  data: UserPreferenceInput;
}>;

export type SetPreferenceMutation = {
  user: {
    preference?: {
      update?: {
        recordId?: string | null;
        record?: {
          language?: Language | null;
          languageCode?: string | null;
          date?: DateType | null;
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetValuatorMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<ValuatorInput>;
}>;

export type SetValuatorMutation = {
  settings: {
    general?: {
      valuator?: {
        add?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AddSharePurchaseMutationVariables = Exact<{
  data: SharePurchaseInput;
}>;

export type AddSharePurchaseMutation = {
  share: {
    purchase: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type AddShareReturnMutationVariables = Exact<{
  data: ShareReturnInput;
}>;

export type AddShareReturnMutation = {
  share: {
    return: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetDepositDataMutationVariables = Exact<{
  data: DepositInput;
}>;

export type SetDepositDataMutation = {
  transaction: {
    deposit: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetBulkDepositDataMutationVariables = Exact<{
  data?: InputMaybe<BulkDepositInput>;
}>;

export type SetBulkDepositDataMutation = {
  transaction: {
    bulkDeposit: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetWithdrawDataMutationVariables = Exact<{
  data: WithdrawInput;
}>;

export type SetWithdrawDataMutation = {
  transaction: {
    withdraw: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetAccountTransferDataMutationVariables = Exact<{
  data: TransferInput;
}>;

export type SetAccountTransferDataMutation = {
  transaction: {
    transfer: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetAccountForgiveInstallmentDataMutationVariables = Exact<{
  id: Scalars['ID'];
  installmentDates: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetAccountForgiveInstallmentDataMutation = {
  account: {
    forgiveInstallment?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetEndOfDayDataMutationVariables = Exact<{
  option?: InputMaybe<EodOption>;
}>;

export type SetEndOfDayDataMutation = {
  transaction: {
    endOfDay?: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetTellerTransferDataMutationVariables = Exact<{
  data: TellerTransferInput;
}>;

export type SetTellerTransferDataMutation = {
  transaction: {
    tellerTransfer: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetTellerTransferActionMutationVariables = Exact<{
  requestId: Scalars['ID'];
  action: TransferRequestAction;
  declineReason?: InputMaybe<Scalars['String']>;
}>;

export type SetTellerTransferActionMutation = {
  transaction: {
    tellerTransferAction: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type GetAccountMemberListQueryVariables = Exact<{
  objState?: InputMaybe<ObjState>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountMemberListQuery = {
  members: {
    list: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          type: KymMemberTypesEnum;
          contact?: string | null;
          createdAt: string;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null;
      } | null> | null;
      pageInfo?: { startCursor?: string | null; endCursor?: string | null } | null;
    };
  };
};

export type GetProductListQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetProductListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductList?: {
          allowed?: Array<{ id: string; productName: string } | null> | null;
          notAllowed?: Array<{
            error?: Array<string | null> | null;
            data?: { id: string; productName: string } | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenProductDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountOpenProductDetailsQuery = {
  settings: {
    general?: {
      depositProduct?: {
        formState?: {
          data?: {
            productName?: string | null;
            nature?: NatureOfDepositProduct | null;
            typeOfMember?: Array<KymMemberTypesEnum | null> | null;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            isMandatorySaving?: boolean | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            depositFrequency?: Frequency | null;
            penalty?: boolean | null;
            rebate?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            isTenureApplicable?: boolean | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            ladderRate?: boolean | null;
            postingFrequency?: DepositFrequency | null;
            maxPostingFreqDifference?: number | null;
            noOftransactionAllowed?: number | null;
            accountType?: DefaultAccountType | null;
            autoOpen?: boolean | null;
            allowLoan?: boolean | null;
            chequeIssue?: boolean | null;
            percentageOfDeposit?: number | null;
            alternativeChannels?: boolean | null;
            atmFacility?: boolean | null;
            isForMinors?: boolean | null;
            supportMultiple?: boolean | null;
            staffProduct?: boolean | null;
            withdrawRestricted?: boolean | null;
            specifyWithdrawRestriction?: string | null;
            wealthBuildingProduct?: boolean | null;
            individualDocuments?: Array<IndividualRequiredDocument | null> | null;
            institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
            productCode: { prefix: string; initialNo: string };
            depositAmount?: { minAmount?: any | null; maxAmount?: any | null } | null;
            penaltyData?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebateData?: {
              dayBeforeInstallmentDate?: number | null;
              noOfInstallment?: number | null;
              rebateAmount?: any | null;
              rebateRate?: number | null;
              rebateLedgerMapping?: string | null;
            } | null;
            balanceLimit?: {
              minAmount?: any | null;
              maxAmount?: any | null;
              avgAmount?: any | null;
            } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate?: number | null;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              additionalRate?: number | null;
            } | null;
            ladderRateData?: Array<{ type: string; amount: any; rate: number } | null> | null;
            serviceCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            accountCloseCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            alternativeChannelCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            atmCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            dormantSetup?: Array<{
              duration?: DormantDuration | null;
              condition?: DormantCondition | null;
            } | null> | null;
            withdrawAmountLimit?: {
              minAmount?: any | null;
              maxAmount?: any | null;
              avgAmount?: any | null;
            } | null;
            chequeCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountOpenEditDataQuery = {
  account: {
    formState?: {
      data?: {
        memberId: string;
        productId: string;
        accountName?: string | null;
        minor?: string | null;
        tenure?: FrequencyTenure | null;
        tenureNumber?: number | null;
        initialDepositAmount?: any | null;
        defaultAmountDepositAccountName?: string | null;
        interestRate?: number | null;
        interestAuthority?: InterestAuthority | null;
        installmentAmount?: string | null;
        depositFrequencyWeekly?: Week | null;
        depositFrequencyMonthly?: WeeklyFrequency | null;
        depositFrequencyDay?: number | null;
        depositFrequencyFrequencyDay?: FrequencyDay | null;
        depositFrequencyDayOfWeek?: Week | null;
        depositFrequencyYearlyMonth?: Months | null;
        depositFrequencyYearlyDay?: number | null;
        mobileBanking?: boolean | null;
        eBanking?: boolean | null;
        atmFacility?: boolean | null;
        smsBanking?: boolean | null;
        chequeFacility?: boolean | null;
        agentId?: string | null;
        interestDoc?: Array<{ identifier?: string | null; url?: string | null } | null> | null;
        serviceCharge?: Array<{ name: string; amount?: any | null } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAccountTableListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<DepositLoanAccountSearchFilter>;
}>;

export type GetAccountTableListQuery = {
  account: {
    list?: {
      totalCount: number;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
      edges?: Array<{
        node?: {
          id: string;
          objState: ObjState;
          createdAt: string;
          accountName?: string | null;
          modifiedAt: string;
          installmentAmount?: string | null;
          balance?: string | null;
          accountOpenedDate?: string | null;
          lastTransactionDate?: string | null;
          accountExpiryDate?: string | null;
          closedAt?: string | null;
          overDrawnBalance?: string | null;
          guaranteedAmount?: string | null;
          interestAccured?: string | null;
          interestTax?: string | null;
          prematurePenalty?: string | null;
          createdBy: { id: string };
          modifiedBy: { id: string };
          member?: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePicUrl?: string | null;
            profilePic?: string | null;
            contact?: string | null;
            dateJoined?: Record<'local' | 'en' | 'np', string> | null;
            address?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
          product: {
            id: string;
            productCode: string;
            productName: string;
            nature: NatureOfDepositProduct;
            minimumBalance?: string | null;
            isMandatorySaving?: boolean | null;
            withdrawRestricted?: boolean | null;
            interest?: number | null;
            accountClosingCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          };
          dues?: {
            fine?: string | null;
            totalDue?: string | null;
            dueInstallments?: number | null;
          } | null;
        } | null;
      }> | null;
    } | null;
  };
};

export type GetAccountTableListMinimalQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<DepositLoanAccountSearchFilter>;
}>;

export type GetAccountTableListMinimalQuery = {
  account: {
    list?: {
      totalCount: number;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
      edges?: Array<{
        node?: {
          id: string;
          objState: ObjState;
          createdAt: string;
          accountName?: string | null;
          balance?: string | null;
          accountOpenedDate?: string | null;
          accountExpiryDate?: string | null;
          closedAt?: string | null;
          member?: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePicUrl?: string | null;
          } | null;
          product: {
            id: string;
            productCode: string;
            productName: string;
            nature: NatureOfDepositProduct;
            interest?: number | null;
          };
        } | null;
      }> | null;
    } | null;
  };
};

export type GetAccountDocumentsListQueryVariables = Exact<{
  subscriptionId: Scalars['String'];
}>;

export type GetAccountDocumentsListQuery = {
  document: {
    listSubscriptionDocuments: {
      data?: Array<{
        fieldId?: string | null;
        docData: Array<{ identifier: string; url: string } | null>;
      } | null> | null;
    };
  };
};

export type GetAccountOpenProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetAccountOpenProductCriteriaQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductCriteria?: {
          data?: {
            gender?: Array<string | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            ethnicity?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            maritalStatus?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            occupation?: Array<string | null> | null;
            institutionType?: Array<string | null> | null;
            cooperativeUnion?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenProductPenaltyQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetAccountOpenProductPenaltyQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getPenaltyRebateInfo?: {
          data?: {
            penalty?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebate?: {
              dayBeforeInstallmentDate?: number | null;
              rebateRate?: number | null;
              rebateAmount?: any | null;
              rebateLedgerMapping?: string | null;
              noOfInstallment?: number | null;
            } | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenMinorListQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetAccountOpenMinorListQuery = {
  account: {
    listMinors?: {
      data?: Array<{
        id: string;
        fullName?: Record<'local' | 'en' | 'np', string> | null;
        familyMemberId?: string | null;
      } | null> | null;
    } | null;
  };
};

export type GetInstallmentsListDataQueryVariables = Exact<{
  id: Scalars['ID'];
  from?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
  fromN?: InputMaybe<Scalars['Int']>;
  toN?: InputMaybe<Scalars['Int']>;
}>;

export type GetInstallmentsListDataQuery = {
  account: {
    getInstallments?: {
      data?: Array<{
        number: number;
        dueDate: Record<'local' | 'en' | 'np', string>;
        status: InstallmentState;
        monthName: Record<'local' | 'en' | 'np', string>;
        fine?: string | null;
        rebate?: string | null;
      } | null> | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetBulkInstallmentsDataQueryVariables = Exact<{
  ids: Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>;
}>;

export type GetBulkInstallmentsDataQuery = {
  account: {
    getBulkInstallments?: Array<{
      accountId?: string | null;
      value?: {
        data?: Array<{
          dueDate: Record<'local' | 'en' | 'np', string>;
          status: InstallmentState;
          monthName: Record<'local' | 'en' | 'np', string>;
          fine?: string | null;
          rebate?: string | null;
        } | null> | null;
      } | null;
    } | null> | null;
  };
};

export type GetDefaultAccountListQueryVariables = Exact<{
  productId: Scalars['ID'];
  memberId: Scalars['ID'];
}>;

export type GetDefaultAccountListQuery = {
  account: {
    listDefaultAccounts?: {
      data?: Array<{ id: string; accountName?: string | null } | null> | null;
    } | null;
  };
};

export type GetAccountDetailsDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountDetailsDataQuery = {
  account: {
    accountDetails?: {
      data?: {
        accountId?: string | null;
        installmentAmount?: string | null;
        accountName?: string | null;
        productName?: string | null;
        accountOpenDate?: Record<'local' | 'en' | 'np', string> | null;
        accountType?: NatureOfDepositProduct | null;
        defaultAccountType?: DefaultAccountType | null;
        accountBalance?: string | null;
        totalDepositBalance?: string | null;
        interestAccrued?: string | null;
        interestEarned?: string | null;
        guaranteedAmount?: string | null;
        accountBranch?: string | null;
        alternativeChannel?: boolean | null;
        allowLoan?: boolean | null;
        withdrawRestricted?: boolean | null;
        supportMultiple?: boolean | null;
        staffProduct?: boolean | null;
        atmFacility?: boolean | null;
        chequeIssue?: boolean | null;
        allowPartialInstallment?: boolean | null;
        monthlyInterestCompulsory?: boolean | null;
        isForMinors?: boolean | null;
        autoOpen?: boolean | null;
        isMandatory?: boolean | null;
        interestRate?: number | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          profilePicUrl?: string | null;
          contact?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountTransactionListsQueryVariables = Exact<{
  filter: AccountsTransactionFilter;
  pagination: Pagination;
}>;

export type GetAccountTransactionListsQuery = {
  account: {
    listTransactions?: {
      edges?: Array<{
        node: {
          id: string;
          accountId?: string | null;
          name: string;
          date: Record<'local' | 'en' | 'np', string>;
          month: Record<'local' | 'en' | 'np', string>;
          transactionDirection: EbankingTransactionDirection;
          transactionType?: string | null;
          amount: string;
          currentBalance: string;
        };
      } | null> | null;
      pageInfo?: {
        endCursor?: string | null;
        startCursor?: string | null;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
      } | null;
      summary?: {
        totalDeposit?: string | null;
        totalWithdraw?: string | null;
        averageBalance?: string | null;
      } | null;
    } | null;
  };
};

export type GetBankAccountListQueryVariables = Exact<{
  filter?: InputMaybe<BankAccountFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetBankAccountListQuery = {
  accounting: {
    bankAccounts: {
      list?: {
        edges?: Array<{
          node?: {
            id?: string | null;
            bankId?: string | null;
            bankName?: string | null;
            displayName?: string | null;
            accountNo?: string | null;
            balance?: string | null;
          } | null;
        } | null> | null;
      } | null;
    };
  };
};

export type ExternalLoanListQueryVariables = Exact<{
  filter?: InputMaybe<ExternalLoanApplicationFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type ExternalLoanListQuery = {
  accounting: {
    externalLoan: {
      loan?: {
        list?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            cursor?: string | null;
            node?: {
              id?: string | null;
              loanName?: string | null;
              organizationId?: string | null;
              organizationName?: string | null;
              createdBy?: string | null;
              appliedDate?: Record<'local' | 'en' | 'np', string> | null;
              loanType?: ExternalLoanType | null;
              amount?: string | null;
            } | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type ExternalLoanAccountListQueryVariables = Exact<{
  filter?: InputMaybe<ExternalLoanAccountFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type ExternalLoanAccountListQuery = {
  accounting: {
    externalLoan: {
      account?: {
        list?: {
          totalCount: number;
          edges?: Array<{
            cursor?: string | null;
            node?: {
              id?: string | null;
              name?: string | null;
              createdBy?: string | null;
              createdDate?: Record<'local' | 'en' | 'np', string> | null;
              address?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
            } | null;
          } | null> | null;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
        } | null;
      } | null;
    };
  };
};

export type ExternalLoanPaymentListQueryVariables = Exact<{
  filter?: InputMaybe<ExternalLoanPaymentFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type ExternalLoanPaymentListQuery = {
  accounting: {
    externalLoan: {
      payment?: {
        list?: {
          totalCount: number;
          edges?: Array<{
            cursor?: string | null;
            node?: {
              id?: string | null;
              loanId?: string | null;
              loanName?: string | null;
              createdBy?: string | null;
              createdDate?: Record<'local' | 'en' | 'np', string> | null;
              amount?: string | null;
              paymentMode?: ExternalLoanPaymentMethod | null;
            } | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type GetInvestmentAccountsListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<InvestmentAccountFilter>;
}>;

export type GetInvestmentAccountsListDataQuery = {
  accounting: {
    investment: {
      listAccount: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            type?: InvestmentType | null;
            address?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
            } | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetInvestmentAccountFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInvestmentAccountFormStateDataQuery = {
  accounting: {
    investment: {
      accountFormState: {
        data?: {
          name: string;
          type: InvestmentType;
          address: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          };
        } | null;
      };
    };
  };
};

export type GetInvestmentEntriesListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<InvestmentEntryFilter>;
}>;

export type GetInvestmentEntriesListDataQuery = {
  accounting: {
    investment: {
      listEntry: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            type?: InvestmentType | null;
            amount?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetInvestmentEntryFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInvestmentEntryFormStateDataQuery = {
  accounting: {
    investment: {
      entryFormState: {
        data?: {
          accountID: string;
          investmentType?: InvestmentType | null;
          share?: {
            count: number;
            rate: string;
            purchaseAmount: string;
            certificateNo: string;
            date: Record<'local' | 'en' | 'np', string>;
            notes?: string | null;
          } | null;
          saving?: {
            type: SavingInvestmentType;
            installmentAmount: string;
            frequency: InstallmentFrequency;
            rate: number;
            openDate: Record<'local' | 'en' | 'np', string>;
            initialDepositAmount?: string | null;
            notes?: string | null;
          } | null;
          fd?: {
            type: FdInvestmentType;
            fdAmount: string;
            rate: number;
            certificateNo: string;
            startDate: Record<'local' | 'en' | 'np', string>;
            maturityDate: Record<'local' | 'en' | 'np', string>;
            interestNomineeBank: string;
            bankACNo: string;
            interestLedgerMapping: string;
            notes?: string | null;
          } | null;
        } | null;
      };
    };
  };
};

export type GetInvestmentTransactionsListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<InvestmentTransactionFilter>;
}>;

export type GetInvestmentTransactionsListDataQuery = {
  accounting: {
    investment: {
      listTransaction: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            type?: InvestmentType | null;
            amount?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetJournalVoucherListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<JournalVoucherFilter>;
}>;

export type GetJournalVoucherListQuery = {
  accounting: {
    journalVoucher: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            reference?: string | null;
            amount?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      } | null;
    };
  };
};

export type GetJournalVoucherDetailQueryVariables = Exact<{
  entryId: Scalars['ID'];
}>;

export type GetJournalVoucherDetailQuery = {
  accounting: {
    journalVoucher: {
      viewJournalVoucherDetail?: {
        data?: {
          id?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          status?: string | null;
          reference?: string | null;
          note?: string | null;
          totalDebit?: string | null;
          totalCredit?: string | null;
          glTransaction?: Array<{
            account: string;
            debit?: string | null;
            credit?: string | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type GetSalesCustomerListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<SalesCustomerFilter>;
}>;

export type GetSalesCustomerListDataQuery = {
  accounting: {
    sales: {
      listCustomer: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            phoneNumber?: string | null;
            email?: string | null;
            address?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
            } | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetSalesCustomerFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSalesCustomerFormStateDataQuery = {
  accounting: {
    sales: {
      customerFormState: {
        data?: {
          name: string;
          code: string;
          phoneNumber: string;
          pan: string;
          email?: string | null;
          creditTerms?: string | null;
          creditLimit?: string | null;
          openingBalance?: string | null;
          address: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          };
        } | null;
      };
    };
  };
};

export type GetSalesSaleEntryListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<SalesSaleEntryFilter>;
}>;

export type GetSalesSaleEntryListDataQuery = {
  accounting: {
    sales: {
      listSaleEntry: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            totalAmount?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetSalesSaleEntryFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSalesSaleEntryFormStateDataQuery = {
  accounting: {
    sales: {
      saleEntryFormState: {
        data?: {
          customerID: string;
          reference: string;
          invoiceDate: Record<'local' | 'en' | 'np', string>;
          dueDate: Record<'local' | 'en' | 'np', string>;
          notes?: string | null;
          subTotal?: string | null;
          discount?: string | null;
          taxableTotal?: string | null;
          vat?: string | null;
          products: Array<{
            name: string;
            quantity: string;
            rate: string;
            tax: number;
            amount: string;
            productDescription?: string | null;
            warehousePartition?: string | null;
            salesLedger?: string | null;
          }>;
        } | null;
      };
    };
  };
};

export type GetSalesCreditNoteListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<SalesCreditNoteFilter>;
}>;

export type GetSalesCreditNoteListDataQuery = {
  accounting: {
    sales: {
      listCreditNote: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            totalAmount?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetSalesCreditNoteFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSalesCreditNoteFormStateDataQuery = {
  accounting: {
    sales: {
      creditNoteFormState: {
        data?: {
          customerID: string;
          invoiceReference: string;
          date: Record<'local' | 'en' | 'np', string>;
          notes?: string | null;
          subTotal?: string | null;
          nonTaxableTotal?: string | null;
          taxableTotal?: string | null;
          vat?: string | null;
          products: Array<{
            name: string;
            quantity: string;
            rate: string;
            tax: number;
            amount: string;
            productDescription?: string | null;
            warehousePartition?: string | null;
            salesLedger?: string | null;
          }>;
        } | null;
      };
    };
  };
};

export type GetSalesCustomerPaymentListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<SalesCustomerPaymentFilter>;
}>;

export type GetSalesCustomerPaymentListDataQuery = {
  accounting: {
    sales: {
      listCustomerPayment: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            receivedFrom?: string | null;
            totalAmount?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            paymentMode?: CustomerPayment | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetSalesCustomerPaymentFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSalesCustomerPaymentFormStateDataQuery = {
  accounting: {
    sales: {
      customerPaymentFormState: {
        data?: {
          receivedFrom: string;
          receivedAccount: string;
          receivedAmount: string;
          receivedDate: Record<'local' | 'en' | 'np', string>;
          paymentMethod: CustomerPayment;
          paymentReferenceNo?: string | null;
          tds: boolean;
          tdsAccount?: string | null;
          tdsType?: string | null;
          tdsAmount?: string | null;
          notes?: string | null;
          paymentAllocation: Array<{
            type: string;
            date: Record<'local' | 'en' | 'np', string>;
            amount: string;
            leftToAllocate: string;
            thisAllocation: string;
          }>;
        } | null;
      };
    };
  };
};

export type AllAdministrationQueryVariables = Exact<{ [key: string]: never }>;

export type AllAdministrationQuery = {
  administration: {
    all: Array<{
      id: number;
      name: string;
      districts: Array<{
        id: number;
        name: string;
        municipalities: Array<{ id: number; name: string; wards: Array<number> }>;
      }>;
    }>;
  };
};

export type GetAllProvinceQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllProvinceQuery = {
  administration: { provinces: Array<{ id: number; name: string }> };
};

export type GetAllDistrictsQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllDistrictsQuery = {
  administration: { districts: Array<{ id: number; name: string }> };
};

export type GetAllLocalGovernmentQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllLocalGovernmentQuery = {
  administration: { municipalities: Array<{ id: number; name: string }> };
};

export type GetAgentListDataQueryVariables = Exact<{
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAgentListDataQuery = {
  transaction: {
    listAgent: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          agentName?: string | null;
          phoneNo?: string | null;
          assignedMember?: number | null;
          profilePicUrl?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAgentDetailDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAgentDetailDataQuery = {
  transaction: {
    agentDetail?: {
      data?: {
        id?: string | null;
        name?: string | null;
        branch?: string | null;
        totalMembers?: number | null;
        profilePicUrl?: string | null;
      } | null;
    } | null;
  };
};

export type GetAgentAssignedMemberListDataQueryVariables = Exact<{
  filter?: InputMaybe<AssignedMemberListFiler>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAgentAssignedMemberListDataQuery = {
  transaction: {
    assignedMemberList: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          assignedDate?: string | null;
          member?: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            code: string;
          } | null;
          account?: { id: string; dues?: { totalDue?: string | null } | null } | null;
          product?: { productName: string } | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAgentTodayListDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAgentTodayListDataQuery = {
  transaction: {
    listAgentTask?: {
      record?: Array<{
        amount?: any | null;
        paid?: boolean | null;
        member?: { id: string } | null;
        account?: { id: string } | null;
      } | null> | null;
    } | null;
  };
};

export type GetMeQueryVariables = Exact<{ [key: string]: never }>;

export type GetMeQuery = {
  auth: {
    me: {
      data?: {
        user?: {
          id: string;
          username: string;
          email?: string | null;
          firstName: Record<'local' | 'en' | 'np', string>;
          lastName: Record<'local' | 'en' | 'np', string>;
          role?: Roles | null;
          profilePic?: string | null;
          branch?: { id: string; name?: string | null } | null;
          organization?: {
            basicDetails?: { name?: string | null; logo?: string | null } | null;
            contactDetails?: {
              website?: string | null;
              phoneNumber?: string | null;
              email?: string | null;
            } | null;
            address?: {
              district?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              state?: Record<'local' | 'en' | 'np', string> | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
            } | null;
            registrationDetails?: { regdNo?: string | null; panOrVat?: string | null } | null;
          } | null;
        } | null;
        preference?: {
          language?: Language | null;
          languageCode?: string | null;
          date?: DateType | null;
        } | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | null;
    };
  };
};

export type GetBankListQueryVariables = Exact<{ [key: string]: never }>;

export type GetBankListQuery = {
  bank: { bank?: { list?: Array<{ id: string; name?: string | null } | null> | null } | null };
};

export type GetUserBranchListQueryVariables = Exact<{ [key: string]: never }>;

export type GetUserBranchListQuery = {
  bank: { branch?: { list?: Array<{ id: string; name?: string | null } | null> | null } | null };
};

type MutationError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type MutationError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type MutationError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type MutationError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

type MutationError_ValidationError_Fragment = {
  __typename: 'ValidationError';
  code: number;
  validationErrorMsg: Record<string, Array<string>>;
};

export type MutationErrorFragment =
  | MutationError_AuthorizationError_Fragment
  | MutationError_BadRequestError_Fragment
  | MutationError_NotFoundError_Fragment
  | MutationError_ServerError_Fragment
  | MutationError_ValidationError_Fragment;

type QueryError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type QueryError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type QueryError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type QueryError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

export type QueryErrorFragment =
  | QueryError_AuthorizationError_Fragment
  | QueryError_BadRequestError_Fragment
  | QueryError_NotFoundError_Fragment
  | QueryError_ServerError_Fragment;

export type KymFieldDataFragment = {
  id?: string | null;
  options?: Array<{
    id?: string | null;
    value?: Record<'local' | 'en' | 'np', string> | null;
  } | null> | null;
};

export type PaginationFragment = {
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
};

export type AddressFragment = {
  houseNo?: string | null;
  district?: Record<'local' | 'en' | 'np', string> | null;
  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
  locality?: Record<'local' | 'en' | 'np', string> | null;
  state?: Record<'local' | 'en' | 'np', string> | null;
  wardNo?: string | null;
  coordinates?: { latitude?: number | null; longitude?: number | null } | null;
};

export type GetConfigQueryVariables = Exact<{ [key: string]: never }>;

export type GetConfigQuery = {
  config: { countries?: Array<{ name?: string | null; code?: string | null } | null> | null };
};

export type GetCoOperativeKymEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCoOperativeKymEditDataQuery = {
  members: {
    cooperative?: {
      formState?: {
        data?: {
          formData?: {
            nameOfOrganization?: string | null;
            regdNumber?: number | null;
            regdDate?: Record<'local' | 'en' | 'np', string> | null;
            regdOffice?: string | null;
            email?: string | null;
            website?: string | null;
            contactNumber?: string | null;
            noOfMaleMembers?: number | null;
            noOfFemaleMembers?: number | null;
            noOfOtherMembers?: number | null;
            lastAuditDate?: Record<'local' | 'en' | 'np', string> | null;
            lastAgmDate?: Record<'local' | 'en' | 'np', string> | null;
            representativeFullName?: string | null;
            representativeDesignatiton?: string | null;
            representativeEmail?: string | null;
            representativeContactNumber?: string | null;
            representativePanNo?: string | null;
            isPermanentAndTemporaryAddressSame?: boolean | null;
            cooperativeTypeId?: string | null;
            mainServiceProduct?: string | null;
            noOfMaleEmployee?: number | null;
            noOfFemaleEmployee?: number | null;
            totalEmployee?: number | null;
            shareCapital?: number | null;
            reserveAndSurplus?: number | null;
            savingDeposit?: number | null;
            loanAccount?: number | null;
            capitalGrant?: number | null;
            currentLiabilities?: number | null;
            nonCurrentLiabilities?: number | null;
            cashAndCashEquivalent?: number | null;
            bank?: number | null;
            investments?: number | null;
            loan?: number | null;
            nonCurrentAssets?: number | null;
            otherNonCurrentAssets?: number | null;
            totalAssets?: number | null;
            accountHoldersName?: string | null;
            hasTCAccepted?: boolean | null;
            registeredAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            operatingAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            permanentRepresentativeAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryRepresentativeAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
          sectionStatus?: {
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
        } | null;
      } | null;
      overallFormStatus?: {
        coopDetails?: {
          id?: string | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoOperativeDirectorEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCoOperativeDirectorEditDataQuery = {
  members: {
    cooperative?: {
      listDirectors?: {
        data?: Array<{
          id?: string | null;
          fullName?: string | null;
          designation?: string | null;
          isPermanentAndTemporaryAddressSame?: boolean | null;
          dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
          highestQualification?: string | null;
          contactNumber?: string | null;
          email?: string | null;
          citizenshipNo?: string | null;
          panNo?: string | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null> | null;
        sectionStatus?: Array<{
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCoOperativeAccountOperatorEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCoOperativeAccountOperatorEditDataQuery = {
  members: {
    cooperative?: {
      listAccountOperators?: {
        data?: Array<{
          id?: string | null;
          fullName?: string | null;
          designation?: string | null;
          isPermanentAndTemporaryAddressSame?: boolean | null;
          dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
          highestQualification?: string | null;
          contactNumber?: string | null;
          email?: string | null;
          citizenshipNo?: string | null;
          panNo?: string | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          coopRelatedTraining?: Array<{
            subjectOfTraining?: string | null;
            dateOfTraining?: Record<'local' | 'en' | 'np', string> | null;
            trainingOrganization?: string | null;
          } | null> | null;
        } | null> | null;
        sectionStatus?: Array<{
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetKymCooperativeOverallFormStatusQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetKymCooperativeOverallFormStatusQuery = {
  members: {
    cooperative?: {
      overallFormStatus?: {
        coopDetails?: {
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null;
        directorsDetails?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
        accountOperatorDetails?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCooperativeUnionKymEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCooperativeUnionKymEditDataQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          institutionInformation?: {
            data?: {
              nameOfInstitutionEn?: string | null;
              nameOfInstitutionNp?: string | null;
              institutionType?: string | null;
              natureOfBusinessEn?: string | null;
              natureOfBusinessNp?: string | null;
              regdDate?: Record<'local' | 'en' | 'np', string> | null;
              vatOrPan?: string | null;
              noOfBranches?: number | null;
              regdNo?: string | null;
              issuingOffice?: string | null;
              phone?: string | null;
              fax?: string | null;
              contactEmail?: string | null;
              website?: string | null;
              postBoxNo?: string | null;
              noOfEmployee?: number | null;
              lastAgmDate?: Record<'local' | 'en' | 'np', string> | null;
              nameOfBank?: string | null;
              accountNumber?: string | null;
              accountName?: string | null;
              applicantName?: string | null;
              applicantNameNp?: string | null;
              applicantDesignationEn?: string | null;
              applicantDesignationNp?: string | null;
              applicantEmail?: string | null;
              applicantContactNo?: string | null;
              applicantPanNo?: string | null;
              applicantDateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
              applicantHighestQualification?: string | null;
              applicantIsPermanentAndTemporaryAddrSame?: boolean | null;
              noOfMaleMemberCurrent?: number | null;
              noOfMaleMemberTarget?: number | null;
              noOfFemaleMemberCurrent?: number | null;
              noOfFemaleMemberTarget?: number | null;
              noOfInstitutionalMemberCurrent?: number | null;
              noOfInstitutionalMemberTarget?: number | null;
              regdAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              operatingOfficeAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              branchOfficeAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              applicantPermanentAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              applicantTemporaryAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
            } | null;
            sectionStatus?: {
              id?: string | null;
              errors?: Record<string, Array<string>> | null;
              sectionStatus?: {
                errors?: Array<string> | null;
                incomplete?: Array<string> | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetEconimicDetailsEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetEconimicDetailsEditDataQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          economicDetails?: {
            data?: {
              cashAndCashEquivalentCurrent?: number | null;
              cashAndCashEquivalentTarget?: number | null;
              bankCurrent?: number | null;
              bankTarget?: number | null;
              investmentsCurrent?: number | null;
              investmentsTarget?: number | null;
              loanCurrent?: number | null;
              loanTarget?: number | null;
              nonCurrentAssetsCurrent?: number | null;
              nonCurrentAssetsTarget?: number | null;
              otherNonCurrentAssetsCurrent?: number | null;
              otherNonCurrentAssetsTarget?: number | null;
              shareCapitalCurrent?: number | null;
              shareCapitalTarget?: number | null;
              reserveAndSurplusCurrent?: number | null;
              reserveAndSurplusTarget?: number | null;
              savingDepositCurrent?: number | null;
              savingDepositTarget?: number | null;
              loanAccountCurrent?: number | null;
              loanAccountTarget?: number | null;
              capitalGrantCurrent?: number | null;
              capitalGrantTarget?: number | null;
              currentLiabilitiesCurrent?: number | null;
              currentLiabilitiesTarget?: number | null;
              nonCurrentLiabilitiesCurrent?: number | null;
              nonCurrentLiabilitiesTarget?: number | null;
              incomeFromFinancialInvestment?: number | null;
              incomeFromNonFinancialInvestment?: number | null;
              incomeFromInvestment?: number | null;
              incomeFromServiceOperation?: number | null;
              incomeFromSales?: number | null;
              otherIncome?: number | null;
              miscellaneousIncome?: number | null;
              purchase?: number | null;
              directExpense?: number | null;
              administrativeExpense?: number | null;
              financialCost?: number | null;
              riskManagementCost?: number | null;
              deferredTaxExpense?: number | null;
            } | null;
            sectionStatus?: { id?: string | null } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetBoardOfDirectorsDetailsListQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetBoardOfDirectorsDetailsListQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          boardOfDirectorsDetails?: {
            data?: {
              personnelDetails?: Array<{
                id?: string | null;
                cooperativeUnionId?: string | null;
                fullName?: string | null;
                fullNameNp?: string | null;
                designationEn?: string | null;
                designationNp?: string | null;
                isPermanentAndTemporaryAddressSame?: boolean | null;
                dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
                highestQualification?: string | null;
                mobileNumber?: string | null;
                email?: string | null;
                citizenshipNo?: string | null;
                panNo?: string | null;
                permanentAddress?: {
                  provinceId?: number | null;
                  districtId?: number | null;
                  localGovernmentId?: number | null;
                  wardNo?: number | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                  coordinates?: { longitude?: number | null; latitude?: number | null } | null;
                } | null;
                temporaryAddress?: {
                  provinceId?: number | null;
                  districtId?: number | null;
                  localGovernmentId?: number | null;
                  wardNo?: number | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                  coordinates?: { longitude?: number | null; latitude?: number | null } | null;
                } | null;
                trainingAttended?: Array<{
                  subjectOfTraining?: string | null;
                  dateOfTraining?: Record<'local' | 'en' | 'np', string> | null;
                  trainingOrganization?: string | null;
                } | null> | null;
              } | null> | null;
            } | null;
            sectionStatus?: Array<{
              id?: string | null;
              errors?: Record<string, Array<string>> | null;
              sectionStatus?: {
                errors?: Array<string> | null;
                incomplete?: Array<string> | null;
              } | null;
            } | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOperatorDetailsListQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetAccountOperatorDetailsListQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          accountOperatorsDetails?: {
            data?: {
              personnelDetails?: Array<{
                id?: string | null;
                cooperativeUnionId?: string | null;
                fullName?: string | null;
                fullNameNp?: string | null;
                designationEn?: string | null;
                designationNp?: string | null;
                isPermanentAndTemporaryAddressSame?: boolean | null;
                dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
                highestQualification?: string | null;
                mobileNumber?: string | null;
                email?: string | null;
                citizenshipNo?: string | null;
                panNo?: string | null;
                permanentAddress?: {
                  provinceId?: number | null;
                  districtId?: number | null;
                  localGovernmentId?: number | null;
                  wardNo?: number | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                  coordinates?: { longitude?: number | null; latitude?: number | null } | null;
                } | null;
                temporaryAddress?: {
                  provinceId?: number | null;
                  districtId?: number | null;
                  localGovernmentId?: number | null;
                  wardNo?: number | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                  coordinates?: { longitude?: number | null; latitude?: number | null } | null;
                } | null;
                trainingAttended?: Array<{
                  subjectOfTraining?: string | null;
                  dateOfTraining?: Record<'local' | 'en' | 'np', string> | null;
                  trainingOrganization?: string | null;
                } | null> | null;
              } | null> | null;
            } | null;
            sectionStatus?: Array<{
              id?: string | null;
              errors?: Record<string, Array<string>> | null;
              sectionStatus?: {
                errors?: Array<string> | null;
                incomplete?: Array<string> | null;
              } | null;
            } | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCentralRepresentativeDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCentralRepresentativeDetailsQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          centralRepresentativeDetails?: {
            data?: {
              id?: string | null;
              cooperativeUnionId?: string | null;
              fullName?: string | null;
              fullNameNp?: string | null;
              designationEn?: string | null;
              designationNp?: string | null;
              isPermanentAndTemporaryAddressSame?: boolean | null;
              dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
              highestQualification?: string | null;
              mobileNumber?: string | null;
              email?: string | null;
              citizenshipNo?: string | null;
              panNo?: string | null;
              notAmongDirectors?: boolean | null;
              centralRepID?: string | null;
              permanentAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              temporaryAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              trainingAttended?: Array<{
                subjectOfTraining?: string | null;
                dateOfTraining?: Record<'local' | 'en' | 'np', string> | null;
                trainingOrganization?: string | null;
              } | null> | null;
            } | null;
            sectionStatus?: {
              id?: string | null;
              errors?: Record<string, Array<string>> | null;
              sectionStatus?: {
                errors?: Array<string> | null;
                incomplete?: Array<string> | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoopUnionSectionStatusQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetCoopUnionSectionStatusQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        sectionStatus?: {
          institutionInformation?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
          bodDetails?: Array<{
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null> | null;
          accountOperatorDetails?: Array<{
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null> | null;
          centralRepresentativeDetails?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
          economicDetails?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
          declaration?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDashboardDayInfoQueryVariables = Exact<{ [key: string]: never }>;

export type GetDashboardDayInfoQuery = {
  dashboard: {
    myDayInfo?: {
      data?: {
        deposit?: {
          todayValue?: string | null;
          percent?: string | null;
          noOfTransaction?: number | null;
        } | null;
        withdraw?: {
          todayValue?: string | null;
          percent?: string | null;
          noOfTransaction?: number | null;
        } | null;
        cashInHand?: {
          todayValue?: string | null;
          percent?: string | null;
          fromVault?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDashboardInfoQueryVariables = Exact<{ [key: string]: never }>;

export type GetDashboardInfoQuery = {
  dashboard: {
    dashboardInfo?: {
      data?: {
        pendingRequest?: {
          memberRequestCount?: number | null;
          withdrawSlipCount?: number | null;
          loanApplicationRequest?: number | null;
          loanDisbursementRequest?: number | null;
        } | null;
        branchInfo?: {
          membersToApprove?: number | null;
          totalMembers?: number | null;
          percentofMemberRequest?: string | null;
          totalAccounts?: number | null;
          percentOfAccounts?: string | null;
        } | null;
        coopInfo?: {
          totalMembers?: number | null;
          totalShareIssued?: number | null;
          totalBranch?: number | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreviousYearFundManagementQueryVariables = Exact<{ [key: string]: never }>;

export type GetPreviousYearFundManagementQuery = {
  profitToFundManagement: {
    previousYear?: Array<{
      accountCode?: string | null;
      amount?: string | null;
      percent?: number | null;
    } | null> | null;
  };
};

export type GetKymFormStatusInstitutionQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetKymFormStatusInstitutionQuery = {
  members: {
    institution?: {
      formState?: {
        data?: {
          sectionStatus?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetKymOverallFormStatusQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetKymOverallFormStatusQuery = {
  members: {
    institution?: {
      overallFormStatus?: {
        accountOperatorDetails?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
        directorDetails?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
        institutionDetails?: {
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null;
        sisterConcernDetails?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetInstitutionKymEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetInstitutionKymEditDataQuery = {
  members: {
    institution?: {
      formState?: {
        data?: {
          lastUpdated?:
            | { account: KymInsAccountSection }
            | { declaration: KymInsDeclarationSection }
            | { directorDetails: KymInsDirectorDetailsSection }
            | { information: KymInsInformationSection }
            | { transaction: KymInsTransactionSection }
            | null;
          sectionStatus?: {
            errors?: Record<string, Array<string>> | null;
            id?: string | null;
            sectionStatus?: {
              incomplete?: Array<string> | null;
              errors?: Array<string> | null;
            } | null;
          } | null;
          formData?: {
            institutionName?: string | null;
            institutionTypeId?: string | null;
            natureOfBusiness?: string | null;
            registrationDate?: Record<'local' | 'en' | 'np', string> | null;
            vatOrPanNo?: string | null;
            noOfBranches?: number | null;
            registeredNumber?: string | null;
            issuingOffice?: string | null;
            phone?: string | null;
            fax?: string | null;
            email?: string | null;
            website?: string | null;
            postBoxNo?: string | null;
            numberOfEmployee?: number | null;
            dateOfLastAGM?: Record<'local' | 'en' | 'np', string> | null;
            bank?: string | null;
            accountNumber?: string | null;
            accountName?: string | null;
            natureOfTransaction?: string | null;
            annualTurnover?: number | null;
            initialDepositAmount?: number | null;
            expectedMonthlyTurnover?: string | null;
            expectedMonthlyTransaction?: string | null;
            accountType?: AccountOperationType | null;
            isCompanyStampCompulsory?: boolean | null;
            specialInstruction?: string | null;
            companyStamp?: string | null;
            accountHolderName?: string | null;
            accountHolderPhone?: string | null;
            accountHolderEmail?: string | null;
            operatingOfficeAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            branchOfficeAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            registeredAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            accountHolderAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetInstitutionSisterDetailsEditListQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetInstitutionSisterDetailsEditListQuery = {
  members: {
    institution?: {
      listSisterConcerns?: {
        data?: Array<{
          id?: string | null;
          name?: string | null;
          natureOfBusiness?: string | null;
          address?: string | null;
          phone?: string | null;
        } | null> | null;
        sectionStatus?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetInsBoardDirectorEditListQueryVariables = Exact<{
  id: Scalars['ID'];
  hasRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetInsBoardDirectorEditListQuery = {
  members: {
    institution?: {
      listDirectors?: {
        sectionStatus?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
        data?: Array<{
          id?: string | null;
          name?: string | null;
          designation?: string | null;
          isTemporaryAndPermanentAddressSame?: boolean | null;
          dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
          highestQualification?: string | null;
          mobileNo?: string | null;
          email?: string | null;
          citizenshipNo?: string | null;
          panNo?: string | null;
          isHeadOfOrganization?: boolean | null;
          isAffiliatedWithOtherFirms?: boolean | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          firmDetails?: {
            directorName?: string | null;
            institutionName?: string | null;
            address?: string | null;
            designation?: string | null;
            yearlyIncome?: number | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetInsAccountOperatorEditListQueryVariables = Exact<{
  id: Scalars['ID'];
  hasRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetInsAccountOperatorEditListQuery = {
  members: {
    institution?: {
      listAccountOperators?: {
        data?: Array<{
          id?: string | null;
          name?: string | null;
          contact?: string | null;
          email?: string | null;
          isTemporaryAndPermanentAddressSame?: boolean | null;
          designation?: string | null;
          panNo?: string | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null> | null;
        sectionStatus?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetInventoryItemsQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryItemsQuery = {
  inventory: {
    items?: {
      list?: {
        edges: Array<{
          node: { id: string; name: string; type: string; unitPrice: number; itemQuantity: number };
        } | null>;
      } | null;
    } | null;
  };
};

export type GetInventoryItemGroupQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryItemGroupQuery = {
  inventory: {
    itemsGroup?: {
      list?: {
        edges: Array<{
          node: { name: string; id: string; description: string; parentCategory: string };
        } | null>;
      } | null;
    } | null;
  };
};

export type GetInventoryVendorQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryVendorQuery = {
  inventory: {
    vendors?: {
      list?: {
        edges: Array<{
          node: { name: string; location: string; email: string; phoneNumber: string };
        } | null>;
      } | null;
    } | null;
  };
};

export type GetInventoryUnitOfMeasureQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryUnitOfMeasureQuery = {
  inventory: {
    unitOfMeasure?: {
      list?: {
        edges: Array<{ node: { name: string; shortName: string; acceptFraction: boolean } } | null>;
      } | null;
    } | null;
  };
};

export type GetIndividualKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetIndividualKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetInstitutionKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetInstitutionKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetCooperativeKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetCooperativeKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetCoopUnionKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetCoopUnionKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type LoanProductFragment = {
  id: string;
  objState: ObjState;
  createdAt: string;
  modifiedAt: string;
  createdDate: string;
  productName: string;
  productType: string;
  productSubType: string;
  productNature: NatureOfLoanProduct;
  description?: string | null;
  productCodeString?: string | null;
  typeOfMember: Array<KymMemberTypesEnum | null>;
  criteria?: Array<CriteriaSection | null> | null;
  minAge?: number | null;
  maxAge?: number | null;
  genderId?: Array<string | null> | null;
  maritalStatusId?: Array<string | null> | null;
  educationQualification?: Array<string | null> | null;
  ethnicity?: Array<string | null> | null;
  occupation?: Array<string | null> | null;
  foreignEmployment?: boolean | null;
  natureOfBusinessInstitution?: Array<string | null> | null;
  natureOFBusinessCoop?: Array<string | null> | null;
  cooperativeType?: Array<string | null> | null;
  tenureUnit?: FrequencyTenure | null;
  isTenureApplicable?: boolean | null;
  minTenureUnitNumber?: number | null;
  maxTenureUnitNumber?: number | null;
  minimumLoanAmount?: any | null;
  maxLoanAmount?: any | null;
  interestMethod?: LoanInterestMethod | null;
  repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
  allowPartialInstallment?: boolean | null;
  isMonthlyInstallmentCompulsory?: boolean | null;
  isPenaltyApplicable?: boolean | null;
  penaltyDayAfterInstallmentDate?: number | null;
  penaltyType?: PenaltyType | null;
  penaltyRate?: number | null;
  penaltyAmount?: any | null;
  principalMaxGraceNumber?: number | null;
  interestMaxGraceNumber?: number | null;
  isRebateApplicable?: boolean | null;
  updateInterest?: boolean | null;
  waiveInterest?: boolean | null;
  postingFrequency?: LoanProductInstallment | null;
  isInsuranceApplicable?: boolean | null;
  isStaffProduct?: boolean | null;
  supportMultipleAccounts?: boolean | null;
  loanScheduleChangeOverride?: boolean | null;
  allowGurantee?: boolean | null;
  maxPercentOfGurantee?: number | null;
  isCollateralRequired?: boolean | null;
  collateralTypes?: Array<string | null> | null;
  requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
  productCode?: { prefix: string; initialNo: string } | null;
  rebate?: {
    dayBeforeInstallmentDate?: number | null;
    rebateRate?: number | null;
    rebateAmount?: any | null;
    rebateLedgerMapping?: string | null;
  } | null;
  interest?: {
    minRate?: number | null;
    maxRate?: number | null;
    defaultRate: number;
    ceoAuthority?: number | null;
    boardAuthority?: number | null;
  } | null;
  loanProcessingCharge?: Array<{
    serviceName?: string | null;
    ledgerName?: string | null;
    amount?: any | null;
  } | null> | null;
  insuranceType?: { type?: string | null; amount?: any | null; rate?: number | null } | null;
  ledgerMapping?: {
    principal?: string | null;
    interestAccuredDaily?: string | null;
    interestIncome?: string | null;
  } | null;
  collateralValue?: Array<{
    type?: string | null;
    name?: string | null;
    minFMV?: number | null;
    maxFMV?: number | null;
    minDV?: number | null;
    maxDV?: number | null;
    minValue?: number | null;
    maxValue?: number | null;
  } | null> | null;
  prematurePenaltySetup?: {
    penaltyDateType?: PrematurePenaltyDateType | null;
    noOfDays?: number | null;
    penaltyLedgerMapping?: string | null;
    penaltyAmount?: any | null;
    penaltyRate?: number | null;
  } | null;
};

export type GetLoanProductDetailsDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductDetailsDataQuery = {
  settings: {
    general?: {
      loanProducts?: {
        formState?: {
          data?: LoanProductFragment | null;
          error?:
            | QueryError_AuthorizationError_Fragment
            | QueryError_BadRequestError_Fragment
            | QueryError_NotFoundError_Fragment
            | QueryError_ServerError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductsListQueryVariables = Exact<{
  memberId: Scalars['ID'];
  productTypeId: Scalars['ID'];
  productSubTypeId: Scalars['ID'];
}>;

export type GetLoanProductsListQuery = {
  loanAccount: {
    getProductList?: {
      allowed?: Array<{ id: string; productName: string } | null> | null;
      notAllowed?: Array<{
        error?: Array<string | null> | null;
        data?: { id: string; productName: string } | null;
      } | null> | null;
    } | null;
  };
};

export type GetProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetProductCriteriaQuery = {
  loanAccount: {
    getProductCriteria?: {
      data?: {
        gender?: Array<string | null> | null;
        minAge?: number | null;
        maxAge?: number | null;
        ethnicity?: Array<string | null> | null;
        educationQualification?: Array<string | null> | null;
        occupation?: Array<string | null> | null;
        foreignEmployment?: boolean | null;
        institutionType?: Array<string | null> | null;
        cooperativeUnion?: Array<string | null> | null;
        cooperativeType?: Array<string | null> | null;
        maritalStatus?: Array<string | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetLoanAccountTypeQueryVariables = Exact<{
  productTypeId?: InputMaybe<Scalars['String']>;
}>;

export type GetLoanAccountTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{ id?: string | null; productType?: string | null } | null> | null;
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductTypesQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductTypesQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCollateralListQueryVariables = Exact<{ [key: string]: never }>;

export type GetCollateralListQuery = {
  settings: {
    general?: {
      loan?: {
        general?: {
          collateralList?: Array<{ id?: string | null; name?: string | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<LoanAccountSearchFilter>;
}>;

export type GetLoanListQuery = {
  loanAccount: {
    list?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          LoanAccountName?: string | null;
          createdAt: string;
          member: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePicUrl?: string | null;
          };
          product: { productName: string };
        } | null;
      }> | null;
      pageInfo?: {
        endCursor?: string | null;
        startCursor?: string | null;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
      } | null;
    } | null;
  };
};

export type GetLoanInstallmentsQueryVariables = Exact<{
  productId: Scalars['ID'];
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  sanctionAmount: Scalars['Int'];
  tenure: Scalars['Int'];
  interest: Scalars['Float'];
  repaymentScheme: LoanRepaymentScheme;
}>;

export type GetLoanInstallmentsQuery = {
  loanAccount: {
    getLoanInstallments?: {
      data?: {
        total: string;
        totalInterest?: string | null;
        totalPrincipal?: string | null;
        installments?: Array<{
          interest: string;
          installmentDate: string;
          installmentNo: number;
          payment: string;
          principal: string;
          remainingPrincipal: string;
        } | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetLoanApplicationDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanApplicationDetailsQuery = {
  loanAccount: {
    formState?: {
      data?: {
        memberId?: string | null;
        productType: string;
        productSubType?: string | null;
        productId?: string | null;
        loanAccountName?: string | null;
        appliedLoanAmount?: string | null;
        linkedAccountId?: string | null;
        totalValuation?: string | null;
        totalSanctionedAmount?: string | null;
        justifySanction?: string | null;
        interestAuthority?: InterestAuthority | null;
        intrestRate?: number | null;
        tenure?: number | null;
        tenureType?: FrequencyTenure | null;
        repaymentScheme?: LoanRepaymentScheme | null;
        note?: string | null;
        collateralData?: Array<{
          collateralType?: string | null;
          ownerName?: string | null;
          relation?: string | null;
          sheetNo?: number | null;
          plotNo?: number | null;
          kittaNo?: number | null;
          area?: number | null;
          buildingType?: BuildingType | null;
          constructionType?: ConstructionType | null;
          valuatorId?: string | null;
          noOfStorey?: number | null;
          fmvMaxAmount?: any | null;
          dvMinAmount?: string | null;
          valuationMethod?: ValuationMethod | null;
          valuationPercent?: number | null;
          collaterallValuation?: any | null;
          collateralDescription?: string | null;
          collateralFiles?: Array<string | null> | null;
          valuationFiles?: Array<string | null> | null;
          vehicleName?: string | null;
          vehicleModelNo?: string | null;
          vehicleRegistrationNo?: string | null;
          vehicleNo?: string | null;
          vehicleSeatCapacity?: number | null;
          vehicleCapacity?: string | null;
          vehicleType?: string | null;
          vehicleFuelType?: string | null;
          documentName?: string | null;
          valuationAmount?: string | null;
          description?: string | null;
        } | null> | null;
        gurantee_details?: Array<{
          accountId?: string | null;
          guranteeAmount?: any | null;
          maxGuranteeAmountLimit?: any | null;
          memberId?: string | null;
          totalAmount?: any | null;
          accountName?: string | null;
        } | null> | null;
        gracePeriod?: {
          principalGracePeriod?: number | null;
          interestGracePeriod?: number | null;
        } | null;
        interestDoc?: Array<{ identifier?: string | null; url?: string | null } | null> | null;
        loanProcessingCharge?: Array<{
          amount?: any | null;
          ledgerName?: string | null;
          serviceName?: string | null;
        } | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetMemberLoanAccountsQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetMemberLoanAccountsQuery = {
  loanAccount: {
    memberDisbursedLoanAccounts?: Array<{ id?: string | null; name?: string | null } | null> | null;
  };
};

export type GetLoanPreviewQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetLoanPreviewQuery = {
  loanAccount: {
    loanPreview?: {
      data?: {
        productId?: string | null;
        memberId?: string | null;
        additionalFeatures?: {
          allowPartialInstallment?: boolean | null;
          collateral?: boolean | null;
          insurance?: boolean | null;
          isMonthlyInterestCompulsory?: boolean | null;
          loanScheduleChangeOverride?: boolean | null;
          overrideInterest?: boolean | null;
          staffProduct?: boolean | null;
          supportMultipleAccount?: boolean | null;
        } | null;
        criteria?: {
          gender?: Array<string | null> | null;
          minAge?: number | null;
          maxAge?: number | null;
          ethnicity?: Array<string | null> | null;
          educationQualification?: Array<string | null> | null;
          maritalStatus?: Array<string | null> | null;
          foreignEmployment?: boolean | null;
          occupation?: Array<string | null> | null;
          institutionType?: Array<string | null> | null;
          cooperativeUnion?: Array<string | null> | null;
          cooperativeType?: Array<string | null> | null;
        } | null;
        collateralAndGuarantees?: Array<{
          name?: string | null;
          valuation?: string | null;
        } | null> | null;
        generalInformation?: {
          loanProduct?: string | null;
          loanSubType?: string | null;
          loanType?: string | null;
          natureOfLoanProduct?: NatureOfLoanProduct | null;
          loanName?: string | null;
          productCode?: string | null;
        } | null;
        loanDetails?: {
          appliedLoanAmount?: string | null;
          interestMethod?: LoanInterestMethod | null;
          interestRate?: number | null;
          loanRepaymentScheme?: LoanRepaymentScheme | null;
          tenure?: number | null;
          tenureUnit?: FrequencyTenure | null;
          totalCollateralValuation?: string | null;
          totalGuaranteeValuation?: string | null;
          totalProcessingChargesValuation?: string | null;
          totalSanctionedAmount?: string | null;
          totalDisbursedAmount?: string | null;
          principalGracePeriod?: number | null;
          interestGracePeriod?: number | null;
          interestAmount?: string | null;
          disburseDate?: string | null;
          expiryDate?: string | null;
          paymentFrequency?: LoanProductInstallment | null;
          processingCharges?: Array<{ name: string; amount?: any | null } | null> | null;
        } | null;
        repaymentDetails?: {
          lastPaymentDate?: string | null;
          remainingPrincipal?: string | null;
          remainingInterest?: string | null;
          remainingTotal?: string | null;
          totalInstallmentAmount?: string | null;
          nextInstallmentNo?: number | null;
          remainingInstallments?: Array<{
            installmentNo?: number | null;
            principal?: string | null;
            fine?: string | null;
            interestAmount?: string | null;
          } | null> | null;
        } | null;
        member?: {
          name?: Record<'local' | 'en' | 'np', string> | null;
          id: string;
          code: string;
          profilePicUrl?: string | null;
        } | null;
        paymentSchedule?: {
          total: string;
          totalInterest?: string | null;
          totalPrincipal?: string | null;
          installments?: Array<{
            installmentDate: string;
            installmentNo: number;
            interest: string;
            payment: string;
            principal: string;
            remainingPrincipal: string;
            paid: boolean;
          } | null> | null;
        } | null;
        statistics?: {
          remainingPayableAmount?: string | null;
          totalPaidAmount?: string | null;
          totalPayableAmount?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanRepaymentListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<LoanRepaymentFilter>;
}>;

export type GetLoanRepaymentListQuery = {
  loanAccount: {
    repaymentList?: {
      totalCount?: number | null;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          loanAccountId: string;
          memberId: string;
          memberName: Record<'local' | 'en' | 'np', string>;
          memberCode?: string | null;
          memberProfilePicId?: string | null;
          memberProfilePicUrl?: string | null;
          loanAccountName: string;
          loanProductId: string;
          loanProductName: string;
          amount: string;
          paymentDate: string;
        } | null;
      }> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetMemberLinkedAccountsQueryVariables = Exact<{
  memberId: Scalars['ID'];
  filter?: InputMaybe<
    Array<InputMaybe<NatureOfDepositProduct>> | InputMaybe<NatureOfDepositProduct>
  >;
  includeActiveAccountsOnly?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetMemberLinkedAccountsQuery = {
  members: {
    getAllAccounts?: {
      data?: {
        depositAccount?: Array<{
          id: string;
          accountName?: string | null;
          balance?: string | null;
          interestAccured?: string | null;
          interestTax?: string | null;
          prematurePenalty?: string | null;
          lastTransactionDate?: string | null;
          accountOpenedDate?: string | null;
          installmentAmount?: string | null;
          accountExpiryDate?: string | null;
          overDrawnBalance?: string | null;
          guaranteedAmount?: string | null;
          member?: { name?: Record<'local' | 'en' | 'np', string> | null } | null;
          product: { productName: string; nature: NatureOfDepositProduct };
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetMultipleSubProductsQueryVariables = Exact<{
  productTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>;
}>;

export type GetMultipleSubProductsQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          multipleProductSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductsFromSubTypeQueryVariables = Exact<{
  subTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>;
}>;

export type GetLoanProductsFromSubTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          loanProducts?: Array<{ id: string; productName: string } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberListQueryVariables = Exact<{
  pagination: Pagination;
  filter?: InputMaybe<KymMemberDataFilter>;
}>;

export type GetMemberListQuery = {
  members: {
    list: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          type: KymMemberTypesEnum;
          branch?: string | null;
          profilePicUrl?: string | null;
          signaturePicUrl?: string | null;
          contact?: string | null;
          createdAt: string;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          activeDate?: Record<'local' | 'en' | 'np', string> | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
          profile?:
            | {
                data?: {
                  formData?: {
                    maritalStatusId?: string | null;
                    maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
                    basicInformation?: {
                      genderId?: string | null;
                      gender?: Record<'local' | 'en' | 'np', string> | null;
                      age?: number | null;
                    } | null;
                    contactDetails?: {
                      mobileNumber?: string | null;
                      phoneNumber?: string | null;
                      email?: string | null;
                    } | null;
                  } | null;
                } | null;
              }
            | {}
            | null;
        } | null;
      } | null> | null;
      pageInfo?: PaginationFragment | null;
    };
  };
};

export type GetMemberTypesQueryVariables = Exact<{ [key: string]: never }>;

export type GetMemberTypesQuery = {
  members: {
    memberTypes: {
      data?: Array<{ id: string; type?: Array<KymMemberTypesEnum | null> | null } | null> | null;
    };
  };
};

export type GetMemberTranslationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberTranslationQuery = {
  members: {
    translate: {
      data?: Array<{
        id: string;
        data?: string | null;
        translatedValue?: string | null;
      } | null> | null;
    };
  };
};

export type GetKymFormStatusQueryVariables = Exact<{
  id: Scalars['String'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetKymFormStatusQuery = {
  members: {
    individual?: {
      formState?: {
        sectionStatus?: {
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberIndividualDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberIndividualDataQuery = {
  members: {
    details: {
      data?: {
        id: string;
        code: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        profilePicUrl?: string | null;
        profilePic?: string | null;
        contact?: string | null;
        dateJoined?: Record<'local' | 'en' | 'np', string> | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          wardNo?: string | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        profile?:
          | {
              id?: string | null;
              institutionInformation?: {
                data?: {
                  nameOfInstitutionEn?: string | null;
                  nameOfInstitutionNp?: string | null;
                } | null;
              } | null;
            }
          | {
              data?: {
                formData?: {
                  nameOfOrganization?: string | null;
                  regdNumber?: number | null;
                  regdDate?: Record<'local' | 'en' | 'np', string> | null;
                } | null;
              } | null;
            }
          | {
              data?: {
                formData?: {
                  maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
                  maritalStatusId?: string | null;
                  basicInformation?: {
                    dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
                    age?: number | null;
                    gender?: Record<'local' | 'en' | 'np', string> | null;
                  } | null;
                  contactDetails?: { email?: string | null } | null;
                } | null;
              } | null;
            }
          | {
              data?: {
                formData?: {
                  institutionName?: string | null;
                  institutionTypeId?: string | null;
                  natureOfBusiness?: string | null;
                } | null;
              } | null;
            }
          | null;
      } | null;
    };
  };
};

export type GetIndividualKymEditDataQueryVariables = Exact<{
  id: Scalars['String'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetIndividualKymEditDataQuery = {
  members: {
    individual?: {
      formState?: {
        sectionStatus?: {
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null;
        data?: {
          formData?: {
            maritalStatusId?: string | null;
            annualIncomeSourceId?: string | null;
            isFamilyAMember?: boolean | null;
            identificationSelection?: Array<string | null> | null;
            basicInformation?: {
              firstName?: Record<'local' | 'en' | 'np', string> | null;
              middleName?: Record<'local' | 'en' | 'np', string> | null;
              lastName?: Record<'local' | 'en' | 'np', string> | null;
              genderId?: string | null;
              dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
              ethnicityId?: string | null;
              nationalityId?: string | null;
              educationQualificationId?: string | null;
              religionId?: string | null;
            } | null;
            contactDetails?: {
              mobileNumber?: string | null;
              phoneNumber?: string | null;
              email?: string | null;
            } | null;
            rentedHouse?: {
              landlordName?: Record<'local' | 'en' | 'np', string> | null;
              landlordContact?: string | null;
            } | null;
            profession?: {
              professionId?: Array<string | null> | null;
              otherProfession?: string | null;
            } | null;
            foreignEmployment?: {
              isForeignEmployment?: boolean | null;
              foreignEmpCountryId?: string | null;
              typeOfVisaId?: string | null;
              foreignEstimatedAnnualIncome?: string | null;
            } | null;
            membershipDetails?: {
              purposeId?: string | null;
              isMemberOfAnotherCooperative?: boolean | null;
              otherCoopName?: Record<'local' | 'en' | 'np', string> | null;
              otherCoopBranchId?: string | null;
              otherCoopMemberId?: string | null;
            } | null;
            introducers?: {
              firstIntroducerId?: string | null;
              secondIntroducerId?: string | null;
            } | null;
            initialTransactionDetails?: {
              initialShare?: number | null;
              initialSaving?: string | null;
              initialLoan?: string | null;
              otherFinancialAmount?: string | null;
            } | null;
            estimatedTransactions?: {
              estimatedAnnualTransactionAmount?: string | null;
              estimatedAnnualLoanAmount?: string | null;
              estimatedAnnualTransactionFrequencyId?: string | null;
              estimatedAnnualDepositAmount?: string | null;
            } | null;
            declaration?: {
              isPoliticallyExposed?: boolean | null;
              politicallyExposedDetails?: string | null;
              hasBeneficialOwner?: boolean | null;
              beneficialRelationshipId?: string | null;
              beneficialFullName?: Record<'local' | 'en' | 'np', string> | null;
              isConvicted?: boolean | null;
              convictedDetails?: string | null;
              hasForeignResidentialPermit?: boolean | null;
              foreignResidentialPermitTypeId?: string | null;
              declarationAgreement?: boolean | null;
            } | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              sameTempAsPermanentAddress?: boolean | null;
              address?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetIndividualKymFamilyMembersListQueryVariables = Exact<{
  id: Scalars['String'];
  isMember?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetIndividualKymFamilyMembersListQuery = {
  members: {
    individual?: {
      listFamilyMember?: {
        data?: Array<{
          id: string;
          relationshipId?: string | null;
          fullName?: Record<'local' | 'en' | 'np', string> | null;
          familyMemberId?: string | null;
          dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetIndividualKymFamilyOccupationListQueryVariables = Exact<{
  id: Scalars['String'];
  isSpouse: Scalars['Boolean'];
}>;

export type GetIndividualKymFamilyOccupationListQuery = {
  members: {
    individual?: {
      listOccupation?: {
        data?: Array<{
          id: string;
          occupationId?: string | null;
          orgName?: Record<'local' | 'en' | 'np', string> | null;
          panVatNo?: string | null;
          address?: Record<'local' | 'en' | 'np', string> | null;
          estimatedAnnualIncome?: string | null;
          establishedDate?: Record<'local' | 'en' | 'np', string> | null;
          registrationNo?: string | null;
          contact?: string | null;
          isOwner?: boolean | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetIndividualKymIncomeSourceListQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetIndividualKymIncomeSourceListQuery = {
  members: {
    individual?: {
      listIncomeSource?: {
        data?: Array<{
          id: string;
          incomeSource?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetKymDocumentsListQueryVariables = Exact<{
  memberId: Scalars['String'];
}>;

export type GetKymDocumentsListQuery = {
  document: {
    listKYMDocuments: {
      data?: Array<{
        fieldId?: string | null;
        docData: Array<{ identifier: string; url: string } | null>;
      } | null> | null;
    };
  };
};

export type GetIndividualKymIdentificationListQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetIndividualKymIdentificationListQuery = {
  members: {
    individual?: {
      listIdentification?: {
        data?: Array<{
          id: string;
          idNo?: string | null;
          idType: string;
          place?: Record<'local' | 'en' | 'np', string> | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetMemberDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberDetailsQuery = {
  members: {
    details: {
      data?: {
        id: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        code: string;
        contact?: string | null;
        profilePicUrl?: string | null;
        signaturePicUrl?: string | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          wardNo?: string | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
          houseNo?: string | null;
        } | null;
        share?: {
          summary?: {
            memberId?: string | null;
            count: number;
            amount: number;
            member: {
              id: string;
              name?: Record<'local' | 'en' | 'np', string> | null;
              code: string;
            };
          } | null;
        } | null;
        profile?:
          | {
              data?: {
                formData?: {
                  basicInformation?: {
                    gender?: Record<'local' | 'en' | 'np', string> | null;
                    dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
                    age?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetOfficialUseQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetOfficialUseQuery = {
  members: {
    officialUse?: {
      recordId?: string | null;
      record?: {
        id?: string | null;
        isStaff?: boolean | null;
        checkSanction?: boolean | null;
        checkNegative?: boolean | null;
        riskCategory?: OfficialUseRiskCategory | null;
        docCollectedAndVerified?: boolean | null;
        acceptableAddressDoc?: boolean | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type GetMembershipFeeQueryVariables = Exact<{
  memberID: Scalars['ID'];
}>;

export type GetMembershipFeeQuery = {
  members: {
    activateMember?: {
      getMembershipFee?: {
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
        data?: { charge: number } | null;
      } | null;
    } | null;
  };
};

export type GetMemberCheckQueryVariables = Exact<{
  memberID: Scalars['ID'];
}>;

export type GetMemberCheckQuery = {
  members: {
    activateMember?: {
      memberActivateChecks?: {
        isFeePaid: boolean;
        isShareIssued: boolean;
        isAccountUpdated: boolean;
      } | null;
    } | null;
  };
};

export type GetAccountCheckQueryVariables = Exact<{
  memberId: Scalars['ID'];
  accountId: Scalars['ID'];
}>;

export type GetAccountCheckQuery = {
  members: { activateMember?: { accountUpdateCheck: boolean } | null };
};

export type GetMemberAccountsQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetMemberAccountsQuery = {
  members: {
    getAllAccounts?: {
      data?: {
        depositAccount?: Array<{
          id: string;
          accountName?: string | null;
          product: {
            nature: NatureOfDepositProduct;
            isMandatorySaving?: boolean | null;
            productName: string;
          };
        } | null> | null;
        loanAccount?: Array<{
          id: string;
          accountName?: string | null;
          product: { productName: string };
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAccountInactiveCheckQueryVariables = Exact<{
  memberId: Scalars['ID'];
  accountId: Scalars['ID'];
  accountType: AccountTypeFilter;
}>;

export type GetAccountInactiveCheckQuery = {
  members: { inactivateMember?: { accountCloseCheck: boolean } | null };
};

export type GetMemberInactiveCheckQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetMemberInactiveCheckQuery = {
  members: {
    inactivateMember?: {
      inactivateCheck?: { isAccountClosed: boolean; isShareReturned: boolean } | null;
    } | null;
  };
};

export type GetMemberDetailsOverviewQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberDetailsOverviewQuery = {
  members: {
    memberOverview?: {
      data?: {
        accounts?: {
          accounts?: Array<{
            accountName?: string | null;
            accountNumber?: string | null;
            totalBalance?: string | null;
            productName?: string | null;
            productType?: string | null;
            interestRate?: string | null;
          } | null> | null;
          payments?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            accountName?: string | null;
            paymentType?: string | null;
            amount?: string | null;
            installmentNo?: string | null;
            interestRate?: string | null;
          } | null> | null;
        } | null;
        share?: {
          shareInfo?: {
            totalCount?: string | null;
            issuedCount?: string | null;
            returnedCount?: string | null;
            totalBalance?: string | null;
          } | null;
          registerDetails?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            title?: string | null;
            txnAmount?: string | null;
            txnType?: ShareTransactionType | null;
            noOfShares?: number | null;
          } | null> | null;
          balanceDetails?: {
            totalCount: number;
            edges: Array<{
              cursor: string;
              node: {
                id?: string | null;
                memberId?: string | null;
                status?: Share_Status | null;
                transactionDate?: Record<'local' | 'en' | 'np', string> | null;
                transactionDirection: Share_Transaction_Direction;
                credit?: number | null;
                debit?: number | null;
                startNumber: number;
                endNumber: number;
                balance?: number | null;
                shareAmount?: string | null;
                totalAmount?: number | null;
                paymentMode?: SharePaymentMode | null;
                bankId?: string | null;
                voucherNumber?: string | null;
                accountId?: string | null;
                member?: {
                  id: string;
                  objState: ObjState;
                  createdAt: string;
                  modifiedAt: string;
                  code: string;
                  type: KymMemberTypesEnum;
                  name?: Record<'local' | 'en' | 'np', string> | null;
                  contact?: string | null;
                  dateJoined?: Record<'local' | 'en' | 'np', string> | null;
                  profilePic?: string | null;
                  signaturepic?: string | null;
                  profilePicUrl?: string | null;
                  signaturePicUrl?: string | null;
                } | null;
                extraFee?: Array<{ name: string; value: number } | null> | null;
              };
            }>;
            pageInfo?: {
              hasNextPage: boolean;
              hasPreviousPage: boolean;
              startCursor?: string | null;
              endCursor?: string | null;
            } | null;
          } | null;
        } | null;
        loan?: {
          accounts?: Array<{
            accountName?: string | null;
            accountNumber?: string | null;
            totalBalance?: string | null;
            productName?: string | null;
            productType?: string | null;
            interestRate?: string | null;
            subscriptionDate?: Record<'local' | 'en' | 'np', string> | null;
            interestEarned?: string | null;
            interestBooked?: string | null;
          } | null> | null;
          payments?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            accountName?: string | null;
            paymentType?: string | null;
            amount?: string | null;
            installmentNo?: string | null;
            interestRate?: string | null;
          } | null> | null;
        } | null;
        reports?: {
          list?: Array<{
            code?: string | null;
            reportName?: string | null;
            category?: string | null;
          } | null> | null;
        } | null;
        overview?: {
          memberGraphs?: {
            deposit?: {
              periodType?: PeriodTypeEnum | null;
              data?: Array<{ time?: number | null; amount?: string | null } | null> | null;
            } | null;
            withdraw?: {
              periodType?: PeriodTypeEnum | null;
              data?: Array<{ time?: number | null; amount?: string | null } | null> | null;
            } | null;
          } | null;
          statistics?: {
            totalShareValue?: string | null;
            accountBalance?: string | null;
            loanBalance?: string | null;
          } | null;
          payments?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            accountName?: string | null;
            paymentType?: string | null;
            amount?: string | null;
          } | null> | null;
          recentTransactions?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            title?: string | null;
            txnType?: MemberRecentTransactionViewTxnType | null;
            amount?: string | null;
            noOfShares?: number | null;
          } | null> | null;
        } | null;
        cheques?: Array<{
          accountName?: string | null;
          issued?: number | null;
          used?: number | null;
          left?: number | null;
          cancelled?: number | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetMemberDetailsShareBalanceQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberDetailsShareBalanceQuery = {
  share: {
    history?: {
      history?: Array<{
        id?: string | null;
        memberId?: string | null;
        status?: Share_Status | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        transactionDirection: Share_Transaction_Direction;
        credit?: number | null;
        debit?: number | null;
        startNumber: number;
        endNumber: number;
        balance?: number | null;
        shareAmount?: string | null;
        totalAmount?: number | null;
        paymentMode?: SharePaymentMode | null;
        bankId?: string | null;
        voucherNumber?: string | null;
        accountId?: string | null;
        member?: { id: string; objState: ObjState; createdAt: string } | null;
        extraFee?: Array<{ name: string; value: number } | null> | null;
      } | null> | null;
    } | null;
  };
};

export type GetMemberOverviewBasicDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberOverviewBasicDetailsQuery = {
  members: {
    memberOverview?: {
      data?: {
        overview?: {
          basicInformation?:
            | {
                __typename: 'CooperativeBasicMinInfo';
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                registrationNo?: string | null;
                registrationOffice?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
              }
            | {
                __typename: 'CooperativeUnionBasicMinInfo';
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                type?: string | null;
                nature?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                vatPanNo?: string | null;
                noOfServiceCenters?: number | null;
              }
            | {
                __typename: 'IndividualBasicMinInfo';
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                genderId?: string | null;
                gender?: Record<'local' | 'en' | 'np', string> | null;
                maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
                maritalStatusId?: string | null;
                fathersName?: string | null;
                mothersName?: string | null;
                grandFathersName?: string | null;
                isStaff?: boolean | null;
                familyMembers?: Array<{
                  fullName?: string | null;
                  relationship?: string | null;
                  dob?: string | null;
                } | null> | null;
              }
            | {
                __typename: 'InstitutionBasicMinInfo';
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                type?: string | null;
                nature?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                vatPanNo?: string | null;
                noOfServiceCenters?: number | null;
              }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberOverviewBioDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberOverviewBioDetailsQuery = {
  members: {
    memberOverview?: {
      data?: {
        bio?:
          | {
              __typename: 'CoopBio';
              basicInfo?: {
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                registrationNo?: string | null;
                registrationOffice?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              registeredAddress?: AddressFragment | null;
              operatingAddress?: AddressFragment | null;
              contactDetails?: {
                email?: string | null;
                website?: string | null;
                phone?: string | null;
              } | null;
              currentMemberDetails?: {
                noOfMaleMembers?: number | null;
                noOfFemaleMembers?: number | null;
                noOfOtherMembers?: number | null;
                lastAuditDate?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              representativeDetails?: {
                name?: string | null;
                designation?: string | null;
                contactNumber?: string | null;
                email?: string | null;
                panVatNo?: string | null;
                address?: AddressFragment | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null;
              additionalCoopDetails?: {
                coopType?: string | null;
                mainServiceProduct?: string | null;
              } | null;
              employeeDetails?: {
                male?: number | null;
                female?: number | null;
                other?: number | null;
                total?: number | null;
              } | null;
              equityLiabilities?: {
                shareCapital?: string | null;
                reserveAndSurplus?: string | null;
                savingDeposit?: string | null;
                loanAccount?: string | null;
                capitalGrant?: string | null;
                total?: string | null;
              } | null;
              assetDetails?: {
                cashAndEquivalents?: string | null;
                bank?: string | null;
                investments?: string | null;
                loan?: string | null;
                nonCurrentAssets?: string | null;
                otherNonCurrentAssets?: string | null;
                other?: string | null;
              } | null;
              partnerDirectorDetails?: Array<{
                name?: string | null;
                designation?: string | null;
                dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
                highestQualification?: string | null;
                mobileNo?: string | null;
                email?: string | null;
                citizenshipNo?: string | null;
                panNo?: string | null;
                permAddress?: AddressFragment | null;
                tempAddress?: AddressFragment | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              operatorDetails?: Array<{
                name?: string | null;
                contactNo?: string | null;
                email?: string | null;
                panNo?: string | null;
                pemAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
            }
          | {
              __typename: 'CoopUnionBio';
              basicInfo?: {
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                type?: string | null;
                nature?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                vatPanNo?: string | null;
                noOfServiceCenters?: number | null;
              } | null;
              address?: AddressFragment | null;
              registrationDetails?: {
                registeredNo?: string | null;
                issuingOffice?: string | null;
                address?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
              } | null;
              operatingAddress?: AddressFragment | null;
              serviceCenterAddress?: AddressFragment | null;
              contactDetails?: {
                phoneNo?: string | null;
                fax?: string | null;
                email?: string | null;
                website?: string | null;
                poBoxNo?: string | null;
                noOfEmployees?: number | null;
                agmDetails?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              bankAccDetails?: {
                bank?: string | null;
                accountNumber?: string | null;
                accountName?: string | null;
              } | null;
              applicantDetails?: {
                name?: string | null;
                designation?: string | null;
                contactNo?: string | null;
                email?: string | null;
                panNo?: string | null;
                address?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null;
              memberInfo?: {
                noOfMaleCurrent?: number | null;
                noOfFemaleCurrent?: number | null;
                noOfInstitutionalCurrent?: number | null;
                noOfMaleTarget?: number | null;
                noOfFemaleTarget?: number | null;
                noOfInstitutionalTarget?: number | null;
                totalCurrent?: number | null;
                totalTarget?: number | null;
              } | null;
              partnerDirectorDetails?: Array<{
                name?: string | null;
                designation?: string | null;
                email?: string | null;
                panNo?: string | null;
                mobileNo?: string | null;
                permAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              operatorDetails?: Array<{
                name?: string | null;
                designation?: string | null;
                contactNo?: string | null;
                email?: string | null;
                panNo?: string | null;
                pemAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              equityLiabilities?: {
                shareCapitalCurrent?: number | null;
                reserveAndSurplusCurrent?: number | null;
                savingDepositCurrent?: number | null;
                loanAccountCurrent?: number | null;
                capitalGrantCurrent?: number | null;
                liabilitiesPayableCurrent?: number | null;
                nonCurrentLiabilitiesCurrent?: number | null;
                totalCurrent?: number | null;
                shareCapitalTarget?: number | null;
                reserveAndSurplusTarget?: number | null;
                savingDepositTarget?: number | null;
                loanAccountTarget?: number | null;
                capitalGrantTarget?: number | null;
                liabilitiesPayableTarget?: number | null;
                nonCurrentLiabilitiesTarget?: number | null;
                totalTarget?: number | null;
              } | null;
              assetDetails?: {
                cashAndEquivalentsCurrent?: number | null;
                bankCurrent?: number | null;
                investmentsCurrent?: number | null;
                loanCurrent?: number | null;
                nonCurrentAssetsCurrent?: number | null;
                otherNonCurrentAssetsCurrent?: number | null;
                totalCurrent?: number | null;
                cashAndEquivalentsTarget?: number | null;
                bankTarget?: number | null;
                investmentsTarget?: number | null;
                loanTarget?: number | null;
                nonCurrentAssetsTarget?: number | null;
                otherNonCurrentAssetsTarget?: number | null;
                totalTarget?: number | null;
              } | null;
              incomeDetails?: {
                financialInvestment?: number | null;
                nonFinancialInvestment?: number | null;
                investment?: number | null;
                serviceOperations?: number | null;
                sales?: number | null;
                otherIncome?: number | null;
                miscIncome?: number | null;
                total?: number | null;
              } | null;
              expenseDetails?: {
                purchase?: number | null;
                directExpense?: number | null;
                adminExpense?: number | null;
                financialCost?: number | null;
                riskManagement?: number | null;
                deferredTax?: number | null;
                total?: number | null;
              } | null;
              docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
            }
          | {
              __typename: 'IndividualBio';
              memberName?: string | null;
              profilePic?: string | null;
              memberCode?: string | null;
              memberJoined?: Record<'local' | 'en' | 'np', string> | null;
              dob?: Record<'local' | 'en' | 'np', string> | null;
              gender?: Record<'local' | 'en' | 'np', string> | null;
              mobile?: string | null;
              email?: string | null;
              currentAddress?: Record<'local' | 'en' | 'np', string> | null;
              permanentAddress?: Record<'local' | 'en' | 'np', string> | null;
              maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
              familyMembers?: Array<{
                relationship?: string | null;
                fullName?: string | null;
                dob?: Record<'local' | 'en' | 'np', string> | null;
              } | null> | null;
              docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
            }
          | {
              __typename: 'InstitutionBio';
              basicInfo?: {
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                type?: string | null;
                nature?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                vatPanNo?: string | null;
                noOfServiceCenters?: number | null;
              } | null;
              addressDetails?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              registrationDetails?: {
                registeredNumber?: string | null;
                issuingOffice?: string | null;
                address?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
              } | null;
              operatingOfficeAddress?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              serviceCenterOfficeAddress?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              contactDetails?: {
                phoneNumber?: string | null;
                fax?: string | null;
                email?: string | null;
                website?: string | null;
                poBoxNo?: string | null;
                noOfEmployees?: number | null;
                agmDetails?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              bankAcDetails?: {
                bank?: string | null;
                accountNumber?: string | null;
                accountName?: string | null;
              } | null;
              partnerDirectorDetails?: Array<{
                name?: string | null;
                dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
                highestQualification?: string | null;
                mobileNo?: string | null;
                email?: string | null;
                citizenshipNo?: string | null;
                panNo?: string | null;
                permAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              operatorDetails?: Array<{
                name?: string | null;
                contactNo?: string | null;
                email?: string | null;
                panNo?: string | null;
                pemAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              transactionProfileDetails?: {
                nature?: string | null;
                annualTurnover?: string | null;
                initialDepositAmount?: string | null;
                expectedMonthlyTurnover?: string | null;
                expectedMonthlyTransaction?: string | null;
              } | null;
              sisterConcernDetails?: Array<{
                name?: Record<'local' | 'en' | 'np', string> | null;
                address?: string | null;
                phone?: string | null;
                natureOfBusiness?: string | null;
              } | null> | null;
              operatorInstructionDetails?: {
                accountType?: string | null;
                stampCompulsory?: boolean | null;
                specialInstruction?: string | null;
              } | null;
              declaration?: {
                name?: string | null;
                phoneNo?: string | null;
                email?: string | null;
                address?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
              } | null;
              docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
            }
          | null;
      } | null;
    } | null;
  };
};

export type GetMemberPdfQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberPdfQuery = { members: { memberPDF: string } };

export type GetBranchReportQueryVariables = Exact<{
  data?: InputMaybe<BranchReportFilter>;
}>;

export type GetBranchReportQuery = {
  report: {
    branchReport: {
      branchReport?: {
        data?: Array<{
          id: string;
          serviceCenterCode?: string | null;
          name?: string | null;
          contactNumber?: string | null;
          email?: string | null;
          managerName?: string | null;
          managerContact?: string | null;
          isExtensionCounter?: boolean | null;
          estDate?: Record<'local' | 'en' | 'np', string> | null;
          branchStatus?: boolean | null;
          remarks?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetCashLedgerReportQueryVariables = Exact<{
  data?: InputMaybe<CashLedgerReportFilterData>;
}>;

export type GetCashLedgerReportQuery = {
  report: {
    cashReport: {
      cashLedgerReport?: {
        openingBalance?: string | null;
        closingBalance?: string | null;
        summary?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          ledgerCode?: string | null;
          particular?: string | null;
          voucherNo?: string | null;
          cashDr?: string | null;
          cashCr?: string | null;
          balance?: string | null;
        } | null> | null;
        details?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          ledgerCode?: string | null;
          particular?: string | null;
          voucherNo?: string | null;
          cashDr?: string | null;
          cashCr?: string | null;
          balance?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetAccountOpeningReportQueryVariables = Exact<{
  data?: InputMaybe<AccountOpeningReportInput>;
}>;

export type GetAccountOpeningReportQuery = {
  report: {
    depositReport: {
      accountOpeningReport?: {
        data?: Array<{
          accountName?: string | null;
          accountNumber?: string | null;
          memberId?: string | null;
          openedBy?: string | null;
          openingDate?: Record<'local' | 'en' | 'np', string> | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetAccountClosingReportQueryVariables = Exact<{
  data?: InputMaybe<AccountClosingReportInput>;
}>;

export type GetAccountClosingReportQuery = {
  report: {
    depositReport: {
      accountClosingReport?: {
        data?: Array<{
          memberId?: string | null;
          accountNumber?: string | null;
          accountName?: string | null;
          openingDate?: Record<'local' | 'en' | 'np', string> | null;
          closingDate?: Record<'local' | 'en' | 'np', string> | null;
          closedBalance?: string | null;
          closedBy?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetInterestTaxReportQueryVariables = Exact<{
  data: InterestTaxReportFilter;
}>;

export type GetInterestTaxReportQuery = {
  report: {
    depositReport: {
      interestTaxReport: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          name?: Record<'local' | 'en' | 'np', string> | null;
          panNo?: string | null;
          accountNo?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          interest?: string | null;
          tax?: string | null;
          savingBalance?: string | null;
          closingBalance?: string | null;
          remarks?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
      };
    };
  };
};

export type GetTtrReportQueryVariables = Exact<{
  data: TtrReportFilter;
}>;

export type GetTtrReportQuery = {
  report: {
    depositReport: {
      thresholdTransactionReport: {
        data?: {
          yearly?: Array<{
            name?: Record<'local' | 'en' | 'np', string> | null;
            memberId?: string | null;
            branch?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            nature?: NatureOfTransaction | null;
            accountNo?: string | null;
            amount?: string | null;
            sourceOfFund?: string | null;
            remarks?: string | null;
            address?: AddressFragment | null;
          } | null> | null;
          perTranx?: Array<{
            name?: Record<'local' | 'en' | 'np', string> | null;
            memberId?: string | null;
            branch?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            nature?: NatureOfTransaction | null;
            accountNo?: string | null;
            amount?: string | null;
            sourceOfFund?: string | null;
            remarks?: string | null;
            address?: AddressFragment | null;
          } | null> | null;
        } | null;
      };
    };
  };
};

export type GetSavingStatementQueryVariables = Exact<{
  data: SavingStatementReportSettings;
}>;

export type GetSavingStatementQuery = {
  report: {
    depositReport: {
      savingStatementReport?: {
        memberId?: string | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          address?: {
            wardNo?: string | null;
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null;
        statement?:
          | {
              savingStatement?: Array<{
                date?: Record<'local' | 'en' | 'np', string> | null;
                balanceAmount?: string | null;
                depositCr?: string | null;
                chequeOrVoucherNo?: string | null;
                particular?: string | null;
                withdrawDr?: string | null;
              } | null> | null;
              totals?: {
                totalBalance?: string | null;
                totalWithdraw?: string | null;
                totalDeposit?: string | null;
              } | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetInterestStatementReportQueryVariables = Exact<{
  data: InterestStatementFilter;
}>;

export type GetInterestStatementReportQuery = {
  report: {
    depositReport: {
      interestStatementReport: {
        data?: {
          memberId?: string | null;
          accountNo?: string | null;
          accountType?: NatureOfDepositProduct | null;
          currentInterestRate?: number | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          entries?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            amount?: string | null;
            balance?: string | null;
            days?: number | null;
            rate?: number | null;
            remarks?: string | null;
          } | null> | null;
          address?: {
            wardNo?: string | null;
            state?: Record<'local' | 'en' | 'np', string> | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null;
      };
    };
  };
};

export type GetUserReportQueryVariables = Exact<{
  data?: InputMaybe<UserReportFilter>;
}>;

export type GetUserReportQuery = {
  report: {
    employeeReport: {
      userReport?: {
        data?: Array<{
          isCoreEmployee?: boolean | null;
          employeeName?: string | null;
          empCode?: string | null;
          username?: string | null;
          usernameCode?: string | null;
          accessForBranch?: string | null;
          accessForGroup?: string | null;
          role?: string | null;
          createdDate?: Record<'local' | 'en' | 'np', string> | null;
          createdBy?: string | null;
          status?: string | null;
          remarks?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetLoanBalanceReportQueryVariables = Exact<{
  data: LoanBalanceFilterData;
}>;

export type GetLoanBalanceReportQuery = {
  report: {
    loanReport: {
      loanBalanceReport: {
        totalOutstandingBalance?: string | null;
        totalRemainingBalance?: string | null;
        data?: Array<{
          memberId?: string | null;
          loanAccountId?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          productName?: string | null;
          productCode?: string | null;
          outstandingBalance?: string | null;
          remainingBalance?: string | null;
          remainingInterest?: string | null;
          lastPaymentDate?: string | null;
        } | null> | null;
      };
    };
  };
};

export type GetLoanAgingStatementReportQueryVariables = Exact<{
  data?: InputMaybe<LoanAgingStatementInput>;
}>;

export type GetLoanAgingStatementReportQuery = {
  report: {
    loanReport: {
      loanAgingStatementReport?: {
        data?: {
          report?: Array<{
            memberNo?: string | null;
            loanNo?: string | null;
            name?: string | null;
            address?: string | null;
            phoneNo?: string | null;
            loanType?: string | null;
            paymentMode?: string | null;
            issueDate?: Record<'local' | 'en' | 'np', string> | null;
            loanMaturityDate?: Record<'local' | 'en' | 'np', string> | null;
            disbursePrincipal?: string | null;
            remainingPrincipal?: string | null;
            installmentAmount?: string | null;
            remainingInstallmentAmount?: string | null;
            remainingInterest?: string | null;
            remainingPenalty?: string | null;
            totalDueAmount?: string | null;
            goodAmount?: string | null;
            matured1To30Days?: string | null;
            matured1To12Months?: string | null;
            maturedAbove12Months?: string | null;
            lastPrincipalPaidDate?: Record<'local' | 'en' | 'np', string> | null;
            lastInterestPaidDate?: Record<'local' | 'en' | 'np', string> | null;
            installmentLateDays?: number | null;
          } | null> | null;
          summary?: {
            disbursePrincipalTotal?: string | null;
            remainingPrincipalTotal?: string | null;
            installmentAmountTotal?: string | null;
            remainingInstallmentAmountTotal?: string | null;
            remainingInterestTotal?: string | null;
            remainingPenaltyTotal?: string | null;
            dueAmountTotal?: string | null;
            goodAmountTotal?: string | null;
            matured1To30DaysTotal?: string | null;
            matured1To12MonthsTotal?: string | null;
            maturedAbove12MonthsTotal?: string | null;
          } | null;
        } | null;
      } | null;
    };
  };
};

export type GetLoanStatementReportQueryVariables = Exact<{
  data: LoanStatementReportSettings;
}>;

export type GetLoanStatementReportQuery = {
  report: {
    loanReport: {
      loanStatementReport?: {
        memberId?: string | null;
        member?: { name?: Record<'local' | 'en' | 'np', string> | null; code: string } | null;
        statement?:
          | {
              meta?: {
                accountNo?: string | null;
                approvedAmount?: string | null;
                interestRate?: number | null;
                loanType?: string | null;
                loanSubtype?: string | null;
                issuedDate?: Record<'local' | 'en' | 'np', string> | null;
                installment?: number | null;
                charge?: string | null;
              } | null;
              loanStatement?: Array<{
                date?: Record<'local' | 'en' | 'np', string> | null;
                particular?: string | null;
                txnId?: string | null;
                disbursePrinciple?: string | null;
                paidPrinciple?: string | null;
                interestPaid?: string | null;
                finePaid?: string | null;
                discount?: string | null;
                remainingPrinciple?: string | null;
              } | null> | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetMemberClassificationReportQueryVariables = Exact<{
  data: MemberClassificationFilter;
}>;

export type GetMemberClassificationReportQuery = {
  report: {
    memberReport: {
      memberClassificationReport: {
        data?: {
          gender?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          age?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          occupation?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          education?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          memberCategory?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          income?: Array<{ entryName?: string | null; inPercent?: string | null } | null> | null;
          address?: {
            province?: Array<{
              entryName?: string | null;
              inNumber?: number | null;
              inPercent?: string | null;
            } | null> | null;
            district?: Array<{
              entryName?: string | null;
              inNumber?: number | null;
              inPercent?: string | null;
            } | null> | null;
          } | null;
        } | null;
      };
    };
  };
};

export type GetActiveInactiveMemberReportQueryVariables = Exact<{
  data?: InputMaybe<ActiveInactiveMemberReportData>;
}>;

export type GetActiveInactiveMemberReportQuery = {
  report: {
    memberReport: {
      activeInactiveMemberReport?: {
        statement?:
          | {
              summary?: {
                activeTotal?: number | null;
                inactiveTotal?: number | null;
                totalMember?: number | null;
              } | null;
              reportStatement?: Array<{
                memberId?: string | null;
                memberName?: string | null;
                district?: string | null;
                wardNo?: string | null;
                address?: string | null;
                dob?: Record<'local' | 'en' | 'np', string> | null;
                age?: number | null;
                contactNo?: string | null;
                gender?: string | null;
                pan?: string | null;
                occupation?: string | null;
                memberRegistrationDate?: Record<'local' | 'en' | 'np', string> | null;
                status?: MemberStatus | null;
                memberType?: KymMemberTypesEnum | null;
              } | null> | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetKymStatusReportQueryVariables = Exact<{
  data?: InputMaybe<KymStatusReportFilter>;
}>;

export type GetKymStatusReportQuery = {
  report: {
    memberReport: {
      kymStatusReport?: {
        Summary?: Record<string, string> | null;
        data?: Array<{
          memberName?: string | null;
          memberId?: string | null;
          contact?: string | null;
          regDate?: Record<'local' | 'en' | 'np', string> | null;
          riskCategory?: string | null;
          lastKymUpdatedDate?: Record<'local' | 'en' | 'np', string> | null;
          kymExpireDays?: string | null;
          kymStatus?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetMemberRegistrationReportQueryVariables = Exact<{
  data?: InputMaybe<MemberRegistrationReportData>;
}>;

export type GetMemberRegistrationReportQuery = {
  report: {
    memberReport: {
      memberRegistrationReport?: {
        data?: {
          individual?: Array<{
            memberId?: string | null;
            memberCode?: string | null;
            name?: string | null;
            dob?: Record<'local' | 'en' | 'np', string> | null;
            grandFatherName?: string | null;
            fatherName?: string | null;
            SpouseName?: string | null;
            profession?: string | null;
            fingerPrint?: boolean | null;
            photo?: boolean | null;
            contactNo?: string | null;
            email?: string | null;
            other?: string | null;
            address?: AddressFragment | null;
            shareInfo?: {
              perShareAmount?: string | null;
              kitta?: string | null;
              amount?: string | null;
            } | null;
          } | null> | null;
          other?: Array<{
            memberId?: string | null;
            memberCode?: string | null;
            name?: string | null;
            doe?: Record<'local' | 'en' | 'np', string> | null;
            typeOfInstitution?: string | null;
            workingArea?: string | null;
            totalMember?: string | null;
            balanceSheet?: string | null;
            post?: string | null;
            authPersonName?: string | null;
            logo?: boolean | null;
            stamp?: boolean | null;
            contactNo?: string | null;
            email?: string | null;
            other?: string | null;
            address?: AddressFragment | null;
            shareInfo?: {
              perShareAmount?: string | null;
              kitta?: string | null;
              amount?: string | null;
            } | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type GetMBankingRegistrationReportQueryVariables = Exact<{
  data?: InputMaybe<EbankingReportFilter>;
}>;

export type GetMBankingRegistrationReportQuery = {
  report: {
    mobileBankingReport: {
      mbankingRegistrationReport?: {
        data?: Array<{
          memberId?: string | null;
          memberName?: string | null;
          mobileNo?: string | null;
          branchCode?: string | null;
          regDate?: Record<'local' | 'en' | 'np', string> | null;
          expDate?: Record<'local' | 'en' | 'np', string> | null;
          status?: string | null;
          registeredBy?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetMBankingExpiryReportQueryVariables = Exact<{
  data?: InputMaybe<EbankingReportFilter>;
}>;

export type GetMBankingExpiryReportQuery = {
  report: {
    mobileBankingReport: {
      mbankingRegistrationReport?: {
        data?: Array<{
          memberId?: string | null;
          memberName?: string | null;
          mobileNo?: string | null;
          branchCode?: string | null;
          regDate?: Record<'local' | 'en' | 'np', string> | null;
          expDate?: Record<'local' | 'en' | 'np', string> | null;
          status?: string | null;
          registeredBy?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetMbTransactionReportQueryVariables = Exact<{
  data?: InputMaybe<MBankingTransactionFilter>;
}>;

export type GetMbTransactionReportQuery = {
  report: {
    mobileBankingReport: {
      mBankingTransactionReport?: {
        data?: Array<{
          initiatorName?: string | null;
          phoneNo?: string | null;
          srcAccount?: string | null;
          destAccount?: string | null;
          amount?: string | null;
          transactionType?: string | null;
          transThrough?: string | null;
          transDate?: Record<'local' | 'en' | 'np', string> | null;
          narration?: string | null;
          status?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetLedgerReportQueryVariables = Exact<{
  data: GeneralLedgerFilter;
}>;

export type GetLedgerReportQuery = {
  report: {
    otherReport: {
      generalLedgerReport: {
        data?: Array<{
          id?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          account?: string | null;
          balance?: string | null;
          credit?: string | null;
          debit?: string | null;
        } | null> | null;
      };
    };
  };
};

export type GetSavingsBalanceReportQueryVariables = Exact<{
  data: SavingsBalanceFilterData;
}>;

export type GetSavingsBalanceReportQuery = {
  report: {
    otherReport: {
      savingsBalanceReport: {
        totalBalance?: string | null;
        data?: Array<{
          accountId?: string | null;
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          productId?: string | null;
          productName?: string | null;
          productCode?: string | null;
          accountOpeningDate?: string | null;
          memberType?: KymMemberTypesEnum | null;
          balance?: string | null;
        } | null> | null;
      };
    };
  };
};

export type GetAllSavedReportsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAllSavedReportsQuery = {
  report: {
    listReports: {
      totalCount: number;
      pageInfo?: PaginationFragment | null;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          lastModifiedDate: Record<'local' | 'en' | 'np', string>;
          name: string;
          reportType: string;
          savedBy: string;
        } | null;
      } | null> | null;
    };
  };
};

export type GetSavedReportQueryVariables = Exact<{
  reportId: Scalars['ID'];
}>;

export type GetSavedReportQuery = {
  report: {
    getReport?: {
      name?: string | null;
      settings?: { filter?: ShareTransactionType | null; memberId: string } | null;
    } | null;
  };
};

export type GetShareStatementQueryVariables = Exact<{
  data: ShareStatementReportSettings;
}>;

export type GetShareStatementQuery = {
  report: {
    shareReport: {
      shareStatementReport?: {
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          address?: {
            wardNo?: string | null;
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null;
        statement?:
          | {
              shareStatement?: Array<{
                date: Record<'local' | 'en' | 'np', string>;
                particular: string;
                noOfShares: number;
                returnAmountDr: number;
                purchaseAmountCr: number;
                balanceSheet: number;
              } | null> | null;
              totals?: {
                totalShares?: number | null;
                totalDr?: number | null;
                totalCr?: number | null;
                totalBalanceSheet?: number | null;
              } | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetShareRegisterReportQueryVariables = Exact<{
  data: SharePurchaseRegisterReportFilter;
}>;

export type GetShareRegisterReportQuery = {
  report: {
    shareReport: {
      sharePurchaseRegisterReport?: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          name?: string | null;
          particular?: string | null;
          perShareAmount?: string | null;
          kittaNumFrom?: string | null;
          kittaNumTo?: string | null;
          totalKitta?: string | null;
          totalAmount?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetShareTransactionReportQueryVariables = Exact<{
  data?: InputMaybe<ShareTransactionReportFilter>;
}>;

export type GetShareTransactionReportQuery = {
  report: {
    shareReport: {
      shareTransactionReport?: {
        totalShareIssued?: string | null;
        avgSharePerMember?: string | null;
        data?: Array<{
          transactionDate?: Record<'local' | 'en' | 'np', string> | null;
          memberId?: string | null;
          memberCode?: string | null;
          name?: string | null;
          particular?: string | null;
          shareReturnDr?: string | null;
          shareIssueCr?: string | null;
          balance?: string | null;
        } | null> | null;
        footer?: {
          totalCr?: string | null;
          totalDr?: string | null;
          totalBalance?: string | null;
        } | null;
      } | null;
    };
  };
};

export type GetShareBalanceReportQueryVariables = Exact<{
  data: ShareBalanceReportFilter;
}>;

export type GetShareBalanceReportQuery = {
  report: {
    shareReport: {
      shareBalanceReport?: {
        totalBalance?: string | null;
        data?: Array<{
          shareType?: string | null;
          shareCertificateNo?: string | null;
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          contactNo?: string | null;
          membershipDate?: Record<'local' | 'en' | 'np', string> | null;
          noOfKitta?: number | null;
          balance?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetTrialSheetReportQueryVariables = Exact<{
  data: TrialSheetReportFilter;
}>;

export type GetTrialSheetReportQuery = {
  report: {
    transactionReport: {
      financial: {
        trialSheetReport: {
          data?: {
            equityAndLiablitiesTotal?: string | null;
            assetsTotal?: string | null;
            expenseTotal?: string | null;
            incomeTotal?: string | null;
            offBalanceTotal?: string | null;
            totalAssetExpense?: string | null;
            totalLiablitiesIncome?: string | null;
            totalProfitLoss?: string | null;
            equityAndLiablities?: Array<{
              balance?: string | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            expenses?: Array<{
              balance?: string | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            income?: Array<{
              balance?: string | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            assets?: Array<{
              balance?: string | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            offBalance?: Array<{
              balance?: string | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
          } | null;
        };
      };
    };
  };
};

export type GetTransactionTellerReportQueryVariables = Exact<{
  data: TellerReportFilter;
}>;

export type GetTransactionTellerReportQuery = {
  report: {
    transactionReport: {
      financial: {
        tellerReport: {
          data?: {
            headTeller?: {
              inTransitTotal?: string | null;
              stackTotal?: string | null;
              inAmountTotal?: string | null;
              outAmountTotal?: string | null;
              balanceTotal?: string | null;
              entries?: Array<{
                tellerId?: string | null;
                name?: string | null;
                inTransit?: string | null;
                stack?: string | null;
                inAmount?: string | null;
                outAmount?: string | null;
                balance?: string | null;
              } | null> | null;
            } | null;
            teller?: {
              inTransitTotal?: string | null;
              stackTotal?: string | null;
              inAmountTotal?: string | null;
              outAmountTotal?: string | null;
              balanceTotal?: string | null;
              entries?: Array<{
                tellerId?: string | null;
                name?: string | null;
                inTransit?: string | null;
                stack?: string | null;
                inAmount?: string | null;
                outAmount?: string | null;
                balance?: string | null;
              } | null> | null;
            } | null;
          } | null;
        };
      };
    };
  };
};

export type GetVaultBalanceReportQueryVariables = Exact<{
  data: VaultBalanceReportFilter;
}>;

export type GetVaultBalanceReportQuery = {
  report: {
    transactionReport: {
      financial: {
        vaultBalanceReport: {
          data?: {
            opening?: {
              noneAmount?: string | null;
              noteTotal?: string | null;
              amountTotal?: string | null;
              denomination?: Array<{
                value: CashValue;
                quantity: number;
                amount?: string | null;
              } | null> | null;
            } | null;
            vaultIn?: {
              noneAmount?: string | null;
              noteTotal?: string | null;
              amountTotal?: string | null;
              denomination?: Array<{
                value: CashValue;
                quantity: number;
                amount?: string | null;
              } | null> | null;
            } | null;
            vaultOut?: {
              noneAmount?: string | null;
              noteTotal?: string | null;
              amountTotal?: string | null;
              denomination?: Array<{
                value: CashValue;
                quantity: number;
                amount?: string | null;
              } | null> | null;
            } | null;
            closing?: {
              noneAmount?: string | null;
              noteTotal?: string | null;
              amountTotal?: string | null;
              denomination?: Array<{
                value: CashValue;
                quantity: number;
                amount?: string | null;
              } | null> | null;
            } | null;
          } | null;
        };
      };
    };
  };
};

export type GetBankGlStatementReportQueryVariables = Exact<{
  data: BankGlStatementFilter;
}>;

export type GetBankGlStatementReportQuery = {
  report: {
    transactionReport: {
      financial: {
        bankGLStatementReport: {
          data?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            name?: Record<'local' | 'en' | 'np', string> | null;
            particular?: string | null;
            chequeNo?: string | null;
            depositAmount?: string | null;
            withdrawAmount?: string | null;
            balance?: string | null;
            remarks?: string | null;
          } | null> | null;
        };
      };
    };
  };
};

export type GetDayBookReportQueryVariables = Exact<{
  data: DayBookReportFilter;
}>;

export type GetDayBookReportQuery = {
  report: {
    transactionReport: {
      financial: {
        dayBookReport: {
          data?: {
            closingAmount?: string | null;
            openingBalance?: string | null;
            totalAmount?: string | null;
            totalPayment?: string | null;
            totalReceipts?: string | null;
            payments?: Array<{
              accountHead?: string | null;
              amount?: string | null;
              entries?: Array<{
                particular?: string | null;
                ledger?: string | null;
                voucherNo?: string | null;
                amount?: string | null;
              } | null> | null;
            } | null> | null;
            receipts?: Array<{
              accountHead?: string | null;
              amount?: string | null;
              entries?: Array<{
                particular?: string | null;
                ledger?: string | null;
                voucherNo?: string | null;
                amount?: string | null;
              } | null> | null;
            } | null> | null;
          } | null;
        };
      };
    };
  };
};

export type GetChequeBookRequestsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<RequestFilter>;
}>;

export type GetChequeBookRequestsQuery = {
  requests: {
    list?: {
      chequeBookRequest?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id: string;
            memberId: string;
            memberCode?: string | null;
            memberName: Record<'local' | 'en' | 'np', string>;
            memberPhoneNumber: string;
            memberAge?: number | null;
            memberGender?: string | null;
            memberProfilePicUrl?: string | null;
            accountNumber: string;
            accountType: string;
            approvalStatus: RequestStatus;
            requestedDate: string;
            branchId?: string | null;
            branchName?: string | null;
            numberOfLeaves?: number | null;
            pickUpMethod?: ChequePickUpMethod | null;
            agentName?: string | null;
            remarks?: string | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetWithdrawViaCollectorQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<RequestFilter>;
}>;

export type GetWithdrawViaCollectorQuery = {
  requests: {
    list?: {
      withdrawViaCollector?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id: string;
            memberId: string;
            memberCode?: string | null;
            memberName: Record<'local' | 'en' | 'np', string>;
            memberPhoneNumber: string;
            accountNumber: string;
            accountType: string;
            approvalStatus: RequestStatus;
            requestedDate: string;
            collectorName: string;
            amount: string;
            remarks?: string | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetLoanRequestsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<RequestFilter>;
}>;

export type GetLoanRequestsQuery = {
  requests: {
    list?: {
      loanRequest?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id: string;
            memberId: string;
            memberCode?: string | null;
            memberName: Record<'local' | 'en' | 'np', string>;
            memberPhoneNumber: string;
            approvalStatus: RequestStatus;
            loanAmount: string;
            lastModifiedDate: string;
            purpose?: string | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetBlockChequeListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<RequestFilter>;
}>;

export type GetBlockChequeListQuery = {
  requests: {
    list?: {
      blockCheque?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id: string;
            memberId: string;
            memberCode?: string | null;
            memberName: Record<'local' | 'en' | 'np', string>;
            memberPhoneNumber: string;
            accountNumber: string;
            accountType: string;
            approvalStatus: RequestStatus;
            requestedDate: string;
            reason?: string | null;
            chequeNumber: string;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetMemberRequestListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<RequestFilter>;
}>;

export type GetMemberRequestListQuery = {
  requests: {
    list?: {
      membershipRequest?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id?: string | null;
            dateOfBirth?: string | null;
            email?: string | null;
            firstName?: string | null;
            gender?: string | null;
            lastName?: string | null;
            middleName?: string | null;
            mobileNumber?: string | null;
            phoneNumber?: string | null;
            requestedDate?: Record<'local' | 'en' | 'np', string> | null;
            status?: RequestStatus | null;
            permanentAddress?: AddressFragment | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetGlobalSearchQueryVariables = Exact<{
  filter?: InputMaybe<SearchFilterData>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetGlobalSearchQuery = {
  search: {
    globalPages: {
      data?: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            fullCode?: string | null;
            hasParam?: boolean | null;
            iconType?: GlobalPagesIconType | null;
            page?: string | null;
            url?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    };
  };
};

export type GetAlternativeFeeAndChargesQueryVariables = Exact<{ [key: string]: never }>;

export type GetAlternativeFeeAndChargesQuery = {
  settings: {
    general?: {
      alternativeChannel?: {
        feesAndCharges?: {
          data?: Array<{
            id?: string | null;
            serviceType?: AlternativeChannelServiceType | null;
            ledgerId?: string | null;
            amount?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetActivatedServiceQueryVariables = Exact<{
  memberId: Scalars['String'];
}>;

export type GetActivatedServiceQuery = {
  alternativeChannel: {
    memberActivations?: {
      eBanking?: boolean | null;
      mobileBanking?: boolean | null;
      smsBanking?: boolean | null;
    } | null;
  };
};

export type GetAlternativeChannelListQueryVariables = Exact<{
  filter?: InputMaybe<AlternativeChannelFilter>;
  paginate?: InputMaybe<Pagination>;
}>;

export type GetAlternativeChannelListQuery = {
  alternativeChannel: {
    list?: {
      totalCount: number;
      pageInfo?: PaginationFragment | null;
      edges?: Array<{
        cursor: string;
        data?: {
          id?: string | null;
          name?: Record<'local' | 'en' | 'np', string> | null;
          memberId?: string | null;
          coopConnection?: boolean | null;
          lastActive?: string | null;
          phoneNumber?: string | null;
          serviceStatus?: AlternativeChannelStatus | null;
          serviceType?: AlternativeChannelServiceType | null;
        } | null;
      } | null> | null;
    } | null;
  };
};

export type GetAcFeeCoaQueryVariables = Exact<{ [key: string]: never }>;

export type GetAcFeeCoaQuery = {
  settings: {
    chartsOfAccount?: {
      accountsUnder?: {
        data?: Array<{
          id: string;
          accountCode: string;
          name: Record<'local' | 'en' | 'np', string>;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAuditLogListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAuditLogListQuery = {
  auditLog: {
    humanize?:
      | {
          __typename: 'AuditLogHumanizeResult';
          data?: Array<{
            timestamp?: string | null;
            narration?: string | null;
            extraData?: Array<string | null> | null;
          } | null> | null;
        }
      | { __typename: 'RawAuditLog' }
      | null;
  };
};

export type GetBranchListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<BranchSearchFilter>;
}>;

export type GetBranchListQuery = {
  settings: {
    general?: {
      branch?: {
        list?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            node?: {
              id: string;
              branchCode?: string | null;
              name?: string | null;
              category?: BranchCategory | null;
              estDate?: string | null;
              managerName?: string | null;
              contactNumber?: string | null;
              email?: string | null;
              plTransferId?: string | null;
              tdsTransaferId?: string | null;
              branchStatus?: boolean | null;
              address?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              location?: { longitude?: number | null; latitude?: number | null } | null;
              abbsTransaction?: {
                abbsStatus?: boolean | null;
                receivableAccountId?: string | null;
                payableAccountId?: string | null;
              } | null;
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetBranchEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetBranchEditDataQuery = {
  settings: {
    general?: {
      branch?: {
        formState?: {
          data?: {
            branchCode?: string | null;
            name?: string | null;
            serviceCenterPhone?: string | null;
            category?: BranchCategory | null;
            estDate?: Record<'local' | 'en' | 'np', string> | null;
            managerName?: string | null;
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: string | null;
            phoneNumber?: string | null;
            email?: string | null;
            abbsStatus?: boolean | null;
            receivableAccountId?: string | null;
            payableAccountId?: string | null;
            plTransferId?: string | null;
            tdsTransaferId?: string | null;
            branchStatus?: boolean | null;
            location?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoaListQueryVariables = Exact<{
  filter: ChartsOfAccountFilter;
}>;

export type GetCoaListQuery = {
  settings: {
    general?: {
      chartsOfAccount?: {
        accounts: {
          data?: Array<{
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            under?: string | null;
            accountClass: string;
            accountCode: string;
            currency: string;
            accountType: CoaTypesOfAccount;
            openingBalance: number;
          }> | null;
        };
      } | null;
    } | null;
  };
};

export type GetCoaFullViewQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoaFullViewQuery = {
  settings: {
    chartsOfAccount?: {
      fullView: {
        data?: Array<{
          id: string;
          name: Record<'local' | 'en' | 'np', string>;
          under?: string | null;
          accountType: CoaTypesOfAccount;
          accountClass: string;
          accountCode: string;
          category?: CoaCategory | null;
          allowedBalance?: CoaTypeOfTransaction | null;
          transactionAllowed?: CoaTypeOfTransaction | null;
        } | null> | null;
      };
    } | null;
  };
};

export type SearchCoaQueryVariables = Exact<{
  coaName: Scalars['String'];
}>;

export type SearchCoaQuery = {
  settings: {
    general?: {
      chartsOfAccount?: {
        search?: {
          data?: Array<{
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            accountCode: string;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoaAccountsUnderListQueryVariables = Exact<{
  accountCode?: InputMaybe<Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>;
}>;

export type GetCoaAccountsUnderListQuery = {
  settings: {
    chartsOfAccount?: {
      accountsUnder?: {
        data?: Array<{
          id: string;
          accountCode: string;
          name: Record<'local' | 'en' | 'np', string>;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCoaAccountsUnderLeafListQueryVariables = Exact<{
  parentId: Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>;
  currentBranch?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCoaAccountsUnderLeafListQuery = {
  settings: {
    chartsOfAccount?: {
      accountsUnderLeaf?: Array<{ accountId?: string | null; name?: string | null } | null> | null;
    } | null;
  };
};

export type GetCoaAccountListQueryVariables = Exact<{
  branchId?: InputMaybe<Scalars['String']>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetCoaAccountListQuery = {
  settings: {
    chartsOfAccount?: {
      coaAccountList?: {
        edges?: Array<{
          node?: {
            accountCode?: string | null;
            accountName?: Record<'local' | 'en' | 'np', string> | null;
            accountClass?: string | null;
            parentGroup?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type ListCbsShareCodesQueryVariables = Exact<{ [key: string]: never }>;

export type ListCbsShareCodesQuery = {
  settings: {
    general?: {
      codes?: {
        cbs?: {
          allCbsCodes?: {
            data?: {
              share?: Array<{
                id?: string | null;
                codeType?: CbsCodeType | null;
                prefix?: string | null;
                noOfDigit?: number | null;
                initialNo?: number | null;
              } | null> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ListCbsTransfersCodesQueryVariables = Exact<{ [key: string]: never }>;

export type ListCbsTransfersCodesQuery = {
  settings: {
    general?: {
      codes?: {
        cbs?: {
          allCbsCodes?: {
            data?: {
              transfers?: Array<{
                id?: string | null;
                codeType?: CbsCodeType | null;
                prefix?: string | null;
                noOfDigit?: number | null;
                initialNo?: number | null;
              } | null> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ListCbsWithdrawSlipCodesQueryVariables = Exact<{ [key: string]: never }>;

export type ListCbsWithdrawSlipCodesQuery = {
  settings: {
    general?: {
      codes?: {
        cbs?: {
          allCbsCodes?: {
            data?: {
              withdrawSlip?: Array<{
                id?: string | null;
                codeType?: CbsCodeType | null;
                prefix?: string | null;
                noOfDigit?: number | null;
                initialNo?: number | null;
              } | null> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<LoanProductSearchFilter>;
}>;

export type GetLoanProductListQuery = {
  settings: {
    general?: {
      loanProducts?: {
        list?: {
          totalCount: number;
          pageInfo: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          };
          edges: Array<{
            node: {
              id: string;
              objState: ObjState;
              createdDate: string;
              productName: string;
              productCodeString?: string | null;
              productType: string;
              productSubType: string;
              createdBy: { id: string; name: string; username: string; userType: UserType };
              modifiedBy: { id: string; name: string; username: string; userType: UserType };
              productCode?: { prefix: string; initialNo: string } | null;
              interest?: {
                minRate?: number | null;
                maxRate?: number | null;
                defaultRate: number;
                ceoAuthority?: number | null;
                boardAuthority?: number | null;
              } | null;
            };
          }>;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductEditDataQuery = {
  settings: {
    general?: {
      loanProducts?: {
        formState?: {
          data?: {
            id: string;
            objState: ObjState;
            createdAt: string;
            modifiedAt: string;
            productName: string;
            productType: string;
            productSubType: string;
            productNature: NatureOfLoanProduct;
            description?: string | null;
            typeOfMember: Array<KymMemberTypesEnum | null>;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            minimumLoanAmount?: any | null;
            maxLoanAmount?: any | null;
            repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
            allowPartialInstallment?: boolean | null;
            installmentFrequency?: LoanProductInstallment | null;
            isMonthlyInstallmentCompulsory?: boolean | null;
            interestMethod?: LoanInterestMethod | null;
            isPenaltyApplicable?: boolean | null;
            penaltyType?: PenaltyType | null;
            penaltyDayAfterInstallmentDate?: number | null;
            penaltyRate?: number | null;
            penaltyAmount?: any | null;
            isRebateApplicable?: boolean | null;
            principalMaxGraceNumber?: number | null;
            interestMaxGraceNumber?: number | null;
            updateInterest?: boolean | null;
            waiveInterest?: boolean | null;
            postingFrequency?: LoanProductInstallment | null;
            isInsuranceApplicable?: boolean | null;
            isStaffProduct?: boolean | null;
            supportMultipleAccounts?: boolean | null;
            loanScheduleChangeOverride?: boolean | null;
            requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
            isCollateralRequired?: boolean | null;
            allowGurantee?: boolean | null;
            maxPercentOfGurantee?: number | null;
            collateralTypes?: Array<string | null> | null;
            isPrematurePenaltyApplicable?: boolean | null;
            productCode?: { prefix: string; initialNo: string; noOfDigits?: number | null } | null;
            rebate?: {
              dayBeforeInstallmentDate?: number | null;
              rebateRate?: number | null;
              rebateAmount?: any | null;
              rebateLedgerMapping?: string | null;
            } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate: number;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
            } | null;
            loanProcessingCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            insuranceType?: {
              type?: string | null;
              amount?: any | null;
              rate?: number | null;
            } | null;
            ledgerMapping?: {
              principal?: string | null;
              interestAccuredDaily?: string | null;
              interestIncome?: string | null;
            } | null;
            collateralValue?: Array<{
              type?: string | null;
              minFMV?: number | null;
              maxFMV?: number | null;
              minDV?: number | null;
              maxDV?: number | null;
              minValue?: number | null;
              maxValue?: number | null;
            } | null> | null;
            prematurePenaltySetup?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductDetailQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getProductDetail?: {
          data?: {
            id: string;
            noOfaccount?: number | null;
            noOfMember?: number | null;
            objState: ObjState;
            createdAt: string;
            modifiedAt: string;
            productName: string;
            productType: string;
            productSubType: string;
            productNature: NatureOfLoanProduct;
            description?: string | null;
            typeOfMember: Array<KymMemberTypesEnum | null>;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            minimumLoanAmount?: any | null;
            maxLoanAmount?: any | null;
            repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
            allowPartialInstallment?: boolean | null;
            installmentFrequency?: LoanProductInstallment | null;
            isMonthlyInstallmentCompulsory?: boolean | null;
            interestMethod?: LoanInterestMethod | null;
            isPenaltyApplicable?: boolean | null;
            isRebateApplicable?: boolean | null;
            principalMaxGraceNumber?: number | null;
            interestMaxGraceNumber?: number | null;
            updateInterest?: boolean | null;
            waiveInterest?: boolean | null;
            postingFrequency?: LoanProductInstallment | null;
            isInsuranceApplicable?: boolean | null;
            isStaffProduct?: boolean | null;
            supportMultipleAccounts?: boolean | null;
            loanScheduleChangeOverride?: boolean | null;
            requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
            isCollateralRequired?: boolean | null;
            allowGurantee?: boolean | null;
            maxPercentOfGurantee?: number | null;
            collateralTypes?: Array<string | null> | null;
            isPrematurePenaltyApplicable?: boolean | null;
            productCode?: { prefix: string; initialNo: string; noOfDigits?: number | null } | null;
            penalty?: {
              penaltyType?: PenaltyType | null;
              penaltyDayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
            } | null;
            rebate?: {
              dayBeforeInstallmentDate?: number | null;
              rebateRate?: number | null;
              rebateAmount?: any | null;
              rebateLedgerMapping?: string | null;
              noOfInstallment?: number | null;
            } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate: number;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
            } | null;
            loanProcessingCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            insuranceType?: {
              type?: string | null;
              amount?: any | null;
              rate?: number | null;
            } | null;
            ledgerMapping?: {
              principal?: string | null;
              interestAccuredDaily?: string | null;
              interestIncome?: string | null;
            } | null;
            collateralValue?: Array<{
              type?: string | null;
              minFMV?: number | null;
              maxFMV?: number | null;
              minDV?: number | null;
              maxDV?: number | null;
              minValue?: number | null;
              maxValue?: number | null;
            } | null> | null;
            prematurePenaltySetup?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanAccountListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<LoanAccountSearchFilter>;
}>;

export type GetLoanAccountListQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getLoanAccountlist?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            node?: {
              id: string;
              objState: LoanObjState;
              approvedDate?: string | null;
              productType: string;
              LoanAccountName?: string | null;
              appliedLoanAmount: string;
              member: { code: string; name?: Record<'local' | 'en' | 'np', string> | null };
              productSubType: {
                id?: string | null;
                productSubType?: string | null;
                productTypeID?: string | null;
              };
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetLoanProductCriteriaQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getProductCriteria?: {
          data?: {
            gender?: Array<string | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            ethnicity?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            maritalStatus?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            occupation?: Array<string | null> | null;
            institutionType?: Array<string | null> | null;
            cooperativeUnion?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanGeneralSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanGeneralSettingsQuery = {
  settings: {
    general?: {
      loan?: {
        general?: {
          emi?: boolean | null;
          epi?: boolean | null;
          flat?: boolean | null;
          collateralList?: Array<{
            id?: string | null;
            name?: string | null;
            enabled?: boolean | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductSettingsQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductSubTypeQueryVariables = Exact<{
  productTypeId?: InputMaybe<Scalars['String']>;
}>;

export type GetLoanProductSubTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
            productTypeID?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanInsuranceSchemeQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanInsuranceSchemeQuery = {
  settings: {
    general?: {
      loan?: {
        insuranceSchemes?: Array<{
          id: string;
          insuranceCompany?: string | null;
          insurancePremiumPercent?: number | null;
          maxAmount?: string | null;
          maxPercent?: number | null;
          minAmount?: string | null;
          paymentFrequency?: Frequency | null;
          minPercent?: number | null;
          paymentType?: LoanInsurancePaymentType | null;
          schemeName?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductTypeQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
            productTypeID?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetGeneralMemberSettingsDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetGeneralMemberSettingsDataQuery = {
  settings: {
    general?: {
      KYM?: {
        general?: {
          generalMember?: {
            record?: {
              memberType?: {
                individual?: boolean | null;
                institution?: boolean | null;
                cooperative?: boolean | null;
                cooperativeUnion?: boolean | null;
              } | null;
              risk?: {
                generalRisk?: number | null;
                mediumRisk?: number | null;
                highRisk?: number | null;
              } | null;
              charge?: Array<{
                memberType: KymMemberTypesEnum;
                ledgerId: string;
                charge: number;
              } | null> | null;
              memberCode?: {
                prefix?: string | null;
                noOfDigits?: number | null;
                initialNo?: string | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreDefinedFieldsQueryVariables = Exact<{
  filter: PredefinedElementFilter;
}>;

export type GetPreDefinedFieldsQuery = {
  settings: {
    form?: {
      predefined: {
        details: {
          data?:
            | {
                __typename: 'FormField';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                fieldType: FormFieldType;
                hasOtherField: boolean;
                order: number;
                dependsOn?: Array<string | null> | null;
                isDefault: boolean;
                options?: Array<{
                  order: number;
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  isDefault: boolean;
                }> | null;
              }
            | {
                __typename: 'FormSection';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                isDefault: boolean;
                sectionType: FormSectionType;
                maxSize?: number | null;
                fields?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  fieldType: FormFieldType;
                  isDefault: boolean;
                }> | null;
                subSections?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  search_term?: FormSectionSearchTerm | null;
                }> | null;
              }
            | null;
        };
      };
    } | null;
  };
};

export type GetCustomFieldsQueryVariables = Exact<{
  kymType: FormCategory;
}>;

export type GetCustomFieldsQuery = {
  settings: {
    form?: {
      custom: {
        list: {
          data?: Array<
            | {
                __typename: 'FormField';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                fieldType: FormFieldType;
                hasOtherField: boolean;
                order: number;
                dependsOn?: Array<string | null> | null;
                isDefault: boolean;
                options?: Array<{
                  order: number;
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  isDefault: boolean;
                }> | null;
              }
            | {
                __typename: 'FormSection';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                isDefault: boolean;
                sectionType: FormSectionType;
                maxSize?: number | null;
                fields?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  fieldType: FormFieldType;
                  isDefault: boolean;
                }> | null;
                subSections?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  search_term?: FormSectionSearchTerm | null;
                }> | null;
              }
            | null
          > | null;
        };
      };
    } | null;
  };
};

export type GetDeclarationQueryVariables = Exact<{
  kymType: DeclarationFor;
}>;

export type GetDeclarationQuery = {
  settings: {
    declaration: {
      get?: { data?: { content: Record<'local' | 'en' | 'np', string> } | null } | null;
    };
  };
};

export type GetDepositSettingsIroQueryVariables = Exact<{ [key: string]: never }>;

export type GetDepositSettingsIroQuery = {
  settings: {
    general?: {
      deposit?: {
        iroFormState?: {
          data?: {
            iroName?: string | null;
            iroAddress?: string | null;
            iroCode?: string | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositSettingsTdsQueryVariables = Exact<{ [key: string]: never }>;

export type GetDepositSettingsTdsQuery = {
  settings: {
    general?: {
      deposit?: {
        tdsFormState?: {
          data?: {
            individual?: number | null;
            institution?: number | null;
            cooperative?: number | null;
            coopUnion?: number | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositProductSettingsListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<DepositProductSearchFilter>;
}>;

export type GetDepositProductSettingsListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        list?: {
          totalCount: number;
          pageInfo: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          };
          edges: Array<{
            node: {
              id: string;
              objState: ObjState;
              productCode: string;
              productName: string;
              nature: NatureOfDepositProduct;
              interest?: number | null;
              createdDate?: string | null;
              typeOfMember?: Array<KymMemberTypesEnum | null> | null;
              createdAt: string;
              modifiedAt: string;
              createdBy: { id: string; name: string; username: string; userType: UserType };
              modifiedBy: { id: string; name: string; username: string; userType: UserType };
            };
          }>;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositProductSettingsEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetDepositProductSettingsEditDataQuery = {
  settings: {
    general?: {
      depositProduct?: {
        formState?: {
          data?: {
            productName?: string | null;
            nature?: NatureOfDepositProduct | null;
            description?: string | null;
            typeOfMember?: Array<KymMemberTypesEnum | null> | null;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            transactionAllowed?: DepositFrequency | null;
            noOftransactionAllowed?: number | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isForMinors?: boolean | null;
            depositFrequency?: Frequency | null;
            penalty?: boolean | null;
            rebate?: boolean | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            ladderRate?: boolean | null;
            postingFrequency?: DepositFrequency | null;
            maxPostingFreqDifference?: number | null;
            accountType?: DefaultAccountType | null;
            isMandatorySaving?: boolean | null;
            autoOpen?: boolean | null;
            allowLoan?: boolean | null;
            percentageOfDeposit?: number | null;
            alternativeChannels?: boolean | null;
            atmFacility?: boolean | null;
            chequeIssue?: boolean | null;
            supportMultiple?: boolean | null;
            staffProduct?: boolean | null;
            withdrawRestricted?: boolean | null;
            specifyWithdrawRestriction?: string | null;
            wealthBuildingProduct?: boolean | null;
            individualDocuments?: Array<IndividualRequiredDocument | null> | null;
            institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
            isPrematurePenaltyApplicable?: boolean | null;
            productCode: { prefix: string; initialNo: string; noOfDigits?: number | null };
            depositAmount?: { minAmount?: any | null; maxAmount?: any | null } | null;
            withdrawAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            fixedDepositAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            penaltyData?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebateData?: {
              dayBeforeInstallmentDate?: number | null;
              noOfInstallment?: number | null;
              rebateAmount?: any | null;
              rebateRate?: number | null;
              rebateLedgerMapping?: string | null;
            } | null;
            balanceLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate?: number | null;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              additionalRate?: number | null;
            } | null;
            ladderRateData?: Array<{ type: string; amount: any; rate: number } | null> | null;
            serviceCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            accountCloseCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            chequeCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            atmCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            alternativeChannelCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            dormantSetup?: Array<{
              duration?: DormantDuration | null;
              condition?: DormantCondition | null;
            } | null> | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingsProductDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSavingsProductDetailQuery = {
  settings: {
    general?: {
      depositProduct?: {
        depositProductDetail?: {
          data?: {
            id?: string | null;
            noOfAccounts?: number | null;
            noOfMembers?: number | null;
            objState?: ObjState | null;
            supportMultiple?: boolean | null;
            productName?: string | null;
            nature?: NatureOfDepositProduct | null;
            description?: string | null;
            typeOfMember?: Array<KymMemberTypesEnum | null> | null;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            transactionAllowed?: DepositFrequency | null;
            noOftransactionAllowed?: number | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isForMinors?: boolean | null;
            depositFrequency?: Frequency | null;
            penalty?: boolean | null;
            rebate?: boolean | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            ladderRate?: boolean | null;
            postingFrequency?: DepositFrequency | null;
            maxPostingFreqDifference?: number | null;
            accountType?: DefaultAccountType | null;
            isMandatorySaving?: boolean | null;
            autoOpen?: boolean | null;
            allowLoan?: boolean | null;
            percentageOfDeposit?: number | null;
            alternativeChannels?: boolean | null;
            atmFacility?: boolean | null;
            chequeIssue?: boolean | null;
            staffProduct?: boolean | null;
            withdrawRestricted?: boolean | null;
            specifyWithdrawRestriction?: string | null;
            wealthBuildingProduct?: boolean | null;
            individualDocuments?: Array<IndividualRequiredDocument | null> | null;
            institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
            isPrematurePenaltyApplicable?: boolean | null;
            productCode: { prefix: string; initialNo: string; noOfDigits?: number | null };
            depositAmount?: { minAmount?: any | null; maxAmount?: any | null } | null;
            withdrawAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            fixedDepositAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            penaltyData?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebateData?: {
              dayBeforeInstallmentDate?: number | null;
              noOfInstallment?: number | null;
              rebateAmount?: any | null;
              rebateRate?: number | null;
              rebateLedgerMapping?: string | null;
            } | null;
            balanceLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate?: number | null;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              additionalRate?: number | null;
            } | null;
            ladderRateData?: Array<{ type: string; amount: any; rate: number } | null> | null;
            serviceCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            accountCloseCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            chequeCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            atmCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            alternativeChannelCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            dormantSetup?: Array<{
              duration?: DormantDuration | null;
              condition?: DormantCondition | null;
            } | null> | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            savingCharges?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingsProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetSavingsProductCriteriaQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductCriteria?: {
          data?: {
            gender?: Array<string | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            ethnicity?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            maritalStatus?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            occupation?: Array<string | null> | null;
            institutionType?: Array<string | null> | null;
            cooperativeUnion?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingsAccountListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<DepositLoanAccountSearchFilter>;
}>;

export type GetSavingsAccountListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getAccountlist?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            node?: {
              id: string;
              objState: ObjState;
              closedAt?: string | null;
              accountName?: string | null;
              balance?: string | null;
              interestAccured?: string | null;
              interestTax?: string | null;
              prematurePenalty?: string | null;
              lastTransactionDate?: string | null;
              accountOpenedDate?: string | null;
              installmentAmount?: string | null;
              accountExpiryDate?: string | null;
              overDrawnBalance?: string | null;
              guaranteedAmount?: string | null;
              member?: {
                code: string;
                type: KymMemberTypesEnum;
                name?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              product: { productCode: string; productName: string; nature: NatureOfDepositProduct };
              dues?: {
                fine?: string | null;
                totalDue?: string | null;
                dueInstallments?: number | null;
              } | null;
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsOptionsFieldsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
  category: FormCategory;
}>;

export type GetSettingsOptionsFieldsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetSettingsShareBonusDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareBonusDataQuery = {
  settings: {
    general?: {
      share?: {
        bonus?: {
          taxPayer?: TaxPayerOptions | null;
          taxRate?: number | null;
          accountMapping?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareDividendDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareDividendDataQuery = {
  settings: {
    general?: {
      share?: {
        dividend?: {
          distributionCondition?: DividendDistributionCondition | null;
          dividendTransferTreatment?: DividendTransferTreatment | null;
          accountForFractionalDividends?: string | null;
          accountForShareDividends?: string | null;
          organizationFundForDividends?: string | null;
          dividendRate?: {
            quarterly?: {
              firstQuarter?: number | null;
              secondQuarter?: number | null;
              thirdQuarter?: number | null;
              fourthQuarter?: number | null;
            } | null;
            monthly?: {
              firstMonth?: number | null;
              secondMonth?: number | null;
              thirdMonth?: number | null;
              fourthMonth?: number | null;
              fifthMonth?: number | null;
              sixthMonth?: number | null;
              seventhMonth?: number | null;
              eightMonth?: number | null;
              ninthMonth?: number | null;
              tenthMonth?: number | null;
              eleventhMonth?: number | null;
              twelfthMonth?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareIssueChargesDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareIssueChargesDataQuery = {
  settings: {
    general?: {
      share?: {
        shareIssueCharges?: {
          shareCertificate?: Array<{
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
          other?: Array<{
            name?: string | null;
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLedgerMapingShareQueryVariables = Exact<{ [key: string]: never }>;

export type GetLedgerMapingShareQuery = {
  settings: {
    general?: {
      chartsOfAccount?: {
        accountsUnder?: {
          data?: Array<{
            id: string;
            accountCode: string;
            name: Record<'local' | 'en' | 'np', string>;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareReturnChargesDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareReturnChargesDataQuery = {
  settings: {
    general?: {
      share?: {
        shareReturnCharges?: {
          other?: Array<{
            name?: string | null;
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareGeneralDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareGeneralDataQuery = {
  settings: {
    general?: {
      share?: {
        general?: {
          typeOfShare?: TypeOfShare | null;
          multiplicityFactor?: number | null;
          minimumQuantityOfShare?: number | null;
          maximumQuantityOfShare?: number | null;
          paidUpShareRate?: number | null;
          shareIssueAuthority?: Array<BranchCategory | null> | null;
          typeOfShareKitta?: TypeOfShare | null;
          noOfAuthorisedPaidUpShare?: number | null;
          noOfIssuedShare?: number | null;
          startNumber?: number | null;
          endNumber?: number | null;
          incrementor?: number | null;
          noOfDigits?: number | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareTransferDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareTransferDataQuery = {
  settings: {
    general?: {
      share?: {
        transfer?: {
          type?: ShareTransferType | null;
          accountForShareFund?: string | null;
          mappedShareLedger?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsUserListDataQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<MyraUserSearchFilter>;
}>;

export type GetSettingsUserListDataQuery = {
  settings: {
    myraUser?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            objState: ObjState;
            createdAt: string;
            modifiedAt: string;
            name?: string | null;
            email?: string | null;
            contactNo?: string | null;
            gender?: UserGender | null;
            dob?: string | null;
            role?: Roles | null;
            profilePicUrl?: string | null;
            branch?: { id: string } | null;
          } | null;
        }> | null;
        pageInfo: PaginationFragment;
      } | null;
    } | null;
  };
};

export type GetSettingsUserEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSettingsUserEditDataQuery = {
  settings: {
    myraUser?: {
      formState?: {
        data?: {
          name?: string | null;
          email?: string | null;
          contactNo?: string | null;
          gender?: UserGender | null;
          dob?: Record<'local' | 'en' | 'np', string> | null;
          empCode?: string | null;
          isCoreEmployee?: boolean | null;
          role?: Roles | null;
          branch?: string | null;
          identificationSelection?: Array<string | null> | null;
          isTempAsPermanentAddressSame?: boolean | null;
          landlordName?: string | null;
          landlordContact?: string | null;
          identificationDetails?: Array<{
            id?: string | null;
            idNo?: string | null;
            idType?: string | null;
            place?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          profilePicture?: Array<{ identifier?: string | null; url?: string | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetValuatorQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetValuatorQuery = {
  settings: {
    general?: {
      valuator?: {
        formState?: {
          data?: {
            valuatorName?: string | null;
            valuatorType?: ValuatorType | null;
            valuatorId?: string | null;
            academicQualification?: string | null;
            valuationLicenseNo?: string | null;
            renewalDate?: Record<'local' | 'en' | 'np', string> | null;
            contractDate?: Record<'local' | 'en' | 'np', string> | null;
            insurancePremium?: number | null;
            mobileNo?: string | null;
            phoneNo?: string | null;
            email?: string | null;
            documents?: Array<string | null> | null;
            address?: {
              localGovernmentId?: number | null;
              districtId?: number | null;
              provinceId?: number | null;
              houseNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: number | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetValuatorListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
}>;

export type GetValuatorListQuery = {
  settings: {
    general?: {
      valuator?: {
        list?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            cursor: string;
            node?: {
              id: string;
              valuatorName?: string | null;
              valuatorType?: ValuatorType | null;
              phoneNo?: string | null;
              contractDate?: string | null;
              address?: {
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                state?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
              } | null;
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetChartOfAccountsQueryVariables = Exact<{ [key: string]: never }>;

export type GetChartOfAccountsQuery = {
  settings: {
    general?: {
      chartsOfAccount?: { class?: { data: Array<{ id: string; name: string }> } | null } | null;
    } | null;
  };
};

export type GetShareBalanceListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<ShareBalanceFilter>;
}>;

export type GetShareBalanceListQuery = {
  share: {
    balance?: {
      totalCount: number;
      pageInfo: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      };
      edges: Array<{
        node: {
          count: number;
          amount: number;
          member: {
            id: string;
            code: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePic?: string | null;
            profilePicUrl?: string | null;
          };
        };
      }>;
    } | null;
  };
};

export type GetShareRegisterListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<ShareRegisterFilter>;
}>;

export type GetShareRegisterListQuery = {
  share: {
    register?: {
      totalCount: number;
      edges: Array<{
        cursor: string;
        node: {
          id?: string | null;
          transactionDate?: Record<'local' | 'en' | 'np', string> | null;
          transactionDirection: Share_Transaction_Direction;
          balance?: number | null;
          startNumber: number;
          shareAmount?: string | null;
          endNumber: number;
          credit?: number | null;
          debit?: number | null;
          member?: {
            id: string;
            code: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePic?: string | null;
            profilePicUrl?: string | null;
          } | null;
        };
      }>;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetShareHistoryQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetShareHistoryQuery = {
  share: {
    history?: {
      history?: Array<{
        id?: string | null;
        status?: Share_Status | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        transactionDirection: Share_Transaction_Direction;
        credit?: number | null;
        debit?: number | null;
        startNumber: number;
        endNumber: number;
        balance?: number | null;
        shareAmount?: string | null;
        totalAmount?: number | null;
        paymentMode?: SharePaymentMode | null;
        bankId?: string | null;
        voucherNumber?: string | null;
        accountId?: string | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
        } | null;
        extraFee?: Array<{ name: string; value: number } | null> | null;
      } | null> | null;
      balance?: {
        count: number;
        amount: number;
        member: { id: string; name?: Record<'local' | 'en' | 'np', string> | null };
      } | null;
    } | null;
  };
};

export type GetShareChargesQueryVariables = Exact<{
  transactionType: Share_Transaction_Direction;
  shareCount: Scalars['Int'];
}>;

export type GetShareChargesQuery = {
  share: {
    charges?: Array<{
      id?: string | null;
      name?: string | null;
      charge?: string | null;
    } | null> | null;
  };
};

export type GetShareDetailQueryVariables = Exact<{
  transactionID: Scalars['ID'];
}>;

export type GetShareDetailQuery = {
  share: {
    shareDetail?: {
      data?: {
        id: string;
        totalShareCount?: number | null;
        totalShareAmount?: string | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        type?: string | null;
        noOfShare?: number | null;
        amount?: string | null;
        total?: string | null;
        status?: string | null;
        transactionBranch?: string | null;
        teller?: string | null;
        totalCredit?: string | null;
        totalDebit?: string | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          type: KymMemberTypesEnum;
          profilePicUrl?: string | null;
        } | null;
        fromTo?: { start?: number | null; end?: number | null } | null;
        charges?: Array<{ name?: string | null; value?: string | null } | null> | null;
        paymentDetail?: {
          paymentMode?: SharePaymentMode | null;
          amount?: string | null;
          sourceOfFund?: string | null;
        } | null;
        glTransactions?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetDepositListDataQueryVariables = Exact<{
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetDepositListDataQuery = {
  transaction: {
    listDeposit: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          state: TransactionState;
          paymentMode?: string | null;
          processedBy?: string | null;
          date?: string | null;
          agentName?: string | null;
          agentId?: string | null;
          profilePicUrl?: string | null;
          agentPicUrl?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetWithdrawListDataQueryVariables = Exact<{
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetWithdrawListDataQuery = {
  transaction: {
    listWithdraw: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          state: TransactionState;
          paymentMode?: string | null;
          processedBy?: string | null;
          date?: string | null;
          profilePicUrl?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAccountTransferListDataQueryVariables = Exact<{
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountTransferListDataQuery = {
  transaction: {
    listTransfer: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          amount?: string | null;
          state: TransactionState;
          transferType: TransferType;
          date?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetEndOfDayDateDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetEndOfDayDateDataQuery = { transaction: { endOfDayDate: string } };

export type GetTellerTransactionListDataQueryVariables = Exact<{
  filter?: InputMaybe<TellerTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetTellerTransactionListDataQuery = {
  transaction: {
    listTellerTransaction: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          transferCode?: string | null;
          transferType: TellerTransferType;
          transferState: TellerActivityState;
          srcTeller?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          destTeller?: Record<'local' | 'en' | 'np', string> | null;
          date?: string | null;
          srcProfilePic?: string | null;
          destProfilePic?: string | null;
          srcProfilePicUrl?: string | null;
          destProfilePicUrl?: string | null;
          denomination?: Array<{
            value: CashValue;
            quantity: number;
            amount?: string | null;
          } | null> | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type TransactionDepositDetailQueryVariables = Exact<{
  transactionId: Scalars['ID'];
}>;

export type TransactionDepositDetailQuery = {
  transaction: {
    viewDeposit?: {
      data?: {
        id: string;
        transactionDate?: string | null;
        accountName?: string | null;
        voucherId?: string | null;
        amount?: string | null;
        fine?: string | null;
        rebate?: string | null;
        totalDepositedAmount?: string | null;
        status?: ObjState | null;
        paymentMode?: DepositPaymentType | null;
        sourceOfFund?: string | null;
        depositedBy?: DepositedBy | null;
        transactionBranch?: string | null;
        teller?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        member?: {
          id: string;
          code: string;
          objState: ObjState;
          type: KymMemberTypesEnum;
          name?: Record<'local' | 'en' | 'np', string> | null;
          contact?: string | null;
          profilePic?: string | null;
          profilePicUrl?: string | null;
        } | null;
        glTransaction?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type TransactionWithdrawDetailQueryVariables = Exact<{
  transactionId: Scalars['ID'];
}>;

export type TransactionWithdrawDetailQuery = {
  transaction: {
    viewWithdraw?: {
      data?: {
        id: string;
        transactionDate?: string | null;
        accountName?: string | null;
        chequeNo?: string | null;
        withdrawAmount?: string | null;
        withdrawWith?: WithdrawWith | null;
        fine?: string | null;
        totalWithdrawnAmount?: string | null;
        status?: ObjState | null;
        paymentMode?: WithdrawPaymentType | null;
        withdrawnBy?: WithdrawBy | null;
        marketRepId?: string | null;
        marketRepName?: string | null;
        transactionBranch?: string | null;
        teller?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          profilePic?: string | null;
          profilePicUrl?: string | null;
        } | null;
        glTransaction?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type TransactionAccountTransferDetailQueryVariables = Exact<{
  transactionId: Scalars['ID'];
}>;

export type TransactionAccountTransferDetailQuery = {
  transaction: {
    viewAccountTransfer?: {
      data?: {
        id: string;
        transactionDate?: string | null;
        transferAmount?: string | null;
        transferType?: TransferType | null;
        withdrawnBy?: string | null;
        withdrawnSlipNo?: string | null;
        transactionBranch?: string | null;
        objState?: ObjState | null;
        teller?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          profilePic?: string | null;
          profilePicUrl?: string | null;
        } | null;
        sourceAccount?: { id: string; accountName?: string | null } | null;
        destinationAccount?: { id: string; accountName?: string | null } | null;
        recipientMember?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        glTransaction?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type AgentTransactionDetailQueryVariables = Exact<{
  agentId: Scalars['ID'];
  date: Scalars['String'];
}>;

export type AgentTransactionDetailQuery = {
  transaction: {
    viewAgentList?: {
      data?: {
        transactionId: string;
        transactionDate?: string | null;
        status: string;
        totalAmount?: string | null;
        assignedMember?: Array<{
          member?: string | null;
          account?: string | null;
          amount?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAgentDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAgentDetailQuery = {
  transaction: {
    agentDetail?: {
      data?: {
        id?: string | null;
        name?: string | null;
        branch?: string | null;
        totalMembers?: number | null;
        profilePicUrl?: string | null;
      } | null;
    } | null;
  };
};

export type LoanRepaymentDetailQueryVariables = Exact<{
  paymentId: Scalars['ID'];
}>;

export type LoanRepaymentDetailQuery = {
  transaction: {
    viewLoanRepayment?: {
      data?: {
        repaymentId: string;
        loanSubType?: string | null;
        loanAccountId?: string | null;
        loanAccountName?: string | null;
        repaymentDate?: string | null;
        installmentNo?: string | null;
        installmentAmount?: string | null;
        fine?: string | null;
        totalRepaymentAmount?: string | null;
        objState: string;
        paymentMode?: string | null;
        transactionBranch?: string | null;
        teller?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          profilePicUrl?: string | null;
        } | null;
        installmentDetails?: Array<{
          installmentNo?: number | null;
          payment?: string | null;
          principalAmount?: string | null;
          interestAmount?: string | null;
        } | null> | null;
        glTransaction?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetEodStatusQueryVariables = Exact<{ [key: string]: never }>;

export type GetEodStatusQuery = {
  transaction: {
    eodStatus?: {
      interestBooking?: EodState | null;
      interestPosting?: EodState | null;
      transactionDate?: EodState | null;
      maturity?: EodState | null;
      dormancy?: EodState | null;
      cashInVault?: EodState | null;
    } | null;
  };
};

export type GetAllTransactionsListQueryVariables = Exact<{
  filter?: InputMaybe<AllTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAllTransactionsListQuery = {
  transaction: {
    listAllTransactions?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          transactionType: string;
          narration: string;
          amount: string;
          date: Record<'local' | 'en' | 'np', string>;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetPastSlipsListQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type GetPastSlipsListQuery = {
  withdrawSlip: {
    listPastSlips?: {
      data?: Array<{
        slipNumber: string;
        state: SlipState;
        date?: Record<'local' | 'en' | 'np', string> | null;
      } | null> | null;
    } | null;
  };
};

export type GetAvailableSlipsListQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type GetAvailableSlipsListQuery = {
  withdrawSlip: {
    listAvailableSlips?: {
      data?: Array<{
        slipNumber: string;
        state: SlipState;
        date?: Record<'local' | 'en' | 'np', string> | null;
      } | null> | null;
    } | null;
  };
};

export type GetAvailableRangeQueryVariables = Exact<{
  count: Scalars['Int'];
}>;

export type GetAvailableRangeQuery = {
  withdrawSlip: { getAvailableRange?: { range?: { from: string; to: string } | null } | null };
};

export const MutationErrorFragmentDoc = `
    fragment MutationError on MutationError {
  ... on BadRequestError {
    __typename
    badRequestErrorMessage: message
    code
  }
  ... on ServerError {
    __typename
    serverErrorMessage: message
    code
  }
  ... on AuthorizationError {
    __typename
    authorizationErrorMsg: message
    code
  }
  ... on ValidationError {
    __typename
    validationErrorMsg: message
    code
  }
  ... on NotFoundError {
    __typename
    notFoundErrorMsg: message
    code
  }
}
    `;
export const QueryErrorFragmentDoc = `
    fragment QueryError on QueryError {
  ... on BadRequestError {
    __typename
    badRequestErrorMessage: message
    code
  }
  ... on ServerError {
    __typename
    serverErrorMessage: message
    code
  }
  ... on AuthorizationError {
    __typename
    authorizationErrorMsg: message
    code
  }
  ... on NotFoundError {
    __typename
    notFoundErrorMsg: message
    code
  }
}
    `;
export const KymFieldDataFragmentDoc = `
    fragment KYMFieldData on KYMFieldData {
  id
  options {
    id
    value
  }
}
    `;
export const PaginationFragmentDoc = `
    fragment Pagination on PageInfo {
  startCursor
  endCursor
  hasNextPage
  hasPreviousPage
}
    `;
export const AddressFragmentDoc = `
    fragment Address on Address {
  houseNo
  coordinates {
    latitude
    longitude
  }
  district
  localGovernment
  locality
  state
  wardNo
}
    `;
export const LoanProductFragmentDoc = `
    fragment LoanProduct on LoanProduct {
  id
  objState
  createdAt
  modifiedAt
  createdDate
  productName
  productType
  productSubType
  productNature
  description
  productCode {
    prefix
    initialNo
  }
  productCodeString
  typeOfMember
  criteria
  minAge
  maxAge
  genderId
  maritalStatusId
  educationQualification
  ethnicity
  occupation
  foreignEmployment
  natureOfBusinessInstitution
  natureOFBusinessCoop
  cooperativeType
  tenureUnit
  isTenureApplicable
  minTenureUnitNumber
  maxTenureUnitNumber
  minimumLoanAmount
  maxLoanAmount
  interestMethod
  repaymentScheme
  allowPartialInstallment
  isMonthlyInstallmentCompulsory
  isPenaltyApplicable
  penaltyDayAfterInstallmentDate
  penaltyType
  penaltyRate
  penaltyAmount
  principalMaxGraceNumber
  interestMaxGraceNumber
  isRebateApplicable
  rebate {
    dayBeforeInstallmentDate
    rebateRate
    rebateAmount
    rebateLedgerMapping
  }
  interest {
    minRate
    maxRate
    defaultRate
    ceoAuthority
    boardAuthority
  }
  updateInterest
  waiveInterest
  postingFrequency
  loanProcessingCharge {
    serviceName
    ledgerName
    amount
  }
  isInsuranceApplicable
  insuranceType {
    type
    amount
    rate
  }
  ledgerMapping {
    principal
    interestAccuredDaily
    interestIncome
  }
  isStaffProduct
  supportMultipleAccounts
  loanScheduleChangeOverride
  allowGurantee
  maxPercentOfGurantee
  isCollateralRequired
  collateralTypes
  collateralValue {
    type
    name
    minFMV
    maxFMV
    minDV
    maxDV
    minValue
    maxValue
  }
  prematurePenaltySetup {
    penaltyDateType
    noOfDays
    penaltyLedgerMapping
    penaltyAmount
    penaltyRate
  }
  requiredDocuments
}
    `;
export const SetBankAccountsDocument = `
    mutation setBankAccounts($data: NewBankAccountInput) {
  accounting {
    bankAccounts {
      new(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBankAccountsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetBankAccountsMutation,
    TError,
    SetBankAccountsMutationVariables,
    TContext
  >
) =>
  useMutation<SetBankAccountsMutation, TError, SetBankAccountsMutationVariables, TContext>(
    ['setBankAccounts'],
    useAxios<SetBankAccountsMutation, SetBankAccountsMutationVariables>(SetBankAccountsDocument),
    options
  );
export const SetJournalVoucherDataDocument = `
    mutation setJournalVoucherData($data: JournalVoucherInput) {
  accounting {
    journalVoucher {
      new(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetJournalVoucherDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetJournalVoucherDataMutation,
    TError,
    SetJournalVoucherDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetJournalVoucherDataMutation,
    TError,
    SetJournalVoucherDataMutationVariables,
    TContext
  >(
    ['setJournalVoucherData'],
    useAxios<SetJournalVoucherDataMutation, SetJournalVoucherDataMutationVariables>(
      SetJournalVoucherDataDocument
    ),
    options
  );
export const SetExternalLoanDocument = `
    mutation setExternalLoan($id: String, $data: ExternalLoanApplicationInput) {
  accounting {
    externalLoan {
      loan {
        new(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetExternalLoanMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetExternalLoanMutation,
    TError,
    SetExternalLoanMutationVariables,
    TContext
  >
) =>
  useMutation<SetExternalLoanMutation, TError, SetExternalLoanMutationVariables, TContext>(
    ['setExternalLoan'],
    useAxios<SetExternalLoanMutation, SetExternalLoanMutationVariables>(SetExternalLoanDocument),
    options
  );
export const SetExternalAccountDocument = `
    mutation setExternalAccount($id: String, $data: ExternalLoanAccountInput) {
  accounting {
    externalLoan {
      account {
        new(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetExternalAccountMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetExternalAccountMutation,
    TError,
    SetExternalAccountMutationVariables,
    TContext
  >
) =>
  useMutation<SetExternalAccountMutation, TError, SetExternalAccountMutationVariables, TContext>(
    ['setExternalAccount'],
    useAxios<SetExternalAccountMutation, SetExternalAccountMutationVariables>(
      SetExternalAccountDocument
    ),
    options
  );
export const SetExternalPaymentDocument = `
    mutation setExternalPayment($id: String, $data: ExternalLoanPaymentInput) {
  accounting {
    externalLoan {
      payment {
        new(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetExternalPaymentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetExternalPaymentMutation,
    TError,
    SetExternalPaymentMutationVariables,
    TContext
  >
) =>
  useMutation<SetExternalPaymentMutation, TError, SetExternalPaymentMutationVariables, TContext>(
    ['setExternalPayment'],
    useAxios<SetExternalPaymentMutation, SetExternalPaymentMutationVariables>(
      SetExternalPaymentDocument
    ),
    options
  );
export const SetInvestmentAccountDataDocument = `
    mutation setInvestmentAccountData($id: ID!, $data: InvestmentAccountInput!) {
  accounting {
    investment {
      upsertAccount(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetInvestmentAccountDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetInvestmentAccountDataMutation,
    TError,
    SetInvestmentAccountDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetInvestmentAccountDataMutation,
    TError,
    SetInvestmentAccountDataMutationVariables,
    TContext
  >(
    ['setInvestmentAccountData'],
    useAxios<SetInvestmentAccountDataMutation, SetInvestmentAccountDataMutationVariables>(
      SetInvestmentAccountDataDocument
    ),
    options
  );
export const SetInvestmentEntryDataDocument = `
    mutation setInvestmentEntryData($id: ID!, $data: InvestmentEntryInput!) {
  accounting {
    investment {
      upsertEntry(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetInvestmentEntryDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetInvestmentEntryDataMutation,
    TError,
    SetInvestmentEntryDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetInvestmentEntryDataMutation,
    TError,
    SetInvestmentEntryDataMutationVariables,
    TContext
  >(
    ['setInvestmentEntryData'],
    useAxios<SetInvestmentEntryDataMutation, SetInvestmentEntryDataMutationVariables>(
      SetInvestmentEntryDataDocument
    ),
    options
  );
export const SetInvestmentTransactionDataDocument = `
    mutation setInvestmentTransactionData($data: InvestmentTransactionInput!) {
  accounting {
    investment {
      addTransaction(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetInvestmentTransactionDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetInvestmentTransactionDataMutation,
    TError,
    SetInvestmentTransactionDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetInvestmentTransactionDataMutation,
    TError,
    SetInvestmentTransactionDataMutationVariables,
    TContext
  >(
    ['setInvestmentTransactionData'],
    useAxios<SetInvestmentTransactionDataMutation, SetInvestmentTransactionDataMutationVariables>(
      SetInvestmentTransactionDataDocument
    ),
    options
  );
export const SetSalesCustomerDataDocument = `
    mutation setSalesCustomerData($id: ID!, $data: SalesCustomerInput!) {
  accounting {
    sales {
      upsertCustomer(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSalesCustomerDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSalesCustomerDataMutation,
    TError,
    SetSalesCustomerDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSalesCustomerDataMutation,
    TError,
    SetSalesCustomerDataMutationVariables,
    TContext
  >(
    ['setSalesCustomerData'],
    useAxios<SetSalesCustomerDataMutation, SetSalesCustomerDataMutationVariables>(
      SetSalesCustomerDataDocument
    ),
    options
  );
export const SetSalesSaleEntryDataDocument = `
    mutation setSalesSaleEntryData($id: ID!, $data: SalesSaleEntryInput!) {
  accounting {
    sales {
      upsertSaleEntry(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSalesSaleEntryDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSalesSaleEntryDataMutation,
    TError,
    SetSalesSaleEntryDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSalesSaleEntryDataMutation,
    TError,
    SetSalesSaleEntryDataMutationVariables,
    TContext
  >(
    ['setSalesSaleEntryData'],
    useAxios<SetSalesSaleEntryDataMutation, SetSalesSaleEntryDataMutationVariables>(
      SetSalesSaleEntryDataDocument
    ),
    options
  );
export const SetSalesCreditNoteDataDocument = `
    mutation setSalesCreditNoteData($id: ID!, $data: SalesCreditNoteInput!) {
  accounting {
    sales {
      upsertCreditNote(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSalesCreditNoteDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSalesCreditNoteDataMutation,
    TError,
    SetSalesCreditNoteDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSalesCreditNoteDataMutation,
    TError,
    SetSalesCreditNoteDataMutationVariables,
    TContext
  >(
    ['setSalesCreditNoteData'],
    useAxios<SetSalesCreditNoteDataMutation, SetSalesCreditNoteDataMutationVariables>(
      SetSalesCreditNoteDataDocument
    ),
    options
  );
export const SetSalesCustomerPaymentDataDocument = `
    mutation setSalesCustomerPaymentData($id: ID!, $data: SalesCustomerPaymentInput!) {
  accounting {
    sales {
      upsertCustomerPayment(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSalesCustomerPaymentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSalesCustomerPaymentDataMutation,
    TError,
    SetSalesCustomerPaymentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSalesCustomerPaymentDataMutation,
    TError,
    SetSalesCustomerPaymentDataMutationVariables,
    TContext
  >(
    ['setSalesCustomerPaymentData'],
    useAxios<SetSalesCustomerPaymentDataMutation, SetSalesCustomerPaymentDataMutationVariables>(
      SetSalesCustomerPaymentDataDocument
    ),
    options
  );
export const SetAccountCloseDataDocument = `
    mutation setAccountCloseData($data: DepositAccountClose) {
  account {
    close(data: $data) {
      recordId
      calculatedAmount
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountCloseDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountCloseDataMutation,
    TError,
    SetAccountCloseDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetAccountCloseDataMutation, TError, SetAccountCloseDataMutationVariables, TContext>(
    ['setAccountCloseData'],
    useAxios<SetAccountCloseDataMutation, SetAccountCloseDataMutationVariables>(
      SetAccountCloseDataDocument
    ),
    options
  );
export const SetAccountOpenDataDocument = `
    mutation setAccountOpenData($id: ID!, $data: DepositLoanAccountInput!) {
  account {
    add(id: $id, data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountOpenDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountOpenDataMutation,
    TError,
    SetAccountOpenDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetAccountOpenDataMutation, TError, SetAccountOpenDataMutationVariables, TContext>(
    ['setAccountOpenData'],
    useAxios<SetAccountOpenDataMutation, SetAccountOpenDataMutationVariables>(
      SetAccountOpenDataDocument
    ),
    options
  );
export const SetAccountDocumentDataDocument = `
    mutation setAccountDocumentData($subscriptionId: String!, $fieldId: String!, $identifiers: [String!]!) {
  document {
    Subscription(subscriptionId: $subscriptionId) {
      Upsert(fieldId: $fieldId, identifiers: $identifiers) {
        recordId
      }
    }
  }
}
    `;
export const useSetAccountDocumentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountDocumentDataMutation,
    TError,
    SetAccountDocumentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountDocumentDataMutation,
    TError,
    SetAccountDocumentDataMutationVariables,
    TContext
  >(
    ['setAccountDocumentData'],
    useAxios<SetAccountDocumentDataMutation, SetAccountDocumentDataMutationVariables>(
      SetAccountDocumentDataDocument
    ),
    options
  );
export const SetIssueNewSlipDocument = `
    mutation setIssueNewSlip($data: WithdrawSlipIssueInput!) {
  withdrawSlip {
    issueNew(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetIssueNewSlipMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetIssueNewSlipMutation,
    TError,
    SetIssueNewSlipMutationVariables,
    TContext
  >
) =>
  useMutation<SetIssueNewSlipMutation, TError, SetIssueNewSlipMutationVariables, TContext>(
    ['setIssueNewSlip'],
    useAxios<SetIssueNewSlipMutation, SetIssueNewSlipMutationVariables>(SetIssueNewSlipDocument),
    options
  );
export const SetAddMemberToAgentDataDocument = `
    mutation setAddMemberToAgentData($agentId: String!, $data: AssignMembersInput, $override: Boolean) {
  transaction {
    addMemberToAgent(agentId: $agentId, data: $data, override: $override) {
      data {
        id
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAddMemberToAgentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAddMemberToAgentDataMutation,
    TError,
    SetAddMemberToAgentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAddMemberToAgentDataMutation,
    TError,
    SetAddMemberToAgentDataMutationVariables,
    TContext
  >(
    ['setAddMemberToAgentData'],
    useAxios<SetAddMemberToAgentDataMutation, SetAddMemberToAgentDataMutationVariables>(
      SetAddMemberToAgentDataDocument
    ),
    options
  );
export const SetAgentTodayListDataDocument = `
    mutation setAgentTodayListData($id: ID!, $data: [AgentTodayListInput]) {
  transaction {
    agentTodayList(id: $id, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAgentTodayListDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAgentTodayListDataMutation,
    TError,
    SetAgentTodayListDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAgentTodayListDataMutation,
    TError,
    SetAgentTodayListDataMutationVariables,
    TContext
  >(
    ['setAgentTodayListData'],
    useAxios<SetAgentTodayListDataMutation, SetAgentTodayListDataMutationVariables>(
      SetAgentTodayListDataDocument
    ),
    options
  );
export const SetAgentTodayDepositDataDocument = `
    mutation setAgentTodayDepositData($id: ID!, $data: [AgentTodayListInput]) {
  transaction {
    agentTodayDeposit(agentID: $id, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAgentTodayDepositDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAgentTodayDepositDataMutation,
    TError,
    SetAgentTodayDepositDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAgentTodayDepositDataMutation,
    TError,
    SetAgentTodayDepositDataMutationVariables,
    TContext
  >(
    ['setAgentTodayDepositData'],
    useAxios<SetAgentTodayDepositDataMutation, SetAgentTodayDepositDataMutationVariables>(
      SetAgentTodayDepositDataDocument
    ),
    options
  );
export const LoginDocument = `
    mutation login($data: LoginInput!) {
  auth {
    login(data: $data) {
      recordId
      record {
        token {
          access
          refresh
        }
        data {
          user {
            id
            objState
            username
            firstName
            middleName
            lastName
            role
            profilePic
            branch {
              id
              name
            }
            organization {
              basicDetails {
                name
                logo
              }
              contactDetails {
                website
                phoneNumber
                email
              }
              address {
                district
                wardNo
                state
                locality
                localGovernment
                houseNo
              }
              registrationDetails {
                regdNo
                panOrVat
              }
            }
          }
          preference {
            language
            languageCode
            date
          }
        }
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useLoginMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<LoginMutation, TError, LoginMutationVariables, TContext>
) =>
  useMutation<LoginMutation, TError, LoginMutationVariables, TContext>(
    ['login'],
    useAxios<LoginMutation, LoginMutationVariables>(LoginDocument),
    options
  );
export const RefreshDocument = `
    mutation refresh($refreshToken: String!) {
  auth {
    token(refreshToken: $refreshToken) {
      token {
        access
        refresh
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useRefreshMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<RefreshMutation, TError, RefreshMutationVariables, TContext>
) =>
  useMutation<RefreshMutation, TError, RefreshMutationVariables, TContext>(
    ['refresh'],
    useAxios<RefreshMutation, RefreshMutationVariables>(RefreshDocument),
    options
  );
export const ResetPasswordDocument = `
    mutation resetPassword($userId: String!, $newPassword: String!) {
  user {
    resetPassword(data: {userId: $userId, newPassword: $newPassword}) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useResetPasswordMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ResetPasswordMutation,
    TError,
    ResetPasswordMutationVariables,
    TContext
  >
) =>
  useMutation<ResetPasswordMutation, TError, ResetPasswordMutationVariables, TContext>(
    ['resetPassword'],
    useAxios<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument),
    options
  );
export const SetRecoveryPasswordDocument = `
    mutation setRecoveryPassword($email: String!, $url: String!) {
  user {
    passwordRecovery {
      sendRecoveryEmail(data: {email: $email, url: $url}) {
        recordID
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetRecoveryPasswordMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetRecoveryPasswordMutation,
    TError,
    SetRecoveryPasswordMutationVariables,
    TContext
  >
) =>
  useMutation<SetRecoveryPasswordMutation, TError, SetRecoveryPasswordMutationVariables, TContext>(
    ['setRecoveryPassword'],
    useAxios<SetRecoveryPasswordMutation, SetRecoveryPasswordMutationVariables>(
      SetRecoveryPasswordDocument
    ),
    options
  );
export const SetNewPasswordDocument = `
    mutation setNewPassword($token: String!, $newPassword: String!) {
  user {
    passwordRecovery {
      setNewPassword(data: {token: $token, newPassword: $newPassword}) {
        recordID
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetNewPasswordMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetNewPasswordMutation,
    TError,
    SetNewPasswordMutationVariables,
    TContext
  >
) =>
  useMutation<SetNewPasswordMutation, TError, SetNewPasswordMutationVariables, TContext>(
    ['setNewPassword'],
    useAxios<SetNewPasswordMutation, SetNewPasswordMutationVariables>(SetNewPasswordDocument),
    options
  );
export const AddNewAccountInCoaDocument = `
    mutation addNewAccountInCOA($data: AddCOAAccountInput!) {
  settings {
    chartsOfAccount {
      account {
        add(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddNewAccountInCoaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddNewAccountInCoaMutation,
    TError,
    AddNewAccountInCoaMutationVariables,
    TContext
  >
) =>
  useMutation<AddNewAccountInCoaMutation, TError, AddNewAccountInCoaMutationVariables, TContext>(
    ['addNewAccountInCOA'],
    useAxios<AddNewAccountInCoaMutation, AddNewAccountInCoaMutationVariables>(
      AddNewAccountInCoaDocument
    ),
    options
  );
export const DeleteCoaDocument = `
    mutation deleteCOA($id: ID!) {
  settings {
    chartsOfAccount {
      account {
        delete(id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteCoaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<DeleteCoaMutation, TError, DeleteCoaMutationVariables, TContext>
) =>
  useMutation<DeleteCoaMutation, TError, DeleteCoaMutationVariables, TContext>(
    ['deleteCOA'],
    useAxios<DeleteCoaMutation, DeleteCoaMutationVariables>(DeleteCoaDocument),
    options
  );
export const AddGroupDocument = `
    mutation AddGroup($data: NewCoaGroupInput!) {
  settings {
    chartsOfAccount {
      account {
        newGroup(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddGroupMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<AddGroupMutation, TError, AddGroupMutationVariables, TContext>
) =>
  useMutation<AddGroupMutation, TError, AddGroupMutationVariables, TContext>(
    ['AddGroup'],
    useAxios<AddGroupMutation, AddGroupMutationVariables>(AddGroupDocument),
    options
  );
export const AddAccountInCoaDocument = `
    mutation addAccountInCOA($accountSetup: COAAccountSetup!, $parentAccountCode: String!) {
  settings {
    chartsOfAccount {
      account {
        addAccount(accountSetup: $accountSetup, parentAccountCode: $parentAccountCode) {
          success
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddAccountInCoaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddAccountInCoaMutation,
    TError,
    AddAccountInCoaMutationVariables,
    TContext
  >
) =>
  useMutation<AddAccountInCoaMutation, TError, AddAccountInCoaMutationVariables, TContext>(
    ['addAccountInCOA'],
    useAxios<AddAccountInCoaMutation, AddAccountInCoaMutationVariables>(AddAccountInCoaDocument),
    options
  );
export const SetCooperativeDataDocument = `
    mutation setCooperativeData($id: ID!, $data: KymCooperativeFormInput!) {
  members {
    cooperative(id: $id) {
      add(data: $data) {
        recordId
      }
    }
  }
}
    `;
export const useSetCooperativeDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCooperativeDataMutation,
    TError,
    SetCooperativeDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetCooperativeDataMutation, TError, SetCooperativeDataMutationVariables, TContext>(
    ['setCooperativeData'],
    useAxios<SetCooperativeDataMutation, SetCooperativeDataMutationVariables>(
      SetCooperativeDataDocument
    ),
    options
  );
export const SetCoopAccOperatorDataDocument = `
    mutation setCOOPAccOperatorData($id: ID!, $accOperatorId: ID!, $data: KymCoopAccountOperatorDetailsFormInput!) {
  members {
    cooperative(id: $id) {
      accountOperatorDetail {
        Upsert(accOperatorId: $accOperatorId, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCoopAccOperatorDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCoopAccOperatorDataMutation,
    TError,
    SetCoopAccOperatorDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetCoopAccOperatorDataMutation,
    TError,
    SetCoopAccOperatorDataMutationVariables,
    TContext
  >(
    ['setCOOPAccOperatorData'],
    useAxios<SetCoopAccOperatorDataMutation, SetCoopAccOperatorDataMutationVariables>(
      SetCoopAccOperatorDataDocument
    ),
    options
  );
export const DeleteCoopAccOperatorDataDocument = `
    mutation deleteCOOPAccOperatorData($id: ID!, $accOperatorId: ID!) {
  members {
    cooperative(id: $id) {
      accountOperatorDetail {
        Delete(accOperatorId: $accOperatorId) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteCoopAccOperatorDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCoopAccOperatorDataMutation,
    TError,
    DeleteCoopAccOperatorDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteCoopAccOperatorDataMutation,
    TError,
    DeleteCoopAccOperatorDataMutationVariables,
    TContext
  >(
    ['deleteCOOPAccOperatorData'],
    useAxios<DeleteCoopAccOperatorDataMutation, DeleteCoopAccOperatorDataMutationVariables>(
      DeleteCoopAccOperatorDataDocument
    ),
    options
  );
export const SetCooPdirectorDataDocument = `
    mutation setCOOPdirectorData($id: ID!, $dirId: ID!, $data: KymCoopDirectorDetailsFormInput!) {
  members {
    cooperative(id: $id) {
      directorDetails {
        Upsert(dirId: $dirId, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCooPdirectorDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCooPdirectorDataMutation,
    TError,
    SetCooPdirectorDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetCooPdirectorDataMutation, TError, SetCooPdirectorDataMutationVariables, TContext>(
    ['setCOOPdirectorData'],
    useAxios<SetCooPdirectorDataMutation, SetCooPdirectorDataMutationVariables>(
      SetCooPdirectorDataDocument
    ),
    options
  );
export const DeleteCooPdirectorDataDocument = `
    mutation deleteCOOPdirectorData($id: ID!, $dirId: ID!) {
  members {
    cooperative(id: $id) {
      directorDetails {
        Delete(dirId: $dirId) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteCooPdirectorDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCooPdirectorDataMutation,
    TError,
    DeleteCooPdirectorDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteCooPdirectorDataMutation,
    TError,
    DeleteCooPdirectorDataMutationVariables,
    TContext
  >(
    ['deleteCOOPdirectorData'],
    useAxios<DeleteCooPdirectorDataMutation, DeleteCooPdirectorDataMutationVariables>(
      DeleteCooPdirectorDataDocument
    ),
    options
  );
export const SetCooperativeUnionInstitutionDataDocument = `
    mutation setCooperativeUnionInstitutionData($id: ID!, $data: CoopUnionInstitutionInformationInput) {
  members {
    cooperativeUnion {
      add(id: $id) {
        institutionInformation(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCooperativeUnionInstitutionDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCooperativeUnionInstitutionDataMutation,
    TError,
    SetCooperativeUnionInstitutionDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetCooperativeUnionInstitutionDataMutation,
    TError,
    SetCooperativeUnionInstitutionDataMutationVariables,
    TContext
  >(
    ['setCooperativeUnionInstitutionData'],
    useAxios<
      SetCooperativeUnionInstitutionDataMutation,
      SetCooperativeUnionInstitutionDataMutationVariables
    >(SetCooperativeUnionInstitutionDataDocument),
    options
  );
export const SetPersonnelDetailsDocument = `
    mutation setPersonnelDetails($id: ID!, $personnelId: String, $sectionType: CooperativeUnionPersonnelSection!, $data: CoopUnionPersonnelInput) {
  members {
    cooperativeUnion {
      add(id: $id) {
        personnelDetails(recordId: $personnelId, sectionType: $sectionType, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetPersonnelDetailsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetPersonnelDetailsMutation,
    TError,
    SetPersonnelDetailsMutationVariables,
    TContext
  >
) =>
  useMutation<SetPersonnelDetailsMutation, TError, SetPersonnelDetailsMutationVariables, TContext>(
    ['setPersonnelDetails'],
    useAxios<SetPersonnelDetailsMutation, SetPersonnelDetailsMutationVariables>(
      SetPersonnelDetailsDocument
    ),
    options
  );
export const DeletePersonnelDetailsDocument = `
    mutation deletePersonnelDetails($personnelId: ID!) {
  members {
    cooperativeUnion {
      deletePersonnel(id: $personnelId) {
        recordId
      }
    }
  }
}
    `;
export const useDeletePersonnelDetailsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeletePersonnelDetailsMutation,
    TError,
    DeletePersonnelDetailsMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeletePersonnelDetailsMutation,
    TError,
    DeletePersonnelDetailsMutationVariables,
    TContext
  >(
    ['deletePersonnelDetails'],
    useAxios<DeletePersonnelDetailsMutation, DeletePersonnelDetailsMutationVariables>(
      DeletePersonnelDetailsDocument
    ),
    options
  );
export const SetEconomicDetailsDataDocument = `
    mutation setEconomicDetailsData($id: ID!, $data: CoopUnionEconomicDetailsInput) {
  members {
    cooperativeUnion {
      add(id: $id) {
        economicDetails(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetEconomicDetailsDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEconomicDetailsDataMutation,
    TError,
    SetEconomicDetailsDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEconomicDetailsDataMutation,
    TError,
    SetEconomicDetailsDataMutationVariables,
    TContext
  >(
    ['setEconomicDetailsData'],
    useAxios<SetEconomicDetailsDataMutation, SetEconomicDetailsDataMutationVariables>(
      SetEconomicDetailsDataDocument
    ),
    options
  );
export const SetDeclarationDataDocument = `
    mutation setDeclarationData($id: ID!, $data: CoopUnionDeclarationInput) {
  members {
    cooperativeUnion {
      add(id: $id) {
        declaration(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetDeclarationDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDeclarationDataMutation,
    TError,
    SetDeclarationDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetDeclarationDataMutation, TError, SetDeclarationDataMutationVariables, TContext>(
    ['setDeclarationData'],
    useAxios<SetDeclarationDataMutation, SetDeclarationDataMutationVariables>(
      SetDeclarationDataDocument
    ),
    options
  );
export const AddProfitToFundManagementDataDocument = `
    mutation addProfitToFundManagementData($data: FundManagementInput!) {
  profitToFundManagement {
    new(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddProfitToFundManagementDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddProfitToFundManagementDataMutation,
    TError,
    AddProfitToFundManagementDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    AddProfitToFundManagementDataMutation,
    TError,
    AddProfitToFundManagementDataMutationVariables,
    TContext
  >(
    ['addProfitToFundManagementData'],
    useAxios<AddProfitToFundManagementDataMutation, AddProfitToFundManagementDataMutationVariables>(
      AddProfitToFundManagementDataDocument
    ),
    options
  );
export const SendLoanApplicationForApprovalDocument = `
    mutation sendLoanApplicationForApproval($id: ID!, $data: LoanAccountInput!) {
  loanAccount {
    add(id: $id, data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSendLoanApplicationForApprovalMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SendLoanApplicationForApprovalMutation,
    TError,
    SendLoanApplicationForApprovalMutationVariables,
    TContext
  >
) =>
  useMutation<
    SendLoanApplicationForApprovalMutation,
    TError,
    SendLoanApplicationForApprovalMutationVariables,
    TContext
  >(
    ['sendLoanApplicationForApproval'],
    useAxios<
      SendLoanApplicationForApprovalMutation,
      SendLoanApplicationForApprovalMutationVariables
    >(SendLoanApplicationForApprovalDocument),
    options
  );
export const SetDisburseLoanDocument = `
    mutation setDisburseLoan($loanAccountId: ID!, $data: LoanDisbursementInput!) {
  loanAccount {
    disburse(loanAccount: $loanAccountId, data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDisburseLoanMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDisburseLoanMutation,
    TError,
    SetDisburseLoanMutationVariables,
    TContext
  >
) =>
  useMutation<SetDisburseLoanMutation, TError, SetDisburseLoanMutationVariables, TContext>(
    ['setDisburseLoan'],
    useAxios<SetDisburseLoanMutation, SetDisburseLoanMutationVariables>(SetDisburseLoanDocument),
    options
  );
export const ApproveLoanAccountDocument = `
    mutation approveLoanAccount($id: String!, $action: LoanApproveOrCancel!, $remarks: String) {
  loanAccount {
    approveOrCancel(loanAccountId: $id, action: $action, remarks: $remarks) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveLoanAccountMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApproveLoanAccountMutation,
    TError,
    ApproveLoanAccountMutationVariables,
    TContext
  >
) =>
  useMutation<ApproveLoanAccountMutation, TError, ApproveLoanAccountMutationVariables, TContext>(
    ['approveLoanAccount'],
    useAxios<ApproveLoanAccountMutation, ApproveLoanAccountMutationVariables>(
      ApproveLoanAccountDocument
    ),
    options
  );
export const SetLoanRepaymentDocument = `
    mutation setLoanRepayment($data: LoanRepaymentInput) {
  loanAccount {
    repayment(data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanRepaymentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanRepaymentMutation,
    TError,
    SetLoanRepaymentMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanRepaymentMutation, TError, SetLoanRepaymentMutationVariables, TContext>(
    ['setLoanRepayment'],
    useAxios<SetLoanRepaymentMutation, SetLoanRepaymentMutationVariables>(SetLoanRepaymentDocument),
    options
  );
export const GetNewIdDocument = `
    mutation getNewId($idType: ID_TYPE) {
  newId(idType: $idType)
}
    `;
export const useGetNewIdMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>
) =>
  useMutation<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>(
    ['getNewId'],
    useAxios<GetNewIdMutation, GetNewIdMutationVariables>(GetNewIdDocument),
    options
  );
export const SetMemberDataDocument = `
    mutation setMemberData($id: ID!, $data: KymIndMemberInput!) {
  members {
    individual(id: $id) {
      add(data: $data) {
        recordId
        error {
          ... on KymIndAddInvalidDataError {
            error {
              sectionName
              errors
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetMemberDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMemberDataMutation,
    TError,
    SetMemberDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetMemberDataMutation, TError, SetMemberDataMutationVariables, TContext>(
    ['setMemberData'],
    useAxios<SetMemberDataMutation, SetMemberDataMutationVariables>(SetMemberDataDocument),
    options
  );
export const SetMemberFamilyDetailsDocument = `
    mutation setMemberFamilyDetails($id: ID!, $data: KYMIndFamilyMemberInput!) {
  members {
    individual(id: $id) {
      familyMember {
        upsert(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetMemberFamilyDetailsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMemberFamilyDetailsMutation,
    TError,
    SetMemberFamilyDetailsMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetMemberFamilyDetailsMutation,
    TError,
    SetMemberFamilyDetailsMutationVariables,
    TContext
  >(
    ['setMemberFamilyDetails'],
    useAxios<SetMemberFamilyDetailsMutation, SetMemberFamilyDetailsMutationVariables>(
      SetMemberFamilyDetailsDocument
    ),
    options
  );
export const DeleteMemberFamilyDetailsDocument = `
    mutation deleteMemberFamilyDetails($memberId: ID!, $id: ID!) {
  members {
    individual(id: $memberId) {
      familyMember {
        delete(id: $id) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteMemberFamilyDetailsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteMemberFamilyDetailsMutation,
    TError,
    DeleteMemberFamilyDetailsMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteMemberFamilyDetailsMutation,
    TError,
    DeleteMemberFamilyDetailsMutationVariables,
    TContext
  >(
    ['deleteMemberFamilyDetails'],
    useAxios<DeleteMemberFamilyDetailsMutation, DeleteMemberFamilyDetailsMutationVariables>(
      DeleteMemberFamilyDetailsDocument
    ),
    options
  );
export const SetMemberOccupationDocument = `
    mutation setMemberOccupation($id: ID!, $isSpouse: Boolean!, $data: KYMIndOccupationInput!) {
  members {
    individual(id: $id) {
      occupation {
        upsert(isSpouse: $isSpouse, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetMemberOccupationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMemberOccupationMutation,
    TError,
    SetMemberOccupationMutationVariables,
    TContext
  >
) =>
  useMutation<SetMemberOccupationMutation, TError, SetMemberOccupationMutationVariables, TContext>(
    ['setMemberOccupation'],
    useAxios<SetMemberOccupationMutation, SetMemberOccupationMutationVariables>(
      SetMemberOccupationDocument
    ),
    options
  );
export const DeleteMemberOccupationDocument = `
    mutation deleteMemberOccupation($memberId: ID!, $id: ID!) {
  members {
    individual(id: $memberId) {
      occupation {
        delete(id: $id) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteMemberOccupationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteMemberOccupationMutation,
    TError,
    DeleteMemberOccupationMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteMemberOccupationMutation,
    TError,
    DeleteMemberOccupationMutationVariables,
    TContext
  >(
    ['deleteMemberOccupation'],
    useAxios<DeleteMemberOccupationMutation, DeleteMemberOccupationMutationVariables>(
      DeleteMemberOccupationDocument
    ),
    options
  );
export const SetMemberIncomeSourceDocument = `
    mutation setMemberIncomeSource($id: ID!, $data: KYMIndIncomeSourceInput!) {
  members {
    individual(id: $id) {
      incomeSource {
        upsert(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetMemberIncomeSourceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMemberIncomeSourceMutation,
    TError,
    SetMemberIncomeSourceMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetMemberIncomeSourceMutation,
    TError,
    SetMemberIncomeSourceMutationVariables,
    TContext
  >(
    ['setMemberIncomeSource'],
    useAxios<SetMemberIncomeSourceMutation, SetMemberIncomeSourceMutationVariables>(
      SetMemberIncomeSourceDocument
    ),
    options
  );
export const DeleteMemberIncomeSourceDocument = `
    mutation deleteMemberIncomeSource($memberId: ID!, $id: ID!) {
  members {
    individual(id: $memberId) {
      incomeSource {
        delete(id: $id) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteMemberIncomeSourceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteMemberIncomeSourceMutation,
    TError,
    DeleteMemberIncomeSourceMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteMemberIncomeSourceMutation,
    TError,
    DeleteMemberIncomeSourceMutationVariables,
    TContext
  >(
    ['deleteMemberIncomeSource'],
    useAxios<DeleteMemberIncomeSourceMutation, DeleteMemberIncomeSourceMutationVariables>(
      DeleteMemberIncomeSourceDocument
    ),
    options
  );
export const SetKymCooperativeDataDocument = `
    mutation setKymCooperativeData($id: ID!, $data: KymCooperativeFormInput!) {
  members {
    cooperative(id: $id) {
      add(data: $data) {
        recordId
      }
    }
  }
}
    `;
export const useSetKymCooperativeDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymCooperativeDataMutation,
    TError,
    SetKymCooperativeDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetKymCooperativeDataMutation,
    TError,
    SetKymCooperativeDataMutationVariables,
    TContext
  >(
    ['setKymCooperativeData'],
    useAxios<SetKymCooperativeDataMutation, SetKymCooperativeDataMutationVariables>(
      SetKymCooperativeDataDocument
    ),
    options
  );
export const SetKymDocumentDataDocument = `
    mutation setKYMDocumentData($memberId: String!, $fieldId: String!, $identifiers: [String!]!) {
  document {
    KYMUpsert(memberId: $memberId, fieldId: $fieldId, identifiers: $identifiers) {
      recordId
    }
  }
}
    `;
export const useSetKymDocumentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymDocumentDataMutation,
    TError,
    SetKymDocumentDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetKymDocumentDataMutation, TError, SetKymDocumentDataMutationVariables, TContext>(
    ['setKYMDocumentData'],
    useAxios<SetKymDocumentDataMutation, SetKymDocumentDataMutationVariables>(
      SetKymDocumentDataDocument
    ),
    options
  );
export const SetKymIndividualIdentificationDataDocument = `
    mutation setKymIndividualIdentificationData($id: ID!, $data: KYMIndIdentificationInput!) {
  members {
    individual(id: $id) {
      identification {
        upsert(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetKymIndividualIdentificationDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymIndividualIdentificationDataMutation,
    TError,
    SetKymIndividualIdentificationDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetKymIndividualIdentificationDataMutation,
    TError,
    SetKymIndividualIdentificationDataMutationVariables,
    TContext
  >(
    ['setKymIndividualIdentificationData'],
    useAxios<
      SetKymIndividualIdentificationDataMutation,
      SetKymIndividualIdentificationDataMutationVariables
    >(SetKymIndividualIdentificationDataDocument),
    options
  );
export const SetOfficialUseDocument = `
    mutation setOfficialUse($id: ID!, $isStaff: Boolean, $checkSanction: Boolean, $checkNegative: Boolean, $riskCategory: OfficialUseRiskCategory, $docCollectedAndVerified: Boolean, $acceptableAddressDoc: Boolean) {
  members {
    officialUse(
      data: {id: $id, isStaff: $isStaff, checkSanction: $checkSanction, checkNegative: $checkNegative, riskCategory: $riskCategory, docCollectedAndVerified: $docCollectedAndVerified, acceptableAddressDoc: $acceptableAddressDoc}
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetOfficialUseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetOfficialUseMutation,
    TError,
    SetOfficialUseMutationVariables,
    TContext
  >
) =>
  useMutation<SetOfficialUseMutation, TError, SetOfficialUseMutationVariables, TContext>(
    ['setOfficialUse'],
    useAxios<SetOfficialUseMutation, SetOfficialUseMutationVariables>(SetOfficialUseDocument),
    options
  );
export const DeleteDraftDocument = `
    mutation deleteDraft($memberId: ID!) {
  members {
    deleteDraft(memberId: $memberId) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteDraftMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<DeleteDraftMutation, TError, DeleteDraftMutationVariables, TContext>
) =>
  useMutation<DeleteDraftMutation, TError, DeleteDraftMutationVariables, TContext>(
    ['deleteDraft'],
    useAxios<DeleteDraftMutation, DeleteDraftMutationVariables>(DeleteDraftDocument),
    options
  );
export const PayMembershipDocument = `
    mutation payMembership($data: MembershipPaymentInput, $memberId: ID!) {
  members {
    activateMember {
      membershipPayment(data: $data, memberId: $memberId) {
        error {
          ...MutationError
        }
        recordId
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const usePayMembershipMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    PayMembershipMutation,
    TError,
    PayMembershipMutationVariables,
    TContext
  >
) =>
  useMutation<PayMembershipMutation, TError, PayMembershipMutationVariables, TContext>(
    ['payMembership'],
    useAxios<PayMembershipMutation, PayMembershipMutationVariables>(PayMembershipDocument),
    options
  );
export const InactivateMemberDocument = `
    mutation inactivateMember($memberId: ID!) {
  members {
    makeInactive(memberId: $memberId) {
      recordId
    }
  }
}
    `;
export const useInactivateMemberMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    InactivateMemberMutation,
    TError,
    InactivateMemberMutationVariables,
    TContext
  >
) =>
  useMutation<InactivateMemberMutation, TError, InactivateMemberMutationVariables, TContext>(
    ['inactivateMember'],
    useAxios<InactivateMemberMutation, InactivateMemberMutationVariables>(InactivateMemberDocument),
    options
  );
export const SetInstitutionDataDocument = `
    mutation setInstitutionData($id: ID!, $data: KymInsInput!) {
  members {
    institution(id: $id) {
      add(data: $data) {
        recordId
        error {
          ... on KymIndAddInvalidDataError {
            error {
              sectionName
              errors
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetInstitutionDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetInstitutionDataMutation,
    TError,
    SetInstitutionDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetInstitutionDataMutation, TError, SetInstitutionDataMutationVariables, TContext>(
    ['setInstitutionData'],
    useAxios<SetInstitutionDataMutation, SetInstitutionDataMutationVariables>(
      SetInstitutionDataDocument
    ),
    options
  );
export const SetSisterConcernsDocument = `
    mutation setSisterConcerns($id: ID!, $sis: ID!, $data: KymInsSisterConcernInput!) {
  members {
    institution(id: $id) {
      sisterConcern {
        Upsert(sisterConcernId: $sis, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetSisterConcernsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSisterConcernsMutation,
    TError,
    SetSisterConcernsMutationVariables,
    TContext
  >
) =>
  useMutation<SetSisterConcernsMutation, TError, SetSisterConcernsMutationVariables, TContext>(
    ['setSisterConcerns'],
    useAxios<SetSisterConcernsMutation, SetSisterConcernsMutationVariables>(
      SetSisterConcernsDocument
    ),
    options
  );
export const DeleteSisterConcernsDocument = `
    mutation deleteSisterConcerns($insId: ID!, $sis: ID!) {
  members {
    institution(id: $insId) {
      sisterConcern {
        Delete(sisterConcernId: $sis) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteSisterConcernsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteSisterConcernsMutation,
    TError,
    DeleteSisterConcernsMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteSisterConcernsMutation,
    TError,
    DeleteSisterConcernsMutationVariables,
    TContext
  >(
    ['deleteSisterConcerns'],
    useAxios<DeleteSisterConcernsMutation, DeleteSisterConcernsMutationVariables>(
      DeleteSisterConcernsDocument
    ),
    options
  );
export const SetAddDirectorInstitutionDocument = `
    mutation setAddDirectorInstitution($id: ID!, $dir: ID!, $data: KymInsDirectorInput!) {
  members {
    institution(id: $id) {
      director {
        Upsert(directorId: $dir, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetAddDirectorInstitutionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAddDirectorInstitutionMutation,
    TError,
    SetAddDirectorInstitutionMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAddDirectorInstitutionMutation,
    TError,
    SetAddDirectorInstitutionMutationVariables,
    TContext
  >(
    ['setAddDirectorInstitution'],
    useAxios<SetAddDirectorInstitutionMutation, SetAddDirectorInstitutionMutationVariables>(
      SetAddDirectorInstitutionDocument
    ),
    options
  );
export const DeleteDirectorInstitutionDocument = `
    mutation deleteDirectorInstitution($insId: ID!, $dir: ID!) {
  members {
    institution(id: $insId) {
      director {
        Delete(directorId: $dir) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteDirectorInstitutionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteDirectorInstitutionMutation,
    TError,
    DeleteDirectorInstitutionMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteDirectorInstitutionMutation,
    TError,
    DeleteDirectorInstitutionMutationVariables,
    TContext
  >(
    ['deleteDirectorInstitution'],
    useAxios<DeleteDirectorInstitutionMutation, DeleteDirectorInstitutionMutationVariables>(
      DeleteDirectorInstitutionDocument
    ),
    options
  );
export const SetAddAccountOperatorInstitutionDocument = `
    mutation setAddAccountOperatorInstitution($id: ID!, $acc: ID!, $data: KymInsAccountOperatorInput!) {
  members {
    institution(id: $id) {
      accountOperator {
        Upsert(operatorId: $acc, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetAddAccountOperatorInstitutionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAddAccountOperatorInstitutionMutation,
    TError,
    SetAddAccountOperatorInstitutionMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAddAccountOperatorInstitutionMutation,
    TError,
    SetAddAccountOperatorInstitutionMutationVariables,
    TContext
  >(
    ['setAddAccountOperatorInstitution'],
    useAxios<
      SetAddAccountOperatorInstitutionMutation,
      SetAddAccountOperatorInstitutionMutationVariables
    >(SetAddAccountOperatorInstitutionDocument),
    options
  );
export const DeleteAccountOperatorInstitutionDocument = `
    mutation deleteAccountOperatorInstitution($insId: ID!, $acc: ID!) {
  members {
    institution(id: $insId) {
      accountOperator {
        Delete(operatorId: $acc) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteAccountOperatorInstitutionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteAccountOperatorInstitutionMutation,
    TError,
    DeleteAccountOperatorInstitutionMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteAccountOperatorInstitutionMutation,
    TError,
    DeleteAccountOperatorInstitutionMutationVariables,
    TContext
  >(
    ['deleteAccountOperatorInstitution'],
    useAxios<
      DeleteAccountOperatorInstitutionMutation,
      DeleteAccountOperatorInstitutionMutationVariables
    >(DeleteAccountOperatorInstitutionDocument),
    options
  );
export const SetOrganizationDataDocument = `
    mutation setOrganizationData($data: OrganizationInput!) {
  settings {
    general {
      organization {
        initialSetup(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetOrganizationDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetOrganizationDataMutation,
    TError,
    SetOrganizationDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetOrganizationDataMutation, TError, SetOrganizationDataMutationVariables, TContext>(
    ['setOrganizationData'],
    useAxios<SetOrganizationDataMutation, SetOrganizationDataMutationVariables>(
      SetOrganizationDataDocument
    ),
    options
  );
export const GetPreSignedUrlDocument = `
    mutation getPreSignedUrl($contentType: String) {
  presignedUrl {
    upload(contentType: $contentType) {
      filename
      getUrl
      putUrl
    }
  }
}
    `;
export const useGetPreSignedUrlMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    GetPreSignedUrlMutation,
    TError,
    GetPreSignedUrlMutationVariables,
    TContext
  >
) =>
  useMutation<GetPreSignedUrlMutation, TError, GetPreSignedUrlMutationVariables, TContext>(
    ['getPreSignedUrl'],
    useAxios<GetPreSignedUrlMutation, GetPreSignedUrlMutationVariables>(GetPreSignedUrlDocument),
    options
  );
export const SaveNewReportDocument = `
    mutation saveNewReport($data: StatementReportInput!) {
  report {
    statementReport(data: $data) {
      member {
        id
        name
        address {
          state
          district
          locality
          localGovernment
        }
      }
      statement {
        ... on ShareStatementReport {
          shareStatement {
            date
            particular
            noOfShares
            returnAmountDr
            purchaseAmountCr
            balanceSheet
          }
          totals {
            totalShares
            totalDr
            totalCr
            totalBalanceSheet
          }
        }
      }
    }
  }
}
    `;
export const useSaveNewReportMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SaveNewReportMutation,
    TError,
    SaveNewReportMutationVariables,
    TContext
  >
) =>
  useMutation<SaveNewReportMutation, TError, SaveNewReportMutationVariables, TContext>(
    ['saveNewReport'],
    useAxios<SaveNewReportMutation, SaveNewReportMutationVariables>(SaveNewReportDocument),
    options
  );
export const ApproveOrDeclineRequestDocument = `
    mutation approveOrDeclineRequest($data: RequestApproveOrDeclineInput, $requestType: RequestType!) {
  requests {
    requestApproveOrDecline(data: $data, requestType: $requestType) {
      error {
        ...MutationError
      }
      requestId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveOrDeclineRequestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApproveOrDeclineRequestMutation,
    TError,
    ApproveOrDeclineRequestMutationVariables,
    TContext
  >
) =>
  useMutation<
    ApproveOrDeclineRequestMutation,
    TError,
    ApproveOrDeclineRequestMutationVariables,
    TContext
  >(
    ['approveOrDeclineRequest'],
    useAxios<ApproveOrDeclineRequestMutation, ApproveOrDeclineRequestMutationVariables>(
      ApproveOrDeclineRequestDocument
    ),
    options
  );
export const CancelWithdrawSlipRequestDocument = `
    mutation cancelWithdrawSlipRequest($accountId: ID!, $slipNumber: Int, $slipRange: SlipRangeInput, $reason: String) {
  withdrawSlip {
    cancelSlip(
      accountId: $accountId
      slipNumber: $slipNumber
      slipRange: $slipRange
      reason: $reason
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useCancelWithdrawSlipRequestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    CancelWithdrawSlipRequestMutation,
    TError,
    CancelWithdrawSlipRequestMutationVariables,
    TContext
  >
) =>
  useMutation<
    CancelWithdrawSlipRequestMutation,
    TError,
    CancelWithdrawSlipRequestMutationVariables,
    TContext
  >(
    ['cancelWithdrawSlipRequest'],
    useAxios<CancelWithdrawSlipRequestMutation, CancelWithdrawSlipRequestMutationVariables>(
      CancelWithdrawSlipRequestDocument
    ),
    options
  );
export const ApproveOrDeclineMemberRequestDocument = `
    mutation approveOrDeclineMemberRequest($data: RequestApproveOrDeclineInput) {
  requests {
    approveOrDecline {
      membershipRequest(data: $data) {
        error {
          ...MutationError
        }
        requestId
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveOrDeclineMemberRequestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApproveOrDeclineMemberRequestMutation,
    TError,
    ApproveOrDeclineMemberRequestMutationVariables,
    TContext
  >
) =>
  useMutation<
    ApproveOrDeclineMemberRequestMutation,
    TError,
    ApproveOrDeclineMemberRequestMutationVariables,
    TContext
  >(
    ['approveOrDeclineMemberRequest'],
    useAxios<ApproveOrDeclineMemberRequestMutation, ApproveOrDeclineMemberRequestMutationVariables>(
      ApproveOrDeclineMemberRequestDocument
    ),
    options
  );
export const SaveAlternativeChargesDocument = `
    mutation saveAlternativeCharges($data: [AlternativeChannelChargesInput]) {
  settings {
    general {
      alternativeChannel {
        feesAndCharges(data: $data) {
          error {
            ...MutationError
          }
          record {
            id
            amount
            ledgerId
            serviceType
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSaveAlternativeChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SaveAlternativeChargesMutation,
    TError,
    SaveAlternativeChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SaveAlternativeChargesMutation,
    TError,
    SaveAlternativeChargesMutationVariables,
    TContext
  >(
    ['saveAlternativeCharges'],
    useAxios<SaveAlternativeChargesMutation, SaveAlternativeChargesMutationVariables>(
      SaveAlternativeChargesDocument
    ),
    options
  );
export const ActivateServiceDocument = `
    mutation activateService($data: AlternativeChannelServiceActivationInput) {
  alternativeChannel {
    serviceActivation(data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useActivateServiceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ActivateServiceMutation,
    TError,
    ActivateServiceMutationVariables,
    TContext
  >
) =>
  useMutation<ActivateServiceMutation, TError, ActivateServiceMutationVariables, TContext>(
    ['activateService'],
    useAxios<ActivateServiceMutation, ActivateServiceMutationVariables>(ActivateServiceDocument),
    options
  );
export const SetBranchDataDocument = `
    mutation setBranchData($id: ID!, $data: BranchInput!) {
  settings {
    general {
      branch {
        add(id: $id, data: $data) {
          record {
            id
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBranchDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetBranchDataMutation,
    TError,
    SetBranchDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetBranchDataMutation, TError, SetBranchDataMutationVariables, TContext>(
    ['setBranchData'],
    useAxios<SetBranchDataMutation, SetBranchDataMutationVariables>(SetBranchDataDocument),
    options
  );
export const SetCbsCodeDocument = `
    mutation setCBSCode($data: CodeManagementInput) {
  settings {
    general {
      codes {
        cbs {
          add(data: $data) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetCbsCodeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetCbsCodeMutation, TError, SetCbsCodeMutationVariables, TContext>
) =>
  useMutation<SetCbsCodeMutation, TError, SetCbsCodeMutationVariables, TContext>(
    ['setCBSCode'],
    useAxios<SetCbsCodeMutation, SetCbsCodeMutationVariables>(SetCbsCodeDocument),
    options
  );
export const SetDepositProductDocument = `
    mutation setDepositProduct($id: ID!, $data: DepositProductInput) {
  settings {
    general {
      depositProduct {
        add(id: $id, data: $data) {
          recordId
          record {
            id
            productCode
            productName
            createdDate
            interest
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDepositProductMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositProductMutation,
    TError,
    SetDepositProductMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositProductMutation, TError, SetDepositProductMutationVariables, TContext>(
    ['setDepositProduct'],
    useAxios<SetDepositProductMutation, SetDepositProductMutationVariables>(
      SetDepositProductDocument
    ),
    options
  );
export const SetDepositProductInactiveDocument = `
    mutation setDepositProductInactive($data: DepositProductInactiveData) {
  settings {
    general {
      depositProduct {
        makeInactive(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetDepositProductInactiveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositProductInactiveMutation,
    TError,
    SetDepositProductInactiveMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetDepositProductInactiveMutation,
    TError,
    SetDepositProductInactiveMutationVariables,
    TContext
  >(
    ['setDepositProductInactive'],
    useAxios<SetDepositProductInactiveMutation, SetDepositProductInactiveMutationVariables>(
      SetDepositProductInactiveDocument
    ),
    options
  );
export const ActivateSavingsProductDocument = `
    mutation activateSavingsProduct($productId: ID!, $productType: AccountTypeFilter!, $remarks: String!) {
  settings {
    general {
      depositProduct {
        activateProduct(
          productId: $productId
          productType: $productType
          remarks: $remarks
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useActivateSavingsProductMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ActivateSavingsProductMutation,
    TError,
    ActivateSavingsProductMutationVariables,
    TContext
  >
) =>
  useMutation<
    ActivateSavingsProductMutation,
    TError,
    ActivateSavingsProductMutationVariables,
    TContext
  >(
    ['activateSavingsProduct'],
    useAxios<ActivateSavingsProductMutation, ActivateSavingsProductMutationVariables>(
      ActivateSavingsProductDocument
    ),
    options
  );
export const SetDepositIroDocument = `
    mutation setDepositIro($data: DepositIroInput) {
  settings {
    general {
      deposit {
        ... on DepositSettingsMutation {
          iroSetup(data: $data) {
            recordId
            record {
              id
              iroName
              iroAddress
              iroCode
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetDepositIroMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositIroMutation,
    TError,
    SetDepositIroMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositIroMutation, TError, SetDepositIroMutationVariables, TContext>(
    ['setDepositIro'],
    useAxios<SetDepositIroMutation, SetDepositIroMutationVariables>(SetDepositIroDocument),
    options
  );
export const SetDepositTdsDocument = `
    mutation setDepositTds($data: DepositTdsInput) {
  settings {
    general {
      deposit {
        ... on DepositSettingsMutation {
          tdsSetup(data: $data) {
            recordId
            record {
              id
              individual
              institution
              cooperative
              coopUnion
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetDepositTdsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositTdsMutation,
    TError,
    SetDepositTdsMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositTdsMutation, TError, SetDepositTdsMutationVariables, TContext>(
    ['setDepositTds'],
    useAxios<SetDepositTdsMutation, SetDepositTdsMutationVariables>(SetDepositTdsDocument),
    options
  );
export const SetLoanProductDocument = `
    mutation setLoanProduct($id: ID!, $data: LoanProductInput) {
  settings {
    general {
      loanProducts {
        upsert(id: $id, data: $data) {
          recordId
          record {
            id
            objState
            productName
            productType
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanProductMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanProductMutation,
    TError,
    SetLoanProductMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanProductMutation, TError, SetLoanProductMutationVariables, TContext>(
    ['setLoanProduct'],
    useAxios<SetLoanProductMutation, SetLoanProductMutationVariables>(SetLoanProductDocument),
    options
  );
export const SetLoanProductInactiveDocument = `
    mutation setLoanProductInactive($data: LoanProductInactiveData) {
  settings {
    general {
      loanProducts {
        makeInactive(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetLoanProductInactiveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanProductInactiveMutation,
    TError,
    SetLoanProductInactiveMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanProductInactiveMutation,
    TError,
    SetLoanProductInactiveMutationVariables,
    TContext
  >(
    ['setLoanProductInactive'],
    useAxios<SetLoanProductInactiveMutation, SetLoanProductInactiveMutationVariables>(
      SetLoanProductInactiveDocument
    ),
    options
  );
export const SetProductActiveDocument = `
    mutation setProductActive($productId: ID!, $productType: AccountTypeFilter!, $remarks: String!) {
  settings {
    general {
      depositProduct {
        activateProduct(
          productId: $productId
          productType: $productType
          remarks: $remarks
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetProductActiveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetProductActiveMutation,
    TError,
    SetProductActiveMutationVariables,
    TContext
  >
) =>
  useMutation<SetProductActiveMutation, TError, SetProductActiveMutationVariables, TContext>(
    ['setProductActive'],
    useAxios<SetProductActiveMutation, SetProductActiveMutationVariables>(SetProductActiveDocument),
    options
  );
export const SetLoanGeneralSettingsDocument = `
    mutation setLoanGeneralSettings($emi: Boolean, $epi: Boolean, $flat: Boolean, $collateralList: [CollateralListInputData]) {
  settings {
    general {
      loan {
        general(
          data: {emi: $emi, epi: $epi, flat: $flat, collateralList: $collateralList}
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanGeneralSettingsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanGeneralSettingsMutation,
    TError,
    SetLoanGeneralSettingsMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanGeneralSettingsMutation,
    TError,
    SetLoanGeneralSettingsMutationVariables,
    TContext
  >(
    ['setLoanGeneralSettings'],
    useAxios<SetLoanGeneralSettingsMutation, SetLoanGeneralSettingsMutationVariables>(
      SetLoanGeneralSettingsDocument
    ),
    options
  );
export const SetLoanInsuranceSchemeDocument = `
    mutation setLoanInsuranceScheme($data: [LoanInsuranceSchemeInput]) {
  settings {
    general {
      loan {
        insuranceScheme(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanInsuranceSchemeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanInsuranceSchemeMutation,
    TError,
    SetLoanInsuranceSchemeMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanInsuranceSchemeMutation,
    TError,
    SetLoanInsuranceSchemeMutationVariables,
    TContext
  >(
    ['setLoanInsuranceScheme'],
    useAxios<SetLoanInsuranceSchemeMutation, SetLoanInsuranceSchemeMutationVariables>(
      SetLoanInsuranceSchemeDocument
    ),
    options
  );
export const SetProductTypeDocument = `
    mutation setProductType($productType: [LoanProductTypeInput], $productSubType: [LoanProductSubTypeInput]) {
  settings {
    general {
      loan {
        productType(
          data: {productTypes: $productType, productSubTypes: $productSubType}
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetProductTypeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetProductTypeMutation,
    TError,
    SetProductTypeMutationVariables,
    TContext
  >
) =>
  useMutation<SetProductTypeMutation, TError, SetProductTypeMutationVariables, TContext>(
    ['setProductType'],
    useAxios<SetProductTypeMutation, SetProductTypeMutationVariables>(SetProductTypeDocument),
    options
  );
export const AddGeneralMemberDocument = `
    mutation addGeneralMember($data: GeneralMemberInput!) {
  settings {
    general {
      KYM {
        general {
          generalMember(data: $data) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddGeneralMemberMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddGeneralMemberMutation,
    TError,
    AddGeneralMemberMutationVariables,
    TContext
  >
) =>
  useMutation<AddGeneralMemberMutation, TError, AddGeneralMemberMutationVariables, TContext>(
    ['addGeneralMember'],
    useAxios<AddGeneralMemberMutation, AddGeneralMemberMutationVariables>(AddGeneralMemberDocument),
    options
  );
export const UpsertNewOptionDocument = `
    mutation upsertNewOption($fieldId: ID!, $data: FormOptionUpsertInput!) {
  settings {
    form {
      option {
        upsert(fieldId: $fieldId, data: $data) {
          recordId
          record {
            id
            name
            enabled
            order
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertNewOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertNewOptionMutation,
    TError,
    UpsertNewOptionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertNewOptionMutation, TError, UpsertNewOptionMutationVariables, TContext>(
    ['upsertNewOption'],
    useAxios<UpsertNewOptionMutation, UpsertNewOptionMutationVariables>(UpsertNewOptionDocument),
    options
  );
export const DeleteOptionDocument = `
    mutation deleteOption($optionId: ID!) {
  settings {
    form {
      option {
        delete(id: $optionId) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteOptionMutation,
    TError,
    DeleteOptionMutationVariables,
    TContext
  >
) =>
  useMutation<DeleteOptionMutation, TError, DeleteOptionMutationVariables, TContext>(
    ['deleteOption'],
    useAxios<DeleteOptionMutation, DeleteOptionMutationVariables>(DeleteOptionDocument),
    options
  );
export const MoveOptionDocument = `
    mutation moveOption($optionId: ID!, $to: Int!) {
  settings {
    form {
      option {
        move(id: $optionId, to: $to) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMoveOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<MoveOptionMutation, TError, MoveOptionMutationVariables, TContext>
) =>
  useMutation<MoveOptionMutation, TError, MoveOptionMutationVariables, TContext>(
    ['moveOption'],
    useAxios<MoveOptionMutation, MoveOptionMutationVariables>(MoveOptionDocument),
    options
  );
export const ToggleFieldOtherOptionDocument = `
    mutation toggleFieldOtherOption($fieldId: ID!, $hasOtherField: Boolean) {
  settings {
    form {
      field {
        update(id: $fieldId, data: {hasOtherField: $hasOtherField}) {
          record {
            name
            hasOtherField
          }
        }
      }
    }
  }
}
    `;
export const useToggleFieldOtherOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ToggleFieldOtherOptionMutation,
    TError,
    ToggleFieldOtherOptionMutationVariables,
    TContext
  >
) =>
  useMutation<
    ToggleFieldOtherOptionMutation,
    TError,
    ToggleFieldOtherOptionMutationVariables,
    TContext
  >(
    ['toggleFieldOtherOption'],
    useAxios<ToggleFieldOtherOptionMutation, ToggleFieldOtherOptionMutationVariables>(
      ToggleFieldOtherOptionDocument
    ),
    options
  );
export const UpsertSectionOptionDocument = `
    mutation upsertSectionOption($sectionId: ID!, $data: FormFieldUpsertInput!) {
  settings {
    form {
      field {
        upsert(sectionId: $sectionId, data: $data) {
          recordId
          record {
            id
            name
            enabled
            fieldType
            order
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertSectionOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertSectionOptionMutation,
    TError,
    UpsertSectionOptionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertSectionOptionMutation, TError, UpsertSectionOptionMutationVariables, TContext>(
    ['upsertSectionOption'],
    useAxios<UpsertSectionOptionMutation, UpsertSectionOptionMutationVariables>(
      UpsertSectionOptionDocument
    ),
    options
  );
export const DeleteFieldDocument = `
    mutation deleteField($fieldId: ID!) {
  settings {
    form {
      field {
        delete(id: $fieldId) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<DeleteFieldMutation, TError, DeleteFieldMutationVariables, TContext>
) =>
  useMutation<DeleteFieldMutation, TError, DeleteFieldMutationVariables, TContext>(
    ['deleteField'],
    useAxios<DeleteFieldMutation, DeleteFieldMutationVariables>(DeleteFieldDocument),
    options
  );
export const MoveFieldDocument = `
    mutation moveField($fieldId: ID!, $to: Int!) {
  settings {
    form {
      field {
        move(id: $fieldId, to: $to) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMoveFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<MoveFieldMutation, TError, MoveFieldMutationVariables, TContext>
) =>
  useMutation<MoveFieldMutation, TError, MoveFieldMutationVariables, TContext>(
    ['moveField'],
    useAxios<MoveFieldMutation, MoveFieldMutationVariables>(MoveFieldDocument),
    options
  );
export const AddConditionOptionDocument = `
    mutation addConditionOption($fieldId: ID!, $dependsOn: [ID]!) {
  settings {
    form {
      field {
        condition(fieldId: $fieldId, dependsOn: $dependsOn) {
          recordId
          record {
            id
            dependsOn
            name
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddConditionOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddConditionOptionMutation,
    TError,
    AddConditionOptionMutationVariables,
    TContext
  >
) =>
  useMutation<AddConditionOptionMutation, TError, AddConditionOptionMutationVariables, TContext>(
    ['addConditionOption'],
    useAxios<AddConditionOptionMutation, AddConditionOptionMutationVariables>(
      AddConditionOptionDocument
    ),
    options
  );
export const AddFileSizeToSectionDocument = `
    mutation addFileSizeToSection($sectionId: ID!, $maxSize: Int!) {
  settings {
    form {
      maxSize(id: $sectionId, maxSize: $maxSize) {
        error {
          ...MutationError
        }
        record {
          ... on FormSection {
            id
            name
            maxSize
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddFileSizeToSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddFileSizeToSectionMutation,
    TError,
    AddFileSizeToSectionMutationVariables,
    TContext
  >
) =>
  useMutation<
    AddFileSizeToSectionMutation,
    TError,
    AddFileSizeToSectionMutationVariables,
    TContext
  >(
    ['addFileSizeToSection'],
    useAxios<AddFileSizeToSectionMutation, AddFileSizeToSectionMutationVariables>(
      AddFileSizeToSectionDocument
    ),
    options
  );
export const UpsertCustomSectionDocument = `
    mutation upsertCustomSection($data: FormSectionUpsertInput!) {
  settings {
    form {
      section {
        upsert(data: $data) {
          recordId
          error {
            ...MutationError
          }
          record {
            id
            name
            isCustom
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertCustomSectionMutation,
    TError,
    UpsertCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertCustomSectionMutation, TError, UpsertCustomSectionMutationVariables, TContext>(
    ['upsertCustomSection'],
    useAxios<UpsertCustomSectionMutation, UpsertCustomSectionMutationVariables>(
      UpsertCustomSectionDocument
    ),
    options
  );
export const UpsertCustomFieldDocument = `
    mutation upsertCustomField($data: FormFieldUpsertInput!) {
  settings {
    form {
      field {
        upsert(data: $data) {
          record {
            id
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertCustomFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertCustomFieldMutation,
    TError,
    UpsertCustomFieldMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertCustomFieldMutation, TError, UpsertCustomFieldMutationVariables, TContext>(
    ['upsertCustomField'],
    useAxios<UpsertCustomFieldMutation, UpsertCustomFieldMutationVariables>(
      UpsertCustomFieldDocument
    ),
    options
  );
export const DeleteCustomSectionDocument = `
    mutation deleteCustomSection($id: ID!) {
  settings {
    form {
      section {
        delete(id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCustomSectionMutation,
    TError,
    DeleteCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<DeleteCustomSectionMutation, TError, DeleteCustomSectionMutationVariables, TContext>(
    ['deleteCustomSection'],
    useAxios<DeleteCustomSectionMutation, DeleteCustomSectionMutationVariables>(
      DeleteCustomSectionDocument
    ),
    options
  );
export const DeleteCustomSectionFieldDocument = `
    mutation deleteCustomSectionField($id: ID!) {
  settings {
    form {
      field {
        delete(id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteCustomSectionFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCustomSectionFieldMutation,
    TError,
    DeleteCustomSectionFieldMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteCustomSectionFieldMutation,
    TError,
    DeleteCustomSectionFieldMutationVariables,
    TContext
  >(
    ['deleteCustomSectionField'],
    useAxios<DeleteCustomSectionFieldMutation, DeleteCustomSectionFieldMutationVariables>(
      DeleteCustomSectionFieldDocument
    ),
    options
  );
export const UpdateCustomSectionDocument = `
    mutation updateCustomSection($id: ID!, $data: FormSectionUpdateInput!) {
  settings {
    form {
      section {
        update(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
          record {
            id
            name
            isCustom
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateCustomSectionMutation,
    TError,
    UpdateCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateCustomSectionMutation, TError, UpdateCustomSectionMutationVariables, TContext>(
    ['updateCustomSection'],
    useAxios<UpdateCustomSectionMutation, UpdateCustomSectionMutationVariables>(
      UpdateCustomSectionDocument
    ),
    options
  );
export const UpdateCustomSectionFieldDocument = `
    mutation updateCustomSectionField($id: ID!, $data: FormFieldUpdateInput!) {
  settings {
    form {
      field {
        update(id: $id, data: $data) {
          record {
            id
          }
        }
      }
    }
  }
}
    `;
export const useUpdateCustomSectionFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateCustomSectionFieldMutation,
    TError,
    UpdateCustomSectionFieldMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateCustomSectionFieldMutation,
    TError,
    UpdateCustomSectionFieldMutationVariables,
    TContext
  >(
    ['updateCustomSectionField'],
    useAxios<UpdateCustomSectionFieldMutation, UpdateCustomSectionFieldMutationVariables>(
      UpdateCustomSectionFieldDocument
    ),
    options
  );
export const UpdateDeclarationDocument = `
    mutation updateDeclaration($data: DeclarationInput!) {
  settings {
    declaration {
      update(data: $data) {
        record {
          content
        }
      }
    }
  }
}
    `;
export const useUpdateDeclarationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateDeclarationMutation,
    TError,
    UpdateDeclarationMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateDeclarationMutation, TError, UpdateDeclarationMutationVariables, TContext>(
    ['updateDeclaration'],
    useAxios<UpdateDeclarationMutation, UpdateDeclarationMutationVariables>(
      UpdateDeclarationDocument
    ),
    options
  );
export const SetSettingsShareBonusDocument = `
    mutation setSettingsShareBonus($data: ShareBonusSettingsInput) {
  settings {
    general {
      share {
        add {
          bonus(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareBonusMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareBonusMutation,
    TError,
    SetSettingsShareBonusMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareBonusMutation,
    TError,
    SetSettingsShareBonusMutationVariables,
    TContext
  >(
    ['setSettingsShareBonus'],
    useAxios<SetSettingsShareBonusMutation, SetSettingsShareBonusMutationVariables>(
      SetSettingsShareBonusDocument
    ),
    options
  );
export const SetSettingsShareDividendDocument = `
    mutation setSettingsShareDividend($data: ShareDividendSettingsInput) {
  settings {
    general {
      share {
        add {
          dividend(data: $data) {
            dividend {
              distributionCondition
              dividendTransferTreatment
              accountForFractionalDividends
              accountForShareDividends
              organizationFundForDividends
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareDividendMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareDividendMutation,
    TError,
    SetSettingsShareDividendMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareDividendMutation,
    TError,
    SetSettingsShareDividendMutationVariables,
    TContext
  >(
    ['setSettingsShareDividend'],
    useAxios<SetSettingsShareDividendMutation, SetSettingsShareDividendMutationVariables>(
      SetSettingsShareDividendDocument
    ),
    options
  );
export const SetSettingsShareIssueChargesDocument = `
    mutation setSettingsShareIssueCharges($data: ShareIssueChargesInput) {
  settings {
    general {
      share {
        add {
          shareIssueCharges(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareIssueChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareIssueChargesMutation,
    TError,
    SetSettingsShareIssueChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareIssueChargesMutation,
    TError,
    SetSettingsShareIssueChargesMutationVariables,
    TContext
  >(
    ['setSettingsShareIssueCharges'],
    useAxios<SetSettingsShareIssueChargesMutation, SetSettingsShareIssueChargesMutationVariables>(
      SetSettingsShareIssueChargesDocument
    ),
    options
  );
export const SetSettingsShareReturnChargesDocument = `
    mutation setSettingsShareReturnCharges($data: ShareReturnChargesInput) {
  settings {
    general {
      share {
        add {
          shareReturnCharges(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareReturnChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareReturnChargesMutation,
    TError,
    SetSettingsShareReturnChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareReturnChargesMutation,
    TError,
    SetSettingsShareReturnChargesMutationVariables,
    TContext
  >(
    ['setSettingsShareReturnCharges'],
    useAxios<SetSettingsShareReturnChargesMutation, SetSettingsShareReturnChargesMutationVariables>(
      SetSettingsShareReturnChargesDocument
    ),
    options
  );
export const SetSettingsShareGeneralDocument = `
    mutation setSettingsShareGeneral($data: ShareSettingsGeneralInput) {
  settings {
    general {
      share {
        add {
          general(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareGeneralMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareGeneralMutation,
    TError,
    SetSettingsShareGeneralMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareGeneralMutation,
    TError,
    SetSettingsShareGeneralMutationVariables,
    TContext
  >(
    ['setSettingsShareGeneral'],
    useAxios<SetSettingsShareGeneralMutation, SetSettingsShareGeneralMutationVariables>(
      SetSettingsShareGeneralDocument
    ),
    options
  );
export const SetSettingsShareTransferDocument = `
    mutation setSettingsShareTransfer($data: ShareTransferSettingsInput) {
  settings {
    general {
      share {
        add {
          transfer(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareTransferMutation,
    TError,
    SetSettingsShareTransferMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareTransferMutation,
    TError,
    SetSettingsShareTransferMutationVariables,
    TContext
  >(
    ['setSettingsShareTransfer'],
    useAxios<SetSettingsShareTransferMutation, SetSettingsShareTransferMutationVariables>(
      SetSettingsShareTransferDocument
    ),
    options
  );
export const SetSettingsUserDataDocument = `
    mutation setSettingsUserData($id: ID!, $data: MyraUserInput) {
  settings {
    myraUser {
      add(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSettingsUserDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsUserDataMutation,
    TError,
    SetSettingsUserDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetSettingsUserDataMutation, TError, SetSettingsUserDataMutationVariables, TContext>(
    ['setSettingsUserData'],
    useAxios<SetSettingsUserDataMutation, SetSettingsUserDataMutationVariables>(
      SetSettingsUserDataDocument
    ),
    options
  );
export const SetPreferenceDocument = `
    mutation setPreference($id: ID!, $data: UserPreferenceInput!) {
  user {
    preference {
      update(id: $id, data: $data) {
        recordId
        record {
          language
          languageCode
          date
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetPreferenceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetPreferenceMutation,
    TError,
    SetPreferenceMutationVariables,
    TContext
  >
) =>
  useMutation<SetPreferenceMutation, TError, SetPreferenceMutationVariables, TContext>(
    ['setPreference'],
    useAxios<SetPreferenceMutation, SetPreferenceMutationVariables>(SetPreferenceDocument),
    options
  );
export const SetValuatorDocument = `
    mutation setValuator($id: ID!, $data: ValuatorInput) {
  settings {
    general {
      valuator {
        add(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetValuatorMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetValuatorMutation, TError, SetValuatorMutationVariables, TContext>
) =>
  useMutation<SetValuatorMutation, TError, SetValuatorMutationVariables, TContext>(
    ['setValuator'],
    useAxios<SetValuatorMutation, SetValuatorMutationVariables>(SetValuatorDocument),
    options
  );
export const AddSharePurchaseDocument = `
    mutation addSharePurchase($data: SharePurchaseInput!) {
  share {
    purchase(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddSharePurchaseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddSharePurchaseMutation,
    TError,
    AddSharePurchaseMutationVariables,
    TContext
  >
) =>
  useMutation<AddSharePurchaseMutation, TError, AddSharePurchaseMutationVariables, TContext>(
    ['addSharePurchase'],
    useAxios<AddSharePurchaseMutation, AddSharePurchaseMutationVariables>(AddSharePurchaseDocument),
    options
  );
export const AddShareReturnDocument = `
    mutation addShareReturn($data: ShareReturnInput!) {
  share {
    return(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddShareReturnMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddShareReturnMutation,
    TError,
    AddShareReturnMutationVariables,
    TContext
  >
) =>
  useMutation<AddShareReturnMutation, TError, AddShareReturnMutationVariables, TContext>(
    ['addShareReturn'],
    useAxios<AddShareReturnMutation, AddShareReturnMutationVariables>(AddShareReturnDocument),
    options
  );
export const SetDepositDataDocument = `
    mutation setDepositData($data: DepositInput!) {
  transaction {
    deposit(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDepositDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositDataMutation,
    TError,
    SetDepositDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositDataMutation, TError, SetDepositDataMutationVariables, TContext>(
    ['setDepositData'],
    useAxios<SetDepositDataMutation, SetDepositDataMutationVariables>(SetDepositDataDocument),
    options
  );
export const SetBulkDepositDataDocument = `
    mutation setBulkDepositData($data: BulkDepositInput) {
  transaction {
    bulkDeposit(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBulkDepositDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetBulkDepositDataMutation,
    TError,
    SetBulkDepositDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetBulkDepositDataMutation, TError, SetBulkDepositDataMutationVariables, TContext>(
    ['setBulkDepositData'],
    useAxios<SetBulkDepositDataMutation, SetBulkDepositDataMutationVariables>(
      SetBulkDepositDataDocument
    ),
    options
  );
export const SetWithdrawDataDocument = `
    mutation setWithdrawData($data: WithdrawInput!) {
  transaction {
    withdraw(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetWithdrawDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetWithdrawDataMutation,
    TError,
    SetWithdrawDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetWithdrawDataMutation, TError, SetWithdrawDataMutationVariables, TContext>(
    ['setWithdrawData'],
    useAxios<SetWithdrawDataMutation, SetWithdrawDataMutationVariables>(SetWithdrawDataDocument),
    options
  );
export const SetAccountTransferDataDocument = `
    mutation setAccountTransferData($data: TransferInput!) {
  transaction {
    transfer(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountTransferDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountTransferDataMutation,
    TError,
    SetAccountTransferDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountTransferDataMutation,
    TError,
    SetAccountTransferDataMutationVariables,
    TContext
  >(
    ['setAccountTransferData'],
    useAxios<SetAccountTransferDataMutation, SetAccountTransferDataMutationVariables>(
      SetAccountTransferDataDocument
    ),
    options
  );
export const SetAccountForgiveInstallmentDataDocument = `
    mutation setAccountForgiveInstallmentData($id: ID!, $installmentDates: [String!]!) {
  account {
    forgiveInstallment(id: $id, installmentDate: $installmentDates) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountForgiveInstallmentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountForgiveInstallmentDataMutation,
    TError,
    SetAccountForgiveInstallmentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountForgiveInstallmentDataMutation,
    TError,
    SetAccountForgiveInstallmentDataMutationVariables,
    TContext
  >(
    ['setAccountForgiveInstallmentData'],
    useAxios<
      SetAccountForgiveInstallmentDataMutation,
      SetAccountForgiveInstallmentDataMutationVariables
    >(SetAccountForgiveInstallmentDataDocument),
    options
  );
export const SetEndOfDayDataDocument = `
    mutation setEndOfDayData($option: EODOption) {
  transaction {
    endOfDay(option: $option) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEndOfDayDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEndOfDayDataMutation,
    TError,
    SetEndOfDayDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetEndOfDayDataMutation, TError, SetEndOfDayDataMutationVariables, TContext>(
    ['setEndOfDayData'],
    useAxios<SetEndOfDayDataMutation, SetEndOfDayDataMutationVariables>(SetEndOfDayDataDocument),
    options
  );
export const SetTellerTransferDataDocument = `
    mutation setTellerTransferData($data: TellerTransferInput!) {
  transaction {
    tellerTransfer(data: $data) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetTellerTransferDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetTellerTransferDataMutation,
    TError,
    SetTellerTransferDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetTellerTransferDataMutation,
    TError,
    SetTellerTransferDataMutationVariables,
    TContext
  >(
    ['setTellerTransferData'],
    useAxios<SetTellerTransferDataMutation, SetTellerTransferDataMutationVariables>(
      SetTellerTransferDataDocument
    ),
    options
  );
export const SetTellerTransferActionDocument = `
    mutation setTellerTransferAction($requestId: ID!, $action: TransferRequestAction!, $declineReason: String) {
  transaction {
    tellerTransferAction(
      requestId: $requestId
      action: $action
      declineReason: $declineReason
    ) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetTellerTransferActionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetTellerTransferActionMutation,
    TError,
    SetTellerTransferActionMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetTellerTransferActionMutation,
    TError,
    SetTellerTransferActionMutationVariables,
    TContext
  >(
    ['setTellerTransferAction'],
    useAxios<SetTellerTransferActionMutation, SetTellerTransferActionMutationVariables>(
      SetTellerTransferActionDocument
    ),
    options
  );
export const GetAccountMemberListDocument = `
    query getAccountMemberList($objState: ObjState, $pagination: Pagination) {
  members {
    list(pagination: $pagination, filter: {objState: $objState}) {
      totalCount
      edges {
        node {
          id
          name
          code
          type
          address {
            state
            district
            localGovernment
            wardNo
            locality
          }
          contact
          createdAt
          dateJoined
        }
        cursor
      }
      pageInfo {
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAccountMemberListQuery = <TData = GetAccountMemberListQuery, TError = unknown>(
  variables?: GetAccountMemberListQueryVariables,
  options?: UseQueryOptions<GetAccountMemberListQuery, TError, TData>
) =>
  useQuery<GetAccountMemberListQuery, TError, TData>(
    variables === undefined ? ['getAccountMemberList'] : ['getAccountMemberList', variables],
    useAxios<GetAccountMemberListQuery, GetAccountMemberListQueryVariables>(
      GetAccountMemberListDocument
    ).bind(null, variables),
    options
  );
export const GetProductListDocument = `
    query getProductList($memberId: ID!) {
  settings {
    general {
      depositProduct {
        getProductList(memberId: $memberId) {
          allowed {
            id
            productName
          }
          notAllowed {
            data {
              id
              productName
            }
            error
          }
        }
      }
    }
  }
}
    `;
export const useGetProductListQuery = <TData = GetProductListQuery, TError = unknown>(
  variables: GetProductListQueryVariables,
  options?: UseQueryOptions<GetProductListQuery, TError, TData>
) =>
  useQuery<GetProductListQuery, TError, TData>(
    ['getProductList', variables],
    useAxios<GetProductListQuery, GetProductListQueryVariables>(GetProductListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAccountOpenProductDetailsDocument = `
    query getAccountOpenProductDetails($id: ID!) {
  settings {
    general {
      depositProduct {
        formState(id: $id) {
          data {
            productName
            nature
            productCode {
              prefix
              initialNo
            }
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            ethnicity
            occupation
            isMandatorySaving
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            depositAmount {
              minAmount
              maxAmount
            }
            depositFrequency
            penalty
            penaltyData {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate
            rebateData {
              dayBeforeInstallmentDate
              noOfInstallment
              rebateAmount
              rebateRate
              rebateLedgerMapping
            }
            tenureUnit
            isTenureApplicable
            minTenureUnitNumber
            maxTenureUnitNumber
            balanceLimit {
              minAmount
              maxAmount
              avgAmount
            }
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              additionalRate
            }
            ladderRate
            ladderRateData {
              type
              amount
              rate
            }
            postingFrequency
            maxPostingFreqDifference
            noOftransactionAllowed
            accountType
            serviceCharge {
              serviceName
              ledgerName
              amount
            }
            accountCloseCharge {
              serviceName
              ledgerName
              amount
            }
            alternativeChannelCharge {
              serviceName
              ledgerName
              amount
            }
            atmCharge {
              serviceName
              ledgerName
              amount
            }
            dormantSetup {
              duration
              condition
            }
            withdrawAmountLimit {
              minAmount
              maxAmount
              avgAmount
            }
            autoOpen
            allowLoan
            chequeIssue
            chequeCharge {
              serviceName
              ledgerName
              amount
            }
            percentageOfDeposit
            alternativeChannels
            atmFacility
            isForMinors
            supportMultiple
            staffProduct
            withdrawRestricted
            specifyWithdrawRestriction
            wealthBuildingProduct
            individualDocuments
            institutionDocuments
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductDetailsQuery = <
  TData = GetAccountOpenProductDetailsQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductDetailsQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductDetailsQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductDetailsQuery, TError, TData>(
    ['getAccountOpenProductDetails', variables],
    useAxios<GetAccountOpenProductDetailsQuery, GetAccountOpenProductDetailsQueryVariables>(
      GetAccountOpenProductDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenEditDataDocument = `
    query getAccountOpenEditData($id: ID!) {
  account {
    formState(id: $id) {
      data {
        memberId
        productId
        accountName
        minor
        tenure
        interestDoc {
          identifier
          url
        }
        tenureNumber
        initialDepositAmount
        defaultAmountDepositAccountName
        interestRate
        interestAuthority
        installmentAmount
        depositFrequencyWeekly
        depositFrequencyMonthly
        depositFrequencyDay
        depositFrequencyFrequencyDay
        depositFrequencyDayOfWeek
        serviceCharge {
          name
          amount
        }
        depositFrequencyYearlyMonth
        depositFrequencyYearlyDay
        mobileBanking
        eBanking
        atmFacility
        smsBanking
        chequeFacility
        agentId
      }
    }
  }
}
    `;
export const useGetAccountOpenEditDataQuery = <
  TData = GetAccountOpenEditDataQuery,
  TError = unknown
>(
  variables: GetAccountOpenEditDataQueryVariables,
  options?: UseQueryOptions<GetAccountOpenEditDataQuery, TError, TData>
) =>
  useQuery<GetAccountOpenEditDataQuery, TError, TData>(
    ['getAccountOpenEditData', variables],
    useAxios<GetAccountOpenEditDataQuery, GetAccountOpenEditDataQueryVariables>(
      GetAccountOpenEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTableListDocument = `
    query getAccountTableList($paginate: Pagination, $filter: DepositLoanAccountSearchFilter) {
  account {
    list(paginate: $paginate, filter: $filter) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      edges {
        node {
          id
          objState
          createdAt
          accountName
          createdBy {
            id
          }
          modifiedAt
          modifiedBy {
            id
          }
          installmentAmount
          balance
          accountOpenedDate
          lastTransactionDate
          accountExpiryDate
          closedAt
          member {
            id
            name
            profilePicUrl
            profilePic
            address {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            contact
            dateJoined
          }
          overDrawnBalance
          guaranteedAmount
          interestAccured
          interestTax
          product {
            id
            productCode
            productName
            nature
            minimumBalance
            isMandatorySaving
            withdrawRestricted
            accountClosingCharge {
              serviceName
              ledgerName
              amount
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            interest
          }
          dues {
            fine
            totalDue
            dueInstallments
          }
          prematurePenalty
          installmentAmount
        }
      }
    }
  }
}
    `;
export const useGetAccountTableListQuery = <TData = GetAccountTableListQuery, TError = unknown>(
  variables?: GetAccountTableListQueryVariables,
  options?: UseQueryOptions<GetAccountTableListQuery, TError, TData>
) =>
  useQuery<GetAccountTableListQuery, TError, TData>(
    variables === undefined ? ['getAccountTableList'] : ['getAccountTableList', variables],
    useAxios<GetAccountTableListQuery, GetAccountTableListQueryVariables>(
      GetAccountTableListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTableListMinimalDocument = `
    query getAccountTableListMinimal($paginate: Pagination, $filter: DepositLoanAccountSearchFilter) {
  account {
    list(paginate: $paginate, filter: $filter) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      edges {
        node {
          id
          objState
          createdAt
          accountName
          balance
          accountOpenedDate
          accountExpiryDate
          closedAt
          member {
            id
            name
            profilePicUrl
          }
          product {
            id
            productCode
            productName
            nature
            interest
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountTableListMinimalQuery = <
  TData = GetAccountTableListMinimalQuery,
  TError = unknown
>(
  variables?: GetAccountTableListMinimalQueryVariables,
  options?: UseQueryOptions<GetAccountTableListMinimalQuery, TError, TData>
) =>
  useQuery<GetAccountTableListMinimalQuery, TError, TData>(
    variables === undefined
      ? ['getAccountTableListMinimal']
      : ['getAccountTableListMinimal', variables],
    useAxios<GetAccountTableListMinimalQuery, GetAccountTableListMinimalQueryVariables>(
      GetAccountTableListMinimalDocument
    ).bind(null, variables),
    options
  );
export const GetAccountDocumentsListDocument = `
    query getAccountDocumentsList($subscriptionId: String!) {
  document {
    listSubscriptionDocuments(subscriptionId: $subscriptionId) {
      data {
        fieldId
        docData {
          identifier
          url
        }
      }
    }
  }
}
    `;
export const useGetAccountDocumentsListQuery = <
  TData = GetAccountDocumentsListQuery,
  TError = unknown
>(
  variables: GetAccountDocumentsListQueryVariables,
  options?: UseQueryOptions<GetAccountDocumentsListQuery, TError, TData>
) =>
  useQuery<GetAccountDocumentsListQuery, TError, TData>(
    ['getAccountDocumentsList', variables],
    useAxios<GetAccountDocumentsListQuery, GetAccountDocumentsListQueryVariables>(
      GetAccountDocumentsListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenProductCriteriaDocument = `
    query getAccountOpenProductCriteria($productId: ID!) {
  settings {
    general {
      depositProduct {
        getProductCriteria(productId: $productId) {
          data {
            gender
            minAge
            maxAge
            ethnicity
            educationQualification
            maritalStatus
            foreignEmployment
            occupation
            institutionType
            cooperativeUnion
            cooperativeType
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductCriteriaQuery = <
  TData = GetAccountOpenProductCriteriaQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductCriteriaQuery, TError, TData>(
    ['getAccountOpenProductCriteria', variables],
    useAxios<GetAccountOpenProductCriteriaQuery, GetAccountOpenProductCriteriaQueryVariables>(
      GetAccountOpenProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenProductPenaltyDocument = `
    query getAccountOpenProductPenalty($productId: ID!) {
  settings {
    general {
      depositProduct {
        getPenaltyRebateInfo(productId: $productId) {
          data {
            penalty {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate {
              dayBeforeInstallmentDate
              rebateRate
              rebateAmount
              rebateLedgerMapping
              noOfInstallment
            }
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductPenaltyQuery = <
  TData = GetAccountOpenProductPenaltyQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductPenaltyQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductPenaltyQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductPenaltyQuery, TError, TData>(
    ['getAccountOpenProductPenalty', variables],
    useAxios<GetAccountOpenProductPenaltyQuery, GetAccountOpenProductPenaltyQueryVariables>(
      GetAccountOpenProductPenaltyDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenMinorListDocument = `
    query getAccountOpenMinorList($memberId: ID!) {
  account {
    listMinors(memberId: $memberId) {
      data {
        id
        fullName
        familyMemberId
      }
    }
  }
}
    `;
export const useGetAccountOpenMinorListQuery = <
  TData = GetAccountOpenMinorListQuery,
  TError = unknown
>(
  variables: GetAccountOpenMinorListQueryVariables,
  options?: UseQueryOptions<GetAccountOpenMinorListQuery, TError, TData>
) =>
  useQuery<GetAccountOpenMinorListQuery, TError, TData>(
    ['getAccountOpenMinorList', variables],
    useAxios<GetAccountOpenMinorListQuery, GetAccountOpenMinorListQueryVariables>(
      GetAccountOpenMinorListDocument
    ).bind(null, variables),
    options
  );
export const GetInstallmentsListDataDocument = `
    query getInstallmentsListData($id: ID!, $from: String, $to: String, $fromN: Int, $toN: Int) {
  account {
    getInstallments(id: $id, from: $from, to: $to, fromN: $fromN, toN: $toN) {
      data {
        number
        dueDate
        status
        monthName
        fine
        rebate
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInstallmentsListDataQuery = <
  TData = GetInstallmentsListDataQuery,
  TError = unknown
>(
  variables: GetInstallmentsListDataQueryVariables,
  options?: UseQueryOptions<GetInstallmentsListDataQuery, TError, TData>
) =>
  useQuery<GetInstallmentsListDataQuery, TError, TData>(
    ['getInstallmentsListData', variables],
    useAxios<GetInstallmentsListDataQuery, GetInstallmentsListDataQueryVariables>(
      GetInstallmentsListDataDocument
    ).bind(null, variables),
    options
  );
export const GetBulkInstallmentsDataDocument = `
    query getBulkInstallmentsData($ids: [ID]!) {
  account {
    getBulkInstallments(ids: $ids) {
      accountId
      value {
        data {
          dueDate
          status
          monthName
          fine
          rebate
        }
      }
    }
  }
}
    `;
export const useGetBulkInstallmentsDataQuery = <
  TData = GetBulkInstallmentsDataQuery,
  TError = unknown
>(
  variables: GetBulkInstallmentsDataQueryVariables,
  options?: UseQueryOptions<GetBulkInstallmentsDataQuery, TError, TData>
) =>
  useQuery<GetBulkInstallmentsDataQuery, TError, TData>(
    ['getBulkInstallmentsData', variables],
    useAxios<GetBulkInstallmentsDataQuery, GetBulkInstallmentsDataQueryVariables>(
      GetBulkInstallmentsDataDocument
    ).bind(null, variables),
    options
  );
export const GetDefaultAccountListDocument = `
    query getDefaultAccountList($productId: ID!, $memberId: ID!) {
  account {
    listDefaultAccounts(memberId: $memberId, productId: $productId) {
      data {
        id
        accountName
      }
    }
  }
}
    `;
export const useGetDefaultAccountListQuery = <TData = GetDefaultAccountListQuery, TError = unknown>(
  variables: GetDefaultAccountListQueryVariables,
  options?: UseQueryOptions<GetDefaultAccountListQuery, TError, TData>
) =>
  useQuery<GetDefaultAccountListQuery, TError, TData>(
    ['getDefaultAccountList', variables],
    useAxios<GetDefaultAccountListQuery, GetDefaultAccountListQueryVariables>(
      GetDefaultAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountDetailsDataDocument = `
    query getAccountDetailsData($id: ID!) {
  account {
    accountDetails(id: $id) {
      data {
        accountId
        member {
          id
          name
          profilePicUrl
          contact
        }
        installmentAmount
        accountName
        productName
        accountOpenDate
        accountType
        defaultAccountType
        accountBalance
        totalDepositBalance
        interestAccrued
        interestEarned
        guaranteedAmount
        accountBranch
        alternativeChannel
        allowLoan
        withdrawRestricted
        supportMultiple
        staffProduct
        atmFacility
        chequeIssue
        allowPartialInstallment
        monthlyInterestCompulsory
        isForMinors
        autoOpen
        isMandatory
        interestRate
      }
    }
  }
}
    `;
export const useGetAccountDetailsDataQuery = <TData = GetAccountDetailsDataQuery, TError = unknown>(
  variables: GetAccountDetailsDataQueryVariables,
  options?: UseQueryOptions<GetAccountDetailsDataQuery, TError, TData>
) =>
  useQuery<GetAccountDetailsDataQuery, TError, TData>(
    ['getAccountDetailsData', variables],
    useAxios<GetAccountDetailsDataQuery, GetAccountDetailsDataQueryVariables>(
      GetAccountDetailsDataDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTransactionListsDocument = `
    query getAccountTransactionLists($filter: AccountsTransactionFilter!, $pagination: Pagination!) {
  account {
    listTransactions(filter: $filter, paginate: $pagination) {
      edges {
        node {
          id
          accountId
          name
          date
          month
          transactionDirection
          transactionType
          amount
          currentBalance
        }
      }
      pageInfo {
        endCursor
        startCursor
        hasNextPage
        hasPreviousPage
      }
      summary {
        totalDeposit
        totalWithdraw
        averageBalance
      }
    }
  }
}
    `;
export const useGetAccountTransactionListsQuery = <
  TData = GetAccountTransactionListsQuery,
  TError = unknown
>(
  variables: GetAccountTransactionListsQueryVariables,
  options?: UseQueryOptions<GetAccountTransactionListsQuery, TError, TData>
) =>
  useQuery<GetAccountTransactionListsQuery, TError, TData>(
    ['getAccountTransactionLists', variables],
    useAxios<GetAccountTransactionListsQuery, GetAccountTransactionListsQueryVariables>(
      GetAccountTransactionListsDocument
    ).bind(null, variables),
    options
  );
export const GetBankAccountListDocument = `
    query getBankAccountList($filter: BankAccountFilter, $pagination: Pagination) {
  accounting {
    bankAccounts {
      list(filter: $filter, pagination: $pagination) {
        edges {
          node {
            id
            bankId
            bankName
            displayName
            accountNo
            balance
          }
        }
      }
    }
  }
}
    `;
export const useGetBankAccountListQuery = <TData = GetBankAccountListQuery, TError = unknown>(
  variables?: GetBankAccountListQueryVariables,
  options?: UseQueryOptions<GetBankAccountListQuery, TError, TData>
) =>
  useQuery<GetBankAccountListQuery, TError, TData>(
    variables === undefined ? ['getBankAccountList'] : ['getBankAccountList', variables],
    useAxios<GetBankAccountListQuery, GetBankAccountListQueryVariables>(
      GetBankAccountListDocument
    ).bind(null, variables),
    options
  );
export const ExternalLoanListDocument = `
    query externalLoanList($filter: ExternalLoanApplicationFilter, $pagination: Pagination) {
  accounting {
    externalLoan {
      loan {
        list(filter: $filter, pagination: $pagination) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              loanName
              organizationId
              organizationName
              createdBy
              appliedDate
              loanType
              amount
            }
            cursor
          }
        }
      }
    }
  }
}
    `;
export const useExternalLoanListQuery = <TData = ExternalLoanListQuery, TError = unknown>(
  variables?: ExternalLoanListQueryVariables,
  options?: UseQueryOptions<ExternalLoanListQuery, TError, TData>
) =>
  useQuery<ExternalLoanListQuery, TError, TData>(
    variables === undefined ? ['externalLoanList'] : ['externalLoanList', variables],
    useAxios<ExternalLoanListQuery, ExternalLoanListQueryVariables>(ExternalLoanListDocument).bind(
      null,
      variables
    ),
    options
  );
export const ExternalLoanAccountListDocument = `
    query externalLoanAccountList($filter: ExternalLoanAccountFilter, $pagination: Pagination) {
  accounting {
    externalLoan {
      account {
        list(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              id
              name
              createdBy
              createdDate
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
            }
            cursor
          }
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
        }
      }
    }
  }
}
    `;
export const useExternalLoanAccountListQuery = <
  TData = ExternalLoanAccountListQuery,
  TError = unknown
>(
  variables?: ExternalLoanAccountListQueryVariables,
  options?: UseQueryOptions<ExternalLoanAccountListQuery, TError, TData>
) =>
  useQuery<ExternalLoanAccountListQuery, TError, TData>(
    variables === undefined ? ['externalLoanAccountList'] : ['externalLoanAccountList', variables],
    useAxios<ExternalLoanAccountListQuery, ExternalLoanAccountListQueryVariables>(
      ExternalLoanAccountListDocument
    ).bind(null, variables),
    options
  );
export const ExternalLoanPaymentListDocument = `
    query externalLoanPaymentList($filter: ExternalLoanPaymentFilter, $pagination: Pagination) {
  accounting {
    externalLoan {
      payment {
        list(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            cursor
            node {
              id
              loanId
              loanName
              createdBy
              createdDate
              amount
              paymentMode
            }
          }
        }
      }
    }
  }
}
    `;
export const useExternalLoanPaymentListQuery = <
  TData = ExternalLoanPaymentListQuery,
  TError = unknown
>(
  variables?: ExternalLoanPaymentListQueryVariables,
  options?: UseQueryOptions<ExternalLoanPaymentListQuery, TError, TData>
) =>
  useQuery<ExternalLoanPaymentListQuery, TError, TData>(
    variables === undefined ? ['externalLoanPaymentList'] : ['externalLoanPaymentList', variables],
    useAxios<ExternalLoanPaymentListQuery, ExternalLoanPaymentListQueryVariables>(
      ExternalLoanPaymentListDocument
    ).bind(null, variables),
    options
  );
export const GetInvestmentAccountsListDataDocument = `
    query getInvestmentAccountsListData($pagination: Pagination, $filter: InvestmentAccountFilter) {
  accounting {
    investment {
      listAccount(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            type
            address {
              state
              district
              localGovernment
              wardNo
              locality
            }
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetInvestmentAccountsListDataQuery = <
  TData = GetInvestmentAccountsListDataQuery,
  TError = unknown
>(
  variables?: GetInvestmentAccountsListDataQueryVariables,
  options?: UseQueryOptions<GetInvestmentAccountsListDataQuery, TError, TData>
) =>
  useQuery<GetInvestmentAccountsListDataQuery, TError, TData>(
    variables === undefined
      ? ['getInvestmentAccountsListData']
      : ['getInvestmentAccountsListData', variables],
    useAxios<GetInvestmentAccountsListDataQuery, GetInvestmentAccountsListDataQueryVariables>(
      GetInvestmentAccountsListDataDocument
    ).bind(null, variables),
    options
  );
export const GetInvestmentAccountFormStateDataDocument = `
    query getInvestmentAccountFormStateData($id: ID!) {
  accounting {
    investment {
      accountFormState(id: $id) {
        data {
          name
          type
          address {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetInvestmentAccountFormStateDataQuery = <
  TData = GetInvestmentAccountFormStateDataQuery,
  TError = unknown
>(
  variables: GetInvestmentAccountFormStateDataQueryVariables,
  options?: UseQueryOptions<GetInvestmentAccountFormStateDataQuery, TError, TData>
) =>
  useQuery<GetInvestmentAccountFormStateDataQuery, TError, TData>(
    ['getInvestmentAccountFormStateData', variables],
    useAxios<
      GetInvestmentAccountFormStateDataQuery,
      GetInvestmentAccountFormStateDataQueryVariables
    >(GetInvestmentAccountFormStateDataDocument).bind(null, variables),
    options
  );
export const GetInvestmentEntriesListDataDocument = `
    query getInvestmentEntriesListData($pagination: Pagination, $filter: InvestmentEntryFilter) {
  accounting {
    investment {
      listEntry(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            type
            amount
            date
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetInvestmentEntriesListDataQuery = <
  TData = GetInvestmentEntriesListDataQuery,
  TError = unknown
>(
  variables?: GetInvestmentEntriesListDataQueryVariables,
  options?: UseQueryOptions<GetInvestmentEntriesListDataQuery, TError, TData>
) =>
  useQuery<GetInvestmentEntriesListDataQuery, TError, TData>(
    variables === undefined
      ? ['getInvestmentEntriesListData']
      : ['getInvestmentEntriesListData', variables],
    useAxios<GetInvestmentEntriesListDataQuery, GetInvestmentEntriesListDataQueryVariables>(
      GetInvestmentEntriesListDataDocument
    ).bind(null, variables),
    options
  );
export const GetInvestmentEntryFormStateDataDocument = `
    query getInvestmentEntryFormStateData($id: ID!) {
  accounting {
    investment {
      entryFormState(id: $id) {
        data {
          accountID
          investmentType
          share {
            count
            rate
            purchaseAmount
            certificateNo
            date
            notes
          }
          saving {
            type
            installmentAmount
            frequency
            rate
            openDate
            initialDepositAmount
            notes
          }
          fd {
            type
            fdAmount
            rate
            certificateNo
            startDate
            maturityDate
            interestNomineeBank
            bankACNo
            interestLedgerMapping
            notes
          }
        }
      }
    }
  }
}
    `;
export const useGetInvestmentEntryFormStateDataQuery = <
  TData = GetInvestmentEntryFormStateDataQuery,
  TError = unknown
>(
  variables: GetInvestmentEntryFormStateDataQueryVariables,
  options?: UseQueryOptions<GetInvestmentEntryFormStateDataQuery, TError, TData>
) =>
  useQuery<GetInvestmentEntryFormStateDataQuery, TError, TData>(
    ['getInvestmentEntryFormStateData', variables],
    useAxios<GetInvestmentEntryFormStateDataQuery, GetInvestmentEntryFormStateDataQueryVariables>(
      GetInvestmentEntryFormStateDataDocument
    ).bind(null, variables),
    options
  );
export const GetInvestmentTransactionsListDataDocument = `
    query getInvestmentTransactionsListData($pagination: Pagination, $filter: InvestmentTransactionFilter) {
  accounting {
    investment {
      listTransaction(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            type
            amount
            date
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetInvestmentTransactionsListDataQuery = <
  TData = GetInvestmentTransactionsListDataQuery,
  TError = unknown
>(
  variables?: GetInvestmentTransactionsListDataQueryVariables,
  options?: UseQueryOptions<GetInvestmentTransactionsListDataQuery, TError, TData>
) =>
  useQuery<GetInvestmentTransactionsListDataQuery, TError, TData>(
    variables === undefined
      ? ['getInvestmentTransactionsListData']
      : ['getInvestmentTransactionsListData', variables],
    useAxios<
      GetInvestmentTransactionsListDataQuery,
      GetInvestmentTransactionsListDataQueryVariables
    >(GetInvestmentTransactionsListDataDocument).bind(null, variables),
    options
  );
export const GetJournalVoucherListDocument = `
    query getJournalVoucherList($pagination: Pagination, $filter: JournalVoucherFilter) {
  accounting {
    journalVoucher {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            date
            reference
            amount
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetJournalVoucherListQuery = <TData = GetJournalVoucherListQuery, TError = unknown>(
  variables?: GetJournalVoucherListQueryVariables,
  options?: UseQueryOptions<GetJournalVoucherListQuery, TError, TData>
) =>
  useQuery<GetJournalVoucherListQuery, TError, TData>(
    variables === undefined ? ['getJournalVoucherList'] : ['getJournalVoucherList', variables],
    useAxios<GetJournalVoucherListQuery, GetJournalVoucherListQueryVariables>(
      GetJournalVoucherListDocument
    ).bind(null, variables),
    options
  );
export const GetJournalVoucherDetailDocument = `
    query getJournalVoucherDetail($entryId: ID!) {
  accounting {
    journalVoucher {
      viewJournalVoucherDetail(entryId: $entryId) {
        data {
          id
          date
          amount
          status
          reference
          note
          glTransaction {
            account
            debit
            credit
          }
          totalDebit
          totalCredit
        }
      }
    }
  }
}
    `;
export const useGetJournalVoucherDetailQuery = <
  TData = GetJournalVoucherDetailQuery,
  TError = unknown
>(
  variables: GetJournalVoucherDetailQueryVariables,
  options?: UseQueryOptions<GetJournalVoucherDetailQuery, TError, TData>
) =>
  useQuery<GetJournalVoucherDetailQuery, TError, TData>(
    ['getJournalVoucherDetail', variables],
    useAxios<GetJournalVoucherDetailQuery, GetJournalVoucherDetailQueryVariables>(
      GetJournalVoucherDetailDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCustomerListDataDocument = `
    query getSalesCustomerListData($pagination: Pagination, $filter: SalesCustomerFilter) {
  accounting {
    sales {
      listCustomer(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            phoneNumber
            email
            address {
              state
              district
              localGovernment
              wardNo
              locality
            }
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetSalesCustomerListDataQuery = <
  TData = GetSalesCustomerListDataQuery,
  TError = unknown
>(
  variables?: GetSalesCustomerListDataQueryVariables,
  options?: UseQueryOptions<GetSalesCustomerListDataQuery, TError, TData>
) =>
  useQuery<GetSalesCustomerListDataQuery, TError, TData>(
    variables === undefined
      ? ['getSalesCustomerListData']
      : ['getSalesCustomerListData', variables],
    useAxios<GetSalesCustomerListDataQuery, GetSalesCustomerListDataQueryVariables>(
      GetSalesCustomerListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCustomerFormStateDataDocument = `
    query getSalesCustomerFormStateData($id: ID!) {
  accounting {
    sales {
      customerFormState(id: $id) {
        data {
          name
          code
          phoneNumber
          pan
          address {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          email
          creditTerms
          creditLimit
          openingBalance
        }
      }
    }
  }
}
    `;
export const useGetSalesCustomerFormStateDataQuery = <
  TData = GetSalesCustomerFormStateDataQuery,
  TError = unknown
>(
  variables: GetSalesCustomerFormStateDataQueryVariables,
  options?: UseQueryOptions<GetSalesCustomerFormStateDataQuery, TError, TData>
) =>
  useQuery<GetSalesCustomerFormStateDataQuery, TError, TData>(
    ['getSalesCustomerFormStateData', variables],
    useAxios<GetSalesCustomerFormStateDataQuery, GetSalesCustomerFormStateDataQueryVariables>(
      GetSalesCustomerFormStateDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesSaleEntryListDataDocument = `
    query getSalesSaleEntryListData($pagination: Pagination, $filter: SalesSaleEntryFilter) {
  accounting {
    sales {
      listSaleEntry(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            totalAmount
            date
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetSalesSaleEntryListDataQuery = <
  TData = GetSalesSaleEntryListDataQuery,
  TError = unknown
>(
  variables?: GetSalesSaleEntryListDataQueryVariables,
  options?: UseQueryOptions<GetSalesSaleEntryListDataQuery, TError, TData>
) =>
  useQuery<GetSalesSaleEntryListDataQuery, TError, TData>(
    variables === undefined
      ? ['getSalesSaleEntryListData']
      : ['getSalesSaleEntryListData', variables],
    useAxios<GetSalesSaleEntryListDataQuery, GetSalesSaleEntryListDataQueryVariables>(
      GetSalesSaleEntryListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesSaleEntryFormStateDataDocument = `
    query getSalesSaleEntryFormStateData($id: ID!) {
  accounting {
    sales {
      saleEntryFormState(id: $id) {
        data {
          customerID
          reference
          invoiceDate
          dueDate
          products {
            name
            quantity
            rate
            tax
            amount
            productDescription
            warehousePartition
            salesLedger
          }
          notes
          subTotal
          discount
          taxableTotal
          vat
        }
      }
    }
  }
}
    `;
export const useGetSalesSaleEntryFormStateDataQuery = <
  TData = GetSalesSaleEntryFormStateDataQuery,
  TError = unknown
>(
  variables: GetSalesSaleEntryFormStateDataQueryVariables,
  options?: UseQueryOptions<GetSalesSaleEntryFormStateDataQuery, TError, TData>
) =>
  useQuery<GetSalesSaleEntryFormStateDataQuery, TError, TData>(
    ['getSalesSaleEntryFormStateData', variables],
    useAxios<GetSalesSaleEntryFormStateDataQuery, GetSalesSaleEntryFormStateDataQueryVariables>(
      GetSalesSaleEntryFormStateDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCreditNoteListDataDocument = `
    query getSalesCreditNoteListData($pagination: Pagination, $filter: SalesCreditNoteFilter) {
  accounting {
    sales {
      listCreditNote(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            totalAmount
            date
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetSalesCreditNoteListDataQuery = <
  TData = GetSalesCreditNoteListDataQuery,
  TError = unknown
>(
  variables?: GetSalesCreditNoteListDataQueryVariables,
  options?: UseQueryOptions<GetSalesCreditNoteListDataQuery, TError, TData>
) =>
  useQuery<GetSalesCreditNoteListDataQuery, TError, TData>(
    variables === undefined
      ? ['getSalesCreditNoteListData']
      : ['getSalesCreditNoteListData', variables],
    useAxios<GetSalesCreditNoteListDataQuery, GetSalesCreditNoteListDataQueryVariables>(
      GetSalesCreditNoteListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCreditNoteFormStateDataDocument = `
    query getSalesCreditNoteFormStateData($id: ID!) {
  accounting {
    sales {
      creditNoteFormState(id: $id) {
        data {
          customerID
          invoiceReference
          date
          products {
            name
            quantity
            rate
            tax
            amount
            productDescription
            warehousePartition
            salesLedger
          }
          notes
          subTotal
          nonTaxableTotal
          taxableTotal
          vat
        }
      }
    }
  }
}
    `;
export const useGetSalesCreditNoteFormStateDataQuery = <
  TData = GetSalesCreditNoteFormStateDataQuery,
  TError = unknown
>(
  variables: GetSalesCreditNoteFormStateDataQueryVariables,
  options?: UseQueryOptions<GetSalesCreditNoteFormStateDataQuery, TError, TData>
) =>
  useQuery<GetSalesCreditNoteFormStateDataQuery, TError, TData>(
    ['getSalesCreditNoteFormStateData', variables],
    useAxios<GetSalesCreditNoteFormStateDataQuery, GetSalesCreditNoteFormStateDataQueryVariables>(
      GetSalesCreditNoteFormStateDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCustomerPaymentListDataDocument = `
    query getSalesCustomerPaymentListData($pagination: Pagination, $filter: SalesCustomerPaymentFilter) {
  accounting {
    sales {
      listCustomerPayment(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            receivedFrom
            totalAmount
            date
            paymentMode
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetSalesCustomerPaymentListDataQuery = <
  TData = GetSalesCustomerPaymentListDataQuery,
  TError = unknown
>(
  variables?: GetSalesCustomerPaymentListDataQueryVariables,
  options?: UseQueryOptions<GetSalesCustomerPaymentListDataQuery, TError, TData>
) =>
  useQuery<GetSalesCustomerPaymentListDataQuery, TError, TData>(
    variables === undefined
      ? ['getSalesCustomerPaymentListData']
      : ['getSalesCustomerPaymentListData', variables],
    useAxios<GetSalesCustomerPaymentListDataQuery, GetSalesCustomerPaymentListDataQueryVariables>(
      GetSalesCustomerPaymentListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCustomerPaymentFormStateDataDocument = `
    query getSalesCustomerPaymentFormStateData($id: ID!) {
  accounting {
    sales {
      customerPaymentFormState(id: $id) {
        data {
          receivedFrom
          receivedAccount
          receivedAmount
          receivedDate
          paymentMethod
          paymentReferenceNo
          tds
          tdsAccount
          tdsType
          tdsAmount
          paymentAllocation {
            type
            date
            amount
            leftToAllocate
            thisAllocation
          }
          notes
        }
      }
    }
  }
}
    `;
export const useGetSalesCustomerPaymentFormStateDataQuery = <
  TData = GetSalesCustomerPaymentFormStateDataQuery,
  TError = unknown
>(
  variables: GetSalesCustomerPaymentFormStateDataQueryVariables,
  options?: UseQueryOptions<GetSalesCustomerPaymentFormStateDataQuery, TError, TData>
) =>
  useQuery<GetSalesCustomerPaymentFormStateDataQuery, TError, TData>(
    ['getSalesCustomerPaymentFormStateData', variables],
    useAxios<
      GetSalesCustomerPaymentFormStateDataQuery,
      GetSalesCustomerPaymentFormStateDataQueryVariables
    >(GetSalesCustomerPaymentFormStateDataDocument).bind(null, variables),
    options
  );
export const AllAdministrationDocument = `
    query allAdministration {
  administration {
    all {
      id
      name
      districts {
        id
        name
        municipalities {
          id
          name
          wards
        }
      }
    }
  }
}
    `;
export const useAllAdministrationQuery = <TData = AllAdministrationQuery, TError = unknown>(
  variables?: AllAdministrationQueryVariables,
  options?: UseQueryOptions<AllAdministrationQuery, TError, TData>
) =>
  useQuery<AllAdministrationQuery, TError, TData>(
    variables === undefined ? ['allAdministration'] : ['allAdministration', variables],
    useAxios<AllAdministrationQuery, AllAdministrationQueryVariables>(
      AllAdministrationDocument
    ).bind(null, variables),
    options
  );
export const GetAllProvinceDocument = `
    query getAllProvince {
  administration {
    provinces {
      id
      name
    }
  }
}
    `;
export const useGetAllProvinceQuery = <TData = GetAllProvinceQuery, TError = unknown>(
  variables?: GetAllProvinceQueryVariables,
  options?: UseQueryOptions<GetAllProvinceQuery, TError, TData>
) =>
  useQuery<GetAllProvinceQuery, TError, TData>(
    variables === undefined ? ['getAllProvince'] : ['getAllProvince', variables],
    useAxios<GetAllProvinceQuery, GetAllProvinceQueryVariables>(GetAllProvinceDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllDistrictsDocument = `
    query getAllDistricts {
  administration {
    districts {
      id
      name
    }
  }
}
    `;
export const useGetAllDistrictsQuery = <TData = GetAllDistrictsQuery, TError = unknown>(
  variables?: GetAllDistrictsQueryVariables,
  options?: UseQueryOptions<GetAllDistrictsQuery, TError, TData>
) =>
  useQuery<GetAllDistrictsQuery, TError, TData>(
    variables === undefined ? ['getAllDistricts'] : ['getAllDistricts', variables],
    useAxios<GetAllDistrictsQuery, GetAllDistrictsQueryVariables>(GetAllDistrictsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllLocalGovernmentDocument = `
    query getAllLocalGovernment {
  administration {
    municipalities {
      id
      name
    }
  }
}
    `;
export const useGetAllLocalGovernmentQuery = <TData = GetAllLocalGovernmentQuery, TError = unknown>(
  variables?: GetAllLocalGovernmentQueryVariables,
  options?: UseQueryOptions<GetAllLocalGovernmentQuery, TError, TData>
) =>
  useQuery<GetAllLocalGovernmentQuery, TError, TData>(
    variables === undefined ? ['getAllLocalGovernment'] : ['getAllLocalGovernment', variables],
    useAxios<GetAllLocalGovernmentQuery, GetAllLocalGovernmentQueryVariables>(
      GetAllLocalGovernmentDocument
    ).bind(null, variables),
    options
  );
export const GetAgentListDataDocument = `
    query getAgentListData($filter: AccountTransactionFilter, $pagination: Pagination) {
  transaction {
    listAgent(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          agentName
          phoneNo
          assignedMember
          profilePicUrl
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAgentListDataQuery = <TData = GetAgentListDataQuery, TError = unknown>(
  variables?: GetAgentListDataQueryVariables,
  options?: UseQueryOptions<GetAgentListDataQuery, TError, TData>
) =>
  useQuery<GetAgentListDataQuery, TError, TData>(
    variables === undefined ? ['getAgentListData'] : ['getAgentListData', variables],
    useAxios<GetAgentListDataQuery, GetAgentListDataQueryVariables>(GetAgentListDataDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAgentDetailDataDocument = `
    query getAgentDetailData($id: ID!) {
  transaction {
    agentDetail(id: $id) {
      data {
        id
        name
        branch
        totalMembers
        profilePicUrl
      }
    }
  }
}
    `;
export const useGetAgentDetailDataQuery = <TData = GetAgentDetailDataQuery, TError = unknown>(
  variables: GetAgentDetailDataQueryVariables,
  options?: UseQueryOptions<GetAgentDetailDataQuery, TError, TData>
) =>
  useQuery<GetAgentDetailDataQuery, TError, TData>(
    ['getAgentDetailData', variables],
    useAxios<GetAgentDetailDataQuery, GetAgentDetailDataQueryVariables>(
      GetAgentDetailDataDocument
    ).bind(null, variables),
    options
  );
export const GetAgentAssignedMemberListDataDocument = `
    query getAgentAssignedMemberListData($filter: AssignedMemberListFiler, $pagination: Pagination) {
  transaction {
    assignedMemberList(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          member {
            id
            name
            code
          }
          account {
            id
            dues {
              totalDue
            }
          }
          product {
            productName
          }
          assignedDate
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAgentAssignedMemberListDataQuery = <
  TData = GetAgentAssignedMemberListDataQuery,
  TError = unknown
>(
  variables?: GetAgentAssignedMemberListDataQueryVariables,
  options?: UseQueryOptions<GetAgentAssignedMemberListDataQuery, TError, TData>
) =>
  useQuery<GetAgentAssignedMemberListDataQuery, TError, TData>(
    variables === undefined
      ? ['getAgentAssignedMemberListData']
      : ['getAgentAssignedMemberListData', variables],
    useAxios<GetAgentAssignedMemberListDataQuery, GetAgentAssignedMemberListDataQueryVariables>(
      GetAgentAssignedMemberListDataDocument
    ).bind(null, variables),
    options
  );
export const GetAgentTodayListDataDocument = `
    query getAgentTodayListData($id: ID!) {
  transaction {
    listAgentTask(id: $id) {
      record {
        member {
          id
        }
        account {
          id
        }
        amount
        paid
      }
    }
  }
}
    `;
export const useGetAgentTodayListDataQuery = <TData = GetAgentTodayListDataQuery, TError = unknown>(
  variables: GetAgentTodayListDataQueryVariables,
  options?: UseQueryOptions<GetAgentTodayListDataQuery, TError, TData>
) =>
  useQuery<GetAgentTodayListDataQuery, TError, TData>(
    ['getAgentTodayListData', variables],
    useAxios<GetAgentTodayListDataQuery, GetAgentTodayListDataQueryVariables>(
      GetAgentTodayListDataDocument
    ).bind(null, variables),
    options
  );
export const GetMeDocument = `
    query getMe {
  auth {
    me {
      data {
        user {
          id
          username
          email
          firstName
          lastName
          role
          profilePic
          branch {
            id
            name
          }
          organization {
            basicDetails {
              name
              logo
            }
            contactDetails {
              website
              phoneNumber
              email
            }
            address {
              district
              wardNo
              state
              locality
              localGovernment
              houseNo
            }
            registrationDetails {
              regdNo
              panOrVat
            }
          }
        }
        preference {
          language
          languageCode
          date
        }
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetMeQuery = <TData = GetMeQuery, TError = unknown>(
  variables?: GetMeQueryVariables,
  options?: UseQueryOptions<GetMeQuery, TError, TData>
) =>
  useQuery<GetMeQuery, TError, TData>(
    variables === undefined ? ['getMe'] : ['getMe', variables],
    useAxios<GetMeQuery, GetMeQueryVariables>(GetMeDocument).bind(null, variables),
    options
  );
export const GetBankListDocument = `
    query getBankList {
  bank {
    bank {
      list {
        id
        name
      }
    }
  }
}
    `;
export const useGetBankListQuery = <TData = GetBankListQuery, TError = unknown>(
  variables?: GetBankListQueryVariables,
  options?: UseQueryOptions<GetBankListQuery, TError, TData>
) =>
  useQuery<GetBankListQuery, TError, TData>(
    variables === undefined ? ['getBankList'] : ['getBankList', variables],
    useAxios<GetBankListQuery, GetBankListQueryVariables>(GetBankListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetUserBranchListDocument = `
    query getUserBranchList {
  bank {
    branch {
      list {
        id
        name
      }
    }
  }
}
    `;
export const useGetUserBranchListQuery = <TData = GetUserBranchListQuery, TError = unknown>(
  variables?: GetUserBranchListQueryVariables,
  options?: UseQueryOptions<GetUserBranchListQuery, TError, TData>
) =>
  useQuery<GetUserBranchListQuery, TError, TData>(
    variables === undefined ? ['getUserBranchList'] : ['getUserBranchList', variables],
    useAxios<GetUserBranchListQuery, GetUserBranchListQueryVariables>(
      GetUserBranchListDocument
    ).bind(null, variables),
    options
  );
export const GetConfigDocument = `
    query getConfig {
  config {
    countries {
      name
      code
    }
  }
}
    `;
export const useGetConfigQuery = <TData = GetConfigQuery, TError = unknown>(
  variables?: GetConfigQueryVariables,
  options?: UseQueryOptions<GetConfigQuery, TError, TData>
) =>
  useQuery<GetConfigQuery, TError, TData>(
    variables === undefined ? ['getConfig'] : ['getConfig', variables],
    useAxios<GetConfigQuery, GetConfigQueryVariables>(GetConfigDocument).bind(null, variables),
    options
  );
export const GetCoOperativeKymEditDataDocument = `
    query getCoOperativeKymEditData($id: ID!, $hasPressedNext: Boolean) {
  members {
    cooperative(includeRequiredErrors: $hasPressedNext) {
      formState(id: $id) {
        data {
          formData {
            nameOfOrganization
            regdNumber
            regdDate
            regdOffice
            registeredAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            operatingAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            email
            website
            contactNumber
            noOfMaleMembers
            noOfFemaleMembers
            noOfOtherMembers
            lastAuditDate
            lastAgmDate
            representativeFullName
            representativeDesignatiton
            representativeEmail
            representativeContactNumber
            representativePanNo
            permanentRepresentativeAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            isPermanentAndTemporaryAddressSame
            temporaryRepresentativeAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            cooperativeTypeId
            mainServiceProduct
            noOfMaleEmployee
            noOfFemaleEmployee
            totalEmployee
            shareCapital
            reserveAndSurplus
            savingDeposit
            loanAccount
            capitalGrant
            currentLiabilities
            nonCurrentLiabilities
            cashAndCashEquivalent
            bank
            investments
            loan
            nonCurrentAssets
            otherNonCurrentAssets
            totalAssets
            accountHoldersName
            hasTCAccepted
          }
          sectionStatus {
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
        }
      }
      overallFormStatus(id: $id) {
        coopDetails {
          id
          sectionStatus {
            errors
            incomplete
          }
        }
      }
    }
  }
}
    `;
export const useGetCoOperativeKymEditDataQuery = <
  TData = GetCoOperativeKymEditDataQuery,
  TError = unknown
>(
  variables: GetCoOperativeKymEditDataQueryVariables,
  options?: UseQueryOptions<GetCoOperativeKymEditDataQuery, TError, TData>
) =>
  useQuery<GetCoOperativeKymEditDataQuery, TError, TData>(
    ['getCoOperativeKymEditData', variables],
    useAxios<GetCoOperativeKymEditDataQuery, GetCoOperativeKymEditDataQueryVariables>(
      GetCoOperativeKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetCoOperativeDirectorEditDataDocument = `
    query getCoOperativeDirectorEditData($id: ID!, $hasPressedNext: Boolean) {
  members {
    cooperative(includeRequiredErrors: $hasPressedNext) {
      listDirectors(id: $id) {
        data {
          id
          fullName
          designation
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isPermanentAndTemporaryAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          dateOfMembership
          highestQualification
          contactNumber
          email
          citizenshipNo
          panNo
        }
        sectionStatus {
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
      }
    }
  }
}
    `;
export const useGetCoOperativeDirectorEditDataQuery = <
  TData = GetCoOperativeDirectorEditDataQuery,
  TError = unknown
>(
  variables: GetCoOperativeDirectorEditDataQueryVariables,
  options?: UseQueryOptions<GetCoOperativeDirectorEditDataQuery, TError, TData>
) =>
  useQuery<GetCoOperativeDirectorEditDataQuery, TError, TData>(
    ['getCoOperativeDirectorEditData', variables],
    useAxios<GetCoOperativeDirectorEditDataQuery, GetCoOperativeDirectorEditDataQueryVariables>(
      GetCoOperativeDirectorEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetCoOperativeAccountOperatorEditDataDocument = `
    query getCoOperativeAccountOperatorEditData($id: ID!, $hasPressedNext: Boolean) {
  members {
    cooperative(includeRequiredErrors: $hasPressedNext) {
      listAccountOperators(id: $id) {
        data {
          id
          fullName
          designation
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isPermanentAndTemporaryAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          dateOfMembership
          highestQualification
          contactNumber
          email
          citizenshipNo
          panNo
          coopRelatedTraining {
            subjectOfTraining
            dateOfTraining
            trainingOrganization
          }
        }
        sectionStatus {
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
      }
    }
  }
}
    `;
export const useGetCoOperativeAccountOperatorEditDataQuery = <
  TData = GetCoOperativeAccountOperatorEditDataQuery,
  TError = unknown
>(
  variables: GetCoOperativeAccountOperatorEditDataQueryVariables,
  options?: UseQueryOptions<GetCoOperativeAccountOperatorEditDataQuery, TError, TData>
) =>
  useQuery<GetCoOperativeAccountOperatorEditDataQuery, TError, TData>(
    ['getCoOperativeAccountOperatorEditData', variables],
    useAxios<
      GetCoOperativeAccountOperatorEditDataQuery,
      GetCoOperativeAccountOperatorEditDataQueryVariables
    >(GetCoOperativeAccountOperatorEditDataDocument).bind(null, variables),
    options
  );
export const GetKymCooperativeOverallFormStatusDocument = `
    query getKYMCooperativeOverallFormStatus($id: ID!, $hasPressedNext: Boolean) {
  members {
    cooperative(includeRequiredErrors: $hasPressedNext) {
      overallFormStatus(id: $id) {
        coopDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        directorsDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        accountOperatorDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
      }
    }
  }
}
    `;
export const useGetKymCooperativeOverallFormStatusQuery = <
  TData = GetKymCooperativeOverallFormStatusQuery,
  TError = unknown
>(
  variables: GetKymCooperativeOverallFormStatusQueryVariables,
  options?: UseQueryOptions<GetKymCooperativeOverallFormStatusQuery, TError, TData>
) =>
  useQuery<GetKymCooperativeOverallFormStatusQuery, TError, TData>(
    ['getKYMCooperativeOverallFormStatus', variables],
    useAxios<
      GetKymCooperativeOverallFormStatusQuery,
      GetKymCooperativeOverallFormStatusQueryVariables
    >(GetKymCooperativeOverallFormStatusDocument).bind(null, variables),
    options
  );
export const GetCooperativeUnionKymEditDataDocument = `
    query getCooperativeUnionKymEditData($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          institutionInformation {
            data {
              nameOfInstitutionEn
              nameOfInstitutionNp
              institutionType
              natureOfBusinessEn
              natureOfBusinessNp
              regdDate
              vatOrPan
              noOfBranches
              regdNo
              issuingOffice
              regdAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              operatingOfficeAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              branchOfficeAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              phone
              fax
              contactEmail
              website
              postBoxNo
              noOfEmployee
              lastAgmDate
              nameOfBank
              accountNumber
              accountName
              applicantName
              applicantNameNp
              applicantDesignationEn
              applicantDesignationNp
              applicantEmail
              applicantContactNo
              applicantPanNo
              applicantDateOfMembership
              applicantHighestQualification
              applicantPermanentAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              applicantIsPermanentAndTemporaryAddrSame
              applicantTemporaryAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              noOfMaleMemberCurrent
              noOfMaleMemberTarget
              noOfFemaleMemberCurrent
              noOfFemaleMemberTarget
              noOfInstitutionalMemberCurrent
              noOfInstitutionalMemberTarget
            }
            sectionStatus {
              id
              errors
              sectionStatus {
                errors
                incomplete
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCooperativeUnionKymEditDataQuery = <
  TData = GetCooperativeUnionKymEditDataQuery,
  TError = unknown
>(
  variables: GetCooperativeUnionKymEditDataQueryVariables,
  options?: UseQueryOptions<GetCooperativeUnionKymEditDataQuery, TError, TData>
) =>
  useQuery<GetCooperativeUnionKymEditDataQuery, TError, TData>(
    ['getCooperativeUnionKymEditData', variables],
    useAxios<GetCooperativeUnionKymEditDataQuery, GetCooperativeUnionKymEditDataQueryVariables>(
      GetCooperativeUnionKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetEconimicDetailsEditDataDocument = `
    query getEconimicDetailsEditData($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          economicDetails {
            data {
              cashAndCashEquivalentCurrent
              cashAndCashEquivalentTarget
              bankCurrent
              bankTarget
              investmentsCurrent
              investmentsTarget
              loanCurrent
              loanTarget
              nonCurrentAssetsCurrent
              nonCurrentAssetsTarget
              otherNonCurrentAssetsCurrent
              otherNonCurrentAssetsTarget
              shareCapitalCurrent
              shareCapitalTarget
              reserveAndSurplusCurrent
              reserveAndSurplusTarget
              savingDepositCurrent
              savingDepositTarget
              loanAccountCurrent
              loanAccountTarget
              capitalGrantCurrent
              capitalGrantTarget
              currentLiabilitiesCurrent
              currentLiabilitiesTarget
              nonCurrentLiabilitiesCurrent
              nonCurrentLiabilitiesTarget
              incomeFromFinancialInvestment
              incomeFromNonFinancialInvestment
              incomeFromInvestment
              incomeFromServiceOperation
              incomeFromSales
              otherIncome
              miscellaneousIncome
              purchase
              directExpense
              administrativeExpense
              financialCost
              riskManagementCost
              deferredTaxExpense
            }
            sectionStatus {
              id
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetEconimicDetailsEditDataQuery = <
  TData = GetEconimicDetailsEditDataQuery,
  TError = unknown
>(
  variables: GetEconimicDetailsEditDataQueryVariables,
  options?: UseQueryOptions<GetEconimicDetailsEditDataQuery, TError, TData>
) =>
  useQuery<GetEconimicDetailsEditDataQuery, TError, TData>(
    ['getEconimicDetailsEditData', variables],
    useAxios<GetEconimicDetailsEditDataQuery, GetEconimicDetailsEditDataQueryVariables>(
      GetEconimicDetailsEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetBoardOfDirectorsDetailsListDocument = `
    query getBoardOfDirectorsDetailsList($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          boardOfDirectorsDetails {
            data {
              personnelDetails {
                id
                cooperativeUnionId
                fullName
                fullNameNp
                designationEn
                designationNp
                permanentAddress {
                  provinceId
                  districtId
                  localGovernmentId
                  wardNo
                  locality
                  houseNo
                  coordinates {
                    longitude
                    latitude
                  }
                }
                isPermanentAndTemporaryAddressSame
                temporaryAddress {
                  provinceId
                  districtId
                  localGovernmentId
                  wardNo
                  locality
                  houseNo
                  coordinates {
                    longitude
                    latitude
                  }
                }
                dateOfMembership
                highestQualification
                mobileNumber
                email
                citizenshipNo
                trainingAttended {
                  subjectOfTraining
                  dateOfTraining
                  trainingOrganization
                }
                panNo
              }
            }
            sectionStatus {
              id
              errors
              sectionStatus {
                errors
                incomplete
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetBoardOfDirectorsDetailsListQuery = <
  TData = GetBoardOfDirectorsDetailsListQuery,
  TError = unknown
>(
  variables: GetBoardOfDirectorsDetailsListQueryVariables,
  options?: UseQueryOptions<GetBoardOfDirectorsDetailsListQuery, TError, TData>
) =>
  useQuery<GetBoardOfDirectorsDetailsListQuery, TError, TData>(
    ['getBoardOfDirectorsDetailsList', variables],
    useAxios<GetBoardOfDirectorsDetailsListQuery, GetBoardOfDirectorsDetailsListQueryVariables>(
      GetBoardOfDirectorsDetailsListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOperatorDetailsListDocument = `
    query getAccountOperatorDetailsList($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          accountOperatorsDetails {
            data {
              personnelDetails {
                id
                cooperativeUnionId
                fullName
                fullNameNp
                designationEn
                designationNp
                permanentAddress {
                  provinceId
                  districtId
                  localGovernmentId
                  wardNo
                  locality
                  houseNo
                  coordinates {
                    longitude
                    latitude
                  }
                }
                isPermanentAndTemporaryAddressSame
                temporaryAddress {
                  provinceId
                  districtId
                  localGovernmentId
                  wardNo
                  locality
                  houseNo
                  coordinates {
                    longitude
                    latitude
                  }
                }
                dateOfMembership
                highestQualification
                mobileNumber
                email
                citizenshipNo
                trainingAttended {
                  subjectOfTraining
                  dateOfTraining
                  trainingOrganization
                }
                panNo
              }
            }
            sectionStatus {
              id
              errors
              sectionStatus {
                errors
                incomplete
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOperatorDetailsListQuery = <
  TData = GetAccountOperatorDetailsListQuery,
  TError = unknown
>(
  variables: GetAccountOperatorDetailsListQueryVariables,
  options?: UseQueryOptions<GetAccountOperatorDetailsListQuery, TError, TData>
) =>
  useQuery<GetAccountOperatorDetailsListQuery, TError, TData>(
    ['getAccountOperatorDetailsList', variables],
    useAxios<GetAccountOperatorDetailsListQuery, GetAccountOperatorDetailsListQueryVariables>(
      GetAccountOperatorDetailsListDocument
    ).bind(null, variables),
    options
  );
export const GetCentralRepresentativeDetailsDocument = `
    query getCentralRepresentativeDetails($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          centralRepresentativeDetails {
            data {
              id
              cooperativeUnionId
              fullName
              fullNameNp
              designationEn
              designationNp
              permanentAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              isPermanentAndTemporaryAddressSame
              temporaryAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              dateOfMembership
              highestQualification
              mobileNumber
              email
              citizenshipNo
              trainingAttended {
                subjectOfTraining
                dateOfTraining
                trainingOrganization
              }
              panNo
              notAmongDirectors
              centralRepID
            }
            sectionStatus {
              id
              errors
              sectionStatus {
                errors
                incomplete
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCentralRepresentativeDetailsQuery = <
  TData = GetCentralRepresentativeDetailsQuery,
  TError = unknown
>(
  variables: GetCentralRepresentativeDetailsQueryVariables,
  options?: UseQueryOptions<GetCentralRepresentativeDetailsQuery, TError, TData>
) =>
  useQuery<GetCentralRepresentativeDetailsQuery, TError, TData>(
    ['getCentralRepresentativeDetails', variables],
    useAxios<GetCentralRepresentativeDetailsQuery, GetCentralRepresentativeDetailsQueryVariables>(
      GetCentralRepresentativeDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetCoopUnionSectionStatusDocument = `
    query getCoopUnionSectionStatus($id: ID!) {
  members {
    cooperativeUnion {
      formState(id: $id) {
        sectionStatus {
          institutionInformation {
            id
            sectionStatus {
              errors
              incomplete
            }
            errors
          }
          bodDetails {
            id
            sectionStatus {
              errors
              incomplete
            }
            errors
          }
          accountOperatorDetails {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
          centralRepresentativeDetails {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
          economicDetails {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
          declaration {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCoopUnionSectionStatusQuery = <
  TData = GetCoopUnionSectionStatusQuery,
  TError = unknown
>(
  variables: GetCoopUnionSectionStatusQueryVariables,
  options?: UseQueryOptions<GetCoopUnionSectionStatusQuery, TError, TData>
) =>
  useQuery<GetCoopUnionSectionStatusQuery, TError, TData>(
    ['getCoopUnionSectionStatus', variables],
    useAxios<GetCoopUnionSectionStatusQuery, GetCoopUnionSectionStatusQueryVariables>(
      GetCoopUnionSectionStatusDocument
    ).bind(null, variables),
    options
  );
export const GetDashboardDayInfoDocument = `
    query getDashboardDayInfo {
  dashboard {
    myDayInfo {
      data {
        deposit {
          todayValue
          percent
          noOfTransaction
        }
        withdraw {
          todayValue
          percent
          noOfTransaction
        }
        cashInHand {
          todayValue
          percent
          fromVault
        }
      }
    }
  }
}
    `;
export const useGetDashboardDayInfoQuery = <TData = GetDashboardDayInfoQuery, TError = unknown>(
  variables?: GetDashboardDayInfoQueryVariables,
  options?: UseQueryOptions<GetDashboardDayInfoQuery, TError, TData>
) =>
  useQuery<GetDashboardDayInfoQuery, TError, TData>(
    variables === undefined ? ['getDashboardDayInfo'] : ['getDashboardDayInfo', variables],
    useAxios<GetDashboardDayInfoQuery, GetDashboardDayInfoQueryVariables>(
      GetDashboardDayInfoDocument
    ).bind(null, variables),
    options
  );
export const GetDashboardInfoDocument = `
    query getDashboardInfo {
  dashboard {
    dashboardInfo {
      data {
        pendingRequest {
          memberRequestCount
          withdrawSlipCount
          loanApplicationRequest
          loanDisbursementRequest
        }
        branchInfo {
          membersToApprove
          totalMembers
          percentofMemberRequest
          totalAccounts
          percentOfAccounts
        }
        coopInfo {
          totalMembers
          totalShareIssued
          totalBranch
        }
      }
    }
  }
}
    `;
export const useGetDashboardInfoQuery = <TData = GetDashboardInfoQuery, TError = unknown>(
  variables?: GetDashboardInfoQueryVariables,
  options?: UseQueryOptions<GetDashboardInfoQuery, TError, TData>
) =>
  useQuery<GetDashboardInfoQuery, TError, TData>(
    variables === undefined ? ['getDashboardInfo'] : ['getDashboardInfo', variables],
    useAxios<GetDashboardInfoQuery, GetDashboardInfoQueryVariables>(GetDashboardInfoDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetPreviousYearFundManagementDocument = `
    query getPreviousYearFundManagement {
  profitToFundManagement {
    previousYear {
      accountCode
      amount
      percent
    }
  }
}
    `;
export const useGetPreviousYearFundManagementQuery = <
  TData = GetPreviousYearFundManagementQuery,
  TError = unknown
>(
  variables?: GetPreviousYearFundManagementQueryVariables,
  options?: UseQueryOptions<GetPreviousYearFundManagementQuery, TError, TData>
) =>
  useQuery<GetPreviousYearFundManagementQuery, TError, TData>(
    variables === undefined
      ? ['getPreviousYearFundManagement']
      : ['getPreviousYearFundManagement', variables],
    useAxios<GetPreviousYearFundManagementQuery, GetPreviousYearFundManagementQueryVariables>(
      GetPreviousYearFundManagementDocument
    ).bind(null, variables),
    options
  );
export const GetKymFormStatusInstitutionDocument = `
    query getKymFormStatusInstitution($id: ID!, $hasPressedNext: Boolean) {
  members {
    institution(includeRequiredErrors: $hasPressedNext) {
      formState(id: $id) {
        data {
          sectionStatus {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetKymFormStatusInstitutionQuery = <
  TData = GetKymFormStatusInstitutionQuery,
  TError = unknown
>(
  variables: GetKymFormStatusInstitutionQueryVariables,
  options?: UseQueryOptions<GetKymFormStatusInstitutionQuery, TError, TData>
) =>
  useQuery<GetKymFormStatusInstitutionQuery, TError, TData>(
    ['getKymFormStatusInstitution', variables],
    useAxios<GetKymFormStatusInstitutionQuery, GetKymFormStatusInstitutionQueryVariables>(
      GetKymFormStatusInstitutionDocument
    ).bind(null, variables),
    options
  );
export const GetKymOverallFormStatusDocument = `
    query getKYMOverallFormStatus($id: ID!, $hasPressedNext: Boolean) {
  members {
    institution(includeRequiredErrors: $hasPressedNext) {
      overallFormStatus(id: $id) {
        accountOperatorDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        directorDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        institutionDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        sisterConcernDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
      }
    }
  }
}
    `;
export const useGetKymOverallFormStatusQuery = <
  TData = GetKymOverallFormStatusQuery,
  TError = unknown
>(
  variables: GetKymOverallFormStatusQueryVariables,
  options?: UseQueryOptions<GetKymOverallFormStatusQuery, TError, TData>
) =>
  useQuery<GetKymOverallFormStatusQuery, TError, TData>(
    ['getKYMOverallFormStatus', variables],
    useAxios<GetKymOverallFormStatusQuery, GetKymOverallFormStatusQueryVariables>(
      GetKymOverallFormStatusDocument
    ).bind(null, variables),
    options
  );
export const GetInstitutionKymEditDataDocument = `
    query getInstitutionKymEditData($id: ID!, $hasPressedNext: Boolean) {
  members {
    institution(includeRequiredErrors: $hasPressedNext) {
      formState(id: $id) {
        data {
          lastUpdated {
            ... on KymInsInformationLUS {
              information: name
            }
            ... on KymInsTransactionLUS {
              transaction: name
            }
            ... on KymInsDirectorDetailsLUS {
              directorDetails: name
            }
            ... on KymInsAccountLUS {
              account: name
            }
            ... on KymInsDeclarationLUS {
              declaration: name
            }
          }
          sectionStatus {
            sectionStatus {
              incomplete
              errors
            }
            errors
            id
          }
          formData {
            institutionName
            institutionTypeId
            natureOfBusiness
            registrationDate
            vatOrPanNo
            operatingOfficeAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            noOfBranches
            branchOfficeAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            registeredAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            registeredNumber
            issuingOffice
            phone
            fax
            email
            website
            postBoxNo
            numberOfEmployee
            dateOfLastAGM
            bank
            accountNumber
            accountName
            natureOfTransaction
            annualTurnover
            initialDepositAmount
            expectedMonthlyTurnover
            expectedMonthlyTransaction
            accountType
            isCompanyStampCompulsory
            specialInstruction
            companyStamp
            accountHolderName
            accountHolderPhone
            accountHolderEmail
            accountHolderAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetInstitutionKymEditDataQuery = <
  TData = GetInstitutionKymEditDataQuery,
  TError = unknown
>(
  variables: GetInstitutionKymEditDataQueryVariables,
  options?: UseQueryOptions<GetInstitutionKymEditDataQuery, TError, TData>
) =>
  useQuery<GetInstitutionKymEditDataQuery, TError, TData>(
    ['getInstitutionKymEditData', variables],
    useAxios<GetInstitutionKymEditDataQuery, GetInstitutionKymEditDataQueryVariables>(
      GetInstitutionKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetInstitutionSisterDetailsEditListDocument = `
    query getInstitutionSisterDetailsEditList($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    institution(includeRequiredErrors: $includeRequiredErrors) {
      listSisterConcerns(id: $id) {
        data {
          id
          name
          natureOfBusiness
          address
          phone
        }
        sectionStatus {
          sectionStatus {
            errors
            incomplete
          }
          id
          errors
        }
      }
    }
  }
}
    `;
export const useGetInstitutionSisterDetailsEditListQuery = <
  TData = GetInstitutionSisterDetailsEditListQuery,
  TError = unknown
>(
  variables: GetInstitutionSisterDetailsEditListQueryVariables,
  options?: UseQueryOptions<GetInstitutionSisterDetailsEditListQuery, TError, TData>
) =>
  useQuery<GetInstitutionSisterDetailsEditListQuery, TError, TData>(
    ['getInstitutionSisterDetailsEditList', variables],
    useAxios<
      GetInstitutionSisterDetailsEditListQuery,
      GetInstitutionSisterDetailsEditListQueryVariables
    >(GetInstitutionSisterDetailsEditListDocument).bind(null, variables),
    options
  );
export const GetInsBoardDirectorEditListDocument = `
    query getInsBoardDirectorEditList($id: ID!, $hasRequiredErrors: Boolean) {
  members {
    institution(includeRequiredErrors: $hasRequiredErrors) {
      listDirectors(id: $id) {
        sectionStatus {
          sectionStatus {
            errors
            incomplete
          }
          id
          errors
        }
        data {
          id
          name
          designation
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isTemporaryAndPermanentAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          dateOfMembership
          highestQualification
          mobileNo
          email
          citizenshipNo
          panNo
          isHeadOfOrganization
          isAffiliatedWithOtherFirms
          firmDetails {
            directorName
            institutionName
            address
            designation
            yearlyIncome
          }
        }
      }
    }
  }
}
    `;
export const useGetInsBoardDirectorEditListQuery = <
  TData = GetInsBoardDirectorEditListQuery,
  TError = unknown
>(
  variables: GetInsBoardDirectorEditListQueryVariables,
  options?: UseQueryOptions<GetInsBoardDirectorEditListQuery, TError, TData>
) =>
  useQuery<GetInsBoardDirectorEditListQuery, TError, TData>(
    ['getInsBoardDirectorEditList', variables],
    useAxios<GetInsBoardDirectorEditListQuery, GetInsBoardDirectorEditListQueryVariables>(
      GetInsBoardDirectorEditListDocument
    ).bind(null, variables),
    options
  );
export const GetInsAccountOperatorEditListDocument = `
    query getInsAccountOperatorEditList($id: ID!, $hasRequiredErrors: Boolean) {
  members {
    institution(includeRequiredErrors: $hasRequiredErrors) {
      listAccountOperators(id: $id) {
        data {
          id
          name
          contact
          email
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isTemporaryAndPermanentAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          designation
          panNo
        }
        sectionStatus {
          sectionStatus {
            errors
            incomplete
          }
          id
          errors
        }
      }
    }
  }
}
    `;
export const useGetInsAccountOperatorEditListQuery = <
  TData = GetInsAccountOperatorEditListQuery,
  TError = unknown
>(
  variables: GetInsAccountOperatorEditListQueryVariables,
  options?: UseQueryOptions<GetInsAccountOperatorEditListQuery, TError, TData>
) =>
  useQuery<GetInsAccountOperatorEditListQuery, TError, TData>(
    ['getInsAccountOperatorEditList', variables],
    useAxios<GetInsAccountOperatorEditListQuery, GetInsAccountOperatorEditListQueryVariables>(
      GetInsAccountOperatorEditListDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryItemsDocument = `
    query getInventoryItems {
  inventory {
    items {
      list {
        edges {
          node {
            id
            name
            type
            unitPrice
            itemQuantity
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryItemsQuery = <TData = GetInventoryItemsQuery, TError = unknown>(
  variables?: GetInventoryItemsQueryVariables,
  options?: UseQueryOptions<GetInventoryItemsQuery, TError, TData>
) =>
  useQuery<GetInventoryItemsQuery, TError, TData>(
    variables === undefined ? ['getInventoryItems'] : ['getInventoryItems', variables],
    useAxios<GetInventoryItemsQuery, GetInventoryItemsQueryVariables>(
      GetInventoryItemsDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryItemGroupDocument = `
    query getInventoryItemGroup {
  inventory {
    itemsGroup {
      list {
        edges {
          node {
            name
            id
            description
            parentCategory
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryItemGroupQuery = <TData = GetInventoryItemGroupQuery, TError = unknown>(
  variables?: GetInventoryItemGroupQueryVariables,
  options?: UseQueryOptions<GetInventoryItemGroupQuery, TError, TData>
) =>
  useQuery<GetInventoryItemGroupQuery, TError, TData>(
    variables === undefined ? ['getInventoryItemGroup'] : ['getInventoryItemGroup', variables],
    useAxios<GetInventoryItemGroupQuery, GetInventoryItemGroupQueryVariables>(
      GetInventoryItemGroupDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryVendorDocument = `
    query getInventoryVendor {
  inventory {
    vendors {
      list {
        edges {
          node {
            name
            location
            email
            phoneNumber
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryVendorQuery = <TData = GetInventoryVendorQuery, TError = unknown>(
  variables?: GetInventoryVendorQueryVariables,
  options?: UseQueryOptions<GetInventoryVendorQuery, TError, TData>
) =>
  useQuery<GetInventoryVendorQuery, TError, TData>(
    variables === undefined ? ['getInventoryVendor'] : ['getInventoryVendor', variables],
    useAxios<GetInventoryVendorQuery, GetInventoryVendorQueryVariables>(
      GetInventoryVendorDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryUnitOfMeasureDocument = `
    query getInventoryUnitOfMeasure {
  inventory {
    unitOfMeasure {
      list {
        edges {
          node {
            name
            shortName
            acceptFraction
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryUnitOfMeasureQuery = <
  TData = GetInventoryUnitOfMeasureQuery,
  TError = unknown
>(
  variables?: GetInventoryUnitOfMeasureQueryVariables,
  options?: UseQueryOptions<GetInventoryUnitOfMeasureQuery, TError, TData>
) =>
  useQuery<GetInventoryUnitOfMeasureQuery, TError, TData>(
    variables === undefined
      ? ['getInventoryUnitOfMeasure']
      : ['getInventoryUnitOfMeasure', variables],
    useAxios<GetInventoryUnitOfMeasureQuery, GetInventoryUnitOfMeasureQueryVariables>(
      GetInventoryUnitOfMeasureDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymOptionsDocument = `
    query getIndividualKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_INDIVIDUAL}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymOptionsQuery = <
  TData = GetIndividualKymOptionsQuery,
  TError = unknown
>(
  variables: GetIndividualKymOptionsQueryVariables,
  options?: UseQueryOptions<GetIndividualKymOptionsQuery, TError, TData>
) =>
  useQuery<GetIndividualKymOptionsQuery, TError, TData>(
    ['getIndividualKYMOptions', variables],
    useAxios<GetIndividualKymOptionsQuery, GetIndividualKymOptionsQueryVariables>(
      GetIndividualKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetInstitutionKymOptionsDocument = `
    query getInstitutionKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_INSTITUTION}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetInstitutionKymOptionsQuery = <
  TData = GetInstitutionKymOptionsQuery,
  TError = unknown
>(
  variables: GetInstitutionKymOptionsQueryVariables,
  options?: UseQueryOptions<GetInstitutionKymOptionsQuery, TError, TData>
) =>
  useQuery<GetInstitutionKymOptionsQuery, TError, TData>(
    ['getInstitutionKYMOptions', variables],
    useAxios<GetInstitutionKymOptionsQuery, GetInstitutionKymOptionsQueryVariables>(
      GetInstitutionKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetCooperativeKymOptionsDocument = `
    query getCooperativeKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_COOP}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetCooperativeKymOptionsQuery = <
  TData = GetCooperativeKymOptionsQuery,
  TError = unknown
>(
  variables: GetCooperativeKymOptionsQueryVariables,
  options?: UseQueryOptions<GetCooperativeKymOptionsQuery, TError, TData>
) =>
  useQuery<GetCooperativeKymOptionsQuery, TError, TData>(
    ['getCooperativeKYMOptions', variables],
    useAxios<GetCooperativeKymOptionsQuery, GetCooperativeKymOptionsQueryVariables>(
      GetCooperativeKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetCoopUnionKymOptionsDocument = `
    query getCoopUnionKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_COOP_UNION}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetCoopUnionKymOptionsQuery = <
  TData = GetCoopUnionKymOptionsQuery,
  TError = unknown
>(
  variables: GetCoopUnionKymOptionsQueryVariables,
  options?: UseQueryOptions<GetCoopUnionKymOptionsQuery, TError, TData>
) =>
  useQuery<GetCoopUnionKymOptionsQuery, TError, TData>(
    ['getCoopUnionKYMOptions', variables],
    useAxios<GetCoopUnionKymOptionsQuery, GetCoopUnionKymOptionsQueryVariables>(
      GetCoopUnionKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductDetailsDataDocument = `
    query getLoanProductDetailsData($id: ID!) {
  settings {
    general {
      loanProducts {
        formState(id: $id) {
          data {
            ...LoanProduct
          }
          error {
            ...QueryError
          }
        }
      }
    }
  }
}
    ${LoanProductFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetLoanProductDetailsDataQuery = <
  TData = GetLoanProductDetailsDataQuery,
  TError = unknown
>(
  variables: GetLoanProductDetailsDataQueryVariables,
  options?: UseQueryOptions<GetLoanProductDetailsDataQuery, TError, TData>
) =>
  useQuery<GetLoanProductDetailsDataQuery, TError, TData>(
    ['getLoanProductDetailsData', variables],
    useAxios<GetLoanProductDetailsDataQuery, GetLoanProductDetailsDataQueryVariables>(
      GetLoanProductDetailsDataDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductsListDocument = `
    query getLoanProductsList($memberId: ID!, $productTypeId: ID!, $productSubTypeId: ID!) {
  loanAccount {
    getProductList(
      memberId: $memberId
      productSubTypeId: $productSubTypeId
      productType: $productTypeId
    ) {
      allowed {
        id
        productName
      }
      notAllowed {
        data {
          id
          productName
        }
        error
      }
    }
  }
}
    `;
export const useGetLoanProductsListQuery = <TData = GetLoanProductsListQuery, TError = unknown>(
  variables: GetLoanProductsListQueryVariables,
  options?: UseQueryOptions<GetLoanProductsListQuery, TError, TData>
) =>
  useQuery<GetLoanProductsListQuery, TError, TData>(
    ['getLoanProductsList', variables],
    useAxios<GetLoanProductsListQuery, GetLoanProductsListQueryVariables>(
      GetLoanProductsListDocument
    ).bind(null, variables),
    options
  );
export const GetProductCriteriaDocument = `
    query getProductCriteria($productId: ID!) {
  loanAccount {
    getProductCriteria(productId: $productId) {
      data {
        gender
        minAge
        maxAge
        ethnicity
        educationQualification
        occupation
        foreignEmployment
        institutionType
        cooperativeUnion
        cooperativeType
        maritalStatus
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetProductCriteriaQuery = <TData = GetProductCriteriaQuery, TError = unknown>(
  variables: GetProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetProductCriteriaQuery, TError, TData>(
    ['getProductCriteria', variables],
    useAxios<GetProductCriteriaQuery, GetProductCriteriaQueryVariables>(
      GetProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountTypeDocument = `
    query getLoanAccountType($productTypeId: String) {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
          }
          productSubTypes(productTypeID: $productTypeId) {
            id
            productSubType
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanAccountTypeQuery = <TData = GetLoanAccountTypeQuery, TError = unknown>(
  variables?: GetLoanAccountTypeQueryVariables,
  options?: UseQueryOptions<GetLoanAccountTypeQuery, TError, TData>
) =>
  useQuery<GetLoanAccountTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanAccountType'] : ['getLoanAccountType', variables],
    useAxios<GetLoanAccountTypeQuery, GetLoanAccountTypeQueryVariables>(
      GetLoanAccountTypeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductTypesDocument = `
    query getLoanProductTypes {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductTypesQuery = <TData = GetLoanProductTypesQuery, TError = unknown>(
  variables?: GetLoanProductTypesQueryVariables,
  options?: UseQueryOptions<GetLoanProductTypesQuery, TError, TData>
) =>
  useQuery<GetLoanProductTypesQuery, TError, TData>(
    variables === undefined ? ['getLoanProductTypes'] : ['getLoanProductTypes', variables],
    useAxios<GetLoanProductTypesQuery, GetLoanProductTypesQueryVariables>(
      GetLoanProductTypesDocument
    ).bind(null, variables),
    options
  );
export const GetCollateralListDocument = `
    query getCollateralList {
  settings {
    general {
      loan {
        general {
          collateralList {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetCollateralListQuery = <TData = GetCollateralListQuery, TError = unknown>(
  variables?: GetCollateralListQueryVariables,
  options?: UseQueryOptions<GetCollateralListQuery, TError, TData>
) =>
  useQuery<GetCollateralListQuery, TError, TData>(
    variables === undefined ? ['getCollateralList'] : ['getCollateralList', variables],
    useAxios<GetCollateralListQuery, GetCollateralListQueryVariables>(
      GetCollateralListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanListDocument = `
    query getLoanList($paginate: Pagination, $filter: LoanAccountSearchFilter) {
  loanAccount {
    list(paginate: $paginate, filter: $filter) {
      totalCount
      edges {
        cursor
        node {
          id
          member {
            id
            name
            profilePicUrl
          }
          product {
            productName
          }
          LoanAccountName
          createdAt
        }
      }
      pageInfo {
        endCursor
        startCursor
        hasNextPage
        hasPreviousPage
      }
    }
  }
}
    `;
export const useGetLoanListQuery = <TData = GetLoanListQuery, TError = unknown>(
  variables?: GetLoanListQueryVariables,
  options?: UseQueryOptions<GetLoanListQuery, TError, TData>
) =>
  useQuery<GetLoanListQuery, TError, TData>(
    variables === undefined ? ['getLoanList'] : ['getLoanList', variables],
    useAxios<GetLoanListQuery, GetLoanListQueryVariables>(GetLoanListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanInstallmentsDocument = `
    query getLoanInstallments($productId: ID!, $gracePeriod: LoanAccountGraceInput, $sanctionAmount: Int!, $tenure: Int!, $interest: Float!, $repaymentScheme: LoanRepaymentScheme!) {
  loanAccount {
    getLoanInstallments(
      interest: $interest
      gracePeriod: $gracePeriod
      productId: $productId
      repaymentScheme: $repaymentScheme
      sanctionAmount: $sanctionAmount
      tenure: $tenure
    ) {
      data {
        total
        totalInterest
        totalPrincipal
        installments {
          interest
          installmentDate
          installmentNo
          payment
          principal
          remainingPrincipal
          interest
        }
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanInstallmentsQuery = <TData = GetLoanInstallmentsQuery, TError = unknown>(
  variables: GetLoanInstallmentsQueryVariables,
  options?: UseQueryOptions<GetLoanInstallmentsQuery, TError, TData>
) =>
  useQuery<GetLoanInstallmentsQuery, TError, TData>(
    ['getLoanInstallments', variables],
    useAxios<GetLoanInstallmentsQuery, GetLoanInstallmentsQueryVariables>(
      GetLoanInstallmentsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanApplicationDetailsDocument = `
    query getLoanApplicationDetails($id: ID!) {
  loanAccount {
    formState(id: $id) {
      data {
        memberId
        productType
        productSubType
        productId
        loanAccountName
        appliedLoanAmount
        collateralData {
          collateralType
          ownerName
          relation
          sheetNo
          plotNo
          kittaNo
          area
          buildingType
          constructionType
          valuatorId
          noOfStorey
          fmvMaxAmount
          dvMinAmount
          valuationMethod
          valuationPercent
          collaterallValuation
          collateralDescription
          collateralFiles
          valuationFiles
          vehicleName
          vehicleModelNo
          vehicleRegistrationNo
          vehicleNo
          vehicleSeatCapacity
          vehicleCapacity
          vehicleType
          vehicleFuelType
          documentName
          valuationAmount
          description
        }
        gurantee_details {
          accountId
          guranteeAmount
          maxGuranteeAmountLimit
          memberId
          totalAmount
          accountName
        }
        gracePeriod {
          principalGracePeriod
          interestGracePeriod
        }
        linkedAccountId
        totalValuation
        totalSanctionedAmount
        justifySanction
        interestAuthority
        interestDoc {
          identifier
          url
        }
        intrestRate
        tenure
        tenureType
        repaymentScheme
        loanProcessingCharge {
          amount
          ledgerName
          serviceName
        }
        note
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanApplicationDetailsQuery = <
  TData = GetLoanApplicationDetailsQuery,
  TError = unknown
>(
  variables: GetLoanApplicationDetailsQueryVariables,
  options?: UseQueryOptions<GetLoanApplicationDetailsQuery, TError, TData>
) =>
  useQuery<GetLoanApplicationDetailsQuery, TError, TData>(
    ['getLoanApplicationDetails', variables],
    useAxios<GetLoanApplicationDetailsQuery, GetLoanApplicationDetailsQueryVariables>(
      GetLoanApplicationDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberLoanAccountsDocument = `
    query getMemberLoanAccounts($memberId: ID!) {
  loanAccount {
    memberDisbursedLoanAccounts(memberId: $memberId) {
      id
      name
    }
  }
}
    `;
export const useGetMemberLoanAccountsQuery = <TData = GetMemberLoanAccountsQuery, TError = unknown>(
  variables: GetMemberLoanAccountsQueryVariables,
  options?: UseQueryOptions<GetMemberLoanAccountsQuery, TError, TData>
) =>
  useQuery<GetMemberLoanAccountsQuery, TError, TData>(
    ['getMemberLoanAccounts', variables],
    useAxios<GetMemberLoanAccountsQuery, GetMemberLoanAccountsQueryVariables>(
      GetMemberLoanAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanPreviewDocument = `
    query getLoanPreview($id: String!) {
  loanAccount {
    loanPreview(loanAccountId: $id) {
      data {
        productId
        additionalFeatures {
          allowPartialInstallment
          collateral
          insurance
          isMonthlyInterestCompulsory
          loanScheduleChangeOverride
          overrideInterest
          staffProduct
          supportMultipleAccount
        }
        criteria {
          gender
          minAge
          maxAge
          ethnicity
          educationQualification
          maritalStatus
          foreignEmployment
          occupation
          institutionType
          cooperativeUnion
          cooperativeType
        }
        collateralAndGuarantees {
          name
          valuation
        }
        generalInformation {
          loanProduct
          loanSubType
          loanType
          natureOfLoanProduct
          loanName
          productCode
        }
        loanDetails {
          appliedLoanAmount
          interestMethod
          interestRate
          loanRepaymentScheme
          tenure
          tenureUnit
          totalCollateralValuation
          totalGuaranteeValuation
          totalProcessingChargesValuation
          totalSanctionedAmount
          totalDisbursedAmount
          principalGracePeriod
          interestGracePeriod
          interestAmount
          disburseDate
          expiryDate
          paymentFrequency
          processingCharges {
            name
            amount
          }
        }
        repaymentDetails {
          lastPaymentDate
          remainingPrincipal
          remainingInterest
          remainingTotal
          remainingInstallments {
            installmentNo
            principal
            fine
            interestAmount
          }
          totalInstallmentAmount
          nextInstallmentNo
        }
        member {
          name
          id
          code
          profilePicUrl
        }
        memberId
        productId
        paymentSchedule {
          total
          totalInterest
          totalPrincipal
          installments {
            installmentDate
            installmentNo
            interest
            payment
            principal
            remainingPrincipal
            paid
          }
        }
        statistics {
          remainingPayableAmount
          totalPaidAmount
          totalPayableAmount
        }
      }
    }
  }
}
    `;
export const useGetLoanPreviewQuery = <TData = GetLoanPreviewQuery, TError = unknown>(
  variables: GetLoanPreviewQueryVariables,
  options?: UseQueryOptions<GetLoanPreviewQuery, TError, TData>
) =>
  useQuery<GetLoanPreviewQuery, TError, TData>(
    ['getLoanPreview', variables],
    useAxios<GetLoanPreviewQuery, GetLoanPreviewQueryVariables>(GetLoanPreviewDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanRepaymentListDocument = `
    query getLoanRepaymentList($paginate: Pagination, $filter: LoanRepaymentFilter) {
  loanAccount {
    repaymentList(paginate: $paginate, filter: $filter) {
      totalCount
      edges {
        node {
          id
          loanAccountId
          memberId
          memberName
          memberCode
          memberProfilePicId
          memberProfilePicUrl
          loanAccountName
          loanProductId
          loanProductName
          amount
          paymentDate
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetLoanRepaymentListQuery = <TData = GetLoanRepaymentListQuery, TError = unknown>(
  variables?: GetLoanRepaymentListQueryVariables,
  options?: UseQueryOptions<GetLoanRepaymentListQuery, TError, TData>
) =>
  useQuery<GetLoanRepaymentListQuery, TError, TData>(
    variables === undefined ? ['getLoanRepaymentList'] : ['getLoanRepaymentList', variables],
    useAxios<GetLoanRepaymentListQuery, GetLoanRepaymentListQueryVariables>(
      GetLoanRepaymentListDocument
    ).bind(null, variables),
    options
  );
export const GetMemberLinkedAccountsDocument = `
    query getMemberLinkedAccounts($memberId: ID!, $filter: [NatureOfDepositProduct], $includeActiveAccountsOnly: Boolean) {
  members {
    getAllAccounts(memberId: $memberId) {
      data {
        depositAccount(
          filter: $filter
          includeActiveAccountsOnly: $includeActiveAccountsOnly
        ) {
          id
          accountName
          member {
            name
          }
          balance
          interestAccured
          interestTax
          prematurePenalty
          lastTransactionDate
          accountOpenedDate
          installmentAmount
          product {
            productName
            nature
          }
          accountExpiryDate
          overDrawnBalance
          guaranteedAmount
        }
      }
    }
  }
}
    `;
export const useGetMemberLinkedAccountsQuery = <
  TData = GetMemberLinkedAccountsQuery,
  TError = unknown
>(
  variables: GetMemberLinkedAccountsQueryVariables,
  options?: UseQueryOptions<GetMemberLinkedAccountsQuery, TError, TData>
) =>
  useQuery<GetMemberLinkedAccountsQuery, TError, TData>(
    ['getMemberLinkedAccounts', variables],
    useAxios<GetMemberLinkedAccountsQuery, GetMemberLinkedAccountsQueryVariables>(
      GetMemberLinkedAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetMultipleSubProductsDocument = `
    query getMultipleSubProducts($productTypeIds: [String]) {
  settings {
    general {
      loan {
        productType {
          multipleProductSubTypes(productTypeIds: $productTypeIds) {
            id
            productSubType
          }
        }
      }
    }
  }
}
    `;
export const useGetMultipleSubProductsQuery = <
  TData = GetMultipleSubProductsQuery,
  TError = unknown
>(
  variables?: GetMultipleSubProductsQueryVariables,
  options?: UseQueryOptions<GetMultipleSubProductsQuery, TError, TData>
) =>
  useQuery<GetMultipleSubProductsQuery, TError, TData>(
    variables === undefined ? ['getMultipleSubProducts'] : ['getMultipleSubProducts', variables],
    useAxios<GetMultipleSubProductsQuery, GetMultipleSubProductsQueryVariables>(
      GetMultipleSubProductsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductsFromSubTypeDocument = `
    query getLoanProductsFromSubType($subTypeIds: [String]) {
  settings {
    general {
      loan {
        productType {
          loanProducts(subTypeIds: $subTypeIds) {
            id
            productName
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductsFromSubTypeQuery = <
  TData = GetLoanProductsFromSubTypeQuery,
  TError = unknown
>(
  variables?: GetLoanProductsFromSubTypeQueryVariables,
  options?: UseQueryOptions<GetLoanProductsFromSubTypeQuery, TError, TData>
) =>
  useQuery<GetLoanProductsFromSubTypeQuery, TError, TData>(
    variables === undefined
      ? ['getLoanProductsFromSubType']
      : ['getLoanProductsFromSubType', variables],
    useAxios<GetLoanProductsFromSubTypeQuery, GetLoanProductsFromSubTypeQueryVariables>(
      GetLoanProductsFromSubTypeDocument
    ).bind(null, variables),
    options
  );
export const GetMemberListDocument = `
    query getMemberList($pagination: Pagination!, $filter: KymMemberDataFilter) {
  members {
    list(pagination: $pagination, filter: $filter) {
      totalCount
      edges {
        node {
          id
          name
          code
          type
          branch
          address {
            state
            district
            localGovernment
            wardNo
            locality
          }
          profilePicUrl
          signaturePicUrl
          contact
          createdAt
          dateJoined
          activeDate
          profile {
            ... on KymIndFormStateQuery {
              data {
                formData {
                  basicInformation {
                    genderId
                    gender
                    age
                  }
                  contactDetails {
                    mobileNumber
                    phoneNumber
                    email
                  }
                  maritalStatusId
                  maritalStatus
                }
              }
            }
          }
        }
        cursor
      }
      pageInfo {
        ...Pagination
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetMemberListQuery = <TData = GetMemberListQuery, TError = unknown>(
  variables: GetMemberListQueryVariables,
  options?: UseQueryOptions<GetMemberListQuery, TError, TData>
) =>
  useQuery<GetMemberListQuery, TError, TData>(
    ['getMemberList', variables],
    useAxios<GetMemberListQuery, GetMemberListQueryVariables>(GetMemberListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberTypesDocument = `
    query getMemberTypes {
  members {
    memberTypes {
      data {
        id
        type
      }
    }
  }
}
    `;
export const useGetMemberTypesQuery = <TData = GetMemberTypesQuery, TError = unknown>(
  variables?: GetMemberTypesQueryVariables,
  options?: UseQueryOptions<GetMemberTypesQuery, TError, TData>
) =>
  useQuery<GetMemberTypesQuery, TError, TData>(
    variables === undefined ? ['getMemberTypes'] : ['getMemberTypes', variables],
    useAxios<GetMemberTypesQuery, GetMemberTypesQueryVariables>(GetMemberTypesDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberTranslationDocument = `
    query getMemberTranslation($id: ID!) {
  members {
    translate(id: $id) {
      data {
        id
        data
        translatedValue
      }
    }
  }
}
    `;
export const useGetMemberTranslationQuery = <TData = GetMemberTranslationQuery, TError = unknown>(
  variables: GetMemberTranslationQueryVariables,
  options?: UseQueryOptions<GetMemberTranslationQuery, TError, TData>
) =>
  useQuery<GetMemberTranslationQuery, TError, TData>(
    ['getMemberTranslation', variables],
    useAxios<GetMemberTranslationQuery, GetMemberTranslationQueryVariables>(
      GetMemberTranslationDocument
    ).bind(null, variables),
    options
  );
export const GetKymFormStatusDocument = `
    query getKymFormStatus($id: String!, $hasPressedNext: Boolean) {
  members {
    individual(id: $id, hasPressedNext: $hasPressedNext) {
      formState {
        sectionStatus {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
      }
    }
  }
}
    `;
export const useGetKymFormStatusQuery = <TData = GetKymFormStatusQuery, TError = unknown>(
  variables: GetKymFormStatusQueryVariables,
  options?: UseQueryOptions<GetKymFormStatusQuery, TError, TData>
) =>
  useQuery<GetKymFormStatusQuery, TError, TData>(
    ['getKymFormStatus', variables],
    useAxios<GetKymFormStatusQuery, GetKymFormStatusQueryVariables>(GetKymFormStatusDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberIndividualDataDocument = `
    query getMemberIndividualData($id: ID!) {
  members {
    details(id: $id) {
      data {
        id
        code
        name
        profilePicUrl
        profilePic
        address {
          state
          district
          localGovernment
          wardNo
          locality
        }
        contact
        dateJoined
        profile {
          ... on KymIndFormStateQuery {
            data {
              formData {
                basicInformation {
                  dateOfBirth
                  age
                  gender
                }
                contactDetails {
                  email
                }
                maritalStatus
                maritalStatusId
              }
            }
          }
          ... on KymInsFormStateQuery {
            data {
              formData {
                institutionName
                institutionTypeId
                natureOfBusiness
              }
            }
          }
          ... on KymCooperativeFormStateQuery {
            data {
              formData {
                nameOfOrganization
                regdNumber
                regdDate
              }
            }
          }
          ... on CooperativeUnionMember {
            id
            institutionInformation {
              data {
                nameOfInstitutionEn
                nameOfInstitutionNp
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberIndividualDataQuery = <
  TData = GetMemberIndividualDataQuery,
  TError = unknown
>(
  variables: GetMemberIndividualDataQueryVariables,
  options?: UseQueryOptions<GetMemberIndividualDataQuery, TError, TData>
) =>
  useQuery<GetMemberIndividualDataQuery, TError, TData>(
    ['getMemberIndividualData', variables],
    useAxios<GetMemberIndividualDataQuery, GetMemberIndividualDataQueryVariables>(
      GetMemberIndividualDataDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymEditDataDocument = `
    query getIndividualKymEditData($id: String!, $hasPressedNext: Boolean) {
  members {
    individual(id: $id, hasPressedNext: $hasPressedNext) {
      formState {
        sectionStatus {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        data {
          formData {
            basicInformation {
              firstName
              middleName
              lastName
              genderId
              dateOfBirth
              ethnicityId
              nationalityId
              educationQualificationId
              religionId
              educationQualificationId
              religionId
            }
            contactDetails {
              mobileNumber
              phoneNumber
              email
            }
            rentedHouse {
              landlordName
              landlordContact
            }
            maritalStatusId
            profession {
              professionId
              otherProfession
            }
            foreignEmployment {
              isForeignEmployment
              foreignEmpCountryId
              typeOfVisaId
              foreignEstimatedAnnualIncome
            }
            annualIncomeSourceId
            membershipDetails {
              purposeId
              isMemberOfAnotherCooperative
              otherCoopName
              otherCoopBranchId
              otherCoopMemberId
            }
            introducers {
              firstIntroducerId
              secondIntroducerId
            }
            isFamilyAMember
            initialTransactionDetails {
              initialShare
              initialSaving
              initialLoan
              otherFinancialAmount
            }
            estimatedTransactions {
              estimatedAnnualTransactionAmount
              estimatedAnnualLoanAmount
              estimatedAnnualTransactionFrequencyId
              estimatedAnnualDepositAmount
            }
            declaration {
              isPoliticallyExposed
              politicallyExposedDetails
              hasBeneficialOwner
              beneficialRelationshipId
              beneficialFullName
              isConvicted
              convictedDetails
              hasForeignResidentialPermit
              foreignResidentialPermitTypeId
              declarationAgreement
            }
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            temporaryAddress {
              address {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              sameTempAsPermanentAddress
            }
            identificationSelection
          }
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymEditDataQuery = <
  TData = GetIndividualKymEditDataQuery,
  TError = unknown
>(
  variables: GetIndividualKymEditDataQueryVariables,
  options?: UseQueryOptions<GetIndividualKymEditDataQuery, TError, TData>
) =>
  useQuery<GetIndividualKymEditDataQuery, TError, TData>(
    ['getIndividualKymEditData', variables],
    useAxios<GetIndividualKymEditDataQuery, GetIndividualKymEditDataQueryVariables>(
      GetIndividualKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymFamilyMembersListDocument = `
    query getIndividualKymFamilyMembersList($id: String!, $isMember: Boolean) {
  members {
    individual(id: $id) {
      listFamilyMember(isMember: $isMember) {
        data {
          id
          relationshipId
          fullName
          familyMemberId
          dateOfBirth
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymFamilyMembersListQuery = <
  TData = GetIndividualKymFamilyMembersListQuery,
  TError = unknown
>(
  variables: GetIndividualKymFamilyMembersListQueryVariables,
  options?: UseQueryOptions<GetIndividualKymFamilyMembersListQuery, TError, TData>
) =>
  useQuery<GetIndividualKymFamilyMembersListQuery, TError, TData>(
    ['getIndividualKymFamilyMembersList', variables],
    useAxios<
      GetIndividualKymFamilyMembersListQuery,
      GetIndividualKymFamilyMembersListQueryVariables
    >(GetIndividualKymFamilyMembersListDocument).bind(null, variables),
    options
  );
export const GetIndividualKymFamilyOccupationListDocument = `
    query getIndividualKymFamilyOccupationList($id: String!, $isSpouse: Boolean!) {
  members {
    individual(id: $id) {
      listOccupation(isSpouse: $isSpouse) {
        data {
          id
          occupationId
          orgName
          panVatNo
          address
          estimatedAnnualIncome
          establishedDate
          registrationNo
          contact
          isOwner
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymFamilyOccupationListQuery = <
  TData = GetIndividualKymFamilyOccupationListQuery,
  TError = unknown
>(
  variables: GetIndividualKymFamilyOccupationListQueryVariables,
  options?: UseQueryOptions<GetIndividualKymFamilyOccupationListQuery, TError, TData>
) =>
  useQuery<GetIndividualKymFamilyOccupationListQuery, TError, TData>(
    ['getIndividualKymFamilyOccupationList', variables],
    useAxios<
      GetIndividualKymFamilyOccupationListQuery,
      GetIndividualKymFamilyOccupationListQueryVariables
    >(GetIndividualKymFamilyOccupationListDocument).bind(null, variables),
    options
  );
export const GetIndividualKymIncomeSourceListDocument = `
    query getIndividualKymIncomeSourceList($id: String!) {
  members {
    individual(id: $id) {
      listIncomeSource {
        data {
          id
          incomeSource
          amount
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymIncomeSourceListQuery = <
  TData = GetIndividualKymIncomeSourceListQuery,
  TError = unknown
>(
  variables: GetIndividualKymIncomeSourceListQueryVariables,
  options?: UseQueryOptions<GetIndividualKymIncomeSourceListQuery, TError, TData>
) =>
  useQuery<GetIndividualKymIncomeSourceListQuery, TError, TData>(
    ['getIndividualKymIncomeSourceList', variables],
    useAxios<GetIndividualKymIncomeSourceListQuery, GetIndividualKymIncomeSourceListQueryVariables>(
      GetIndividualKymIncomeSourceListDocument
    ).bind(null, variables),
    options
  );
export const GetKymDocumentsListDocument = `
    query getKYMDocumentsList($memberId: String!) {
  document {
    listKYMDocuments(memberId: $memberId) {
      data {
        fieldId
        docData {
          identifier
          url
        }
      }
    }
  }
}
    `;
export const useGetKymDocumentsListQuery = <TData = GetKymDocumentsListQuery, TError = unknown>(
  variables: GetKymDocumentsListQueryVariables,
  options?: UseQueryOptions<GetKymDocumentsListQuery, TError, TData>
) =>
  useQuery<GetKymDocumentsListQuery, TError, TData>(
    ['getKYMDocumentsList', variables],
    useAxios<GetKymDocumentsListQuery, GetKymDocumentsListQueryVariables>(
      GetKymDocumentsListDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymIdentificationListDocument = `
    query getIndividualKymIdentificationList($id: String!) {
  members {
    individual(id: $id) {
      listIdentification {
        data {
          id
          idNo
          idType
          place
          date
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymIdentificationListQuery = <
  TData = GetIndividualKymIdentificationListQuery,
  TError = unknown
>(
  variables: GetIndividualKymIdentificationListQueryVariables,
  options?: UseQueryOptions<GetIndividualKymIdentificationListQuery, TError, TData>
) =>
  useQuery<GetIndividualKymIdentificationListQuery, TError, TData>(
    ['getIndividualKymIdentificationList', variables],
    useAxios<
      GetIndividualKymIdentificationListQuery,
      GetIndividualKymIdentificationListQueryVariables
    >(GetIndividualKymIdentificationListDocument).bind(null, variables),
    options
  );
export const GetMemberDetailsDocument = `
    query getMemberDetails($id: ID!) {
  members {
    details(id: $id) {
      data {
        id
        name
        code
        address {
          state
          district
          localGovernment
          wardNo
          locality
          houseNo
        }
        contact
        share {
          summary {
            memberId
            member {
              id
              name
              code
            }
            count
            amount
          }
        }
        profilePicUrl
        signaturePicUrl
        profile {
          ... on KymIndFormStateQuery {
            data {
              formData {
                basicInformation {
                  gender
                  dateOfBirth
                  age
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberDetailsQuery = <TData = GetMemberDetailsQuery, TError = unknown>(
  variables: GetMemberDetailsQueryVariables,
  options?: UseQueryOptions<GetMemberDetailsQuery, TError, TData>
) =>
  useQuery<GetMemberDetailsQuery, TError, TData>(
    ['getMemberDetails', variables],
    useAxios<GetMemberDetailsQuery, GetMemberDetailsQueryVariables>(GetMemberDetailsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetOfficialUseDocument = `
    query getOfficialUse($id: ID!) {
  members {
    officialUse(id: $id) {
      recordId
      record {
        id
        isStaff
        checkSanction
        checkNegative
        riskCategory
        docCollectedAndVerified
        acceptableAddressDoc
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetOfficialUseQuery = <TData = GetOfficialUseQuery, TError = unknown>(
  variables: GetOfficialUseQueryVariables,
  options?: UseQueryOptions<GetOfficialUseQuery, TError, TData>
) =>
  useQuery<GetOfficialUseQuery, TError, TData>(
    ['getOfficialUse', variables],
    useAxios<GetOfficialUseQuery, GetOfficialUseQueryVariables>(GetOfficialUseDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMembershipFeeDocument = `
    query getMembershipFee($memberID: ID!) {
  members {
    activateMember {
      getMembershipFee(memberID: $memberID) {
        error {
          ...QueryError
        }
        data {
          charge
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetMembershipFeeQuery = <TData = GetMembershipFeeQuery, TError = unknown>(
  variables: GetMembershipFeeQueryVariables,
  options?: UseQueryOptions<GetMembershipFeeQuery, TError, TData>
) =>
  useQuery<GetMembershipFeeQuery, TError, TData>(
    ['getMembershipFee', variables],
    useAxios<GetMembershipFeeQuery, GetMembershipFeeQueryVariables>(GetMembershipFeeDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberCheckDocument = `
    query getMemberCheck($memberID: ID!) {
  members {
    activateMember {
      memberActivateChecks(memberId: $memberID) {
        isFeePaid
        isShareIssued
        isAccountUpdated
      }
    }
  }
}
    `;
export const useGetMemberCheckQuery = <TData = GetMemberCheckQuery, TError = unknown>(
  variables: GetMemberCheckQueryVariables,
  options?: UseQueryOptions<GetMemberCheckQuery, TError, TData>
) =>
  useQuery<GetMemberCheckQuery, TError, TData>(
    ['getMemberCheck', variables],
    useAxios<GetMemberCheckQuery, GetMemberCheckQueryVariables>(GetMemberCheckDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAccountCheckDocument = `
    query getAccountCheck($memberId: ID!, $accountId: ID!) {
  members {
    activateMember {
      accountUpdateCheck(memberId: $memberId, accountId: $accountId)
    }
  }
}
    `;
export const useGetAccountCheckQuery = <TData = GetAccountCheckQuery, TError = unknown>(
  variables: GetAccountCheckQueryVariables,
  options?: UseQueryOptions<GetAccountCheckQuery, TError, TData>
) =>
  useQuery<GetAccountCheckQuery, TError, TData>(
    ['getAccountCheck', variables],
    useAxios<GetAccountCheckQuery, GetAccountCheckQueryVariables>(GetAccountCheckDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberAccountsDocument = `
    query getMemberAccounts($memberId: ID!) {
  members {
    getAllAccounts(memberId: $memberId) {
      data {
        depositAccount {
          id
          accountName
          product {
            nature
            isMandatorySaving
            productName
          }
        }
        loanAccount {
          id
          accountName: LoanAccountName
          product {
            productName
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberAccountsQuery = <TData = GetMemberAccountsQuery, TError = unknown>(
  variables: GetMemberAccountsQueryVariables,
  options?: UseQueryOptions<GetMemberAccountsQuery, TError, TData>
) =>
  useQuery<GetMemberAccountsQuery, TError, TData>(
    ['getMemberAccounts', variables],
    useAxios<GetMemberAccountsQuery, GetMemberAccountsQueryVariables>(
      GetMemberAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetAccountInactiveCheckDocument = `
    query getAccountInactiveCheck($memberId: ID!, $accountId: ID!, $accountType: AccountTypeFilter!) {
  members {
    inactivateMember {
      accountCloseCheck(
        memberId: $memberId
        accountId: $accountId
        accounttype: $accountType
      )
    }
  }
}
    `;
export const useGetAccountInactiveCheckQuery = <
  TData = GetAccountInactiveCheckQuery,
  TError = unknown
>(
  variables: GetAccountInactiveCheckQueryVariables,
  options?: UseQueryOptions<GetAccountInactiveCheckQuery, TError, TData>
) =>
  useQuery<GetAccountInactiveCheckQuery, TError, TData>(
    ['getAccountInactiveCheck', variables],
    useAxios<GetAccountInactiveCheckQuery, GetAccountInactiveCheckQueryVariables>(
      GetAccountInactiveCheckDocument
    ).bind(null, variables),
    options
  );
export const GetMemberInactiveCheckDocument = `
    query getMemberInactiveCheck($memberId: ID!) {
  members {
    inactivateMember {
      inactivateCheck(memberId: $memberId) {
        isAccountClosed
        isShareReturned
      }
    }
  }
}
    `;
export const useGetMemberInactiveCheckQuery = <
  TData = GetMemberInactiveCheckQuery,
  TError = unknown
>(
  variables: GetMemberInactiveCheckQueryVariables,
  options?: UseQueryOptions<GetMemberInactiveCheckQuery, TError, TData>
) =>
  useQuery<GetMemberInactiveCheckQuery, TError, TData>(
    ['getMemberInactiveCheck', variables],
    useAxios<GetMemberInactiveCheckQuery, GetMemberInactiveCheckQueryVariables>(
      GetMemberInactiveCheckDocument
    ).bind(null, variables),
    options
  );
export const GetMemberDetailsOverviewDocument = `
    query getMemberDetailsOverview($id: ID!) {
  members {
    memberOverview(id: $id) {
      data {
        accounts {
          accounts {
            accountName
            accountNumber
            totalBalance
            productName
            productType
            interestRate
          }
          payments {
            date
            accountName
            paymentType
            amount
            installmentNo
            interestRate
          }
        }
        share {
          shareInfo {
            totalCount
            issuedCount
            returnedCount
            totalBalance
          }
          registerDetails {
            date
            title
            txnAmount
            txnType
            noOfShares
          }
          balanceDetails {
            totalCount
            edges {
              node {
                id
                memberId
                member {
                  id
                  objState
                  createdAt
                  modifiedAt
                  code
                  type
                  name
                  contact
                  dateJoined
                  profilePic
                  signaturepic
                  profilePicUrl
                  signaturePicUrl
                }
                status
                transactionDate
                transactionDirection
                credit
                debit
                startNumber
                endNumber
                balance
                shareAmount
                extraFee {
                  name
                  value
                }
                totalAmount
                paymentMode
                bankId
                voucherNumber
                accountId
              }
              cursor
            }
            pageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }
          }
        }
        loan {
          accounts {
            accountName
            accountNumber
            totalBalance
            productName
            productType
            interestRate
            subscriptionDate
            interestEarned
            interestBooked
          }
          payments {
            date
            accountName
            paymentType
            amount
            installmentNo
            interestRate
          }
        }
        reports {
          list {
            code
            reportName
            category
          }
        }
        overview {
          memberGraphs {
            deposit {
              data {
                time
                amount
              }
              periodType
            }
            withdraw {
              data {
                time
                amount
              }
              periodType
            }
          }
          statistics {
            totalShareValue
            accountBalance
            loanBalance
          }
          payments {
            date
            accountName
            paymentType
            amount
          }
          recentTransactions {
            date
            title
            txnType
            amount
            noOfShares
          }
        }
        cheques {
          accountName
          issued
          used
          left
          cancelled
        }
      }
    }
  }
}
    `;
export const useGetMemberDetailsOverviewQuery = <
  TData = GetMemberDetailsOverviewQuery,
  TError = unknown
>(
  variables: GetMemberDetailsOverviewQueryVariables,
  options?: UseQueryOptions<GetMemberDetailsOverviewQuery, TError, TData>
) =>
  useQuery<GetMemberDetailsOverviewQuery, TError, TData>(
    ['getMemberDetailsOverview', variables],
    useAxios<GetMemberDetailsOverviewQuery, GetMemberDetailsOverviewQueryVariables>(
      GetMemberDetailsOverviewDocument
    ).bind(null, variables),
    options
  );
export const GetMemberDetailsShareBalanceDocument = `
    query getMemberDetailsShareBalance($id: ID!) {
  share {
    history(memberId: $id) {
      history {
        id
        memberId
        member {
          id
          objState
          createdAt
        }
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        balance
        shareAmount
        extraFee {
          name
          value
        }
        totalAmount
        paymentMode
        bankId
        voucherNumber
        accountId
      }
    }
  }
}
    `;
export const useGetMemberDetailsShareBalanceQuery = <
  TData = GetMemberDetailsShareBalanceQuery,
  TError = unknown
>(
  variables: GetMemberDetailsShareBalanceQueryVariables,
  options?: UseQueryOptions<GetMemberDetailsShareBalanceQuery, TError, TData>
) =>
  useQuery<GetMemberDetailsShareBalanceQuery, TError, TData>(
    ['getMemberDetailsShareBalance', variables],
    useAxios<GetMemberDetailsShareBalanceQuery, GetMemberDetailsShareBalanceQueryVariables>(
      GetMemberDetailsShareBalanceDocument
    ).bind(null, variables),
    options
  );
export const GetMemberOverviewBasicDetailsDocument = `
    query getMemberOverviewBasicDetails($id: ID!) {
  members {
    memberOverview(id: $id) {
      data {
        overview {
          basicInformation {
            __typename
            ... on IndividualBasicMinInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              genderId
              gender
              maritalStatus
              maritalStatusId
              fathersName
              mothersName
              grandFathersName
              familyMembers {
                fullName
                relationship
                dob
              }
              isStaff
            }
            ... on InstitutionBasicMinInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              type
              nature
              registrationDate
              vatPanNo
              noOfServiceCenters
            }
            ... on CooperativeBasicMinInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              registrationNo
              registrationOffice
              registrationDate
            }
            ... on CooperativeUnionBasicMinInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              type
              nature
              registrationDate
              vatPanNo
              noOfServiceCenters
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberOverviewBasicDetailsQuery = <
  TData = GetMemberOverviewBasicDetailsQuery,
  TError = unknown
>(
  variables: GetMemberOverviewBasicDetailsQueryVariables,
  options?: UseQueryOptions<GetMemberOverviewBasicDetailsQuery, TError, TData>
) =>
  useQuery<GetMemberOverviewBasicDetailsQuery, TError, TData>(
    ['getMemberOverviewBasicDetails', variables],
    useAxios<GetMemberOverviewBasicDetailsQuery, GetMemberOverviewBasicDetailsQueryVariables>(
      GetMemberOverviewBasicDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberOverviewBioDetailsDocument = `
    query getMemberOverviewBioDetails($id: ID!) {
  members {
    memberOverview(id: $id) {
      data {
        bio {
          __typename
          ... on IndividualBio {
            memberName
            profilePic
            memberCode
            memberJoined
            dob
            gender
            mobile
            email
            currentAddress
            permanentAddress
            maritalStatus
            familyMembers {
              relationship
              fullName
              dob
            }
            docs {
              key
              value
            }
          }
          ... on InstitutionBio {
            basicInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              type
              nature
              registrationDate
              vatPanNo
              noOfServiceCenters
            }
            addressDetails {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
            }
            registrationDetails {
              registeredNumber
              issuingOffice
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
            }
            operatingOfficeAddress {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
            }
            serviceCenterOfficeAddress {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
            }
            contactDetails {
              phoneNumber
              fax
              email
              website
              poBoxNo
              noOfEmployees
              agmDetails
            }
            bankAcDetails {
              bank
              accountNumber
              accountName
            }
            partnerDirectorDetails {
              name
              permAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              dateOfMembership
              highestQualification
              mobileNo
              email
              citizenshipNo
              panNo
              docs {
                key
                value
              }
            }
            operatorDetails {
              name
              contactNo
              email
              panNo
              pemAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            transactionProfileDetails {
              nature
              annualTurnover
              initialDepositAmount
              expectedMonthlyTurnover
              expectedMonthlyTransaction
            }
            sisterConcernDetails {
              name
              address
              phone
              natureOfBusiness
            }
            operatorInstructionDetails {
              accountType
              stampCompulsory
              specialInstruction
            }
            declaration {
              name
              phoneNo
              email
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
            }
            docs {
              key
              value
            }
          }
          ... on CoopBio {
            basicInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              registrationNo
              registrationOffice
              registrationDate
            }
            registeredAddress {
              ...Address
            }
            operatingAddress {
              ...Address
            }
            contactDetails {
              email
              website
              phone
            }
            currentMemberDetails {
              noOfMaleMembers
              noOfFemaleMembers
              noOfOtherMembers
              lastAuditDate
            }
            representativeDetails {
              name
              designation
              contactNumber
              email
              panVatNo
              address {
                ...Address
              }
              docs {
                key
                value
              }
            }
            additionalCoopDetails {
              coopType
              mainServiceProduct
            }
            employeeDetails {
              male
              female
              other
              total
            }
            equityLiabilities {
              shareCapital
              reserveAndSurplus
              savingDeposit
              loanAccount
              capitalGrant
              total
            }
            assetDetails {
              cashAndEquivalents
              bank
              investments
              loan
              nonCurrentAssets
              otherNonCurrentAssets
              other
            }
            partnerDirectorDetails {
              name
              designation
              permAddress {
                ...Address
              }
              tempAddress {
                ...Address
              }
              dateOfMembership
              highestQualification
              mobileNo
              email
              citizenshipNo
              panNo
              docs {
                key
                value
              }
            }
            operatorDetails {
              name
              contactNo
              email
              panNo
              pemAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            docs {
              key
              value
            }
          }
          ... on CoopUnionBio {
            basicInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              type
              nature
              registrationDate
              vatPanNo
              noOfServiceCenters
            }
            address {
              ...Address
            }
            registrationDetails {
              registeredNo
              issuingOffice
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
            }
            operatingAddress {
              ...Address
            }
            serviceCenterAddress {
              ...Address
            }
            contactDetails {
              phoneNo
              fax
              email
              website
              poBoxNo
              noOfEmployees
              agmDetails
            }
            bankAccDetails {
              bank
              accountNumber
              accountName
            }
            applicantDetails {
              name
              designation
              contactNo
              email
              panNo
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            memberInfo {
              noOfMaleCurrent
              noOfFemaleCurrent
              noOfInstitutionalCurrent
              noOfMaleTarget
              noOfFemaleTarget
              noOfInstitutionalTarget
              totalCurrent
              totalTarget
            }
            partnerDirectorDetails {
              name
              designation
              email
              panNo
              mobileNo
              permAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            operatorDetails {
              name
              designation
              contactNo
              email
              panNo
              pemAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            equityLiabilities {
              shareCapitalCurrent
              reserveAndSurplusCurrent
              savingDepositCurrent
              loanAccountCurrent
              capitalGrantCurrent
              liabilitiesPayableCurrent
              nonCurrentLiabilitiesCurrent
              totalCurrent
              shareCapitalTarget
              reserveAndSurplusTarget
              savingDepositTarget
              loanAccountTarget
              capitalGrantTarget
              liabilitiesPayableTarget
              nonCurrentLiabilitiesTarget
              totalTarget
            }
            assetDetails {
              cashAndEquivalentsCurrent
              bankCurrent
              investmentsCurrent
              loanCurrent
              nonCurrentAssetsCurrent
              otherNonCurrentAssetsCurrent
              totalCurrent
              cashAndEquivalentsTarget
              bankTarget
              investmentsTarget
              loanTarget
              nonCurrentAssetsTarget
              otherNonCurrentAssetsTarget
              totalTarget
            }
            incomeDetails {
              financialInvestment
              nonFinancialInvestment
              investment
              serviceOperations
              sales
              otherIncome
              miscIncome
              total
            }
            expenseDetails {
              purchase
              directExpense
              adminExpense
              financialCost
              riskManagement
              deferredTax
              total
            }
            docs {
              key
              value
            }
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetMemberOverviewBioDetailsQuery = <
  TData = GetMemberOverviewBioDetailsQuery,
  TError = unknown
>(
  variables: GetMemberOverviewBioDetailsQueryVariables,
  options?: UseQueryOptions<GetMemberOverviewBioDetailsQuery, TError, TData>
) =>
  useQuery<GetMemberOverviewBioDetailsQuery, TError, TData>(
    ['getMemberOverviewBioDetails', variables],
    useAxios<GetMemberOverviewBioDetailsQuery, GetMemberOverviewBioDetailsQueryVariables>(
      GetMemberOverviewBioDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberPdfDocument = `
    query getMemberPDF($id: ID!) {
  members {
    memberPDF(id: $id)
  }
}
    `;
export const useGetMemberPdfQuery = <TData = GetMemberPdfQuery, TError = unknown>(
  variables: GetMemberPdfQueryVariables,
  options?: UseQueryOptions<GetMemberPdfQuery, TError, TData>
) =>
  useQuery<GetMemberPdfQuery, TError, TData>(
    ['getMemberPDF', variables],
    useAxios<GetMemberPdfQuery, GetMemberPdfQueryVariables>(GetMemberPdfDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBranchReportDocument = `
    query getBranchReport($data: BranchReportFilter) {
  report {
    branchReport {
      branchReport(data: $data) {
        data {
          id
          serviceCenterCode
          name
          contactNumber
          email
          address {
            ...Address
          }
          managerName
          managerContact
          isExtensionCounter
          estDate
          branchStatus
          remarks
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetBranchReportQuery = <TData = GetBranchReportQuery, TError = unknown>(
  variables?: GetBranchReportQueryVariables,
  options?: UseQueryOptions<GetBranchReportQuery, TError, TData>
) =>
  useQuery<GetBranchReportQuery, TError, TData>(
    variables === undefined ? ['getBranchReport'] : ['getBranchReport', variables],
    useAxios<GetBranchReportQuery, GetBranchReportQueryVariables>(GetBranchReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetCashLedgerReportDocument = `
    query getCashLedgerReport($data: CashLedgerReportFilterData) {
  report {
    cashReport {
      cashLedgerReport(data: $data) {
        openingBalance
        closingBalance
        summary {
          date
          ledgerCode
          particular
          voucherNo
          cashDr
          cashCr
          balance
        }
        details {
          date
          ledgerCode
          particular
          voucherNo
          cashDr
          cashCr
          balance
        }
      }
    }
  }
}
    `;
export const useGetCashLedgerReportQuery = <TData = GetCashLedgerReportQuery, TError = unknown>(
  variables?: GetCashLedgerReportQueryVariables,
  options?: UseQueryOptions<GetCashLedgerReportQuery, TError, TData>
) =>
  useQuery<GetCashLedgerReportQuery, TError, TData>(
    variables === undefined ? ['getCashLedgerReport'] : ['getCashLedgerReport', variables],
    useAxios<GetCashLedgerReportQuery, GetCashLedgerReportQueryVariables>(
      GetCashLedgerReportDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpeningReportDocument = `
    query getAccountOpeningReport($data: AccountOpeningReportInput) {
  report {
    depositReport {
      accountOpeningReport(data: $data) {
        data {
          accountName
          accountNumber
          memberId
          openedBy
          openingDate
        }
      }
    }
  }
}
    `;
export const useGetAccountOpeningReportQuery = <
  TData = GetAccountOpeningReportQuery,
  TError = unknown
>(
  variables?: GetAccountOpeningReportQueryVariables,
  options?: UseQueryOptions<GetAccountOpeningReportQuery, TError, TData>
) =>
  useQuery<GetAccountOpeningReportQuery, TError, TData>(
    variables === undefined ? ['getAccountOpeningReport'] : ['getAccountOpeningReport', variables],
    useAxios<GetAccountOpeningReportQuery, GetAccountOpeningReportQueryVariables>(
      GetAccountOpeningReportDocument
    ).bind(null, variables),
    options
  );
export const GetAccountClosingReportDocument = `
    query getAccountClosingReport($data: AccountClosingReportInput) {
  report {
    depositReport {
      accountClosingReport(data: $data) {
        data {
          memberId
          accountNumber
          accountName
          openingDate
          closingDate
          closedBalance
          closedBy
        }
      }
    }
  }
}
    `;
export const useGetAccountClosingReportQuery = <
  TData = GetAccountClosingReportQuery,
  TError = unknown
>(
  variables?: GetAccountClosingReportQueryVariables,
  options?: UseQueryOptions<GetAccountClosingReportQuery, TError, TData>
) =>
  useQuery<GetAccountClosingReportQuery, TError, TData>(
    variables === undefined ? ['getAccountClosingReport'] : ['getAccountClosingReport', variables],
    useAxios<GetAccountClosingReportQuery, GetAccountClosingReportQueryVariables>(
      GetAccountClosingReportDocument
    ).bind(null, variables),
    options
  );
export const GetInterestTaxReportDocument = `
    query getInterestTaxReport($data: InterestTaxReportFilter!) {
  report {
    depositReport {
      interestTaxReport(data: $data) {
        data {
          memberId
          memberCode
          name
          address {
            ...Address
          }
          panNo
          accountNo
          date
          interest
          tax
          savingBalance
          closingBalance
          remarks
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetInterestTaxReportQuery = <TData = GetInterestTaxReportQuery, TError = unknown>(
  variables: GetInterestTaxReportQueryVariables,
  options?: UseQueryOptions<GetInterestTaxReportQuery, TError, TData>
) =>
  useQuery<GetInterestTaxReportQuery, TError, TData>(
    ['getInterestTaxReport', variables],
    useAxios<GetInterestTaxReportQuery, GetInterestTaxReportQueryVariables>(
      GetInterestTaxReportDocument
    ).bind(null, variables),
    options
  );
export const GetTtrReportDocument = `
    query getTtrReport($data: TTRReportFilter!) {
  report {
    depositReport {
      thresholdTransactionReport(data: $data) {
        data {
          yearly {
            name
            memberId
            address {
              ...Address
            }
            branch
            date
            nature
            accountNo
            amount
            sourceOfFund
            remarks
          }
          perTranx {
            name
            memberId
            address {
              ...Address
            }
            branch
            date
            nature
            accountNo
            amount
            sourceOfFund
            remarks
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetTtrReportQuery = <TData = GetTtrReportQuery, TError = unknown>(
  variables: GetTtrReportQueryVariables,
  options?: UseQueryOptions<GetTtrReportQuery, TError, TData>
) =>
  useQuery<GetTtrReportQuery, TError, TData>(
    ['getTtrReport', variables],
    useAxios<GetTtrReportQuery, GetTtrReportQueryVariables>(GetTtrReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetSavingStatementDocument = `
    query getSavingStatement($data: SavingStatementReportSettings!) {
  report {
    depositReport {
      savingStatementReport(data: $data) {
        memberId
        member {
          id
          code
          name
          address {
            wardNo
            state
            district
            houseNo
            localGovernment
          }
          dateJoined
        }
        statement {
          ... on SavingStatementReport {
            savingStatement {
              date
              balanceAmount
              depositCr
              chequeOrVoucherNo
              particular
              withdrawDr
            }
            totals {
              totalBalance
              totalWithdraw
              totalDeposit
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingStatementQuery = <TData = GetSavingStatementQuery, TError = unknown>(
  variables: GetSavingStatementQueryVariables,
  options?: UseQueryOptions<GetSavingStatementQuery, TError, TData>
) =>
  useQuery<GetSavingStatementQuery, TError, TData>(
    ['getSavingStatement', variables],
    useAxios<GetSavingStatementQuery, GetSavingStatementQueryVariables>(
      GetSavingStatementDocument
    ).bind(null, variables),
    options
  );
export const GetInterestStatementReportDocument = `
    query getInterestStatementReport($data: InterestStatementFilter!) {
  report {
    depositReport {
      interestStatementReport(data: $data) {
        data {
          entries {
            date
            amount
            balance
            days
            rate
            remarks
          }
          memberId
          accountNo
          accountType
          currentInterestRate
          memberName
          address {
            wardNo
            state
            locality
            localGovernment
            district
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetInterestStatementReportQuery = <
  TData = GetInterestStatementReportQuery,
  TError = unknown
>(
  variables: GetInterestStatementReportQueryVariables,
  options?: UseQueryOptions<GetInterestStatementReportQuery, TError, TData>
) =>
  useQuery<GetInterestStatementReportQuery, TError, TData>(
    ['getInterestStatementReport', variables],
    useAxios<GetInterestStatementReportQuery, GetInterestStatementReportQueryVariables>(
      GetInterestStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetUserReportDocument = `
    query getUserReport($data: UserReportFilter) {
  report {
    employeeReport {
      userReport(data: $data) {
        data {
          isCoreEmployee
          employeeName
          empCode
          username
          usernameCode
          accessForBranch
          accessForGroup
          role
          createdDate
          createdBy
          status
          remarks
        }
      }
    }
  }
}
    `;
export const useGetUserReportQuery = <TData = GetUserReportQuery, TError = unknown>(
  variables?: GetUserReportQueryVariables,
  options?: UseQueryOptions<GetUserReportQuery, TError, TData>
) =>
  useQuery<GetUserReportQuery, TError, TData>(
    variables === undefined ? ['getUserReport'] : ['getUserReport', variables],
    useAxios<GetUserReportQuery, GetUserReportQueryVariables>(GetUserReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanBalanceReportDocument = `
    query getLoanBalanceReport($data: LoanBalanceFilterData!) {
  report {
    loanReport {
      loanBalanceReport(data: $data) {
        data {
          memberId
          loanAccountId
          memberName
          productName
          productCode
          outstandingBalance
          remainingBalance
          remainingInterest
          lastPaymentDate
        }
        totalOutstandingBalance
        totalRemainingBalance
      }
    }
  }
}
    `;
export const useGetLoanBalanceReportQuery = <TData = GetLoanBalanceReportQuery, TError = unknown>(
  variables: GetLoanBalanceReportQueryVariables,
  options?: UseQueryOptions<GetLoanBalanceReportQuery, TError, TData>
) =>
  useQuery<GetLoanBalanceReportQuery, TError, TData>(
    ['getLoanBalanceReport', variables],
    useAxios<GetLoanBalanceReportQuery, GetLoanBalanceReportQueryVariables>(
      GetLoanBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAgingStatementReportDocument = `
    query getLoanAgingStatementReport($data: LoanAgingStatementInput) {
  report {
    loanReport {
      loanAgingStatementReport(data: $data) {
        data {
          report {
            memberNo
            loanNo
            name
            address
            phoneNo
            loanType
            paymentMode
            issueDate
            loanMaturityDate
            disbursePrincipal
            remainingPrincipal
            installmentAmount
            remainingInstallmentAmount
            remainingInterest
            remainingPenalty
            totalDueAmount
            goodAmount
            matured1To30Days
            matured1To12Months
            maturedAbove12Months
            lastPrincipalPaidDate
            lastInterestPaidDate
            installmentLateDays
          }
          summary {
            disbursePrincipalTotal
            remainingPrincipalTotal
            installmentAmountTotal
            remainingInstallmentAmountTotal
            remainingInterestTotal
            remainingPenaltyTotal
            dueAmountTotal
            goodAmountTotal
            matured1To30DaysTotal
            matured1To12MonthsTotal
            maturedAbove12MonthsTotal
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanAgingStatementReportQuery = <
  TData = GetLoanAgingStatementReportQuery,
  TError = unknown
>(
  variables?: GetLoanAgingStatementReportQueryVariables,
  options?: UseQueryOptions<GetLoanAgingStatementReportQuery, TError, TData>
) =>
  useQuery<GetLoanAgingStatementReportQuery, TError, TData>(
    variables === undefined
      ? ['getLoanAgingStatementReport']
      : ['getLoanAgingStatementReport', variables],
    useAxios<GetLoanAgingStatementReportQuery, GetLoanAgingStatementReportQueryVariables>(
      GetLoanAgingStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanStatementReportDocument = `
    query getLoanStatementReport($data: LoanStatementReportSettings!) {
  report {
    loanReport {
      loanStatementReport(data: $data) {
        memberId
        member {
          name
          code
        }
        statement {
          ... on LoanStatementReport {
            meta {
              accountNo
              approvedAmount
              interestRate
              loanType
              loanSubtype
              issuedDate
              installment
              charge
            }
            loanStatement {
              date
              particular
              txnId
              disbursePrinciple
              paidPrinciple
              interestPaid
              finePaid
              discount
              remainingPrinciple
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanStatementReportQuery = <
  TData = GetLoanStatementReportQuery,
  TError = unknown
>(
  variables: GetLoanStatementReportQueryVariables,
  options?: UseQueryOptions<GetLoanStatementReportQuery, TError, TData>
) =>
  useQuery<GetLoanStatementReportQuery, TError, TData>(
    ['getLoanStatementReport', variables],
    useAxios<GetLoanStatementReportQuery, GetLoanStatementReportQueryVariables>(
      GetLoanStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetMemberClassificationReportDocument = `
    query getMemberClassificationReport($data: MemberClassificationFilter!) {
  report {
    memberReport {
      memberClassificationReport(data: $data) {
        data {
          gender {
            entryName
            inNumber
            inPercent
          }
          age {
            entryName
            inNumber
            inPercent
          }
          occupation {
            entryName
            inNumber
            inPercent
          }
          education {
            entryName
            inNumber
            inPercent
          }
          memberCategory {
            entryName
            inNumber
            inPercent
          }
          income {
            entryName
            inPercent
            inPercent
          }
          address {
            province {
              entryName
              inNumber
              inPercent
            }
            district {
              entryName
              inNumber
              inPercent
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberClassificationReportQuery = <
  TData = GetMemberClassificationReportQuery,
  TError = unknown
>(
  variables: GetMemberClassificationReportQueryVariables,
  options?: UseQueryOptions<GetMemberClassificationReportQuery, TError, TData>
) =>
  useQuery<GetMemberClassificationReportQuery, TError, TData>(
    ['getMemberClassificationReport', variables],
    useAxios<GetMemberClassificationReportQuery, GetMemberClassificationReportQueryVariables>(
      GetMemberClassificationReportDocument
    ).bind(null, variables),
    options
  );
export const GetActiveInactiveMemberReportDocument = `
    query getActiveInactiveMemberReport($data: ActiveInactiveMemberReportData) {
  report {
    memberReport {
      activeInactiveMemberReport(data: $data) {
        statement {
          ... on ActiveInactiveMemberReport {
            summary {
              activeTotal
              inactiveTotal
              totalMember
            }
            reportStatement {
              memberId
              memberName
              district
              wardNo
              address
              dob
              age
              contactNo
              gender
              pan
              occupation
              memberRegistrationDate
              status
              memberType
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetActiveInactiveMemberReportQuery = <
  TData = GetActiveInactiveMemberReportQuery,
  TError = unknown
>(
  variables?: GetActiveInactiveMemberReportQueryVariables,
  options?: UseQueryOptions<GetActiveInactiveMemberReportQuery, TError, TData>
) =>
  useQuery<GetActiveInactiveMemberReportQuery, TError, TData>(
    variables === undefined
      ? ['getActiveInactiveMemberReport']
      : ['getActiveInactiveMemberReport', variables],
    useAxios<GetActiveInactiveMemberReportQuery, GetActiveInactiveMemberReportQueryVariables>(
      GetActiveInactiveMemberReportDocument
    ).bind(null, variables),
    options
  );
export const GetKymStatusReportDocument = `
    query getKymStatusReport($data: KymStatusReportFilter) {
  report {
    memberReport {
      kymStatusReport(data: $data) {
        Summary
        data {
          address {
            ...Address
          }
          memberName
          memberId
          contact
          regDate
          riskCategory
          lastKymUpdatedDate
          kymExpireDays
          kymStatus
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetKymStatusReportQuery = <TData = GetKymStatusReportQuery, TError = unknown>(
  variables?: GetKymStatusReportQueryVariables,
  options?: UseQueryOptions<GetKymStatusReportQuery, TError, TData>
) =>
  useQuery<GetKymStatusReportQuery, TError, TData>(
    variables === undefined ? ['getKymStatusReport'] : ['getKymStatusReport', variables],
    useAxios<GetKymStatusReportQuery, GetKymStatusReportQueryVariables>(
      GetKymStatusReportDocument
    ).bind(null, variables),
    options
  );
export const GetMemberRegistrationReportDocument = `
    query getMemberRegistrationReport($data: MemberRegistrationReportData) {
  report {
    memberReport {
      memberRegistrationReport(data: $data) {
        data {
          individual {
            memberId
            memberCode
            name
            address {
              ...Address
            }
            dob
            grandFatherName
            fatherName
            SpouseName
            profession
            shareInfo {
              perShareAmount
              kitta
              amount
            }
            fingerPrint
            photo
            contactNo
            email
            other
          }
          other {
            memberId
            memberCode
            name
            address {
              ...Address
            }
            doe
            typeOfInstitution
            workingArea
            totalMember
            balanceSheet
            shareInfo {
              perShareAmount
              kitta
              amount
            }
            post
            authPersonName
            logo
            stamp
            contactNo
            email
            other
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetMemberRegistrationReportQuery = <
  TData = GetMemberRegistrationReportQuery,
  TError = unknown
>(
  variables?: GetMemberRegistrationReportQueryVariables,
  options?: UseQueryOptions<GetMemberRegistrationReportQuery, TError, TData>
) =>
  useQuery<GetMemberRegistrationReportQuery, TError, TData>(
    variables === undefined
      ? ['getMemberRegistrationReport']
      : ['getMemberRegistrationReport', variables],
    useAxios<GetMemberRegistrationReportQuery, GetMemberRegistrationReportQueryVariables>(
      GetMemberRegistrationReportDocument
    ).bind(null, variables),
    options
  );
export const GetMBankingRegistrationReportDocument = `
    query getMBankingRegistrationReport($data: EbankingReportFilter) {
  report {
    mobileBankingReport {
      mbankingRegistrationReport(data: $data) {
        data {
          memberId
          memberName
          mobileNo
          branchCode
          regDate
          expDate
          status
          registeredBy
        }
      }
    }
  }
}
    `;
export const useGetMBankingRegistrationReportQuery = <
  TData = GetMBankingRegistrationReportQuery,
  TError = unknown
>(
  variables?: GetMBankingRegistrationReportQueryVariables,
  options?: UseQueryOptions<GetMBankingRegistrationReportQuery, TError, TData>
) =>
  useQuery<GetMBankingRegistrationReportQuery, TError, TData>(
    variables === undefined
      ? ['getMBankingRegistrationReport']
      : ['getMBankingRegistrationReport', variables],
    useAxios<GetMBankingRegistrationReportQuery, GetMBankingRegistrationReportQueryVariables>(
      GetMBankingRegistrationReportDocument
    ).bind(null, variables),
    options
  );
export const GetMBankingExpiryReportDocument = `
    query getMBankingExpiryReport($data: EbankingReportFilter) {
  report {
    mobileBankingReport {
      mbankingRegistrationReport(data: $data) {
        data {
          memberId
          memberName
          mobileNo
          branchCode
          regDate
          expDate
          status
          registeredBy
        }
      }
    }
  }
}
    `;
export const useGetMBankingExpiryReportQuery = <
  TData = GetMBankingExpiryReportQuery,
  TError = unknown
>(
  variables?: GetMBankingExpiryReportQueryVariables,
  options?: UseQueryOptions<GetMBankingExpiryReportQuery, TError, TData>
) =>
  useQuery<GetMBankingExpiryReportQuery, TError, TData>(
    variables === undefined ? ['getMBankingExpiryReport'] : ['getMBankingExpiryReport', variables],
    useAxios<GetMBankingExpiryReportQuery, GetMBankingExpiryReportQueryVariables>(
      GetMBankingExpiryReportDocument
    ).bind(null, variables),
    options
  );
export const GetMbTransactionReportDocument = `
    query getMBTransactionReport($data: MBankingTransactionFilter) {
  report {
    mobileBankingReport {
      mBankingTransactionReport(data: $data) {
        data {
          initiatorName
          phoneNo
          srcAccount
          destAccount
          amount
          transactionType
          transThrough
          transDate
          narration
          status
        }
      }
    }
  }
}
    `;
export const useGetMbTransactionReportQuery = <
  TData = GetMbTransactionReportQuery,
  TError = unknown
>(
  variables?: GetMbTransactionReportQueryVariables,
  options?: UseQueryOptions<GetMbTransactionReportQuery, TError, TData>
) =>
  useQuery<GetMbTransactionReportQuery, TError, TData>(
    variables === undefined ? ['getMBTransactionReport'] : ['getMBTransactionReport', variables],
    useAxios<GetMbTransactionReportQuery, GetMbTransactionReportQueryVariables>(
      GetMbTransactionReportDocument
    ).bind(null, variables),
    options
  );
export const GetLedgerReportDocument = `
    query getLedgerReport($data: GeneralLedgerFilter!) {
  report {
    otherReport {
      generalLedgerReport(data: $data) {
        data {
          id
          date
          account
          balance
          credit
          debit
        }
      }
    }
  }
}
    `;
export const useGetLedgerReportQuery = <TData = GetLedgerReportQuery, TError = unknown>(
  variables: GetLedgerReportQueryVariables,
  options?: UseQueryOptions<GetLedgerReportQuery, TError, TData>
) =>
  useQuery<GetLedgerReportQuery, TError, TData>(
    ['getLedgerReport', variables],
    useAxios<GetLedgerReportQuery, GetLedgerReportQueryVariables>(GetLedgerReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetSavingsBalanceReportDocument = `
    query getSavingsBalanceReport($data: SavingsBalanceFilterData!) {
  report {
    otherReport {
      savingsBalanceReport(data: $data) {
        data {
          accountId
          memberId
          memberCode
          memberName
          productId
          productName
          productCode
          accountOpeningDate
          memberType
          balance
        }
        totalBalance
      }
    }
  }
}
    `;
export const useGetSavingsBalanceReportQuery = <
  TData = GetSavingsBalanceReportQuery,
  TError = unknown
>(
  variables: GetSavingsBalanceReportQueryVariables,
  options?: UseQueryOptions<GetSavingsBalanceReportQuery, TError, TData>
) =>
  useQuery<GetSavingsBalanceReportQuery, TError, TData>(
    ['getSavingsBalanceReport', variables],
    useAxios<GetSavingsBalanceReportQuery, GetSavingsBalanceReportQueryVariables>(
      GetSavingsBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetAllSavedReportsDocument = `
    query getAllSavedReports($pagination: Pagination) {
  report {
    listReports(pagination: $pagination) {
      totalCount
      pageInfo {
        ...Pagination
      }
      edges {
        cursor
        node {
          id
          lastModifiedDate
          name
          reportType
          savedBy
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAllSavedReportsQuery = <TData = GetAllSavedReportsQuery, TError = unknown>(
  variables?: GetAllSavedReportsQueryVariables,
  options?: UseQueryOptions<GetAllSavedReportsQuery, TError, TData>
) =>
  useQuery<GetAllSavedReportsQuery, TError, TData>(
    variables === undefined ? ['getAllSavedReports'] : ['getAllSavedReports', variables],
    useAxios<GetAllSavedReportsQuery, GetAllSavedReportsQueryVariables>(
      GetAllSavedReportsDocument
    ).bind(null, variables),
    options
  );
export const GetSavedReportDocument = `
    query getSavedReport($reportId: ID!) {
  report {
    getReport(reportId: $reportId) {
      name
      settings {
        ... on ShareStatementReportSettingsType {
          filter
          memberId
        }
      }
    }
  }
}
    `;
export const useGetSavedReportQuery = <TData = GetSavedReportQuery, TError = unknown>(
  variables: GetSavedReportQueryVariables,
  options?: UseQueryOptions<GetSavedReportQuery, TError, TData>
) =>
  useQuery<GetSavedReportQuery, TError, TData>(
    ['getSavedReport', variables],
    useAxios<GetSavedReportQuery, GetSavedReportQueryVariables>(GetSavedReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareStatementDocument = `
    query getShareStatement($data: ShareStatementReportSettings!) {
  report {
    shareReport {
      shareStatementReport(data: $data) {
        member {
          id
          code
          name
          address {
            wardNo
            state
            district
            houseNo
            localGovernment
          }
          dateJoined
        }
        statement {
          ... on ShareStatementReport {
            shareStatement {
              date
              particular
              noOfShares
              returnAmountDr
              purchaseAmountCr
              balanceSheet
            }
            totals {
              totalShares
              totalDr
              totalCr
              totalBalanceSheet
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetShareStatementQuery = <TData = GetShareStatementQuery, TError = unknown>(
  variables: GetShareStatementQueryVariables,
  options?: UseQueryOptions<GetShareStatementQuery, TError, TData>
) =>
  useQuery<GetShareStatementQuery, TError, TData>(
    ['getShareStatement', variables],
    useAxios<GetShareStatementQuery, GetShareStatementQueryVariables>(
      GetShareStatementDocument
    ).bind(null, variables),
    options
  );
export const GetShareRegisterReportDocument = `
    query getShareRegisterReport($data: SharePurchaseRegisterReportFilter!) {
  report {
    shareReport {
      sharePurchaseRegisterReport(data: $data) {
        data {
          memberId
          memberCode
          name
          particular
          perShareAmount
          kittaNumFrom
          kittaNumTo
          totalKitta
          totalAmount
        }
      }
    }
  }
}
    `;
export const useGetShareRegisterReportQuery = <
  TData = GetShareRegisterReportQuery,
  TError = unknown
>(
  variables: GetShareRegisterReportQueryVariables,
  options?: UseQueryOptions<GetShareRegisterReportQuery, TError, TData>
) =>
  useQuery<GetShareRegisterReportQuery, TError, TData>(
    ['getShareRegisterReport', variables],
    useAxios<GetShareRegisterReportQuery, GetShareRegisterReportQueryVariables>(
      GetShareRegisterReportDocument
    ).bind(null, variables),
    options
  );
export const GetShareTransactionReportDocument = `
    query getShareTransactionReport($data: ShareTransactionReportFilter) {
  report {
    shareReport {
      shareTransactionReport(data: $data) {
        data {
          transactionDate
          memberId
          memberCode
          name
          particular
          shareReturnDr
          shareIssueCr
          balance
        }
        footer {
          totalCr
          totalDr
          totalBalance
        }
        totalShareIssued
        avgSharePerMember
      }
    }
  }
}
    `;
export const useGetShareTransactionReportQuery = <
  TData = GetShareTransactionReportQuery,
  TError = unknown
>(
  variables?: GetShareTransactionReportQueryVariables,
  options?: UseQueryOptions<GetShareTransactionReportQuery, TError, TData>
) =>
  useQuery<GetShareTransactionReportQuery, TError, TData>(
    variables === undefined
      ? ['getShareTransactionReport']
      : ['getShareTransactionReport', variables],
    useAxios<GetShareTransactionReportQuery, GetShareTransactionReportQueryVariables>(
      GetShareTransactionReportDocument
    ).bind(null, variables),
    options
  );
export const GetShareBalanceReportDocument = `
    query getShareBalanceReport($data: ShareBalanceReportFilter!) {
  report {
    shareReport {
      shareBalanceReport(data: $data) {
        data {
          shareType
          shareCertificateNo
          memberId
          memberCode
          memberName
          address {
            ...Address
          }
          contactNo
          membershipDate
          noOfKitta
          balance
        }
        totalBalance
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetShareBalanceReportQuery = <TData = GetShareBalanceReportQuery, TError = unknown>(
  variables: GetShareBalanceReportQueryVariables,
  options?: UseQueryOptions<GetShareBalanceReportQuery, TError, TData>
) =>
  useQuery<GetShareBalanceReportQuery, TError, TData>(
    ['getShareBalanceReport', variables],
    useAxios<GetShareBalanceReportQuery, GetShareBalanceReportQueryVariables>(
      GetShareBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetTrialSheetReportDocument = `
    query getTrialSheetReport($data: TrialSheetReportFilter!) {
  report {
    transactionReport {
      financial {
        trialSheetReport(data: $data) {
          data {
            equityAndLiablities {
              balance
              ledgerId
              ledgerName
              under
            }
            expenses {
              balance
              ledgerId
              ledgerName
              under
            }
            income {
              balance
              ledgerId
              ledgerName
              under
            }
            assets {
              balance
              ledgerId
              ledgerName
              under
            }
            offBalance {
              balance
              ledgerId
              ledgerName
              under
            }
            equityAndLiablitiesTotal
            assetsTotal
            expenseTotal
            incomeTotal
            offBalanceTotal
            totalAssetExpense
            totalLiablitiesIncome
            totalProfitLoss
          }
        }
      }
    }
  }
}
    `;
export const useGetTrialSheetReportQuery = <TData = GetTrialSheetReportQuery, TError = unknown>(
  variables: GetTrialSheetReportQueryVariables,
  options?: UseQueryOptions<GetTrialSheetReportQuery, TError, TData>
) =>
  useQuery<GetTrialSheetReportQuery, TError, TData>(
    ['getTrialSheetReport', variables],
    useAxios<GetTrialSheetReportQuery, GetTrialSheetReportQueryVariables>(
      GetTrialSheetReportDocument
    ).bind(null, variables),
    options
  );
export const GetTransactionTellerReportDocument = `
    query getTransactionTellerReport($data: TellerReportFilter!) {
  report {
    transactionReport {
      financial {
        tellerReport(data: $data) {
          data {
            headTeller {
              entries {
                tellerId
                name
                inTransit
                stack
                inAmount
                outAmount
                balance
              }
              inTransitTotal
              stackTotal
              inAmountTotal
              outAmountTotal
              balanceTotal
            }
            teller {
              entries {
                tellerId
                name
                inTransit
                stack
                inAmount
                outAmount
                balance
              }
              inTransitTotal
              stackTotal
              inAmountTotal
              outAmountTotal
              balanceTotal
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetTransactionTellerReportQuery = <
  TData = GetTransactionTellerReportQuery,
  TError = unknown
>(
  variables: GetTransactionTellerReportQueryVariables,
  options?: UseQueryOptions<GetTransactionTellerReportQuery, TError, TData>
) =>
  useQuery<GetTransactionTellerReportQuery, TError, TData>(
    ['getTransactionTellerReport', variables],
    useAxios<GetTransactionTellerReportQuery, GetTransactionTellerReportQueryVariables>(
      GetTransactionTellerReportDocument
    ).bind(null, variables),
    options
  );
export const GetVaultBalanceReportDocument = `
    query getVaultBalanceReport($data: VaultBalanceReportFilter!) {
  report {
    transactionReport {
      financial {
        vaultBalanceReport(data: $data) {
          data {
            opening {
              denomination {
                value
                quantity
                amount
              }
              noneAmount
              noteTotal
              amountTotal
            }
            vaultIn {
              denomination {
                value
                quantity
                amount
              }
              noneAmount
              noteTotal
              amountTotal
            }
            vaultOut {
              denomination {
                value
                quantity
                amount
              }
              noneAmount
              noteTotal
              amountTotal
            }
            closing {
              denomination {
                value
                quantity
                amount
              }
              noneAmount
              noteTotal
              amountTotal
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetVaultBalanceReportQuery = <TData = GetVaultBalanceReportQuery, TError = unknown>(
  variables: GetVaultBalanceReportQueryVariables,
  options?: UseQueryOptions<GetVaultBalanceReportQuery, TError, TData>
) =>
  useQuery<GetVaultBalanceReportQuery, TError, TData>(
    ['getVaultBalanceReport', variables],
    useAxios<GetVaultBalanceReportQuery, GetVaultBalanceReportQueryVariables>(
      GetVaultBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetBankGlStatementReportDocument = `
    query getBankGLStatementReport($data: BankGLStatementFilter!) {
  report {
    transactionReport {
      financial {
        bankGLStatementReport(data: $data) {
          data {
            date
            name
            particular
            chequeNo
            depositAmount
            withdrawAmount
            balance
            remarks
          }
        }
      }
    }
  }
}
    `;
export const useGetBankGlStatementReportQuery = <
  TData = GetBankGlStatementReportQuery,
  TError = unknown
>(
  variables: GetBankGlStatementReportQueryVariables,
  options?: UseQueryOptions<GetBankGlStatementReportQuery, TError, TData>
) =>
  useQuery<GetBankGlStatementReportQuery, TError, TData>(
    ['getBankGLStatementReport', variables],
    useAxios<GetBankGlStatementReportQuery, GetBankGlStatementReportQueryVariables>(
      GetBankGlStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetDayBookReportDocument = `
    query getDayBookReport($data: DayBookReportFilter!) {
  report {
    transactionReport {
      financial {
        dayBookReport(data: $data) {
          data {
            closingAmount
            openingBalance
            payments {
              accountHead
              amount
              entries {
                particular
                ledger
                voucherNo
                amount
              }
            }
            receipts {
              accountHead
              amount
              entries {
                particular
                ledger
                voucherNo
                amount
              }
            }
            totalAmount
            totalPayment
            totalReceipts
          }
        }
      }
    }
  }
}
    `;
export const useGetDayBookReportQuery = <TData = GetDayBookReportQuery, TError = unknown>(
  variables: GetDayBookReportQueryVariables,
  options?: UseQueryOptions<GetDayBookReportQuery, TError, TData>
) =>
  useQuery<GetDayBookReportQuery, TError, TData>(
    ['getDayBookReport', variables],
    useAxios<GetDayBookReportQuery, GetDayBookReportQueryVariables>(GetDayBookReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetChequeBookRequestsDocument = `
    query getChequeBookRequests($pagination: Pagination, $filter: RequestFilter) {
  requests {
    list {
      chequeBookRequest(paginate: $pagination, filter: $filter) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            memberId
            memberCode
            memberName
            memberPhoneNumber
            memberAge
            memberGender
            memberProfilePicUrl
            accountNumber
            accountType
            approvalStatus
            requestedDate
            branchId
            branchName
            numberOfLeaves
            pickUpMethod
            agentName
            remarks
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetChequeBookRequestsQuery = <TData = GetChequeBookRequestsQuery, TError = unknown>(
  variables?: GetChequeBookRequestsQueryVariables,
  options?: UseQueryOptions<GetChequeBookRequestsQuery, TError, TData>
) =>
  useQuery<GetChequeBookRequestsQuery, TError, TData>(
    variables === undefined ? ['getChequeBookRequests'] : ['getChequeBookRequests', variables],
    useAxios<GetChequeBookRequestsQuery, GetChequeBookRequestsQueryVariables>(
      GetChequeBookRequestsDocument
    ).bind(null, variables),
    options
  );
export const GetWithdrawViaCollectorDocument = `
    query getWithdrawViaCollector($pagination: Pagination, $filter: RequestFilter) {
  requests {
    list {
      withdrawViaCollector(paginate: $pagination, filter: $filter) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            memberId
            memberCode
            memberName
            memberPhoneNumber
            accountNumber
            accountType
            approvalStatus
            requestedDate
            collectorName
            amount
            remarks
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetWithdrawViaCollectorQuery = <
  TData = GetWithdrawViaCollectorQuery,
  TError = unknown
>(
  variables?: GetWithdrawViaCollectorQueryVariables,
  options?: UseQueryOptions<GetWithdrawViaCollectorQuery, TError, TData>
) =>
  useQuery<GetWithdrawViaCollectorQuery, TError, TData>(
    variables === undefined ? ['getWithdrawViaCollector'] : ['getWithdrawViaCollector', variables],
    useAxios<GetWithdrawViaCollectorQuery, GetWithdrawViaCollectorQueryVariables>(
      GetWithdrawViaCollectorDocument
    ).bind(null, variables),
    options
  );
export const GetLoanRequestsDocument = `
    query getLoanRequests($pagination: Pagination, $filter: RequestFilter) {
  requests {
    list {
      loanRequest(filter: $filter, paginate: $pagination) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            memberId
            memberCode
            memberName
            memberPhoneNumber
            approvalStatus
            loanAmount
            lastModifiedDate
            purpose
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetLoanRequestsQuery = <TData = GetLoanRequestsQuery, TError = unknown>(
  variables?: GetLoanRequestsQueryVariables,
  options?: UseQueryOptions<GetLoanRequestsQuery, TError, TData>
) =>
  useQuery<GetLoanRequestsQuery, TError, TData>(
    variables === undefined ? ['getLoanRequests'] : ['getLoanRequests', variables],
    useAxios<GetLoanRequestsQuery, GetLoanRequestsQueryVariables>(GetLoanRequestsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBlockChequeListDocument = `
    query getBlockChequeList($pagination: Pagination, $filter: RequestFilter) {
  requests {
    list {
      blockCheque(filter: $filter, paginate: $pagination) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            memberId
            memberCode
            memberName
            memberPhoneNumber
            accountNumber
            accountType
            approvalStatus
            requestedDate
            reason
            chequeNumber
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetBlockChequeListQuery = <TData = GetBlockChequeListQuery, TError = unknown>(
  variables?: GetBlockChequeListQueryVariables,
  options?: UseQueryOptions<GetBlockChequeListQuery, TError, TData>
) =>
  useQuery<GetBlockChequeListQuery, TError, TData>(
    variables === undefined ? ['getBlockChequeList'] : ['getBlockChequeList', variables],
    useAxios<GetBlockChequeListQuery, GetBlockChequeListQueryVariables>(
      GetBlockChequeListDocument
    ).bind(null, variables),
    options
  );
export const GetMemberRequestListDocument = `
    query getMemberRequestList($pagination: Pagination, $filter: RequestFilter) {
  requests {
    list {
      membershipRequest(filter: $filter, paginate: $pagination) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            dateOfBirth
            email
            firstName
            gender
            lastName
            middleName
            mobileNumber
            permanentAddress {
              ...Address
            }
            phoneNumber
            requestedDate
            status
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}
${AddressFragmentDoc}`;
export const useGetMemberRequestListQuery = <TData = GetMemberRequestListQuery, TError = unknown>(
  variables?: GetMemberRequestListQueryVariables,
  options?: UseQueryOptions<GetMemberRequestListQuery, TError, TData>
) =>
  useQuery<GetMemberRequestListQuery, TError, TData>(
    variables === undefined ? ['getMemberRequestList'] : ['getMemberRequestList', variables],
    useAxios<GetMemberRequestListQuery, GetMemberRequestListQueryVariables>(
      GetMemberRequestListDocument
    ).bind(null, variables),
    options
  );
export const GetGlobalSearchDocument = `
    query getGlobalSearch($filter: SearchFilterData, $pagination: Pagination) {
  search {
    globalPages(filter: $filter, pagination: $pagination) {
      data {
        edges {
          cursor
          node {
            ... on GlobalPagesResultNode {
              fullCode
              hasParam
              iconType
              page
              url
            }
          }
        }
        totalCount
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetGlobalSearchQuery = <TData = GetGlobalSearchQuery, TError = unknown>(
  variables?: GetGlobalSearchQueryVariables,
  options?: UseQueryOptions<GetGlobalSearchQuery, TError, TData>
) =>
  useQuery<GetGlobalSearchQuery, TError, TData>(
    variables === undefined ? ['getGlobalSearch'] : ['getGlobalSearch', variables],
    useAxios<GetGlobalSearchQuery, GetGlobalSearchQueryVariables>(GetGlobalSearchDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAlternativeFeeAndChargesDocument = `
    query getAlternativeFeeAndCharges {
  settings {
    general {
      alternativeChannel {
        feesAndCharges {
          data {
            id
            serviceType
            ledgerId
            amount
          }
        }
      }
    }
  }
}
    `;
export const useGetAlternativeFeeAndChargesQuery = <
  TData = GetAlternativeFeeAndChargesQuery,
  TError = unknown
>(
  variables?: GetAlternativeFeeAndChargesQueryVariables,
  options?: UseQueryOptions<GetAlternativeFeeAndChargesQuery, TError, TData>
) =>
  useQuery<GetAlternativeFeeAndChargesQuery, TError, TData>(
    variables === undefined
      ? ['getAlternativeFeeAndCharges']
      : ['getAlternativeFeeAndCharges', variables],
    useAxios<GetAlternativeFeeAndChargesQuery, GetAlternativeFeeAndChargesQueryVariables>(
      GetAlternativeFeeAndChargesDocument
    ).bind(null, variables),
    options
  );
export const GetActivatedServiceDocument = `
    query getActivatedService($memberId: String!) {
  alternativeChannel {
    memberActivations(memberId: $memberId) {
      eBanking
      mobileBanking
      smsBanking
    }
  }
}
    `;
export const useGetActivatedServiceQuery = <TData = GetActivatedServiceQuery, TError = unknown>(
  variables: GetActivatedServiceQueryVariables,
  options?: UseQueryOptions<GetActivatedServiceQuery, TError, TData>
) =>
  useQuery<GetActivatedServiceQuery, TError, TData>(
    ['getActivatedService', variables],
    useAxios<GetActivatedServiceQuery, GetActivatedServiceQueryVariables>(
      GetActivatedServiceDocument
    ).bind(null, variables),
    options
  );
export const GetAlternativeChannelListDocument = `
    query getAlternativeChannelList($filter: AlternativeChannelFilter, $paginate: Pagination) {
  alternativeChannel {
    list(filter: $filter, paginate: $paginate) {
      totalCount
      pageInfo {
        ...Pagination
      }
      edges {
        cursor
        data {
          id
          name
          memberId
          coopConnection
          lastActive
          phoneNumber
          serviceStatus
          serviceType
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAlternativeChannelListQuery = <
  TData = GetAlternativeChannelListQuery,
  TError = unknown
>(
  variables?: GetAlternativeChannelListQueryVariables,
  options?: UseQueryOptions<GetAlternativeChannelListQuery, TError, TData>
) =>
  useQuery<GetAlternativeChannelListQuery, TError, TData>(
    variables === undefined
      ? ['getAlternativeChannelList']
      : ['getAlternativeChannelList', variables],
    useAxios<GetAlternativeChannelListQuery, GetAlternativeChannelListQueryVariables>(
      GetAlternativeChannelListDocument
    ).bind(null, variables),
    options
  );
export const GetAcFeeCoaDocument = `
    query getACFeeCOA {
  settings {
    chartsOfAccount {
      accountsUnder(accountCode: ["160.6", "160.8"]) {
        data {
          id
          accountCode
          name
        }
      }
    }
  }
}
    `;
export const useGetAcFeeCoaQuery = <TData = GetAcFeeCoaQuery, TError = unknown>(
  variables?: GetAcFeeCoaQueryVariables,
  options?: UseQueryOptions<GetAcFeeCoaQuery, TError, TData>
) =>
  useQuery<GetAcFeeCoaQuery, TError, TData>(
    variables === undefined ? ['getACFeeCOA'] : ['getACFeeCOA', variables],
    useAxios<GetAcFeeCoaQuery, GetAcFeeCoaQueryVariables>(GetAcFeeCoaDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAuditLogListDocument = `
    query getAuditLogList {
  auditLog {
    humanize {
      __typename
      ... on AuditLogHumanizeResult {
        data {
          timestamp
          narration
          extraData
        }
      }
    }
  }
}
    `;
export const useGetAuditLogListQuery = <TData = GetAuditLogListQuery, TError = unknown>(
  variables?: GetAuditLogListQueryVariables,
  options?: UseQueryOptions<GetAuditLogListQuery, TError, TData>
) =>
  useQuery<GetAuditLogListQuery, TError, TData>(
    variables === undefined ? ['getAuditLogList'] : ['getAuditLogList', variables],
    useAxios<GetAuditLogListQuery, GetAuditLogListQueryVariables>(GetAuditLogListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBranchListDocument = `
    query getBranchList($paginate: Pagination, $filter: BranchSearchFilter) {
  settings {
    general {
      branch {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              branchCode
              name
              category
              estDate
              managerName
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              location {
                longitude
                latitude
              }
              contactNumber
              email
              abbsTransaction {
                abbsStatus
                receivableAccountId
                payableAccountId
              }
              plTransferId
              tdsTransaferId
              branchStatus
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetBranchListQuery = <TData = GetBranchListQuery, TError = unknown>(
  variables?: GetBranchListQueryVariables,
  options?: UseQueryOptions<GetBranchListQuery, TError, TData>
) =>
  useQuery<GetBranchListQuery, TError, TData>(
    variables === undefined ? ['getBranchList'] : ['getBranchList', variables],
    useAxios<GetBranchListQuery, GetBranchListQueryVariables>(GetBranchListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBranchEditDataDocument = `
    query getBranchEditData($id: ID!) {
  settings {
    general {
      branch {
        formState(id: $id) {
          data {
            branchCode
            name
            serviceCenterPhone
            category
            estDate
            managerName
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            location {
              longitude
              latitude
            }
            phoneNumber
            email
            abbsStatus
            receivableAccountId
            payableAccountId
            plTransferId
            tdsTransaferId
            branchStatus
          }
          error {
            __typename
          }
        }
      }
    }
  }
}
    `;
export const useGetBranchEditDataQuery = <TData = GetBranchEditDataQuery, TError = unknown>(
  variables: GetBranchEditDataQueryVariables,
  options?: UseQueryOptions<GetBranchEditDataQuery, TError, TData>
) =>
  useQuery<GetBranchEditDataQuery, TError, TData>(
    ['getBranchEditData', variables],
    useAxios<GetBranchEditDataQuery, GetBranchEditDataQueryVariables>(
      GetBranchEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetCoaListDocument = `
    query getCOAList($filter: ChartsOfAccountFilter!) {
  settings {
    general {
      chartsOfAccount {
        accounts(filter: $filter) {
          data {
            id
            name
            under
            accountClass
            accountCode
            currency
            accountType
            openingBalance
          }
        }
      }
    }
  }
}
    `;
export const useGetCoaListQuery = <TData = GetCoaListQuery, TError = unknown>(
  variables: GetCoaListQueryVariables,
  options?: UseQueryOptions<GetCoaListQuery, TError, TData>
) =>
  useQuery<GetCoaListQuery, TError, TData>(
    ['getCOAList', variables],
    useAxios<GetCoaListQuery, GetCoaListQueryVariables>(GetCoaListDocument).bind(null, variables),
    options
  );
export const GetCoaFullViewDocument = `
    query getCoaFullView {
  settings {
    chartsOfAccount {
      fullView {
        data {
          id
          name
          under
          accountType
          accountClass
          accountCode
          category
          allowedBalance
          transactionAllowed
        }
      }
    }
  }
}
    `;
export const useGetCoaFullViewQuery = <TData = GetCoaFullViewQuery, TError = unknown>(
  variables?: GetCoaFullViewQueryVariables,
  options?: UseQueryOptions<GetCoaFullViewQuery, TError, TData>
) =>
  useQuery<GetCoaFullViewQuery, TError, TData>(
    variables === undefined ? ['getCoaFullView'] : ['getCoaFullView', variables],
    useAxios<GetCoaFullViewQuery, GetCoaFullViewQueryVariables>(GetCoaFullViewDocument).bind(
      null,
      variables
    ),
    options
  );
export const SearchCoaDocument = `
    query searchCOA($coaName: String!) {
  settings {
    general {
      chartsOfAccount {
        search(name: $coaName) {
          data {
            id
            name
            accountCode
          }
        }
      }
    }
  }
}
    `;
export const useSearchCoaQuery = <TData = SearchCoaQuery, TError = unknown>(
  variables: SearchCoaQueryVariables,
  options?: UseQueryOptions<SearchCoaQuery, TError, TData>
) =>
  useQuery<SearchCoaQuery, TError, TData>(
    ['searchCOA', variables],
    useAxios<SearchCoaQuery, SearchCoaQueryVariables>(SearchCoaDocument).bind(null, variables),
    options
  );
export const GetCoaAccountsUnderListDocument = `
    query getCOAAccountsUnderList($accountCode: [String]) {
  settings {
    chartsOfAccount {
      accountsUnder(accountCode: $accountCode) {
        data {
          id
          accountCode
          name
        }
      }
    }
  }
}
    `;
export const useGetCoaAccountsUnderListQuery = <
  TData = GetCoaAccountsUnderListQuery,
  TError = unknown
>(
  variables?: GetCoaAccountsUnderListQueryVariables,
  options?: UseQueryOptions<GetCoaAccountsUnderListQuery, TError, TData>
) =>
  useQuery<GetCoaAccountsUnderListQuery, TError, TData>(
    variables === undefined ? ['getCOAAccountsUnderList'] : ['getCOAAccountsUnderList', variables],
    useAxios<GetCoaAccountsUnderListQuery, GetCoaAccountsUnderListQueryVariables>(
      GetCoaAccountsUnderListDocument
    ).bind(null, variables),
    options
  );
export const GetCoaAccountsUnderLeafListDocument = `
    query getCOAAccountsUnderLeafList($parentId: [String]!, $currentBranch: Boolean) {
  settings {
    chartsOfAccount {
      accountsUnderLeaf(parentId: $parentId, currentBranch: $currentBranch) {
        accountId
        name
      }
    }
  }
}
    `;
export const useGetCoaAccountsUnderLeafListQuery = <
  TData = GetCoaAccountsUnderLeafListQuery,
  TError = unknown
>(
  variables: GetCoaAccountsUnderLeafListQueryVariables,
  options?: UseQueryOptions<GetCoaAccountsUnderLeafListQuery, TError, TData>
) =>
  useQuery<GetCoaAccountsUnderLeafListQuery, TError, TData>(
    ['getCOAAccountsUnderLeafList', variables],
    useAxios<GetCoaAccountsUnderLeafListQuery, GetCoaAccountsUnderLeafListQueryVariables>(
      GetCoaAccountsUnderLeafListDocument
    ).bind(null, variables),
    options
  );
export const GetCoaAccountListDocument = `
    query getCoaAccountList($branchId: String, $pagination: Pagination) {
  settings {
    chartsOfAccount {
      coaAccountList(branchId: $branchId, pagination: $pagination) {
        edges {
          node {
            accountCode
            accountName
            accountClass
            parentGroup
          }
        }
      }
    }
  }
}
    `;
export const useGetCoaAccountListQuery = <TData = GetCoaAccountListQuery, TError = unknown>(
  variables?: GetCoaAccountListQueryVariables,
  options?: UseQueryOptions<GetCoaAccountListQuery, TError, TData>
) =>
  useQuery<GetCoaAccountListQuery, TError, TData>(
    variables === undefined ? ['getCoaAccountList'] : ['getCoaAccountList', variables],
    useAxios<GetCoaAccountListQuery, GetCoaAccountListQueryVariables>(
      GetCoaAccountListDocument
    ).bind(null, variables),
    options
  );
export const ListCbsShareCodesDocument = `
    query listCBSShareCodes {
  settings {
    general {
      codes {
        cbs {
          allCbsCodes {
            data {
              share {
                id
                codeType
                prefix
                noOfDigit
                initialNo
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useListCbsShareCodesQuery = <TData = ListCbsShareCodesQuery, TError = unknown>(
  variables?: ListCbsShareCodesQueryVariables,
  options?: UseQueryOptions<ListCbsShareCodesQuery, TError, TData>
) =>
  useQuery<ListCbsShareCodesQuery, TError, TData>(
    variables === undefined ? ['listCBSShareCodes'] : ['listCBSShareCodes', variables],
    useAxios<ListCbsShareCodesQuery, ListCbsShareCodesQueryVariables>(
      ListCbsShareCodesDocument
    ).bind(null, variables),
    options
  );
export const ListCbsTransfersCodesDocument = `
    query listCBSTransfersCodes {
  settings {
    general {
      codes {
        cbs {
          allCbsCodes {
            data {
              transfers {
                id
                codeType
                prefix
                noOfDigit
                initialNo
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useListCbsTransfersCodesQuery = <TData = ListCbsTransfersCodesQuery, TError = unknown>(
  variables?: ListCbsTransfersCodesQueryVariables,
  options?: UseQueryOptions<ListCbsTransfersCodesQuery, TError, TData>
) =>
  useQuery<ListCbsTransfersCodesQuery, TError, TData>(
    variables === undefined ? ['listCBSTransfersCodes'] : ['listCBSTransfersCodes', variables],
    useAxios<ListCbsTransfersCodesQuery, ListCbsTransfersCodesQueryVariables>(
      ListCbsTransfersCodesDocument
    ).bind(null, variables),
    options
  );
export const ListCbsWithdrawSlipCodesDocument = `
    query listCBSWithdrawSlipCodes {
  settings {
    general {
      codes {
        cbs {
          allCbsCodes {
            data {
              withdrawSlip {
                id
                codeType
                prefix
                noOfDigit
                initialNo
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useListCbsWithdrawSlipCodesQuery = <
  TData = ListCbsWithdrawSlipCodesQuery,
  TError = unknown
>(
  variables?: ListCbsWithdrawSlipCodesQueryVariables,
  options?: UseQueryOptions<ListCbsWithdrawSlipCodesQuery, TError, TData>
) =>
  useQuery<ListCbsWithdrawSlipCodesQuery, TError, TData>(
    variables === undefined
      ? ['listCBSWithdrawSlipCodes']
      : ['listCBSWithdrawSlipCodes', variables],
    useAxios<ListCbsWithdrawSlipCodesQuery, ListCbsWithdrawSlipCodesQueryVariables>(
      ListCbsWithdrawSlipCodesDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductListDocument = `
    query getLoanProductList($paginate: Pagination, $filter: LoanProductSearchFilter) {
  settings {
    general {
      loanProducts {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              createdBy {
                id
                name
                username
                userType
              }
              createdDate
              modifiedBy {
                id
                name
                username
                userType
              }
              productName
              productCodeString
              productCode {
                prefix
                initialNo
              }
              productType
              productSubType
              interest {
                minRate
                maxRate
                defaultRate
                ceoAuthority
                boardAuthority
              }
            }
          }
          totalCount
        }
      }
    }
  }
}
    `;
export const useGetLoanProductListQuery = <TData = GetLoanProductListQuery, TError = unknown>(
  variables?: GetLoanProductListQueryVariables,
  options?: UseQueryOptions<GetLoanProductListQuery, TError, TData>
) =>
  useQuery<GetLoanProductListQuery, TError, TData>(
    variables === undefined ? ['getLoanProductList'] : ['getLoanProductList', variables],
    useAxios<GetLoanProductListQuery, GetLoanProductListQueryVariables>(
      GetLoanProductListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductEditDataDocument = `
    query getLoanProductEditData($id: ID!) {
  settings {
    general {
      loanProducts {
        formState(id: $id) {
          data {
            id
            objState
            createdAt
            modifiedAt
            productName
            productType
            productSubType
            productNature
            productCode {
              prefix
              initialNo
              noOfDigits
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            minimumLoanAmount
            maxLoanAmount
            repaymentScheme
            allowPartialInstallment
            installmentFrequency
            isMonthlyInstallmentCompulsory
            interestMethod
            isPenaltyApplicable
            penaltyType
            penaltyDayAfterInstallmentDate
            penaltyRate
            penaltyAmount
            isRebateApplicable
            rebate {
              dayBeforeInstallmentDate
              rebateRate
              rebateAmount
              rebateLedgerMapping
            }
            principalMaxGraceNumber
            interestMaxGraceNumber
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
            }
            updateInterest
            waiveInterest
            postingFrequency
            loanProcessingCharge {
              serviceName
              ledgerName
              amount
            }
            isInsuranceApplicable
            insuranceType {
              type
              amount
              rate
            }
            ledgerMapping {
              principal
              interestAccuredDaily
              interestIncome
            }
            isStaffProduct
            supportMultipleAccounts
            loanScheduleChangeOverride
            requiredDocuments
            isCollateralRequired
            allowGurantee
            maxPercentOfGurantee
            collateralTypes
            collateralValue {
              type
              minFMV
              maxFMV
              minDV
              maxDV
              minValue
              maxValue
            }
            isPrematurePenaltyApplicable
            prematurePenaltySetup {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductEditDataQuery = <
  TData = GetLoanProductEditDataQuery,
  TError = unknown
>(
  variables: GetLoanProductEditDataQueryVariables,
  options?: UseQueryOptions<GetLoanProductEditDataQuery, TError, TData>
) =>
  useQuery<GetLoanProductEditDataQuery, TError, TData>(
    ['getLoanProductEditData', variables],
    useAxios<GetLoanProductEditDataQuery, GetLoanProductEditDataQueryVariables>(
      GetLoanProductEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductDetailDocument = `
    query getLoanProductDetail($id: ID!) {
  settings {
    general {
      loanProducts {
        getProductDetail(id: $id) {
          data {
            id
            noOfaccount
            noOfMember
            objState
            createdAt
            modifiedAt
            productName
            productType
            productSubType
            productNature
            productCode {
              prefix
              initialNo
              noOfDigits
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            minimumLoanAmount
            maxLoanAmount
            repaymentScheme
            allowPartialInstallment
            installmentFrequency
            isMonthlyInstallmentCompulsory
            interestMethod
            isPenaltyApplicable
            penalty {
              penaltyType
              penaltyDayAfterInstallmentDate
              penaltyRate
              penaltyAmount
            }
            isRebateApplicable
            rebate {
              dayBeforeInstallmentDate
              rebateRate
              rebateAmount
              rebateLedgerMapping
              noOfInstallment
            }
            principalMaxGraceNumber
            interestMaxGraceNumber
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
            }
            updateInterest
            waiveInterest
            postingFrequency
            loanProcessingCharge {
              serviceName
              ledgerName
              amount
            }
            isInsuranceApplicable
            insuranceType {
              type
              amount
              rate
            }
            ledgerMapping {
              principal
              interestAccuredDaily
              interestIncome
            }
            isStaffProduct
            supportMultipleAccounts
            loanScheduleChangeOverride
            requiredDocuments
            isCollateralRequired
            allowGurantee
            maxPercentOfGurantee
            collateralTypes
            collateralValue {
              type
              minFMV
              maxFMV
              minDV
              maxDV
              minValue
              maxValue
            }
            isPrematurePenaltyApplicable
            prematurePenaltySetup {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductDetailQuery = <TData = GetLoanProductDetailQuery, TError = unknown>(
  variables: GetLoanProductDetailQueryVariables,
  options?: UseQueryOptions<GetLoanProductDetailQuery, TError, TData>
) =>
  useQuery<GetLoanProductDetailQuery, TError, TData>(
    ['getLoanProductDetail', variables],
    useAxios<GetLoanProductDetailQuery, GetLoanProductDetailQueryVariables>(
      GetLoanProductDetailDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountListDocument = `
    query getLoanAccountList($paginate: Pagination, $filter: LoanAccountSearchFilter) {
  settings {
    general {
      loanProducts {
        getLoanAccountlist(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              approvedDate
              member {
                code
                name
              }
              productType
              productSubType {
                id
                productSubType
                productTypeID
              }
              LoanAccountName
              appliedLoanAmount
              approvedDate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanAccountListQuery = <TData = GetLoanAccountListQuery, TError = unknown>(
  variables?: GetLoanAccountListQueryVariables,
  options?: UseQueryOptions<GetLoanAccountListQuery, TError, TData>
) =>
  useQuery<GetLoanAccountListQuery, TError, TData>(
    variables === undefined ? ['getLoanAccountList'] : ['getLoanAccountList', variables],
    useAxios<GetLoanAccountListQuery, GetLoanAccountListQueryVariables>(
      GetLoanAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductCriteriaDocument = `
    query getLoanProductCriteria($productId: ID!) {
  settings {
    general {
      loanProducts {
        getProductCriteria(productId: $productId) {
          data {
            gender
            minAge
            maxAge
            ethnicity
            educationQualification
            maritalStatus
            foreignEmployment
            occupation
            institutionType
            cooperativeUnion
            cooperativeType
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductCriteriaQuery = <
  TData = GetLoanProductCriteriaQuery,
  TError = unknown
>(
  variables: GetLoanProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetLoanProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetLoanProductCriteriaQuery, TError, TData>(
    ['getLoanProductCriteria', variables],
    useAxios<GetLoanProductCriteriaQuery, GetLoanProductCriteriaQueryVariables>(
      GetLoanProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetLoanGeneralSettingsDocument = `
    query getLoanGeneralSettings {
  settings {
    general {
      loan {
        general {
          emi
          epi
          flat
          collateralList {
            id
            name
            enabled
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanGeneralSettingsQuery = <
  TData = GetLoanGeneralSettingsQuery,
  TError = unknown
>(
  variables?: GetLoanGeneralSettingsQueryVariables,
  options?: UseQueryOptions<GetLoanGeneralSettingsQuery, TError, TData>
) =>
  useQuery<GetLoanGeneralSettingsQuery, TError, TData>(
    variables === undefined ? ['getLoanGeneralSettings'] : ['getLoanGeneralSettings', variables],
    useAxios<GetLoanGeneralSettingsQuery, GetLoanGeneralSettingsQueryVariables>(
      GetLoanGeneralSettingsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductSettingsDocument = `
    query getLoanProductSettings {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductSettingsQuery = <
  TData = GetLoanProductSettingsQuery,
  TError = unknown
>(
  variables?: GetLoanProductSettingsQueryVariables,
  options?: UseQueryOptions<GetLoanProductSettingsQuery, TError, TData>
) =>
  useQuery<GetLoanProductSettingsQuery, TError, TData>(
    variables === undefined ? ['getLoanProductSettings'] : ['getLoanProductSettings', variables],
    useAxios<GetLoanProductSettingsQuery, GetLoanProductSettingsQueryVariables>(
      GetLoanProductSettingsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductSubTypeDocument = `
    query getLoanProductSubType($productTypeId: String) {
  settings {
    general {
      loan {
        productType {
          productSubTypes(productTypeID: $productTypeId) {
            id
            productSubType
            productTypeID
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductSubTypeQuery = <TData = GetLoanProductSubTypeQuery, TError = unknown>(
  variables?: GetLoanProductSubTypeQueryVariables,
  options?: UseQueryOptions<GetLoanProductSubTypeQuery, TError, TData>
) =>
  useQuery<GetLoanProductSubTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanProductSubType'] : ['getLoanProductSubType', variables],
    useAxios<GetLoanProductSubTypeQuery, GetLoanProductSubTypeQueryVariables>(
      GetLoanProductSubTypeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanInsuranceSchemeDocument = `
    query getLoanInsuranceScheme {
  settings {
    general {
      loan {
        insuranceSchemes {
          id
          insuranceCompany
          insurancePremiumPercent
          maxAmount
          maxPercent
          minAmount
          paymentFrequency
          minPercent
          paymentType
          schemeName
        }
      }
    }
  }
}
    `;
export const useGetLoanInsuranceSchemeQuery = <
  TData = GetLoanInsuranceSchemeQuery,
  TError = unknown
>(
  variables?: GetLoanInsuranceSchemeQueryVariables,
  options?: UseQueryOptions<GetLoanInsuranceSchemeQuery, TError, TData>
) =>
  useQuery<GetLoanInsuranceSchemeQuery, TError, TData>(
    variables === undefined ? ['getLoanInsuranceScheme'] : ['getLoanInsuranceScheme', variables],
    useAxios<GetLoanInsuranceSchemeQuery, GetLoanInsuranceSchemeQueryVariables>(
      GetLoanInsuranceSchemeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductTypeDocument = `
    query getLoanProductType {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
          productSubTypes {
            id
            productSubType
            productTypeID
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductTypeQuery = <TData = GetLoanProductTypeQuery, TError = unknown>(
  variables?: GetLoanProductTypeQueryVariables,
  options?: UseQueryOptions<GetLoanProductTypeQuery, TError, TData>
) =>
  useQuery<GetLoanProductTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanProductType'] : ['getLoanProductType', variables],
    useAxios<GetLoanProductTypeQuery, GetLoanProductTypeQueryVariables>(
      GetLoanProductTypeDocument
    ).bind(null, variables),
    options
  );
export const GetGeneralMemberSettingsDataDocument = `
    query getGeneralMemberSettingsData {
  settings {
    general {
      KYM {
        general {
          generalMember {
            record {
              memberType {
                individual
                institution
                cooperative
                cooperativeUnion
              }
              risk {
                generalRisk
                mediumRisk
                highRisk
              }
              charge {
                memberType
                ledgerId
                charge
              }
              memberCode {
                prefix
                noOfDigits
                initialNo
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetGeneralMemberSettingsDataQuery = <
  TData = GetGeneralMemberSettingsDataQuery,
  TError = unknown
>(
  variables?: GetGeneralMemberSettingsDataQueryVariables,
  options?: UseQueryOptions<GetGeneralMemberSettingsDataQuery, TError, TData>
) =>
  useQuery<GetGeneralMemberSettingsDataQuery, TError, TData>(
    variables === undefined
      ? ['getGeneralMemberSettingsData']
      : ['getGeneralMemberSettingsData', variables],
    useAxios<GetGeneralMemberSettingsDataQuery, GetGeneralMemberSettingsDataQueryVariables>(
      GetGeneralMemberSettingsDataDocument
    ).bind(null, variables),
    options
  );
export const GetPreDefinedFieldsDocument = `
    query getPreDefinedFields($filter: PredefinedElementFilter!) {
  settings {
    form {
      predefined {
        details(filter: $filter) {
          data {
            ... on FormField {
              __typename
              id
              name
              fieldType
              hasOtherField
              order
              dependsOn
              isDefault
              options {
                order
                id
                name
                enabled
                isDefault
              }
            }
            ... on FormSection {
              __typename
              id
              name
              isDefault
              sectionType
              maxSize
              fields {
                id
                name
                enabled
                fieldType
                isDefault
              }
              subSections {
                id
                name
                search_term
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetPreDefinedFieldsQuery = <TData = GetPreDefinedFieldsQuery, TError = unknown>(
  variables: GetPreDefinedFieldsQueryVariables,
  options?: UseQueryOptions<GetPreDefinedFieldsQuery, TError, TData>
) =>
  useQuery<GetPreDefinedFieldsQuery, TError, TData>(
    ['getPreDefinedFields', variables],
    useAxios<GetPreDefinedFieldsQuery, GetPreDefinedFieldsQueryVariables>(
      GetPreDefinedFieldsDocument
    ).bind(null, variables),
    options
  );
export const GetCustomFieldsDocument = `
    query getCustomFields($kymType: FormCategory!) {
  settings {
    form {
      custom {
        list(filter: {category: $kymType}) {
          data {
            ... on FormField {
              __typename
              id
              name
              fieldType
              hasOtherField
              order
              dependsOn
              isDefault
              options {
                order
                id
                name
                enabled
                isDefault
              }
            }
            ... on FormSection {
              __typename
              id
              name
              isDefault
              sectionType
              maxSize
              fields {
                id
                name
                enabled
                fieldType
                isDefault
              }
              subSections {
                id
                name
                search_term
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCustomFieldsQuery = <TData = GetCustomFieldsQuery, TError = unknown>(
  variables: GetCustomFieldsQueryVariables,
  options?: UseQueryOptions<GetCustomFieldsQuery, TError, TData>
) =>
  useQuery<GetCustomFieldsQuery, TError, TData>(
    ['getCustomFields', variables],
    useAxios<GetCustomFieldsQuery, GetCustomFieldsQueryVariables>(GetCustomFieldsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetDeclarationDocument = `
    query getDeclaration($kymType: DeclarationFor!) {
  settings {
    declaration {
      get(for: $kymType) {
        data {
          content
        }
      }
    }
  }
}
    `;
export const useGetDeclarationQuery = <TData = GetDeclarationQuery, TError = unknown>(
  variables: GetDeclarationQueryVariables,
  options?: UseQueryOptions<GetDeclarationQuery, TError, TData>
) =>
  useQuery<GetDeclarationQuery, TError, TData>(
    ['getDeclaration', variables],
    useAxios<GetDeclarationQuery, GetDeclarationQueryVariables>(GetDeclarationDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetDepositSettingsIroDocument = `
    query getDepositSettingsIro {
  settings {
    general {
      deposit {
        ... on DepositSettingsQuery {
          iroFormState {
            data {
              iroName
              iroAddress
              iroCode
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositSettingsIroQuery = <TData = GetDepositSettingsIroQuery, TError = unknown>(
  variables?: GetDepositSettingsIroQueryVariables,
  options?: UseQueryOptions<GetDepositSettingsIroQuery, TError, TData>
) =>
  useQuery<GetDepositSettingsIroQuery, TError, TData>(
    variables === undefined ? ['getDepositSettingsIro'] : ['getDepositSettingsIro', variables],
    useAxios<GetDepositSettingsIroQuery, GetDepositSettingsIroQueryVariables>(
      GetDepositSettingsIroDocument
    ).bind(null, variables),
    options
  );
export const GetDepositSettingsTdsDocument = `
    query getDepositSettingsTds {
  settings {
    general {
      deposit {
        ... on DepositSettingsQuery {
          tdsFormState {
            data {
              individual
              institution
              cooperative
              coopUnion
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositSettingsTdsQuery = <TData = GetDepositSettingsTdsQuery, TError = unknown>(
  variables?: GetDepositSettingsTdsQueryVariables,
  options?: UseQueryOptions<GetDepositSettingsTdsQuery, TError, TData>
) =>
  useQuery<GetDepositSettingsTdsQuery, TError, TData>(
    variables === undefined ? ['getDepositSettingsTds'] : ['getDepositSettingsTds', variables],
    useAxios<GetDepositSettingsTdsQuery, GetDepositSettingsTdsQueryVariables>(
      GetDepositSettingsTdsDocument
    ).bind(null, variables),
    options
  );
export const GetDepositProductSettingsListDocument = `
    query getDepositProductSettingsList($paginate: Pagination, $filter: DepositProductSearchFilter) {
  settings {
    general {
      depositProduct {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              productCode
              productName
              nature
              interest
              interest
              createdDate
              typeOfMember
              createdAt
              createdBy {
                id
                name
                username
                userType
              }
              modifiedAt
              modifiedBy {
                id
                name
                username
                userType
              }
            }
          }
          totalCount
        }
      }
    }
  }
}
    `;
export const useGetDepositProductSettingsListQuery = <
  TData = GetDepositProductSettingsListQuery,
  TError = unknown
>(
  variables?: GetDepositProductSettingsListQueryVariables,
  options?: UseQueryOptions<GetDepositProductSettingsListQuery, TError, TData>
) =>
  useQuery<GetDepositProductSettingsListQuery, TError, TData>(
    variables === undefined
      ? ['getDepositProductSettingsList']
      : ['getDepositProductSettingsList', variables],
    useAxios<GetDepositProductSettingsListQuery, GetDepositProductSettingsListQueryVariables>(
      GetDepositProductSettingsListDocument
    ).bind(null, variables),
    options
  );
export const GetDepositProductSettingsEditDataDocument = `
    query getDepositProductSettingsEditData($id: ID!) {
  settings {
    general {
      depositProduct {
        formState(id: $id) {
          data {
            productName
            nature
            productCode {
              prefix
              initialNo
              noOfDigits
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            transactionAllowed
            noOftransactionAllowed
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isForMinors
            depositAmount {
              minAmount
              maxAmount
            }
            withdrawAmountLimit {
              minAmount
              maxAmount
            }
            fixedDepositAmountLimit {
              minAmount
              maxAmount
            }
            depositFrequency
            penalty
            penaltyData {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate
            rebateData {
              dayBeforeInstallmentDate
              noOfInstallment
              rebateAmount
              rebateRate
              rebateLedgerMapping
            }
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            balanceLimit {
              minAmount
              maxAmount
            }
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              additionalRate
            }
            ladderRate
            ladderRateData {
              type
              amount
              rate
            }
            postingFrequency
            maxPostingFreqDifference
            accountType
            serviceCharge {
              serviceName
              ledgerName
              amount
            }
            accountCloseCharge {
              serviceName
              ledgerName
              amount
            }
            chequeCharge {
              serviceName
              ledgerName
              amount
            }
            atmCharge {
              serviceName
              ledgerName
              amount
            }
            alternativeChannelCharge {
              serviceName
              ledgerName
              amount
            }
            dormantSetup {
              duration
              condition
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            isMandatorySaving
            autoOpen
            allowLoan
            percentageOfDeposit
            alternativeChannels
            atmFacility
            chequeIssue
            supportMultiple
            staffProduct
            withdrawRestricted
            specifyWithdrawRestriction
            wealthBuildingProduct
            individualDocuments
            institutionDocuments
            isPrematurePenaltyApplicable
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositProductSettingsEditDataQuery = <
  TData = GetDepositProductSettingsEditDataQuery,
  TError = unknown
>(
  variables: GetDepositProductSettingsEditDataQueryVariables,
  options?: UseQueryOptions<GetDepositProductSettingsEditDataQuery, TError, TData>
) =>
  useQuery<GetDepositProductSettingsEditDataQuery, TError, TData>(
    ['getDepositProductSettingsEditData', variables],
    useAxios<
      GetDepositProductSettingsEditDataQuery,
      GetDepositProductSettingsEditDataQueryVariables
    >(GetDepositProductSettingsEditDataDocument).bind(null, variables),
    options
  );
export const GetSavingsProductDetailDocument = `
    query getSavingsProductDetail($id: ID!) {
  settings {
    general {
      depositProduct {
        depositProductDetail(id: $id) {
          data {
            id
            noOfAccounts
            noOfMembers
            objState
            supportMultiple
            productName
            nature
            productCode {
              prefix
              initialNo
              noOfDigits
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            transactionAllowed
            noOftransactionAllowed
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isForMinors
            depositAmount {
              minAmount
              maxAmount
            }
            withdrawAmountLimit {
              minAmount
              maxAmount
            }
            fixedDepositAmountLimit {
              minAmount
              maxAmount
            }
            depositFrequency
            penalty
            penaltyData {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate
            rebateData {
              dayBeforeInstallmentDate
              noOfInstallment
              rebateAmount
              rebateRate
              rebateLedgerMapping
            }
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            balanceLimit {
              minAmount
              maxAmount
            }
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              additionalRate
            }
            ladderRate
            ladderRateData {
              type
              amount
              rate
            }
            postingFrequency
            maxPostingFreqDifference
            accountType
            serviceCharge {
              serviceName
              ledgerName
              amount
            }
            accountCloseCharge {
              serviceName
              ledgerName
              amount
            }
            chequeCharge {
              serviceName
              ledgerName
              amount
            }
            atmCharge {
              serviceName
              ledgerName
              amount
            }
            alternativeChannelCharge {
              serviceName
              ledgerName
              amount
            }
            dormantSetup {
              duration
              condition
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            isMandatorySaving
            autoOpen
            allowLoan
            percentageOfDeposit
            alternativeChannels
            atmFacility
            chequeIssue
            supportMultiple
            staffProduct
            withdrawRestricted
            specifyWithdrawRestriction
            wealthBuildingProduct
            individualDocuments
            institutionDocuments
            isPrematurePenaltyApplicable
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            savingCharges {
              serviceName
              ledgerName
              amount
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingsProductDetailQuery = <
  TData = GetSavingsProductDetailQuery,
  TError = unknown
>(
  variables: GetSavingsProductDetailQueryVariables,
  options?: UseQueryOptions<GetSavingsProductDetailQuery, TError, TData>
) =>
  useQuery<GetSavingsProductDetailQuery, TError, TData>(
    ['getSavingsProductDetail', variables],
    useAxios<GetSavingsProductDetailQuery, GetSavingsProductDetailQueryVariables>(
      GetSavingsProductDetailDocument
    ).bind(null, variables),
    options
  );
export const GetSavingsProductCriteriaDocument = `
    query getSavingsProductCriteria($productId: ID!) {
  settings {
    general {
      depositProduct {
        getProductCriteria(productId: $productId) {
          data {
            gender
            minAge
            maxAge
            ethnicity
            educationQualification
            maritalStatus
            foreignEmployment
            occupation
            institutionType
            cooperativeUnion
            cooperativeType
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingsProductCriteriaQuery = <
  TData = GetSavingsProductCriteriaQuery,
  TError = unknown
>(
  variables: GetSavingsProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetSavingsProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetSavingsProductCriteriaQuery, TError, TData>(
    ['getSavingsProductCriteria', variables],
    useAxios<GetSavingsProductCriteriaQuery, GetSavingsProductCriteriaQueryVariables>(
      GetSavingsProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetSavingsAccountListDocument = `
    query getSavingsAccountList($paginate: Pagination, $filter: DepositLoanAccountSearchFilter) {
  settings {
    general {
      depositProduct {
        getAccountlist(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              closedAt
              accountName
              member {
                code
                type
                name
              }
              balance
              interestAccured
              interestTax
              prematurePenalty
              lastTransactionDate
              accountOpenedDate
              installmentAmount
              product {
                productCode
                productName
                nature
              }
              accountExpiryDate
              overDrawnBalance
              guaranteedAmount
              dues {
                fine
                totalDue
                dueInstallments
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingsAccountListQuery = <TData = GetSavingsAccountListQuery, TError = unknown>(
  variables?: GetSavingsAccountListQueryVariables,
  options?: UseQueryOptions<GetSavingsAccountListQuery, TError, TData>
) =>
  useQuery<GetSavingsAccountListQuery, TError, TData>(
    variables === undefined ? ['getSavingsAccountList'] : ['getSavingsAccountList', variables],
    useAxios<GetSavingsAccountListQuery, GetSavingsAccountListQueryVariables>(
      GetSavingsAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsOptionsFieldsDocument = `
    query getSettingsOptionsFields($searchTerm: FormFieldSearchTerm!, $category: FormCategory!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: $category}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetSettingsOptionsFieldsQuery = <
  TData = GetSettingsOptionsFieldsQuery,
  TError = unknown
>(
  variables: GetSettingsOptionsFieldsQueryVariables,
  options?: UseQueryOptions<GetSettingsOptionsFieldsQuery, TError, TData>
) =>
  useQuery<GetSettingsOptionsFieldsQuery, TError, TData>(
    ['getSettingsOptionsFields', variables],
    useAxios<GetSettingsOptionsFieldsQuery, GetSettingsOptionsFieldsQueryVariables>(
      GetSettingsOptionsFieldsDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareBonusDataDocument = `
    query getSettingsShareBonusData {
  settings {
    general {
      share {
        bonus {
          taxPayer
          taxRate
          accountMapping
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareBonusDataQuery = <
  TData = GetSettingsShareBonusDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareBonusDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareBonusDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareBonusDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareBonusData']
      : ['getSettingsShareBonusData', variables],
    useAxios<GetSettingsShareBonusDataQuery, GetSettingsShareBonusDataQueryVariables>(
      GetSettingsShareBonusDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareDividendDataDocument = `
    query getSettingsShareDividendData {
  settings {
    general {
      share {
        dividend {
          distributionCondition
          dividendRate {
            quarterly {
              firstQuarter
              secondQuarter
              thirdQuarter
              fourthQuarter
            }
            monthly {
              firstMonth
              secondMonth
              thirdMonth
              fourthMonth
              fifthMonth
              sixthMonth
              seventhMonth
              eightMonth
              ninthMonth
              tenthMonth
              eleventhMonth
              twelfthMonth
            }
          }
          dividendTransferTreatment
          accountForFractionalDividends
          accountForShareDividends
          organizationFundForDividends
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareDividendDataQuery = <
  TData = GetSettingsShareDividendDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareDividendDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareDividendDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareDividendDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareDividendData']
      : ['getSettingsShareDividendData', variables],
    useAxios<GetSettingsShareDividendDataQuery, GetSettingsShareDividendDataQueryVariables>(
      GetSettingsShareDividendDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareIssueChargesDataDocument = `
    query getSettingsShareIssueChargesData {
  settings {
    general {
      share {
        shareIssueCharges {
          shareCertificate {
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
          other {
            name
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareIssueChargesDataQuery = <
  TData = GetSettingsShareIssueChargesDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareIssueChargesDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareIssueChargesDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareIssueChargesDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareIssueChargesData']
      : ['getSettingsShareIssueChargesData', variables],
    useAxios<GetSettingsShareIssueChargesDataQuery, GetSettingsShareIssueChargesDataQueryVariables>(
      GetSettingsShareIssueChargesDataDocument
    ).bind(null, variables),
    options
  );
export const GetLedgerMapingShareDocument = `
    query getLedgerMapingShare {
  settings {
    general {
      chartsOfAccount {
        accountsUnder(accountCode: "160.8") {
          data {
            id
            accountCode
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetLedgerMapingShareQuery = <TData = GetLedgerMapingShareQuery, TError = unknown>(
  variables?: GetLedgerMapingShareQueryVariables,
  options?: UseQueryOptions<GetLedgerMapingShareQuery, TError, TData>
) =>
  useQuery<GetLedgerMapingShareQuery, TError, TData>(
    variables === undefined ? ['getLedgerMapingShare'] : ['getLedgerMapingShare', variables],
    useAxios<GetLedgerMapingShareQuery, GetLedgerMapingShareQueryVariables>(
      GetLedgerMapingShareDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareReturnChargesDataDocument = `
    query getSettingsShareReturnChargesData {
  settings {
    general {
      share {
        shareReturnCharges {
          other {
            name
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareReturnChargesDataQuery = <
  TData = GetSettingsShareReturnChargesDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareReturnChargesDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareReturnChargesDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareReturnChargesDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareReturnChargesData']
      : ['getSettingsShareReturnChargesData', variables],
    useAxios<
      GetSettingsShareReturnChargesDataQuery,
      GetSettingsShareReturnChargesDataQueryVariables
    >(GetSettingsShareReturnChargesDataDocument).bind(null, variables),
    options
  );
export const GetSettingsShareGeneralDataDocument = `
    query getSettingsShareGeneralData {
  settings {
    general {
      share {
        general {
          typeOfShare
          multiplicityFactor
          minimumQuantityOfShare
          maximumQuantityOfShare
          paidUpShareRate
          shareIssueAuthority
          typeOfShareKitta
          noOfAuthorisedPaidUpShare
          noOfIssuedShare
          startNumber
          endNumber
          incrementor
          noOfDigits
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareGeneralDataQuery = <
  TData = GetSettingsShareGeneralDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareGeneralDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareGeneralDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareGeneralDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareGeneralData']
      : ['getSettingsShareGeneralData', variables],
    useAxios<GetSettingsShareGeneralDataQuery, GetSettingsShareGeneralDataQueryVariables>(
      GetSettingsShareGeneralDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareTransferDataDocument = `
    query getSettingsShareTransferData {
  settings {
    general {
      share {
        transfer {
          type
          accountForShareFund
          mappedShareLedger
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareTransferDataQuery = <
  TData = GetSettingsShareTransferDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareTransferDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareTransferDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareTransferDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareTransferData']
      : ['getSettingsShareTransferData', variables],
    useAxios<GetSettingsShareTransferDataQuery, GetSettingsShareTransferDataQueryVariables>(
      GetSettingsShareTransferDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsUserListDataDocument = `
    query getSettingsUserListData($paginate: Pagination, $filter: MyraUserSearchFilter) {
  settings {
    myraUser {
      list(paginate: $paginate, filter: $filter) {
        totalCount
        edges {
          node {
            id
            objState
            createdAt
            modifiedAt
            name
            email
            contactNo
            gender
            dob
            role
            branch {
              id
            }
            profilePicUrl
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetSettingsUserListDataQuery = <
  TData = GetSettingsUserListDataQuery,
  TError = unknown
>(
  variables?: GetSettingsUserListDataQueryVariables,
  options?: UseQueryOptions<GetSettingsUserListDataQuery, TError, TData>
) =>
  useQuery<GetSettingsUserListDataQuery, TError, TData>(
    variables === undefined ? ['getSettingsUserListData'] : ['getSettingsUserListData', variables],
    useAxios<GetSettingsUserListDataQuery, GetSettingsUserListDataQueryVariables>(
      GetSettingsUserListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsUserEditDataDocument = `
    query getSettingsUserEditData($id: ID!) {
  settings {
    myraUser {
      formState(id: $id) {
        data {
          name
          email
          contactNo
          gender
          dob
          empCode
          isCoreEmployee
          role
          branch
          identificationSelection
          identificationDetails {
            id
            idNo
            idType
            place
            date
          }
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isTempAsPermanentAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          landlordName
          landlordContact
          profilePicture {
            identifier
            url
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsUserEditDataQuery = <
  TData = GetSettingsUserEditDataQuery,
  TError = unknown
>(
  variables: GetSettingsUserEditDataQueryVariables,
  options?: UseQueryOptions<GetSettingsUserEditDataQuery, TError, TData>
) =>
  useQuery<GetSettingsUserEditDataQuery, TError, TData>(
    ['getSettingsUserEditData', variables],
    useAxios<GetSettingsUserEditDataQuery, GetSettingsUserEditDataQueryVariables>(
      GetSettingsUserEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetValuatorDocument = `
    query getValuator($id: ID!) {
  settings {
    general {
      valuator {
        formState(id: $id) {
          data {
            valuatorName
            valuatorType
            valuatorId
            academicQualification
            valuationLicenseNo
            renewalDate
            contractDate
            insurancePremium
            mobileNo
            phoneNo
            email
            documents
            address {
              localGovernmentId
              districtId
              provinceId
              houseNo
              locality
              wardNo
              coordinates {
                longitude
                latitude
              }
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetValuatorQuery = <TData = GetValuatorQuery, TError = unknown>(
  variables: GetValuatorQueryVariables,
  options?: UseQueryOptions<GetValuatorQuery, TError, TData>
) =>
  useQuery<GetValuatorQuery, TError, TData>(
    ['getValuator', variables],
    useAxios<GetValuatorQuery, GetValuatorQueryVariables>(GetValuatorDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetValuatorListDocument = `
    query getValuatorList($paginate: Pagination) {
  settings {
    general {
      valuator {
        list(paginate: $paginate) {
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          totalCount
          edges {
            node {
              id
              valuatorName
              valuatorType
              address {
                localGovernment
                district
                houseNo
                locality
                state
                wardNo
              }
              phoneNo
              contractDate
            }
            cursor
          }
        }
      }
    }
  }
}
    `;
export const useGetValuatorListQuery = <TData = GetValuatorListQuery, TError = unknown>(
  variables?: GetValuatorListQueryVariables,
  options?: UseQueryOptions<GetValuatorListQuery, TError, TData>
) =>
  useQuery<GetValuatorListQuery, TError, TData>(
    variables === undefined ? ['getValuatorList'] : ['getValuatorList', variables],
    useAxios<GetValuatorListQuery, GetValuatorListQueryVariables>(GetValuatorListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetChartOfAccountsDocument = `
    query getChartOfAccounts {
  settings {
    general {
      chartsOfAccount {
        class {
          data {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetChartOfAccountsQuery = <TData = GetChartOfAccountsQuery, TError = unknown>(
  variables?: GetChartOfAccountsQueryVariables,
  options?: UseQueryOptions<GetChartOfAccountsQuery, TError, TData>
) =>
  useQuery<GetChartOfAccountsQuery, TError, TData>(
    variables === undefined ? ['getChartOfAccounts'] : ['getChartOfAccounts', variables],
    useAxios<GetChartOfAccountsQuery, GetChartOfAccountsQueryVariables>(
      GetChartOfAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetShareBalanceListDocument = `
    query getShareBalanceList($pagination: Pagination, $filter: ShareBalanceFilter) {
  share {
    balance(pagination: $pagination, filter: $filter) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      edges {
        node {
          member {
            id
            code
            name
            profilePic
            profilePicUrl
          }
          count
          amount
        }
      }
    }
  }
}
    `;
export const useGetShareBalanceListQuery = <TData = GetShareBalanceListQuery, TError = unknown>(
  variables?: GetShareBalanceListQueryVariables,
  options?: UseQueryOptions<GetShareBalanceListQuery, TError, TData>
) =>
  useQuery<GetShareBalanceListQuery, TError, TData>(
    variables === undefined ? ['getShareBalanceList'] : ['getShareBalanceList', variables],
    useAxios<GetShareBalanceListQuery, GetShareBalanceListQueryVariables>(
      GetShareBalanceListDocument
    ).bind(null, variables),
    options
  );
export const GetShareRegisterListDocument = `
    query getShareRegisterList($pagination: Pagination, $filter: ShareRegisterFilter) {
  share {
    register(pagination: $pagination, filter: $filter) {
      edges {
        node {
          id
          transactionDate
          transactionDirection
          member {
            id
            code
            name
            profilePic
            profilePicUrl
          }
          balance
          startNumber
          shareAmount
          endNumber
          credit
          debit
        }
        cursor
      }
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetShareRegisterListQuery = <TData = GetShareRegisterListQuery, TError = unknown>(
  variables?: GetShareRegisterListQueryVariables,
  options?: UseQueryOptions<GetShareRegisterListQuery, TError, TData>
) =>
  useQuery<GetShareRegisterListQuery, TError, TData>(
    variables === undefined ? ['getShareRegisterList'] : ['getShareRegisterList', variables],
    useAxios<GetShareRegisterListQuery, GetShareRegisterListQueryVariables>(
      GetShareRegisterListDocument
    ).bind(null, variables),
    options
  );
export const GetShareHistoryDocument = `
    query getShareHistory($memberId: ID!) {
  share {
    history(memberId: $memberId) {
      history {
        id
        member {
          id
          name
          code
        }
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        balance
        shareAmount
        extraFee {
          name
          value
        }
        totalAmount
        paymentMode
        bankId
        voucherNumber
        accountId
      }
      balance {
        member {
          id
          name
        }
        count
        amount
      }
    }
  }
}
    `;
export const useGetShareHistoryQuery = <TData = GetShareHistoryQuery, TError = unknown>(
  variables: GetShareHistoryQueryVariables,
  options?: UseQueryOptions<GetShareHistoryQuery, TError, TData>
) =>
  useQuery<GetShareHistoryQuery, TError, TData>(
    ['getShareHistory', variables],
    useAxios<GetShareHistoryQuery, GetShareHistoryQueryVariables>(GetShareHistoryDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareChargesDocument = `
    query getShareCharges($transactionType: SHARE_TRANSACTION_DIRECTION!, $shareCount: Int!) {
  share {
    charges(transactionType: $transactionType, shareCount: $shareCount) {
      id
      name
      charge
    }
  }
}
    `;
export const useGetShareChargesQuery = <TData = GetShareChargesQuery, TError = unknown>(
  variables: GetShareChargesQueryVariables,
  options?: UseQueryOptions<GetShareChargesQuery, TError, TData>
) =>
  useQuery<GetShareChargesQuery, TError, TData>(
    ['getShareCharges', variables],
    useAxios<GetShareChargesQuery, GetShareChargesQueryVariables>(GetShareChargesDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareDetailDocument = `
    query getShareDetail($transactionID: ID!) {
  share {
    shareDetail(transactionID: $transactionID) {
      data {
        id
        member {
          id
          name
          code
          type
          profilePicUrl
        }
        totalShareCount
        totalShareAmount
        date
        type
        fromTo {
          start
          end
        }
        noOfShare
        amount
        total
        status
        charges {
          name
          value
        }
        paymentDetail {
          paymentMode
          amount
          sourceOfFund
        }
        transactionBranch
        teller
        glTransactions {
          account
          debit
          credit
        }
        totalCredit
        totalDebit
      }
    }
  }
}
    `;
export const useGetShareDetailQuery = <TData = GetShareDetailQuery, TError = unknown>(
  variables: GetShareDetailQueryVariables,
  options?: UseQueryOptions<GetShareDetailQuery, TError, TData>
) =>
  useQuery<GetShareDetailQuery, TError, TData>(
    ['getShareDetail', variables],
    useAxios<GetShareDetailQuery, GetShareDetailQueryVariables>(GetShareDetailDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetDepositListDataDocument = `
    query getDepositListData($filter: AccountTransactionFilter, $pagination: Pagination) {
  transaction {
    listDeposit(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          name
          amount
          state
          paymentMode
          processedBy
          date
          agentName
          agentId
          profilePicUrl
          agentPicUrl
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetDepositListDataQuery = <TData = GetDepositListDataQuery, TError = unknown>(
  variables?: GetDepositListDataQueryVariables,
  options?: UseQueryOptions<GetDepositListDataQuery, TError, TData>
) =>
  useQuery<GetDepositListDataQuery, TError, TData>(
    variables === undefined ? ['getDepositListData'] : ['getDepositListData', variables],
    useAxios<GetDepositListDataQuery, GetDepositListDataQueryVariables>(
      GetDepositListDataDocument
    ).bind(null, variables),
    options
  );
export const GetWithdrawListDataDocument = `
    query getWithdrawListData($filter: AccountTransactionFilter, $pagination: Pagination) {
  transaction {
    listWithdraw(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          name
          amount
          state
          paymentMode
          processedBy
          date
          profilePicUrl
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetWithdrawListDataQuery = <TData = GetWithdrawListDataQuery, TError = unknown>(
  variables?: GetWithdrawListDataQueryVariables,
  options?: UseQueryOptions<GetWithdrawListDataQuery, TError, TData>
) =>
  useQuery<GetWithdrawListDataQuery, TError, TData>(
    variables === undefined ? ['getWithdrawListData'] : ['getWithdrawListData', variables],
    useAxios<GetWithdrawListDataQuery, GetWithdrawListDataQueryVariables>(
      GetWithdrawListDataDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTransferListDataDocument = `
    query getAccountTransferListData($filter: AccountTransactionFilter, $pagination: Pagination) {
  transaction {
    listTransfer(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          amount
          state
          transferType
          date
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAccountTransferListDataQuery = <
  TData = GetAccountTransferListDataQuery,
  TError = unknown
>(
  variables?: GetAccountTransferListDataQueryVariables,
  options?: UseQueryOptions<GetAccountTransferListDataQuery, TError, TData>
) =>
  useQuery<GetAccountTransferListDataQuery, TError, TData>(
    variables === undefined
      ? ['getAccountTransferListData']
      : ['getAccountTransferListData', variables],
    useAxios<GetAccountTransferListDataQuery, GetAccountTransferListDataQueryVariables>(
      GetAccountTransferListDataDocument
    ).bind(null, variables),
    options
  );
export const GetEndOfDayDateDataDocument = `
    query getEndOfDayDateData {
  transaction {
    endOfDayDate
  }
}
    `;
export const useGetEndOfDayDateDataQuery = <TData = GetEndOfDayDateDataQuery, TError = unknown>(
  variables?: GetEndOfDayDateDataQueryVariables,
  options?: UseQueryOptions<GetEndOfDayDateDataQuery, TError, TData>
) =>
  useQuery<GetEndOfDayDateDataQuery, TError, TData>(
    variables === undefined ? ['getEndOfDayDateData'] : ['getEndOfDayDateData', variables],
    useAxios<GetEndOfDayDateDataQuery, GetEndOfDayDateDataQueryVariables>(
      GetEndOfDayDateDataDocument
    ).bind(null, variables),
    options
  );
export const GetTellerTransactionListDataDocument = `
    query getTellerTransactionListData($filter: TellerTransactionFilter, $pagination: Pagination) {
  transaction {
    listTellerTransaction(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          transferCode
          transferType
          transferState
          srcTeller
          amount
          destTeller
          date
          srcProfilePic
          destProfilePic
          srcProfilePicUrl
          destProfilePicUrl
          denomination {
            value
            quantity
            amount
          }
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetTellerTransactionListDataQuery = <
  TData = GetTellerTransactionListDataQuery,
  TError = unknown
>(
  variables?: GetTellerTransactionListDataQueryVariables,
  options?: UseQueryOptions<GetTellerTransactionListDataQuery, TError, TData>
) =>
  useQuery<GetTellerTransactionListDataQuery, TError, TData>(
    variables === undefined
      ? ['getTellerTransactionListData']
      : ['getTellerTransactionListData', variables],
    useAxios<GetTellerTransactionListDataQuery, GetTellerTransactionListDataQueryVariables>(
      GetTellerTransactionListDataDocument
    ).bind(null, variables),
    options
  );
export const TransactionDepositDetailDocument = `
    query transactionDepositDetail($transactionId: ID!) {
  transaction {
    viewDeposit(transactionId: $transactionId) {
      data {
        id
        member {
          id
          code
          objState
          code
          type
          name
          contact
          profilePic
          profilePicUrl
        }
        transactionDate
        accountName
        voucherId
        amount
        fine
        rebate
        totalDepositedAmount
        status
        paymentMode
        sourceOfFund
        depositedBy
        transactionBranch
        teller
        glTransaction {
          account
          debit
          credit
        }
        totalDebit
        totalCredit
      }
    }
  }
}
    `;
export const useTransactionDepositDetailQuery = <
  TData = TransactionDepositDetailQuery,
  TError = unknown
>(
  variables: TransactionDepositDetailQueryVariables,
  options?: UseQueryOptions<TransactionDepositDetailQuery, TError, TData>
) =>
  useQuery<TransactionDepositDetailQuery, TError, TData>(
    ['transactionDepositDetail', variables],
    useAxios<TransactionDepositDetailQuery, TransactionDepositDetailQueryVariables>(
      TransactionDepositDetailDocument
    ).bind(null, variables),
    options
  );
export const TransactionWithdrawDetailDocument = `
    query transactionWithdrawDetail($transactionId: ID!) {
  transaction {
    viewWithdraw(transactionId: $transactionId) {
      data {
        id
        member {
          id
          code
          name
          profilePic
          profilePicUrl
        }
        transactionDate
        accountName
        chequeNo
        withdrawAmount
        withdrawWith
        fine
        totalWithdrawnAmount
        status
        paymentMode
        withdrawnBy
        marketRepId
        marketRepName
        transactionBranch
        teller
        glTransaction {
          account
          debit
          credit
        }
        totalDebit
        totalCredit
      }
    }
  }
}
    `;
export const useTransactionWithdrawDetailQuery = <
  TData = TransactionWithdrawDetailQuery,
  TError = unknown
>(
  variables: TransactionWithdrawDetailQueryVariables,
  options?: UseQueryOptions<TransactionWithdrawDetailQuery, TError, TData>
) =>
  useQuery<TransactionWithdrawDetailQuery, TError, TData>(
    ['transactionWithdrawDetail', variables],
    useAxios<TransactionWithdrawDetailQuery, TransactionWithdrawDetailQueryVariables>(
      TransactionWithdrawDetailDocument
    ).bind(null, variables),
    options
  );
export const TransactionAccountTransferDetailDocument = `
    query transactionAccountTransferDetail($transactionId: ID!) {
  transaction {
    viewAccountTransfer(transactionId: $transactionId) {
      data {
        id
        member {
          id
          name
          profilePic
          profilePicUrl
        }
        transactionDate
        transferAmount
        sourceAccount {
          id
          accountName
        }
        destinationAccount {
          id
          accountName
        }
        transferType
        recipientMember {
          id
          name
        }
        withdrawnBy
        withdrawnSlipNo
        transactionBranch
        objState
        transactionBranch
        teller
        glTransaction {
          account
          debit
          credit
        }
        totalDebit
        totalCredit
      }
    }
  }
}
    `;
export const useTransactionAccountTransferDetailQuery = <
  TData = TransactionAccountTransferDetailQuery,
  TError = unknown
>(
  variables: TransactionAccountTransferDetailQueryVariables,
  options?: UseQueryOptions<TransactionAccountTransferDetailQuery, TError, TData>
) =>
  useQuery<TransactionAccountTransferDetailQuery, TError, TData>(
    ['transactionAccountTransferDetail', variables],
    useAxios<TransactionAccountTransferDetailQuery, TransactionAccountTransferDetailQueryVariables>(
      TransactionAccountTransferDetailDocument
    ).bind(null, variables),
    options
  );
export const AgentTransactionDetailDocument = `
    query agentTransactionDetail($agentId: ID!, $date: String!) {
  transaction {
    viewAgentList(agentId: $agentId, date: $date) {
      data {
        transactionId
        transactionDate
        status
        totalAmount
        assignedMember {
          member
          account
          amount
        }
      }
    }
  }
}
    `;
export const useAgentTransactionDetailQuery = <
  TData = AgentTransactionDetailQuery,
  TError = unknown
>(
  variables: AgentTransactionDetailQueryVariables,
  options?: UseQueryOptions<AgentTransactionDetailQuery, TError, TData>
) =>
  useQuery<AgentTransactionDetailQuery, TError, TData>(
    ['agentTransactionDetail', variables],
    useAxios<AgentTransactionDetailQuery, AgentTransactionDetailQueryVariables>(
      AgentTransactionDetailDocument
    ).bind(null, variables),
    options
  );
export const GetAgentDetailDocument = `
    query getAgentDetail($id: ID!) {
  transaction {
    agentDetail(id: $id) {
      data {
        id
        name
        branch
        totalMembers
        profilePicUrl
      }
    }
  }
}
    `;
export const useGetAgentDetailQuery = <TData = GetAgentDetailQuery, TError = unknown>(
  variables: GetAgentDetailQueryVariables,
  options?: UseQueryOptions<GetAgentDetailQuery, TError, TData>
) =>
  useQuery<GetAgentDetailQuery, TError, TData>(
    ['getAgentDetail', variables],
    useAxios<GetAgentDetailQuery, GetAgentDetailQueryVariables>(GetAgentDetailDocument).bind(
      null,
      variables
    ),
    options
  );
export const LoanRepaymentDetailDocument = `
    query loanRepaymentDetail($paymentId: ID!) {
  transaction {
    viewLoanRepayment(paymentId: $paymentId) {
      data {
        repaymentId
        member {
          id
          code
          name
          profilePicUrl
        }
        loanSubType
        loanAccountId
        loanAccountName
        repaymentDate
        installmentNo
        installmentAmount
        fine
        totalRepaymentAmount
        objState
        installmentDetails {
          installmentNo
          payment
          principalAmount
          interestAmount
        }
        paymentMode
        transactionBranch
        teller
        glTransaction {
          account
          debit
          credit
        }
        totalDebit
        totalCredit
      }
    }
  }
}
    `;
export const useLoanRepaymentDetailQuery = <TData = LoanRepaymentDetailQuery, TError = unknown>(
  variables: LoanRepaymentDetailQueryVariables,
  options?: UseQueryOptions<LoanRepaymentDetailQuery, TError, TData>
) =>
  useQuery<LoanRepaymentDetailQuery, TError, TData>(
    ['loanRepaymentDetail', variables],
    useAxios<LoanRepaymentDetailQuery, LoanRepaymentDetailQueryVariables>(
      LoanRepaymentDetailDocument
    ).bind(null, variables),
    options
  );
export const GetEodStatusDocument = `
    query getEODStatus {
  transaction {
    eodStatus {
      interestBooking
      interestPosting
      transactionDate
      maturity
      dormancy
      cashInVault
    }
  }
}
    `;
export const useGetEodStatusQuery = <TData = GetEodStatusQuery, TError = unknown>(
  variables?: GetEodStatusQueryVariables,
  options?: UseQueryOptions<GetEodStatusQuery, TError, TData>
) =>
  useQuery<GetEodStatusQuery, TError, TData>(
    variables === undefined ? ['getEODStatus'] : ['getEODStatus', variables],
    useAxios<GetEodStatusQuery, GetEodStatusQueryVariables>(GetEodStatusDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllTransactionsListDocument = `
    query getAllTransactionsList($filter: AllTransactionFilter, $pagination: Pagination) {
  transaction {
    listAllTransactions(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          transactionType
          narration
          amount
          date
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAllTransactionsListQuery = <
  TData = GetAllTransactionsListQuery,
  TError = unknown
>(
  variables?: GetAllTransactionsListQueryVariables,
  options?: UseQueryOptions<GetAllTransactionsListQuery, TError, TData>
) =>
  useQuery<GetAllTransactionsListQuery, TError, TData>(
    variables === undefined ? ['getAllTransactionsList'] : ['getAllTransactionsList', variables],
    useAxios<GetAllTransactionsListQuery, GetAllTransactionsListQueryVariables>(
      GetAllTransactionsListDocument
    ).bind(null, variables),
    options
  );
export const GetPastSlipsListDocument = `
    query getPastSlipsList($accountId: ID!) {
  withdrawSlip {
    listPastSlips(accountId: $accountId) {
      data {
        slipNumber
        state
        date
      }
    }
  }
}
    `;
export const useGetPastSlipsListQuery = <TData = GetPastSlipsListQuery, TError = unknown>(
  variables: GetPastSlipsListQueryVariables,
  options?: UseQueryOptions<GetPastSlipsListQuery, TError, TData>
) =>
  useQuery<GetPastSlipsListQuery, TError, TData>(
    ['getPastSlipsList', variables],
    useAxios<GetPastSlipsListQuery, GetPastSlipsListQueryVariables>(GetPastSlipsListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAvailableSlipsListDocument = `
    query getAvailableSlipsList($accountId: ID!) {
  withdrawSlip {
    listAvailableSlips(accountId: $accountId) {
      data {
        slipNumber
        state
        date
      }
    }
  }
}
    `;
export const useGetAvailableSlipsListQuery = <TData = GetAvailableSlipsListQuery, TError = unknown>(
  variables: GetAvailableSlipsListQueryVariables,
  options?: UseQueryOptions<GetAvailableSlipsListQuery, TError, TData>
) =>
  useQuery<GetAvailableSlipsListQuery, TError, TData>(
    ['getAvailableSlipsList', variables],
    useAxios<GetAvailableSlipsListQuery, GetAvailableSlipsListQueryVariables>(
      GetAvailableSlipsListDocument
    ).bind(null, variables),
    options
  );
export const GetAvailableRangeDocument = `
    query getAvailableRange($count: Int!) {
  withdrawSlip {
    getAvailableRange(count: $count) {
      range {
        from
        to
      }
    }
  }
}
    `;
export const useGetAvailableRangeQuery = <TData = GetAvailableRangeQuery, TError = unknown>(
  variables: GetAvailableRangeQueryVariables,
  options?: UseQueryOptions<GetAvailableRangeQuery, TError, TData>
) =>
  useQuery<GetAvailableRangeQuery, TError, TData>(
    ['getAvailableRange', variables],
    useAxios<GetAvailableRangeQuery, GetAvailableRangeQueryVariables>(
      GetAvailableRangeDocument
    ).bind(null, variables),
    options
  );
