/* eslint-disable */
//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from '@tanstack/react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Amount: any;
  Any: unknown;
  Cursor: string;
  Date: string;
  Email: any;
  InvalidData: Record<string, Array<string>>;
  Localized: Record<'local' | 'en' | 'np', string>;
  Map: Record<string, string>;
  Time: string;
};

export type AbbsReportFilter = {
  abbs?: InputMaybe<Scalars['Boolean']>;
  active?: InputMaybe<Scalars['Boolean']>;
  branchId?: InputMaybe<Array<Scalars['String']>>;
};

export type AbbsSatusEntry = {
  ServiceCenterName?: Maybe<Scalars['String']>;
  abbsActive?: Maybe<Scalars['Boolean']>;
  serviceCenterActive?: Maybe<Scalars['Boolean']>;
  serviceCenterId?: Maybe<Scalars['String']>;
};

export type AbbsSatusResult = {
  data?: Maybe<Array<Maybe<AbbsSatusEntry>>>;
  error?: Maybe<QueryError>;
};

export const Action = {
  Approved: 'APPROVED',
  Create: 'CREATE',
  Delete: 'DELETE',
  Export: 'EXPORT',
  Review: 'REVIEW',
  ShowInMenu: 'SHOW_IN_MENU',
  Update: 'UPDATE',
  View: 'VIEW',
} as const;

export type Action = typeof Action[keyof typeof Action];
export type AllTransactionFilterMapping = {
  branchId: Array<LabelValueArray>;
  txnType: Array<LabelValueArray>;
};

export type AbbsTransaction = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  payableAccountId?: Maybe<Scalars['String']>;
  receivableAccountId?: Maybe<Scalars['String']>;
};

export const AbbsTransactionFilter = {
  All: 'ALL',
  PaymentPayable: 'PAYMENT_PAYABLE',
  PaymentReceivable: 'PAYMENT_RECEIVABLE',
} as const;

export type AbbsTransactionFilter =
  typeof AbbsTransactionFilter[keyof typeof AbbsTransactionFilter];
export type AbbsTransactionFilterType = {
  transactionType?: InputMaybe<AbbsTransactionFilter>;
};

export type AbbsTransactionReport = {
  accountNo?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  memberBranch?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['Localized']>;
  paymentPayable?: Maybe<Scalars['String']>;
  paymentReceivable?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  typeOfTransaction?: Maybe<Scalars['String']>;
};

export type AbbsTransactionReportFilter = {
  branchId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  filter?: InputMaybe<AbbsTransactionFilterType>;
  period: LocalizedDateFilter;
};

export type AbbsTransactionReportResult = {
  data?: Maybe<Array<Maybe<AbbsTransactionReport>>>;
  error?: Maybe<QueryError>;
};

export type AccessLog = {
  AuditLog?: Maybe<Array<Maybe<HumanizeAuditLog>>>;
  Namespace?: Maybe<Scalars['String']>;
  Operation?: Maybe<Scalars['String']>;
  OperationName?: Maybe<Scalars['String']>;
  Slug?: Maybe<Scalars['String']>;
  User?: Maybe<MyraUser>;
  Variables?: Maybe<Scalars['String']>;
  bytesReceived?: Maybe<Scalars['Int']>;
  bytesSent?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  elapsedTime?: Maybe<Scalars['String']>;
  header?: Maybe<Scalars['Any']>;
  id?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  requestBody?: Maybe<Scalars['Any']>;
  responseBody?: Maybe<Scalars['Any']>;
  statusCode?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['String']>;
};

export type AccessLogFilterMapping = {
  createdAtDate?: Maybe<DateFilterOutput>;
  elapsedTime: Array<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  statusCode: Array<Scalars['Int']>;
  userId?: Maybe<Scalars['String']>;
};

export type AccessLogQuery = {
  filterMapping?: Maybe<AccessLogFilterMapping>;
  raw: RawAccessLog;
};

export type AccessLogQueryRawArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountActivityEntry = {
  ID: Scalars['ID'];
  accountId?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentName?: Maybe<Scalars['String']>;
  agentPic?: Maybe<Scalars['String']>;
  agentPicUrl?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  branchId: Scalars['String'];
  branchName: Scalars['String'];
  date?: Maybe<Scalars['Localized']>;
  name?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<Scalars['String']>;
  processedBy?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  state: TransactionState;
  transactionCode?: Maybe<Scalars['String']>;
};

export type AccountActivityListConnection = {
  edges?: Maybe<Array<Maybe<AccountActivityListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountActivityListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountActivityEntry>;
};

export type AccountAgent = {
  agentName?: Maybe<Scalars['String']>;
  assignedMember?: Maybe<Scalars['Int']>;
  branchName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  phoneNo?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
};

export type AccountAgentListConnection = {
  edges?: Maybe<Array<Maybe<AccountAgentListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountAgentListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountAgent>;
};

export const AccountClosePaymentMode = {
  AccountTransfer: 'ACCOUNT_TRANSFER',
  BankCheque: 'BANK_CHEQUE',
  Cash: 'CASH',
} as const;

export type AccountClosePaymentMode =
  typeof AccountClosePaymentMode[keyof typeof AccountClosePaymentMode];
export const AccountCloseReason = {
  Death: 'DEATH',
  Migration: 'MIGRATION',
  Other: 'OTHER',
  PersonalReason: 'PERSONAL_REASON',
} as const;

export type AccountCloseReason = typeof AccountCloseReason[keyof typeof AccountCloseReason];
export type AccountClosingReport = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  closedBalance?: Maybe<Scalars['String']>;
  closedBy?: Maybe<Scalars['String']>;
  closingDate?: Maybe<Scalars['Localized']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  openingDate?: Maybe<Scalars['Localized']>;
};

export type AccountClosingReportInput = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<AccountOpeningReportInputFilter>;
  period: LocalizedDateFilter;
};

export type AccountClosingReportResult = {
  data?: Maybe<Array<Maybe<AccountClosingReport>>>;
  error?: Maybe<QueryError>;
};

export type AccountDetailsQueryResult = {
  data?: Maybe<MemberAccountDetails>;
  error?: Maybe<QueryError>;
};

export type AccountLedgerDetails = {
  accountType?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  balanceType?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  ledgerName?: Maybe<Scalars['String']>;
};

export type AccountLedgerListResult = {
  data?: Maybe<Array<Maybe<AccountLedgerDetails>>>;
  error?: Maybe<QueryError>;
};

export type AccountListFilter = {
  productID?: InputMaybe<Scalars['ID']>;
};

export const AccountObjState = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const;

export type AccountObjState = typeof AccountObjState[keyof typeof AccountObjState];
export const AccountOpenDepositVerify = {
  OtherDocument: 'OTHER_DOCUMENT',
  WithdrawSlip: 'WITHDRAW_SLIP',
} as const;

export type AccountOpenDepositVerify =
  typeof AccountOpenDepositVerify[keyof typeof AccountOpenDepositVerify];
export type AccountOpeningReport = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  nature?: Maybe<NatureOfDepositProduct>;
  openedBy?: Maybe<Scalars['String']>;
  openingDate?: Maybe<Scalars['Localized']>;
};

export type AccountOpeningReportInput = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<AccountOpeningReportInputFilter>;
  period: LocalizedDateFilter;
};

export type AccountOpeningReportInputFilter = {
  user: Scalars['String'];
};

export type AccountOpeningReportResult = {
  data?: Maybe<Array<Maybe<AccountOpeningReport>>>;
  error?: Maybe<QueryError>;
};

export const AccountOperationType = {
  Joint: 'JOINT',
  Single: 'SINGLE',
} as const;

export type AccountOperationType = typeof AccountOperationType[keyof typeof AccountOperationType];
export type AccountOperatorDetailsFormState = {
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type AccountPremium = {
  maxRate?: InputMaybe<Scalars['Float']>;
  minRate?: InputMaybe<Scalars['Float']>;
};

export type AccountTransferEntry = {
  ID: Scalars['ID'];
  amount?: Maybe<Scalars['String']>;
  branchId: Scalars['String'];
  branchName: Scalars['String'];
  date?: Maybe<Scalars['Localized']>;
  destAccountID: Scalars['String'];
  srcAccountID: Scalars['String'];
  state: TransactionState;
  transactionCode?: Maybe<Scalars['String']>;
  transferType: TransferType;
};

export type AccountTransferListConnection = {
  edges?: Maybe<Array<Maybe<AccountTransferListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountTransferListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountTransferEntry>;
};

export type AccountTransferPaymentForAccountClose = {
  amount: Scalars['String'];
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type AccountTransferPaymentForAlternativeChannel = {
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type AccountTransferView = {
  destinationAccount?: Maybe<DepositLoanAccount>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  note?: Maybe<Scalars['String']>;
  objState?: Maybe<ObjState>;
  recipientMember?: Maybe<Member>;
  sourceAccount?: Maybe<DepositLoanAccount>;
  teller?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  transferAmount?: Maybe<Scalars['String']>;
  transferType?: Maybe<TransferType>;
  withdrawnBy?: Maybe<Scalars['String']>;
  withdrawnSlipNo?: Maybe<Scalars['String']>;
};

export type AccountTransferViewResult = {
  data?: Maybe<AccountTransferView>;
  error?: Maybe<QueryError>;
};

export type AccountTypeDetailsUnion = BankChartsOfAccount | JournalChartsOfAccount;

export const AccountTypeFilter = {
  Deposit: 'DEPOSIT',
  Loan: 'LOAN',
} as const;

export type AccountTypeFilter = typeof AccountTypeFilter[keyof typeof AccountTypeFilter];
export const AccountTypes = {
  Holding: 'HOLDING',
  Loan: 'LOAN',
  Savings: 'SAVINGS',
} as const;

export type AccountTypes = typeof AccountTypes[keyof typeof AccountTypes];
export type AccountWithdrawSlip = {
  account?: Maybe<DepositLoanAccount>;
  availableRange?: Maybe<SlipRange>;
  id?: Maybe<Scalars['ID']>;
  member?: Maybe<Member>;
  noOfLeaves?: Maybe<Scalars['Int']>;
};

export type AccountWithdrawSlipMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<WithdrawSlipQuery>;
  recordId: Scalars['ID'];
};

export type AccountWithdrawSlipQueryResult = {
  data?: Maybe<Array<Maybe<SlipEntry>>>;
  error?: Maybe<QueryError>;
  slipBookRanges?: Maybe<Array<Maybe<SlipRange>>>;
};

export type AccountWithdrawSlipRangeQueryResult = {
  error?: Maybe<QueryError>;
  range?: Maybe<SlipRange>;
};

export type AccountWithdrawSlipResult = {
  data?: Maybe<AccountWithdrawSlip>;
  error?: Maybe<QueryError>;
};

export const AccountingBankAccountType = {
  Current: 'CURRENT',
  Saving: 'SAVING',
} as const;

export type AccountingBankAccountType =
  typeof AccountingBankAccountType[keyof typeof AccountingBankAccountType];
export type AccountingDebitNote = {
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  noteNo: Scalars['String'];
  referenceNo: Scalars['String'];
  supplierId: Scalars['String'];
  supplierName: Scalars['String'];
  totalAmount: Scalars['String'];
};

export type AccountingDebitNoteConnection = {
  edges?: Maybe<Array<Maybe<AccountingDebitNoteEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountingDebitNoteEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountingDebitNote>;
};

export type AccountingExpense = {
  date: Scalars['Localized'];
  entryNo: Scalars['String'];
  id: Scalars['String'];
  reference: Scalars['String'];
  supplierId: Scalars['String'];
  supplierName: Scalars['String'];
  totalAmount: Scalars['String'];
};

export type AccountingExpenseConnection = {
  edges?: Maybe<Array<Maybe<AccountingExpenseEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountingExpenseEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<AccountingExpense>;
};

export type AccountingExpenseInput = {
  date?: InputMaybe<Scalars['Localized']>;
  discount?: InputMaybe<Scalars['String']>;
  dueDate?: InputMaybe<Scalars['Localized']>;
  note?: InputMaybe<Scalars['String']>;
  reference?: InputMaybe<Scalars['String']>;
  supplierId?: InputMaybe<Scalars['String']>;
  tdsAccount?: InputMaybe<Scalars['String']>;
  tdsAmount?: InputMaybe<Scalars['String']>;
  tdsStatus?: InputMaybe<TdsStatus>;
  transferredLedgers?: InputMaybe<Array<InputMaybe<ExpenseLedgerTransfer>>>;
};

export type AccountingExpenseResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<AccountingPurchaseQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type AccountingInvestmentEntryQueryResult = {
  data?: Maybe<InvestmentEntry>;
  error?: Maybe<QueryError>;
};

export type AccountingInvestmentMutation = {
  addTransaction: AccountingInvestmentMutationResult;
  upsertEntry: AccountingInvestmentMutationResult;
};

export type AccountingInvestmentMutationAddTransactionArgs = {
  data: InvestmentTransactionInput;
};

export type AccountingInvestmentMutationUpsertEntryArgs = {
  data: InvestmentEntryInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type AccountingInvestmentMutationResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type AccountingInvestmentQuery = {
  entryFormState: AccountingInvestmentEntryQueryResult;
  listEntry: InvestmentEntryListConnection;
  listTransaction: InvestmentTransactionListConnection;
};

export type AccountingInvestmentQueryEntryFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingInvestmentQueryListEntryArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingInvestmentQueryListTransactionArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingMutation = {
  bankAccounts: BankAccountMutation;
  externalLoan: ExternalLoanMutation;
  investment: AccountingInvestmentMutation;
  journalVoucher: JournalVoucherMutation;
  ledgerBalanceTransfer: LedgerBalanceTransferMutation;
  organization: AccountingOrganizationMutation;
  purchase: AccountingPurchaseMutation;
  sales: AccountingSalesMutation;
};

export type AccountingOrganizationMutation = {
  upsert: AccountingInvestmentMutationResult;
};

export type AccountingOrganizationMutationUpsertArgs = {
  data: InvestmentAccountInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type AccountingOrganizationQuery = {
  formState: AccountingOrganizationQueryResult;
  list: OrganizationEntryListConnection;
};

export type AccountingOrganizationQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingOrganizationQueryListArgs = {
  filter?: InputMaybe<OrganizationEntryFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingOrganizationQueryResult = {
  data?: Maybe<OrganizationEntry>;
  error?: Maybe<QueryError>;
};

export type AccountingPurchase = {
  date: Scalars['Localized'];
  entryNo: Scalars['String'];
  id: Scalars['String'];
  itemDetails?: Maybe<Array<Maybe<PurchaseItemDetailsType>>>;
  referenceId: Scalars['String'];
  supplierId: Scalars['String'];
  supplierName: Scalars['String'];
  totalAmount: Scalars['String'];
};

export type AccountingPurchaseConnection = {
  edges?: Maybe<Array<Maybe<AccountingPurchaseEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountingPurchaseEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<AccountingPurchase>;
};

export type AccountingPurchaseEntryDetail = {
  billNo: Scalars['String'];
  dueDate: Scalars['Localized'];
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  invoiceDate: Scalars['Localized'];
  invoiceReference: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  paymentDetail?: Maybe<PaymentDetail>;
  productDetails?: Maybe<Array<Maybe<SaleProduct>>>;
  supplierName: Scalars['String'];
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
};

export type AccountingPurchaseExpenseDetail = {
  billNo: Scalars['String'];
  dueDate: Scalars['Localized'];
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  invoiceDate: Scalars['Localized'];
  invoiceReference: Scalars['String'];
  ledgerDetails?: Maybe<Array<Maybe<LedgerDetails>>>;
  notes?: Maybe<Scalars['String']>;
  paymentDetail?: Maybe<PaymentDetail>;
  supplierName: Scalars['String'];
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
};

export type AccountingPurchaseFilter = {
  id?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export type AccountingPurchaseMutation = {
  debitNote?: Maybe<PurchaseEntryResult>;
  expense?: Maybe<AccountingExpenseResult>;
  purchaseEntry?: Maybe<PurchaseEntryResult>;
};

export type AccountingPurchaseMutationDebitNoteArgs = {
  data: PurchaseDebitNoteInput;
};

export type AccountingPurchaseMutationExpenseArgs = {
  data?: InputMaybe<AccountingExpenseInput>;
};

export type AccountingPurchaseMutationPurchaseEntryArgs = {
  data: PurchaseEntryInput;
};

export type AccountingPurchaseQuery = {
  detailDebitNote: PurchaseDebitNoteDetails;
  detailExpenses: PurchaseExpenseDetails;
  detailPurchaseEntry: PurchaseDetailEntry;
  list?: Maybe<AccountingPurchaseConnection>;
  listDebitNote?: Maybe<AccountingDebitNoteConnection>;
  listExpense?: Maybe<AccountingExpenseConnection>;
};

export type AccountingPurchaseQueryDetailDebitNoteArgs = {
  id: Scalars['ID'];
};

export type AccountingPurchaseQueryDetailExpensesArgs = {
  id: Scalars['ID'];
};

export type AccountingPurchaseQueryDetailPurchaseEntryArgs = {
  id: Scalars['ID'];
};

export type AccountingPurchaseQueryListArgs = {
  filter?: InputMaybe<AccountingPurchaseFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingPurchaseQueryListDebitNoteArgs = {
  filter?: InputMaybe<AccountingPurchaseFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingPurchaseQueryListExpenseArgs = {
  filter?: InputMaybe<AccountingPurchaseFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingQuery = {
  bankAccounts: BankAccountQuery;
  externalLoan: ExternalLoanQuery;
  investment: AccountingInvestmentQuery;
  journalVoucher: JournalVoucherQuery;
  ledgerBalanceTransfer: LedgerBalanceTransferQuery;
  organization: AccountingOrganizationQuery;
  purchase: AccountingPurchaseQuery;
  sales: AccountingSalesQuery;
};

export type AccountingReport = {
  externalLoanReport: ExternalLoanReportResult;
  externalLoanStatementReport: ExternalLoanStatementReportResult;
  fdInvestmentReport: FdInvestmentReportResult;
  fdInvestmentStatementReport: FdInvestmentStatementReportResult;
  salesReport: SalesReportResult;
};

export type AccountingReportExternalLoanReportArgs = {
  data: ExternalLoanReportFilter;
};

export type AccountingReportExternalLoanStatementReportArgs = {
  data: ExternalLoanStatementReportFilter;
};

export type AccountingReportFdInvestmentReportArgs = {
  data: FdInvestmentReportFilter;
};

export type AccountingReportFdInvestmentStatementReportArgs = {
  data: FdInvestmentStatementReportFilter;
};

export type AccountingReportSalesReportArgs = {
  data: SalesReportFilter;
};

export type AccountingSalesCreditNoteQueryResult = {
  data?: Maybe<SalesCreditNote>;
  error?: Maybe<QueryError>;
};

export type AccountingSalesCustomerPaymentQueryResult = {
  data?: Maybe<SalesCustomerPayment>;
  error?: Maybe<QueryError>;
};

export type AccountingSalesCustomerQueryResult = {
  data?: Maybe<SalesCustomer>;
  error?: Maybe<QueryError>;
};

export type AccountingSalesMutation = {
  creditNote: AccountingSalesMutationResult;
  upsertCustomer: AccountingSalesMutationResult;
  upsertCustomerPayment: AccountingSalesMutationResult;
  upsertSaleEntry: AccountingSalesMutationResult;
};

export type AccountingSalesMutationCreditNoteArgs = {
  data: SalesCreditNoteInput;
};

export type AccountingSalesMutationUpsertCustomerArgs = {
  data: SalesCustomerInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type AccountingSalesMutationUpsertCustomerPaymentArgs = {
  data: SalesCustomerPaymentInput;
  id: Scalars['ID'];
};

export type AccountingSalesMutationUpsertSaleEntryArgs = {
  data: SalesSaleEntryInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type AccountingSalesMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<AccountingSalesQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type AccountingSalesQuery = {
  creditNoteFormState: AccountingSalesCreditNoteQueryResult;
  customerFormState: AccountingSalesCustomerQueryResult;
  customerPaymentFormState: AccountingSalesCustomerPaymentQueryResult;
  detailCreditNote: SalesSaleCreditNote;
  detailCustomer: SalesCustomerDetail;
  detailSaleEntry: SalesSaleDetailEntry;
  listCreditNote: SalesCreditNoteListConnection;
  listCustomer: SalesCustomerListConnection;
  listCustomerPayment: SalesCustomerPaymentListConnection;
  listSaleEntry: SalesSaleEntryListConnection;
  saleEntryFormState: AccountingSalesSaleEntryQueryResult;
};

export type AccountingSalesQueryCreditNoteFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryCustomerFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryCustomerPaymentFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryDetailCreditNoteArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryDetailCustomerArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryDetailSaleEntryArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesQueryListCreditNoteArgs = {
  filter?: InputMaybe<SalesCreditNoteFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingSalesQueryListCustomerArgs = {
  filter?: InputMaybe<SalesCustomerFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingSalesQueryListCustomerPaymentArgs = {
  filter?: InputMaybe<SalesCustomerPaymentFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingSalesQueryListSaleEntryArgs = {
  filter?: InputMaybe<SalesSaleEntryFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type AccountingSalesQuerySaleEntryFormStateArgs = {
  id: Scalars['ID'];
};

export type AccountingSalesSaleEntryQueryResult = {
  data?: Maybe<SalesSaleEntry>;
  error?: Maybe<QueryError>;
};

export type AccountingSettingsMutation = {
  newTax?: Maybe<NewTaxResult>;
};

export type AccountingSettingsMutationNewTaxArgs = {
  data?: InputMaybe<NewTaxInput>;
  id?: InputMaybe<Scalars['String']>;
};

export type AccountingSettingsQuery = {
  taxRates?: Maybe<Array<Maybe<AccountingTaxRate>>>;
};

export type AccountingTaxRate = {
  default?: Maybe<Scalars['Boolean']>;
  id: Scalars['String'];
  name: Scalars['String'];
  rate: Scalars['Float'];
};

export type AccountsTransactionFilter = {
  accountIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  date?: InputMaybe<LocalizedDateFilter>;
  memberIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type AccountsUnderLeafNode = {
  accountId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type AccountwiseTransactionDetail = {
  accountNo?: Maybe<Scalars['ID']>;
  closingBalance?: Maybe<Scalars['String']>;
  crTransactionAmount?: Maybe<Scalars['String']>;
  crTransactionNo?: Maybe<Scalars['String']>;
  drTransactionAmount?: Maybe<Scalars['String']>;
  drTransactionNo?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['String']>;
};

export type AccrueInterestInfo = {
  balance: Scalars['String'];
  date: Scalars['Localized'];
  interestAccrued: Scalars['String'];
  interestRate?: Maybe<Scalars['Float']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type AccruedInterestFilter = {
  accountId: Scalars['String'];
  memberId: Scalars['String'];
  period: LocalizedDateFilter;
};

export type ActiveInactiveMemberReport = {
  branchDetails?: Maybe<Branch>;
  branchID: Scalars['ID'];
  reportStatement?: Maybe<Array<Maybe<ActiveInactiveMemberStatement>>>;
  summary?: Maybe<ActiveInactiveMemberReportSummary>;
};

export type ActiveInactiveMemberReportData = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<MemberReportFilters>;
  period: LocalizedDateFilter;
};

export type ActiveInactiveMemberReportSummary = {
  activeTotal?: Maybe<Scalars['Int']>;
  inactiveTotal?: Maybe<Scalars['Int']>;
  totalMember?: Maybe<Scalars['Int']>;
};

export type ActiveInactiveMemberStatement = {
  address?: Maybe<Scalars['String']>;
  age?: Maybe<Scalars['Int']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  contactNo?: Maybe<Scalars['String']>;
  district?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Localized']>;
  gender?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  memberRegistrationDate?: Maybe<Scalars['Localized']>;
  memberType?: Maybe<KymMemberTypesEnum>;
  occupation?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  status?: Maybe<MemberStatus>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AddCoaAccountInput = {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  allowedBalance?: InputMaybe<CoaTypeOfTransaction>;
  bankAccountNumber?: InputMaybe<Scalars['String']>;
  bankGLCode?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['ID']>;
  currency: Scalars['String'];
  isAllowFreeEntry: Scalars['Boolean'];
  isAllowTransaction: Scalars['Boolean'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  journalCode?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  openingBalance: Scalars['Float'];
  typeOfTransaction?: InputMaybe<CoaTypeOfTransaction>;
  under?: InputMaybe<Scalars['ID']>;
};

export type AddChartsOfAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ChartsOfAccountSettingsQuery>;
  record?: Maybe<ChartsOfAccount>;
  recordId: Scalars['ID'];
};

export type AddWarehouseInput = {
  address?: InputMaybe<Scalars['String']>;
  branchId?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
};

export type AddWarehouseResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<WarehouseQuery>;
  record?: Maybe<WarehouseInfo>;
  recordId?: Maybe<Scalars['String']>;
};

export type Address = {
  coordinates?: Maybe<Coordinate>;
  district?: Maybe<Scalars['Localized']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernment?: Maybe<Scalars['Localized']>;
  locality?: Maybe<Scalars['Localized']>;
  state?: Maybe<Scalars['Localized']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AddressInput = {
  districtId?: InputMaybe<Scalars['Int']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type AddressType = {
  permanent?: Maybe<Address>;
  temporary?: Maybe<Address>;
};

export const AdjustmentUnit = {
  Minus: 'MINUS',
  Plus: 'PLUS',
} as const;

export type AdjustmentUnit = typeof AdjustmentUnit[keyof typeof AdjustmentUnit];
export type AdministrationQuery = {
  all: Array<Province>;
  districts: Array<Result>;
  municipalities: Array<Result>;
  provinces: Array<Result>;
  wards: Array<Scalars['Int']>;
};

export type AdministrationQueryDistrictsArgs = {
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryMunicipalitiesArgs = {
  districtId?: InputMaybe<Scalars['Int']>;
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryWardsArgs = {
  districtId: Scalars['Int'];
  municipalityId: Scalars['Int'];
  provinceId: Scalars['Int'];
};

export type AdministrativeAddress = {
  district: District;
  locality?: Maybe<Scalars['String']>;
  municipality: Municipality;
  province: Province;
  wardNo: Scalars['Int'];
};

export type AffiliatedDirectorDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  directorName?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type AgentCollection = {
  amount: Scalars['String'];
  date: Scalars['Localized'];
  id: Scalars['String'];
  mrId: Scalars['String'];
  mrName: Scalars['String'];
};

export type AgentCollectionListConnection = {
  edges?: Maybe<Array<Maybe<AgentCollectionListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AgentCollectionListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AgentCollection>;
};

export type AgentDetails = {
  branch?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  totalMembers?: Maybe<Scalars['Int']>;
};

export type AgentFilterMapping = {
  branchId: Array<LabelValueArray>;
};

export type AgentMutation = {
  addMemberToAgent?: Maybe<DepositLoanAccountData>;
  agentTemplate?: Maybe<AgentTemplateResult>;
  agentTodayCollection?: Maybe<AgentTodayListResult>;
  agentTodayDeposit?: Maybe<AgentTodayListResult>;
  agentTodayList?: Maybe<AgentTodayListResult>;
  removeMemberAccountAgent?: Maybe<RemoveMemberResult>;
};

export type AgentMutationAddMemberToAgentArgs = {
  agentId: Scalars['String'];
  data?: InputMaybe<AssignMembersInput>;
  override?: InputMaybe<Scalars['Boolean']>;
};

export type AgentMutationAgentTemplateArgs = {
  agentId: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTemplateInput>>>;
};

export type AgentMutationAgentTodayCollectionArgs = {
  agentId: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>>>;
};

export type AgentMutationAgentTodayDepositArgs = {
  agentID: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>>>;
};

export type AgentMutationAgentTodayListArgs = {
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>>>;
  id: Scalars['ID'];
};

export type AgentMutationRemoveMemberAccountAgentArgs = {
  accountId: Scalars['ID'];
  agentID: Scalars['ID'];
};

export type AgentQuery = {
  agentDetail?: Maybe<AgentRecord>;
  assignedMemberList: AssignedMembersListConnection;
  listAgent: AccountAgentListConnection;
  listAgentCollection?: Maybe<AgentCollectionListConnection>;
  listAgentTask?: Maybe<AgentTodayListData>;
  listAgentTemplate?: Maybe<AgentTemplateData>;
  viewAgentList?: Maybe<AgentTransactionViewResult>;
};

export type AgentQueryAgentDetailArgs = {
  id: Scalars['ID'];
};

export type AgentQueryAssignedMemberListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type AgentQueryListAgentArgs = {
  currentBranchOnly?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type AgentQueryListAgentCollectionArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type AgentQueryListAgentTaskArgs = {
  id: Scalars['ID'];
};

export type AgentQueryListAgentTemplateArgs = {
  agentId: Scalars['ID'];
};

export type AgentQueryViewAgentListArgs = {
  agentId: Scalars['ID'];
  date: Scalars['String'];
};

export type AgentRecord = {
  data?: Maybe<AgentDetails>;
  error?: Maybe<QueryError>;
};

export type AgentTemplate = {
  account?: Maybe<DepositAccount>;
  amount?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
};

export type AgentTemplateData = {
  error?: Maybe<QueryError>;
  record?: Maybe<Array<Maybe<AgentTemplate>>>;
};

export type AgentTemplateInput = {
  accountId: Scalars['String'];
  amount?: InputMaybe<Scalars['String']>;
  memberId: Scalars['String'];
};

export type AgentTemplateResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<Array<Maybe<AgentTemplate>>>;
};

export type AgentTodayList = {
  account?: Maybe<DepositLoanAccount>;
  amount?: Maybe<Scalars['Amount']>;
  amountToBeCollected?: Maybe<Scalars['String']>;
  fine?: Maybe<Scalars['String']>;
  fineToBeCollected?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  paid?: Maybe<Scalars['Boolean']>;
  status?: Maybe<TodayListStatus>;
};

export type AgentTodayListData = {
  error?: Maybe<QueryError>;
  record?: Maybe<Array<Maybe<AgentTodayList>>>;
};

export type AgentTodayListInput = {
  account?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['Amount']>;
  fine?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  member?: InputMaybe<Scalars['String']>;
  paid?: InputMaybe<Scalars['Boolean']>;
};

export type AgentTodayListResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<Array<Maybe<AgentTodayList>>>;
};

export type AgentTransactionView = {
  assignedMember?: Maybe<Array<Maybe<AssignedMemberView>>>;
  status: Scalars['String'];
  totalAmount?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  transactionId: Scalars['ID'];
};

export type AgentTransactionViewResult = {
  data?: Maybe<AgentTransactionView>;
  error?: Maybe<QueryError>;
};

export type AllAccount = {
  ID: Scalars['ID'];
  accountName?: Maybe<Scalars['String']>;
  accountOpenDate?: Maybe<Scalars['Localized']>;
  accountType?: Maybe<AccountTypes>;
  ledgerBalance?: Maybe<Scalars['String']>;
  ledgerBalanceType?: Maybe<BalanceType>;
  ledgerId?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  productName?: Maybe<Scalars['String']>;
  serviceCenter?: Maybe<Scalars['String']>;
};

export type AllAccountConnection = {
  edges?: Maybe<Array<AllAccountEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AllAccountEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AllAccount>;
};

export type AllAccountsFilterMapping = {
  accountType: Array<LabelValueArray>;
  productName: Array<LabelValueArray>;
};

export type AllAccountsQuery = {
  filterMapping?: Maybe<AllAccountsFilterMapping>;
  list?: Maybe<AllAccountConnection>;
};

export type AllAccountsQueryListArgs = {
  filter?: InputMaybe<Filter>;
  isHoldings?: InputMaybe<Scalars['Boolean']>;
  paginate?: InputMaybe<Pagination>;
};

export const AllLoanType = {
  Emi: 'EMI',
  Epi: 'EPI',
  Flat: 'FLAT',
  Loc: 'LOC',
} as const;

export type AllLoanType = typeof AllLoanType[keyof typeof AllLoanType];
export type AllTransactionResult = {
  amount?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  note?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  transactionMode?: Maybe<Scalars['String']>;
  transactionTime?: Maybe<Scalars['String']>;
  txnType?: Maybe<AllTransactionType>;
  user?: Maybe<Scalars['String']>;
};

export const AllTransactionType = {
  AccountingExternalLoan: 'ACCOUNTING_EXTERNAL_LOAN',
  AccountingInvestment: 'ACCOUNTING_INVESTMENT',
  AccountClose: 'ACCOUNT_CLOSE',
  AlternateChannel: 'ALTERNATE_CHANNEL',
  BranchTransfer: 'BRANCH_TRANSFER',
  BulkTransfer: 'BULK_TRANSFER',
  CashInTransit: 'CASH_IN_TRANSIT',
  CreditNote: 'CREDIT_NOTE',
  DebitNote: 'DEBIT_NOTE',
  Deposit: 'DEPOSIT',
  Ebanking: 'EBANKING',
  Expenses: 'EXPENSES',
  InterestBooking: 'INTEREST_BOOKING',
  InterestPosting: 'INTEREST_POSTING',
  InterBranchTransfer: 'INTER_BRANCH_TRANSFER',
  InventoryPurchase: 'INVENTORY_PURCHASE',
  InventorySell: 'INVENTORY_SELL',
  JournalVoucher: 'JOURNAL_VOUCHER',
  LedgerBalanceTransfer: 'LEDGER_BALANCE_TRANSFER',
  LoanDisbursment: 'LOAN_DISBURSMENT',
  LoanLossProvision: 'LOAN_LOSS_PROVISION',
  LoanRepayment: 'LOAN_REPAYMENT',
  LocLimit: 'LOC_LIMIT',
  Membership: 'MEMBERSHIP',
  MemberTransfer: 'MEMBER_TRANSFER',
  Migration: 'MIGRATION',
  OpeningBalance: 'OPENING_BALANCE',
  SharePurchase: 'SHARE_PURCHASE',
  ShareReturn: 'SHARE_RETURN',
  TellerBankTransfer: 'TELLER_BANK_TRANSFER',
  TellerTransfer: 'TELLER_TRANSFER',
  TransactionRevert: 'TRANSACTION_REVERT',
  Transfer: 'TRANSFER',
  Withdraw: 'WITHDRAW',
  YearEnd: 'YEAR_END',
} as const;

export type AllTransactionType = typeof AllTransactionType[keyof typeof AllTransactionType];
export type AllTransactionViewResult = {
  data?: Maybe<AllTransactionResult>;
  error?: Maybe<QueryError>;
};

export type AllTransactionsConnection = {
  edges?: Maybe<Array<Maybe<AllTransactionsEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AllTransactionsEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<TransactionInfo>;
};

export type AlternativeChannelActivation = {
  coopConnection?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  lastActive?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  phoneNumber?: Maybe<Scalars['String']>;
  serviceStatus?: Maybe<AlternativeChannelStatus>;
  serviceType?: Maybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelCharges = {
  amount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  serviceType?: Maybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelChargesInput = {
  amount?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  ledgerId?: InputMaybe<Scalars['String']>;
  serviceType?: InputMaybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelChargesRecord = {
  data?: Maybe<Array<Maybe<AlternativeChannelCharges>>>;
  error?: Maybe<QueryError>;
};

export type AlternativeChannelChargesResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Array<Maybe<AlternativeChannelCharges>>>;
};

export type AlternativeChannelConnection = {
  edges?: Maybe<Array<Maybe<AlternativeChannelEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export const AlternativeChannelDepositedBy = {
  Others: 'OTHERS',
  Self: 'SELF',
} as const;

export type AlternativeChannelDepositedBy =
  typeof AlternativeChannelDepositedBy[keyof typeof AlternativeChannelDepositedBy];
export type AlternativeChannelEdge = {
  cursor: Scalars['String'];
  data?: Maybe<AlternativeChannelActivation>;
};

export type AlternativeChannelFilter = {
  serviceType?: InputMaybe<AlternativeChannelServiceType>;
  status?: InputMaybe<AlternativeChannelStatus>;
};

export type AlternativeChannelMemberActivations = {
  eBanking?: Maybe<Scalars['Boolean']>;
  mobileBanking?: Maybe<Scalars['Boolean']>;
  smsBanking?: Maybe<Scalars['Boolean']>;
};

export type AlternativeChannelMutation = {
  serviceActivation?: Maybe<AlternativeChannelServiceActivationResult>;
};

export type AlternativeChannelMutationServiceActivationArgs = {
  data?: InputMaybe<AlternativeChannelServiceActivationInput>;
};

export const AlternativeChannelPaymentMode = {
  Account: 'ACCOUNT',
  BankVoucher: 'BANK_VOUCHER',
  Cash: 'CASH',
} as const;

export type AlternativeChannelPaymentMode =
  typeof AlternativeChannelPaymentMode[keyof typeof AlternativeChannelPaymentMode];
export type AlternativeChannelQuery = {
  list?: Maybe<AlternativeChannelConnection>;
  memberActivations?: Maybe<AlternativeChannelMemberActivations>;
};

export type AlternativeChannelQueryListArgs = {
  filter?: InputMaybe<AlternativeChannelFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type AlternativeChannelQueryMemberActivationsArgs = {
  memberId: Scalars['String'];
};

export type AlternativeChannelServiceActivationInput = {
  accountTransfer?: InputMaybe<AccountTransferPaymentForAlternativeChannel>;
  bankCheque?: InputMaybe<BankChequePaymentForAlternativeChannel>;
  cash?: InputMaybe<DepositCash>;
  email?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  paymentMode: AlternativeChannelPaymentMode;
  phoneNumber?: InputMaybe<Scalars['String']>;
  pin?: InputMaybe<Scalars['Int']>;
  service?: InputMaybe<Array<InputMaybe<AlternativeChannelServiceType>>>;
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type AlternativeChannelServiceActivationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<AlternativeChannelQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export const AlternativeChannelServiceType = {
  Ebanking: 'EBANKING',
  MobileBanking: 'MOBILE_BANKING',
  SmsBanking: 'SMS_BANKING',
} as const;

export type AlternativeChannelServiceType =
  typeof AlternativeChannelServiceType[keyof typeof AlternativeChannelServiceType];
export type AlternativeChannelSettingsMutation = {
  feesAndCharges?: Maybe<AlternativeChannelChargesResult>;
};

export type AlternativeChannelSettingsMutationFeesAndChargesArgs = {
  data?: InputMaybe<Array<InputMaybe<AlternativeChannelChargesInput>>>;
};

export type AlternativeChannelSettingsQuery = {
  feesAndCharges?: Maybe<AlternativeChannelChargesRecord>;
};

export const AlternativeChannelStatus = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const;

export type AlternativeChannelStatus =
  typeof AlternativeChannelStatus[keyof typeof AlternativeChannelStatus];
export type AmountLimit = {
  avgAmount?: InputMaybe<Scalars['Amount']>;
  maxAmount?: InputMaybe<Scalars['Amount']>;
  minAmount?: InputMaybe<Scalars['Amount']>;
};

export type AmountLimitFormState = {
  avgAmount?: Maybe<Scalars['Amount']>;
  maxAmount?: Maybe<Scalars['Amount']>;
  minAmount?: Maybe<Scalars['Amount']>;
};

export type AppointmentLetterConnection = {
  edges?: Maybe<Array<Maybe<AppointmentLetters>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AppointmentLetterInput = {
  appointmentDate: Scalars['Localized'];
  appointmentTerms: Array<AppointmentTermInput>;
  body: Scalars['String'];
  jobApplication?: InputMaybe<Scalars['ID']>;
};

export type AppointmentLetterListed = {
  applicantId: Scalars['ID'];
  designation: Scalars['String'];
  email: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  offerDate: Scalars['Localized'];
  probationPeriod: Scalars['String'];
};

export type AppointmentLetterRecord = {
  appointmentDate: Scalars['Localized'];
  appointmentLetterID: Scalars['ID'];
  appointmentTerms: Array<AppointmentTerm>;
  body: Scalars['String'];
  jobApplication: Scalars['ID'];
};

export type AppointmentLetters = {
  cursor: Scalars['Cursor'];
  node: AppointmentLetterListed;
};

export type AppointmentTerm = {
  description: Scalars['String'];
  sn: Scalars['ID'];
  title: Scalars['String'];
};

export type AppointmentTermInput = {
  description: Scalars['String'];
  title: Scalars['String'];
};

export type ApproveIbtResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<JournalVoucherRecord>;
  recordId?: Maybe<Scalars['String']>;
};

export type ApproveOrDeclineMutation = {
  membershipRequest?: Maybe<RequestApproveOrDeclineResult>;
};

export type ApproveOrDeclineMutationMembershipRequestArgs = {
  data?: InputMaybe<RequestApproveOrDeclineInput>;
};

export const Arrange = {
  Asc: 'ASC',
  Desc: 'DESC',
} as const;

export type Arrange = typeof Arrange[keyof typeof Arrange];
export type AssignMembersInput = {
  accountId: Scalars['String'];
  memberId: Scalars['String'];
};

export type AssignedMemberList = {
  account?: Maybe<DepositLoanAccount>;
  assignedDate?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  product?: Maybe<DepositProduct>;
};

export type AssignedMemberListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AssignedMemberList>;
};

export type AssignedMemberListFiler = {
  agentId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type AssignedMemberView = {
  account?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  member?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type AssignedMembersListConnection = {
  edges?: Maybe<Array<Maybe<AssignedMemberListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AssociatedGuaranteeAccountListResult = {
  data?: Maybe<Array<Maybe<AssociatedGuaranteeDetails>>>;
  error?: Maybe<QueryError>;
  total?: Maybe<Scalars['String']>;
};

export type AssociatedGuaranteeDetails = {
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  loanAccountId?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
};

export type AuditLog = {
  action?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  metaData?: Maybe<Scalars['String']>;
  objectId?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export const AuditLogActions = {
  All: 'ALL',
  Create: 'CREATE',
  Delete: 'DELETE',
  Read: 'READ',
  Update: 'UPDATE',
} as const;

export type AuditLogActions = typeof AuditLogActions[keyof typeof AuditLogActions];
export type AuditLogFilters = {
  action?: InputMaybe<Array<InputMaybe<AuditLogActions>>>;
  time?: InputMaybe<LocalizedDateFilter>;
  users?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type AuditLogHumanizeResult = {
  data?: Maybe<Array<Maybe<HumanizeAuditLog>>>;
  error?: Maybe<QueryError>;
};

export type AuditLogQuery = {
  humanize?: Maybe<AuditLogResult>;
  raw?: Maybe<AuditLogResult>;
};

export type AuditLogQueryHumanizeArgs = {
  filter?: InputMaybe<AuditLogFilters>;
};

export type AuditLogResult = AuditLogHumanizeResult | RawAuditLog;

export type AuditTransactionReport = {
  temp?: Maybe<Scalars['String']>;
};

export type AuthMutation = {
  changeState?: Maybe<Scalars['String']>;
  login?: Maybe<LoginResult>;
  switchRole?: Maybe<SwitchRoleResult>;
  token?: Maybe<AuthTokenResult>;
};

export type AuthMutationChangeStateArgs = {
  state: ObjState;
  userID: Scalars['ID'];
};

export type AuthMutationLoginArgs = {
  data: LoginInput;
};

export type AuthMutationSwitchRoleArgs = {
  branchId?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Scalars['String']>;
};

export type AuthMutationTokenArgs = {
  refreshToken: Scalars['String'];
};

export type AuthQuery = {
  me: MeResult;
};

export type AuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type AuthTokenResult = {
  error?: Maybe<MutationError>;
  token?: Maybe<AuthToken>;
};

export type AuthorizationError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type BadRequestError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export const BalanceType = {
  Cr: 'CR',
  Dr: 'DR',
} as const;

export type BalanceType = typeof BalanceType[keyof typeof BalanceType];
export type BalanceValue = {
  amount?: Maybe<Scalars['String']>;
  amountType?: Maybe<BalanceType>;
};

export type Bank = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  logo?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
};

export type BankAccount = {
  accountNo?: Maybe<Scalars['String']>;
  accountType?: Maybe<AccountingBankAccountType>;
  balance?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  bankId?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type BankAccountConnection = {
  edges?: Maybe<Array<Maybe<BankAccountEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type BankAccountDetails = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountType?: Maybe<AccountingBankAccountType>;
  bankId?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type BankAccountDetailsResult = {
  data?: Maybe<BankAccountDetails>;
  error?: Maybe<QueryError>;
};

export type BankAccountEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<BankAccount>;
};

export type BankAccountFilter = {
  accountName?: InputMaybe<Scalars['String']>;
  bankDisplayName?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  bankName?: InputMaybe<Scalars['String']>;
  branchId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
};

export type BankAccountMutation = {
  new?: Maybe<NewBankAccountResult>;
  update?: Maybe<BankAccountUpdateResult>;
};

export type BankAccountMutationNewArgs = {
  data?: InputMaybe<NewBankAccountInput>;
};

export type BankAccountMutationUpdateArgs = {
  data?: InputMaybe<UpdateBankAccountInput>;
};

export type BankAccountQuery = {
  details?: Maybe<BankAccountDetailsResult>;
  list?: Maybe<BankAccountConnection>;
};

export type BankAccountQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type BankAccountQueryListArgs = {
  currentBranchOnly?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type BankAccountUpdateResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type BankAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankDataQuery>;
  record?: Maybe<Array<Maybe<Bank>>>;
};

export type BankBranch = Base & {
  address?: Maybe<Address>;
  bankId?: Maybe<Scalars['ID']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
};

export type BankBranchAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankBranchQuery>;
  record: BankBranch;
  recordId: Scalars['ID'];
};

export type BankBranchDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankBranchQuery>;
  recordId: Scalars['ID'];
};

export type BankBranchGetResult = {
  data?: Maybe<BankBranch>;
  error?: Maybe<QueryError>;
};

export type BankBranchInput = {
  bankId?: InputMaybe<Scalars['ID']>;
  districtId?: InputMaybe<Scalars['Int']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  name?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BankBranchMutation = {
  add: BankBranchAddResult;
  delete: BankBranchDeleteResult;
};

export type BankBranchMutationAddArgs = {
  data?: InputMaybe<BankBranchInput>;
  id: Scalars['ID'];
};

export type BankBranchMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type BankBranchQuery = {
  get?: Maybe<BankBranchGetResult>;
  /** This is to get all the branches of one Bank */
  getBranches?: Maybe<Array<Maybe<BankBranch>>>;
  list?: Maybe<Array<Maybe<BankBranch>>>;
};

export type BankBranchQueryGetArgs = {
  id: Scalars['ID'];
};

export type BankBranchQueryGetBranchesArgs = {
  bankId: Scalars['ID'];
};

export type BankBranchQueryListArgs = {
  filter?: InputMaybe<BankBranchSearchFilter>;
};

export type BankBranchSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type BankChartsOfAccount = {
  bankAccountNumber: Scalars['String'];
  bankGLCode: Scalars['String'];
  bankId: Scalars['ID'];
};

export type BankChequePaymentForAccountClose = {
  amount: Scalars['String'];
  bank: Scalars['ID'];
  cheque_no: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type BankChequePaymentForAlternativeChannel = {
  bank: Scalars['ID'];
  depositedBy?: InputMaybe<AlternativeChannelDepositedBy>;
  deposited_date?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  voucher_id?: InputMaybe<Scalars['String']>;
};

export type BankDataMutation = {
  add?: Maybe<BankAddResult>;
  delete: BankDeleteResult;
};

export type BankDataMutationAddArgs = {
  data?: InputMaybe<Array<InputMaybe<BankInput>>>;
};

export type BankDataMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type BankDataQuery = {
  get?: Maybe<BankGetResult>;
  list?: Maybe<Array<Maybe<Bank>>>;
};

export type BankDataQueryGetArgs = {
  id: Scalars['ID'];
};

export type BankDataQueryListArgs = {
  filter?: InputMaybe<BankSearchFilter>;
};

export type BankDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankDataQuery>;
  recordId: Scalars['ID'];
};

export type BankDepositData = {
  amount: Scalars['String'];
  bankId: Scalars['String'];
  depositedBy: PaymentDepositedBy;
  depositedDate: Scalars['Localized'];
  voucherId?: InputMaybe<Scalars['String']>;
};

export type BankGlBalanceEntry = {
  accountNo?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  bankAccountName?: Maybe<Scalars['String']>;
  bankDisplayName?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  closingBalance?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
};

export type BankGlBalanceFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<GlBalanceFilter>;
  period: LocalizedDateFilter;
};

export type BankGlBalanceResult = {
  data?: Maybe<Array<Maybe<BankGlBalanceEntry>>>;
  error?: Maybe<QueryError>;
  total?: Maybe<Scalars['String']>;
};

export type BankGlDataEntry = {
  balance?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  chequeNo?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  depositAmount?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  particular?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  withdrawAmount?: Maybe<Scalars['String']>;
};

export type BankGlStatementFilter = {
  bankAccounts?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<GlStatementFilter>;
  period: LocalizedDateFilter;
};

export type BankGlStatementResult = {
  data?: Maybe<Array<Maybe<BankGlDataEntry>>>;
  error?: Maybe<QueryError>;
};

export type BankGetResult = {
  data?: Maybe<Bank>;
  error?: Maybe<QueryError>;
};

export type BankInput = {
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type BankMutation = {
  bank?: Maybe<BankDataMutation>;
  branch?: Maybe<BankBranchMutation>;
};

export type BankQuery = {
  bank?: Maybe<BankDataQuery>;
  branch?: Maybe<BankBranchQuery>;
};

export type BankSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type BlockChequeRequestConnection = {
  edges?: Maybe<Array<Maybe<BlockChequeRequestEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type BlockChequeRequestEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<BlockChequeRequestList>;
};

export type BlockChequeRequestList = {
  accountNumber: Scalars['String'];
  accountType: Scalars['String'];
  approvalStatus: RequestStatus;
  chequeNumber: Scalars['String'];
  id: Scalars['String'];
  memberAge?: Maybe<Scalars['Int']>;
  memberCode?: Maybe<Scalars['String']>;
  memberGender?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNumber: Scalars['String'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  requestedDate: Scalars['String'];
};

export type Branch = {
  abbsTransaction?: Maybe<AbbsTransaction>;
  address?: Maybe<Address>;
  branchBalance?: Maybe<BalanceValue>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  contactNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  eodReady?: Maybe<Scalars['Boolean']>;
  estDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  serviceCenterPhone?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
};

export type BranchAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<GeneralBranchSettingsQuery>;
  record?: Maybe<Branch>;
  recordId: Scalars['ID'];
};

export const BranchCategory = {
  BranchOffice: 'BRANCH_OFFICE',
  ContactOffice: 'CONTACT_OFFICE',
  ExtensionCounter: 'EXTENSION_COUNTER',
  HeadOffice: 'HEAD_OFFICE',
  RegionalOffice: 'REGIONAL_OFFICE',
  ServiceCenter: 'SERVICE_CENTER',
} as const;

export type BranchCategory = typeof BranchCategory[keyof typeof BranchCategory];
export type BranchConnection = {
  edges?: Maybe<Array<BranchEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type BranchEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Branch>;
};

export type BranchFormData = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  districtId?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<LocationCoordinate>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  payableAccountId?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  receivableAccountId?: Maybe<Scalars['String']>;
  serviceCenterPhone?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type BranchGetResult = {
  data?: Maybe<BranchFormData>;
  error?: Maybe<QueryError>;
};

export type BranchInfo = {
  membersToApprove?: Maybe<Scalars['Int']>;
  percentOfAccounts?: Maybe<Scalars['String']>;
  percentofMemberRequest?: Maybe<Scalars['String']>;
  totalAccounts?: Maybe<Scalars['Int']>;
  totalMembers?: Maybe<Scalars['Int']>;
};

export type BranchInput = {
  abbsStatus?: InputMaybe<Scalars['Boolean']>;
  branchCode?: InputMaybe<Scalars['String']>;
  branchStatus?: InputMaybe<Scalars['Boolean']>;
  category?: InputMaybe<BranchCategory>;
  districtId?: InputMaybe<Scalars['Int']>;
  email?: InputMaybe<Scalars['String']>;
  estDate?: InputMaybe<Scalars['Localized']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  managerName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  payableAccountId?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  plTransferId?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  receivableAccountId?: InputMaybe<Scalars['String']>;
  serviceCenterPhone?: InputMaybe<Scalars['String']>;
  tdsTransaferId?: InputMaybe<Scalars['String']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BranchMinimal = {
  branchCode?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  name: Scalars['String'];
};

export const BranchPaymentMode = {
  BankCheque: 'BANK_CHEQUE',
  Cash: 'CASH',
} as const;

export type BranchPaymentMode = typeof BranchPaymentMode[keyof typeof BranchPaymentMode];
export type BranchReadinessReport = {
  data?: Maybe<Array<Maybe<BranchReadinessReportData>>>;
  error?: Maybe<QueryError>;
};

export type BranchReadinessReportData = {
  branchCode?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Boolean']>;
};

export type BranchReport = {
  abbsStatusReport: AbbsSatusResult;
  branchReadinessReport: BranchReadinessReport;
  branchReport?: Maybe<BranchReportResult>;
  serviceCenterCOAWiseBalanceReport: SericeCenterWiseStatementResult;
};

export type BranchReportAbbsStatusReportArgs = {
  data: AbbsReportFilter;
};

export type BranchReportBranchReportArgs = {
  data?: InputMaybe<BranchReportFilter>;
};

export type BranchReportServiceCenterCoaWiseBalanceReportArgs = {
  data: ServiceCenterCoaWiseBalanceFilter;
};

export type BranchReportFilter = {
  filter?: InputMaybe<BranchReportFilterType>;
  period: LocalizedDateFilter;
};

export type BranchReportFilterType = {
  districtId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  isExtensionCounter?: InputMaybe<Scalars['Boolean']>;
  localGovernmentId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  provinceId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BranchReportResult = {
  Summary?: Maybe<Scalars['Map']>;
  data?: Maybe<Array<Maybe<ServiceCenter>>>;
  error?: Maybe<QueryError>;
  meta?: Maybe<Scalars['Map']>;
};

export type BranchSearchFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export const BuildingType = {
  Commercial: 'COMMERCIAL',
  Industrial: 'INDUSTRIAL',
  Institutional: 'INSTITUTIONAL',
  Residential: 'RESIDENTIAL',
} as const;

export type BuildingType = typeof BuildingType[keyof typeof BuildingType];
export type BulkDepositInput = {
  accounts?: InputMaybe<Array<InputMaybe<BulkDepositInstanceInput>>>;
  agentId?: InputMaybe<Scalars['String']>;
  bankVoucher?: InputMaybe<DepositBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  depositedBy: DepositedBy;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  other_doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  other_name?: InputMaybe<Scalars['String']>;
  payment_type: DepositPaymentType;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  withdrawSlip?: InputMaybe<WithdrawSlip>;
};

export type BulkDepositInstanceInput = {
  accountId: Scalars['String'];
  amount: Scalars['String'];
  fine?: InputMaybe<Scalars['String']>;
  noOfInstallments?: InputMaybe<Scalars['Int']>;
  rebate?: InputMaybe<Scalars['String']>;
};

export type BulkDepositResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type BulkInstallmentResult = {
  accountId?: Maybe<Scalars['String']>;
  value?: Maybe<InstallmentResult>;
};

export type BulkTransferConnection = {
  edges?: Maybe<Array<Maybe<BulkTransferEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type BulkTransferEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<BulkTransferInfo>;
};

export type BulkTransferInfo = {
  destinationId?: Maybe<Scalars['String']>;
  destinationName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  sourceName?: Maybe<Scalars['String']>;
  totalTransferAmount?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  transferAmount?: Maybe<Scalars['String']>;
  transferDate?: Maybe<Scalars['Localized']>;
  transferType?: Maybe<BulkTransferType>;
};

export type BulkTransferInput = {
  accounts?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  amount?: InputMaybe<Scalars['String']>;
  bulkTransferType?: InputMaybe<BulkTransferType>;
  ledger?: InputMaybe<Scalars['String']>;
  savingProduct?: InputMaybe<Scalars['String']>;
  selectAll?: InputMaybe<Scalars['Boolean']>;
};

export type BulkTransferResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export const BulkTransferType = {
  ManyToOne: 'MANY_TO_ONE',
  OneToMany: 'ONE_TO_MANY',
} as const;

export type BulkTransferType = typeof BulkTransferType[keyof typeof BulkTransferType];
export type CbsCodeManagement = {
  codeType?: Maybe<CbsCodeType>;
  id?: Maybe<Scalars['ID']>;
  initialNo?: Maybe<Scalars['Int']>;
  noOfDigit?: Maybe<Scalars['Int']>;
  prefix?: Maybe<Scalars['String']>;
};

export type CbsCodeManagementData = {
  data?: Maybe<CbsCodeManagement>;
  error?: Maybe<QueryError>;
};

export type CbsCodeManagementList = {
  data?: Maybe<CbsCodeManagementListData>;
  error?: Maybe<QueryError>;
};

export type CbsCodeManagementListData = {
  share?: Maybe<Array<Maybe<CbsCodeManagement>>>;
  transfers?: Maybe<Array<Maybe<CbsCodeManagement>>>;
  withdrawSlip?: Maybe<Array<Maybe<CbsCodeManagement>>>;
};

export type CbsCodeManagementMutation = {
  add?: Maybe<CbsCodeMangementResult>;
};

export type CbsCodeManagementMutationAddArgs = {
  data?: InputMaybe<CodeManagementInput>;
};

export type CbsCodeManagementQuery = {
  allCbsCodes?: Maybe<CbsCodeManagementList>;
  get?: Maybe<CbsCodeManagementData>;
};

export type CbsCodeManagementQueryGetArgs = {
  codeType?: InputMaybe<CbsCodeType>;
};

export type CbsCodeMangementResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<CbsCodeManagementQuery>;
  record?: Maybe<CbsCodeManagement>;
  recordId?: Maybe<Scalars['ID']>;
};

export const CbsCodeType = {
  BranchTransfer: 'BRANCH_TRANSFER',
  CashInTransit: 'CASH_IN_TRANSIT',
  ShareCertificate: 'SHARE_CERTIFICATE',
  TellerTransfer: 'TELLER_TRANSFER',
  VaultTransfer: 'VAULT_TRANSFER',
  WithdrawSlipBlockRequest: 'WITHDRAW_SLIP_BLOCK_REQUEST',
  WithdrawSlipRequest: 'WITHDRAW_SLIP_REQUEST',
} as const;

export type CbsCodeType = typeof CbsCodeType[keyof typeof CbsCodeType];
export type CoaAccount = {
  accountClass?: Maybe<Scalars['String']>;
  accountCode?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['Localized']>;
  accountType?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  branch?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  parentGroup?: Maybe<Scalars['Localized']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export const CoaAccountClass = {
  Assets: 'ASSETS',
  EquityAndLiabilities: 'EQUITY_AND_LIABILITIES',
  Expenditure: 'EXPENDITURE',
  Income: 'INCOME',
  OffBalanceSheet: 'OFF_BALANCE_SHEET',
} as const;

export type CoaAccountClass = typeof CoaAccountClass[keyof typeof CoaAccountClass];
export type CoaAccountListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<CoaAccount>;
};

export type CoaAccountListResult = {
  edges?: Maybe<Array<Maybe<CoaAccountListEdges>>>;
  error?: Maybe<QueryError>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export const CoaAccountSetup = {
  AllBranch: 'ALL_BRANCH',
  SelectedBranch: 'SELECTED_BRANCH',
  ThisBranch: 'THIS_BRANCH',
} as const;

export type CoaAccountSetup = typeof CoaAccountSetup[keyof typeof CoaAccountSetup];
export type CoaAddAccountResult = {
  error?: Maybe<MutationError>;
  success: Scalars['Boolean'];
};

export const CoaCategory = {
  SystemDefined: 'SYSTEM_DEFINED',
  UserDefined: 'USER_DEFINED',
} as const;

export type CoaCategory = typeof CoaCategory[keyof typeof CoaCategory];
export type CoaDetailsData = {
  meta?: Maybe<CoaDetailsMeta>;
  overview?: Maybe<CoaDetailsMinOverview>;
  recentTxns?: Maybe<Array<Maybe<CoaDetailsRecentTxns>>>;
  totalNoOfTxns?: Maybe<Scalars['Int']>;
};

export type CoaDetailsMeta = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountType?: Maybe<Scalars['String']>;
  createdDate?: Maybe<Scalars['Localized']>;
  isLoanAccount?: Maybe<Scalars['Boolean']>;
  isSavingAccount?: Maybe<Scalars['Boolean']>;
  parentId?: Maybe<Scalars['String']>;
};

export type CoaDetailsMinOverview = {
  balanceType?: Maybe<BalanceType>;
  closingBalance?: Maybe<Scalars['String']>;
  cr?: Maybe<Scalars['String']>;
  dr?: Maybe<Scalars['String']>;
  openingBalance?: Maybe<Scalars['String']>;
};

export type CoaDetailsRecentTxns = {
  balanceType?: Maybe<BalanceType>;
  credit?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  debit?: Maybe<Scalars['String']>;
  particulars?: Maybe<Scalars['String']>;
  total?: Maybe<Scalars['String']>;
  txnId?: Maybe<Scalars['String']>;
  txnType?: Maybe<Scalars['String']>;
};

export type CoaDetailsResult = {
  data?: Maybe<CoaDetailsData>;
  error?: Maybe<QueryError>;
};

export type CoaFullView = {
  data?: Maybe<Array<Maybe<CoaView>>>;
  error?: Maybe<QueryError>;
};

export const CoaHead = {
  TotalBankBalance_90: 'Total_Bank_Balance_90',
  TotalCapitalGrantBalance_50: 'Total_Capital_Grant_Balance_50',
  TotalCashAndCashEquivalentBalance_80: 'Total_Cash_and_Cash_Equivalent_Balance_80',
  TotalCurrentLiabilitiesAndPayableBalance_60: 'Total_Current_Liabilities_and_Payable_Balance_60',
  TotalExpensesBalance_150: 'Total_Expenses_Balance_150',
  TotalInvestmentBalance_100: 'Total_Investment_Balance_100',
  TotalLoanBalance_110: 'Total_Loan_Balance_110',
  TotalLoanSavingAccountBalance_40: 'Total_Loan_Saving_Account_Balance_40',
  TotalNonCurrentAssetsBalance_130: 'Total_Non_Current_Assets_Balance_130',
  TotalNonCurrentLiabilitiesBalance_70: 'Total_Non_Current_Liabilities_Balance_70',
  TotalOffBalanceSheetBalance_170: 'Total_Off_Balance_Sheet_Balance_170',
  TotalOtherCurrentAssetsBalance_120: 'Total_Other_Current_Assets_Balance_120',
  TotalOtherNonCurrentAssetsBalance_140: 'Total_Other_Non_Current_Assets_Balance_140',
  TotalReserveAndSurplusBalance_20: 'Total_Reserve_and_Surplus_Balance_20',
  TotalRevinueBalance_160: 'Total_Revinue_Balance_160',
  TotalSavingDepositBalance_30: 'Total_SavingDeposit_Balance_30',
  TotalShareCapitalBalance_10: 'Total_Share_Capital_Balance_10',
} as const;

export type CoaHead = typeof CoaHead[keyof typeof CoaHead];
export type CoaLeafNodeDetailView = {
  data?: Maybe<CoaLeafNodeDetails>;
  error?: Maybe<QueryError>;
};

export type CoaLeafNodeDetails = {
  accountName?: Maybe<Scalars['Localized']>;
  accountType?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  closingBalance?: Maybe<Scalars['String']>;
  crAmount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  drAmount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  ledgers?: Maybe<Array<Maybe<LedgerList>>>;
  noOfAccounts?: Maybe<Scalars['String']>;
};

export type CoaLedgerListFilterMap = {
  serviceCenter: Array<LabelValueArray>;
};

export type CoaLedgerListResult = {
  edges?: Maybe<Array<Maybe<LedgerListEdges>>>;
  error?: Maybe<QueryError>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type CoaListFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  ledgerId?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  tag?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export const CoaListFlag = {
  JournalVoucher: 'JOURNAL_VOUCHER',
} as const;

export type CoaListFlag = typeof CoaListFlag[keyof typeof CoaListFlag];
export type CoaMinimal = {
  accountCode: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['Localized'];
};

export type CoaMinimalResult = {
  data?: Maybe<Array<Maybe<CoaMinimal>>>;
  error?: Maybe<QueryError>;
};

export const CoaTypeOfTransaction = {
  Both: 'BOTH',
  Credit: 'CREDIT',
  Debit: 'DEBIT',
} as const;

export type CoaTypeOfTransaction = typeof CoaTypeOfTransaction[keyof typeof CoaTypeOfTransaction];
export const CoaTypesOfAccount = {
  Bank: 'BANK',
  Cash: 'CASH',
  Journal: 'JOURNAL',
} as const;

export type CoaTypesOfAccount = typeof CoaTypesOfAccount[keyof typeof CoaTypesOfAccount];
export type CoaView = {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  accountTypeDetails?: Maybe<AccountTypeDetailsUnion>;
  allowDirectPostingFromJV?: Maybe<Scalars['Boolean']>;
  allowFreeEntry: Scalars['Boolean'];
  allowMultipleLedger?: Maybe<Scalars['Boolean']>;
  allowTransaction: Scalars['Boolean'];
  allowedBalance?: Maybe<CoaTypeOfTransaction>;
  category?: Maybe<CoaCategory>;
  createdAt: Scalars['Time'];
  creatorId: Scalars['ID'];
  currency: Scalars['String'];
  id: Scalars['ID'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifierId: Scalars['ID'];
  name: Scalars['Localized'];
  objState: ObjState;
  openingBalance: Scalars['Float'];
  transactionAllowed?: Maybe<CoaTypeOfTransaction>;
  under?: Maybe<Scalars['ID']>;
};

export type CashDepositData = {
  cash: Scalars['String'];
  denominations?: InputMaybe<Array<InputMaybe<Denomination>>>;
  disableDenomination: Scalars['Boolean'];
  returned_amount: Scalars['String'];
  total: Scalars['String'];
};

export type CashInHandData = {
  fromVault?: Maybe<Scalars['String']>;
  percent?: Maybe<Scalars['String']>;
  todayValue?: Maybe<Scalars['String']>;
};

export type CashInTransitActionResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type CashInTransitConnection = {
  edges?: Maybe<Array<Maybe<CashInTransitEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type CashInTransitEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<CashInTransitInfo>;
};

export type CashInTransitFilter = {
  id?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<RequestStatus>;
};

export type CashInTransitInfo = {
  approvalStatus: RequestStatus;
  cashAmount: Scalars['String'];
  denomination?: Maybe<Array<Maybe<DenominationValue>>>;
  id: Scalars['String'];
  receiverServiceCentreId: Scalars['String'];
  receiverServiceCentreName: Scalars['String'];
  senderServiceCentreId: Scalars['String'];
  senderServiceCentreName: Scalars['String'];
  senderTellerId: Scalars['String'];
  senderTellerName: Scalars['String'];
  transactionCode: Scalars['String'];
  transferDate: Scalars['Localized'];
};

export type CashInTransitInput = {
  amount?: InputMaybe<Scalars['String']>;
  collectorName?: InputMaybe<Scalars['String']>;
  denomination?: InputMaybe<Array<InputMaybe<Denomination>>>;
  note?: InputMaybe<Scalars['String']>;
  receiverServiceCentre?: InputMaybe<Scalars['String']>;
  senderServiceCentre?: InputMaybe<Scalars['String']>;
  senderTeller?: InputMaybe<Scalars['String']>;
  transferMode?: InputMaybe<CashTransferMode>;
};

export type CashInTransitMutation = {
  approve?: Maybe<CashInTransitActionResult>;
  new?: Maybe<CashInTransitResult>;
};

export type CashInTransitMutationApproveArgs = {
  requestId: Scalars['String'];
};

export type CashInTransitMutationNewArgs = {
  data?: InputMaybe<CashInTransitInput>;
};

export type CashInTransitResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export const CashInTransitTransferType = {
  Received: 'RECEIVED',
  Sent: 'SENT',
} as const;

export type CashInTransitTransferType =
  typeof CashInTransitTransferType[keyof typeof CashInTransitTransferType];
export type CashInTransitView = {
  ID: Scalars['ID'];
  amount?: Maybe<Scalars['String']>;
  collectorName?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  destBranch?: Maybe<Scalars['String']>;
  destTeller?: Maybe<Scalars['Localized']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  note?: Maybe<Scalars['String']>;
  srcBranch?: Maybe<Scalars['String']>;
  srcProfilePic?: Maybe<Scalars['String']>;
  srcProfilePicUrl?: Maybe<Scalars['String']>;
  srcTeller?: Maybe<Scalars['Localized']>;
  totalBalance?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  transferMode?: Maybe<CashTransferMode>;
  transitStatus?: Maybe<RequestStatus>;
};

export type CashInTransitViewResult = {
  data?: Maybe<CashInTransitView>;
  error?: Maybe<QueryError>;
};

export type CashLedgerReport = {
  balance?: Maybe<Scalars['String']>;
  cashCr?: Maybe<Scalars['String']>;
  cashDr?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  ledgerCode?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  voucherNo?: Maybe<Scalars['String']>;
};

export type CashLedgerReportFilter = {
  ledgerWise?: InputMaybe<CashLedgerWiseFilter>;
  transactionWise?: InputMaybe<CashLedgerTransactionWiseFilter>;
  userIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CashLedgerReportFilterData = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<CashLedgerReportFilter>;
  period: LocalizedDateFilter;
};

export type CashLedgerReportResult = {
  closingBalance?: Maybe<Scalars['String']>;
  details?: Maybe<Array<Maybe<CashLedgerReport>>>;
  openingBalance?: Maybe<Scalars['String']>;
  summary?: Maybe<Array<Maybe<CashLedgerReport>>>;
};

export const CashLedgerTransactionWiseFilter = {
  All: 'ALL',
  CashPayment: 'CASH_PAYMENT',
  CashReceived: 'CASH_RECEIVED',
} as const;

export type CashLedgerTransactionWiseFilter =
  typeof CashLedgerTransactionWiseFilter[keyof typeof CashLedgerTransactionWiseFilter];
export const CashLedgerWiseFilter = {
  All: 'ALL',
  Details: 'DETAILS',
  Summary: 'SUMMARY',
} as const;

export type CashLedgerWiseFilter = typeof CashLedgerWiseFilter[keyof typeof CashLedgerWiseFilter];
export type CashReport = {
  cashLedgerReport?: Maybe<CashLedgerReportResult>;
};

export type CashReportCashLedgerReportArgs = {
  data?: InputMaybe<CashLedgerReportFilterData>;
};

export type CashTransferBranchView = {
  branchId?: Maybe<Scalars['ID']>;
  branchName?: Maybe<Scalars['String']>;
  cr?: Maybe<Scalars['String']>;
  dr?: Maybe<Scalars['String']>;
};

export type CashTransferLedgerView = {
  balance?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  cr?: Maybe<Scalars['String']>;
  dr?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['ID']>;
  ledgerName?: Maybe<Scalars['String']>;
};

export const CashTransferMode = {
  Collected: 'COLLECTED',
  Deliver: 'DELIVER',
} as const;

export type CashTransferMode = typeof CashTransferMode[keyof typeof CashTransferMode];
export type CashTransferSelfEntry = {
  accountId: Scalars['String'];
  cr?: InputMaybe<Scalars['String']>;
  dr?: InputMaybe<Scalars['String']>;
};

export type CashTransferServiceCentreEntry = {
  branchId: Scalars['String'];
  cr?: InputMaybe<Scalars['String']>;
  dr?: InputMaybe<Scalars['String']>;
};

export const CashValue = {
  Cash_1: 'CASH_1',
  Cash_2: 'CASH_2',
  Cash_5: 'CASH_5',
  Cash_10: 'CASH_10',
  Cash_20: 'CASH_20',
  Cash_25: 'CASH_25',
  Cash_50: 'CASH_50',
  Cash_100: 'CASH_100',
  Cash_500: 'CASH_500',
  Cash_1000: 'CASH_1000',
  Paisa: 'PAISA',
} as const;

export type CashValue = typeof CashValue[keyof typeof CashValue];
export type CertificatePrint = {
  fbCertificateReport?: Maybe<CertificatePrintReportResult>;
  issueCertificateReport?: Maybe<CertificatePrintReportResult>;
};

export type CertificatePrintFbCertificateReportArgs = {
  data: CertificatePrintFilter;
};

export type CertificatePrintIssueCertificateReportArgs = {
  data: CertificatePrintFilter;
};

export type CertificatePrintFilter = {
  list?: InputMaybe<ListType>;
};

export type CertificatePrintReport = {
  Id?: Maybe<Scalars['ID']>;
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  issueServiceCenter?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  printCount?: Maybe<Scalars['Int']>;
  printedDate?: Maybe<Scalars['Localized']>;
  printedServiceCenter?: Maybe<Scalars['String']>;
};

export type CertificatePrintReportResult = {
  data?: Maybe<Array<Maybe<CertificatePrintReport>>>;
  error?: Maybe<QueryError>;
};

export type CharKhataReportFilter = {
  branchId: Array<InputMaybe<Scalars['String']>>;
  coaHead: Array<Scalars['String']>;
  filter?: InputMaybe<TrialSheetFilter>;
  period: LocalizedDateFilter;
};

export type ChartsOfAccount = Base & {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  accountTypeDetails?: Maybe<AccountTypeDetailsUnion>;
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  currency: Scalars['String'];
  id: Scalars['ID'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  /**  can be either account or a group */
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  openingBalance: Scalars['Float'];
  under?: Maybe<Scalars['ID']>;
};

export type ChartsOfAccountClass = {
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ChartsOfAccountClassResult = {
  data: Array<ChartsOfAccountClass>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountFilter = {
  active?: InputMaybe<Scalars['Boolean']>;
  classId?: InputMaybe<Scalars['ID']>;
  hasSubAccounts?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  isLedgerAccount?: InputMaybe<Scalars['Boolean']>;
  parentId?: InputMaybe<Scalars['ID']>;
};

export type ChartsOfAccountMutation = {
  add: AddChartsOfAccountResult;
  addAccount?: Maybe<CoaAddAccountResult>;
  delete: AddChartsOfAccountResult;
  newGroup: NewCoaGroupResult;
  updateLedgerName?: Maybe<UpdateLedgerResult>;
  updateMoneyLedger?: Maybe<MoneyLedgerResult>;
};

export type ChartsOfAccountMutationAddArgs = {
  data: AddCoaAccountInput;
};

export type ChartsOfAccountMutationAddAccountArgs = {
  accountSetup: CoaAccountSetup;
  ledgerName?: InputMaybe<Scalars['String']>;
  openForBranches?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  parentAccountCode: Scalars['String'];
  tagIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type ChartsOfAccountMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type ChartsOfAccountMutationNewGroupArgs = {
  data: NewCoaGroupInput;
};

export type ChartsOfAccountMutationUpdateLedgerNameArgs = {
  ledgerId: Scalars['ID'];
  newName?: InputMaybe<Scalars['String']>;
};

export type ChartsOfAccountMutationUpdateMoneyLedgerArgs = {
  id: Scalars['ID'];
  status: Scalars['Boolean'];
};

export type ChartsOfAccountResult = {
  data?: Maybe<Array<ChartsOfAccount>>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountSettingsMutation = {
  account?: Maybe<ChartsOfAccountMutation>;
  tag?: Maybe<SettingLedgerTagMutation>;
};

export type ChartsOfAccountSettingsQuery = {
  accounts: ChartsOfAccountResult;
  accountsUnder?: Maybe<CoaMinimalResult>;
  accountsUnderLeaf?: Maybe<Array<Maybe<AccountsUnderLeafNode>>>;
  changeLedgerParent: LeadgerHeadChangeResult;
  class?: Maybe<ChartsOfAccountClassResult>;
  coaAccountDetails?: Maybe<CoaDetailsResult>;
  coaAccountList?: Maybe<CoaAccountListResult>;
  coaLeafNodeDetails?: Maybe<CoaLeafNodeDetailView>;
  coaLedgerList?: Maybe<CoaLedgerListResult>;
  filterMapping?: Maybe<CoaLedgerListFilterMap>;
  fullView: CoaFullView;
  ledgerAllTransactionsList?: Maybe<LedgerAllTransactionConnection>;
  ledgersForJVPosting?: Maybe<LedgersForJvListResult>;
  listLeafCoaHeads: LeafCoaHeadsListConnection;
  search?: Maybe<CoaMinimalResult>;
  tag?: Maybe<SettingLedgerTagQuery>;
};

export type ChartsOfAccountSettingsQueryAccountsArgs = {
  filter: ChartsOfAccountFilter;
};

export type ChartsOfAccountSettingsQueryAccountsUnderArgs = {
  accountCode?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ChartsOfAccountSettingsQueryAccountsUnderLeafArgs = {
  currentBranch?: InputMaybe<Scalars['Boolean']>;
  parentId: Array<InputMaybe<Scalars['String']>>;
};

export type ChartsOfAccountSettingsQueryChangeLedgerParentArgs = {
  ledgerId: Scalars['ID'];
  newCOALeaf: Scalars['ID'];
};

export type ChartsOfAccountSettingsQueryCoaAccountDetailsArgs = {
  branchId?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
};

export type ChartsOfAccountSettingsQueryCoaAccountListArgs = {
  filter?: InputMaybe<Filter>;
  flag?: InputMaybe<CoaListFlag>;
  pagination?: InputMaybe<Pagination>;
};

export type ChartsOfAccountSettingsQueryCoaLeafNodeDetailsArgs = {
  branch?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
  snapshot?: InputMaybe<Scalars['String']>;
};

export type ChartsOfAccountSettingsQueryCoaLedgerListArgs = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<Filter>;
  id: Scalars['ID'];
  pagination?: InputMaybe<Pagination>;
  snapshot?: InputMaybe<Scalars['String']>;
};

export type ChartsOfAccountSettingsQueryLedgerAllTransactionsListArgs = {
  ledgerId: Scalars['ID'];
  pagination?: InputMaybe<Pagination>;
};

export type ChartsOfAccountSettingsQueryLedgersForJvPostingArgs = {
  filter?: InputMaybe<CoaListFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type ChartsOfAccountSettingsQueryListLeafCoaHeadsArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ChartsOfAccountSettingsQuerySearchArgs = {
  name: Scalars['String'];
};

export type ChequeBookRequestConnection = {
  edges?: Maybe<Array<Maybe<ChequeBookRequestEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type ChequeBookRequestEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<ChequeBookRequestList>;
};

export type ChequeBookRequestList = {
  accountNumber: Scalars['String'];
  accountType: Scalars['String'];
  agentName?: Maybe<Scalars['String']>;
  approvalStatus: RequestStatus;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  memberAge?: Maybe<Scalars['Int']>;
  memberCode?: Maybe<Scalars['String']>;
  memberGender?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNumber: Scalars['String'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  numberOfLeaves?: Maybe<Scalars['Int']>;
  pickUpMethod?: Maybe<ChequePickUpMethod>;
  remarks?: Maybe<Scalars['String']>;
  requestedDate: Scalars['Localized'];
};

export const ChequePickUpMethod = {
  SelfPickup: 'Self_Pickup',
  ThroughAgent: 'Through_agent',
} as const;

export type ChequePickUpMethod = typeof ChequePickUpMethod[keyof typeof ChequePickUpMethod];
export type Citizenship = {
  inNepali?: Maybe<CitizenshipInNepali>;
  issueDate?: Maybe<Scalars['Localized']>;
  issuePlace?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type CitizenshipInNepali = {
  issuePlace?: Maybe<Scalars['String']>;
};

export type ClosedLoanAccountFilter = {
  accountId: Scalars['String'];
  memberId: Scalars['String'];
  period: LocalizedDateFilter;
};

export type ClosedLoanAccountMeta = {
  address?: Maybe<Scalars['Localized']>;
  approvedAmount?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['Float']>;
  loanAccountNo?: Maybe<Scalars['String']>;
  loanClosedDate?: Maybe<Scalars['Localized']>;
  loanIssuedDate?: Maybe<Scalars['Localized']>;
  loanProcessingCharge?: Maybe<Scalars['String']>;
  loanSubtype?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  noOfInstallments?: Maybe<Scalars['Int']>;
};

export type ClosedLoanAccountReportData = {
  date?: Maybe<Scalars['Localized']>;
  disbursedPrincipal?: Maybe<Scalars['String']>;
  discount?: Maybe<Scalars['String']>;
  finePaid?: Maybe<Scalars['String']>;
  interestPaid?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  principalPaid?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type ClosedLoanAccountReportResult = {
  data?: Maybe<Array<Maybe<ClosedLoanAccountReportData>>>;
  error?: Maybe<QueryError>;
  meta?: Maybe<ClosedLoanAccountMeta>;
  summary?: Maybe<ClosedLoanAccountSummary>;
};

export type ClosedLoanAccountSummary = {
  remainingPrincipal?: Maybe<Scalars['String']>;
  totalDisbursedPrincipal?: Maybe<Scalars['String']>;
  totalDiscount?: Maybe<Scalars['String']>;
  totalFinePaid?: Maybe<Scalars['String']>;
  totalInterestPaid?: Maybe<Scalars['String']>;
  totalPrincipalPaid?: Maybe<Scalars['String']>;
};

export type ClosedSavingAccountData = {
  balanceAmount?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  date?: Maybe<Scalars['Localized']>;
  depositAmount?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  transactionID?: Maybe<Scalars['String']>;
  withdrawAmount?: Maybe<Scalars['String']>;
};

export type ClosedSavingAccountFilter = {
  type?: InputMaybe<SavingTransactionType>;
};

export type ClosedSavingAccountInput = {
  accountId: Scalars['String'];
  filter?: InputMaybe<ClosedSavingAccountFilter>;
  period: LocalizedDateFilter;
};

export type ClosedSavingAccountResult = {
  data?: Maybe<ClosedSavingAccountResultData>;
  error?: Maybe<QueryError>;
};

export type ClosedSavingAccountResultData = {
  accountNo?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  closedDate?: Maybe<Scalars['Localized']>;
  entries?: Maybe<Array<Maybe<ClosedSavingAccountData>>>;
  memberName?: Maybe<Scalars['Localized']>;
  memberShipCode?: Maybe<Scalars['String']>;
  membershipDate?: Maybe<Scalars['Localized']>;
  savingType?: Maybe<Scalars['String']>;
  serviceCenterName?: Maybe<Scalars['String']>;
  totalDeposit?: Maybe<Scalars['String']>;
  totalWithdraw?: Maybe<Scalars['String']>;
};

export type CodeManagementInput = {
  codeType: CbsCodeType;
  initialNo: Scalars['Int'];
  noOfDigit: Scalars['Int'];
  prefix: Scalars['String'];
};

export type CodeManagementMutation = {
  cbs?: Maybe<CbsCodeManagementMutation>;
};

export type CodeManagementQuery = {
  cbs?: Maybe<CbsCodeManagementQuery>;
};

export const Collateral = {
  DepositOrSaving: 'DEPOSIT_OR_SAVING',
  Documents: 'DOCUMENTS',
  Land: 'LAND',
  LandAndBuilding: 'LAND_AND_BUILDING',
  Others: 'OTHERS',
  Vehicle: 'VEHICLE',
} as const;

export type Collateral = typeof Collateral[keyof typeof Collateral];
export type CollateralFormState = {
  maxDV?: Maybe<Scalars['Float']>;
  maxFMV?: Maybe<Scalars['Float']>;
  maxValue?: Maybe<Scalars['Float']>;
  minDV?: Maybe<Scalars['Float']>;
  minFMV?: Maybe<Scalars['Float']>;
  minValue?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type CollateralInput = {
  maxDV?: InputMaybe<Scalars['Float']>;
  maxFMV?: InputMaybe<Scalars['Float']>;
  maxValue?: InputMaybe<Scalars['Float']>;
  minDV?: InputMaybe<Scalars['Float']>;
  minFMV?: InputMaybe<Scalars['Float']>;
  minValue?: InputMaybe<Scalars['Float']>;
  type?: InputMaybe<Scalars['String']>;
};

export type CollateralListData = {
  enabled?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

export type CollateralListInputData = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isDeleted?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

export type CombinedAccountDetail = {
  accountOpenDate?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['ID']>;
  nameOfDirector?: Maybe<Scalars['String']>;
  natureOfAccount?: Maybe<Scalars['String']>;
  natureOfOwnership?: Maybe<Scalars['String']>;
};

export type Committee = {
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Localized']>;
  description?: Maybe<Scalars['String']>;
  file?: Maybe<UploadedDocumentData>;
  id?: Maybe<Scalars['ID']>;
  member?: Maybe<Array<Maybe<CommitteeMember>>>;
  memberCount?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  tenure?: Maybe<Scalars['Int']>;
};

export type CommitteeAddResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Committee>;
  recordId: Scalars['ID'];
};

export type CommitteeInput = {
  code?: InputMaybe<Scalars['String']>;
  description: Scalars['String'];
  file?: InputMaybe<Scalars['String']>;
  memberIds?: InputMaybe<Array<InputMaybe<CommitteeMemberInput>>>;
  name: Scalars['String'];
  tenure: Scalars['Int'];
};

export type CommitteeMember = {
  familyMember: FamilyDetails;
  id?: Maybe<Scalars['ID']>;
  joinedAt: Scalars['Localized'];
  member: Member;
  occupation?: Maybe<KymIndOccupation>;
  position: Scalars['String'];
  validUpto: Scalars['Localized'];
};

export type CommitteeMemberAddResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<CommitteeMember>;
  recordId: Scalars['ID'];
};

export type CommitteeMemberInput = {
  committeeId: Scalars['ID'];
  memberId: Scalars['ID'];
  position: Scalars['String'];
};

export type CommitteeRegisterReport = {
  committee?: Maybe<Array<Maybe<Committee>>>;
  organization?: Maybe<Organization>;
};

export type CommitteeRegisterReportFilterData = {
  committeeId: Array<Scalars['ID']>;
  period?: InputMaybe<LocalizedDateFilter>;
};

export type CommitteeReport = {
  committeeRegisterReport?: Maybe<CommitteeRegisterReport>;
  organizationProfileReport?: Maybe<OrganizationProfileReport>;
};

export type CommitteeReportCommitteeRegisterReportArgs = {
  data: CommitteeRegisterReportFilterData;
};

export const ComparatorType = {
  Between: 'BETWEEN',
  Contains: 'CONTAINS',
  EqualTo: 'EqualTo',
  GreaterThan: 'GreaterThan',
  In: 'IN',
  LessThan: 'LessThan',
} as const;

export type ComparatorType = typeof ComparatorType[keyof typeof ComparatorType];
export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type ConfigQuery = {
  bank?: Maybe<Bank>;
  banks?: Maybe<Array<Maybe<Bank>>>;
  countries?: Maybe<Array<Maybe<Country>>>;
  country?: Maybe<Country>;
};

export type ConfigQueryBankArgs = {
  id: Scalars['ID'];
};

export type ConfigQueryCountryArgs = {
  code: Scalars['String'];
};

export const ConstructionType = {
  ConcreteFrame: 'CONCRETE_FRAME',
  JoistedOrLoadBearingMasonry: 'JOISTED_OR_LOAD_BEARING_MASONRY',
  LightGaugeSteelFrame: 'LIGHT_GAUGE_STEEL_FRAME',
  PreEngineered: 'PRE_ENGINEERED',
  SteelFrame: 'STEEL_FRAME',
  WoodFrame: 'WOOD_FRAME',
} as const;

export type ConstructionType = typeof ConstructionType[keyof typeof ConstructionType];
export type Contact = {
  mobile?: Maybe<Scalars['String']>;
  office?: Maybe<Scalars['String']>;
  residence?: Maybe<Scalars['String']>;
};

export type CoopAdditionalDetails = {
  coopType?: Maybe<Scalars['String']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
};

export type CoopAssetDetails = {
  bank?: Maybe<Scalars['String']>;
  cashAndEquivalents?: Maybe<Scalars['String']>;
  investments?: Maybe<Scalars['String']>;
  loan?: Maybe<Scalars['String']>;
  nonCurrentAssets?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['String']>;
  otherNonCurrentAssets?: Maybe<Scalars['String']>;
};

export type CoopBio = {
  additionalCoopDetails?: Maybe<CoopAdditionalDetails>;
  assetDetails?: Maybe<CoopAssetDetails>;
  basicInfo?: Maybe<CooperativeBasicMinInfo>;
  contactDetails?: Maybe<CoopContactDetails>;
  currentMemberDetails?: Maybe<CoopCurrentMemberDetails>;
  declaration?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  employeeDetails?: Maybe<CoopEmployeeDetails>;
  equityLiabilities?: Maybe<CoopEquityLiabilityDetails>;
  operatingAddress?: Maybe<Address>;
  operatorDetails?: Maybe<Array<Maybe<InsOperatorDetails>>>;
  partnerDirectorDetails?: Maybe<Array<Maybe<InsPartnerDirectorDetails>>>;
  registeredAddress?: Maybe<Address>;
  representativeDetails?: Maybe<CoopRepresentativeDetails>;
};

export type CoopContactDetails = {
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type CoopCurrentMemberDetails = {
  lastAuditDate?: Maybe<Scalars['Localized']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
};

export type CoopEmployeeDetails = {
  female?: Maybe<Scalars['Int']>;
  male?: Maybe<Scalars['Int']>;
  other?: Maybe<Scalars['Int']>;
  total?: Maybe<Scalars['Int']>;
};

export type CoopEquityLiabilityDetails = {
  capitalGrant?: Maybe<Scalars['String']>;
  loanAccount?: Maybe<Scalars['String']>;
  reserveAndSurplus?: Maybe<Scalars['String']>;
  savingDeposit?: Maybe<Scalars['String']>;
  shareCapital?: Maybe<Scalars['String']>;
  total?: Maybe<Scalars['String']>;
};

export type CoopRelatedTraining = {
  dateOfTraining?: InputMaybe<Scalars['Localized']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type CoopRelatedTrainingType = {
  dateOfTraining?: Maybe<Scalars['Localized']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CoopRepresentativeDetails = {
  address?: Maybe<Address>;
  contactNumber?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panVatNo?: Maybe<Scalars['String']>;
};

export type CoopUnionApplicantDetails = {
  address?: Maybe<Address>;
  contactNo?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
};

export type CoopUnionAssetDetails = {
  bankCurrent?: Maybe<Scalars['Float']>;
  bankTarget?: Maybe<Scalars['Float']>;
  cashAndEquivalentsCurrent?: Maybe<Scalars['Float']>;
  cashAndEquivalentsTarget?: Maybe<Scalars['Float']>;
  investmentsCurrent?: Maybe<Scalars['Float']>;
  investmentsTarget?: Maybe<Scalars['Float']>;
  loanCurrent?: Maybe<Scalars['Float']>;
  loanTarget?: Maybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  totalCurrent?: Maybe<Scalars['Float']>;
  totalTarget?: Maybe<Scalars['Float']>;
};

export type CoopUnionBankAccDetails = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['String']>;
};

export type CoopUnionBio = {
  address?: Maybe<Address>;
  applicantDetails?: Maybe<CoopUnionApplicantDetails>;
  assetDetails?: Maybe<CoopUnionAssetDetails>;
  bankAccDetails?: Maybe<CoopUnionBankAccDetails>;
  basicInfo?: Maybe<CooperativeUnionBasicMinInfo>;
  contactDetails?: Maybe<CoopUnionContactDetails>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  equityLiabilities?: Maybe<CoopUnionEquityLiabilityDetails>;
  expenseDetails?: Maybe<CoopUnionExpenseDetails>;
  incomeDetails?: Maybe<CoopUnionIncomeDetails>;
  memberInfo?: Maybe<CoopUnionMemberInfo>;
  operatingAddress?: Maybe<Address>;
  operatorDetails?: Maybe<Array<Maybe<InsOperatorDetails>>>;
  partnerDirectorDetails?: Maybe<Array<Maybe<InsPartnerDirectorDetails>>>;
  registrationDetails?: Maybe<CoopUnionRegistrationDetails>;
  serviceCenterAddress?: Maybe<Address>;
};

export type CoopUnionContactDetails = {
  agmDetails?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  noOfEmployees?: Maybe<Scalars['Int']>;
  phoneNo?: Maybe<Scalars['String']>;
  poBoxNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type CoopUnionEquityLiabilityDetails = {
  capitalGrantCurrent?: Maybe<Scalars['Float']>;
  capitalGrantTarget?: Maybe<Scalars['Float']>;
  liabilitiesPayableCurrent?: Maybe<Scalars['Float']>;
  liabilitiesPayableTarget?: Maybe<Scalars['Float']>;
  loanAccountCurrent?: Maybe<Scalars['Float']>;
  loanAccountTarget?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: Maybe<Scalars['Float']>;
  reserveAndSurplusTarget?: Maybe<Scalars['Float']>;
  savingDepositCurrent?: Maybe<Scalars['Float']>;
  savingDepositTarget?: Maybe<Scalars['Float']>;
  shareCapitalCurrent?: Maybe<Scalars['Float']>;
  shareCapitalTarget?: Maybe<Scalars['Float']>;
  totalCurrent?: Maybe<Scalars['Float']>;
  totalTarget?: Maybe<Scalars['Float']>;
};

export type CoopUnionExpenseDetails = {
  adminExpense?: Maybe<Scalars['Float']>;
  deferredTax?: Maybe<Scalars['Float']>;
  directExpense?: Maybe<Scalars['Float']>;
  financialCost?: Maybe<Scalars['Float']>;
  purchase?: Maybe<Scalars['Float']>;
  riskManagement?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

export type CoopUnionIncomeDetails = {
  financialInvestment?: Maybe<Scalars['Float']>;
  investment?: Maybe<Scalars['Float']>;
  miscIncome?: Maybe<Scalars['Float']>;
  nonFinancialInvestment?: Maybe<Scalars['Float']>;
  otherIncome?: Maybe<Scalars['Float']>;
  sales?: Maybe<Scalars['Float']>;
  serviceOperations?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
};

export type CoopUnionInstitutionInformationInput = {
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountOperators?: InputMaybe<Array<InputMaybe<CoopUnionPersonnelInput>>>;
  administrativeExpense?: InputMaybe<Scalars['Float']>;
  applicantContactNo?: InputMaybe<Scalars['String']>;
  applicantDateOfMembership?: InputMaybe<Scalars['Localized']>;
  applicantDesignationEn?: InputMaybe<Scalars['String']>;
  applicantDesignationNp?: InputMaybe<Scalars['String']>;
  applicantEmail?: InputMaybe<Scalars['String']>;
  applicantHighestQualification?: InputMaybe<Scalars['String']>;
  applicantIsPermanentAndTemporaryAddrSame?: InputMaybe<Scalars['Boolean']>;
  applicantName?: InputMaybe<Scalars['String']>;
  applicantNameNp?: InputMaybe<Scalars['String']>;
  applicantPanNo?: InputMaybe<Scalars['String']>;
  applicantPermanentAddress?: InputMaybe<KymAddressInput>;
  applicantTemporaryAddress?: InputMaybe<KymAddressInput>;
  bankCurrent?: InputMaybe<Scalars['Float']>;
  bankTarget?: InputMaybe<Scalars['Float']>;
  branchOfficeAddress?: InputMaybe<KymAddressInput>;
  capitalGrantCurrent?: InputMaybe<Scalars['Float']>;
  capitalGrantTarget?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: InputMaybe<Scalars['Float']>;
  centralRepresentative?: InputMaybe<CoopUnionPersonnelInput>;
  centralRepresentativeDirectorIndex?: InputMaybe<Scalars['Int']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  currentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  deferredTaxExpense?: InputMaybe<Scalars['Float']>;
  directExpense?: InputMaybe<Scalars['Float']>;
  directors?: InputMaybe<Array<InputMaybe<CoopUnionPersonnelInput>>>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  fax?: InputMaybe<Scalars['String']>;
  financialCost?: InputMaybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromSales?: InputMaybe<Scalars['Float']>;
  incomeFromServiceOperation?: InputMaybe<Scalars['Float']>;
  institutionType?: InputMaybe<Scalars['ID']>;
  investmentsCurrent?: InputMaybe<Scalars['Float']>;
  investmentsTarget?: InputMaybe<Scalars['Float']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  lastAgmDate?: InputMaybe<Scalars['Localized']>;
  loanAccountCurrent?: InputMaybe<Scalars['Float']>;
  loanAccountTarget?: InputMaybe<Scalars['Float']>;
  loanCurrent?: InputMaybe<Scalars['Float']>;
  loanTarget?: InputMaybe<Scalars['Float']>;
  miscellaneousIncome?: InputMaybe<Scalars['Float']>;
  nameOfBank?: InputMaybe<Scalars['ID']>;
  nameOfInstitutionEn?: InputMaybe<Scalars['String']>;
  nameOfInstitutionNp?: InputMaybe<Scalars['String']>;
  natureOfBusinessEn?: InputMaybe<Scalars['String']>;
  natureOfBusinessNp?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  noOfEmployee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfInstitutionalMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfInstitutionalMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberTarget?: InputMaybe<Scalars['Int']>;
  nonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  operatingOfficeAddress?: InputMaybe<KymAddressInput>;
  otherIncome?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  purchase?: InputMaybe<Scalars['Float']>;
  regdAddress?: InputMaybe<KymAddressInput>;
  regdDate?: InputMaybe<Scalars['Localized']>;
  regdNo?: InputMaybe<Scalars['String']>;
  reserveAndSurplusCurrent?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusTarget?: InputMaybe<Scalars['Float']>;
  riskManagementCost?: InputMaybe<Scalars['Float']>;
  savingDepositCurrent?: InputMaybe<Scalars['Float']>;
  savingDepositTarget?: InputMaybe<Scalars['Float']>;
  shareCapitalCurrent?: InputMaybe<Scalars['Float']>;
  shareCapitalTarget?: InputMaybe<Scalars['Float']>;
  vatOrPan?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type CoopUnionInstitutionInformationResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['ID'];
};

export type CoopUnionMemberInfo = {
  noOfFemaleCurrent?: Maybe<Scalars['Int']>;
  noOfFemaleTarget?: Maybe<Scalars['Int']>;
  noOfInstitutionalCurrent?: Maybe<Scalars['Int']>;
  noOfInstitutionalTarget?: Maybe<Scalars['Int']>;
  noOfMaleCurrent?: Maybe<Scalars['Int']>;
  noOfMaleTarget?: Maybe<Scalars['Int']>;
  totalCurrent?: Maybe<Scalars['Int']>;
  totalTarget?: Maybe<Scalars['Int']>;
};

export type CoopUnionPersonnelDetails = {
  centralRepID?: Maybe<Scalars['ID']>;
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designationEn?: Maybe<Scalars['String']>;
  designationNp?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNumber?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type CoopUnionPersonnelInput = {
  centralRepID?: InputMaybe<Scalars['ID']>;
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designationEn?: InputMaybe<Scalars['String']>;
  designationNp?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  fullNameNp?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  notAmongDirectors?: InputMaybe<Scalars['Boolean']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  sectionType?: InputMaybe<CooperativeUnionPersonnelSection>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  trainingAttended?: InputMaybe<Array<InputMaybe<CoopRelatedTraining>>>;
};

export type CoopUnionRegistrationDetails = {
  address?: Maybe<Address>;
  issuingOffice?: Maybe<Scalars['String']>;
  registeredNo?: Maybe<Scalars['String']>;
};

export const CoopUnionSection = {
  AccountOperatorsDetails: 'ACCOUNT_OPERATORS_DETAILS',
  BoardOfDirectorsDetails: 'BOARD_OF_DIRECTORS_DETAILS',
  CentralRepresentativeDetails: 'CENTRAL_REPRESENTATIVE_DETAILS',
  Declaration: 'DECLARATION',
  EconomicDetails: 'ECONOMIC_DETAILS',
  InstitutionInformation: 'INSTITUTION_INFORMATION',
  MemberDetails: 'MEMBER_DETAILS',
} as const;

export type CoopUnionSection = typeof CoopUnionSection[keyof typeof CoopUnionSection];
export type CooperativeAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCooperativeAccountOperatorStatus>;
  bodDetails?: Maybe<KymCooperativeBodDetailsStatus>;
  declaration?: Maybe<KymCooperativeDeclarationStatus>;
  economicDetails?: Maybe<KymCooperativeEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCooperativeInstitutionalInformationStatus>;
};

export type CooperativeBasicMinInfo = {
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  registrationNo?: Maybe<Scalars['String']>;
  registrationOffice?: Maybe<Scalars['String']>;
};

export type CooperativeUnionBasicMinInfo = {
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  nature?: Maybe<Scalars['String']>;
  noOfServiceCenters?: Maybe<Scalars['Int']>;
  profilePic?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  type?: Maybe<Scalars['String']>;
  vatPanNo?: Maybe<Scalars['String']>;
};

export const CooperativeUnionPersonnelSection = {
  AccountOperators: 'ACCOUNT_OPERATORS',
  CentralRepresentative: 'CENTRAL_REPRESENTATIVE',
  Directors: 'DIRECTORS',
} as const;

export type CooperativeUnionPersonnelSection =
  typeof CooperativeUnionPersonnelSection[keyof typeof CooperativeUnionPersonnelSection];
export type Coordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type CoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type CopomisConfiguration = {
  expression: Scalars['String'];
  id: Scalars['String'];
  indicatorName: Scalars['String'];
  values: Scalars['Map'];
};

export type CopomisConfigurationInput = {
  expression?: InputMaybe<Scalars['String']>;
  values: Scalars['Map'];
};

export type CopomisConfigurationMutation = {
  update?: Maybe<CopomisConfigurationResult>;
};

export type CopomisConfigurationMutationUpdateArgs = {
  data?: InputMaybe<CopomisConfigurationInput>;
  indicatorId: Scalars['String'];
};

export type CopomisConfigurationQuery = {
  list?: Maybe<Array<Maybe<CopomisConfiguration>>>;
};

export type CopomisConfigurationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<CopomisConfigurationQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type CopomisFinancial = {
  cr?: Maybe<Scalars['String']>;
  dr?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  indicatorName?: Maybe<Scalars['String']>;
};

export type CopomisFinancialInput = {
  period: LocalizedDateFilter;
};

export type CopomisFinancialResult = {
  data?: Maybe<Array<Maybe<CopomisFinancial>>>;
};

export type CopomisReportData = {
  address?: Maybe<Scalars['Localized']>;
  castRecordId?: Maybe<Scalars['Int']>;
  citizenshipIssuedDate?: Maybe<Scalars['Localized']>;
  citizenshipIssuedDistrictId?: Maybe<Scalars['Int']>;
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  fatherHusbandName?: Maybe<Scalars['String']>;
  genderRecordId?: Maybe<Scalars['Int']>;
  grandfatherName?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['Int']>;
  memberId?: Maybe<Scalars['String']>;
  memberNameEn?: Maybe<Scalars['String']>;
  memberNameNp?: Maybe<Scalars['String']>;
  memberRegistrationDate?: Maybe<Scalars['Localized']>;
  membershipNo?: Maybe<Scalars['String']>;
  shareCertificateNo?: Maybe<Scalars['String']>;
  totalShare?: Maybe<Scalars['Int']>;
};

export type CopomisReportFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  period: LocalizedDateFilter;
};

export type CopomisReportResult = {
  data?: Maybe<Array<Maybe<CopomisReportData>>>;
  error?: Maybe<QueryError>;
};

export const CoreEmployee = {
  All: 'ALL',
  No: 'NO',
  Yes: 'YES',
} as const;

export type CoreEmployee = typeof CoreEmployee[keyof typeof CoreEmployee];
export type Country = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export const CriteriaSection = {
  Age: 'AGE',
  CooperativeType: 'COOPERATIVE_TYPE',
  EducationQualification: 'EDUCATION_QUALIFICATION',
  Ethnicity: 'ETHNICITY',
  ForeignEmployment: 'FOREIGN_EMPLOYMENT',
  Gender: 'GENDER',
  MaritalStatus: 'MARITAL_STATUS',
  NatureOfBusinessCoopunion: 'NATURE_OF_BUSINESS_COOPUNION',
  NatureOfBusinessInstitutions: 'NATURE_OF_BUSINESS_INSTITUTIONS',
  OccupationDetails: 'OCCUPATION_DETAILS',
} as const;

export type CriteriaSection = typeof CriteriaSection[keyof typeof CriteriaSection];
export type CustomFormListQueryResult = {
  data?: Maybe<Array<Maybe<FormElement>>>;
  error?: Maybe<QueryError>;
};

export type CustomFormQuery = {
  list: CustomFormListQueryResult;
};

export type CustomFormQueryListArgs = {
  filter: CustomListFilter;
};

export type CustomListFilter = {
  category: FormCategory;
};

export type CustomPeriodInput = {
  from: Scalars['Localized'];
  to: Scalars['Localized'];
};

export type CustomPeriodType = {
  from: Scalars['String'];
  to: Scalars['String'];
};

export type CustomSlipSize = {
  height?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

export type CustomSlipSizeInput = {
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export const CustomerPayment = {
  BankTransfer: 'BANK_TRANSFER',
  Cash: 'CASH',
  Cheque: 'CHEQUE',
} as const;

export type CustomerPayment = typeof CustomerPayment[keyof typeof CustomerPayment];
export type DashboardInfo = {
  branchInfo?: Maybe<BranchInfo>;
  coopInfo?: Maybe<MyCoopInfo>;
  pendingRequest?: Maybe<PendingRequestInfo>;
};

export type DashboardInfoResult = {
  data?: Maybe<DashboardInfo>;
  error?: Maybe<QueryError>;
};

export type DashboardQuery = {
  dashboardInfo?: Maybe<DashboardInfoResult>;
  myDayInfo?: Maybe<TransactionMyDayData>;
};

export type DataMigration = {
  allLoanSchedule?: Maybe<Scalars['String']>;
  dumpAccountInterest?: Maybe<Scalars['String']>;
  dumpProductCharges?: Maybe<Scalars['String']>;
  updateSavingEndDate?: Maybe<Scalars['String']>;
};

export type DateFilter = {
  from?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
};

export type DateFilterOutput = {
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
};

export const DateType = {
  Ad: 'AD',
  Bs: 'BS',
} as const;

export type DateType = typeof DateType[keyof typeof DateType];
export type DayBookDataEntry = {
  amount?: Maybe<Scalars['String']>;
  ledger?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  voucherNo?: Maybe<Scalars['String']>;
};

export type DayBookDataValue = {
  accountHead?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  entries?: Maybe<Array<Maybe<DayBookDataEntry>>>;
};

export type DayBookReportData = {
  closingAmount?: Maybe<Scalars['String']>;
  openingBalance?: Maybe<Scalars['String']>;
  payments?: Maybe<Array<Maybe<DayBookDataValue>>>;
  receipts?: Maybe<Array<Maybe<DayBookDataValue>>>;
  totalAmount?: Maybe<Scalars['String']>;
  totalPayment?: Maybe<Scalars['String']>;
  totalReceipts?: Maybe<Scalars['String']>;
};

export type DayBookReportFilter = {
  branchId: Array<InputMaybe<Scalars['String']>>;
  period?: InputMaybe<LocalizedDateFilter>;
  user?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type DayBookReportResult = {
  data?: Maybe<DayBookReportData>;
  error?: Maybe<QueryError>;
};

export type Declaration = Base & {
  content: Scalars['Localized'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  for: DeclarationFor;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export const DeclarationFor = {
  KymCoop: 'KYM_COOP',
  KymCoopUnion: 'KYM_COOP_UNION',
  KymIndividual: 'KYM_INDIVIDUAL',
  KymInstitution: 'KYM_INSTITUTION',
} as const;

export type DeclarationFor = typeof DeclarationFor[keyof typeof DeclarationFor];
export type DeclarationGetResult = {
  data?: Maybe<Declaration>;
  error?: Maybe<QueryError>;
};

export type DeclarationInput = {
  dataEn?: InputMaybe<Scalars['String']>;
  dataNp?: InputMaybe<Scalars['String']>;
  for: DeclarationFor;
};

export type DeclarationMutation = {
  update: DeclarationUpdateResult;
};

export type DeclarationMutationUpdateArgs = {
  data: DeclarationInput;
};

export type DeclarationQuery = {
  get?: Maybe<DeclarationGetResult>;
};

export type DeclarationQueryGetArgs = {
  for?: InputMaybe<DeclarationFor>;
};

export type DeclarationSettingMutation = {
  declaration: DeclarationMutation;
};

export type DeclarationSettingQuery = {
  declaration: DeclarationQuery;
};

export type DeclarationUpdateResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DeclarationQuery>;
  record?: Maybe<Declaration>;
};

export type DeductionComponentListConnection = {
  edges?: Maybe<Array<Maybe<DeductionComponentListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type DeductionComponentListEdges = {
  cursor: Scalars['Cursor'];
  node: DeductionComponentNode;
};

export type DeductionComponentNode = {
  deductionFrequency?: Maybe<DeductionFrequencyEnum>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<DeductionStatusEnum>;
};

export const DeductionFrequencyEnum = {
  Monthly: 'MONTHLY',
  Yearly: 'YEARLY',
} as const;

export type DeductionFrequencyEnum =
  typeof DeductionFrequencyEnum[keyof typeof DeductionFrequencyEnum];
export const DeductionStatusEnum = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const;

export type DeductionStatusEnum = typeof DeductionStatusEnum[keyof typeof DeductionStatusEnum];
export const DefaultAccountType = {
  Current: 'CURRENT',
  Saving: 'SAVING',
} as const;

export type DefaultAccountType = typeof DefaultAccountType[keyof typeof DefaultAccountType];
export type DeleteResponse = {
  error?: Maybe<MutationError>;
  responseStatus: Scalars['Boolean'];
};

export type Denomination = {
  quantity: Scalars['Int'];
  value: CashValue;
};

export type DenominationValue = {
  amount?: Maybe<Scalars['String']>;
  quantity: Scalars['Int'];
  value: CashValue;
};

export type Department = {
  description: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
};

export type DepartmentResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['String'];
};

export type DepositAccount = Base & {
  accountExpiryDate?: Maybe<Scalars['Localized']>;
  accountName?: Maybe<Scalars['String']>;
  accountOpenedDate?: Maybe<Scalars['Localized']>;
  availableBalance?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dues?: Maybe<Dues>;
  guaranteedAmount?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  installmentAmount?: Maybe<Scalars['String']>;
  interestAccured?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['Float']>;
  interestTax?: Maybe<Scalars['String']>;
  lastTransactionDate?: Maybe<Scalars['Localized']>;
  ledgerId?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  minor?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  overDrawnBalance?: Maybe<Scalars['String']>;
  prematurePenalty?: Maybe<Scalars['String']>;
  product: DepositProduct;
};

export type DepositAccountClose = {
  accountID: Scalars['ID'];
  accountTransfer?: InputMaybe<AccountTransferPaymentForAccountClose>;
  adjustedInterest?: InputMaybe<Scalars['String']>;
  bankCheque?: InputMaybe<BankChequePaymentForAccountClose>;
  cash?: InputMaybe<DepositCash>;
  memberID: Scalars['ID'];
  notes?: InputMaybe<Scalars['String']>;
  otherReason?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<AccountClosePaymentMode>;
  reason: AccountCloseReason;
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceChargeInput>>>;
};

export type DepositAccountCloseResult = {
  calculatedAmount?: Maybe<Scalars['String']>;
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['Any']>;
  recordId: Scalars['ID'];
};

export type DepositAccountInstallmentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositLoanAccountQuery>;
  record?: Maybe<Installment>;
  recordId: Scalars['ID'];
};

export type DepositBankVoucher = {
  amount: Scalars['String'];
  bankId: Scalars['String'];
  depositedAt: Scalars['Localized'];
  depositedBy: Scalars['String'];
  voucherId?: InputMaybe<Scalars['String']>;
};

export type DepositCash = {
  cashPaid: Scalars['String'];
  denominations?: InputMaybe<Array<Denomination>>;
  disableDenomination: Scalars['Boolean'];
  note?: InputMaybe<Scalars['String']>;
  returned_amount: Scalars['String'];
  total: Scalars['String'];
};

export type DepositFilterMapping = {
  depositedBy?: Maybe<Array<LabelValueArray>>;
  paymentMode: Array<LabelValueArray>;
};

export const DepositFrequency = {
  Daily: 'DAILY',
  HalfYearly: 'HALF_YEARLY',
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
  Yearly: 'YEARLY',
} as const;

export type DepositFrequency = typeof DepositFrequency[keyof typeof DepositFrequency];
export type DepositInput = {
  accountId?: InputMaybe<Scalars['String']>;
  agentId?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['String']>;
  bankVoucher?: InputMaybe<DepositBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  depositedBy: DepositedBy;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  fine?: InputMaybe<Scalars['String']>;
  isSuspicious?: InputMaybe<Scalars['Boolean']>;
  memberId?: InputMaybe<Scalars['String']>;
  noOfInstallments?: InputMaybe<Scalars['Int']>;
  notes?: InputMaybe<Scalars['String']>;
  other_doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  other_name?: InputMaybe<Scalars['String']>;
  payment_type: DepositPaymentType;
  rebate?: InputMaybe<Scalars['String']>;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  suspicionRemarks?: InputMaybe<Scalars['String']>;
  suspicionTopologies?: InputMaybe<Array<InputMaybe<SuspiciousTransactionTopology>>>;
  voucherId?: InputMaybe<Scalars['String']>;
  withdrawSlip?: InputMaybe<WithdrawSlip>;
};

export type DepositIro = {
  id: Scalars['ID'];
  iroAddress?: Maybe<Scalars['String']>;
  iroCode?: Maybe<Scalars['String']>;
  iroName?: Maybe<Scalars['String']>;
};

export type DepositIroFormStateData = {
  iroAddress?: Maybe<Scalars['String']>;
  iroCode?: Maybe<Scalars['String']>;
  iroName?: Maybe<Scalars['String']>;
};

export type DepositIroFormStateResult = {
  data?: Maybe<DepositIroFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositIroInput = {
  iroAddress?: InputMaybe<Scalars['String']>;
  iroCode?: InputMaybe<Scalars['String']>;
  iroName?: InputMaybe<Scalars['String']>;
};

export type DepositIroResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositSettingsQuery>;
  record?: Maybe<DepositIro>;
  recordId: Scalars['ID'];
};

export type DepositLoanAccount = Base & {
  accountName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['ID']>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  chequeFacility?: Maybe<Scalars['Boolean']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  defaultAmountDepositAccountName?: Maybe<Scalars['String']>;
  depositFrequencyDay?: Maybe<Scalars['Int']>;
  depositFrequencyDayOfWeek?: Maybe<Week>;
  depositFrequencyFrequencyDay?: Maybe<FrequencyDay>;
  depositFrequencyMonthly?: Maybe<WeeklyFrequency>;
  depositFrequencyWeekly?: Maybe<Week>;
  depositFrequencyYearlyDay?: Maybe<Scalars['Int']>;
  depositFrequencyYearlyMonth?: Maybe<Months>;
  dues?: Maybe<Dues>;
  eBanking?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  initialDepositAmount?: Maybe<Scalars['Amount']>;
  installmentAmount?: Maybe<Scalars['String']>;
  interestAuthority?: Maybe<InterestAuthority>;
  interestDoc?: Maybe<Array<Maybe<PictureData>>>;
  interestRate?: Maybe<Scalars['Float']>;
  memberId: Scalars['ID'];
  minor?: Maybe<Scalars['String']>;
  mobileBanking?: Maybe<Scalars['Boolean']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  productId: Scalars['ID'];
  productName?: Maybe<Scalars['String']>;
  serviceCharge?: Maybe<Array<Maybe<ServiceCharge>>>;
  smsBanking?: Maybe<Scalars['Boolean']>;
  tenure?: Maybe<FrequencyTenure>;
  tenureNumber?: Maybe<Scalars['Int']>;
};

export type DepositLoanAccountConnection = {
  edges?: Maybe<Array<DepositLoanAccountEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type DepositLoanAccountData = {
  data?: Maybe<DepositLoanAccount>;
  error?: Maybe<MutationError>;
};

export type DepositLoanAccountEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<DepositAccount>;
};

export type DepositLoanAccountFilterMapping = {
  id?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  objState: Array<ObjState>;
  productID: Array<Maybe<LabelValueArray>>;
};

export type DepositLoanAccountFormStateResult = {
  data?: Maybe<DepositLoanAccount>;
  error?: Maybe<QueryError>;
};

export type DepositLoanAccountInput = {
  accountDocuments?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  accountName?: InputMaybe<Scalars['String']>;
  agentId?: InputMaybe<Scalars['ID']>;
  atmFacility?: InputMaybe<Scalars['Boolean']>;
  chequeFacility?: InputMaybe<Scalars['Boolean']>;
  defaultAmountDepositAccountName?: InputMaybe<Scalars['String']>;
  depositFrequencyDay?: InputMaybe<Scalars['Int']>;
  depositFrequencyDayOfWeek?: InputMaybe<Week>;
  depositFrequencyFrequencyDay?: InputMaybe<FrequencyDay>;
  depositFrequencyMonthly?: InputMaybe<WeeklyFrequency>;
  depositFrequencyWeekly?: InputMaybe<Week>;
  depositFrequencyYearlyDay?: InputMaybe<Scalars['Int']>;
  depositFrequencyYearlyMonth?: InputMaybe<Months>;
  eBanking?: InputMaybe<Scalars['Boolean']>;
  initialDepositAmount?: InputMaybe<Scalars['Amount']>;
  installmentAmount?: InputMaybe<Scalars['String']>;
  interestAuthority?: InputMaybe<InterestAuthority>;
  interestDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  interestRate?: InputMaybe<Scalars['Float']>;
  memberId: Scalars['ID'];
  minor?: InputMaybe<Scalars['String']>;
  mobileBanking?: InputMaybe<Scalars['Boolean']>;
  openingPayment?: InputMaybe<DepositInput>;
  productId: Scalars['ID'];
  referenceFromKYM?: InputMaybe<Scalars['Boolean']>;
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceChargeInput>>>;
  smsBanking?: InputMaybe<Scalars['Boolean']>;
  tenure?: InputMaybe<FrequencyTenure>;
  tenureNumber?: InputMaybe<Scalars['Int']>;
};

export type DepositLoanAccountListResult = {
  data?: Maybe<Array<Maybe<DepositLoanAccount>>>;
  error?: Maybe<QueryError>;
};

export type DepositLoanAccountMutation = {
  add?: Maybe<DepositLoanAccountResult>;
  close?: Maybe<DepositAccountCloseResult>;
  editAccountInterest: InterestSetupMutationResult;
  forgiveInstallment?: Maybe<DepositAccountInstallmentResult>;
  issueFDCertificate: Scalars['String'];
  makeActive?: Maybe<Scalars['String']>;
  updateAccountInterest: InterestSetupMutationResult;
  updateAccountName?: Maybe<SavingsTenureUpdateResult>;
  updateInstallmentAmount?: Maybe<SavingsTenureUpdateResult>;
  updateNomineeAccount?: Maybe<NomineeAccountUpdateResult>;
  updateSignature?: Maybe<SavingsTenureUpdateResult>;
  updateTenure?: Maybe<SavingsTenureUpdateResult>;
};

export type DepositLoanAccountMutationAddArgs = {
  data?: InputMaybe<DepositLoanAccountInput>;
  id: Scalars['ID'];
};

export type DepositLoanAccountMutationCloseArgs = {
  data?: InputMaybe<DepositAccountClose>;
};

export type DepositLoanAccountMutationEditAccountInterestArgs = {
  accountId: Scalars['ID'];
  data: InterestRateSetupInput;
  id: Scalars['ID'];
};

export type DepositLoanAccountMutationForgiveInstallmentArgs = {
  id: Scalars['ID'];
  installmentDate: Array<Scalars['String']>;
};

export type DepositLoanAccountMutationIssueFdCertificateArgs = {
  accountId: Scalars['ID'];
};

export type DepositLoanAccountMutationMakeActiveArgs = {
  accountID: Scalars['ID'];
};

export type DepositLoanAccountMutationUpdateAccountInterestArgs = {
  accountId: Scalars['ID'];
  data: InterestRateSetupInput;
};

export type DepositLoanAccountMutationUpdateAccountNameArgs = {
  accountID: Scalars['ID'];
  accountType: AccountTypeFilter;
  name: Scalars['String'];
};

export type DepositLoanAccountMutationUpdateInstallmentAmountArgs = {
  accountId: Scalars['ID'];
  effectiveDate: Scalars['Localized'];
  newInstallmentAmount: Scalars['String'];
};

export type DepositLoanAccountMutationUpdateNomineeAccountArgs = {
  data: NomineeAccountUpdateInput;
};

export type DepositLoanAccountMutationUpdateSignatureArgs = {
  accountID: Scalars['ID'];
  data: Array<Scalars['String']>;
};

export type DepositLoanAccountMutationUpdateTenureArgs = {
  data: SavingsTenureUpdateInput;
};

export type DepositLoanAccountQuery = {
  accountDetails?: Maybe<AccountDetailsQueryResult>;
  filterMapping?: Maybe<DepositLoanAccountFilterMapping>;
  formState?: Maybe<DepositLoanAccountFormStateResult>;
  get?: Maybe<DepositLoanAccount>;
  getAccountInterestRate: InterestSetupQueryResult;
  getBulkInstallments?: Maybe<Array<Maybe<BulkInstallmentResult>>>;
  getInstallments?: Maybe<InstallmentResult>;
  getMRMemberInstallments: MRmemberInstallmentResult;
  list?: Maybe<DepositLoanAccountConnection>;
  listAccountInterestRates: InterestSetupListResult;
  listAccountLedgers?: Maybe<AccountLedgerListResult>;
  listAssociatedGuaranteeAccounts?: Maybe<AssociatedGuaranteeAccountListResult>;
  listDefaultAccounts?: Maybe<DepositLoanAccountListResult>;
  listMinors?: Maybe<KymIndFamilyMemberQueryResult>;
  listTransactions?: Maybe<EbankingTransactionConnection>;
};

export type DepositLoanAccountQueryAccountDetailsArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryGetArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryGetAccountInterestRateArgs = {
  accountID: Scalars['String'];
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryGetBulkInstallmentsArgs = {
  ids: Array<InputMaybe<Scalars['ID']>>;
};

export type DepositLoanAccountQueryGetInstallmentsArgs = {
  from?: InputMaybe<Scalars['String']>;
  fromN?: InputMaybe<Scalars['Int']>;
  id: Scalars['ID'];
  to?: InputMaybe<Scalars['String']>;
  toN?: InputMaybe<Scalars['Int']>;
};

export type DepositLoanAccountQueryGetMrMemberInstallmentsArgs = {
  agentId: Scalars['ID'];
};

export type DepositLoanAccountQueryListArgs = {
  filter?: InputMaybe<Filter>;
  injectLoc?: InputMaybe<Scalars['Boolean']>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositLoanAccountQueryListAccountInterestRatesArgs = {
  accountId: Scalars['ID'];
};

export type DepositLoanAccountQueryListAccountLedgersArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryListAssociatedGuaranteeAccountsArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryListDefaultAccountsArgs = {
  memberId: Scalars['ID'];
  productId: Scalars['ID'];
};

export type DepositLoanAccountQueryListMinorsArgs = {
  memberId: Scalars['ID'];
};

export type DepositLoanAccountQueryListTransactionsArgs = {
  filter: AccountsTransactionFilter;
  paginate: Pagination;
};

export type DepositLoanAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositLoanAccountQuery>;
  record?: Maybe<DepositLoanAccount>;
  recordId: Scalars['ID'];
};

export const DepositPaymentType = {
  BankVoucher: 'BANK_VOUCHER',
  Cash: 'CASH',
  WithdrawSlip: 'WITHDRAW_SLIP',
} as const;

export type DepositPaymentType = typeof DepositPaymentType[keyof typeof DepositPaymentType];
export type DepositProduct = {
  accountClosingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  createdAt: Scalars['Localized'];
  createdBy: Identity;
  createdDate?: Maybe<Scalars['String']>;
  depositFrequency?: Maybe<Frequency>;
  id: Scalars['ID'];
  interest?: Maybe<Scalars['Float']>;
  isMandatorySaving?: Maybe<Scalars['Boolean']>;
  minimumBalance?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  nature: NatureOfDepositProduct;
  objState: ObjState;
  productCode: Scalars['String'];
  productName: Scalars['String'];
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductConnection = {
  edges: Array<DepositProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type DepositProductCriteria = {
  cooperativeType?: Maybe<Array<Maybe<Scalars['String']>>>;
  cooperativeUnion?: Maybe<Array<Maybe<Scalars['String']>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['String']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['String']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionType?: Maybe<Array<Maybe<Scalars['String']>>>;
  maritalStatus?: Maybe<Array<Maybe<Scalars['String']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DepositProductCriteriaResult = {
  data?: Maybe<DepositProductCriteria>;
  error?: Maybe<QueryError>;
};

export type DepositProductEdge = {
  cursor: Scalars['Cursor'];
  node: DepositProduct;
};

export type DepositProductFormStateData = {
  accountCloseCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  accountType?: Maybe<DefaultAccountType>;
  allowLoan?: Maybe<Scalars['Boolean']>;
  alternativeChannelCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  alternativeChannels?: Maybe<Scalars['Boolean']>;
  atmCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  autoOpen?: Maybe<Scalars['Boolean']>;
  balanceLimit?: Maybe<AmountLimitFormState>;
  chequeCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  chequeIssue?: Maybe<Scalars['Boolean']>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  depositAmount?: Maybe<AmountLimitFormState>;
  depositFrequency?: Maybe<Frequency>;
  description?: Maybe<Scalars['String']>;
  dormantSetup?: Maybe<Array<Maybe<DormantSetupFormState>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  fixedDepositAmountLimit?: Maybe<AmountLimitFormState>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id?: Maybe<Scalars['ID']>;
  individualDocuments?: Maybe<Array<Maybe<IndividualRequiredDocument>>>;
  institutionDocuments?: Maybe<Array<Maybe<InstitutionRequiredDocument>>>;
  interest?: Maybe<InterestFormState>;
  isForMinors?: Maybe<Scalars['Boolean']>;
  isMandatorySaving?: Maybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isTenureApplicable?: Maybe<Scalars['Boolean']>;
  ladderRate?: Maybe<Scalars['Boolean']>;
  ladderRateData?: Maybe<Array<Maybe<LadderRateFormState>>>;
  ledgerMapping?: Maybe<LedgerMappingFormState>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxPostingFreqDifference?: Maybe<Scalars['Int']>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  nature?: Maybe<NatureOfDepositProduct>;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  noOfAccounts?: Maybe<Scalars['Int']>;
  noOfDormantAccounts?: Maybe<Scalars['Int']>;
  noOfInactiveAccounts?: Maybe<Scalars['Int']>;
  noOfMembers?: Maybe<Scalars['Int']>;
  noOftransactionAllowed?: Maybe<Scalars['Int']>;
  objState?: Maybe<ObjState>;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penalty?: Maybe<Scalars['Boolean']>;
  penaltyData?: Maybe<Penalty>;
  percentageOfDeposit?: Maybe<Scalars['Float']>;
  postingFrequency?: Maybe<DepositFrequency>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  productCode: ProductCodeFormState;
  productName?: Maybe<Scalars['String']>;
  productPremiumInterest?: Maybe<Scalars['Float']>;
  rebate?: Maybe<Scalars['Boolean']>;
  rebateData?: Maybe<Rebate>;
  savingCharges?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  serviceCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  specifyWithdrawRestriction?: Maybe<Scalars['String']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultiple?: Maybe<Scalars['Boolean']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  transactionAllowed?: Maybe<DepositFrequency>;
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: Maybe<Scalars['Boolean']>;
  withdrawAmountLimit?: Maybe<AmountLimitFormState>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductFormStateResult = {
  data?: Maybe<DepositProductFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositProductInactiveData = {
  id: Scalars['ID'];
  remarks: Scalars['String'];
};

export type DepositProductInactiveResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositProductSettingsQuery>;
  recordId: Scalars['ID'];
};

export type DepositProductInput = {
  accountCloseCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  accountType?: InputMaybe<DefaultAccountType>;
  allowLoan?: InputMaybe<Scalars['Boolean']>;
  alternativeChannelCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  alternativeChannels?: InputMaybe<Scalars['Boolean']>;
  atmCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  atmFacility?: InputMaybe<Scalars['Boolean']>;
  autoOpen?: InputMaybe<Scalars['Boolean']>;
  balanceLimit?: InputMaybe<AmountLimit>;
  chequeCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  chequeIssue?: InputMaybe<Scalars['Boolean']>;
  cooperativeType?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  criteria?: InputMaybe<Array<InputMaybe<CriteriaSection>>>;
  depositAmount?: InputMaybe<AmountLimit>;
  depositFrequency?: InputMaybe<Frequency>;
  description?: InputMaybe<Scalars['String']>;
  dormantSetup?: InputMaybe<Array<InputMaybe<DormantSetup>>>;
  educationQualification?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  ethnicity?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  fixedDepositAmountLimit?: InputMaybe<AmountLimit>;
  foreignEmployment?: InputMaybe<Scalars['Boolean']>;
  genderId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  individualDocuments?: InputMaybe<Array<InputMaybe<IndividualRequiredDocument>>>;
  institutionDocuments?: InputMaybe<Array<InputMaybe<InstitutionRequiredDocument>>>;
  interest?: InputMaybe<InterestRate>;
  isForMinors?: InputMaybe<Scalars['Boolean']>;
  isMandatorySaving?: InputMaybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: InputMaybe<Scalars['Boolean']>;
  isTenureApplicable?: InputMaybe<Scalars['Boolean']>;
  ladderRate?: InputMaybe<Scalars['Boolean']>;
  ladderRateData?: InputMaybe<Array<InputMaybe<LadderRate>>>;
  ledgerMapping?: InputMaybe<LedgerMapping>;
  maritalStatusId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  maxAge?: InputMaybe<Scalars['Int']>;
  maxPostingFreqDifference?: InputMaybe<Scalars['Int']>;
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  nature?: InputMaybe<NatureOfDepositProduct>;
  natureOFBusinessCoop?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  noOftransactionAllowed?: InputMaybe<Scalars['Int']>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  penalty?: InputMaybe<Scalars['Boolean']>;
  penaltyData?: InputMaybe<PenaltyTypeInput>;
  percentageOfDeposit?: InputMaybe<Scalars['Float']>;
  postingFrequency?: InputMaybe<DepositFrequency>;
  prematurePenalty?: InputMaybe<PrematurePenalty>;
  productCode?: InputMaybe<ProductCode>;
  productName?: InputMaybe<Scalars['String']>;
  productPremiumInterest?: InputMaybe<Scalars['Float']>;
  rebate?: InputMaybe<Scalars['Boolean']>;
  rebateData?: InputMaybe<RebateTypeInput>;
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  specifyWithdrawRestriction?: InputMaybe<Scalars['String']>;
  staffProduct?: InputMaybe<Scalars['Boolean']>;
  supportMultiple?: InputMaybe<Scalars['Boolean']>;
  tenureUnit?: InputMaybe<FrequencyTenure>;
  transactionAllowed?: InputMaybe<DepositFrequency>;
  typeOfMember?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: InputMaybe<Scalars['Boolean']>;
  withdrawAmountLimit?: InputMaybe<AmountLimit>;
  withdrawPenalty?: InputMaybe<WithdrawPenalty>;
  withdrawRestricted?: InputMaybe<Scalars['Boolean']>;
};

export type DepositProductList = {
  allowed?: Maybe<Array<Maybe<DepositProduct>>>;
  error?: Maybe<QueryError>;
  notAllowed?: Maybe<Array<Maybe<DepositProductListData>>>;
};

export type DepositProductListData = {
  data?: Maybe<DepositProduct>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DepositProductMinimal = {
  id: Scalars['ID'];
  productName: Scalars['String'];
};

export type DepositProductResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositProductSettingsQuery>;
  record?: Maybe<DepositProduct>;
  recordId: Scalars['ID'];
};

export type DepositProductSearchFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  nature?: InputMaybe<Scalars['String']>;
  objState?: InputMaybe<DepositProductStatus>;
  productCode?: InputMaybe<Scalars['String']>;
  productName?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export type DepositProductSettingsMutation = {
  activateProduct?: Maybe<ProductActivateResult>;
  add?: Maybe<DepositProductResult>;
  /** For Deposit Product and Loan Product, send account type respectively and use this common mutation to edit balance limit */
  editBalanceLimit?: Maybe<ProductActivateResult>;
  editChequeSettings?: Maybe<ProductActivateResult>;
  editProductInterest: InterestSetupMutationResult;
  makeInactive?: Maybe<DepositProductInactiveResult>;
  updateAccountPremium: ProductChargeMutationResult;
  updateCloseCharge: ProductChargeMutationResult;
  updateOpenCharge: ProductChargeMutationResult;
  updatePenaltyCharge: ProductChargeMutationResult;
  updatePrematurePenalty: ProductChargeMutationResult;
  updateProductInterest: InterestSetupMutationResult;
  updateProductTenure: ProductChargeMutationResult;
  updateRebate?: Maybe<ProductChargeMutationResult>;
  updateWithdrawPenalty?: Maybe<ProductChargeMutationResult>;
};

export type DepositProductSettingsMutationActivateProductArgs = {
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
  remarks: Scalars['String'];
};

export type DepositProductSettingsMutationAddArgs = {
  data?: InputMaybe<DepositProductInput>;
  edit?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
};

export type DepositProductSettingsMutationEditBalanceLimitArgs = {
  data: AmountLimit;
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
};

export type DepositProductSettingsMutationEditChequeSettingsArgs = {
  chequeCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  ischequeIssueAllowed: Scalars['Boolean'];
  productId: Scalars['ID'];
};

export type DepositProductSettingsMutationEditProductInterestArgs = {
  data: InterestRateSetupInput;
  id: Scalars['ID'];
  productId: Scalars['ID'];
};

export type DepositProductSettingsMutationMakeInactiveArgs = {
  data?: InputMaybe<DepositProductInactiveData>;
};

export type DepositProductSettingsMutationUpdateAccountPremiumArgs = {
  payload: AccountPremium;
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
};

export type DepositProductSettingsMutationUpdateCloseChargeArgs = {
  additionalData: ProductChargeAdditionalDataInput;
  id?: InputMaybe<Scalars['ID']>;
  payload: Array<ServiceType>;
  productId: Scalars['ID'];
};

export type DepositProductSettingsMutationUpdateOpenChargeArgs = {
  additionalData: ProductChargeAdditionalDataInput;
  id?: InputMaybe<Scalars['ID']>;
  payload: Array<ServiceType>;
  productId: Scalars['ID'];
};

export type DepositProductSettingsMutationUpdatePenaltyChargeArgs = {
  additionalData: ProductChargeAdditionalDataInput;
  id?: InputMaybe<Scalars['ID']>;
  payload: PenaltyTypeInput;
  productId: Scalars['ID'];
};

export type DepositProductSettingsMutationUpdatePrematurePenaltyArgs = {
  allowPenalty: Scalars['Boolean'];
  payload?: InputMaybe<PrematurePenalty>;
  productId: Scalars['ID'];
};

export type DepositProductSettingsMutationUpdateProductInterestArgs = {
  data: InterestRateSetupInput;
  productId: Scalars['ID'];
};

export type DepositProductSettingsMutationUpdateProductTenureArgs = {
  payload: TenureUpdateData;
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
};

export type DepositProductSettingsMutationUpdateRebateArgs = {
  isRebateAllowed: Scalars['Boolean'];
  payload?: InputMaybe<RebateTypeInput>;
  productId: Scalars['ID'];
};

export type DepositProductSettingsMutationUpdateWithdrawPenaltyArgs = {
  payload?: InputMaybe<WithdrawPenalty>;
  productId: Scalars['ID'];
};

export type DepositProductSettingsQuery = {
  depositProductDetail?: Maybe<DepositProductFormStateResult>;
  formState?: Maybe<DepositProductFormStateResult>;
  get?: Maybe<DepositProduct>;
  getAccountlist?: Maybe<DepositLoanAccountConnection>;
  getCloseCharge: ProductAccountOpenCloseQueryResult;
  getOpenCharge: ProductAccountOpenCloseQueryResult;
  getPenaltyCharge: ProductPenaltyQueryResult;
  getPenaltyRebateInfo?: Maybe<PenaltyRebateResult>;
  getProductCriteria?: Maybe<DepositProductCriteriaResult>;
  getProductInterestRate: InterestSetupQueryResult;
  getProductList?: Maybe<DepositProductList>;
  list?: Maybe<DepositProductConnection>;
  listCloseCharge: ProductAccountOpenCloseListQueryResult;
  listOpenCharge: ProductAccountOpenCloseListQueryResult;
  listPenaltyCharge: ProductPenaltyListQueryResult;
  listProductInterestRates: InterestSetupListResult;
};

export type DepositProductSettingsQueryDepositProductDetailArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetAccountlistArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositProductSettingsQueryGetCloseChargeArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetOpenChargeArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetPenaltyChargeArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetPenaltyRebateInfoArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryGetProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryGetProductInterestRateArgs = {
  id: Scalars['ID'];
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryGetProductListArgs = {
  memberId: Scalars['ID'];
};

export type DepositProductSettingsQueryListArgs = {
  filter?: InputMaybe<DepositProductSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositProductSettingsQueryListCloseChargeArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryListOpenChargeArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryListPenaltyChargeArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryListProductInterestRatesArgs = {
  productId: Scalars['ID'];
};

export const DepositProductStatus = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const;

export type DepositProductStatus = typeof DepositProductStatus[keyof typeof DepositProductStatus];
export type DepositRecord = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Localized']>;
  date?: Maybe<Scalars['Localized']>;
  depositedBy?: Maybe<DepositedBy>;
  depositedOther?: Maybe<Scalars['String']>;
  discount?: Maybe<Scalars['String']>;
  fine?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<DepositPaymentType>;
  rebate?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionID?: Maybe<Scalars['ID']>;
};

export type DepositReport = {
  ETDSReport: EtdsReportResult;
  accountClosingReport?: Maybe<AccountClosingReportResult>;
  accountOpeningReport?: Maybe<AccountOpeningReportResult>;
  closedSavingAccountReport?: Maybe<ClosedSavingAccountResult>;
  dormantAccountReport?: Maybe<DormantAccountReportResult>;
  fixedDepositReport?: Maybe<FixedDepositReportResult>;
  interestStatementReport: InterestPostingReportResult;
  interestTaxReport: InterestTaxReportResult;
  savingAccruedInterestReport: SavingAccruedInterestResult;
  savingProductBalanceReport: SavingProductBalanceResult;
  savingStatementReport?: Maybe<ReportResult>;
  suspiciousTransctionReport?: Maybe<SuspiciousTransactionReportResult>;
  thresholdTransactionReport: TtrReportResult;
};

export type DepositReportEtdsReportArgs = {
  data: EtdsReportFilter;
};

export type DepositReportAccountClosingReportArgs = {
  data?: InputMaybe<AccountClosingReportInput>;
};

export type DepositReportAccountOpeningReportArgs = {
  data?: InputMaybe<AccountOpeningReportInput>;
};

export type DepositReportClosedSavingAccountReportArgs = {
  data: ClosedSavingAccountInput;
};

export type DepositReportDormantAccountReportArgs = {
  data?: InputMaybe<DormantAccountReportInput>;
};

export type DepositReportFixedDepositReportArgs = {
  data?: InputMaybe<FixedDepositReportInput>;
};

export type DepositReportInterestStatementReportArgs = {
  data: InterestStatementFilter;
};

export type DepositReportInterestTaxReportArgs = {
  data: InterestTaxReportFilter;
};

export type DepositReportSavingAccruedInterestReportArgs = {
  data: AccruedInterestFilter;
};

export type DepositReportSavingProductBalanceReportArgs = {
  data: SavingProductBalanceFilter;
};

export type DepositReportSavingStatementReportArgs = {
  data: SavingStatementReportSettings;
};

export type DepositReportSuspiciousTransctionReportArgs = {
  data?: InputMaybe<SuspiciousTransactionReportInput>;
};

export type DepositReportThresholdTransactionReportArgs = {
  data: TtrReportFilter;
};

export type DepositResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<DepositRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type DepositSettingsMutation = {
  editOrganizationRate: InterestSetupMutationResult;
  iroSetup?: Maybe<DepositIroResult>;
  setOrganizationRate: InterestSetupMutationResult;
  tdsSetup?: Maybe<DepositTdsResult>;
};

export type DepositSettingsMutationEditOrganizationRateArgs = {
  data: InterestRateSetupInput;
  id: Scalars['ID'];
};

export type DepositSettingsMutationIroSetupArgs = {
  data?: InputMaybe<DepositIroInput>;
};

export type DepositSettingsMutationSetOrganizationRateArgs = {
  data: InterestRateSetupInput;
};

export type DepositSettingsMutationTdsSetupArgs = {
  data?: InputMaybe<DepositTdsInput>;
};

export type DepositSettingsQuery = {
  getCurrentOrganizationRate?: Maybe<Scalars['Float']>;
  getOrganizationRate: InterestSetupQueryResult;
  iroFormState?: Maybe<DepositIroFormStateResult>;
  listOrganizationRate: InterestSetupListResult;
  tdsFormState?: Maybe<DepositTdsFormStateResult>;
};

export type DepositSettingsQueryGetOrganizationRateArgs = {
  id: Scalars['ID'];
};

export type DepositTds = {
  coopUnion?: Maybe<Scalars['Float']>;
  cooperative?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  individual?: Maybe<Scalars['Float']>;
  institution?: Maybe<Scalars['Float']>;
};

export type DepositTdsFormStateData = {
  coopUnion?: Maybe<Scalars['Float']>;
  cooperative?: Maybe<Scalars['Float']>;
  individual?: Maybe<Scalars['Float']>;
  institution?: Maybe<Scalars['Float']>;
};

export type DepositTdsFormStateResult = {
  data?: Maybe<DepositTdsFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositTdsInput = {
  coopUnion?: InputMaybe<Scalars['Float']>;
  cooperative?: InputMaybe<Scalars['Float']>;
  individual?: InputMaybe<Scalars['Float']>;
  institution?: InputMaybe<Scalars['Float']>;
};

export type DepositTdsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositSettingsQuery>;
  record?: Maybe<DepositTds>;
  recordId: Scalars['ID'];
};

export type DepositTransactionView = {
  accountId?: Maybe<Scalars['ID']>;
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  depositedBy?: Maybe<DepositedBy>;
  depositedDate?: Maybe<Scalars['Localized']>;
  fine?: Maybe<Scalars['String']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  note?: Maybe<Scalars['String']>;
  paymentFile?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentMode?: Maybe<DepositPaymentType>;
  rebate?: Maybe<Scalars['String']>;
  sourceOfFund?: Maybe<Scalars['String']>;
  status?: Maybe<ObjState>;
  teller?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalDepositedAmount?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  txnUserName?: Maybe<Scalars['String']>;
  voucherId?: Maybe<Scalars['String']>;
};

export type DepositTransactionViewResult = {
  data?: Maybe<DepositTransactionView>;
  error?: Maybe<QueryError>;
};

export const DepositedBy = {
  Agent: 'AGENT',
  Other: 'OTHER',
  Self: 'SELF',
} as const;

export type DepositedBy = typeof DepositedBy[keyof typeof DepositedBy];
export type Designation = {
  description: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
};

export type DesignationResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['String'];
};

export type DirectorDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  email?: Maybe<Scalars['String']>;
  firmDetails?: Maybe<AffiliatedDirectorDetailsFormState>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isAffiliatedWithOtherFirms?: Maybe<Scalars['Boolean']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type District = {
  id: Scalars['Int'];
  municipalities: Array<Municipality>;
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export const DividendDistributionCondition = {
  Daily: 'DAILY',
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
} as const;

export type DividendDistributionCondition =
  typeof DividendDistributionCondition[keyof typeof DividendDistributionCondition];
export type DividendRate = {
  monthly?: Maybe<MonthlyDividendRate>;
  quarterly?: Maybe<QuarterlyDividendRate>;
};

export type DividendRateInput = {
  monthly?: InputMaybe<MonthlyDividendRateInput>;
  quarterly?: InputMaybe<QuarterlyDividendRateInput>;
};

export const DividendTransferTreatment = {
  AccountTransfer: 'ACCOUNT_TRANSFER',
  BookPayable: 'BOOK_PAYABLE',
  ShareAndAccount: 'SHARE_AND_ACCOUNT',
} as const;

export type DividendTransferTreatment =
  typeof DividendTransferTreatment[keyof typeof DividendTransferTreatment];
export type Document = {
  photo?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
};

export type DocumentInfo = {
  id: Scalars['String'];
  url: Scalars['String'];
};

export type DocumentInsertInput = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
};

export type DocumentMutation = {
  KYMUpsert: DocumentMutationResult;
  Subscription: SubscriptionMutation;
};

export type DocumentMutationKymUpsertArgs = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
  memberId: Scalars['String'];
};

export type DocumentMutationSubscriptionArgs = {
  subscriptionId: Scalars['String'];
};

export type DocumentMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UploadedDocument>;
  recordId?: Maybe<Scalars['ID']>;
};

export type DocumentQuery = {
  listKYMDocuments: DocumentResult;
  listSubscriptionDocuments: DocumentResult;
};

export type DocumentQueryListKymDocumentsArgs = {
  memberId: Scalars['String'];
};

export type DocumentQueryListSubscriptionDocumentsArgs = {
  subscriptionId: Scalars['String'];
};

export type DocumentResult = {
  data?: Maybe<Array<Maybe<UploadedDocument>>>;
  error?: Maybe<QueryError>;
};

export type DormancyData = {
  blockLoanTransaction?: Maybe<Scalars['Boolean']>;
  blockSavingTransaction?: Maybe<Scalars['Boolean']>;
  blockShareTransaction?: Maybe<Scalars['Boolean']>;
};

export type DormancyResult = {
  data?: Maybe<DormancyData>;
  error?: Maybe<QueryError>;
};

export type DormantAccountReport = {
  accountName?: Maybe<Scalars['String']>;
  accountNo?: Maybe<Scalars['String']>;
  accountOpenDate?: Maybe<Scalars['Localized']>;
  balance?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberID?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['Localized']>;
  memberRegistrationDate?: Maybe<Scalars['Localized']>;
  mobileNo?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  serviceCenter?: Maybe<Scalars['String']>;
};

export type DormantAccountReportInput = {
  accountType?: InputMaybe<SavingTransactionType>;
  branchId?: InputMaybe<Array<Scalars['String']>>;
  period: LocalizedDateFilter;
};

export type DormantAccountReportResult = {
  data?: Maybe<Array<Maybe<DormantAccountReport>>>;
  error?: Maybe<QueryError>;
};

export const DormantCondition = {
  Deposit: 'DEPOSIT',
  Withdraw: 'WITHDRAW',
} as const;

export type DormantCondition = typeof DormantCondition[keyof typeof DormantCondition];
export const DormantDuration = {
  Day: 'DAY',
  HalfYear: 'HALF_YEAR',
  Month: 'MONTH',
  Quarter: 'QUARTER',
  TwoYear: 'TWO_YEAR',
  Year: 'YEAR',
} as const;

export type DormantDuration = typeof DormantDuration[keyof typeof DormantDuration];
export type DormantSetup = {
  condition: DormantCondition;
  duration: DormantDuration;
};

export type DormantSetupFormState = {
  condition?: Maybe<DormantCondition>;
  duration?: Maybe<DormantDuration>;
};

export type DosariReportData = {
  designation?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  loanAgingStatementData?: Maybe<LoanAgingStatementData>;
  phoneNumber?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type DosariReportFilter = {
  installmentDate?: InputMaybe<Scalars['Localized']>;
  product?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type DosariReportInput = {
  committeeId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<DosariReportFilter>;
  period: LocalizedDateFilter;
};

export type DosariReportResult = {
  data?: Maybe<Array<Maybe<DosariReportData>>>;
  error?: Maybe<QueryError>;
  summary?: Maybe<LoanAgingStatementSummary>;
};

export type Dues = {
  dueInstallments?: Maybe<Scalars['Int']>;
  fine?: Maybe<Scalars['String']>;
  totalDue?: Maybe<Scalars['String']>;
};

export type EodAction = {
  dormantCheck: Scalars['Boolean'];
  loanRepayment: Scalars['Boolean'];
  maturityCheck: Scalars['Boolean'];
};

export type EodActionInput = {
  dormantCheck: Scalars['Boolean'];
  loanRepayment: Scalars['Boolean'];
  maturityCheck: Scalars['Boolean'];
};

export type EodDate = {
  hasErrors: Scalars['Boolean'];
  headOfficeReady?: Maybe<Scalars['Boolean']>;
  isInitialized: Scalars['Boolean'];
  isYearEnd: Scalars['Boolean'];
  recentHistory?: Maybe<Array<Maybe<EodHistory>>>;
  value: Scalars['Localized'];
};

export type EodDetailsFilter = {
  eodDate?: InputMaybe<Scalars['String']>;
  jobType?: InputMaybe<EodJob>;
  success?: InputMaybe<Scalars['Boolean']>;
};

export type EodErrors = {
  cashInHand?: Maybe<Array<Maybe<Scalars['String']>>>;
  cashInVault?: Maybe<Array<Maybe<Scalars['String']>>>;
  dormancy?: Maybe<Array<Maybe<Scalars['String']>>>;
  interestBooking?: Maybe<Array<Maybe<Scalars['String']>>>;
  interestPosting?: Maybe<Array<Maybe<Scalars['String']>>>;
  loanAccountMaturity?: Maybe<Array<Maybe<Scalars['String']>>>;
  loanInterestBooking?: Maybe<Array<Maybe<Scalars['String']>>>;
  loanRepayment?: Maybe<Array<Maybe<Scalars['String']>>>;
  maturity?: Maybe<Array<Maybe<Scalars['String']>>>;
  readiness?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type EodException = {
  branchReadiness: Scalars['Boolean'];
  cashInHand: Scalars['Boolean'];
  dormantCheck: Scalars['Boolean'];
  loanRepayment: Scalars['Boolean'];
  maturityCheck: Scalars['Boolean'];
};

export type EodExceptionInput = {
  branchReadiness: Scalars['Boolean'];
  cashInHand: Scalars['Boolean'];
  dormantCheck: Scalars['Boolean'];
  loanRepayment: Scalars['Boolean'];
  maturityCheck: Scalars['Boolean'];
};

export type EodHistory = {
  completedBy?: Maybe<Scalars['String']>;
  completedTime?: Maybe<Scalars['Time']>;
  eodDate: Scalars['String'];
  errorCount?: Maybe<Scalars['Int']>;
  status: EodState;
};

export const EodJob = {
  AccountDormancy: 'ACCOUNT_DORMANCY',
  InterestPosting: 'INTEREST_POSTING',
  LoanAccountMaturity: 'LOAN_ACCOUNT_MATURITY',
  LoanInterestBooking: 'LOAN_INTEREST_BOOKING',
  LoanRepayment: 'LOAN_REPAYMENT',
  SavingAccountMaturity: 'SAVING_ACCOUNT_MATURITY',
  SavingInterestBooking: 'SAVING_INTEREST_BOOKING',
} as const;

export type EodJob = typeof EodJob[keyof typeof EodJob];
export const EodOption = {
  CompleteWithError: 'COMPLETE_WITH_ERROR',
  Reinitiate: 'REINITIATE',
} as const;

export type EodOption = typeof EodOption[keyof typeof EodOption];
export type EodQuery = {
  details?: Maybe<EndOfDayDetailsConnection>;
  history?: Maybe<Array<Maybe<EodHistory>>>;
};

export type EodQueryDetailsArgs = {
  filter: EodDetailsFilter;
  pagination?: InputMaybe<Pagination>;
};

export type EodQueryHistoryArgs = {
  transactionDate?: InputMaybe<Scalars['Localized']>;
};

export type EodResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['ID']>;
};

export type EodSatusResult = {
  eodDate?: Maybe<Scalars['Localized']>;
  errors?: Maybe<EodErrors>;
  overAllStatus?: Maybe<EodState>;
  stage?: Maybe<EodStage>;
  states?: Maybe<EodStates>;
};

export const EodStage = {
  Main: 'MAIN',
  Post: 'POST',
  Pre: 'PRE',
} as const;

export type EodStage = typeof EodStage[keyof typeof EodStage];
export const EodState = {
  Completed: 'COMPLETED',
  CompletedWithErrors: 'COMPLETED_WITH_ERRORS',
  NotStarted: 'NOT_STARTED',
  Ongoing: 'ONGOING',
} as const;

export type EodState = typeof EodState[keyof typeof EodState];
export type EodStates = {
  cashInHand?: Maybe<EodState>;
  cashInVault?: Maybe<EodState>;
  currentBranchesReady?: Maybe<EodState>;
  dormancy?: Maybe<EodState>;
  headOfficeReady?: Maybe<Scalars['Boolean']>;
  interestBooking?: Maybe<EodState>;
  interestPosting?: Maybe<EodState>;
  loanAccountMaturity?: Maybe<EodState>;
  loanInterestBooking?: Maybe<EodState>;
  loanRepayment?: Maybe<EodState>;
  maturity?: Maybe<EodState>;
  transactionDate?: Maybe<EodState>;
};

export type EtdsReportEntry = {
  branchId?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  interest?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  panNo?: Maybe<Scalars['String']>;
  tax?: Maybe<Scalars['String']>;
  tdsType?: Maybe<Scalars['String']>;
};

export type EtdsReportFilter = {
  branchId: Array<Scalars['String']>;
  period: LocalizedDateFilter;
};

export type EtdsReportResult = {
  data?: Maybe<Array<Maybe<EtdsReportEntry>>>;
  error?: Maybe<QueryError>;
};

export type EachAppointmentLetterRecords = {
  data?: Maybe<AppointmentLetterRecord>;
  error?: Maybe<QueryError>;
};

export type EachEarningComponentRecords = {
  data?: Maybe<EarningComponentRecord>;
  error?: Maybe<QueryError>;
};

export type EachEmployeeExitRecords = {
  data: EmployeeExitRecord;
  error: QueryError;
};

export type EachEmployeeOnboardingRecord = {
  data: EmployeeOnboardingRecord;
  error: QueryError;
};

export type EachJobApplicationRecords = {
  data?: Maybe<JobApplicationRecord>;
  error?: Maybe<QueryError>;
};

export type EachJobOfferRecords = {
  data?: Maybe<JobOfferRecord>;
  error?: Maybe<QueryError>;
};

export type EachJobOpeningRecord = {
  data?: Maybe<JobOpeningRecord>;
  error?: Maybe<QueryError>;
};

export type EachStaffRecord = {
  data?: Maybe<StaffPlanRecord>;
  error?: Maybe<QueryError>;
};

export type EachTransferRecord = {
  branchArray?: Maybe<Array<Maybe<BranchTransferDetails>>>;
  departArray?: Maybe<Array<Maybe<DepartTransferDetails>>>;
  error?: Maybe<QueryError>;
};

export type EarningComponentInput = {
  abbr?: InputMaybe<Scalars['String']>;
  base_multiple?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  isTaxApplicable?: InputMaybe<Scalars['Boolean']>;
  makeThisActive?: InputMaybe<Scalars['Boolean']>;
  multiplier?: InputMaybe<Scalars['Float']>;
  name?: InputMaybe<Scalars['String']>;
  roundToNearestInteger?: InputMaybe<Scalars['Boolean']>;
};

export type EarningComponentListConnection = {
  edges?: Maybe<Array<Maybe<EarningComponentListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type EarningComponentListEdges = {
  cursor: Scalars['Cursor'];
  node: EarningComponentNode;
};

export type EarningComponentNode = {
  abbr?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<EarningComponentStatus>;
};

export type EarningComponentRecord = {
  abbr?: Maybe<Scalars['String']>;
  base_multiple?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  isTaxApplicable?: Maybe<Scalars['Boolean']>;
  makeThisActive?: Maybe<Scalars['Boolean']>;
  multiplier?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  roundToNearestInteger?: Maybe<Scalars['Boolean']>;
};

export const EarningComponentStatus = {
  Disabled: 'DISABLED',
  Enabled: 'ENABLED',
} as const;

export type EarningComponentStatus =
  typeof EarningComponentStatus[keyof typeof EarningComponentStatus];
export type EbankingRegistrationReportResult = {
  data?: Maybe<Array<Maybe<EbankingReportResult>>>;
  error?: Maybe<QueryError>;
};

export type EbankingReportFilter = {
  branchId?: InputMaybe<Scalars['ID']>;
  period: LocalizedDateFilter;
};

export type EbankingReportResult = {
  branchCode?: Maybe<Scalars['String']>;
  expDate?: Maybe<Scalars['Localized']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['String']>;
  mobileNo?: Maybe<Scalars['String']>;
  regDate?: Maybe<Scalars['Localized']>;
  registeredBy?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type EbankingTransaction = {
  accountId?: Maybe<Scalars['String']>;
  amount: Scalars['String'];
  balanceType?: Maybe<BalanceType>;
  countAll?: Maybe<Scalars['String']>;
  credit?: Maybe<Scalars['String']>;
  currentBalance: Scalars['String'];
  date: Scalars['Localized'];
  debit?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  month: Scalars['Localized'];
  name: Scalars['String'];
  transactionDirection: EbankingTransactionDirection;
  transactionId?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
};

export type EbankingTransactionConnection = {
  edges?: Maybe<Array<Maybe<EbankingTransactionEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  summary?: Maybe<TransactionListSummary>;
  totalCount?: Maybe<Scalars['Int']>;
};

export const EbankingTransactionCrOrDr = {
  Credit: 'CREDIT',
  Debit: 'DEBIT',
} as const;

export type EbankingTransactionCrOrDr =
  typeof EbankingTransactionCrOrDr[keyof typeof EbankingTransactionCrOrDr];
export const EbankingTransactionDirection = {
  Incoming: 'INCOMING',
  Outgoing: 'OUTGOING',
} as const;

export type EbankingTransactionDirection =
  typeof EbankingTransactionDirection[keyof typeof EbankingTransactionDirection];
export type EbankingTransactionEdge = {
  cursor: Scalars['String'];
  node: EbankingTransaction;
};

export type EbankingTransactionFilter = {
  accounts?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  date?: InputMaybe<DateFilter>;
  transactionDirection?: InputMaybe<EbankingTransactionCrOrDr>;
};

export type EmployeeExitConnection = {
  edges?: Maybe<Array<Maybe<EmployeeExits>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type EmployeeExitInput = {
  checklists?: InputMaybe<Array<InputMaybe<FieldsInput>>>;
  exitDate?: InputMaybe<Scalars['Localized']>;
  exitStatus?: InputMaybe<ExitStatus>;
  futureIntentions?: InputMaybe<Scalars['String']>;
  interviewer?: InputMaybe<Scalars['ID']>;
  others?: InputMaybe<Scalars['String']>;
  overallExp?: InputMaybe<Scalars['String']>;
  separationId?: InputMaybe<Scalars['ID']>;
  suggestions?: InputMaybe<Scalars['String']>;
};

export type EmployeeExitListed = {
  employeeId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['ID']>;
  interviewer?: Maybe<Scalars['String']>;
  lastModifiedDate?: Maybe<Scalars['Localized']>;
  separationDate?: Maybe<Scalars['Localized']>;
};

export type EmployeeExitRecord = {
  checklists?: Maybe<Array<Maybe<Fields>>>;
  exitDate?: Maybe<Scalars['Localized']>;
  exitStatus?: Maybe<ExitStatus>;
  futureIntentions?: Maybe<Scalars['String']>;
  interviewer?: Maybe<Scalars['ID']>;
  others?: Maybe<Scalars['String']>;
  overallExp?: Maybe<Scalars['String']>;
  separationId?: Maybe<Scalars['ID']>;
  suggestions?: Maybe<Scalars['String']>;
};

export type EmployeeExits = {
  cursor: Scalars['Cursor'];
  node: EmployeeExitListed;
};

export type EmployeeHealthInsurance = {
  healthInsuranceNumber: Scalars['String'];
  healthInsuranceProvider: Scalars['String'];
  id: Scalars['String'];
};

export type EmployeeHealthInsuranceResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['String'];
};

export type EmployeeInput = {
  age?: InputMaybe<Scalars['Int']>;
  appointmentLetter?: InputMaybe<Scalars['ID']>;
  dateOfBirth?: InputMaybe<Scalars['Localized']>;
  dateOfJoining?: InputMaybe<Scalars['Localized']>;
  departmentId?: InputMaybe<Scalars['String']>;
  designationId?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  educationDetails?: InputMaybe<Array<InputMaybe<HrEmployeeEducationDetail>>>;
  employeeLevelId?: InputMaybe<Scalars['String']>;
  employeeStatus?: InputMaybe<EmployeeStatus>;
  employmentType?: InputMaybe<EmployeeTypeEnum>;
  expenseApproverId?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<GenderInputType>;
  healthInsuranceNumberId?: InputMaybe<Scalars['String']>;
  healthInsuranceProviderId?: InputMaybe<Scalars['String']>;
  isTemporarySameAsPermanent?: InputMaybe<Scalars['Boolean']>;
  jobApplicationId?: InputMaybe<Scalars['ID']>;
  jobOffer?: InputMaybe<Scalars['ID']>;
  lastName?: InputMaybe<Scalars['String']>;
  leaveApproverId?: InputMaybe<Scalars['String']>;
  maritalStatus?: InputMaybe<MaritalStatusInputType>;
  middleName?: InputMaybe<Scalars['String']>;
  panNumber?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  personalEmailAddress?: InputMaybe<Scalars['String']>;
  personalPhoneNumber?: InputMaybe<Scalars['String']>;
  providentFundAccount?: InputMaybe<Scalars['String']>;
  reportsToId?: InputMaybe<Scalars['String']>;
  salaryPaymentMode?: InputMaybe<PaymentMode>;
  salaryStructureAssignment?: InputMaybe<Scalars['String']>;
  serviceCenter?: InputMaybe<Scalars['String']>;
  sourceOfHire?: InputMaybe<SourceOfHire>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  workEmailAddress?: InputMaybe<Scalars['String']>;
  workExperience?: InputMaybe<Array<InputMaybe<HrEmployeeWorkExperience>>>;
  workPhoneNumber?: InputMaybe<Scalars['String']>;
};

export type EmployeeLeavePolicyNode = {
  assignedLevel: Scalars['String'];
  description: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
};

export type EmployeeLeaveRecord = {
  description?: Maybe<Scalars['String']>;
  effectiveFrom?: Maybe<Scalars['Localized']>;
  employeeLevelId?: Maybe<Scalars['String']>;
  leavePolicyDetails?: Maybe<Array<Maybe<LeavePolicyGetDetails>>>;
  name?: Maybe<Scalars['String']>;
};

export type EmployeeLeaveType = {
  approver?: Maybe<Scalars['String']>;
  employeeId: Scalars['String'];
  employeeName: Scalars['String'];
  id: Scalars['String'];
  leaveFrom: Scalars['Localized'];
  leaveTo: Scalars['Localized'];
  leaveType: Scalars['String'];
  reason: Scalars['String'];
  status?: Maybe<Scalars['String']>;
};

export type EmployeeLeaveTypeGet = {
  employeeId: Scalars['String'];
  id: Scalars['String'];
  leaveFrom: Scalars['Localized'];
  leaveNote?: Maybe<Scalars['String']>;
  leaveTo: Scalars['Localized'];
  leaveTypeId: Scalars['String'];
  status?: Maybe<Scalars['String']>;
};

export type EmployeeLevel = {
  description: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
};

export type EmployeeLevelResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['String'];
};

export type EmployeeListType = {
  employeeAddress?: Maybe<Address>;
  employeeContact?: Maybe<Scalars['String']>;
  employeeDateOfJoining?: Maybe<Scalars['Localized']>;
  employeeDepartment?: Maybe<Scalars['String']>;
  employeeEmail?: Maybe<Scalars['String']>;
  employeeName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type EmployeeOnboardingConnection = {
  edges?: Maybe<Array<Maybe<EmployeeOnboardings>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type EmployeeOnboardingInput = {
  activity_details?: InputMaybe<Array<InputMaybe<ActivityInput>>>;
  applicantId?: InputMaybe<Scalars['ID']>;
  dateOfJoining?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['ID']>;
  onboarding_status?: InputMaybe<OnboardingStatus>;
  serviceCenter?: InputMaybe<Scalars['String']>;
};

export type EmployeeOnboardingListed = {
  activity?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  onboarding_status?: Maybe<OnboardingStatus>;
};

export type EmployeeOnboardingRecord = {
  activity_details?: Maybe<Array<Maybe<Activity>>>;
  applicantId?: Maybe<Scalars['ID']>;
  dateOfJoining?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['ID']>;
  onboardingId?: Maybe<Scalars['ID']>;
  onboarding_status?: Maybe<OnboardingStatus>;
  serviceCenter?: Maybe<Scalars['String']>;
};

export type EmployeeOnboardings = {
  cursor: Scalars['Cursor'];
  node: EmployeeOnboardingListed;
};

export type EmployeePromotionInput = {
  date?: InputMaybe<Scalars['Localized']>;
  employeeId: Scalars['String'];
  fromThis?: InputMaybe<Scalars['String']>;
  promotionType: PromotionType;
  toThis: Scalars['String'];
};

export type EmployeePromotionNode = {
  employeeId: Scalars['String'];
  employeeName: Scalars['String'];
  id: Scalars['String'];
  newPromotion: Scalars['String'];
  promotionDate: Scalars['Localized'];
  promotionType: Scalars['String'];
};

export type EmployeePromotionOutput = {
  error?: Maybe<MutationError>;
  recordId: Scalars['String'];
};

export type EmployeeReport = {
  userReport?: Maybe<UserReportResult>;
};

export type EmployeeReportUserReportArgs = {
  data?: InputMaybe<UserReportFilter>;
};

export type EmployeeResultResponseType = {
  age?: Maybe<Scalars['Int']>;
  appointmentLetter?: Maybe<Scalars['ID']>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  dateOfJoining?: Maybe<Scalars['Localized']>;
  departmentId?: Maybe<Scalars['String']>;
  designationId?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  educationDetails?: Maybe<Array<Maybe<HrEmployeeEducationDetailType>>>;
  employeeLevelId?: Maybe<Scalars['String']>;
  employeeStatus?: Maybe<EmployeeStatus>;
  employmentType?: Maybe<EmployeeTypeEnum>;
  expenseApproverId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<GenderType>;
  healthInsuranceNumberId?: Maybe<Scalars['String']>;
  healthInsuranceProviderId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isTemporarySameAsPermanent?: Maybe<Scalars['Boolean']>;
  jobApplicationId?: Maybe<Scalars['ID']>;
  jobOffer?: Maybe<Scalars['ID']>;
  lastName?: Maybe<Scalars['String']>;
  leaveApproverId?: Maybe<Scalars['String']>;
  maritalStatus?: Maybe<MaritalStatusType>;
  middleName?: Maybe<Scalars['String']>;
  panNumber?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  personalEmailAddress?: Maybe<Scalars['String']>;
  personalPhoneNumber?: Maybe<Scalars['String']>;
  providentFundAccount?: Maybe<Scalars['String']>;
  reportsToId?: Maybe<Scalars['String']>;
  salaryPaymentMode?: Maybe<PaymentMode>;
  salaryStructureAssignment?: Maybe<Scalars['String']>;
  serviceCenter?: Maybe<Scalars['String']>;
  sourceOfHire?: Maybe<SourceOfHire>;
  temporaryAddress?: Maybe<KymAddress>;
  workEmailAddress?: Maybe<Scalars['String']>;
  workExperience?: Maybe<Array<Maybe<HrEmployeeWorkExperienceType>>>;
  workPhoneNumber?: Maybe<Scalars['String']>;
};

export type EmployeeReturnResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type EmployeeSeparationInput = {
  date?: InputMaybe<Scalars['Localized']>;
  document?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  employeeId: Scalars['String'];
  separationStatus: SeparationStatusEnum;
  separationType: SeparationTypeEnum;
};

export type EmployeeSeparationNode = {
  designation: Scalars['String'];
  employeeId: Scalars['String'];
  employeeName: Scalars['String'];
  id: Scalars['String'];
  resignationLetterDate: Scalars['Localized'];
};

export type EmployeeSeparationOutput = {
  error?: Maybe<MutationError>;
  recordId: Scalars['String'];
};

export const EmployeeStatus = {
  Active: 'ACTIVE',
  Deceased: 'DECEASED',
  Inactive: 'INACTIVE',
  NoticePeriod: 'NOTICE_PERIOD',
  Probation: 'PROBATION',
  Resigned: 'RESIGNED',
  Terminated: 'TERMINATED',
} as const;

export type EmployeeStatus = typeof EmployeeStatus[keyof typeof EmployeeStatus];
export type EmployeeTransferConnection = {
  edges?: Maybe<Array<Maybe<EmployeeTransfers>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type EmployeeTransferInput = {
  destDepServId?: InputMaybe<Scalars['ID']>;
  employeeId?: InputMaybe<Scalars['ID']>;
  transferDate?: InputMaybe<Scalars['Localized']>;
  transferType?: InputMaybe<EmployeeTransferType>;
};

export type EmployeeTransferListed = {
  employeeId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  transferDate?: Maybe<Scalars['Localized']>;
  transferType?: Maybe<EmployeeTransferType>;
};

export type EmployeeTransferRecord = {
  destDepServId?: Maybe<Scalars['ID']>;
  employeeId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['ID']>;
  prevDepServId?: Maybe<Scalars['ID']>;
  transferDate?: Maybe<Scalars['Localized']>;
  transferType?: Maybe<EmployeeTransferType>;
};

export const EmployeeTransferType = {
  Department: 'DEPARTMENT',
  ServiceCenter: 'SERVICE_CENTER',
} as const;

export type EmployeeTransferType = typeof EmployeeTransferType[keyof typeof EmployeeTransferType];
export type EmployeeTransfers = {
  cursor: Scalars['Cursor'];
  node: EmployeeTransferListed;
};

export type EmployeeType = {
  description: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
};

export const EmployeeTypeEnum = {
  Contract: 'CONTRACT',
  Permanent: 'PERMANENT',
  Temporary: 'TEMPORARY',
  Trainee: 'TRAINEE',
} as const;

export type EmployeeTypeEnum = typeof EmployeeTypeEnum[keyof typeof EmployeeTypeEnum];
export type EmployeeTypeResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type EmployteeResultWithError = {
  error?: Maybe<QueryError>;
  record?: Maybe<EmployeeResultResponseType>;
};

export type EndOfDayDetail = {
  accountNumber: Scalars['String'];
  id: Scalars['String'];
  jobType: EodJob;
  narration: Scalars['String'];
  payload?: Maybe<Scalars['Map']>;
  success: Scalars['Boolean'];
};

export type EndOfDayDetailsConnection = {
  edges?: Maybe<Array<Maybe<EndOfDayDetailsEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type EndOfDayDetailsEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<EndOfDayDetail>;
};

export type Example = {
  age: Scalars['Int'];
  enrolledAt: Scalars['Time'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ExampleInput = {
  age?: InputMaybe<Scalars['Int']>;
  enrolledAt?: InputMaybe<Scalars['Time']>;
  name: Scalars['String'];
};

export type ExampleMutation = {
  level1: Level1;
};

export type ExampleQuery = {
  localization: LocalizationExample;
  testDb: TestDbResult;
};

export type ExceptionReport = {
  loanBalanceReport: LoanBalanceReportResult;
  savingsBalanceReport: SavingsBalanceReportResult;
  shareBalanceReport: ShareBalanceReportResult;
};

export type ExceptionReportLoanBalanceReportArgs = {
  data: LoanBalanceFilterData;
};

export type ExceptionReportSavingsBalanceReportArgs = {
  data: SavingsBalanceFilterData;
};

export type ExceptionReportShareBalanceReportArgs = {
  data?: InputMaybe<ShareBalanceReportFilter>;
};

export const ExitStatus = {
  Active: 'ACTIVE',
  Exited: 'EXITED',
  Initiated: 'INITIATED',
  OnNoticePeriod: 'ON_NOTICE_PERIOD',
} as const;

export type ExitStatus = typeof ExitStatus[keyof typeof ExitStatus];
export type ExpenseLedgerTransfer = {
  accountId?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['String']>;
  tax?: InputMaybe<Scalars['String']>;
  taxAmount?: InputMaybe<Scalars['String']>;
};

export const ExpiryStatusFilter = {
  All: 'ALL',
  Expired: 'EXPIRED',
  NotExpired: 'NOT_EXPIRED',
} as const;

export type ExpiryStatusFilter = typeof ExpiryStatusFilter[keyof typeof ExpiryStatusFilter];
export type ExternalLoanApplication = {
  amount?: Maybe<Scalars['String']>;
  appliedDate?: Maybe<Scalars['Localized']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  loanName?: Maybe<Scalars['String']>;
  loanType?: Maybe<ExternalLoanType>;
  organizationId?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
};

export type ExternalLoanApplicationConnection = {
  edges?: Maybe<Array<Maybe<ExternalLoanApplicationEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ExternalLoanApplicationEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<ExternalLoanApplication>;
};

export type ExternalLoanApplicationFormState = {
  appliedAmount?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  collateral?: Maybe<Array<Maybe<ExternalLoanCollateral>>>;
  disbursedAmount?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  fixDeposit?: Maybe<Scalars['String']>;
  installmentFrequency?: Maybe<InstallmentFrequency>;
  installmentType?: Maybe<LoanRepaymentScheme>;
  insurance?: Maybe<Scalars['Boolean']>;
  insuranceCompany?: Maybe<Scalars['String']>;
  insurancePremiumAmount?: Maybe<Scalars['String']>;
  insuranceStartDate?: Maybe<Scalars['Localized']>;
  insuranceValidUpto?: Maybe<Scalars['Localized']>;
  interestRate?: Maybe<Scalars['Float']>;
  loanAccountNumber?: Maybe<Scalars['String']>;
  loanAppliedDate?: Maybe<Scalars['Localized']>;
  loanApprovedDate?: Maybe<Scalars['Localized']>;
  loanCharges?: Maybe<Array<Maybe<ExternalLoanCharge>>>;
  loanName?: Maybe<Scalars['String']>;
  loanType?: Maybe<ExternalLoanType>;
  maturityDate?: Maybe<Scalars['Localized']>;
  mortageType?: Maybe<MortageType>;
  nameOfRepresentative?: Maybe<Scalars['String']>;
  organizationId?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  repaymentStartDate?: Maybe<Scalars['Localized']>;
  sanctionedAmount?: Maybe<Scalars['String']>;
  tenure?: Maybe<Scalars['Int']>;
  tenureUnit?: Maybe<FrequencyTenure>;
};

export type ExternalLoanApplicationFormstateResult = {
  data?: Maybe<ExternalLoanApplicationFormState>;
  error?: Maybe<QueryError>;
};

export type ExternalLoanApplicationInput = {
  appliedAmount?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  collateral?: InputMaybe<Array<InputMaybe<ExternalLoanCollateralInput>>>;
  disbursedAmount?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  fixDeposit?: InputMaybe<Scalars['String']>;
  installmentFrequency?: InputMaybe<InstallmentFrequency>;
  installmentType?: InputMaybe<LoanRepaymentScheme>;
  insurance?: InputMaybe<Scalars['Boolean']>;
  insuranceCompany?: InputMaybe<Scalars['String']>;
  insurancePremiumAmount?: InputMaybe<Scalars['String']>;
  insuranceStartDate?: InputMaybe<Scalars['Localized']>;
  insuranceValidUpto?: InputMaybe<Scalars['Localized']>;
  interestRate?: InputMaybe<Scalars['Float']>;
  loanAccountNumber?: InputMaybe<Scalars['String']>;
  loanAppliedDate?: InputMaybe<Scalars['Localized']>;
  loanApprovedDate?: InputMaybe<Scalars['Localized']>;
  loanCharges?: InputMaybe<Array<InputMaybe<ExternalLoanChargeInput>>>;
  loanName?: InputMaybe<Scalars['String']>;
  loanType?: InputMaybe<ExternalLoanType>;
  maturityDate?: InputMaybe<Scalars['Localized']>;
  mortageType?: InputMaybe<MortageType>;
  nameOfRepresentative?: InputMaybe<Scalars['String']>;
  organizationId?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['String']>;
  repaymentStartDate?: InputMaybe<Scalars['Localized']>;
  sanctionedAmount?: InputMaybe<Scalars['String']>;
  tenure?: InputMaybe<Scalars['Int']>;
  tenureUnit?: InputMaybe<FrequencyTenure>;
};

export type ExternalLoanApplicationMutation = {
  new?: Maybe<ExternalLoanApplicationResult>;
};

export type ExternalLoanApplicationMutationNewArgs = {
  data?: InputMaybe<ExternalLoanApplicationInput>;
  id?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanApplicationQuery = {
  formState: ExternalLoanApplicationFormstateResult;
  list?: Maybe<ExternalLoanApplicationConnection>;
};

export type ExternalLoanApplicationQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type ExternalLoanApplicationQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ExternalLoanApplicationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ExternalLoanApplicationQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type ExternalLoanCharge = {
  serviceCharge?: Maybe<Scalars['String']>;
  serviceId?: Maybe<Scalars['String']>;
  serviceName?: Maybe<Scalars['String']>;
};

export type ExternalLoanChargeInput = {
  serviceCharge?: InputMaybe<Scalars['String']>;
  serviceId?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanCollateral = {
  details?: Maybe<Scalars['String']>;
  typeOfCollateral?: Maybe<Scalars['String']>;
  valuationAmount?: Maybe<Scalars['String']>;
};

export type ExternalLoanCollateralInput = {
  details?: InputMaybe<Scalars['String']>;
  typeOfCollateral?: InputMaybe<Scalars['String']>;
  valuationAmount?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanMutation = {
  loan?: Maybe<ExternalLoanApplicationMutation>;
  payment?: Maybe<ExternalLoanPaymentMutation>;
};

export type ExternalLoanPayment = {
  amount?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDate?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  loanId?: Maybe<Scalars['String']>;
  loanName?: Maybe<Scalars['String']>;
};

export type ExternalLoanPaymentConnection = {
  edges?: Maybe<Array<Maybe<ExternalLoanPaymentEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ExternalLoanPaymentEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<ExternalLoanPayment>;
};

export type ExternalLoanPaymentInput = {
  amountPaid?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['Localized']>;
  fine?: InputMaybe<Scalars['String']>;
  interest?: InputMaybe<Scalars['String']>;
  loanId?: InputMaybe<Scalars['String']>;
  otherCharge?: InputMaybe<Scalars['String']>;
  principle?: InputMaybe<Scalars['String']>;
  rebate?: InputMaybe<Scalars['String']>;
};

export type ExternalLoanPaymentMutation = {
  new?: Maybe<ExternalLoanPaymentResult>;
};

export type ExternalLoanPaymentMutationNewArgs = {
  data?: InputMaybe<ExternalLoanPaymentInput>;
};

export type ExternalLoanPaymentQuery = {
  list?: Maybe<ExternalLoanPaymentConnection>;
};

export type ExternalLoanPaymentQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ExternalLoanPaymentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ExternalLoanPaymentQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type ExternalLoanQuery = {
  loan?: Maybe<ExternalLoanApplicationQuery>;
  payment?: Maybe<ExternalLoanPaymentQuery>;
};

export type ExternalLoanReportData = {
  date?: Maybe<Scalars['Localized']>;
  finePaid?: Maybe<Scalars['String']>;
  installmentFrequency?: Maybe<InstallmentFrequency>;
  installmentType?: Maybe<LoanRepaymentScheme>;
  interestPaidAmount?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['Float']>;
  loanAmount?: Maybe<Scalars['String']>;
  loanApprovedDate?: Maybe<Scalars['Localized']>;
  loanClosedDate?: Maybe<Scalars['Localized']>;
  loanId?: Maybe<Scalars['ID']>;
  loanNumber?: Maybe<Scalars['String']>;
  maturityDate?: Maybe<Scalars['Localized']>;
  mortgage?: Maybe<MortageType>;
  organizationBranch?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
  outstandingLoanAmount?: Maybe<Scalars['String']>;
  principalPaidAmount?: Maybe<Scalars['String']>;
  rebate?: Maybe<Scalars['String']>;
  relatedBranch?: Maybe<Scalars['String']>;
  remainingTenure?: Maybe<Scalars['Int']>;
  tenure?: Maybe<Scalars['Int']>;
  totalPaid?: Maybe<Scalars['String']>;
};

export type ExternalLoanReportFilter = {
  branchId: Array<Scalars['String']>;
  period: LocalizedDateFilter;
};

export type ExternalLoanReportResult = {
  data?: Maybe<Array<Maybe<ExternalLoanReportData>>>;
  error?: Maybe<QueryError>;
  summary?: Maybe<ExternalLoanReportSummary>;
};

export type ExternalLoanReportSummary = {
  totalFinePaid?: Maybe<Scalars['String']>;
  totalInterestAmount?: Maybe<Scalars['String']>;
  totalLoanAmount?: Maybe<Scalars['String']>;
  totalOfTotalPaid?: Maybe<Scalars['String']>;
  totalOutstandingLoanAmount?: Maybe<Scalars['String']>;
  totalPrincipalAmount?: Maybe<Scalars['String']>;
  totalRebate?: Maybe<Scalars['String']>;
};

export type ExternalLoanStatementReportData = {
  date?: Maybe<Scalars['Localized']>;
  discount?: Maybe<Scalars['String']>;
  paidFine?: Maybe<Scalars['String']>;
  paidInterest?: Maybe<Scalars['String']>;
  paidPrincipal?: Maybe<Scalars['String']>;
  particulars?: Maybe<Scalars['String']>;
  receivedPrincipal?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type ExternalLoanStatementReportFilter = {
  branchId: Array<Scalars['String']>;
  loanId: Scalars['String'];
  period: LocalizedDateFilter;
};

export type ExternalLoanStatementReportResult = {
  data?: Maybe<Array<Maybe<ExternalLoanStatementReportData>>>;
  error?: Maybe<QueryError>;
  summary?: Maybe<ExternalLoanStatementReportSummary>;
};

export type ExternalLoanStatementReportSummary = {
  discountTotal?: Maybe<Scalars['String']>;
  paidFineTotal?: Maybe<Scalars['String']>;
  paidInterestTotal?: Maybe<Scalars['String']>;
  paidPrincipalTotal?: Maybe<Scalars['String']>;
};

export const ExternalLoanType = {
  CooperativeSector: 'COOPERATIVE_SECTOR',
  OtherSector: 'OTHER_SECTOR',
} as const;

export type ExternalLoanType = typeof ExternalLoanType[keyof typeof ExternalLoanType];
export type FdInvestment = {
  certificateNo: Scalars['String'];
  fdAmount: Scalars['String'];
  maturityDate: Scalars['Localized'];
  nomineeBankACNo: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  rate: Scalars['Float'];
  startDate: Scalars['Localized'];
  type: FdInvestmentType;
};

export type FdInvestmentInput = {
  certificateNo: Scalars['String'];
  fdAmount: Scalars['String'];
  maturityDate: Scalars['Localized'];
  nomineeBankACNo: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  rate: Scalars['Float'];
  startDate: Scalars['Localized'];
  type: FdInvestmentType;
};

export type FdInvestmentReportData = {
  fdAccountName?: Maybe<Scalars['String']>;
  fdAmount?: Maybe<Scalars['String']>;
  fdOpeningDate?: Maybe<Scalars['Localized']>;
  fdType?: Maybe<FdInvestmentType>;
  interestRate?: Maybe<Scalars['Float']>;
  maturityDate?: Maybe<Scalars['Localized']>;
  nomineeBankAccountNo?: Maybe<Scalars['String']>;
  organizationBranch?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
  remainingTenure?: Maybe<Scalars['Int']>;
  tenure?: Maybe<Scalars['Int']>;
};

export type FdInvestmentReportFilter = {
  branchId: Array<Scalars['String']>;
  period: LocalizedDateFilter;
};

export type FdInvestmentReportResult = {
  data?: Maybe<Array<Maybe<FdInvestmentReportData>>>;
  error?: Maybe<QueryError>;
};

export type FdInvestmentStatementReportData = {
  chequeNo?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  interestReceived?: Maybe<Scalars['String']>;
  particulars?: Maybe<Scalars['String']>;
  tds?: Maybe<Scalars['String']>;
  transactionAmount?: Maybe<Scalars['String']>;
  transactionType?: Maybe<InvestmentTransactionType>;
};

export type FdInvestmentStatementReportFilter = {
  accountId: Scalars['String'];
  branchId: Array<Scalars['String']>;
  period: LocalizedDateFilter;
};

export type FdInvestmentStatementReportResult = {
  data?: Maybe<Array<Maybe<FdInvestmentStatementReportData>>>;
  error?: Maybe<QueryError>;
  summary?: Maybe<FdInvestmentStatementReportSummary>;
};

export type FdInvestmentStatementReportSummary = {
  fdAmountTotal?: Maybe<Scalars['String']>;
  interestReceivedTotal?: Maybe<Scalars['String']>;
  openingBalance?: Maybe<Scalars['String']>;
  tdsTotal?: Maybe<Scalars['String']>;
};

export const FdInvestmentType = {
  RecurringFd: 'RECURRING_FD',
  StandardFd: 'STANDARD_FD',
} as const;

export type FdInvestmentType = typeof FdInvestmentType[keyof typeof FdInvestmentType];
export const File_Variant = {
  Doc: 'DOC',
  Docx: 'DOCX',
  Jpeg: 'JPEG',
  Jpg: 'JPG',
  Other: 'OTHER',
  Pdf: 'PDF',
  Png: 'PNG',
} as const;

export type File_Variant = typeof File_Variant[keyof typeof File_Variant];
export const Filter_Mode = {
  And: 'AND',
  Or: 'OR',
} as const;

export type Filter_Mode = typeof Filter_Mode[keyof typeof Filter_Mode];
export type FamilyDetails = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  inNepali?: Maybe<FamilyDetailsInNepali>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FamilyDetailsInNepali = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FamilyMemberDetails = {
  dob?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  relationship?: Maybe<Scalars['String']>;
};

export type FianancialTransactionReport = {
  abbsTransactionReport?: Maybe<AbbsTransactionReportResult>;
  bankGLBalanceReport: BankGlBalanceResult;
  bankGLStatementReport: BankGlStatementResult;
  charKhataReport: TrialSheetReportResult;
  dayBookReport: DayBookReportResult;
  mrTransactionReport?: Maybe<MrTransactionReportResult>;
  serviceCenterBalanceReport: SericeCenterStatementResult;
  tagKhataReport: TagKhataReportResult;
  tellerReport: TellerReportResult;
  trialSheetReport: TrialSheetReportResult;
  vaultBalanceReport: VaultBalanceReportResult;
};

export type FianancialTransactionReportAbbsTransactionReportArgs = {
  data?: InputMaybe<AbbsTransactionReportFilter>;
};

export type FianancialTransactionReportBankGlBalanceReportArgs = {
  data: BankGlBalanceFilter;
};

export type FianancialTransactionReportBankGlStatementReportArgs = {
  data: BankGlStatementFilter;
};

export type FianancialTransactionReportCharKhataReportArgs = {
  data: CharKhataReportFilter;
};

export type FianancialTransactionReportDayBookReportArgs = {
  data: DayBookReportFilter;
};

export type FianancialTransactionReportMrTransactionReportArgs = {
  data: MrTransactionReportFilter;
};

export type FianancialTransactionReportServiceCenterBalanceReportArgs = {
  data: ServiceCenterBalanceFilter;
};

export type FianancialTransactionReportTagKhataReportArgs = {
  data: TagKhataReportFilter;
};

export type FianancialTransactionReportTellerReportArgs = {
  data: TellerReportFilter;
};

export type FianancialTransactionReportTrialSheetReportArgs = {
  data: TrialSheetReportFilter;
};

export type FianancialTransactionReportVaultBalanceReportArgs = {
  data: VaultBalanceReportFilter;
};

export type FieldDetailsQueryResult = {
  data?: Maybe<FormField>;
  error?: Maybe<QueryError>;
};

export type Filter = {
  orConditions?: InputMaybe<Array<OrConditions>>;
  query?: InputMaybe<Scalars['String']>;
};

export type FixedDepositReport = {
  accountName?: Maybe<Scalars['String']>;
  accountNo?: Maybe<Scalars['String']>;
  accountOpenDate?: Maybe<Scalars['Localized']>;
  expiryDate?: Maybe<Scalars['Localized']>;
  fdAmount?: Maybe<Scalars['String']>;
  interestAmount?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberID?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['Localized']>;
  mobileNo?: Maybe<Scalars['String']>;
  nomineeAccountNo?: Maybe<Scalars['String']>;
  serviceCenter?: Maybe<Scalars['String']>;
};

export type FixedDepositReportInput = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  period: LocalizedDateFilter;
};

export type FixedDepositReportResult = {
  data?: Maybe<Array<Maybe<FixedDepositReport>>>;
  error?: Maybe<QueryError>;
};

export const FormCategory = {
  KymCoop: 'KYM_COOP',
  KymCoopUnion: 'KYM_COOP_UNION',
  KymIndividual: 'KYM_INDIVIDUAL',
  KymInstitution: 'KYM_INSTITUTION',
} as const;

export type FormCategory = typeof FormCategory[keyof typeof FormCategory];
export type FormDynamicFieldsFilter = {
  category: FormCategory;
  searchTerm: FormSectionSearchTerm;
};

export type FormElement = FormField | FormSection;

export type FormElementDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormElementResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormElement>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormField = Base & {
  category: FormCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dependsOn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: FormFieldType;
  hasOtherField: Scalars['Boolean'];
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  options?: Maybe<Array<FormOption>>;
  order: Scalars['Int'];
  search_term?: Maybe<FormFieldSearchTerm>;
  section?: Maybe<FormSection>;
};

export type FormFieldDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormFieldInput = {
  category: FormCategory;
  dependsOn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: FormFieldType;
  hasOtherField: Scalars['Boolean'];
  maxSize?: InputMaybe<Scalars['Int']>;
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Array<FormOptionInput>>;
};

export type FormFieldMutation = {
  /**  Condition of fields should always be depended on options only  */
  condition: FormFieldMutationResult;
  delete: FormFieldDeleteResult;
  move: FormFieldMutationResult;
  update: FormFieldMutationResult;
  /**
   *  If SectionId is given then the field is wrapped by a section and this field won't have any options.
   *    if sectionID isn't given then this field will have options so, its type will only be   SINGLE_SELECT & MULTIPLE_SELECT
   */
  upsert: FormFieldMutationResult;
};

export type FormFieldMutationConditionArgs = {
  dependsOn: Array<InputMaybe<Scalars['ID']>>;
  fieldId: Scalars['ID'];
};

export type FormFieldMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormFieldMutationMoveArgs = {
  id: Scalars['ID'];
  to: Scalars['Int'];
};

export type FormFieldMutationUpdateArgs = {
  data: FormFieldUpdateInput;
  id: Scalars['ID'];
};

export type FormFieldMutationUpsertArgs = {
  data: FormFieldUpsertInput;
  sectionId?: InputMaybe<Scalars['ID']>;
};

export type FormFieldMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormField>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormFieldQuery = {
  details: FieldDetailsQueryResult;
};

export type FormFieldQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type FormFieldQueryResult = {
  data?: Maybe<Array<Maybe<FormField>>>;
  error?: Maybe<QueryError>;
};

export const FormFieldSearchTerm = {
  /**  KYM_COOP  */
  CooperativeType: 'COOPERATIVE_TYPE',
  EducationQualification: 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction: 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity: 'ETHNICITY',
  ExpectedMonthlyTransaction: 'EXPECTED_MONTHLY_TRANSACTION',
  ExpectedMonthlyTurnover: 'EXPECTED_MONTHLY_TURNOVER',
  FamilyIncomeSource: 'FAMILY_INCOME_SOURCE',
  FinancialTransactionDetails: 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions: 'FOREIGN_EMPLOYMENT_OPTIONS',
  /** KYM_INDIVIDUAL */
  Gender: 'GENDER',
  MaritalStatus: 'MARITAL_STATUS',
  Nationality: 'NATIONALITY',
  Occupation: 'OCCUPATION',
  /**  KYM_INSTITUTION */
  OrganizationType: 'ORGANIZATION_TYPE',
  Purpose: 'PURPOSE',
  Relationship: 'RELATIONSHIP',
  Religion: 'RELIGION',
} as const;

export type FormFieldSearchTerm = typeof FormFieldSearchTerm[keyof typeof FormFieldSearchTerm];
export const FormFieldType = {
  /**  For Custom Variant  */
  Address: 'ADDRESS',
  Amount: 'AMOUNT',
  Bank: 'BANK',
  Date: 'DATE',
  District: 'DISTRICT',
  Email: 'EMAIL',
  Fax: 'FAX',
  /**  These are for SEARCH fields  */
  LocalLevel: 'LOCAL_LEVEL',
  MultipleFile: 'MULTIPLE_FILE',
  MultipleSelect: 'MULTIPLE_SELECT',
  NumberInput: 'NUMBER_INPUT',
  Paragraph: 'PARAGRAPH',
  PhoneNumber: 'PHONE_NUMBER',
  PoBox: 'PO_BOX',
  Province: 'PROVINCE',
  /**  These are for file   */
  SingleFile: 'SINGLE_FILE',
  /**  These are for SINGLE_SELECT, MULTI_SELECT  */
  SingleSelect: 'SINGLE_SELECT',
  TextInput: 'TEXT_INPUT',
  Url: 'URL',
} as const;

export type FormFieldType = typeof FormFieldType[keyof typeof FormFieldType];
export type FormFieldUpdateInput = {
  dependsOn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  fieldType?: InputMaybe<FormFieldType>;
  hasOtherField?: InputMaybe<Scalars['Boolean']>;
  maxSize?: InputMaybe<Scalars['Int']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

/**  This option will be always be added in last order */
export type FormFieldUpsertInput = {
  data?: InputMaybe<FormFieldInput>;
  /**  If id is supplied then it will be update operation else it will be insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormOption = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  field: FormField;
  id: Scalars['ID'];
  isDefault: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  order: Scalars['Int'];
};

export type FormOptionDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormOptionInput = {
  enabled: Scalars['Boolean'];
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormOptionMutation = {
  delete: FormOptionDeleteResult;
  move: FormOptionResult;
  update: FormOptionResult;
  upsert: FormOptionResult;
};

export type FormOptionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormOptionMutationMoveArgs = {
  id: Scalars['ID'];
  to: Scalars['Int'];
};

export type FormOptionMutationUpdateArgs = {
  data: FormOptionUpdateInput;
  id: Scalars['ID'];
};

export type FormOptionMutationUpsertArgs = {
  data: FormOptionUpsertInput;
  fieldId: Scalars['ID'];
};

export type FormOptionResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormOption>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormOptionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

/**  This option will be always be added in last order */
export type FormOptionUpsertInput = {
  data?: InputMaybe<FormOptionInput>;
  /**  If Id is Present then this will be an update operation.. else it will be an insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormOptionsGetFilter = {
  fieldId: Scalars['ID'];
};

export type FormOptionsPredefinedFilter = {
  category: FormCategory;
  searchTerm: FormFieldSearchTerm;
};

export type FormOptionsQuery = {
  get?: Maybe<FormOptionsQueryResult>;
  predefined?: Maybe<FormOptionsQueryResult>;
};

export type FormOptionsQueryGetArgs = {
  filter: FormOptionsGetFilter;
};

export type FormOptionsQueryPredefinedArgs = {
  filter: FormOptionsPredefinedFilter;
};

export type FormOptionsQueryResult = {
  data?: Maybe<Array<Maybe<FormOption>>>;
  error?: Maybe<QueryError>;
};

export type FormQuery = {
  dynamicFields?: Maybe<FormFieldQueryResult>;
  options: FormOptionsQuery;
};

export type FormQueryDynamicFieldsArgs = {
  filter: FormOptionsPredefinedFilter;
};

export const FormSearchTerm = {
  AccountCoopTraining: 'ACCOUNT_COOP_TRAINING',
  AccountHolderDeclaration: 'ACCOUNT_HOLDER_DECLARATION',
  AccountHolderDetails: 'ACCOUNT_HOLDER_DETAILS',
  AccountHolderDocuments: 'ACCOUNT_HOLDER_DOCUMENTS',
  AccountOperator: 'ACCOUNT_OPERATOR',
  AccountOperatorDetails: 'ACCOUNT_OPERATOR_DETAILS',
  AccountOperatorDocument: 'ACCOUNT_OPERATOR_DOCUMENT',
  /**  KYM_COOP_UNION  */
  Applicant: 'APPLICANT',
  ApplicantDetails: 'APPLICANT_DETAILS',
  ApplicantDocument: 'APPLICANT_DOCUMENT',
  BankAccountDetails: 'BANK_ACCOUNT_DETAILS',
  CentralRepresentativeCoopTraining: 'CENTRAL_REPRESENTATIVE_COOP_TRAINING',
  CentralRepresentativeDetails: 'CENTRAL_REPRESENTATIVE_DETAILS',
  CentralRepresentativeDocument: 'CENTRAL_REPRESENTATIVE_DOCUMENT',
  Citizenship: 'CITIZENSHIP',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION && KYM_COOP && KYM_COOP_UNION */
  ContactDetails: 'CONTACT_DETAILS',
  CooperativeType: 'COOPERATIVE_TYPE',
  /**  KYM_COOP && KYM_COOP_UNION  */
  CurrentMembers: 'CURRENT_MEMBERS',
  Director: 'DIRECTOR',
  DirectorsAffiliationDetails: 'DIRECTORS_AFFILIATION_DETAILS',
  DirectorCoopTraining: 'DIRECTOR_COOP_TRAINING',
  DirectorDetails: 'DIRECTOR_DETAILS',
  DirectorDocument: 'DIRECTOR_DOCUMENT',
  DrivingLicense: 'DRIVING_LICENSE',
  EducationQualification: 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction: 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity: 'ETHNICITY',
  ExpectedMonthlyTransaction: 'EXPECTED_MONTHLY_TRANSACTION',
  ExpectedMonthlyTurnover: 'EXPECTED_MONTHLY_TURNOVER',
  FamilyIncomeSource: 'FAMILY_INCOME_SOURCE',
  FamilyInformation: 'FAMILY_INFORMATION',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION */
  FileUploads: 'FILE_UPLOADS',
  FinancialTransactionDetails: 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions: 'FOREIGN_EMPLOYMENT_OPTIONS',
  /**  KYM_INDIVIDUAL  */
  Gender: 'GENDER',
  Identification: 'IDENTIFICATION',
  IncomeSourceDetails: 'INCOME_SOURCE_DETAILS',
  MaritalStatus: 'MARITAL_STATUS',
  Nationality: 'NATIONALITY',
  NationalIdentity: 'NATIONAL_IDENTITY',
  NextToKinInformation: 'NEXT_TO_KIN_INFORMATION',
  NumberOfEmployee: 'NUMBER_OF_EMPLOYEE',
  Occupation: 'OCCUPATION',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION */
  OccupationDetails: 'OCCUPATION_DETAILS',
  /** KYM_INSTITUTION  */
  OrganizationType: 'ORGANIZATION_TYPE',
  OtherCooperativeDetails: 'OTHER_COOPERATIVE_DETAILS',
  Passport: 'PASSPORT',
  Purpose: 'PURPOSE',
  RegisteredDetails: 'REGISTERED_DETAILS',
  Relationship: 'RELATIONSHIP',
  Religion: 'RELIGION',
  /**  KYM_COOP  */
  Representative: 'REPRESENTATIVE',
  SisterConcernDetails: 'SISTER_CONCERN_DETAILS',
  TransactionDetails: 'TRANSACTION_DETAILS',
  VoterId: 'VOTER_ID',
} as const;

export type FormSearchTerm = typeof FormSearchTerm[keyof typeof FormSearchTerm];
export type FormSection = Base & {
  category: FormCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  fields?: Maybe<Array<FormField>>;
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  parent?: Maybe<FormSection>;
  search_term?: Maybe<FormSectionSearchTerm>;
  sectionType: FormSectionType;
  subSections?: Maybe<Array<FormSection>>;
};

export type FormSectionDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormSectionInput = {
  category: FormCategory;
  enabled: Scalars['Boolean'];
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormSectionMutation = {
  delete: FormSectionDeleteResult;
  /**  The new section will always be an INPUT section. UPLOAD and GROUP type aren't allowed to be created  */
  subSection: FormSectionMutationResult;
  update: FormSectionMutationResult;
  /**  The new section will always be an INPUT section. UPLOAD and GROUP type aren't allowed to be created  */
  upsert: FormSectionMutationResult;
};

export type FormSectionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormSectionMutationSubSectionArgs = {
  data?: InputMaybe<FormSectionInput>;
  sectionId: Scalars['ID'];
};

export type FormSectionMutationUpdateArgs = {
  data: FormSectionUpdateInput;
  id: Scalars['ID'];
};

export type FormSectionMutationUpsertArgs = {
  data: FormSectionUpsertInput;
};

export type FormSectionMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormSection>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormSectionQuery = {
  details: SectionDetailsQueryResult;
};

export type FormSectionQueryDetailsArgs = {
  id: Scalars['ID'];
};

export const FormSectionSearchTerm = {
  AccountCoopTraining: 'ACCOUNT_COOP_TRAINING',
  AccountHolderDeclaration: 'ACCOUNT_HOLDER_DECLARATION',
  AccountHolderDetails: 'ACCOUNT_HOLDER_DETAILS',
  AccountHolderDocuments: 'ACCOUNT_HOLDER_DOCUMENTS',
  AccountOperator: 'ACCOUNT_OPERATOR',
  AccountOperatorDetails: 'ACCOUNT_OPERATOR_DETAILS',
  AccountOperatorDocument: 'ACCOUNT_OPERATOR_DOCUMENT',
  /**  KYM_COOP_UNION  */
  Applicant: 'APPLICANT',
  ApplicantDetails: 'APPLICANT_DETAILS',
  ApplicantDocument: 'APPLICANT_DOCUMENT',
  BankAccountDetails: 'BANK_ACCOUNT_DETAILS',
  CentralRepresentativeCoopTraining: 'CENTRAL_REPRESENTATIVE_COOP_TRAINING',
  CentralRepresentativeDetails: 'CENTRAL_REPRESENTATIVE_DETAILS',
  CentralRepresentativeDocument: 'CENTRAL_REPRESENTATIVE_DOCUMENT',
  Citizenship: 'CITIZENSHIP',
  ContactDetails: 'CONTACT_DETAILS',
  /**  KYM_COOP  */
  CurrentMembers: 'CURRENT_MEMBERS',
  /**  KYM_INSTITUTION && KYM_COOP  */
  Director: 'DIRECTOR',
  DirectorsAffiliationDetails: 'DIRECTORS_AFFILIATION_DETAILS',
  DirectorCoopTraining: 'DIRECTOR_COOP_TRAINING',
  DirectorDetails: 'DIRECTOR_DETAILS',
  DirectorDocument: 'DIRECTOR_DOCUMENT',
  DrivingLicense: 'DRIVING_LICENSE',
  FamilyInformation: 'FAMILY_INFORMATION',
  /** KYM_INDIVIDUAL && KYM_INSTITUTION && KYM_COOP */
  FileUploads: 'FILE_UPLOADS',
  Identification: 'IDENTIFICATION',
  IncomeSourceDetails: 'INCOME_SOURCE_DETAILS',
  NationalIdentity: 'NATIONAL_IDENTITY',
  NextToKinInformation: 'NEXT_TO_KIN_INFORMATION',
  NumberOfEmployee: 'NUMBER_OF_EMPLOYEE',
  OccupationDetails: 'OCCUPATION_DETAILS',
  OtherCooperativeDetails: 'OTHER_COOPERATIVE_DETAILS',
  /** KYM_INDIVIDUAL */
  Passport: 'PASSPORT',
  /**  KYM_INSTITUTION */
  RegisteredDetails: 'REGISTERED_DETAILS',
  Representative: 'REPRESENTATIVE',
  SisterConcernDetails: 'SISTER_CONCERN_DETAILS',
  TransactionDetails: 'TRANSACTION_DETAILS',
  VoterId: 'VOTER_ID',
} as const;

export type FormSectionSearchTerm =
  typeof FormSectionSearchTerm[keyof typeof FormSectionSearchTerm];
export const FormSectionType = {
  Group: 'GROUP',
  Input: 'INPUT',
  Upload: 'UPLOAD',
} as const;

export type FormSectionType = typeof FormSectionType[keyof typeof FormSectionType];
export type FormSectionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormSectionUpsertInput = {
  data?: InputMaybe<FormSectionInput>;
  /**  If id is supplied then it will be update operation else it will be insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormSettingMutation = {
  delete: FormElementDeleteResult;
  field: FormFieldMutation;
  maxSize: FormElementResult;
  option: FormOptionMutation;
  section: FormSectionMutation;
};

export type FormSettingMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormSettingMutationMaxSizeArgs = {
  id: Scalars['ID'];
  maxSize: Scalars['Int'];
};

export type FormSettingQuery = {
  custom: CustomFormQuery;
  field: FormFieldQuery;
  predefined: PredefinedFormQuery;
  section: FormSectionQuery;
};

export type FormStateInvItemsInput = {
  costPrice?: Maybe<Scalars['String']>;
  isVariantItem: Scalars['Boolean'];
  itemCode: Scalars['String'];
  itemGroup: Scalars['String'];
  itemName: Scalars['String'];
  ledgers?: Maybe<InventoryItemLedgerDetail>;
  primaryUnit: Scalars['String'];
  reorderLevel?: Maybe<Scalars['String']>;
  sellingPrice?: Maybe<Scalars['String']>;
  tax: Scalars['String'];
  valuationMethod?: Maybe<InvItemsValuationMethod>;
  variantList?: Maybe<Array<Maybe<FormStateItemVariantDetail>>>;
  variants?: Maybe<Array<Maybe<FormStateInvItemsVariant>>>;
};

export type FormStateInvItemsVariant = {
  options?: Maybe<Array<Maybe<Scalars['String']>>>;
  variantName?: Maybe<Scalars['String']>;
};

export type FormStateInvSupplierInput = {
  address: KymAddress;
  applicationDoc?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  contactNo: Scalars['String'];
  contactPersonName?: Maybe<Scalars['String']>;
  contactPersonPhoneNo?: Maybe<Scalars['String']>;
  creditLimit?: Maybe<Scalars['Float']>;
  creditTerms?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  legalStatusDoc?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  name: Scalars['String'];
  openingBalance?: Maybe<Scalars['String']>;
  othersDoc?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  panNo?: Maybe<Scalars['String']>;
  registrationDoc?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  supplierCode: Scalars['String'];
};

export type FormStateInvUnitOfMeasureInput = {
  acceptFraction?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type FormStateItemVariantDetail = {
  costPrice?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  sellingPrice?: Maybe<Scalars['String']>;
  sku?: Maybe<Scalars['String']>;
};

export const Frequency = {
  Daily: 'DAILY',
  Monthly: 'MONTHLY',
  Weekly: 'WEEKLY',
  Yearly: 'YEARLY',
} as const;

export type Frequency = typeof Frequency[keyof typeof Frequency];
export const FrequencyDay = {
  First: 'FIRST',
  Last: 'LAST',
  Second: 'SECOND',
  Third: 'THIRD',
} as const;

export type FrequencyDay = typeof FrequencyDay[keyof typeof FrequencyDay];
export const FrequencyTenure = {
  Day: 'DAY',
  Month: 'MONTH',
  Week: 'WEEK',
  Year: 'YEAR',
} as const;

export type FrequencyTenure = typeof FrequencyTenure[keyof typeof FrequencyTenure];
export type FundManagementConnection = {
  edges?: Maybe<Array<Maybe<FundManagementEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type FundManagementEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<FundManagementInfo>;
};

export type FundManagementFilter = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FundManagementInfo = {
  id?: Maybe<Scalars['String']>;
};

export type FundManagementInput = {
  cooperativePromotionFund?: InputMaybe<Scalars['Float']>;
  generalReserveFund?: InputMaybe<Scalars['Float']>;
  grossProfit?: InputMaybe<Scalars['String']>;
  incomeTax?: InputMaybe<Scalars['Float']>;
  otherFunds?: InputMaybe<Array<InputMaybe<OtherFundDistribution>>>;
  patronageRefundFund?: InputMaybe<Scalars['Float']>;
  staffBonusFund?: InputMaybe<Scalars['Float']>;
};

export type FundManagementMutation = {
  new?: Maybe<FundManagementResult>;
};

export type FundManagementMutationNewArgs = {
  data?: InputMaybe<FundManagementInput>;
};

export type FundManagementQuery = {
  list?: Maybe<FundManagementConnection>;
  previousYear?: Maybe<Array<Maybe<PreviousYearFundDistribution>>>;
};

export type FundManagementQueryListArgs = {
  filter?: InputMaybe<FundManagementFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type FundManagementResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<FundManagementQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type GlBalanceFilter = {
  amount?: InputMaybe<MinMaxFilter>;
};

export type GlReportSummary = {
  closingBalance?: Maybe<Scalars['String']>;
  closingBalanceType?: Maybe<BalanceType>;
  openingBalance?: Maybe<Scalars['String']>;
  openingBalanceType?: Maybe<BalanceType>;
};

export type GlStatementFilter = {
  amount?: InputMaybe<MinMaxFilter>;
  bank?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  natureOfTransactions?: InputMaybe<NatureOfBankTransaction>;
};

export const GenderInputType = {
  Female: 'FEMALE',
  Male: 'MALE',
  Other: 'OTHER',
} as const;

export type GenderInputType = typeof GenderInputType[keyof typeof GenderInputType];
export type GenderLedgerReportResult = {
  data?: Maybe<Array<Maybe<GeneralLedgerReportEntry>>>;
  error?: Maybe<QueryError>;
  ledgerName?: Maybe<Scalars['String']>;
  summary?: Maybe<GlReportSummary>;
};

export const GenderType = {
  Female: 'FEMALE',
  Male: 'MALE',
  Other: 'OTHER',
} as const;

export type GenderType = typeof GenderType[keyof typeof GenderType];
export type GeneralBranchSettingsMutation = {
  add: BranchAddResult;
};

export type GeneralBranchSettingsMutationAddArgs = {
  data?: InputMaybe<BranchInput>;
  id: Scalars['ID'];
};

export type GeneralBranchSettingsQuery = {
  formState?: Maybe<BranchGetResult>;
  list?: Maybe<BranchConnection>;
  mine?: Maybe<Branch>;
};

export type GeneralBranchSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type GeneralBranchSettingsQueryListArgs = {
  filter?: InputMaybe<BranchSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type GeneralLedgerFilter = {
  ledgerId: Scalars['ID'];
  period: LocalizedDateFilter;
};

export type GeneralLedgerReportEntry = {
  account?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  credit?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  debit?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};

export type GeneralMemberData = {
  charge?: Maybe<Array<Maybe<MemberChargeData>>>;
  isCodeSetup?: Maybe<Scalars['Boolean']>;
  memberCode?: Maybe<MemberCode>;
  memberType?: Maybe<MemberActiveData>;
  risk?: Maybe<MemberRiskData>;
};

export type GeneralMemberInput = {
  charge?: InputMaybe<Array<InputMaybe<MemberChargeInput>>>;
  memberCode?: InputMaybe<MemberCodeInput>;
  memberType?: InputMaybe<MemberActiveInput>;
  risk?: InputMaybe<MemberRiskInput>;
};

export type GeneralMemberResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<GeneralMemberData>;
  recordId: Scalars['ID'];
};

export type GeneralSettingsMutation = {
  HCM?: Maybe<HcmSettingsMutation>;
  KYM?: Maybe<KymMutation>;
  accounting?: Maybe<AccountingSettingsMutation>;
  alternativeChannel?: Maybe<AlternativeChannelSettingsMutation>;
  branch?: Maybe<GeneralBranchSettingsMutation>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  codes?: Maybe<CodeManagementMutation>;
  deposit?: Maybe<DepositSettingsMutation>;
  depositProduct?: Maybe<DepositProductSettingsMutation>;
  loan?: Maybe<LoanSettingsMutation>;
  loanProducts?: Maybe<LoanProductsMutation>;
  organization?: Maybe<OrganizationSettingsMutation>;
  printPreference?: Maybe<PrintPreferenceMutation>;
  reports?: Maybe<ReportSettingsMutation>;
  setup: SetupMutation;
  share?: Maybe<ShareSettingsMutation>;
  valuator?: Maybe<ValuatorSettingsMutation>;
};

export type GeneralSettingsQuery = {
  HCM?: Maybe<HcmSettingsQuery>;
  KYM?: Maybe<KymQuery>;
  accounting?: Maybe<AccountingSettingsQuery>;
  alternativeChannel?: Maybe<AlternativeChannelSettingsQuery>;
  branch?: Maybe<GeneralBranchSettingsQuery>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  codes?: Maybe<CodeManagementQuery>;
  deposit?: Maybe<DepositSettingsQuery>;
  depositProduct?: Maybe<DepositProductSettingsQuery>;
  loan?: Maybe<LoanSettingsQuery>;
  loanProducts?: Maybe<LoanProductsQuery>;
  organization?: Maybe<OrganizationSettingsQuery>;
  printPreference?: Maybe<PrintPreferenceQuery>;
  reports?: Maybe<ReportSettingsQuery>;
  setup: SetupQuery;
  share?: Maybe<ShareSettingsQuery>;
  valuator?: Maybe<ValuatorSettingsQuery>;
};

export type GetDeductionComponentSchema = {
  abbr: Scalars['String'];
  baseMultiple?: Maybe<Scalars['String']>;
  deductionFrequency?: Maybe<DeductionFrequencyEnum>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  makeThisActive?: Maybe<Scalars['Boolean']>;
  multiplier?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  roundToNearestInteger?: Maybe<Scalars['Boolean']>;
};

export type GetDeductionComponentSchemaWithError = {
  error?: Maybe<QueryError>;
  record?: Maybe<GetDeductionComponentSchema>;
};

export type GetEmployeeLifecycleDetail = {
  data?: Maybe<GetEmployeeLifecycleNode>;
  error?: Maybe<QueryError>;
};

export type GetEmployeeLifecycleNode = {
  age?: Maybe<Scalars['Int']>;
  branch?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  joiningDate?: Maybe<Scalars['Localized']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type GetInventoryItemResponse = {
  data?: Maybe<FormStateInvItemsInput>;
  error?: Maybe<QueryError>;
};

export type GetSalaryStructureSchema = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  makeThisActive?: Maybe<Scalars['Boolean']>;
  modeOfPayment?: Maybe<PaymentModeEnum>;
  name?: Maybe<Scalars['String']>;
  payrollFrequency?: Maybe<PayrollFrequencyEnum>;
  salaryDeduction?: Maybe<Array<Maybe<SalaryStructureDeductionDetailsType>>>;
  salaryEarnings?: Maybe<Array<Maybe<SalaryStructureEarningDetailsType>>>;
  salaryPaymentLedger?: Maybe<LedgerPaymentEnum>;
};

export type GetSalaryStructureSchemaWithError = {
  error?: Maybe<QueryError>;
  record?: Maybe<GetSalaryStructureSchema>;
};

export type GetSupplierResponse = {
  data?: Maybe<FormStateInvSupplierInput>;
  error?: Maybe<QueryError>;
};

export type GetUnitResponse = {
  data?: Maybe<FormStateInvUnitOfMeasureInput>;
  error?: Maybe<QueryError>;
};

export type GetWarehouseResponse = {
  data?: Maybe<ReturnWarehouseInput>;
  error?: Maybe<QueryError>;
};

export type GlTransaction = {
  account: Scalars['String'];
  balance?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  credit?: Maybe<Scalars['String']>;
  debit?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  serviceCenter?: Maybe<Scalars['String']>;
  serviceCentreId?: Maybe<Scalars['String']>;
};

export const GlobalPageAppName = {
  AccountingSystem: 'ACCOUNTING_SYSTEM',
  CoreBankingSystem: 'CORE_BANKING_SYSTEM',
  InventoryMgmt: 'INVENTORY_MGMT',
  Settings: 'SETTINGS',
} as const;

export type GlobalPageAppName = typeof GlobalPageAppName[keyof typeof GlobalPageAppName];
export const GlobalPageMenuName = {
  Accounts: 'ACCOUNTS',
  Loan: 'LOAN',
  Member: 'MEMBER',
  Reports: 'REPORTS',
  Share: 'SHARE',
  Transactions: 'TRANSACTIONS',
} as const;

export type GlobalPageMenuName = typeof GlobalPageMenuName[keyof typeof GlobalPageMenuName];
export const GlobalPagesIconType = {
  Add: 'ADD',
  List: 'LIST',
  Profile: 'PROFILE',
  Reports: 'REPORTS',
  Settings: 'SETTINGS',
} as const;

export type GlobalPagesIconType = typeof GlobalPagesIconType[keyof typeof GlobalPagesIconType];
export type GlobalPagesResultNode = {
  actionCode?: Maybe<Scalars['String']>;
  appCode?: Maybe<Scalars['String']>;
  fullCode?: Maybe<Scalars['String']>;
  hasParam?: Maybe<Scalars['Boolean']>;
  iconType?: Maybe<GlobalPagesIconType>;
  id?: Maybe<Scalars['String']>;
  menuCode?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['String']>;
  pageCode?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export const GracePeriod = {
  Interest: 'INTEREST',
  Principal: 'PRINCIPAL',
} as const;

export type GracePeriod = typeof GracePeriod[keyof typeof GracePeriod];
export type GraphData = {
  amount?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['Int']>;
};

export type GuaranteeAccountsMinView = {
  loanAccountName?: Maybe<Scalars['String']>;
  loanId?: Maybe<Scalars['String']>;
};

export const GuaranteeActions = {
  PartialRelease: 'PARTIAL_RELEASE',
  Release: 'RELEASE',
  Switch: 'SWITCH',
} as const;

export type GuaranteeActions = typeof GuaranteeActions[keyof typeof GuaranteeActions];
export type GuaranteeLoanDetail = {
  amount?: Maybe<Scalars['String']>;
  loanAccountNo?: Maybe<Scalars['String']>;
};

export const GuaranteeStatus = {
  Active: 'ACTIVE',
  Released: 'RELEASED',
} as const;

export type GuaranteeStatus = typeof GuaranteeStatus[keyof typeof GuaranteeStatus];
export type HcmEmployeeGeneralMutation = {
  deleteHcmEmployeeGeneral: DeleteResponse;
  upsertDepartment: DepartmentResult;
  upsertDesignation: DesignationResult;
  upsertEmployeeHealthInsurance: EmployeeHealthInsuranceResult;
  upsertEmployeeLevel?: Maybe<EmployeeLevelResult>;
  upsertEmployeeType: EmployeeTypeResult;
};

export type HcmEmployeeGeneralMutationDeleteHcmEmployeeGeneralArgs = {
  id: Scalars['String'];
};

export type HcmEmployeeGeneralMutationUpsertDepartmentArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: NewDepartment;
};

export type HcmEmployeeGeneralMutationUpsertDesignationArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: NewDesignation;
};

export type HcmEmployeeGeneralMutationUpsertEmployeeHealthInsuranceArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: NewEmployeeHealthInsurance;
};

export type HcmEmployeeGeneralMutationUpsertEmployeeLevelArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: NewEmployeeLevel;
};

export type HcmEmployeeGeneralMutationUpsertEmployeeTypeArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: NewEmployeeType;
};

export type HcmEmployeeGeneralQuery = {
  listDepartment?: Maybe<HcmEmployeeListConnection>;
  listDesignation?: Maybe<HcmEmployeeListConnection>;
  listEmployeeHealthInsurance?: Maybe<HcmEmployeeHealthInsuranceListConnection>;
  listEmployeeLevel?: Maybe<HcmEmployeeListConnection>;
  listEmployeeType?: Maybe<HcmEmployeeListConnection>;
};

export type HcmEmployeeGeneralQueryListDepartmentArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmEmployeeGeneralQueryListDesignationArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmEmployeeGeneralQueryListEmployeeHealthInsuranceArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmEmployeeGeneralQueryListEmployeeLevelArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmEmployeeGeneralQueryListEmployeeTypeArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmEmployeeLeaveMutation = {
  upsertLeaveType: LeaveTypeOutput;
};

export type HcmEmployeeLeaveMutationUpsertLeaveTypeArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: LeaveTypeInput;
};

export type HcmEmployeeLeavePolicyMutation = {
  upsertLeavePolicy: LeavePolicyOutput;
};

export type HcmEmployeeLeavePolicyMutationUpsertLeavePolicyArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: LeavePolicyInput;
};

export type HcmEmployeeLeavePolicyQuery = {
  getLeavePolicy: LeavePolicyGetOutput;
  listLeavePolicy: HrEmployeeLeavePolicyConnection;
};

export type HcmEmployeeLeavePolicyQueryGetLeavePolicyArgs = {
  id: Scalars['String'];
};

export type HcmEmployeeLeavePolicyQueryListLeavePolicyArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmEmployeeLeaveQuery = {
  getLeaveType: LeaveTypeGetOutput;
  listLeaveType: HcmEmployeeLeaveTypeConnection;
};

export type HcmEmployeeLeaveQueryGetLeaveTypeArgs = {
  id: Scalars['String'];
};

export type HcmEmployeeLeaveQueryListLeaveTypeArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmEmployeeLeaveTypeConnection = {
  edges?: Maybe<Array<Maybe<HcmEmployeeLeaveTypeEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type HcmEmployeeLeaveTypeEdges = {
  cursor: Scalars['Cursor'];
  node: LeaveTypeNode;
};

export type HcmEmployeeListConnection = {
  edges?: Maybe<Array<Maybe<HcmEmployeeListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type HcmEmployeeListEdges = {
  cursor: Scalars['Cursor'];
  node: HcmEmployeeSchema;
};

export type HcmEmployeeMutation = {
  employee: HcmEmployeeGeneralMutation;
  leave: HcmEmployeeLeaveMutation;
  leavePolicy: HcmEmployeeLeavePolicyMutation;
};

export type HcmEmployeeQuery = {
  employee: HcmEmployeeGeneralQuery;
  leave: HcmEmployeeLeaveQuery;
  leavePolicy: HcmEmployeeLeavePolicyQuery;
};

export type HcmEmployeeSchema = {
  description: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
};

export type HcmPayrollDeductionComponentMutation = {
  upsertDeductionComponent: ReturnDeductionComponent;
};

export type HcmPayrollDeductionComponentMutationUpsertDeductionComponentArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: InputDeductionComponent;
};

export type HcmPayrollDeductionComponentQuery = {
  getDeductionComponent: GetDeductionComponentSchemaWithError;
  listDeductionComponent: DeductionComponentListConnection;
};

export type HcmPayrollDeductionComponentQueryGetDeductionComponentArgs = {
  id: Scalars['String'];
};

export type HcmPayrollDeductionComponentQueryListDeductionComponentArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmPayrollEarningComponentMutation = {
  upsertEarningComponent: ReturnEarningComponent;
};

export type HcmPayrollEarningComponentMutationUpsertEarningComponentArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: EarningComponentInput;
};

export type HcmPayrollEarningComponentQuery = {
  getEarningComponent: EachEarningComponentRecords;
  listEarningComponent: EarningComponentListConnection;
};

export type HcmPayrollEarningComponentQueryGetEarningComponentArgs = {
  id: Scalars['ID'];
};

export type HcmPayrollEarningComponentQueryListEarningComponentArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmPayrollMutation = {
  deductionComponent: HcmPayrollDeductionComponentMutation;
  earningComponent: HcmPayrollEarningComponentMutation;
  salaryStructure: HcmPayrollSalaryStructureMutation;
};

export type HcmPayrollQuery = {
  deductionComponent: HcmPayrollDeductionComponentQuery;
  earningComponent: HcmPayrollEarningComponentQuery;
  salaryStructure: HcmPayrollSalaryStructureQuery;
};

export type HcmSettingsMutation = {
  employee: HcmEmployeeMutation;
  payroll: HcmPayrollMutation;
};

export type HcmSettingsQuery = {
  employee: HcmEmployeeQuery;
  payroll: HcmPayrollQuery;
};

export type HrEmployeeKyeMutation = {
  upsertEmployee: EmployeeReturnResult;
};

export type HrEmployeeKyeMutationUpsertEmployeeArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: EmployeeInput;
};

export type HrEmployeeKyeQuery = {
  getEmployee: EmployteeResultWithError;
  getEmployeeLifecycleView: GetEmployeeLifecycleDetail;
  listEmployee: HrEmployeeListConnection;
};

export type HrEmployeeKyeQueryGetEmployeeArgs = {
  id: Scalars['String'];
};

export type HrEmployeeKyeQueryGetEmployeeLifecycleViewArgs = {
  id: Scalars['String'];
};

export type HrEmployeeKyeQueryListEmployeeArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrEmployeeLeaveConnection = {
  edges?: Maybe<Array<Maybe<HrEmployeeLeaveEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type HrEmployeeLeaveEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<EmployeeLeaveType>;
};

export type HrEmployeeLeaveMutation = {
  upsertLeave: LeaveOutput;
};

export type HrEmployeeLeaveMutationUpsertLeaveArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: LeaveInput;
};

export type HrEmployeeLeavePolicyConnection = {
  edges?: Maybe<Array<Maybe<HrEmployeeLeavePolicyEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type HrEmployeeLeavePolicyEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<EmployeeLeavePolicyNode>;
};

export type HrEmployeeLeaveQuery = {
  getLeave: LeaveOutputType;
  listLeave: HrEmployeeLeaveConnection;
};

export type HrEmployeeLeaveQueryGetLeaveArgs = {
  id: Scalars['String'];
};

export type HrEmployeeLeaveQueryListLeaveArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrEmployeeLifecycleEmployeeOnboardingMutation = {
  upsertEmployeeOnboarding: ReturnEmployeeOnboarding;
};

export type HrEmployeeLifecycleEmployeeOnboardingMutationUpsertEmployeeOnboardingArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: EmployeeOnboardingInput;
};

export type HrEmployeeLifecycleEmployeeOnboardingQuery = {
  getEmployeeOnboarding: EachEmployeeOnboardingRecord;
  listEmployeeOnboarding: EmployeeOnboardingConnection;
};

export type HrEmployeeLifecycleEmployeeOnboardingQueryGetEmployeeOnboardingArgs = {
  id: Scalars['ID'];
};

export type HrEmployeeLifecycleEmployeeOnboardingQueryListEmployeeOnboardingArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrEmployeeLifecycleEmployeeTransferMutation = {
  insertEmployeeTransfer: ReturnEmployeeTransfer;
};

export type HrEmployeeLifecycleEmployeeTransferMutationInsertEmployeeTransferArgs = {
  input: EmployeeTransferInput;
};

export type HrEmployeeLifecycleEmployeeTransferQuery = {
  listEmployeeTransfer: EmployeeTransferConnection;
  queryEmployeeTransfer?: Maybe<EachTransferRecord>;
};

export type HrEmployeeLifecycleEmployeeTransferQueryListEmployeeTransferArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrEmployeeLifecycleEmployeeTransferQueryQueryEmployeeTransferArgs = {
  employeeId: Scalars['ID'];
};

export type HrEmployeeLifecycleExitMutation = {
  upsertEmployeeExit: ReturnEmployeeExit;
};

export type HrEmployeeLifecycleExitMutationUpsertEmployeeExitArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: EmployeeExitInput;
};

export type HrEmployeeLifecycleExitQuery = {
  getEmployeeExit: EachEmployeeExitRecords;
  listEmployeeExit: EmployeeExitConnection;
};

export type HrEmployeeLifecycleExitQueryGetEmployeeExitArgs = {
  id: Scalars['ID'];
};

export type HrEmployeeLifecycleExitQueryListEmployeeExitArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrEmployeeLifecycleMutation = {
  employeeExit: HrEmployeeLifecycleExitMutation;
  employeeOnboarding: HrEmployeeLifecycleEmployeeOnboardingMutation;
  employeePromotion: HrEmployeeLifecyclePromotionMutation;
  employeeSeparation: HrEmployeeLifecycleSeparationMutation;
  employeeTransfer: HrEmployeeLifecycleEmployeeTransferMutation;
};

export type HrEmployeeLifecyclePromotionMutation = {
  addEmployeePromotion: EmployeePromotionOutput;
};

export type HrEmployeeLifecyclePromotionMutationAddEmployeePromotionArgs = {
  input: EmployeePromotionInput;
};

export type HrEmployeeLifecyclePromotionQuery = {
  listEmployeePromotion: HrEmployeePromotionConnection;
};

export type HrEmployeeLifecyclePromotionQueryListEmployeePromotionArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrEmployeeLifecycleQuery = {
  employeeExit: HrEmployeeLifecycleExitQuery;
  employeeOnboarding: HrEmployeeLifecycleEmployeeOnboardingQuery;
  employeePromotion: HrEmployeeLifecyclePromotionQuery;
  employeeSeparation: HrEmployeeLifecycleSeparationQuery;
  employeeTransfer: HrEmployeeLifecycleEmployeeTransferQuery;
};

export type HrEmployeeLifecycleSeparationMutation = {
  addEmployeeSeparation: EmployeeSeparationOutput;
};

export type HrEmployeeLifecycleSeparationMutationAddEmployeeSeparationArgs = {
  input: EmployeeSeparationInput;
};

export type HrEmployeeLifecycleSeparationQuery = {
  listEmployeeSeparation: HrEmployeeSeparationConnection;
};

export type HrEmployeeLifecycleSeparationQueryListEmployeeSeparationArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrEmployeeListConnection = {
  edges?: Maybe<Array<Maybe<HrEmployeeListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type HrEmployeeListEdges = {
  cursor: Scalars['Cursor'];
  node: EmployeeListType;
};

export type HrEmployeeMutation = {
  employee: HrEmployeeKyeMutation;
  leave: HrEmployeeLeaveMutation;
};

export type HrEmployeePromotionConnection = {
  PageInfo?: Maybe<PageInfo>;
  edges?: Maybe<Array<Maybe<HrEmployeePromotionEdges>>>;
  totalCount: Scalars['Int'];
};

export type HrEmployeePromotionEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<EmployeePromotionNode>;
};

export type HrEmployeeQuery = {
  employee: HrEmployeeKyeQuery;
  leave: HrEmployeeLeaveQuery;
};

export type HrEmployeeSeparationConnection = {
  PageInfo?: Maybe<PageInfo>;
  edges?: Maybe<Array<Maybe<HrEmployeeSeparationEdges>>>;
  totalCount: Scalars['Int'];
};

export type HrEmployeeSeparationEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<EmployeeSeparationNode>;
};

export type HrMutation = {
  employee: HrEmployeeMutation;
  employeelifecycle?: Maybe<HrEmployeeLifecycleMutation>;
  recruitment: HrRecruitmentMutation;
};

export type HrQuery = {
  employee: HrEmployeeQuery;
  employeelifecycle: HrEmployeeLifecycleQuery;
  recruitment: HrRecruitmentQuery;
};

export type HrRecruitmentAppointmentLetterMutation = {
  upsertAppointmentLetter: ReturnAppointmentLetter;
};

export type HrRecruitmentAppointmentLetterMutationUpsertAppointmentLetterArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: AppointmentLetterInput;
};

export type HrRecruitmentAppointmentLetterQuery = {
  getAppointmentLetter: EachAppointmentLetterRecords;
  listAppointmentLetter: AppointmentLetterConnection;
};

export type HrRecruitmentAppointmentLetterQueryGetAppointmentLetterArgs = {
  id: Scalars['ID'];
};

export type HrRecruitmentAppointmentLetterQueryListAppointmentLetterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrRecruitmentJobApplicationMutation = {
  upsertJobApplication: ReturnJobApplication;
};

export type HrRecruitmentJobApplicationMutationUpsertJobApplicationArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: JobApplicationInput;
};

export type HrRecruitmentJobApplicationQuery = {
  getJobApplication: EachJobApplicationRecords;
  listJobApplication: JobApplicationConnection;
};

export type HrRecruitmentJobApplicationQueryGetJobApplicationArgs = {
  id: Scalars['ID'];
};

export type HrRecruitmentJobApplicationQueryListJobApplicationArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrRecruitmentJobOfferMutation = {
  upsertJobOffer: ReturnJobOffer;
};

export type HrRecruitmentJobOfferMutationUpsertJobOfferArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: JobOfferInput;
};

export type HrRecruitmentJobOfferQuery = {
  getJobOffer: EachJobOfferRecords;
  listJobOffer: JobOfferConnection;
};

export type HrRecruitmentJobOfferQueryGetJobOfferArgs = {
  id: Scalars['ID'];
};

export type HrRecruitmentJobOfferQueryListJobOfferArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrRecruitmentJobOpeningMutation = {
  upsertJobOpening: ReturnJobOpening;
};

export type HrRecruitmentJobOpeningMutationUpsertJobOpeningArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: JobOpeningInput;
};

export type HrRecruitmentJobOpeningQuery = {
  getJobOpening: EachJobOpeningRecord;
  listJobOpening: JobOpeningConnection;
};

export type HrRecruitmentJobOpeningQueryGetJobOpeningArgs = {
  id: Scalars['ID'];
};

export type HrRecruitmentJobOpeningQueryListJobOpeningArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrRecruitmentMutation = {
  recruitment: HrRecruitmentStaffPlanningMutation;
  recruitmentAppointmentLetter: HrRecruitmentAppointmentLetterMutation;
  recruitmentJobApplication: HrRecruitmentJobApplicationMutation;
  recruitmentJobOffer: HrRecruitmentJobOfferMutation;
  recruitmentJobOpening: HrRecruitmentJobOpeningMutation;
};

export type HrRecruitmentQuery = {
  recruitment: HrRecruitmentStaffPlanningQuery;
  recruitmentAppointmentLetter: HrRecruitmentAppointmentLetterQuery;
  recruitmentJobApplication: HrRecruitmentJobApplicationQuery;
  recruitmentJobOffer: HrRecruitmentJobOfferQuery;
  recruitmentJobOpening: HrRecruitmentJobOpeningQuery;
};

export type HrRecruitmentStaffPlanningMutation = {
  upsertStaffPlan: ReturnStaffPlan;
};

export type HrRecruitmentStaffPlanningMutationUpsertStaffPlanArgs = {
  id?: InputMaybe<Scalars['ID']>;
  input: StaffPlanInput;
};

export type HrRecruitmentStaffPlanningQuery = {
  getStaffPlan: EachStaffRecord;
  listStaffPlanning: StaffPlanningConnection;
};

export type HrRecruitmentStaffPlanningQueryGetStaffPlanArgs = {
  id: Scalars['ID'];
};

export type HrRecruitmentStaffPlanningQueryListStaffPlanningArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HcmEmployeeHealthInsuranceListConnection = {
  edges?: Maybe<Array<Maybe<HcmEmployeeHealthInsuranceListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type HcmEmployeeHealthInsuranceListEdges = {
  cursor: Scalars['Cursor'];
  node: EmployeeHealthInsurance;
};

export type HcmPayrollSalaryStructureMutation = {
  upsertSalaryStructure: SalaryStructureOutput;
};

export type HcmPayrollSalaryStructureMutationUpsertSalaryStructureArgs = {
  id?: InputMaybe<Scalars['String']>;
  input: InputSalaryStructure;
};

export type HcmPayrollSalaryStructureQuery = {
  getSalaryStructure: GetSalaryStructureSchemaWithError;
  listSalaryStructure: SalaryStructureListConnection;
};

export type HcmPayrollSalaryStructureQueryGetSalaryStructureArgs = {
  id: Scalars['ID'];
};

export type HcmPayrollSalaryStructureQueryListSalaryStructureArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type HrEmployeeEducationDetail = {
  dateOfCompletion?: InputMaybe<Scalars['Localized']>;
  degree_diploma?: InputMaybe<Scalars['String']>;
  instituteName?: InputMaybe<Scalars['String']>;
  specialization?: InputMaybe<Scalars['String']>;
};

export type HrEmployeeEducationDetailType = {
  dateOfCompletion?: Maybe<Scalars['Localized']>;
  degree_diploma?: Maybe<Scalars['String']>;
  instituteName?: Maybe<Scalars['String']>;
  specialization?: Maybe<Scalars['String']>;
};

export type HrEmployeeWorkExperience = {
  address?: InputMaybe<Scalars['String']>;
  companyName?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  salary?: InputMaybe<Scalars['Int']>;
};

export type HrEmployeeWorkExperienceType = {
  address?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  salary?: Maybe<Scalars['Int']>;
};

export type HumanizeAuditLog = {
  extraData?: Maybe<Array<Maybe<Scalars['String']>>>;
  narration?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};

export const IbtStatus = {
  Completed: 'COMPLETED',
  Pending: 'PENDING',
} as const;

export type IbtStatus = typeof IbtStatus[keyof typeof IbtStatus];
export const IbtType = {
  Received: 'RECEIVED',
  Sent: 'SENT',
} as const;

export type IbtType = typeof IbtType[keyof typeof IbtType];
export const Id_Type = {
  Account: 'ACCOUNT',
  Address: 'ADDRESS',
  Bank: 'BANK',
  Bankbranch: 'BANKBRANCH',
  Branch: 'BRANCH',
  Chartsofaccount: 'CHARTSOFACCOUNT',
  Customfield: 'CUSTOMFIELD',
  Declaration: 'DECLARATION',
  Depositiro: 'DEPOSITIRO',
  Depositproduct: 'DEPOSITPRODUCT',
  Depositproductcriteria: 'DEPOSITPRODUCTCRITERIA',
  Deposittds: 'DEPOSITTDS',
  Document: 'DOCUMENT',
  Documentreference: 'DOCUMENTREFERENCE',
  Dynamicentry: 'DYNAMICENTRY',
  Formfield: 'FORMFIELD',
  Formoption: 'FORMOPTION',
  Formsection: 'FORMSECTION',
  Kymaccountoperatordetails: 'KYMACCOUNTOPERATORDETAILS',
  Kymcoopaccountoperatordetails: 'KYMCOOPACCOUNTOPERATORDETAILS',
  Kymcoopdirectordetails: 'KYMCOOPDIRECTORDETAILS',
  Kymcooperative: 'KYMCOOPERATIVE',
  Kymcooperativeunion: 'KYMCOOPERATIVEUNION',
  Kymcooperativeunionpers: 'KYMCOOPERATIVEUNIONPERS',
  Kymdocument: 'KYMDOCUMENT',
  Kymfield: 'KYMFIELD',
  Kymfieldoption: 'KYMFIELDOPTION',
  Kymidentification: 'KYMIDENTIFICATION',
  Kymindividual: 'KYMINDIVIDUAL',
  Kymindividualfamilymembers: 'KYMINDIVIDUALFAMILYMEMBERS',
  Kymindividualincomesource: 'KYMINDIVIDUALINCOMESOURCE',
  Kymindividualoccupation: 'KYMINDIVIDUALOCCUPATION',
  Kyminstitutions: 'KYMINSTITUTIONS',
  Kymsisterconcerndetails: 'KYMSISTERCONCERNDETAILS',
  Loanproduct: 'LOANPRODUCT',
  Loanproductcriteria: 'LOANPRODUCTCRITERIA',
  Member: 'MEMBER',
  Myrauser: 'MYRAUSER',
  Myrauseridetification: 'MYRAUSERIDETIFICATION',
  Organization: 'ORGANIZATION',
  Productdocument: 'PRODUCTDOCUMENT',
  Sharebalance: 'SHAREBALANCE',
  Shareextracharges: 'SHAREEXTRACHARGES',
  Sharenumbers: 'SHARENUMBERS',
  Shareregister: 'SHAREREGISTER',
  User: 'USER',
  Userpreference: 'USERPREFERENCE',
} as const;

export type Id_Type = typeof Id_Type[keyof typeof Id_Type];
export type Identity = {
  id: Scalars['ID'];
  name: Scalars['String'];
  userType: UserType;
  username: Scalars['String'];
};

export const IdetificationType = {
  Citizenship: 'CITIZENSHIP',
  DrivingLicense: 'DRIVING_LICENSE',
  NationalId: 'NATIONAL_ID',
  Passport: 'PASSPORT',
  VoterCard: 'VOTER_CARD',
} as const;

export type IdetificationType = typeof IdetificationType[keyof typeof IdetificationType];
export type InactivateMemberCheck = {
  isAccountClosed: Scalars['Boolean'];
  isShareReturned: Scalars['Boolean'];
};

export type IncompleteSection = {
  incomplete?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionName?: Maybe<Scalars['String']>;
};

export type IndFamilyMemberDetails = {
  dob?: Maybe<Scalars['Localized']>;
  fullName?: Maybe<Scalars['String']>;
  relationship?: Maybe<Scalars['String']>;
};

export type IndividualBasicMinInfo = {
  address?: Maybe<Scalars['Localized']>;
  addressId?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  familyMembers?: Maybe<Array<Maybe<FamilyMemberDetails>>>;
  fathersName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['Localized']>;
  genderId?: Maybe<Scalars['String']>;
  grandFathersName?: Maybe<Scalars['String']>;
  isStaff?: Maybe<Scalars['Boolean']>;
  maritalStatus?: Maybe<Scalars['Localized']>;
  maritalStatusId?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  mothersName?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
};

export type IndividualBio = {
  currentAddress?: Maybe<Scalars['Localized']>;
  dob?: Maybe<Scalars['Localized']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  familyMembers?: Maybe<Array<Maybe<IndFamilyMemberDetails>>>;
  gender?: Maybe<Scalars['Localized']>;
  identificationDetail?: Maybe<Array<Maybe<KymIndIdentification>>>;
  maritalStatus?: Maybe<Scalars['Localized']>;
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  mobile?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['Localized']>;
  profession?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
};

export type IndividualMember = {
  cooperativeMembership?: Maybe<KymCoopMembershipDetails>;
  declaration?: Maybe<KymIndDeclarations>;
  personalInformation?: Maybe<KymIndPersonalInformation>;
  professionalInformation?: Maybe<KymIndProfessionalInformation>;
};

export type IndividualMemberProfileReportResult = {
  data?: Maybe<IndividualMemberReportData>;
  error?: Maybe<QueryError>;
};

export type IndividualMemberReport = {
  address?: Maybe<Address>;
  contactNo?: Maybe<Scalars['String']>;
  kymExpiryDate?: Maybe<Scalars['Localized']>;
  kymStatus?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  membershipDate?: Maybe<Scalars['Localized']>;
  name?: Maybe<Scalars['Localized']>;
  panNo?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  riskCategory?: Maybe<OfficialUseRiskCategory>;
  shareCertificateNo?: Maybe<Scalars['String']>;
  totalShareCount?: Maybe<Scalars['Int']>;
};

export type IndividualMemberReportData = {
  closedAccountDetail?: Maybe<Array<Maybe<MemberClosedAccounts>>>;
  header?: Maybe<IndividualMemberReport>;
  loanDetail?: Maybe<Array<Maybe<MemberLoanDetail>>>;
  recentTransactions?: Maybe<Array<Maybe<MemberRecentTransactions>>>;
  savingDetail?: Maybe<Array<Maybe<MemberSavingDetail>>>;
  shareDetail?: Maybe<Array<Maybe<MemberShareDetail>>>;
  totalApprovedAmount?: Maybe<Scalars['String']>;
  totalGuaranteeBalance?: Maybe<Scalars['String']>;
  totalRemainingAmount?: Maybe<Scalars['String']>;
  totalSavingBalance?: Maybe<Scalars['String']>;
  totalShareBalance?: Maybe<Scalars['String']>;
  totalTransactionAmount?: Maybe<Scalars['String']>;
};

export const IndividualRequiredDocument = {
  Fingerprint: 'FINGERPRINT',
  Form: 'FORM',
  NomineeDocument: 'NOMINEE_DOCUMENT',
  Photo: 'PHOTO',
  Signature: 'SIGNATURE',
} as const;

export type IndividualRequiredDocument =
  typeof IndividualRequiredDocument[keyof typeof IndividualRequiredDocument];
export type InputDeductionComponent = {
  abbr: Scalars['String'];
  baseMultiple?: InputMaybe<Scalars['String']>;
  deductionFrequency?: InputMaybe<DeductionFrequencyEnum>;
  description?: InputMaybe<Scalars['String']>;
  makeThisActive?: InputMaybe<Scalars['Boolean']>;
  multiplier?: InputMaybe<Scalars['Float']>;
  name?: InputMaybe<Scalars['String']>;
  roundToNearestInteger?: InputMaybe<Scalars['Boolean']>;
};

export type InputSalaryStructure = {
  description?: InputMaybe<Scalars['String']>;
  makeThisActive?: InputMaybe<Scalars['Boolean']>;
  modeOfPayment?: InputMaybe<PaymentModeEnum>;
  name?: InputMaybe<Scalars['String']>;
  payrollFrequency?: InputMaybe<PayrollFrequencyEnum>;
  salaryDeduction?: InputMaybe<Array<InputMaybe<SalaryStructureDeductionDetails>>>;
  salaryEarnings?: InputMaybe<Array<InputMaybe<SalaryStructureEarningDetails>>>;
  salaryPaymentLedger?: InputMaybe<LedgerPaymentEnum>;
};

export type InsBankAcDetails = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['String']>;
};

export type InsContactDetails = {
  agmDetails?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  noOfEmployees?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
  poBoxNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type InsDeclaration = {
  address?: Maybe<Address>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type InsOperatorDetails = {
  contactNo?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  pemAddress?: Maybe<Address>;
  tempAddress?: Maybe<Address>;
};

export type InsOperatorInstructionDetails = {
  accountType?: Maybe<Scalars['String']>;
  specialInstruction?: Maybe<Scalars['String']>;
  stampCompulsory?: Maybe<Scalars['Boolean']>;
};

export type InsPartnerDirectorDetails = {
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  email?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permAddress?: Maybe<Address>;
  tempAddress?: Maybe<Address>;
};

export type InsRegistrationDetails = {
  address?: Maybe<Address>;
  issuingOffice?: Maybe<Scalars['String']>;
  registeredNumber?: Maybe<Scalars['String']>;
};

export type InsSisterConcernDetails = {
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type InsTransactionProfileDetails = {
  annualTurnover?: Maybe<Scalars['String']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['String']>;
  nature?: Maybe<Scalars['String']>;
};

export type Installment = {
  dueDate: Scalars['Localized'];
  fine?: Maybe<Scalars['String']>;
  monthName: Scalars['Localized'];
  number: Scalars['Int'];
  rebate?: Maybe<Scalars['String']>;
  status: InstallmentState;
};

export type InstallmentDetailsView = {
  installmentNo?: Maybe<Scalars['Int']>;
  interestAmount?: Maybe<Scalars['String']>;
  payment?: Maybe<Scalars['String']>;
  principalAmount?: Maybe<Scalars['String']>;
};

export const InstallmentFrequency = {
  Daily: 'DAILY',
  HalfYearly: 'HALF_YEARLY',
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
  Weekly: 'WEEKLY',
  Yearly: 'YEARLY',
} as const;

export type InstallmentFrequency = typeof InstallmentFrequency[keyof typeof InstallmentFrequency];
export type InstallmentResult = {
  data?: Maybe<Array<Maybe<Installment>>>;
  error?: Maybe<QueryError>;
};

export const InstallmentState = {
  Cancelled: 'CANCELLED',
  Overdue: 'OVERDUE',
  Paid: 'PAID',
  Pending: 'PENDING',
} as const;

export type InstallmentState = typeof InstallmentState[keyof typeof InstallmentState];
export type InstitutionBasicMinInfo = {
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['Localized']>;
  memberName?: Maybe<Scalars['String']>;
  nature?: Maybe<Scalars['String']>;
  noOfServiceCenters?: Maybe<Scalars['Int']>;
  profilePic?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  type?: Maybe<Scalars['String']>;
  vatPanNo?: Maybe<Scalars['String']>;
};

export type InstitutionBio = {
  addressDetails?: Maybe<Address>;
  bankAcDetails?: Maybe<InsBankAcDetails>;
  basicInfo?: Maybe<InstitutionBasicMinInfo>;
  contactDetails?: Maybe<InsContactDetails>;
  declaration?: Maybe<InsDeclaration>;
  docs?: Maybe<Array<Maybe<MemberDocumentDetails>>>;
  operatingOfficeAddress?: Maybe<Address>;
  operatorDetails?: Maybe<Array<Maybe<InsOperatorDetails>>>;
  operatorInstructionDetails?: Maybe<InsOperatorInstructionDetails>;
  partnerDirectorDetails?: Maybe<Array<Maybe<InsPartnerDirectorDetails>>>;
  registrationDetails?: Maybe<InsRegistrationDetails>;
  serviceCenterOfficeAddress?: Maybe<Address>;
  sisterConcernDetails?: Maybe<Array<Maybe<InsSisterConcernDetails>>>;
  transactionProfileDetails?: Maybe<InsTransactionProfileDetails>;
};

export const InstitutionExpectedMonthlyTransaction = {
  Above_25Lakhs: 'ABOVE_25_LAKHS',
  LessThan_10Lakhs: 'LESS_THAN_10_LAKHS',
  LessThan_25Lakhs: 'LESS_THAN_25_LAKHS',
} as const;

export type InstitutionExpectedMonthlyTransaction =
  typeof InstitutionExpectedMonthlyTransaction[keyof typeof InstitutionExpectedMonthlyTransaction];
export const InstitutionRequiredDocument = {
  Decision: 'DECISION',
  Registered: 'REGISTERED',
  Signature: 'SIGNATURE',
  TaxClearance: 'TAX_CLEARANCE',
} as const;

export type InstitutionRequiredDocument =
  typeof InstitutionRequiredDocument[keyof typeof InstitutionRequiredDocument];
export type Insurance = {
  amount?: Maybe<Scalars['Amount']>;
  rate?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['String']>;
};

export type InsuranceType = {
  amount?: InputMaybe<Scalars['Amount']>;
  rate?: InputMaybe<Scalars['Float']>;
  type?: InputMaybe<Scalars['String']>;
};

export type IntRange = {
  max: Scalars['Int'];
  min: Scalars['Int'];
};

export const InterestAuthority = {
  Board: 'BOARD',
  Ceo: 'CEO',
  Default: 'DEFAULT',
  UpdateInterest: 'UPDATE_INTEREST',
} as const;

export type InterestAuthority = typeof InterestAuthority[keyof typeof InterestAuthority];
export type InterestFormState = {
  additionalRate?: Maybe<Scalars['Float']>;
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  changeMax?: Maybe<Scalars['Float']>;
  changeMin?: Maybe<Scalars['Float']>;
  defaultRate?: Maybe<Scalars['Float']>;
  interestMethod?: Maybe<InterestMethod>;
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export const InterestMethod = {
  Diminishing: 'DIMINISHING',
  Flat: 'FLAT',
} as const;

export type InterestMethod = typeof InterestMethod[keyof typeof InterestMethod];
export type InterestPostingReportData = {
  accountNo?: Maybe<Scalars['String']>;
  accountType?: Maybe<NatureOfDepositProduct>;
  address?: Maybe<Address>;
  currentInterestRate?: Maybe<Scalars['Float']>;
  entries?: Maybe<Array<Maybe<InterestPostingReportEntry>>>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
};

export type InterestPostingReportEntry = {
  amount?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  days?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['Float']>;
  remarks?: Maybe<Scalars['String']>;
  tds?: Maybe<Scalars['String']>;
};

export type InterestPostingReportResult = {
  data?: Maybe<InterestPostingReportData>;
  error?: Maybe<QueryError>;
};

export type InterestRate = {
  additionalRate?: InputMaybe<Scalars['Float']>;
  boardAuthority?: InputMaybe<Scalars['Float']>;
  ceoAuthority?: InputMaybe<Scalars['Float']>;
  changeMax?: InputMaybe<Scalars['Float']>;
  changeMin?: InputMaybe<Scalars['Float']>;
  defaultRate?: InputMaybe<Scalars['Float']>;
  interestMethod?: InputMaybe<InterestMethod>;
  maxRate?: InputMaybe<Scalars['Float']>;
  minRate?: InputMaybe<Scalars['Float']>;
};

export type InterestRateSetup = {
  createdAt: Scalars['Localized'];
  effectiveDate: Scalars['Localized'];
  fileUploads?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  id: Scalars['ID'];
  note?: Maybe<Scalars['String']>;
  rate: Scalars['Float'];
};

export type InterestRateSetupInput = {
  effectiveDate: Scalars['Localized'];
  fileUploads?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  note?: InputMaybe<Scalars['String']>;
  rate: Scalars['Float'];
};

export type InterestRateType = {
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  changeMax?: Maybe<Scalars['Float']>;
  changeMin?: Maybe<Scalars['Float']>;
  defaultRate: Scalars['Float'];
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export type InterestSetupListResult = {
  data?: Maybe<Array<Maybe<InterestRateSetup>>>;
  error?: Maybe<QueryError>;
};

export type InterestSetupMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['ID']>;
};

export type InterestSetupQueryResult = {
  data?: Maybe<InterestRateSetup>;
  error?: Maybe<QueryError>;
};

export type InterestStatementFilter = {
  accountId: Scalars['ID'];
  filter?: InputMaybe<InterestStatementRangeFilter>;
  period: LocalizedDateFilter;
};

export type InterestStatementRangeFilter = {
  interestAmount?: InputMaybe<MinMaxFilter>;
};

export type InterestTaxFilter = {
  interestAmount?: InputMaybe<MinMaxFilter>;
  savingBalance?: InputMaybe<MinMaxFilter>;
  taxAmount?: InputMaybe<MinMaxFilter>;
};

export type InterestTaxReportEntry = {
  accountNo?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  branchId?: Maybe<Scalars['String']>;
  closingBalance?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  interest?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  panNo?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  savingBalance?: Maybe<Scalars['String']>;
  tax?: Maybe<Scalars['String']>;
  tdsType?: Maybe<Scalars['String']>;
};

export type InterestTaxReportFilter = {
  branchId: Array<Scalars['String']>;
  filter?: InputMaybe<InterestTaxFilter>;
  period: LocalizedDateFilter;
};

export type InterestTaxReportResult = {
  data?: Maybe<Array<Maybe<InterestTaxReportEntry>>>;
  error?: Maybe<QueryError>;
};

export type InvAddSupplierResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<InvSuppliersQuery>;
  record?: Maybe<InvSupplier>;
  recordId?: Maybe<Scalars['String']>;
};

export type InvAdjustmentEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<InventoryAdjustment>;
};

export type InvItems = {
  costPrice: Scalars['String'];
  id: Scalars['ID'];
  isVariantItem: Scalars['Boolean'];
  itemCode: Scalars['String'];
  itemQuantity: Scalars['String'];
  itemsInWarehouses?: Maybe<Scalars['Map']>;
  name: Scalars['String'];
  sellingPrice: Scalars['String'];
  taxId?: Maybe<Scalars['String']>;
  taxValue?: Maybe<Scalars['Float']>;
  type: Scalars['String'];
};

export type InvItemsAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<InvItemsQuery>;
  record?: Maybe<InvItems>;
  recordId?: Maybe<Scalars['ID']>;
};

export type InvItemsConnection = {
  edges?: Maybe<Array<Maybe<InvItemsEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvItemsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
  warehouseId?: InputMaybe<Scalars['String']>;
};

export type InvItemsEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<InvItems>;
};

export type InvItemsGroup = {
  description: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<InvItemsGroupQuery>;
  record?: Maybe<InvItemsGroup>;
  recordId?: Maybe<Scalars['ID']>;
};

export type InvItemsGroupConnection = {
  edges?: Maybe<Array<Maybe<InvItemsGroupEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvItemsGroupDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsGroupEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<InvItemsGroup>;
};

export type InvItemsGroupInput = {
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  parentCategory?: InputMaybe<Scalars['String']>;
};

export type InvItemsGroupMutation = {
  add: InvItemsGroupAddResult;
};

export type InvItemsGroupMutationAddArgs = {
  data: InvItemsGroupInput;
};

export type InvItemsGroupQuery = {
  get: InvItemsGroup;
  getGroupdetails: InventoryItemGroupDataResult;
  list?: Maybe<InvItemsGroupConnection>;
};

export type InvItemsGroupQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvItemsGroupQueryGetGroupdetailsArgs = {
  id: Scalars['ID'];
};

export type InvItemsGroupQueryListArgs = {
  filter?: InputMaybe<InvItemsGroupDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvItemsInput = {
  costPrice?: InputMaybe<Scalars['String']>;
  isVariantItem: Scalars['Boolean'];
  itemCode?: InputMaybe<Scalars['String']>;
  itemGroup?: InputMaybe<Scalars['String']>;
  itemName?: InputMaybe<Scalars['String']>;
  ledgers?: InputMaybe<InvItemsLedger>;
  primaryUnit?: InputMaybe<Scalars['String']>;
  reorderLevel?: InputMaybe<Scalars['String']>;
  sellingPrice?: InputMaybe<Scalars['String']>;
  tax?: InputMaybe<Scalars['String']>;
  valuationMethod?: InputMaybe<InvItemsValuationMethod>;
  variantList?: InputMaybe<Array<InputMaybe<ItemVariantDetail>>>;
  variants?: InputMaybe<Array<InputMaybe<InvItemsVariant>>>;
};

export type InvItemsLedger = {
  purchaseLedger?: InputMaybe<Scalars['String']>;
  purchaseReturnLedger?: InputMaybe<Scalars['String']>;
  salesLedger?: InputMaybe<Scalars['String']>;
  salesReturnLedger?: InputMaybe<Scalars['String']>;
};

export type InvItemsMutation = {
  add?: Maybe<InvItemsAddResult>;
};

export type InvItemsMutationAddArgs = {
  data: InvItemsInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type InvItemsQuery = {
  getItem: GetInventoryItemResponse;
  getItemDetails?: Maybe<InventoryItemDetailsResult>;
  getNewItemCode: Scalars['String'];
  list?: Maybe<InvItemsConnection>;
};

export type InvItemsQueryGetItemArgs = {
  id: Scalars['ID'];
};

export type InvItemsQueryGetItemDetailsArgs = {
  id: Scalars['ID'];
};

export type InvItemsQueryGetNewItemCodeArgs = {
  type?: InputMaybe<Scalars['String']>;
};

export type InvItemsQueryListArgs = {
  filter?: InputMaybe<InvItemsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export const InvItemsValuationMethod = {
  Fifo: 'FIFO',
} as const;

export type InvItemsValuationMethod =
  typeof InvItemsValuationMethod[keyof typeof InvItemsValuationMethod];
export type InvItemsVariant = {
  options?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  variantName?: InputMaybe<Scalars['String']>;
};

export type InvSupplier = {
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  location?: Maybe<Address>;
  name?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type InvSupplierConnection = {
  edges?: Maybe<Array<Maybe<InvSuppliersEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvSupplierFilter = {
  id?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvSupplierInput = {
  address?: InputMaybe<KymAddressInput>;
  applicationDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contactNo?: InputMaybe<Scalars['String']>;
  contactPersonName?: InputMaybe<Scalars['String']>;
  contactPersonPhoneNo?: InputMaybe<Scalars['String']>;
  creditLimit?: InputMaybe<Scalars['Float']>;
  creditTerms?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  legalStatusDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  openingBalance?: InputMaybe<Scalars['String']>;
  othersDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  panNo?: InputMaybe<Scalars['String']>;
  registrationDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  supplierCode?: InputMaybe<Scalars['String']>;
};

export type InvSupplierMutation = {
  add?: Maybe<InvAddSupplierResult>;
};

export type InvSupplierMutationAddArgs = {
  data?: InputMaybe<InvSupplierInput>;
  id?: InputMaybe<Scalars['ID']>;
};

export type InvSuppliersEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<InvSupplier>;
};

export type InvSuppliersQuery = {
  getSupplier?: Maybe<GetSupplierResponse>;
  list?: Maybe<InvSupplierConnection>;
  supplierDetail?: Maybe<InventorySupplierDetailResult>;
};

export type InvSuppliersQueryGetSupplierArgs = {
  id: Scalars['ID'];
};

export type InvSuppliersQueryListArgs = {
  filter?: InputMaybe<InvSupplierFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvSuppliersQuerySupplierDetailArgs = {
  id: Scalars['ID'];
};

export type InvUnitOfMeasure = {
  acceptFraction: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<InvUnitOfMeasureQuery>;
  record?: Maybe<InvUnitOfMeasure>;
  recordId?: Maybe<Scalars['ID']>;
};

export type InvUnitOfMeasureConnection = {
  edges?: Maybe<Array<Maybe<InvUnitOfMeasureEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvUnitOfMeasureDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvUnitOfMeasureEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<InvUnitOfMeasure>;
};

export type InvUnitOfMeasureInput = {
  acceptFraction?: InputMaybe<Scalars['Boolean']>;
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  shortName?: InputMaybe<Scalars['String']>;
};

export type InvUnitOfMeasureMutation = {
  add: InvUnitOfMeasureAddResult;
};

export type InvUnitOfMeasureMutationAddArgs = {
  data: InvUnitOfMeasureInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type InvUnitOfMeasureQuery = {
  get: InvUnitOfMeasure;
  getUnitDetails: InventoryUnitDataResult;
  getunit: GetUnitResponse;
  list?: Maybe<InvUnitOfMeasureConnection>;
};

export type InvUnitOfMeasureQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvUnitOfMeasureQueryGetUnitDetailsArgs = {
  id: Scalars['ID'];
};

export type InvUnitOfMeasureQueryGetunitArgs = {
  id: Scalars['ID'];
};

export type InvUnitOfMeasureQueryListArgs = {
  filter?: InputMaybe<InvUnitOfMeasureDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvVendors = {
  email: Scalars['String'];
  id: Scalars['ID'];
  location: Scalars['String'];
  name: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type InvVendorsAddResult = {
  error?: Maybe<InvVendorsError>;
  query?: Maybe<InvVendorsQuery>;
  record?: Maybe<InvVendors>;
  recordId: Scalars['ID'];
};

export type InvVendorsConnection = {
  edges: Array<Maybe<InvVendorsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvVendorsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvVendorsEdge = {
  cursor: Scalars['Cursor'];
  node: InvVendors;
};

export type InvVendorsError = InvVendorsInvalidDataError;

export type InvVendorsInput = {
  contactName: Scalars['String'];
  contactPhoneNo: Scalars['String'];
  creditLimit?: InputMaybe<Scalars['Float']>;
  creditTerms?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  location: Scalars['String'];
  name: Scalars['String'];
  openingBalance?: InputMaybe<Scalars['Float']>;
  panNo: Scalars['String'];
  phoneNumber: Scalars['String'];
  vendorCode: Scalars['String'];
};

export type InvVendorsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvVendorsMutation = {
  add: InvVendorsAddResult;
};

export type InvVendorsMutationAddArgs = {
  data: InvVendorsInput;
};

export type InvVendorsQuery = {
  get: InvVendors;
  list?: Maybe<InvVendorsConnection>;
};

export type InvVendorsQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvVendorsQueryListArgs = {
  filter?: InputMaybe<InvVendorsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InventoryAdjustment = {
  date?: Maybe<Scalars['Localized']>;
  entryNo?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
};

export type InventoryAdjustmentConnection = {
  edges?: Maybe<Array<Maybe<InvAdjustmentEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InventoryAdjustmentDetail = {
  code: Scalars['String'];
  createdBy: Scalars['String'];
  createdDate: Scalars['Time'];
  date: Scalars['Localized'];
  itemDetails?: Maybe<Array<Maybe<InventoryAdjustmentItemDetailsType>>>;
  modeOfAdjustment: InventoryAdjustmentMode;
  notes?: Maybe<Scalars['String']>;
  referenceNo: Scalars['String'];
};

export type InventoryAdjustmentDetailResult = {
  data?: Maybe<InventoryAdjustmentDetail>;
  error?: Maybe<QueryError>;
};

export type InventoryAdjustmentFilter = {
  id?: InputMaybe<Scalars['String']>;
};

export type InventoryAdjustmentInput = {
  code?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['Localized']>;
  description?: InputMaybe<Scalars['String']>;
  itemDetails?: InputMaybe<Array<InputMaybe<InventoryAdjustmentItemDetails>>>;
  modeOfAdjustment?: InputMaybe<InventoryAdjustmentMode>;
  referenceNumber?: InputMaybe<Scalars['String']>;
};

export type InventoryAdjustmentItemDetails = {
  itemId?: InputMaybe<Scalars['String']>;
  itemName?: InputMaybe<Scalars['String']>;
  newQuantity?: InputMaybe<Scalars['String']>;
  /** For value adjustment */
  newValue?: InputMaybe<Scalars['String']>;
  quantityAdjusted?: InputMaybe<Scalars['String']>;
  quantityAdjustedUnit?: InputMaybe<AdjustmentUnit>;
  valueAdjusted?: InputMaybe<Scalars['String']>;
  /** For quantity adjustment */
  warehouseId?: InputMaybe<Scalars['String']>;
  warehouseName?: InputMaybe<Scalars['String']>;
};

export type InventoryAdjustmentItemDetailsType = {
  itemId?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  newQuantity?: Maybe<Scalars['String']>;
  /** For value adjustment */
  newValue?: Maybe<Scalars['String']>;
  quantityAdjusted?: Maybe<Scalars['String']>;
  quantityAdjustedUnit?: Maybe<AdjustmentUnit>;
  valueAdjusted?: Maybe<Scalars['String']>;
  /** For quantity adjustment */
  warehouseId?: Maybe<Scalars['String']>;
  warehouseName?: Maybe<Scalars['String']>;
};

export const InventoryAdjustmentMode = {
  Quantity: 'QUANTITY',
  Value: 'VALUE',
} as const;

export type InventoryAdjustmentMode =
  typeof InventoryAdjustmentMode[keyof typeof InventoryAdjustmentMode];
export type InventoryAdjustmentMutation = {
  new?: Maybe<InventoryAdjustmentResult>;
};

export type InventoryAdjustmentMutationNewArgs = {
  data?: InputMaybe<InventoryAdjustmentInput>;
};

export type InventoryAdjustmentQuery = {
  detailAdjustment: InventoryAdjustmentDetailResult;
  list?: Maybe<InventoryAdjustmentConnection>;
};

export type InventoryAdjustmentQueryDetailAdjustmentArgs = {
  id: Scalars['ID'];
};

export type InventoryAdjustmentQueryListArgs = {
  filter?: InputMaybe<InventoryAdjustmentFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InventoryAdjustmentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<InventoryAdjustmentQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type InventoryItemDetails = {
  itemCode: Scalars['String'];
  itemGroup: Scalars['String'];
  itemName: Scalars['String'];
  ledgerDetail: InventoryItemLedgerDetail;
  reorderLevel?: Maybe<Scalars['String']>;
  tax?: Maybe<Scalars['String']>;
  unit: Scalars['String'];
  valuationMethod?: Maybe<InvItemsValuationMethod>;
  variants?: Maybe<Array<Maybe<InventoryItemVariantDetail>>>;
};

export type InventoryItemDetailsResult = {
  data?: Maybe<InventoryItemDetails>;
  error?: Maybe<QueryError>;
};

export type InventoryItemGroupData = {
  description?: Maybe<Scalars['String']>;
  groupId: Scalars['String'];
  groupName: Scalars['String'];
  underGroup?: Maybe<Scalars['String']>;
};

export type InventoryItemGroupDataResult = {
  data?: Maybe<InventoryItemGroupData>;
  error?: Maybe<QueryError>;
};

export type InventoryItemLedgerDetail = {
  purchaseLedger: Scalars['String'];
  purchaseReturnLedger: Scalars['String'];
  salesLedger: Scalars['String'];
  salesReturnLedger: Scalars['String'];
};

export type InventoryItemSummationData = {
  totalQuantityInStock?: Maybe<Scalars['String']>;
  totalQuantityPurchased: Scalars['String'];
  totalQuantitySoled?: Maybe<Scalars['String']>;
  totalStockValue?: Maybe<Scalars['String']>;
  totalStockValueVat?: Maybe<Scalars['String']>;
  totalVatAmount?: Maybe<Scalars['String']>;
};

export type InventoryItemVariantDetail = {
  costPrice?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  sellingPrice?: Maybe<Scalars['String']>;
  sku?: Maybe<Scalars['String']>;
};

export type InventoryMutation = {
  adjustment?: Maybe<InventoryAdjustmentMutation>;
  items?: Maybe<InvItemsMutation>;
  itemsGroup?: Maybe<InvItemsGroupMutation>;
  suppliers?: Maybe<InvSupplierMutation>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureMutation>;
  vendors?: Maybe<InvVendorsMutation>;
  warehouse?: Maybe<WarehouseMutation>;
};

export type InventoryQuery = {
  adjustment?: Maybe<InventoryAdjustmentQuery>;
  items?: Maybe<InvItemsQuery>;
  itemsGroup?: Maybe<InvItemsGroupQuery>;
  register?: Maybe<InventoryRegisterConnection>;
  suppliers?: Maybe<InvSuppliersQuery>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureQuery>;
  vendors?: Maybe<InvVendorsQuery>;
  warehouse?: Maybe<WarehouseQuery>;
};

export type InventoryQueryRegisterArgs = {
  filter?: InputMaybe<InventoryRegisterFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InventoryRegister = {
  id: Scalars['String'];
  itemCode: Scalars['String'];
  itemId: Scalars['String'];
  itemName: Scalars['String'];
  quantity: Scalars['String'];
  totalCost: Scalars['String'];
  transaction_type: InventoryTransactionType;
  unitPrice: Scalars['String'];
};

export type InventoryRegisterConnection = {
  edges?: Maybe<Array<Maybe<InventoryRegisterEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InventoryRegisterEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<InventoryRegister>;
};

export type InventoryRegisterFilter = {
  id?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InventoryRegistrationData = {
  itemId: Scalars['String'];
  itemName: Scalars['String'];
  pricePerUnit: Scalars['String'];
  quantityInStock?: Maybe<Scalars['String']>;
  quantityPurchased: Scalars['String'];
  quantitySoled?: Maybe<Scalars['String']>;
  reorderQuantityLevel?: Maybe<Scalars['String']>;
  stockValue?: Maybe<Scalars['String']>;
  stockValueVat?: Maybe<Scalars['String']>;
  vatAmount?: Maybe<Scalars['String']>;
  vatPercent: Scalars['String'];
};

export type InventoryRegistrationFilter = {
  period: LocalizedDateFilter;
  warehouseId?: InputMaybe<Array<Scalars['String']>>;
};

export type InventoryRegistrationReportResult = {
  data?: Maybe<Array<Maybe<InventoryRegistrationData>>>;
  error?: Maybe<QueryError>;
  total?: Maybe<InventoryItemSummationData>;
};

export type InventoryReport = {
  inventoryRegistrationReport?: Maybe<InventoryRegistrationReportResult>;
  inventoryStockStatusreport?: Maybe<InventoryStockStatusReportResult>;
  newinventoryStockStatusreport?: Maybe<InventoryStockStatusReportResult>;
};

export type InventoryReportInventoryRegistrationReportArgs = {
  data?: InputMaybe<InventoryRegistrationFilter>;
};

export type InventoryReportInventoryStockStatusreportArgs = {
  data?: InputMaybe<InventoryStockStatusFilter>;
};

export type InventoryReportNewinventoryStockStatusreportArgs = {
  data?: InputMaybe<InventoryStockStatusFilter>;
};

export type InventoryStockStatusData = {
  purchasedDate?: Maybe<Scalars['Localized']>;
  purchasedQuantity: Scalars['String'];
  soldDate?: Maybe<Scalars['Localized']>;
  soldQuantity: Scalars['String'];
  transferAcceptDate?: Maybe<Scalars['Localized']>;
  transferAcceptQuantity: Scalars['String'];
  transferSentDate?: Maybe<Scalars['Localized']>;
  transferSentQuantity: Scalars['String'];
};

export type InventoryStockStatusDataList = {
  lower?: Maybe<Array<Maybe<InventoryStockStatusData>>>;
  upper?: Maybe<InventoryStockStatusTotal>;
};

export type InventoryStockStatusFilter = {
  itemId: Array<Scalars['String']>;
  period: Scalars['Localized'];
  warehouseId: Array<Scalars['String']>;
};

export type InventoryStockStatusReportResult = {
  data?: Maybe<Array<Maybe<InventoryStockStatusDataList>>>;
  error?: Maybe<QueryError>;
};

export type InventoryStockStatusTotal = {
  itemCode: Scalars['String'];
  itemName: Scalars['String'];
  totalNet: Scalars['String'];
  totalPurchased: Scalars['String'];
  totalSoled: Scalars['String'];
  totalTransferIn: Scalars['String'];
  totalTransferOut: Scalars['String'];
  warehouseId: Scalars['String'];
  warehouseName: Scalars['String'];
};

export type InventorySupplierDetailData = {
  applicationDoc?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  contactNo: Scalars['String'];
  contactPersonName?: Maybe<Scalars['String']>;
  contactPersonPhoneNo?: Maybe<Scalars['String']>;
  creditLimit?: Maybe<Scalars['Float']>;
  creditTerms?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  legalStatusDoc?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  location?: Maybe<Address>;
  openingBalance?: Maybe<Scalars['String']>;
  othersDoc?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  panNo?: Maybe<Scalars['String']>;
  registrationDoc?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  supplierCode: Scalars['String'];
  supplierName: Scalars['String'];
};

export type InventorySupplierDetailResult = {
  data?: Maybe<InventorySupplierDetailData>;
  error?: Maybe<QueryError>;
};

export const InventoryTransactionType = {
  Purchase: 'PURCHASE',
  Sales: 'SALES',
} as const;

export type InventoryTransactionType =
  typeof InventoryTransactionType[keyof typeof InventoryTransactionType];
export type InventoryUnitData = {
  description?: Maybe<Scalars['String']>;
  shortName?: Maybe<Scalars['String']>;
  unitName: Scalars['String'];
};

export type InventoryUnitDataResult = {
  data?: Maybe<InventoryUnitData>;
  error?: Maybe<QueryError>;
};

export type InvestmentAccountInput = {
  address: KymAddressInput;
  branch: Scalars['String'];
  name: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type InvestmentEntry = {
  fd?: Maybe<FdInvestment>;
  investmentName: Scalars['String'];
  investmentType: InvestmentType;
  organizationID: Scalars['String'];
  saving?: Maybe<SavingInvestment>;
  share?: Maybe<ShareInvestment>;
};

export type InvestmentEntryEntry = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  type?: Maybe<InvestmentType>;
};

export type InvestmentEntryInput = {
  bankId?: InputMaybe<Scalars['String']>;
  fd?: InputMaybe<FdInvestmentInput>;
  investmentName: Scalars['String'];
  investmentType: InvestmentType;
  organizationID: Scalars['String'];
  saving?: InputMaybe<SavingInvestmentInput>;
  share?: InputMaybe<ShareInvestmentInput>;
};

export type InvestmentEntryListConnection = {
  edges?: Maybe<Array<Maybe<InvestmentEntryListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvestmentEntryListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<InvestmentEntryEntry>;
};

export type InvestmentTransactionEntry = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  type?: Maybe<InvestmentType>;
};

export type InvestmentTransactionInput = {
  bankId: Scalars['String'];
  entryID: Scalars['ID'];
  fd?: InputMaybe<InvestmentTransactionRecordInput>;
  investmentType?: InputMaybe<InvestmentType>;
  notes?: InputMaybe<Scalars['String']>;
  saving?: InputMaybe<InvestmentTransactionRecordInput>;
  share?: InputMaybe<ShareInvestmentTransactionInput>;
};

export type InvestmentTransactionListConnection = {
  edges?: Maybe<Array<Maybe<InvestmentTransactionListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type InvestmentTransactionListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<InvestmentTransactionEntry>;
};

export type InvestmentTransactionRecordInput = {
  amount: Scalars['String'];
  date: Scalars['Localized'];
  type: InvestmentTransactionType;
};

export const InvestmentTransactionType = {
  Deposit: 'DEPOSIT',
  Withdraw: 'WITHDRAW',
} as const;

export type InvestmentTransactionType =
  typeof InvestmentTransactionType[keyof typeof InvestmentTransactionType];
export const InvestmentType = {
  FixedDeposit: 'FIXED_DEPOSIT',
  Saving: 'SAVING',
  Share: 'SHARE',
} as const;

export type InvestmentType = typeof InvestmentType[keyof typeof InvestmentType];
export const IsOpenClosed = {
  Archived: 'ARCHIVED',
  Drafted: 'DRAFTED',
  Open: 'OPEN',
} as const;

export type IsOpenClosed = typeof IsOpenClosed[keyof typeof IsOpenClosed];
export type ItemDetails = {
  amount: Scalars['String'];
  itemName: Scalars['String'];
  quantity: Scalars['String'];
  rate: Scalars['String'];
};

export type ItemVariantDetail = {
  costPrice?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  itemName?: InputMaybe<Scalars['String']>;
  sellingPrice?: InputMaybe<Scalars['String']>;
  sku?: InputMaybe<Scalars['String']>;
};

export type JobApplicationConnection = {
  edges?: Maybe<Array<Maybe<JobApplications>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type JobApplicationInput = {
  applicantName?: InputMaybe<Scalars['String']>;
  applicationRating?: InputMaybe<Scalars['Float']>;
  applicationStatus?: InputMaybe<ApplicantStatus>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  educationalDetails?: InputMaybe<Array<InputMaybe<HrEmployeeEducationDetail>>>;
  experienceDetails?: InputMaybe<Array<InputMaybe<ExperienceInput>>>;
  jobOpening: Scalars['ID'];
  permanentAddress?: InputMaybe<KymAddressInput>;
  personalEmailAddress?: InputMaybe<Scalars['String']>;
  personalPhoneNumber?: InputMaybe<Scalars['String']>;
  tempSameAsPerm?: InputMaybe<Scalars['Boolean']>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type JobApplicationListed = {
  applicantStatus?: Maybe<ApplicantStatus>;
  id?: Maybe<Scalars['ID']>;
  jobPosting?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type JobApplicationRecord = {
  applicantName?: Maybe<Scalars['String']>;
  applicationRating?: Maybe<Scalars['Float']>;
  applicationStatus?: Maybe<ApplicantStatus>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  educationalDetails?: Maybe<Array<Maybe<HrEmployeeEducationDetailType>>>;
  experienceDetails?: Maybe<Array<Maybe<Experience>>>;
  id: Scalars['ID'];
  jobOpening?: Maybe<Scalars['ID']>;
  permanentAddress?: Maybe<KymAddress>;
  personalEmailAddress?: Maybe<Scalars['String']>;
  personalPhoneNumber?: Maybe<Scalars['String']>;
  tempSameAsPerm?: Maybe<Scalars['Boolean']>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type JobApplications = {
  cursor: Scalars['Cursor'];
  node: JobApplicationListed;
};

export type JobOfferConnection = {
  edges?: Maybe<Array<Maybe<JobOffers>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type JobOfferInput = {
  jobApplicant?: InputMaybe<Scalars['ID']>;
  jobDepartment?: InputMaybe<Scalars['ID']>;
  jobDesignation?: InputMaybe<Scalars['ID']>;
  jobOfferDate: Scalars['Localized'];
  jobOfferTerms: Array<JobOfferTermInput>;
  jobStatus: JobStatus;
};

export type JobOfferListed = {
  designation: Scalars['String'];
  email: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  offerDate: Scalars['Localized'];
  status: JobStatus;
};

export type JobOfferRecord = {
  id: Scalars['ID'];
  jobApplicant: Scalars['ID'];
  jobDepartment: Scalars['ID'];
  jobDesignation: Scalars['ID'];
  jobOfferDate: Scalars['Localized'];
  jobOfferTerms: Array<JobOfferTerm>;
  jobStatus: JobStatus;
};

export type JobOfferTerm = {
  offerTerm: Scalars['String'];
  value: Scalars['String'];
};

export type JobOfferTermInput = {
  offerTerm: Scalars['String'];
  value: Scalars['String'];
};

export type JobOffers = {
  cursor: Scalars['Cursor'];
  node: JobOfferListed;
};

export type JobOpeningConnection = {
  edges?: Maybe<Array<Maybe<JobOpenings>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type JobOpeningInput = {
  branchId?: InputMaybe<Scalars['String']>;
  department: Scalars['ID'];
  description: Scalars['String'];
  designation: Scalars['ID'];
  experienceLevel: Level;
  salaryRange: SalaryRangeInput;
  staffPlan: Scalars['ID'];
  title: Scalars['String'];
};

export type JobOpeningListed = {
  department: Scalars['ID'];
  designation: Scalars['ID'];
  id: Scalars['ID'];
  staffPlan: Scalars['ID'];
  status: IsOpenClosed;
  title: Scalars['String'];
};

export type JobOpeningRecord = {
  branchId?: Maybe<Scalars['String']>;
  department: Scalars['ID'];
  description: Scalars['String'];
  designation: Scalars['ID'];
  experienceLevel: Level;
  id: Scalars['ID'];
  salaryRange: SalaryRange;
  staffPlan: Scalars['ID'];
  title: Scalars['String'];
};

export type JobOpenings = {
  cursor: Scalars['Cursor'];
  node: JobOpeningListed;
};

export const JobStatus = {
  Accepted: 'ACCEPTED',
  AwaitingResponse: 'AWAITING_RESPONSE',
  Rejected: 'REJECTED',
} as const;

export type JobStatus = typeof JobStatus[keyof typeof JobStatus];
export type JournalChartsOfAccount = {
  journalCode: Scalars['String'];
};

export type JournalVoucher = {
  amount?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
};

export type JournalVoucherConnection = {
  edges?: Maybe<Array<Maybe<JournalVoucherEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type JournalVoucherDetail = {
  amount?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  creatorName?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id?: Maybe<Scalars['ID']>;
  note?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
};

export type JournalVoucherDetailResult = {
  data?: Maybe<JournalVoucherDetail>;
  error?: Maybe<QueryError>;
};

export type JournalVoucherEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<JournalVoucher>;
};

export type JournalVoucherEntry = {
  accountId: Scalars['String'];
  crAmount?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  drAmount?: InputMaybe<Scalars['String']>;
};

export type JournalVoucherEntryDetails = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type JournalVoucherEntryView = {
  accountId: Scalars['String'];
  crAmount?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  drAmount?: Maybe<Scalars['String']>;
};

export type JournalVoucherFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['String']>;
  transactionId?: InputMaybe<Scalars['String']>;
};

export type JournalVoucherInput = {
  chequeNo?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['Localized']>;
  entries?: InputMaybe<Array<InputMaybe<JournalVoucherEntry>>>;
  notes?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<JournalVoucherPaymentMode>;
  reference?: InputMaybe<Scalars['String']>;
};

export type JournalVoucherMutation = {
  new?: Maybe<JournalVoucherResult>;
};

export type JournalVoucherMutationNewArgs = {
  data?: InputMaybe<JournalVoucherInput>;
};

export const JournalVoucherPaymentMode = {
  Cash: 'CASH',
  Cheque: 'CHEQUE',
} as const;

export type JournalVoucherPaymentMode =
  typeof JournalVoucherPaymentMode[keyof typeof JournalVoucherPaymentMode];
export type JournalVoucherQuery = {
  list?: Maybe<JournalVoucherConnection>;
  viewJournalVoucherDetail?: Maybe<JournalVoucherDetailResult>;
};

export type JournalVoucherQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type JournalVoucherQueryViewJournalVoucherDetailArgs = {
  entryId: Scalars['ID'];
};

export type JournalVoucherRecord = {
  createdAt?: Maybe<Scalars['Localized']>;
  creatorId?: Maybe<Scalars['ID']>;
  creatorName?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  entries?: Maybe<Array<Maybe<JournalVoucherEntryDetails>>>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  note?: Maybe<Scalars['String']>;
  paymentMode?: Maybe<JournalVoucherPaymentMode>;
  reference?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['ID']>;
};

export type JournalVoucherResult = {
  error?: Maybe<MutationError>;
  jvRecordId?: Maybe<Scalars['String']>;
  query?: Maybe<JournalVoucherQuery>;
  record?: Maybe<JournalVoucherRecord>;
  recordId?: Maybe<Scalars['String']>;
};

export type KymAddress = {
  coordinates?: Maybe<Coordinate>;
  districtId?: Maybe<Scalars['Int']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['Localized']>;
  provinceId?: Maybe<Scalars['Int']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type KymAddressInput = {
  coordinates?: InputMaybe<CoordinateInput>;
  districtId?: InputMaybe<Scalars['Int']>;
  houseNo?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type KymDeclaration = Base & {
  content: Scalars['Localized'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  for: DeclarationFor;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type KymDynamicEntry = {
  fieldId: Scalars['String'];
  id: Scalars['ID'];
  value: Scalars['Localized'];
};

export type KymDynamicEntryFilter = {
  fieldName?: InputMaybe<Scalars['String']>;
  foreignId: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  sectionId?: InputMaybe<Scalars['String']>;
};

export type KymDynamicEntryResult = {
  data?: Maybe<Array<Maybe<KymDynamicEntry>>>;
  error?: Maybe<QueryError>;
};

export type KymEntryInput = {
  fieldId: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  parentSectionId: Scalars['String'];
  value: Scalars['Localized'];
};

export type KymEntryMutation = {
  upsertDynamic: KymEntryMutationResult;
};

export type KymEntryMutationUpsertDynamicArgs = {
  data: KymEntryInput;
};

export type KymEntryMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymEntryQuery>;
  record?: Maybe<KymDynamicEntry>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymEntryQuery = {
  getDynamic?: Maybe<KymDynamicEntryResult>;
};

export type KymEntryQueryGetDynamicArgs = {
  filter: KymDynamicEntryFilter;
};

export type KymFieldInputData = {
  id?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
};

export type KymGeneralSettingsMutation = {
  generalMember?: Maybe<GeneralMemberResult>;
};

export type KymGeneralSettingsMutationGeneralMemberArgs = {
  data: GeneralMemberInput;
};

export type KymGeneralSettingsQuery = {
  generalMember?: Maybe<GeneralMemberResult>;
};

export type KymIndFamilyMember = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  familyMemberId?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  relationshipId?: Maybe<Scalars['String']>;
};

export type KymIndFamilyMemberInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  dateOfBirth?: InputMaybe<Scalars['Localized']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  familyMemberId?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  relationshipId?: InputMaybe<Scalars['String']>;
};

export type KymIndFamilyMemberQueryResult = {
  data?: Maybe<Array<Maybe<KymIndFamilyMember>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndIdentification = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  idType: Scalars['String'];
  identificationNo?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
};

export type KymIndIdentificationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  date?: InputMaybe<Scalars['Localized']>;
  id?: InputMaybe<Scalars['String']>;
  idType: Scalars['String'];
  identificationNo?: InputMaybe<Scalars['String']>;
  place?: InputMaybe<Scalars['String']>;
};

export type KymIndIncomeSource = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  amount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  incomeSource?: Maybe<Scalars['String']>;
};

export type KymIndIncomeSourceInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  incomeSource?: InputMaybe<Scalars['String']>;
};

export type KymIndOccupation = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  address?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  establishedDate?: Maybe<Scalars['Localized']>;
  estimatedAnnualIncome?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['Boolean']>;
  occupationId?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['String']>;
  panVatNo?: Maybe<Scalars['String']>;
  registrationNo?: Maybe<Scalars['String']>;
};

export type KymIndOccupationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['Localized']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  isOwner?: InputMaybe<Scalars['Boolean']>;
  occupationId?: InputMaybe<Scalars['String']>;
  orgName?: InputMaybe<Scalars['String']>;
  panVatNo?: InputMaybe<Scalars['String']>;
  registrationNo?: InputMaybe<Scalars['String']>;
};

export type KymMutation = {
  general?: Maybe<KymGeneralSettingsMutation>;
};

export type KymQuery = {
  general?: Maybe<KymGeneralSettingsQuery>;
};

export type KymUpdateResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['String']>;
};

export type KymAdditionalFields = {
  fieldId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type KymAdditionalFieldsFormState = {
  fieldId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Localized']>;
};

export type KymAdditionalFieldsType = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type KymCoopAccountOperatorDetailsFormInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  coopRelatedTraining?: InputMaybe<Array<InputMaybe<CoopRelatedTraining>>>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  email?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymCoopDirectorDetailsFormInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  email?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymCoopMembershipDetails = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['ID']>;
  familyMemberInThisCooperative?: Maybe<Array<Maybe<KymFamilyMemberDetailsInThisCooperativeType>>>;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  loan?: Maybe<Scalars['Float']>;
  memberIdentityLevel?: Maybe<MemberIdentityLevel>;
  other?: Maybe<Scalars['Float']>;
  purposeId?: Maybe<Scalars['ID']>;
  savings?: Maybe<Scalars['Float']>;
  share?: Maybe<Scalars['Int']>;
};

export type KymCoopUnionAccountOperatorLus = {
  name: KymCoopUnionAccountOperatorSection;
};

export const KymCoopUnionAccountOperatorSection = {
  AccountOperatorsDetails: 'ACCOUNT_OPERATORS_DETAILS',
} as const;

export type KymCoopUnionAccountOperatorSection =
  typeof KymCoopUnionAccountOperatorSection[keyof typeof KymCoopUnionAccountOperatorSection];
export type KymCoopUnionAddFormStatus = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountOperators?: Maybe<Array<Maybe<CoopUnionPersonnelDetails>>>;
  administrativeExpense?: Maybe<Scalars['Float']>;
  applicantContactNo?: Maybe<Scalars['String']>;
  applicantDateOfMembership?: Maybe<Scalars['Localized']>;
  applicantDesignationEn?: Maybe<Scalars['String']>;
  applicantDesignationNp?: Maybe<Scalars['String']>;
  applicantEmail?: Maybe<Scalars['String']>;
  applicantHighestQualification?: Maybe<Scalars['String']>;
  applicantIsPermanentAndTemporaryAddrSame?: Maybe<Scalars['Boolean']>;
  applicantName?: Maybe<Scalars['String']>;
  applicantNameNp?: Maybe<Scalars['String']>;
  applicantPanNo?: Maybe<Scalars['String']>;
  applicantPermanentAddress?: Maybe<KymAddress>;
  applicantTemporaryAddress?: Maybe<KymAddress>;
  bankCurrent?: Maybe<Scalars['Float']>;
  bankTarget?: Maybe<Scalars['Float']>;
  branchOfficeAddress?: Maybe<KymAddress>;
  capitalGrantCurrent?: Maybe<Scalars['Float']>;
  capitalGrantTarget?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: Maybe<Scalars['Float']>;
  centralRepresentative?: Maybe<CoopUnionPersonnelDetails>;
  centralRepresentativeDirectorIndex?: Maybe<Scalars['Int']>;
  contactEmail?: Maybe<Scalars['String']>;
  currentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  currentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  declarationAgreement?: Maybe<Scalars['Boolean']>;
  deferredTaxExpense?: Maybe<Scalars['Float']>;
  directExpense?: Maybe<Scalars['Float']>;
  directors?: Maybe<Array<Maybe<CoopUnionPersonnelDetails>>>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  fax?: Maybe<Scalars['String']>;
  financialCost?: Maybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromInvestment?: Maybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromSales?: Maybe<Scalars['Float']>;
  incomeFromServiceOperation?: Maybe<Scalars['Float']>;
  institutionType?: Maybe<Scalars['ID']>;
  investmentsCurrent?: Maybe<Scalars['Float']>;
  investmentsTarget?: Maybe<Scalars['Float']>;
  issuingOffice?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['Localized']>;
  loanAccountCurrent?: Maybe<Scalars['Float']>;
  loanAccountTarget?: Maybe<Scalars['Float']>;
  loanCurrent?: Maybe<Scalars['Float']>;
  loanTarget?: Maybe<Scalars['Float']>;
  miscellaneousIncome?: Maybe<Scalars['Float']>;
  nameOfBank?: Maybe<Scalars['ID']>;
  nameOfInstitutionEn?: Maybe<Scalars['String']>;
  nameOfInstitutionNp?: Maybe<Scalars['String']>;
  natureOfBusinessEn?: Maybe<Scalars['String']>;
  natureOfBusinessNp?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  noOfEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: Maybe<Scalars['Int']>;
  noOfInstitutionalMemberCurrent?: Maybe<Scalars['Int']>;
  noOfInstitutionalMemberTarget?: Maybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfMaleMemberTarget?: Maybe<Scalars['Int']>;
  nonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  otherIncome?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  purchase?: Maybe<Scalars['Float']>;
  regdAddress?: Maybe<KymAddress>;
  regdDate?: Maybe<Scalars['Localized']>;
  regdNo?: Maybe<Scalars['String']>;
  reserveAndSurplusCurrent?: Maybe<Scalars['Float']>;
  reserveAndSurplusTarget?: Maybe<Scalars['Float']>;
  riskManagementCost?: Maybe<Scalars['Float']>;
  savingDepositCurrent?: Maybe<Scalars['Float']>;
  savingDepositTarget?: Maybe<Scalars['Float']>;
  shareCapitalCurrent?: Maybe<Scalars['Float']>;
  shareCapitalTarget?: Maybe<Scalars['Float']>;
  vatOrPan?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type KymCoopUnionAddLus =
  | KymCoopUnionAccountOperatorLus
  | KymCoopUnionBodlus
  | KymCoopUnionCentralRepresentativeLus
  | KymCoopUnionDeclarationLus
  | KymCoopUnionEconomicDetailsLus
  | KymCoopUnionInstitutionInformationLus;

export type KymCoopUnionBodlus = {
  name: KymCoopUnionBodSection;
};

export const KymCoopUnionBodSection = {
  BoardOfDirectorsDetails: 'BOARD_OF_DIRECTORS_DETAILS',
} as const;

export type KymCoopUnionBodSection =
  typeof KymCoopUnionBodSection[keyof typeof KymCoopUnionBodSection];
export type KymCoopUnionCentralRepresentativeLus = {
  name: KymCoopUnionCentralRepresentativeSection;
};

export const KymCoopUnionCentralRepresentativeSection = {
  CentralRepresentativeDetails: 'CENTRAL_REPRESENTATIVE_DETAILS',
} as const;

export type KymCoopUnionCentralRepresentativeSection =
  typeof KymCoopUnionCentralRepresentativeSection[keyof typeof KymCoopUnionCentralRepresentativeSection];
export type KymCoopUnionDeclarationLus = {
  name: KymCoopUnionDeclarationSection;
};

export const KymCoopUnionDeclarationSection = {
  DocumentsDeclaration: 'DOCUMENTS_DECLARATION',
} as const;

export type KymCoopUnionDeclarationSection =
  typeof KymCoopUnionDeclarationSection[keyof typeof KymCoopUnionDeclarationSection];
export type KymCoopUnionEconomicDetailsLus = {
  name: KymCoopUnionEconomicDetailsSection;
};

export const KymCoopUnionEconomicDetailsSection = {
  Assets: 'ASSETS',
  EquityAndLiabilities: 'EQUITY_AND_LIABILITIES',
  ExpenseDetails: 'EXPENSE_DETAILS',
  IncomeDetails: 'INCOME_DETAILS',
} as const;

export type KymCoopUnionEconomicDetailsSection =
  typeof KymCoopUnionEconomicDetailsSection[keyof typeof KymCoopUnionEconomicDetailsSection];
export type KymCoopUnionFormStateQuery = {
  data?: Maybe<KymCoopUnionAddFormStatus>;
  error?: Maybe<QueryError>;
};

export type KymCoopUnionInstitutionInformationLus = {
  name: KymCoopUnionInstitutionInformationSection;
};

export const KymCoopUnionInstitutionInformationSection = {
  Applicant: 'APPLICANT',
  BankDetails: 'BANK_DETAILS',
  BasicInformation: 'BASIC_INFORMATION',
  ContactDetails: 'CONTACT_DETAILS',
  CooperativeMemberInformation: 'COOPERATIVE_MEMBER_INFORMATION',
  RegisteredDetails: 'REGISTERED_DETAILS',
} as const;

export type KymCoopUnionInstitutionInformationSection =
  typeof KymCoopUnionInstitutionInformationSection[keyof typeof KymCoopUnionInstitutionInformationSection];
export type KymCoopUnionMutation = {
  add?: Maybe<CoopUnionInstitutionInformationResult>;
};

export type KymCoopUnionMutationAddArgs = {
  data: CoopUnionInstitutionInformationInput;
  forDraft?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymCoopUnionQuery = {
  formState?: Maybe<KymCoopUnionFormStateQuery>;
};

export type KymCoopUnionQueryFormStateArgs = {
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
};

export type KymCooperativeAccountOperatorDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  coopRelatedTraining?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type KymCooperativeAccountOperatorLus = {
  name: KymCooperativeAccountOperatorSection;
};

export const KymCooperativeAccountOperatorSection = {
  AccountOperatorsDetails: 'ACCOUNT_OPERATORS_DETAILS',
} as const;

export type KymCooperativeAccountOperatorSection =
  typeof KymCooperativeAccountOperatorSection[keyof typeof KymCooperativeAccountOperatorSection];
export type KymCooperativeAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
};

export type KymCooperativeAddFormStatus = {
  formData?: Maybe<KymCooperativeFormData>;
  lastUpdated?: Maybe<KymCooperativeAddLus>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymCooperativeAddLus =
  | KymCooperativeAccountOperatorLus
  | KymCooperativeBodlus
  | KymCooperativeDeclarationLus
  | KymCooperativeEconomicDetailsLus
  | KymCooperativeInstitutionInformationLus;

export type KymCooperativeAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymCooperativeQuery>;
  record?: Maybe<KymCooperativeGetResult>;
  recordId: Scalars['ID'];
};

export type KymCooperativeAddSectionStatus = {
  accountOperatorDetails?: Maybe<KymFormStatus>;
  bodDetails?: Maybe<KymFormStatus>;
  declaration?: Maybe<KymFormStatus>;
  economicDetails?: Maybe<KymFormStatus>;
  institutionInformation?: Maybe<KymFormStatus>;
};

export type KymCooperativeBodDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Localized']>;
  designation?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type KymCooperativeBodlus = {
  name: KymCooperativeBodSection;
};

export const KymCooperativeBodSection = {
  BoardOfDirectorsDetails: 'BOARD_OF_DIRECTORS_DETAILS',
} as const;

export type KymCooperativeBodSection =
  typeof KymCooperativeBodSection[keyof typeof KymCooperativeBodSection];
export type KymCooperativeBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
};

export type KymCooperativeDeclarationLus = {
  name: KymCooperativeDeclarationSection;
};

export const KymCooperativeDeclarationSection = {
  AccountHolderDeclaration: 'ACCOUNT_HOLDER_DECLARATION',
  DocumentDeclaration: 'DOCUMENT_DECLARATION',
} as const;

export type KymCooperativeDeclarationSection =
  typeof KymCooperativeDeclarationSection[keyof typeof KymCooperativeDeclarationSection];
export type KymCooperativeDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
};

export type KymCooperativeDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeEconomicDetailsLus = {
  name: KymCooperativeEconomicDetailsSection;
};

export const KymCooperativeEconomicDetailsSection = {
  Assets: 'ASSETS',
  EquityAndLiabilities: 'EQUITY_AND_LIABILITIES',
} as const;

export type KymCooperativeEconomicDetailsSection =
  typeof KymCooperativeEconomicDetailsSection[keyof typeof KymCooperativeEconomicDetailsSection];
export type KymCooperativeEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
};

export type KymCooperativeFormData = {
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountHoldersName?: Maybe<Scalars['String']>;
  accountOperator?: Maybe<Array<Maybe<KymCooperativeAccountOperatorDetailsFormState>>>;
  bank?: Maybe<Scalars['Float']>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeTypeId?: Maybe<Scalars['String']>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  directorDetails?: Maybe<Array<Maybe<KymCooperativeBodDetailsFormState>>>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  email?: Maybe<Scalars['String']>;
  hasTCAccepted?: Maybe<Scalars['Boolean']>;
  investments?: Maybe<Scalars['Float']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  lastAgmDate?: Maybe<Scalars['Localized']>;
  lastAuditDate?: Maybe<Scalars['Localized']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  operatingAddress?: Maybe<KymAddress>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  permanentRepresentativeAddress?: Maybe<KymAddress>;
  regdDate?: Maybe<Scalars['Localized']>;
  regdNumber?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  representativeContactNumber?: Maybe<Scalars['String']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeEmail?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  representativePanNo?: Maybe<Scalars['String']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
  temporaryRepresentativeAddress?: Maybe<KymAddress>;
  totalAssets?: Maybe<Scalars['Float']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  totalEquityAndLiabilities?: Maybe<Scalars['Float']>;
  vatNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type KymCooperativeFormInput = {
  accountHoldersName?: InputMaybe<Scalars['String']>;
  accountOperator?: InputMaybe<Array<InputMaybe<KymCoopAccountOperatorDetailsFormInput>>>;
  bank?: InputMaybe<Scalars['Float']>;
  capitalGrant?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalent?: InputMaybe<Scalars['Float']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  cooperativeTypeId?: InputMaybe<Scalars['String']>;
  currentLiabilities?: InputMaybe<Scalars['Float']>;
  directorDetails?: InputMaybe<Array<InputMaybe<KymCoopDirectorDetailsFormInput>>>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  email?: InputMaybe<Scalars['String']>;
  hasTCAccepted?: InputMaybe<Scalars['Boolean']>;
  investments?: InputMaybe<Scalars['Float']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  lastAgmDate?: InputMaybe<Scalars['Localized']>;
  lastAuditDate?: InputMaybe<Scalars['Localized']>;
  loan?: InputMaybe<Scalars['Float']>;
  loanAccount?: InputMaybe<Scalars['Float']>;
  mainServiceProduct?: InputMaybe<Scalars['String']>;
  nameOfOrganization?: InputMaybe<Scalars['String']>;
  noOfFemaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMembers?: InputMaybe<Scalars['Int']>;
  noOfMaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfMaleMembers?: InputMaybe<Scalars['Int']>;
  noOfOtherMembers?: InputMaybe<Scalars['Int']>;
  nonCurrentAssets?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilities?: InputMaybe<Scalars['Float']>;
  operatingAddress?: InputMaybe<KymAddressInput>;
  otherNonCurrentAssets?: InputMaybe<Scalars['Float']>;
  permanentRepresentativeAddress?: InputMaybe<KymAddressInput>;
  regdDate?: InputMaybe<Scalars['Localized']>;
  regdNumber?: InputMaybe<Scalars['String']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<KymAddressInput>;
  representativeContactNumber?: InputMaybe<Scalars['String']>;
  representativeDesignatiton?: InputMaybe<Scalars['String']>;
  representativeEmail?: InputMaybe<Scalars['String']>;
  representativeFullName?: InputMaybe<Scalars['String']>;
  representativePanNo?: InputMaybe<Scalars['String']>;
  reserveAndSurplus?: InputMaybe<Scalars['Float']>;
  savingDeposit?: InputMaybe<Scalars['Float']>;
  shareCapital?: InputMaybe<Scalars['Float']>;
  temporaryRepresentativeAddress?: InputMaybe<KymAddressInput>;
  totalAssets?: InputMaybe<Scalars['Float']>;
  totalEmployee?: InputMaybe<Scalars['Int']>;
  totalEquityLiabilities?: InputMaybe<Scalars['Float']>;
  vatNo?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeFormStateQuery = {
  data?: Maybe<KymCooperativeFormData>;
  error?: Maybe<QueryError>;
};

export type KymCooperativeGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymCooperativeAddFormStatus>;
};

export type KymCooperativeInstitutionInformationLus = {
  name: KymCooperativeInstitutionInformationSection;
};

export const KymCooperativeInstitutionInformationSection = {
  AdditionalCooperativeDetails: 'ADDITIONAL_COOPERATIVE_DETAILS',
  BasicInformation: 'BASIC_INFORMATION',
  ContactDetails: 'CONTACT_DETAILS',
  CooperativeDate: 'COOPERATIVE_DATE',
  CurrentMembers: 'CURRENT_MEMBERS',
  NumberOfEmployee: 'NUMBER_OF_EMPLOYEE',
  OperatingAddress: 'OPERATING_ADDRESS',
  RegisteredAddress: 'REGISTERED_ADDRESS',
  Representative: 'REPRESENTATIVE',
} as const;

export type KymCooperativeInstitutionInformationSection =
  typeof KymCooperativeInstitutionInformationSection[keyof typeof KymCooperativeInstitutionInformationSection];
export type KymCooperativeInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
};

export type KymCooperativeMutation = {
  add?: Maybe<KymCooperativeAddResult>;
};

export type KymCooperativeMutationAddArgs = {
  data: KymCooperativeFormInput;
  forDraft?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymCooperativeOverallFormStatus = {
  accountOperatorDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  coopDetails?: Maybe<KymFormStatus>;
  directorsDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymCooperativeQuery = {
  formState?: Maybe<KymCooperativeFormStateQuery>;
  overallFormStatus?: Maybe<KymCooperativeOverallFormStatus>;
};

export type KymCooperativeQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeQueryOverallFormStatusArgs = {
  id: Scalars['ID'];
};

export type KymDocuments = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsType = {
  documentsUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymFamilyDetails = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsType = {
  fullName?: Maybe<Scalars['String']>;
  relationshipId: Scalars['ID'];
};

export type KymFamilyMemberDetailsInThisCooperativeType = {
  fullName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  relationshipId: Scalars['ID'];
};

export type KymFormSectionStatus = {
  errors?: Maybe<Array<Scalars['String']>>;
  incomplete?: Maybe<Array<Scalars['String']>>;
};

export type KymFormStatus = {
  errors?: Maybe<Scalars['InvalidData']>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormSectionStatus>;
};

export type KymIdentification = {
  fields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymIdentificationType = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsType>>>;
  id?: Maybe<Scalars['ID']>;
};

export type KymIncomeSourceDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['Float']>;
  source?: InputMaybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsType = {
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIndAddError = KymIndAddInvalidDataError;

export type KymIndAddFormStatus = {
  lastUpdated?: Maybe<KymIndAddLus>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndAddInvalidDataError = {
  error?: Maybe<Array<Maybe<SectionWiseError>>>;
};

export type KymIndAddLus =
  | KymIndCooperativeLus
  | KymIndDeclarationLus
  | KymIndPersonalLus
  | KymIndProfessionalLus;

export type KymIndAddLastUpdated = {
  cooperativeMembership?: Maybe<KymIndCooperativeMemberStatus>;
  declaration?: Maybe<KymIndDeclarationStatus>;
  personal?: Maybe<KymIndPersonalStatus>;
  professional?: Maybe<KymIndProfessionalStatus>;
};

export type KymIndAddResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndCooperativeLus = {
  name: KymIndPersonalSection;
};

export const KymIndCooperativeMemberSection = {
  EstimatedAmount: 'ESTIMATED_AMOUNT',
  IsFamilyAMember: 'IS_FAMILY_A_MEMBER',
  MemberOfAnotherCooperative: 'MEMBER_OF_ANOTHER_COOPERATIVE',
  Purpose: 'PURPOSE',
  TransactionDetails: 'TRANSACTION_DETAILS',
} as const;

export type KymIndCooperativeMemberSection =
  typeof KymIndCooperativeMemberSection[keyof typeof KymIndCooperativeMemberSection];
export type KymIndCooperativeMemberStatus = {
  completed?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
  error?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
};

export type KymIndDeclarationLus = {
  name: KymIndPersonalSection;
};

export const KymIndDeclarationSection = {
  BeneficialOwner: 'BENEFICIAL_OWNER',
  Conviction: 'CONVICTION',
  FamilyMemberInPolitics: 'FAMILY_MEMBER_IN_POLITICS',
  ForeignResidentialPermit: 'FOREIGN_RESIDENTIAL_PERMIT',
} as const;

export type KymIndDeclarationSection =
  typeof KymIndDeclarationSection[keyof typeof KymIndDeclarationSection];
export type KymIndDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
};

export type KymIndDeclarations = {
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['ID']>;
  convictionDetails?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<KymDocumentsType>>>;
  foreignResidentialPermitDetails?: Maybe<Array<Maybe<KymIdentificationType>>>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  localKinAddress?: Maybe<Scalars['String']>;
  localKinContact?: Maybe<Scalars['String']>;
  localKinName?: Maybe<Scalars['String']>;
  localKinRelationshipId?: Maybe<Scalars['ID']>;
};

export type KymIndFormData = {
  age?: Maybe<Scalars['Int']>;
  annualIncomeSourceId?: Maybe<Scalars['String']>;
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['String']>;
  convictedDetails?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  declarationAgreement?: Maybe<Scalars['Boolean']>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  educationQualificationId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  estimatedAnnualDepositAmount?: Maybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['String']>;
  ethnicityId?: Maybe<Scalars['String']>;
  familyCoopMembers?: Maybe<Array<Maybe<KymIndFamilyMember>>>;
  familyMembers?: Maybe<Array<Maybe<KymIndFamilyMember>>>;
  firstIntroducerId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['Localized']>;
  foreignEmpCountryId?: Maybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: Maybe<Scalars['String']>;
  foreignResidentialPermitTypeId?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['Localized']>;
  genderId?: Maybe<Scalars['String']>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  identification?: Maybe<Array<Maybe<KymIndIdentification>>>;
  identificationSelection?: Maybe<Array<Maybe<Scalars['String']>>>;
  incomeSource?: Maybe<Array<Maybe<KymIndIncomeSource>>>;
  initialLoan?: Maybe<Scalars['String']>;
  initialSaving?: Maybe<Scalars['String']>;
  initialShare?: Maybe<Scalars['Int']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isFamilyAMember?: Maybe<Scalars['Boolean']>;
  isForeignEmployment?: Maybe<Scalars['Boolean']>;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['Localized']>;
  lastName?: Maybe<Scalars['Localized']>;
  mainOccupation?: Maybe<KymIndOccupation>;
  maritalStatusId?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['Localized']>;
  mobileNumber?: Maybe<Scalars['String']>;
  nationalityId?: Maybe<Scalars['String']>;
  otherCoopBranchId?: Maybe<Scalars['String']>;
  otherCoopMemberId?: Maybe<Scalars['String']>;
  otherCoopName?: Maybe<Scalars['String']>;
  otherFinancialAmount?: Maybe<Scalars['String']>;
  otherProfession?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  phoneNumber?: Maybe<Scalars['String']>;
  politicallyExposedDetails?: Maybe<Scalars['String']>;
  professionId?: Maybe<Array<Maybe<Scalars['String']>>>;
  purposeId?: Maybe<Scalars['String']>;
  religionId?: Maybe<Scalars['String']>;
  sameTempAsPermanentAddress?: Maybe<Scalars['Boolean']>;
  secondIntroducerId?: Maybe<Scalars['String']>;
  spouseOccupation?: Maybe<KymIndOccupation>;
  temporaryAddress?: Maybe<KymAddress>;
  typeOfVisaId?: Maybe<Scalars['String']>;
};

export type KymIndFormStateQuery = {
  data?: Maybe<KymIndFormData>;
  error?: Maybe<QueryError>;
};

export type KymIndMemberInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['String']>;
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['String']>;
  convictedDetails?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['Localized']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  educationQualificationId?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['String']>;
  familyCoopMembers?: InputMaybe<Array<InputMaybe<KymIndFamilyMemberInput>>>;
  familyMembers?: InputMaybe<Array<InputMaybe<KymIndFamilyMemberInput>>>;
  firstIntroducerId?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  foreignEmpCountryId?: InputMaybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  foreignResidentialPermitTypeId?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['String']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  identification?: InputMaybe<Array<InputMaybe<KymIndIdentificationInput>>>;
  identificationSelection?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  incomeSource?: InputMaybe<Array<InputMaybe<KymIndIncomeSourceInput>>>;
  initialLoan?: InputMaybe<Scalars['String']>;
  initialSaving?: InputMaybe<Scalars['String']>;
  initialShare?: InputMaybe<Scalars['Int']>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isFamilyAMember?: InputMaybe<Scalars['Boolean']>;
  isForeignEmployment?: InputMaybe<Scalars['Boolean']>;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  mainOccupation?: InputMaybe<KymIndOccupationInput>;
  maritalStatusId?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  nationalityId?: InputMaybe<Scalars['String']>;
  otherCoopBranchId?: InputMaybe<Scalars['String']>;
  otherCoopMemberId?: InputMaybe<Scalars['String']>;
  otherCoopName?: InputMaybe<Scalars['String']>;
  otherFinancialAmount?: InputMaybe<Scalars['String']>;
  otherProfession?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  politicallyExposedDetails?: InputMaybe<Scalars['String']>;
  professionId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purposeId?: InputMaybe<Scalars['String']>;
  religionId?: InputMaybe<Scalars['String']>;
  sameTempAsPermanentAddress?: InputMaybe<Scalars['Boolean']>;
  secondIntroducerId?: InputMaybe<Scalars['String']>;
  spouseOccupation?: InputMaybe<KymIndOccupationInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  typeOfVisaId?: InputMaybe<Scalars['String']>;
};

export type KymIndMutation = {
  add?: Maybe<KymIndAddResult>;
  addMinorFamliyMember?: Maybe<KymIndAddResult>;
};

export type KymIndMutationAddArgs = {
  data: KymIndMemberInput;
  forDraft?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymIndMutationAddMinorFamliyMemberArgs = {
  data: KymIndFamilyMemberInput;
  memberId: Scalars['ID'];
};

export type KymIndPersonalInformation = {
  contact?: Maybe<Contact>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  educationQualificationId?: Maybe<Scalars['ID']>;
  ethnicityId?: Maybe<Scalars['ID']>;
  familyDetails?: Maybe<Array<Maybe<KymFamilyDetailsType>>>;
  firstName: Scalars['String'];
  genderId?: Maybe<Scalars['ID']>;
  identification?: Maybe<Array<Maybe<KymIdentificationType>>>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['ID']>;
  middleName?: Maybe<Scalars['String']>;
  nationalityId?: Maybe<Scalars['ID']>;
  permanentAddress?: Maybe<Address>;
  religionId?: Maybe<Scalars['ID']>;
  temporaryAddress?: Maybe<Address>;
};

export type KymIndPersonalLus = {
  name: KymIndPersonalSection;
};

export const KymIndPersonalSection = {
  BasicInformation: 'BASIC_INFORMATION',
  ContactDetails: 'CONTACT_DETAILS',
  FamilyDetails: 'FAMILY_DETAILS',
  IdentificationDetails: 'IDENTIFICATION_DETAILS',
  PermanentAddress: 'PERMANENT_ADDRESS',
  RentedHouse: 'RENTED_HOUSE',
  TemporaryAddress: 'TEMPORARY_ADDRESS',
} as const;

export type KymIndPersonalSection =
  typeof KymIndPersonalSection[keyof typeof KymIndPersonalSection];
export type KymIndPersonalStatus = {
  completed?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
  error?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
};

export type KymIndProfessionalInformation = {
  annualIncomeSourceId?: Maybe<Scalars['ID']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymIncomeSourceDetailsType>>>;
  mainOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
  occupationId?: Maybe<Scalars['ID']>;
  spouseOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
};

export type KymIndProfessionalLus = {
  name: KymIndPersonalSection;
};

export const KymIndProfessionalSection = {
  IncomeSource: 'INCOME_SOURCE',
  MainProfession: 'MAIN_PROFESSION',
  Profession: 'PROFESSION',
  SpouseOccupation: 'SPOUSE_OCCUPATION',
} as const;

export type KymIndProfessionalSection =
  typeof KymIndProfessionalSection[keyof typeof KymIndProfessionalSection];
export type KymIndProfessionalStatus = {
  completed?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
  error?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
};

export type KymIndQuery = {
  formState?: Maybe<KymIndFormStateQuery>;
};

export type KymInsAccountLus = {
  name: KymInsAccountSection;
};

export type KymInsAccountOperatorInput = {
  contact?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export const KymInsAccountSection = {
  AccountOperationInstruction: 'ACCOUNT_OPERATION_INSTRUCTION',
  DetailsOfAccountOperators: 'DETAILS_OF_ACCOUNT_OPERATORS',
} as const;

export type KymInsAccountSection = typeof KymInsAccountSection[keyof typeof KymInsAccountSection];
export type KymInsAccountStatus = {
  completed?: Maybe<Array<Maybe<KymInsAccountSection>>>;
  error?: Maybe<Array<Maybe<KymInsAccountSection>>>;
};

export type KymInsAddLus =
  | KymInsAccountLus
  | KymInsDeclarationLus
  | KymInsDirectorDetailsLus
  | KymInsInformationLus
  | KymInsTransactionLus;

export type KymInsAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymInsQuery>;
  record?: Maybe<KymInsRecord>;
  recordId: Scalars['ID'];
};

export type KymInsAddSectionStatus = {
  account?: Maybe<KymInsAccountStatus>;
  declaration?: Maybe<KymInsDeclarationStatus>;
  directorDetails?: Maybe<KymInsDirectorDetailsStatus>;
  information?: Maybe<KymInsInformationStatus>;
  transaction?: Maybe<KymInsTransactionStatus>;
};

export type KymInsDeclarationLus = {
  name: KymInsDeclarationSection;
};

export const KymInsDeclarationSection = {
  AccountHolderDeclaration: 'ACCOUNT_HOLDER_DECLARATION',
  DocumentsDeclaration: 'DOCUMENTS_DECLARATION',
} as const;

export type KymInsDeclarationSection =
  typeof KymInsDeclarationSection[keyof typeof KymInsDeclarationSection];
export type KymInsDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
};

export type KymInsDirectorAffiliatedFirmInput = {
  address?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  directorName?: InputMaybe<Scalars['String']>;
  institutionName?: InputMaybe<Scalars['String']>;
  yearlyIncome?: InputMaybe<Scalars['Float']>;
};

export type KymInsDirectorDetailsLus = {
  name: KymInsDirectorDetailsSection;
};

export const KymInsDirectorDetailsSection = {
  DetailsOfDirectors: 'DETAILS_OF_DIRECTORS',
  DetailsOfDirectorsAffiliated: 'DETAILS_OF_DIRECTORS_AFFILIATED',
} as const;

export type KymInsDirectorDetailsSection =
  typeof KymInsDirectorDetailsSection[keyof typeof KymInsDirectorDetailsSection];
export type KymInsDirectorDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
};

export type KymInsDirectorInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Localized']>;
  designation?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  email?: InputMaybe<Scalars['String']>;
  firmDetails?: InputMaybe<KymInsDirectorAffiliatedFirmInput>;
  highestQualification?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  isAffiliatedWithOtherFirms?: InputMaybe<Scalars['Boolean']>;
  isHeadOfOrganization?: InputMaybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymInsFormData = {
  accountHolderAddress?: Maybe<KymAddress>;
  accountHolderEmail?: Maybe<Scalars['String']>;
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderPhone?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountOperator?: Maybe<Array<Maybe<AccountOperatorDetailsFormState>>>;
  accountType?: Maybe<AccountOperationType>;
  annualTurnover?: Maybe<Scalars['Float']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<KymAddress>;
  companyStamp?: Maybe<Scalars['String']>;
  dateOfLastAGM?: Maybe<Scalars['Localized']>;
  director?: Maybe<Array<Maybe<DirectorDetailsFormState>>>;
  documents?: Maybe<Array<Maybe<UploadedDocument>>>;
  email?: Maybe<Scalars['String']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionTypeId?: Maybe<Scalars['String']>;
  isCompanyStampCompulsory?: Maybe<Scalars['Boolean']>;
  issuingOffice?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Localized']>;
  sisterConcern?: Maybe<Array<Maybe<SisterConcernDetailsFormState>>>;
  specialInstruction?: Maybe<Scalars['String']>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type KymInsFormStateQuery = {
  data?: Maybe<KymInsFormData>;
  error?: Maybe<QueryError>;
};

export type KymInsFormStatus = {
  formData?: Maybe<KymInsFormData>;
  lastUpdated?: Maybe<KymInsAddLus>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymInsInformationLus = {
  name: KymInsInformationSection;
};

export const KymInsInformationSection = {
  BankAccountDetails: 'BANK_ACCOUNT_DETAILS',
  BasicInformation: 'BASIC_INFORMATION',
  ContactDetails: 'CONTACT_DETAILS',
  DetailsOfSisterConcern: 'DETAILS_OF_SISTER_CONCERN',
  RegisteredDetails: 'REGISTERED_DETAILS',
} as const;

export type KymInsInformationSection =
  typeof KymInsInformationSection[keyof typeof KymInsInformationSection];
export type KymInsInformationStatus = {
  completed?: Maybe<Array<Maybe<KymInsInformationSection>>>;
  error?: Maybe<Array<Maybe<KymInsInformationSection>>>;
};

export type KymInsInput = {
  accountHolderAddress?: InputMaybe<KymAddressInput>;
  accountHolderEmail?: InputMaybe<Scalars['String']>;
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderPhone?: InputMaybe<Scalars['String']>;
  accountHolderSignature?: InputMaybe<Scalars['String']>;
  accountHolderStamp?: InputMaybe<Scalars['String']>;
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountOperator?: InputMaybe<Array<InputMaybe<KymInsAccountOperatorInput>>>;
  accountType?: InputMaybe<AccountOperationType>;
  annualTurnover?: InputMaybe<Scalars['Float']>;
  bank?: InputMaybe<Scalars['ID']>;
  branchOfficeAddress?: InputMaybe<KymAddressInput>;
  companyStamp?: InputMaybe<Scalars['String']>;
  dateOfLastAGM?: InputMaybe<Scalars['Localized']>;
  director?: InputMaybe<Array<InputMaybe<KymInsDirectorInput>>>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  email?: InputMaybe<Scalars['String']>;
  expectedMonthlyTransaction?: InputMaybe<Scalars['String']>;
  expectedMonthlyTurnover?: InputMaybe<Scalars['String']>;
  fax?: InputMaybe<Scalars['String']>;
  initialDepositAmount?: InputMaybe<Scalars['Float']>;
  institutionName?: InputMaybe<Scalars['String']>;
  institutionTypeId?: InputMaybe<Scalars['String']>;
  isCompanyStampCompulsory?: InputMaybe<Scalars['Boolean']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  natureOfTransaction?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  numberOfEmployee?: InputMaybe<Scalars['Int']>;
  operatingOfficeAddress?: InputMaybe<KymAddressInput>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<KymAddressInput>;
  registeredNumber?: InputMaybe<Scalars['String']>;
  registrationDate?: InputMaybe<Scalars['Localized']>;
  sisterConcern?: InputMaybe<Array<InputMaybe<KymInsSisterConcernInput>>>;
  specialInstruction?: InputMaybe<Scalars['String']>;
  vatOrPanNo?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymInsMutation = {
  add?: Maybe<KymInsAddResult>;
};

export type KymInsMutationAddArgs = {
  data: KymInsInput;
  forDraft?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymInsOverallFormStatus = {
  accountOperatorDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  directorDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  institutionDetails?: Maybe<KymFormStatus>;
  sisterConcernDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymInsQuery = {
  formState?: Maybe<KymInsFormStateQuery>;
  overallFormStatus?: Maybe<KymInsOverallFormStatus>;
};

export type KymInsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryOverallFormStatusArgs = {
  id: Scalars['ID'];
};

export type KymInsRecord = {
  member: Member;
  sectionStatus?: Maybe<KymInsFormStatus>;
};

export type KymInsSisterConcernInput = {
  address?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type KymInsTransactionLus = {
  name: KymInsTransactionSection;
};

export const KymInsTransactionSection = {
  TransactionDetails: 'TRANSACTION_DETAILS',
} as const;

export type KymInsTransactionSection =
  typeof KymInsTransactionSection[keyof typeof KymInsTransactionSection];
export type KymInsTransactionStatus = {
  completed?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
  error?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
};

export type KymInstitutionDocumentsFormState = {
  agmBODDecisionDocument?: Maybe<Scalars['String']>;
  latestAuditReport?: Maybe<Scalars['String']>;
  moaAOA?: Maybe<Scalars['String']>;
  panCertificate?: Maybe<Scalars['String']>;
  registeredCertificate?: Maybe<Scalars['String']>;
  taxClearance?: Maybe<Scalars['String']>;
};

export type KymMemberListConnection = {
  edges?: Maybe<Array<Maybe<KymMemberListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type KymMemberListEdges = {
  cursor: Scalars['Cursor'];
  node: Member;
};

export type KymMemberTypes = {
  id: Scalars['ID'];
  type?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
};

export const KymMemberTypesEnum = {
  Cooperative: 'COOPERATIVE',
  CooperativeUnion: 'COOPERATIVE_UNION',
  Individual: 'INDIVIDUAL',
  Institution: 'INSTITUTION',
} as const;

export type KymMemberTypesEnum = typeof KymMemberTypesEnum[keyof typeof KymMemberTypesEnum];
export type KymOccupationDetailsType = {
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type KymStatusFilter = {
  riskCategory?: InputMaybe<RiskCategoryFilter>;
  status?: InputMaybe<ExpiryStatusFilter>;
};

export type KymStatusReport = {
  address?: Maybe<Address>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  kymExpireDays?: Maybe<Scalars['String']>;
  kymStatus?: Maybe<Scalars['String']>;
  lastKymUpdatedDate?: Maybe<Scalars['Localized']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['String']>;
  regDate?: Maybe<Scalars['Localized']>;
  riskCategory?: Maybe<RiskCategoryFilter>;
};

export type KymStatusReportFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<KymStatusFilter>;
  period: LocalizedDateFilter;
};

export type KymStatusReportResult = {
  Summary?: Maybe<Scalars['Map']>;
  data?: Maybe<Array<Maybe<KymStatusReport>>>;
  error?: Maybe<QueryError>;
  meta?: Maybe<Scalars['Map']>;
};

export type LabelValueArray = {
  label?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Any']>;
};

export type LadderRate = {
  amount: Scalars['Amount'];
  rate: Scalars['Float'];
  type: Scalars['String'];
};

export type LadderRateFormState = {
  amount: Scalars['Amount'];
  rate: Scalars['Float'];
  type: Scalars['String'];
};

export const Language = {
  English: 'ENGLISH',
  Nepali: 'NEPALI',
} as const;

export type Language = typeof Language[keyof typeof Language];
export type LeadgerHeadChangeResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type LeafCoaHeads = {
  Name: Scalars['String'];
  accountCode: Scalars['String'];
};

export type LeafCoaHeadsEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LeafCoaHeads>;
};

export type LeafCoaHeadsListConnection = {
  edges?: Maybe<Array<Maybe<LeafCoaHeadsEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type LeaveInput = {
  employeeId: Scalars['String'];
  leaveFrom: Scalars['Localized'];
  leaveNote: Scalars['String'];
  leaveTo: Scalars['Localized'];
  leaveTypeId: Scalars['ID'];
  status?: InputMaybe<LeaveStatusEnum>;
};

export type LeaveOutput = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type LeaveOutputType = {
  error?: Maybe<QueryError>;
  record?: Maybe<EmployeeLeaveTypeGet>;
};

export type LeavePolicyDetails = {
  annualAllocation?: InputMaybe<Scalars['Int']>;
  leaveTypeId?: InputMaybe<Scalars['String']>;
};

export type LeavePolicyGetDetails = {
  annualAllocation?: Maybe<Scalars['Int']>;
  leaveTypeId?: Maybe<Scalars['String']>;
};

export type LeavePolicyGetOutput = {
  error?: Maybe<QueryError>;
  record?: Maybe<EmployeeLeaveRecord>;
};

export type LeavePolicyInput = {
  description?: InputMaybe<Scalars['String']>;
  effectiveFrom?: InputMaybe<Scalars['Localized']>;
  employeeLevelId?: InputMaybe<Scalars['String']>;
  leavePolicyDetails?: InputMaybe<Array<InputMaybe<LeavePolicyDetails>>>;
  name?: InputMaybe<Scalars['String']>;
};

export type LeavePolicyOutput = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export const LeaveStatusEnum = {
  Approved: 'APPROVED',
  Declined: 'DECLINED',
  Pending: 'PENDING',
} as const;

export type LeaveStatusEnum = typeof LeaveStatusEnum[keyof typeof LeaveStatusEnum];
export const LeaveTypeEnum = {
  Paid: 'PAID',
  Unpaid: 'UNPAID',
} as const;

export type LeaveTypeEnum = typeof LeaveTypeEnum[keyof typeof LeaveTypeEnum];
export type LeaveTypeGetOutput = {
  error?: Maybe<QueryError>;
  record?: Maybe<LeaveTypeNode>;
};

export type LeaveTypeInput = {
  applicableAfter?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  fractionOfDailySalaryPerLeave?: InputMaybe<Scalars['Float']>;
  includeHolidaysWithLeavesAsLeaves?: InputMaybe<Scalars['Boolean']>;
  isCarriedForward?: InputMaybe<Scalars['Boolean']>;
  isCompensatory?: InputMaybe<Scalars['Boolean']>;
  isOptionalLeave?: InputMaybe<Scalars['Boolean']>;
  isPartiallyPaid?: InputMaybe<Scalars['Boolean']>;
  maximumContinuousDaysApplicable?: InputMaybe<Scalars['Int']>;
  maximumLeaveAllowed?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  typeOfLeave?: InputMaybe<LeaveTypeEnum>;
};

export type LeaveTypeNode = {
  applicableAfter?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  fractionOfDailySalaryPerLeave?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['String']>;
  includeHolidaysWithLeavesAsLeaves?: Maybe<Scalars['Boolean']>;
  isCarriedForward?: Maybe<Scalars['Boolean']>;
  isCompensatory?: Maybe<Scalars['Boolean']>;
  isOptionalLeave?: Maybe<Scalars['Boolean']>;
  isPartiallyPaid?: Maybe<Scalars['Boolean']>;
  maximumContinuousDaysApplicable?: Maybe<Scalars['Int']>;
  maximumLeaveAllowed?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  typeOfLeave?: Maybe<LeaveTypeEnum>;
};

export type LeaveTypeOutput = {
  error?: Maybe<MutationError>;
  recordId: Scalars['String'];
};

export type LedgerAllTransactionConnection = {
  edges?: Maybe<Array<Maybe<LedgerAllTransactionEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type LedgerAllTransactionEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<CoaDetailsRecentTxns>;
};

export const LedgerAmountTransferMode = {
  All: 'ALL',
  Even: 'EVEN',
  Manual: 'MANUAL',
} as const;

export type LedgerAmountTransferMode =
  typeof LedgerAmountTransferMode[keyof typeof LedgerAmountTransferMode];
export const LedgerAmountTransferType = {
  Credit: 'CREDIT',
  Debit: 'DEBIT',
} as const;

export type LedgerAmountTransferType =
  typeof LedgerAmountTransferType[keyof typeof LedgerAmountTransferType];
export type LedgerBalanceEntry = {
  currentBalance: BalanceValue;
  ledgerId: Scalars['String'];
  ledgerName: Scalars['String'];
  newBalance: BalanceValue;
  transferBalance: Scalars['String'];
};

export type LedgerBalanceListConnection = {
  edges?: Maybe<Array<Maybe<LedgerBalanceListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  summationData?: Maybe<LedgerBalanceSum>;
  totalCount: Scalars['Int'];
};

export type LedgerBalanceListEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<LedgerBalanceEntry>;
};

export type LedgerBalanceSum = {
  coaHeadName?: Maybe<Scalars['String']>;
  totalLedgerAccounts?: Maybe<Scalars['String']>;
  totalTransferBalance?: Maybe<Scalars['String']>;
};

export type LedgerBalanceTransferInput = {
  amount?: InputMaybe<Scalars['String']>;
  tagChoosen: Scalars['Boolean'];
  transferMode: LedgerAmountTransferMode;
};

export type LedgerBalanceTransferMutation = {
  initiateTransferRequest: LedgerBalanceTransferResult;
};

export type LedgerBalanceTransferMutationInitiateTransferRequestArgs = {
  input: LedgerBalanceTransferRequestInput;
};

export type LedgerBalanceTransferQuery = {
  getLedgerAccounts: LedgerBalanceTransferRequestResult;
  getLedgerList: LedgerBalanceListConnection;
};

export type LedgerBalanceTransferQueryGetLedgerAccountsArgs = {
  input: LedgerBalanceTransferRequestInput;
};

export type LedgerBalanceTransferQueryGetLedgerListArgs = {
  filter?: InputMaybe<Filter>;
  input: LedgerBalanceTransferInput;
  pagination?: InputMaybe<Pagination>;
};

export type LedgerBalanceTransferRequestInput = {
  amount?: InputMaybe<Scalars['String']>;
  amountType?: InputMaybe<LedgerAmountTransferType>;
  branchId?: InputMaybe<Scalars['String']>;
  closingDate: Scalars['Localized'];
  coaHead: Array<Scalars['String']>;
  destinationLedgerId?: InputMaybe<Scalars['String']>;
  ledgerType: LedgerType;
  tagId?: InputMaybe<Scalars['String']>;
  transferMode: LedgerAmountTransferMode;
};

export type LedgerBalanceTransferRequestResult = {
  data?: Maybe<Array<Maybe<LedgerBalanceEntry>>>;
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
  totalLedgerAccounts: Scalars['String'];
  totalTransferBalance: BalanceValue;
};

export type LedgerBalanceTransferResult = {
  data?: Maybe<LedgerBalanceTransferResultData>;
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LedgerBalanceTransferResultData = {
  destinationLedgerName: Scalars['String'];
  totalLedgerAccounts: Scalars['String'];
  totalTransferBalance: BalanceValue;
  transactionId: Scalars['String'];
};

export type LedgerList = {
  accountCode?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  ledgerName?: Maybe<Scalars['String']>;
  serviceCenter?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Boolean']>;
  tags?: Maybe<Array<Maybe<TagConciseEntry>>>;
};

export type LedgerListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LedgerList>;
};

export type LedgerMapping = {
  interestAccuredDaily?: InputMaybe<Scalars['String']>;
  interestIncome?: InputMaybe<Scalars['String']>;
  principal?: InputMaybe<Scalars['String']>;
};

export type LedgerMappingFormState = {
  interestAccuredDaily?: Maybe<Scalars['String']>;
  interestIncome?: Maybe<Scalars['String']>;
  principal?: Maybe<Scalars['String']>;
};

export const LedgerPaymentEnum = {
  LedgerPayment_1: 'LEDGER_PAYMENT_1',
  LedgerPayment_2: 'LEDGER_PAYMENT_2',
} as const;

export type LedgerPaymentEnum = typeof LedgerPaymentEnum[keyof typeof LedgerPaymentEnum];
export type LedgerTag = {
  createdAt?: Maybe<Scalars['Localized']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  ledgerCount?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

export type LedgerTagInput = {
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

export type LedgerTagsResult = {
  data?: Maybe<Array<Maybe<LedgerTag>>>;
  error?: Maybe<QueryError>;
};

export const LedgerType = {
  Both: 'BOTH',
  Credit: 'CREDIT',
  Debit: 'DEBIT',
} as const;

export type LedgerType = typeof LedgerType[keyof typeof LedgerType];
export type LedgersForJvListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<CoaAccount>;
};

export type LedgersForJvListResult = {
  edges?: Maybe<Array<Maybe<LedgersForJvListEdges>>>;
  error?: Maybe<QueryError>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type Level1 = {
  level2: Level2;
};

export type Level1Level2Args = {
  id: Scalars['String'];
};

export type Level2 = {
  add: Example;
  hello: Example;
};

export type Level2AddArgs = {
  data: ExampleInput;
};

export type Level2HelloArgs = {
  data: ExampleInput;
};

export const ListType = {
  All: 'ALL',
  NotPrinted: 'NOT_PRINTED',
  Printed: 'PRINTED',
} as const;

export type ListType = typeof ListType[keyof typeof ListType];
export type LoanAccReportDetails = {
  accountNo?: Maybe<Scalars['String']>;
  approvedAmount?: Maybe<Scalars['String']>;
  charge?: Maybe<Scalars['String']>;
  disbursedAmount?: Maybe<Scalars['String']>;
  installment?: Maybe<Scalars['Int']>;
  interestRate?: Maybe<Scalars['Float']>;
  issuedDate?: Maybe<Scalars['Localized']>;
  loanSubtype?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  openingBalance?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  tenureUnit?: Maybe<Scalars['String']>;
};

export type LoanAccount = {
  LoanAccountName?: Maybe<Scalars['String']>;
  appliedDate?: Maybe<Scalars['Localized']>;
  appliedLoanAmount: Scalars['String'];
  approvedDate?: Maybe<Scalars['Localized']>;
  branchId?: Maybe<Scalars['String']>;
  closedDate?: Maybe<Scalars['Localized']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  installmentFrequency?: Maybe<InstallmentFrequency>;
  intrestRate?: Maybe<Scalars['Float']>;
  isBoardAuthority?: Maybe<Scalars['Boolean']>;
  isCeoAuthority?: Maybe<Scalars['Boolean']>;
  justifySanction?: Maybe<Scalars['String']>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  member: Member;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  note?: Maybe<Scalars['String']>;
  objState: LoanObjState;
  product: LoanProduct;
  productSubType: LoanSettingsProductSubTypeData;
  productType: Scalars['ID'];
  remainingBalance?: Maybe<Scalars['String']>;
  remainingInterestTillDate?: Maybe<Scalars['String']>;
  repaymentScheme?: Maybe<LoanRepaymentScheme>;
  tenure?: Maybe<Scalars['Int']>;
  tenureType?: Maybe<FrequencyTenure>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
  totalValuation?: Maybe<Scalars['String']>;
};

export type LoanAccountCollateral = {
  allDocuments?: Maybe<Array<Scalars['String']>>;
  area?: Maybe<Scalars['Float']>;
  buildingType?: Maybe<BuildingType>;
  collateralDescription?: Maybe<Scalars['String']>;
  collateralFiles?: Maybe<Array<Scalars['String']>>;
  collateralID?: Maybe<Scalars['ID']>;
  collateralType?: Maybe<Scalars['String']>;
  collaterallValuation?: Maybe<Scalars['Amount']>;
  constructionType?: Maybe<ConstructionType>;
  description?: Maybe<Scalars['String']>;
  documentName?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<DocumentInfo>>>;
  dvMinAmount?: Maybe<Scalars['String']>;
  fmvMaxAmount?: Maybe<Scalars['Amount']>;
  kittaNo?: Maybe<Scalars['Int']>;
  noOfStorey?: Maybe<Scalars['Int']>;
  ownerName?: Maybe<Scalars['String']>;
  plotNo?: Maybe<Scalars['Int']>;
  relation?: Maybe<Scalars['String']>;
  sheetNo?: Maybe<Scalars['Int']>;
  status?: Maybe<GuaranteeStatus>;
  valuationAmount?: Maybe<Scalars['String']>;
  valuationFiles?: Maybe<Array<Scalars['String']>>;
  valuationMethod?: Maybe<ValuationMethod>;
  valuationPercent?: Maybe<Scalars['Float']>;
  valuatorId?: Maybe<Scalars['String']>;
  vehicleCapacity?: Maybe<Scalars['String']>;
  vehicleFuelType?: Maybe<Scalars['String']>;
  vehicleModelNo?: Maybe<Scalars['String']>;
  vehicleName?: Maybe<Scalars['String']>;
  vehicleNo?: Maybe<Scalars['String']>;
  vehicleRegistrationNo?: Maybe<Scalars['String']>;
  vehicleSeatCapacity?: Maybe<Scalars['Int']>;
  vehicleType?: Maybe<Scalars['String']>;
};

export type LoanAccountCollateralData = {
  area?: InputMaybe<Scalars['Float']>;
  buildingType?: InputMaybe<BuildingType>;
  collateralDescription?: InputMaybe<Scalars['String']>;
  collateralFiles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  collateralType?: InputMaybe<Scalars['String']>;
  collaterallValuation?: InputMaybe<Scalars['Amount']>;
  constructionType?: InputMaybe<ConstructionType>;
  description?: InputMaybe<Scalars['String']>;
  documentName?: InputMaybe<Scalars['String']>;
  dvMinAmount?: InputMaybe<Scalars['String']>;
  fmvMaxAmount?: InputMaybe<Scalars['Amount']>;
  kittaNo?: InputMaybe<Scalars['Int']>;
  noOfStorey?: InputMaybe<Scalars['Int']>;
  ownerName?: InputMaybe<Scalars['String']>;
  plotNo?: InputMaybe<Scalars['Int']>;
  relation?: InputMaybe<Scalars['String']>;
  sheetNo?: InputMaybe<Scalars['Int']>;
  valuationAmount?: InputMaybe<Scalars['String']>;
  valuationFiles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  valuationMethod?: InputMaybe<ValuationMethod>;
  valuationPercent?: InputMaybe<Scalars['Float']>;
  valuatorId?: InputMaybe<Scalars['String']>;
  vehicleCapacity?: InputMaybe<Scalars['String']>;
  vehicleFuelType?: InputMaybe<Scalars['String']>;
  vehicleModelNo?: InputMaybe<Scalars['String']>;
  vehicleName?: InputMaybe<Scalars['String']>;
  vehicleNo?: InputMaybe<Scalars['String']>;
  vehicleRegistrationNo?: InputMaybe<Scalars['String']>;
  vehicleSeatCapacity?: InputMaybe<Scalars['Int']>;
  vehicleType?: InputMaybe<Scalars['String']>;
};

export type LoanAccountCollateralDetails = {
  collateralList?: Maybe<Array<Maybe<LoanAccountCollateral>>>;
  noOfCollateral: Scalars['Int'];
  totalCollateralRelease: Scalars['String'];
  totalCollateralValuation: Scalars['String'];
};

export type LoanAccountCollateralResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId: Scalars['ID'];
};

export type LoanAccountConnection = {
  edges?: Maybe<Array<LoanAccountEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type LoanAccountDetailsResult = {
  collateral?: Maybe<LoanAccountCollateralDetails>;
  guarantee?: Maybe<LoanAccountGuaranteeDetails>;
  loanAccountId?: Maybe<Scalars['String']>;
  memberInfo?: Maybe<MemberOverview>;
  overView?: Maybe<LoanAccountOverview>;
};

export type LoanAccountDisbursement = {
  destinationAccount: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanAccountEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LoanAccount>;
};

export type LoanAccountFilterMapping = {
  id?: Maybe<Scalars['ID']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  objState?: Maybe<LoanObjState>;
  productID?: Maybe<Scalars['ID']>;
  productName: Array<LabelValueArray>;
};

export type LoanAccountFormState = {
  appliedLoanAmount?: Maybe<Scalars['String']>;
  collateralData?: Maybe<Array<Maybe<LoanAccountCollateral>>>;
  disbursementDate?: Maybe<Scalars['Localized']>;
  fingerprintDoc?: Maybe<Array<Maybe<Scalars['String']>>>;
  gracePeriod?: Maybe<LoanAccountGrace>;
  gurantee_details?: Maybe<Array<Maybe<LoanAccountGurantee>>>;
  installmentBeginDate?: Maybe<Scalars['Localized']>;
  installmentFrequency?: Maybe<InstallmentFrequency>;
  interestAuthority?: Maybe<InterestAuthority>;
  interestDoc?: Maybe<Array<Maybe<PictureData>>>;
  intrestRate?: Maybe<Scalars['Float']>;
  justifySanction?: Maybe<Scalars['String']>;
  linkedAccountId?: Maybe<Scalars['String']>;
  loanAccountName?: Maybe<Scalars['String']>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  memberId?: Maybe<Scalars['ID']>;
  nomineeDoc?: Maybe<Array<Maybe<Scalars['String']>>>;
  note?: Maybe<Scalars['String']>;
  photoDoc?: Maybe<Array<Maybe<Scalars['String']>>>;
  productId?: Maybe<Scalars['ID']>;
  productSubType?: Maybe<Scalars['ID']>;
  productType: Scalars['ID'];
  repaymentScheme?: Maybe<LoanRepaymentScheme>;
  signatureDoc?: Maybe<Array<Maybe<Scalars['String']>>>;
  tenure?: Maybe<Scalars['Int']>;
  tenureType?: Maybe<FrequencyTenure>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
  totalValuation?: Maybe<Scalars['String']>;
};

export type LoanAccountFormStateResult = {
  data?: Maybe<LoanAccountFormState>;
  error?: Maybe<QueryError>;
};

export type LoanAccountGrace = {
  gracePeriod?: Maybe<GracePeriod>;
  installmentNo?: Maybe<Scalars['Int']>;
  interestGracePeriod?: Maybe<Scalars['Int']>;
  principalGracePeriod?: Maybe<Scalars['Int']>;
};

export type LoanAccountGraceInput = {
  gracePeriod?: InputMaybe<GracePeriod>;
  installmentNo?: InputMaybe<Scalars['Int']>;
  interestGracePeriod?: InputMaybe<Scalars['Int']>;
  principalGracePeriod?: InputMaybe<Scalars['Int']>;
};

export type LoanAccountGracePeriodResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccountGrace>;
  recordId: Scalars['ID'];
};

export type LoanAccountGuaranteeDetails = {
  guaranteeList?: Maybe<Array<Maybe<LoanAccountGurantee>>>;
  noOfGuarantee: Scalars['Int'];
  totalGuaranteeRelease: Scalars['String'];
  totalGuaranteeValuation: Scalars['String'];
};

export type LoanAccountGuaranteeFilter = {
  status?: InputMaybe<GuaranteeStatus>;
};

export type LoanAccountGuaranteeReport = {
  disbursedAmount?: Maybe<Scalars['String']>;
  guarantorInformantion?: Maybe<Array<Maybe<LoanGuarantorInfo>>>;
  loanAccountNo?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['Localized']>;
  totalGuaranteeAmount?: Maybe<Scalars['String']>;
};

export type LoanAccountGuaranteeReportInput = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<LoanAccountGuaranteeFilter>;
  period: LocalizedDateFilter;
};

export type LoanAccountGuaranteeReportResult = {
  data?: Maybe<Array<Maybe<LoanAccountGuaranteeReport>>>;
  error?: Maybe<QueryError>;
};

export type LoanAccountGurantee = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  guaranteeId?: Maybe<Scalars['ID']>;
  guaranteeStatus?: Maybe<GuaranteeStatus>;
  guranteeAmount?: Maybe<Scalars['Amount']>;
  maxGuranteeAmountLimit?: Maybe<Scalars['Amount']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  status?: Maybe<GuaranteeStatus>;
  totalAmount?: Maybe<Scalars['Amount']>;
};

export type LoanAccountGuranteeInput = {
  accountId?: InputMaybe<Scalars['String']>;
  accountName?: InputMaybe<Scalars['String']>;
  guranteeAmount?: InputMaybe<Scalars['Amount']>;
  maxGuranteeAmountLimit?: InputMaybe<Scalars['Amount']>;
  memberId?: InputMaybe<Scalars['String']>;
  totalAmount?: InputMaybe<Scalars['Amount']>;
};

export type LoanAccountGuranteeResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccountGurantee>;
  recordId: Scalars['ID'];
};

export type LoanAccountInput = {
  appliedLoanAmount?: InputMaybe<Scalars['String']>;
  collateralData?: InputMaybe<Array<InputMaybe<LoanAccountCollateralData>>>;
  disbursementDate?: InputMaybe<Scalars['Localized']>;
  fingerprintDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  gurantee_details?: InputMaybe<Array<InputMaybe<LoanAccountGuranteeInput>>>;
  installmentBeginDate?: InputMaybe<Scalars['Localized']>;
  installmentFrequency?: InputMaybe<InstallmentFrequency>;
  interestAuthority?: InputMaybe<InterestAuthority>;
  interestDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  intrestRate?: InputMaybe<Scalars['Float']>;
  justifySanction?: InputMaybe<Scalars['String']>;
  linkedAccountId?: InputMaybe<Scalars['String']>;
  loanAccountName?: InputMaybe<Scalars['String']>;
  loanProcessingCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  memberId?: InputMaybe<Scalars['ID']>;
  nomineeDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  note?: InputMaybe<Scalars['String']>;
  photoDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  productId?: InputMaybe<Scalars['ID']>;
  productSubType?: InputMaybe<Scalars['ID']>;
  productType?: InputMaybe<Scalars['ID']>;
  repaymentScheme?: InputMaybe<LoanRepaymentScheme>;
  signatureDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tenure?: InputMaybe<Scalars['Int']>;
  tenureType?: InputMaybe<FrequencyTenure>;
  totalSanctionedAmount?: InputMaybe<Scalars['String']>;
  totalValuation?: InputMaybe<Scalars['String']>;
};

export type LoanAccountMinimal = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type LoanAccountMutation = {
  add?: Maybe<LoanAccountResult>;
  approveOrCancel?: Maybe<LoanAccountResult>;
  changeLOC?: Maybe<Scalars['String']>;
  close?: Maybe<LoanCloseResult>;
  disburse?: Maybe<LoanDisbursementResult>;
  editAccountInterest: InterestSetupMutationResult;
  loanCollateralActions?: Maybe<LoanCollateralActionsMutation>;
  loanGuaranteeActions?: Maybe<LoanGuaranteeActionsMutation>;
  loanProvision?: Maybe<LoanProvisionResult>;
  repayment?: Maybe<LoanRepaymentResult>;
  updateAccountInterest: InterestSetupMutationResult;
  updateLinkedAccount?: Maybe<LoanAccountResult>;
};

export type LoanAccountMutationAddArgs = {
  data?: InputMaybe<LoanAccountInput>;
  id: Scalars['ID'];
};

export type LoanAccountMutationApproveOrCancelArgs = {
  action: LoanApproveOrCancel;
  loanAccountId: Scalars['String'];
  remarks?: InputMaybe<Scalars['String']>;
};

export type LoanAccountMutationChangeLocArgs = {
  accountId: Scalars['ID'];
  newAmount: Scalars['String'];
};

export type LoanAccountMutationCloseArgs = {
  data?: InputMaybe<LoanRepaymentInput>;
};

export type LoanAccountMutationDisburseArgs = {
  data: LoanDisbursementInput;
  loanAccount: Scalars['ID'];
};

export type LoanAccountMutationEditAccountInterestArgs = {
  accountId: Scalars['ID'];
  data: InterestRateSetupInput;
  id: Scalars['ID'];
};

export type LoanAccountMutationLoanProvisionArgs = {
  data?: InputMaybe<LoanLossProvisionInput>;
};

export type LoanAccountMutationRepaymentArgs = {
  data?: InputMaybe<LoanRepaymentInput>;
};

export type LoanAccountMutationUpdateAccountInterestArgs = {
  accountId: Scalars['ID'];
  data: InterestRateSetupInput;
};

export type LoanAccountMutationUpdateLinkedAccountArgs = {
  loanAccountId: Scalars['ID'];
  newLinkedAccountId: Scalars['ID'];
};

export type LoanAccountOverview = {
  additionalFeatures?: Maybe<LoanPreviewAdditionalFeatures>;
  generalInformation?: Maybe<LoanGeneralInformation>;
  isClosed: Scalars['Boolean'];
  loanSchedule?: Maybe<LoanInstallments>;
  totalInterestPaid: Scalars['String'];
  totalPrincipalPaid: Scalars['String'];
  totalRemainingPrincipal: Scalars['String'];
  transactions?: Maybe<EbankingTransactionConnection>;
};

export type LoanAccountOverviewTransactionsArgs = {
  filter?: InputMaybe<EbankingTransactionFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanAccountPaymentScheduleResult = {
  data?: Maybe<LoanInstallments>;
  error?: Maybe<QueryError>;
};

export type LoanAccountPreview = {
  accountId?: Maybe<Scalars['String']>;
  additionalFeatures?: Maybe<LoanPreviewAdditionalFeatures>;
  collateralAndGuarantees?: Maybe<Array<Maybe<LoanCollateralAndGuarantees>>>;
  criteria?: Maybe<LoanProductCriteria>;
  generalInformation?: Maybe<LoanPreviewGeneralInformation>;
  idealSchedule?: Maybe<LoanInstallments>;
  loanDetails?: Maybe<LoanPreviewLoanDetails>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['String']>;
  paymentSchedule?: Maybe<LoanInstallments>;
  productId?: Maybe<Scalars['String']>;
  repaymentDetails?: Maybe<LoanPreviewRepaymentDetails>;
  statistics?: Maybe<LoanPreviewStatistics>;
};

export type LoanAccountPreviewResult = {
  data?: Maybe<LoanAccountPreview>;
  error?: Maybe<QueryError>;
};

export type LoanAccountQuery = {
  accountLOC?: Maybe<Scalars['String']>;
  filterMapping?: Maybe<LoanAccountFilterMapping>;
  formState?: Maybe<LoanAccountFormStateResult>;
  getAccountInterestRate: InterestSetupQueryResult;
  getLoanInstallments?: Maybe<LoanInstallmentResult>;
  getProductCriteria?: Maybe<LoanProductCriteriaResult>;
  getProductList?: Maybe<LoanProductList>;
  list?: Maybe<LoanAccountConnection>;
  listAccountInterestRates: InterestSetupListResult;
  loanAccountDetails?: Maybe<LoanAccountDetailsResult>;
  loanPreview?: Maybe<LoanAccountPreviewResult>;
  loanProvisionAccounts?: Maybe<LoanProvisionCase>;
  loanProvisionList?: Maybe<LoanProvisionConnection>;
  memberDisbursedLoanAccounts?: Maybe<Array<Maybe<LoanAccountMinimal>>>;
  paymentSchedule?: Maybe<LoanAccountPaymentScheduleResult>;
  remainingPayments?: Maybe<LoanAccountRemainingPaymentData>;
  repaymentList?: Maybe<LoanRepaymentConnection>;
};

export type LoanAccountQueryAccountLocArgs = {
  accountId: Scalars['ID'];
};

export type LoanAccountQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type LoanAccountQueryGetAccountInterestRateArgs = {
  accountID: Scalars['String'];
  id: Scalars['ID'];
};

export type LoanAccountQueryGetLoanInstallmentsArgs = {
  disburseDate?: InputMaybe<Scalars['Localized']>;
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  installmentBeginDate?: InputMaybe<Scalars['Localized']>;
  installmentFrequency?: InputMaybe<InstallmentFrequency>;
  interest: Scalars['Float'];
  productId: Scalars['ID'];
  repaymentScheme: LoanRepaymentScheme;
  sanctionAmount: Scalars['Int'];
  tenure: Scalars['Int'];
};

export type LoanAccountQueryGetProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type LoanAccountQueryGetProductListArgs = {
  memberId: Scalars['ID'];
  productSubTypeId: Scalars['ID'];
  productType: Scalars['ID'];
};

export type LoanAccountQueryListArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanAccountQueryListAccountInterestRatesArgs = {
  accountId: Scalars['ID'];
};

export type LoanAccountQueryLoanAccountDetailsArgs = {
  loanAccountId: Scalars['ID'];
};

export type LoanAccountQueryLoanPreviewArgs = {
  loanAccountId: Scalars['String'];
};

export type LoanAccountQueryLoanProvisionListArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanAccountQueryMemberDisbursedLoanAccountsArgs = {
  memberId: Scalars['ID'];
};

export type LoanAccountQueryPaymentScheduleArgs = {
  loanAccountId: Scalars['ID'];
};

export type LoanAccountQueryRemainingPaymentsArgs = {
  loanAccountId: Scalars['ID'];
};

export type LoanAccountQueryRepaymentListArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanAccountRemainingPayment = {
  totalInterest?: Maybe<Scalars['String']>;
  totalPayableAmount?: Maybe<Scalars['String']>;
  totalPenalty?: Maybe<Scalars['String']>;
  totalPrincipal?: Maybe<Scalars['String']>;
};

export type LoanAccountRemainingPaymentData = {
  data?: Maybe<LoanAccountRemainingPayment>;
  error?: Maybe<QueryError>;
};

export type LoanAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId: Scalars['ID'];
};

export type LoanAccrueBasicInfo = {
  accountId: Scalars['String'];
  accountName: Scalars['String'];
  accountSubType: Scalars['String'];
  accountType: Scalars['String'];
  address?: Maybe<Address>;
  approvedAmount: Scalars['String'];
  currentInterestRate: Scalars['Float'];
  disbursedAmount: Scalars['String'];
  loanIssueDate: Scalars['Localized'];
  memberCode: Scalars['String'];
  memberId: Scalars['String'];
  memberName: Scalars['String'];
  membershipDate: Scalars['Localized'];
  noOfInstallment: Scalars['Int'];
  serviceCentreId: Scalars['String'];
  serviceCentreName: Scalars['String'];
};

export type LoanAccruedInterestResult = {
  basicInfo?: Maybe<LoanAccrueBasicInfo>;
  data?: Maybe<Array<Maybe<AccrueInterestInfo>>>;
  error?: Maybe<QueryError>;
};

export type LoanAgingFilters = {
  disbursePrincipal?: InputMaybe<MinMaxFilter>;
  loanSubType?: InputMaybe<Scalars['String']>;
  loanType?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<LoanAgingPaymentMode>;
  remainingPrincipal?: InputMaybe<MinMaxFilter>;
};

export const LoanAgingPaymentMode = {
  All: 'ALL',
  HalfYearly: 'HALF_YEARLY',
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
  Yearly: 'YEARLY',
} as const;

export type LoanAgingPaymentMode = typeof LoanAgingPaymentMode[keyof typeof LoanAgingPaymentMode];
export const LoanAgingPeriod = {
  AboveTwelveMonths: 'ABOVE_TWELVE_MONTHS',
  All: 'ALL',
  Below_30Days: 'BELOW_30_DAYS',
  OneTwelveMonths: 'ONE_TWELVE_MONTHS',
} as const;

export type LoanAgingPeriod = typeof LoanAgingPeriod[keyof typeof LoanAgingPeriod];
export type LoanAgingPeriodInput = {
  period: LocalizedDateFilter;
  periodType: LoanAgingPeriod;
};

export type LoanAgingStatementData = {
  report?: Maybe<Array<Maybe<LoanAgingStatementReport>>>;
  summary?: Maybe<LoanAgingStatementSummary>;
};

export type LoanAgingStatementInput = {
  agingPeriod?: InputMaybe<LoanAgingPeriod>;
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<LoanAgingFilters>;
  period: LocalizedDateFilter;
};

export type LoanAgingStatementReport = {
  address?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  disbursePrincipal?: Maybe<Scalars['String']>;
  goodAmount?: Maybe<Scalars['String']>;
  installmentAmount?: Maybe<Scalars['String']>;
  installmentLateDays?: Maybe<Scalars['Int']>;
  issueDate?: Maybe<Scalars['Localized']>;
  lastInterestPaidDate?: Maybe<Scalars['Localized']>;
  lastPrincipalPaidDate?: Maybe<Scalars['Localized']>;
  loanMaturityDate?: Maybe<Scalars['Localized']>;
  loanNo?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  matured1To12Months?: Maybe<Scalars['String']>;
  matured1To30Days?: Maybe<Scalars['String']>;
  maturedAbove12Months?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  memberNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nextPaymentDate?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
  remainingInstallmentAmount?: Maybe<Scalars['String']>;
  remainingInterest?: Maybe<Scalars['String']>;
  remainingPenalty?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  tenure?: Maybe<Scalars['String']>;
  totalDueAmount?: Maybe<Scalars['String']>;
};

export type LoanAgingStatementReportResult = {
  data?: Maybe<LoanAgingStatementData>;
  error?: Maybe<QueryError>;
};

export type LoanAgingStatementSummary = {
  disbursePrincipalTotal?: Maybe<Scalars['String']>;
  dueAmountTotal?: Maybe<Scalars['String']>;
  goodAmountTotal?: Maybe<Scalars['String']>;
  installmentAmountTotal?: Maybe<Scalars['String']>;
  matured1To12MonthsTotal?: Maybe<Scalars['String']>;
  matured1To30DaysTotal?: Maybe<Scalars['String']>;
  maturedAbove12MonthsTotal?: Maybe<Scalars['String']>;
  remainingInstallmentAmountTotal?: Maybe<Scalars['String']>;
  remainingInterestTotal?: Maybe<Scalars['String']>;
  remainingPenaltyTotal?: Maybe<Scalars['String']>;
  remainingPrincipalTotal?: Maybe<Scalars['String']>;
};

export const LoanApproveOrCancel = {
  Approve: 'APPROVE',
  Cancel: 'CANCEL',
} as const;

export type LoanApproveOrCancel = typeof LoanApproveOrCancel[keyof typeof LoanApproveOrCancel];
export type LoanBalanceFilter = {
  age?: InputMaybe<Scalars['Int']>;
  gender?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  outstandingBalance?: InputMaybe<MinMaxFilter>;
  productNameIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  productSubTypes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  productTypes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type LoanBalanceFilterData = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<LoanBalanceFilter>;
  period: LocalizedDateFilter;
};

export type LoanBalanceReport = {
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  disbursedBalance?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['Float']>;
  isClosed?: Maybe<Scalars['Boolean']>;
  isInactive?: Maybe<Scalars['Boolean']>;
  lastPaymentDate?: Maybe<Scalars['Localized']>;
  loanAccountId?: Maybe<Scalars['String']>;
  loanEndDate?: Maybe<Scalars['Localized']>;
  loanType?: Maybe<AllLoanType>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  productCode?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  remainingCrBalance?: Maybe<Scalars['String']>;
  remainingDrBalance?: Maybe<Scalars['String']>;
  remainingInterest?: Maybe<Scalars['String']>;
  remainingInterestType?: Maybe<BalanceType>;
};

export type LoanBalanceReportResult = {
  data?: Maybe<Array<Maybe<LoanBalanceReport>>>;
  error?: Maybe<QueryError>;
  totalOutstandingBalance?: Maybe<Scalars['String']>;
  totalRemainingCrBalance?: Maybe<Scalars['String']>;
  totalRemainingDrBalance?: Maybe<Scalars['String']>;
  totalRemainingInterest?: Maybe<Scalars['String']>;
  totalRemainingInterestType?: Maybe<BalanceType>;
};

export type LoanBankDisbursement = {
  bankAccountId: Scalars['ID'];
  chequeNo: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanCallReport = {
  contactNo?: Maybe<Scalars['String']>;
  installmentAmount?: Maybe<Scalars['String']>;
  installmentDate?: Maybe<Scalars['Localized']>;
  installmentDueAmount?: Maybe<Scalars['String']>;
  installmentDueDays?: Maybe<Scalars['Int']>;
  loanAccountNo?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['Localized']>;
  serviceCenter?: Maybe<Scalars['String']>;
  totalInstallment?: Maybe<Scalars['String']>;
};

export type LoanCallReportAdditionalFilters = {
  amountRange?: InputMaybe<MinMaxFilter>;
};

export type LoanCallReportFilter = {
  accountTypeId?: InputMaybe<Array<Scalars['String']>>;
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<LoanCallReportAdditionalFilters>;
  period: LocalizedDateFilter;
};

export type LoanCallReportResult = {
  data?: Maybe<Array<Maybe<LoanCallReport>>>;
  error?: Maybe<QueryError>;
};

export type LoanCloseResponse = {
  accountID?: Maybe<Scalars['ID']>;
  accountName?: Maybe<Scalars['String']>;
  closedDate?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<AccountClosePaymentMode>;
  totalAmount?: Maybe<Scalars['String']>;
  totalFine?: Maybe<Scalars['String']>;
  totalInterest?: Maybe<Scalars['String']>;
  totalPrincipal?: Maybe<Scalars['String']>;
};

export type LoanCloseResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<LoanCloseResponse>;
  recordID?: Maybe<Scalars['ID']>;
};

export type LoanCollateralActionsMutation = {
  addCollateral?: Maybe<LoanCollateralActionsResult>;
  releaseCollateral?: Maybe<LoanCollateralActionsResult>;
  switchCollateral?: Maybe<LoanCollateralActionsResult>;
};

export type LoanCollateralActionsMutationAddCollateralArgs = {
  data?: InputMaybe<LoanAccountCollateralData>;
  loanAccountID: Scalars['ID'];
};

export type LoanCollateralActionsMutationReleaseCollateralArgs = {
  data: LoanCollateralReleaseInput;
};

export type LoanCollateralActionsMutationSwitchCollateralArgs = {
  data?: InputMaybe<LoanCollateralSwitchInput>;
  input?: InputMaybe<LoanAccountCollateralData>;
};

export type LoanCollateralActionsResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanCollateralAndGuarantees = {
  name?: Maybe<Scalars['String']>;
  valuation?: Maybe<Scalars['String']>;
};

export type LoanCollateralFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<LoanCollateralFilterDetail>;
  period: LocalizedDateFilter;
};

export type LoanCollateralFilterDetail = {
  collateralType?: InputMaybe<Array<Scalars['String']>>;
  loanType?: InputMaybe<Array<Scalars['String']>>;
  status?: InputMaybe<GuaranteeStatus>;
};

export type LoanCollateralInformation = {
  collateralDescription?: Maybe<Scalars['String']>;
  collateralType?: Maybe<Scalars['String']>;
  dvMinAmount?: Maybe<Scalars['String']>;
  fmvMaxAmount?: Maybe<Scalars['String']>;
  ownerName?: Maybe<Scalars['String']>;
  status?: Maybe<GuaranteeStatus>;
  valuationAmount?: Maybe<Scalars['String']>;
  valuationMethod?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
};

export type LoanCollateralInformationSummary = {
  totalValuationAmount?: Maybe<Scalars['String']>;
};

export type LoanCollateralReleaseInput = {
  collateralID: Scalars['ID'];
  files?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  loanAccountID: Scalars['ID'];
  note: Scalars['String'];
};

export type LoanCollateralReportResult = {
  data?: Maybe<Array<Maybe<MemberLoanInformation>>>;
  error?: Maybe<QueryError>;
};

export type LoanCollateralSwitchInput = {
  collateralID: Scalars['ID'];
  confirmSwitch: Scalars['Boolean'];
  loanAccountID: Scalars['ID'];
};

export type LoanDisbursementInput = {
  accountPayment?: InputMaybe<LoanAccountDisbursement>;
  amount: Scalars['String'];
  bankChequePayment?: InputMaybe<LoanBankDisbursement>;
  method: LoanDisbursementMethod;
};

export const LoanDisbursementMethod = {
  Account: 'ACCOUNT',
  BankCheque: 'BANK_CHEQUE',
} as const;

export type LoanDisbursementMethod =
  typeof LoanDisbursementMethod[keyof typeof LoanDisbursementMethod];
export type LoanDisbursementResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanFilters = {
  amountRange?: InputMaybe<SavingAmountRange>;
  service?: InputMaybe<SavingServiceType>;
  transactionType?: InputMaybe<SavingTransactionType>;
};

export type LoanGeneralInformation = {
  accountId: Scalars['String'];
  accountName: Scalars['String'];
  accountOpenDate: Scalars['Localized'];
  disbursedAmount?: Maybe<Scalars['String']>;
  installmentBeginDate: Scalars['Localized'];
  installmentFrequency?: Maybe<InstallmentFrequency>;
  interestAccrued?: Maybe<Scalars['String']>;
  interestEarned?: Maybe<Scalars['String']>;
  interestGracePeriod?: Maybe<Scalars['Int']>;
  interestRate: Scalars['Float'];
  linkedAccountId?: Maybe<Scalars['String']>;
  linkedAccountName?: Maybe<Scalars['String']>;
  loanAccountOpenBranchId: Scalars['String'];
  loanAccountOpenBranchName: Scalars['String'];
  principalGracePeriod?: Maybe<Scalars['Int']>;
  productId: Scalars['String'];
  productName: Scalars['String'];
  repaymentScheme: LoanRepaymentScheme;
  sanctionedAmount: Scalars['String'];
  tenure: Scalars['Int'];
  tenureUnit: Scalars['String'];
};

export type LoanGeneralSettings = {
  /** accepted collateral list */
  collateralList?: Maybe<Array<Maybe<CollateralListData>>>;
  /** loan repayment */
  emi?: Maybe<Scalars['Boolean']>;
  epi?: Maybe<Scalars['Boolean']>;
  flat?: Maybe<Scalars['Boolean']>;
};

export type LoanGeneralSettingsInput = {
  /** accepted collateral list */
  collateralList?: InputMaybe<Array<InputMaybe<CollateralListInputData>>>;
  /** loan repayment */
  emi?: InputMaybe<Scalars['Boolean']>;
  epi?: InputMaybe<Scalars['Boolean']>;
  flat?: InputMaybe<Scalars['Boolean']>;
};

export type LoanGuaranteeActionsInput = {
  loanAccID: Scalars['ID'];
  loanGuaranteeID: Scalars['ID'];
  partialReleaseInput?: InputMaybe<PartialReleaseGuaranteeInput>;
  releaseInput?: InputMaybe<ReleaseGuaranteeInput>;
  switchInput?: InputMaybe<SwitchGuaranteeInput>;
};

export type LoanGuaranteeActionsMutation = {
  addGuarantee?: Maybe<LoanGuaranteeActionsResult>;
  guaranteeActions?: Maybe<LoanGuaranteeActionsResult>;
};

export type LoanGuaranteeActionsMutationAddGuaranteeArgs = {
  data: LoanAccountGuranteeInput;
  loanAccountID: Scalars['ID'];
};

export type LoanGuaranteeActionsMutationGuaranteeActionsArgs = {
  actionType: GuaranteeActions;
  data?: InputMaybe<LoanGuaranteeActionsInput>;
};

export type LoanGuaranteeActionsResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanGuarantorInfo = {
  date?: Maybe<Scalars['Localized']>;
  depositAccountNo?: Maybe<Scalars['String']>;
  guaranteeAmount?: Maybe<Scalars['String']>;
  guaranteeStatus?: Maybe<GuaranteeStatus>;
  memCode?: Maybe<Scalars['String']>;
  memId?: Maybe<Scalars['ID']>;
  memName?: Maybe<Scalars['String']>;
};

export type LoanInstallment = {
  currentRemainingPrincipal: Scalars['String'];
  fullPrincipal?: Maybe<Scalars['String']>;
  installmentDate: Scalars['Localized'];
  installmentNo: Scalars['Int'];
  interest: Scalars['String'];
  isPartial?: Maybe<Scalars['Boolean']>;
  overDueDays?: Maybe<Scalars['Int']>;
  overdueAmount?: Maybe<Scalars['String']>;
  paidDate: Scalars['Localized'];
  payment: Scalars['String'];
  penalty?: Maybe<Scalars['String']>;
  principal: Scalars['String'];
  remainingInterest: Scalars['String'];
  remainingPrincipal: Scalars['String'];
  status?: Maybe<LoanInstallmentStatus>;
};

export type LoanInstallmentResult = {
  data?: Maybe<LoanInstallments>;
  error?: Maybe<QueryError>;
};

export const LoanInstallmentStatus = {
  Current: 'CURRENT',
  Overdue: 'OVERDUE',
  Paid: 'PAID',
  Partial: 'PARTIAL',
} as const;

export type LoanInstallmentStatus =
  typeof LoanInstallmentStatus[keyof typeof LoanInstallmentStatus];
export type LoanInstallments = {
  duesSince?: Maybe<Scalars['Localized']>;
  installments?: Maybe<Array<Maybe<LoanInstallment>>>;
  total: Scalars['String'];
  totalInterest?: Maybe<Scalars['String']>;
  totalOverduePayable?: Maybe<Scalars['String']>;
  totalOverduePrincipal?: Maybe<Scalars['String']>;
  totalPayableInterest?: Maybe<Scalars['String']>;
  totalPayablePrincipal?: Maybe<Scalars['String']>;
  totalPrincipal?: Maybe<Scalars['String']>;
  totalRemainingPayable?: Maybe<Scalars['String']>;
};

export const LoanInsurancePaymentType = {
  Amount: 'AMOUNT',
  Percentage: 'PERCENTAGE',
} as const;

export type LoanInsurancePaymentType =
  typeof LoanInsurancePaymentType[keyof typeof LoanInsurancePaymentType];
export type LoanInsuranceScheme = {
  id: Scalars['ID'];
  insuranceCompany?: Maybe<Scalars['String']>;
  insurancePremiumPercent?: Maybe<Scalars['Float']>;
  maxAmount?: Maybe<Scalars['String']>;
  maxPercent?: Maybe<Scalars['Float']>;
  minAmount?: Maybe<Scalars['String']>;
  minPercent?: Maybe<Scalars['Float']>;
  paymentFrequency?: Maybe<Frequency>;
  paymentType?: Maybe<LoanInsurancePaymentType>;
  schemeName?: Maybe<Scalars['String']>;
};

export type LoanInsuranceSchemeInput = {
  id?: InputMaybe<Scalars['String']>;
  insuranceCompany?: InputMaybe<Scalars['String']>;
  insurancePremiumPercent?: InputMaybe<Scalars['Float']>;
  maxAmount?: InputMaybe<Scalars['String']>;
  maxPercent?: InputMaybe<Scalars['Float']>;
  minAmount?: InputMaybe<Scalars['String']>;
  minPercent?: InputMaybe<Scalars['Float']>;
  paymentFrequency?: InputMaybe<Frequency>;
  paymentType?: InputMaybe<LoanInsurancePaymentType>;
  schemeName?: InputMaybe<Scalars['String']>;
};

export const LoanInterestMethod = {
  Diminishing: 'DIMINISHING',
  Straight: 'STRAIGHT',
} as const;

export type LoanInterestMethod = typeof LoanInterestMethod[keyof typeof LoanInterestMethod];
export type LoanLossProvisionInput = {
  note?: InputMaybe<Scalars['String']>;
  provision1To12M?: InputMaybe<ProvisionAccount>;
  provision1To30D?: InputMaybe<ProvisionAccount>;
  provisionAbove12M?: InputMaybe<ProvisionAccount>;
  provisionForAbove12Months?: InputMaybe<Scalars['Boolean']>;
  provisionForGoodLoan?: InputMaybe<Scalars['Boolean']>;
  provisionForMatured1To12Months?: InputMaybe<Scalars['Boolean']>;
  provisionForMatured1To30Days?: InputMaybe<Scalars['Boolean']>;
  provisionGood?: InputMaybe<ProvisionAccount>;
};

export type LoanNatureOfProductInput = {
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  natureOfProduct?: InputMaybe<Scalars['String']>;
};

export const LoanObjState = {
  Approved: 'APPROVED',
  Cancelled: 'CANCELLED',
  Completed: 'COMPLETED',
  Disbursed: 'DISBURSED',
  Submitted: 'SUBMITTED',
} as const;

export type LoanObjState = typeof LoanObjState[keyof typeof LoanObjState];
export const LoanPaymentInstallmentType = {
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
} as const;

export type LoanPaymentInstallmentType =
  typeof LoanPaymentInstallmentType[keyof typeof LoanPaymentInstallmentType];
export const LoanPaymentMode = {
  Installment: 'INSTALLMENT',
} as const;

export type LoanPaymentMode = typeof LoanPaymentMode[keyof typeof LoanPaymentMode];
export type LoanPenalty = {
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyRate?: Maybe<Scalars['Float']>;
  penaltyType?: Maybe<PenaltyType>;
};

export type LoanPreviewAdditionalFeatures = {
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  collateral?: Maybe<Scalars['Boolean']>;
  insurance?: Maybe<Scalars['Boolean']>;
  isMonthlyInterestCompulsory?: Maybe<Scalars['Boolean']>;
  loanScheduleChangeOverride?: Maybe<Scalars['Boolean']>;
  overrideInterest?: Maybe<Scalars['Boolean']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultipleAccount?: Maybe<Scalars['Boolean']>;
};

export type LoanPreviewGeneralInformation = {
  installmentFrequency?: Maybe<InstallmentFrequency>;
  loanName?: Maybe<Scalars['String']>;
  loanProduct?: Maybe<Scalars['String']>;
  loanSubType?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  natureOfLoanProduct?: Maybe<NatureOfLoanProduct>;
  penalty?: Maybe<LoanPenalty>;
  productCode?: Maybe<Scalars['String']>;
};

export type LoanPreviewInstallment = {
  fine?: Maybe<Scalars['String']>;
  installmentNo?: Maybe<Scalars['Int']>;
  interestAmount?: Maybe<Scalars['String']>;
  principal?: Maybe<Scalars['String']>;
};

export type LoanPreviewLoanDetails = {
  appliedLoanAmount?: Maybe<Scalars['String']>;
  disburseDate?: Maybe<Scalars['Localized']>;
  expiryDate?: Maybe<Scalars['String']>;
  /**  Extra fields for repayment page */
  interestAmount?: Maybe<Scalars['String']>;
  interestGracePeriod?: Maybe<Scalars['Int']>;
  interestMethod?: Maybe<LoanInterestMethod>;
  interestRate?: Maybe<Scalars['Float']>;
  loanRepaymentScheme?: Maybe<LoanRepaymentScheme>;
  paymentFrequency?: Maybe<LoanProductInstallment>;
  principalGracePeriod?: Maybe<Scalars['Int']>;
  processingCharges?: Maybe<Array<Maybe<ServiceCharge>>>;
  tenure?: Maybe<Scalars['Int']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  totalCollateralValuation?: Maybe<Scalars['String']>;
  totalDisbursedAmount?: Maybe<Scalars['String']>;
  totalGuaranteeValuation?: Maybe<Scalars['String']>;
  totalProcessingChargesValuation?: Maybe<Scalars['String']>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
};

export type LoanPreviewRepaymentDetails = {
  lastPaymentDate?: Maybe<Scalars['Localized']>;
  nextInstallmentNo?: Maybe<Scalars['Int']>;
  remainingInstallments?: Maybe<Array<Maybe<LoanPreviewInstallment>>>;
  remainingInterest?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  remainingTotal?: Maybe<Scalars['String']>;
  totalInstallmentAmount?: Maybe<Scalars['String']>;
};

export type LoanPreviewStatistics = {
  remainingPayableAmount?: Maybe<Scalars['String']>;
  totalPaidAmount?: Maybe<Scalars['String']>;
  totalPayableAmount?: Maybe<Scalars['String']>;
};

export type LoanProduct = Base & {
  allowGurantee?: Maybe<Scalars['Boolean']>;
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  collateralTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  collateralValue?: Maybe<Array<Maybe<CollateralFormState>>>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate: Scalars['String'];
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  description?: Maybe<Scalars['String']>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id: Scalars['ID'];
  insuranceType?: Maybe<Insurance>;
  interest?: Maybe<InterestRateType>;
  interestMaxGraceNumber?: Maybe<Scalars['Int']>;
  interestMethod?: Maybe<LoanInterestMethod>;
  isCollateralRequired?: Maybe<Scalars['Boolean']>;
  isInsuranceApplicable?: Maybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: Maybe<Scalars['Boolean']>;
  isPenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isRebateApplicable?: Maybe<Scalars['Boolean']>;
  isStaffProduct?: Maybe<Scalars['Boolean']>;
  isTenureApplicable?: Maybe<Scalars['Boolean']>;
  ledgerMapping?: Maybe<LedgerMappingFormState>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  loanScheduleChangeOverride?: Maybe<Scalars['Boolean']>;
  loanType: TypeOfLoan;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxLoanAmount?: Maybe<Scalars['Amount']>;
  maxPercentOfGurantee?: Maybe<Scalars['Float']>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  minimumLoanAmount?: Maybe<Scalars['Amount']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  noOfInactiveAccounts?: Maybe<Scalars['Int']>;
  noOfMember?: Maybe<Scalars['Int']>;
  noOfaccount?: Maybe<Scalars['Int']>;
  objState: ObjState;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penalty?: Maybe<LoanPenalty>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyRate?: Maybe<Scalars['Float']>;
  penaltyType?: Maybe<PenaltyType>;
  prematurePenaltySetup?: Maybe<PrematurePenaltyFormState>;
  principalMaxGraceNumber?: Maybe<Scalars['Int']>;
  productCode?: Maybe<ProductCodeType>;
  productCodeString?: Maybe<Scalars['String']>;
  productName: Scalars['String'];
  productNature: NatureOfLoanProduct;
  productPremiumInterest?: Maybe<Scalars['Float']>;
  productSubType: Scalars['String'];
  productType: Scalars['ID'];
  rebate?: Maybe<Rebate>;
  repaymentScheme?: Maybe<Array<Maybe<LoanRepaymentScheme>>>;
  requiredDocuments?: Maybe<Array<Maybe<LoanRequiredDocuments>>>;
  supportMultipleAccounts?: Maybe<Scalars['Boolean']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  typeOfMember: Array<Maybe<KymMemberTypesEnum>>;
  updateInterest?: Maybe<Scalars['Boolean']>;
  waiveInterest?: Maybe<Scalars['Boolean']>;
};

export type LoanProductBalanceReportFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  period: LocalizedDateFilter;
  productType?: InputMaybe<Array<Scalars['String']>>;
  totalBalance?: InputMaybe<IntRange>;
};

export type LoanProductBalanceReportInformation = {
  noOfOpeningAccounts?: Maybe<Scalars['Int']>;
  noOfTotalAccounts?: Maybe<Scalars['Int']>;
  openingLoanBalance?: Maybe<Scalars['String']>;
  productCode?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  productType?: Maybe<Scalars['String']>;
  totalLoanBalance?: Maybe<Scalars['String']>;
};

export type LoanProductBalanceReportResult = {
  data?: Maybe<Array<Maybe<LoanProductBalanceReportInformation>>>;
  error?: Maybe<QueryError>;
  summary?: Maybe<LoanProductBalanceReportSummary>;
};

export type LoanProductBalanceReportSummary = {
  noOfOpeningAccounts?: Maybe<Scalars['Int']>;
  noOfTotalAccounts?: Maybe<Scalars['Int']>;
  totalLoanBalance?: Maybe<Scalars['String']>;
  totalOpeningLoanBalance?: Maybe<Scalars['String']>;
};

export type LoanProductConnection = {
  edges: Array<LoanProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type LoanProductCriteria = {
  cooperativeType?: Maybe<Array<Maybe<Scalars['String']>>>;
  cooperativeUnion?: Maybe<Array<Maybe<Scalars['String']>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['String']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['String']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionType?: Maybe<Array<Maybe<Scalars['String']>>>;
  maritalStatus?: Maybe<Array<Maybe<Scalars['String']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LoanProductCriteriaResult = {
  data?: Maybe<LoanProductCriteria>;
  error?: Maybe<QueryError>;
};

export type LoanProductData = {
  data?: Maybe<LoanProduct>;
  error?: Maybe<QueryError>;
};

export type LoanProductEdge = {
  cursor: Scalars['Cursor'];
  node: LoanProduct;
};

export type LoanProductInactiveData = {
  id: Scalars['ID'];
  remarks: Scalars['String'];
};

export type LoanProductInactiveResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanProductsQuery>;
  recordId: Scalars['ID'];
};

export type LoanProductInput = {
  allowGurantee?: InputMaybe<Scalars['Boolean']>;
  allowPartialInstallment?: InputMaybe<Scalars['Boolean']>;
  collateralTypes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  collateralValue?: InputMaybe<Array<InputMaybe<CollateralInput>>>;
  cooperativeType?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  criteria?: InputMaybe<Array<InputMaybe<CriteriaSection>>>;
  description?: InputMaybe<Scalars['String']>;
  educationQualification?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  ethnicity?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  foreignEmployment?: InputMaybe<Scalars['Boolean']>;
  genderId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  insuranceType?: InputMaybe<InsuranceType>;
  interest?: InputMaybe<InterestRate>;
  interestMaxGraceNumber?: InputMaybe<Scalars['Int']>;
  interestMethod?: InputMaybe<LoanInterestMethod>;
  isCollateralRequired?: InputMaybe<Scalars['Boolean']>;
  isInsuranceApplicable?: InputMaybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: InputMaybe<Scalars['Boolean']>;
  isPenaltyApplicable?: InputMaybe<Scalars['Boolean']>;
  isPrematurePenaltyApplicable?: InputMaybe<Scalars['Boolean']>;
  isRebateApplicable?: InputMaybe<Scalars['Boolean']>;
  isStaffProduct?: InputMaybe<Scalars['Boolean']>;
  isTenureApplicable?: InputMaybe<Scalars['Boolean']>;
  ledgerMapping?: InputMaybe<LedgerMapping>;
  loanProcessingCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  loanScheduleChangeOverride?: InputMaybe<Scalars['Boolean']>;
  loanType?: InputMaybe<TypeOfLoan>;
  maritalStatusId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  maxAge?: InputMaybe<Scalars['Int']>;
  maxLoanAmount?: InputMaybe<Scalars['Amount']>;
  maxPercentOfGurantee?: InputMaybe<Scalars['Float']>;
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minimumLoanAmount?: InputMaybe<Scalars['Amount']>;
  natureOFBusinessCoop?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyDayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
  penaltyType?: InputMaybe<PenaltyType>;
  prematurePenaltySetup?: InputMaybe<PrematurePenalty>;
  principalMaxGraceNumber?: InputMaybe<Scalars['Int']>;
  productCode?: InputMaybe<ProductCode>;
  productName?: InputMaybe<Scalars['String']>;
  productNature?: InputMaybe<NatureOfLoanProduct>;
  productPremiumInterest?: InputMaybe<Scalars['Float']>;
  productSubType?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['ID']>;
  rebate?: InputMaybe<RebateTypeInput>;
  repaymentScheme?: InputMaybe<Array<InputMaybe<LoanRepaymentScheme>>>;
  requiredDocuments?: InputMaybe<Array<InputMaybe<LoanRequiredDocuments>>>;
  supportMultipleAccounts?: InputMaybe<Scalars['Boolean']>;
  tenureUnit?: InputMaybe<FrequencyTenure>;
  typeOfMember?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  updateInterest?: InputMaybe<Scalars['Boolean']>;
  waiveInterest?: InputMaybe<Scalars['Boolean']>;
};

export const LoanProductInstallment = {
  Daily: 'DAILY',
  HalfYearly: 'HALF_YEARLY',
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
  Weekly: 'WEEKLY',
  Yearly: 'YEARLY',
} as const;

export type LoanProductInstallment =
  typeof LoanProductInstallment[keyof typeof LoanProductInstallment];
export type LoanProductList = {
  allowed?: Maybe<Array<Maybe<LoanProduct>>>;
  error?: Maybe<QueryError>;
  notAllowed?: Maybe<Array<Maybe<LoanProductListData>>>;
};

export type LoanProductListData = {
  data?: Maybe<LoanProduct>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LoanProductMinimal = {
  id: Scalars['ID'];
  productName: Scalars['String'];
};

export type LoanProductSearchFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<DepositProductStatus>;
  productCode?: InputMaybe<Scalars['String']>;
  productName?: InputMaybe<Scalars['String']>;
  productSubType?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export const LoanProductSubType = {
  AgricultureBusiness: 'AGRICULTURE_BUSINESS',
  BigIndustrial: 'BIG_INDUSTRIAL',
  BioGas: 'BIO_GAS',
  BusinessLineOfCredit: 'BUSINESS_LINE_OF_CREDIT',
  CashCropsFraming: 'CASH_CROPS_FRAMING',
  ConstructionEquipmentBusiness: 'CONSTRUCTION_EQUIPMENT_BUSINESS',
  ConsumerGoodsBusiness: 'CONSUMER_GOODS_BUSINESS',
  CooperativePromotion: 'COOPERATIVE_PROMOTION',
  Emergency: 'EMERGENCY',
  ForeignEducation: 'FOREIGN_EDUCATION',
  ForeignEmployeeDependentVisa: 'FOREIGN_EMPLOYEE_DEPENDENT_VISA',
  ForeignEmployeeWorkingVisa: 'FOREIGN_EMPLOYEE_WORKING_VISA',
  FruitsAndHorticulture: 'FRUITS_AND_HORTICULTURE',
  HandicraftPromotional: 'HANDICRAFT_PROMOTIONAL',
  HigherEducation: 'HIGHER_EDUCATION',
  HirePurchaseLoan_2Wheeler: 'HIRE_PURCHASE_LOAN_2_WHEELER',
  HirePurchaseLoan_4Wheeler: 'HIRE_PURCHASE_LOAN_4_WHEELER',
  HirePurchaseLoanHeavyEquipment: 'HIRE_PURCHASE_LOAN_HEAVY_EQUIPMENT',
  HomeAppliance: 'HOME_APPLIANCE',
  HomeConstructionAndMaintenance: 'HOME_CONSTRUCTION_AND_MAINTENANCE',
  HomeExpenses: 'HOME_EXPENSES',
  HoneyBeeFarming: 'HONEY_BEE_FARMING',
  HousePurchase: 'HOUSE_PURCHASE',
  LandAndBuildingBusiness: 'LAND_AND_BUILDING_BUSINESS',
  LandPurchase: 'LAND_PURCHASE',
  LineOfCredit: 'LINE_OF_CREDIT',
  LiquidityManagement: 'LIQUIDITY_MANAGEMENT',
  Livestock: 'LIVESTOCK',
  LivestockBusiness: 'LIVESTOCK_BUSINESS',
  MicroEnterprisePromotion: 'MICRO_ENTERPRISE_PROMOTION',
  MicroEntrepreneur: 'MICRO_ENTREPRENEUR',
  MicroEntrepreneurGroup: 'MICRO_ENTREPRENEUR_GROUP',
  PoultryFarming: 'POULTRY_FARMING',
  ReligiousWork: 'RELIGIOUS_WORK',
  ServiceBusiness: 'SERVICE_BUSINESS',
  ShortTerm: 'SHORT_TERM',
  SmallAndMediumEnterprises: 'SMALL_AND_MEDIUM_ENTERPRISES',
  SmallIndustrial: 'SMALL_INDUSTRIAL',
  SocialWork: 'SOCIAL_WORK',
  SolarEnergy: 'SOLAR_ENERGY',
  SpiceProduction: 'SPICE_PRODUCTION',
  StaffHirepurchase: 'STAFF_HIREPURCHASE',
  StaffLandAndBuilding: 'STAFF_LAND_AND_BUILDING',
  StaffPersonal: 'STAFF_PERSONAL',
  StationaryBusiness: 'STATIONARY_BUSINESS',
  TechnicalEducation: 'TECHNICAL_EDUCATION',
  VegetableAndSeasonalFarming: 'VEGETABLE_AND_SEASONAL_FARMING',
  YouthSelfEmployment: 'YOUTH_SELF__EMPLOYMENT',
} as const;

export type LoanProductSubType = typeof LoanProductSubType[keyof typeof LoanProductSubType];
export type LoanProductSubTypeInput = {
  id?: InputMaybe<Scalars['ID']>;
  productSubType?: InputMaybe<Scalars['String']>;
  productTypeID?: InputMaybe<Scalars['ID']>;
};

export const LoanProductType = {
  InvestmentInAgriculturalSector: 'INVESTMENT_IN_AGRICULTURAL_SECTOR',
  InvestmentInIndustrialSector: 'INVESTMENT_IN_INDUSTRIAL_SECTOR',
  InvestmentInOtherSector: 'INVESTMENT_IN_OTHER_SECTOR',
} as const;

export type LoanProductType = typeof LoanProductType[keyof typeof LoanProductType];
export type LoanProductTypeInput = {
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  productType?: InputMaybe<Scalars['String']>;
};

export type LoanProductsMutation = {
  editProductInterest: InterestSetupMutationResult;
  makeInactive?: Maybe<LoanProductInactiveResult>;
  updatePenaltyCharge: ProductChargeMutationResult;
  updateProcessingCharge: ProductChargeMutationResult;
  updateProductInterest: InterestSetupMutationResult;
  upsert?: Maybe<LoanProductsResult>;
};

export type LoanProductsMutationEditProductInterestArgs = {
  data: InterestRateSetupInput;
  id: Scalars['ID'];
  productId: Scalars['ID'];
};

export type LoanProductsMutationMakeInactiveArgs = {
  data?: InputMaybe<LoanProductInactiveData>;
};

export type LoanProductsMutationUpdatePenaltyChargeArgs = {
  additionalData: ProductChargeAdditionalDataInput;
  id?: InputMaybe<Scalars['ID']>;
  payload: PenaltyTypeInput;
  productId: Scalars['ID'];
};

export type LoanProductsMutationUpdateProcessingChargeArgs = {
  additionalData: ProductChargeAdditionalDataInput;
  id?: InputMaybe<Scalars['ID']>;
  payload: Array<ServiceType>;
  productId: Scalars['ID'];
};

export type LoanProductsMutationUpdateProductInterestArgs = {
  data: InterestRateSetupInput;
  productId: Scalars['ID'];
};

export type LoanProductsMutationUpsertArgs = {
  data?: InputMaybe<LoanProductInput>;
  edit?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type LoanProductsQuery = {
  formState?: Maybe<LoanProductData>;
  getLoanAccountlist?: Maybe<LoanAccountConnection>;
  getPenaltyCharge: ProductPenaltyQueryResult;
  getProcessingCharge: ProductAccountOpenCloseQueryResult;
  getProductCriteria?: Maybe<LoanProductCriteriaResult>;
  getProductDetail?: Maybe<LoanProductData>;
  getProductInterestRate: InterestSetupQueryResult;
  list?: Maybe<LoanProductConnection>;
  listPenaltyCharge: ProductPenaltyListQueryResult;
  listProcessingCharge: ProductAccountOpenCloseListQueryResult;
  listProductInterestRates: InterestSetupListResult;
};

export type LoanProductsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type LoanProductsQueryGetLoanAccountlistArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanProductsQueryGetPenaltyChargeArgs = {
  id: Scalars['ID'];
};

export type LoanProductsQueryGetProcessingChargeArgs = {
  id: Scalars['ID'];
};

export type LoanProductsQueryGetProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type LoanProductsQueryGetProductDetailArgs = {
  id: Scalars['ID'];
};

export type LoanProductsQueryGetProductInterestRateArgs = {
  id: Scalars['ID'];
  productId: Scalars['ID'];
};

export type LoanProductsQueryListArgs = {
  filter?: InputMaybe<LoanProductSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanProductsQueryListPenaltyChargeArgs = {
  productId: Scalars['ID'];
};

export type LoanProductsQueryListProcessingChargeArgs = {
  productId: Scalars['ID'];
};

export type LoanProductsQueryListProductInterestRatesArgs = {
  productId: Scalars['ID'];
};

export type LoanProductsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanProductsQuery>;
  record?: Maybe<LoanProduct>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanProvisionAccount = {
  amount: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
};

export type LoanProvisionCase = {
  above12Months?: Maybe<Array<Maybe<LoanProvisionAccount>>>;
  goodLoan?: Maybe<Array<Maybe<LoanProvisionAccount>>>;
  oneTo12Months?: Maybe<Array<Maybe<LoanProvisionAccount>>>;
  oneTo30Days?: Maybe<Array<Maybe<LoanProvisionAccount>>>;
};

export type LoanProvisionConnection = {
  edges?: Maybe<Array<LoanProvisionEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type LoanProvisionEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LoanProvisionInfo>;
};

export type LoanProvisionInfo = {
  amount: Scalars['String'];
  conditions: Scalars['String'];
  date: Scalars['Localized'];
  id: Scalars['String'];
  provisionCount: Scalars['Int'];
};

export type LoanProvisionResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type LoanRepaymentAccountMode = {
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanRepaymentBankVoucher = {
  amount?: InputMaybe<Scalars['String']>;
  bank: Scalars['ID'];
  depositedBy?: InputMaybe<Scalars['String']>;
  depositedDate?: InputMaybe<Scalars['Localized']>;
  note?: InputMaybe<Scalars['String']>;
  voucher_no?: InputMaybe<Scalars['String']>;
};

export type LoanRepaymentConnection = {
  edges?: Maybe<Array<LoanRepaymentEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type LoanRepaymentDetail = {
  amount: Scalars['String'];
  branchId: Scalars['String'];
  branchName: Scalars['String'];
  id: Scalars['String'];
  loanAccountId: Scalars['String'];
  loanAccountName: Scalars['String'];
  loanProductId: Scalars['String'];
  loanProductName: Scalars['String'];
  memberCode?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  paymentDate: Scalars['Localized'];
};

export type LoanRepaymentEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LoanRepaymentDetail>;
};

export type LoanRepaymentInput = {
  account?: InputMaybe<LoanRepaymentAccountMode>;
  amountPaid: Scalars['String'];
  bankVoucher?: InputMaybe<LoanRepaymentBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  closeNotes?: InputMaybe<Scalars['String']>;
  isSuspicious?: InputMaybe<Scalars['Boolean']>;
  loanAccountId: Scalars['ID'];
  memberId: Scalars['ID'];
  paymentMethod: LoanRepaymentMethod;
  penalty?: InputMaybe<RepaymentPenaltyInput>;
  suspicionRemarks?: InputMaybe<Scalars['String']>;
  suspicionTopologies?: InputMaybe<Array<InputMaybe<SuspiciousTransactionTopology>>>;
  writeOffLedgerId?: InputMaybe<Scalars['String']>;
};

export const LoanRepaymentMethod = {
  Account: 'ACCOUNT',
  BankVoucher: 'BANK_VOUCHER',
  Cash: 'CASH',
  LocSaving: 'LOC_SAVING',
  WriteOff: 'WRITE_OFF',
} as const;

export type LoanRepaymentMethod = typeof LoanRepaymentMethod[keyof typeof LoanRepaymentMethod];
export type LoanRepaymentRecord = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Localized']>;
  date?: Maybe<Scalars['Localized']>;
  discountAmount?: Maybe<Scalars['String']>;
  installmentNo?: Maybe<Scalars['String']>;
  interestAmount?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  nextInstallment?: Maybe<LoanInstallment>;
  paymentMethod?: Maybe<LoanRepaymentMethod>;
  penaltyAmount?: Maybe<Scalars['String']>;
  principalAmount?: Maybe<Scalars['String']>;
  rebateAmount?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type LoanRepaymentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanRepaymentRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export const LoanRepaymentScheme = {
  Emi: 'EMI',
  Epi: 'EPI',
  Flat: 'FLAT',
  Loc: 'LOC',
} as const;

export type LoanRepaymentScheme = typeof LoanRepaymentScheme[keyof typeof LoanRepaymentScheme];
export type LoanRepaymentView = {
  depositedBy?: Maybe<Scalars['String']>;
  depositedDate?: Maybe<Scalars['Localized']>;
  discount?: Maybe<Scalars['String']>;
  discountDocIdentifiers?: Maybe<Array<Maybe<Scalars['String']>>>;
  discountDocs?: Maybe<Array<Maybe<DocumentInfo>>>;
  fine?: Maybe<Scalars['String']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  installmentAmount?: Maybe<Scalars['String']>;
  installmentDetails?: Maybe<Array<Maybe<InstallmentDetailsView>>>;
  installmentNo?: Maybe<Scalars['String']>;
  loanAccountId?: Maybe<Scalars['String']>;
  loanAccountName?: Maybe<Scalars['String']>;
  loanSubType?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  note?: Maybe<Scalars['String']>;
  objState: Scalars['String'];
  paymentMode?: Maybe<Scalars['String']>;
  rebate?: Maybe<Scalars['String']>;
  repaymentDate?: Maybe<Scalars['Localized']>;
  repaymentId: Scalars['ID'];
  teller?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalRepaymentAmount?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
};

export type LoanRepaymentViewResult = {
  data?: Maybe<LoanRepaymentView>;
  error?: Maybe<QueryError>;
};

export type LoanReport = {
  closedLoanAccountStatementReport?: Maybe<ClosedLoanAccountReportResult>;
  dosariLoanReport?: Maybe<DosariReportResult>;
  loanAccruedInterestReport?: Maybe<LoanAccruedInterestResult>;
  loanAgingStatementReport?: Maybe<LoanAgingStatementReportResult>;
  loanBalanceReport: LoanBalanceReportResult;
  loanCallReport?: Maybe<LoanCallReportResult>;
  loanCollateralReport?: Maybe<LoanCollateralReportResult>;
  loanProductBalance?: Maybe<LoanProductBalanceReportResult>;
  loanStatementReport?: Maybe<ReportResult>;
  loanTransactionStatementReport?: Maybe<ReportResult>;
  loanWriteOffReport?: Maybe<LoanWriteOffReportResult>;
  personalGuaranteeReport?: Maybe<LoanAccountGuaranteeReportResult>;
};

export type LoanReportClosedLoanAccountStatementReportArgs = {
  data?: InputMaybe<ClosedLoanAccountFilter>;
};

export type LoanReportDosariLoanReportArgs = {
  data: DosariReportInput;
};

export type LoanReportLoanAccruedInterestReportArgs = {
  data: AccruedInterestFilter;
};

export type LoanReportLoanAgingStatementReportArgs = {
  data: LoanAgingStatementInput;
};

export type LoanReportLoanBalanceReportArgs = {
  data: LoanBalanceFilterData;
};

export type LoanReportLoanCallReportArgs = {
  data?: InputMaybe<LoanCallReportFilter>;
};

export type LoanReportLoanCollateralReportArgs = {
  data?: InputMaybe<LoanCollateralFilter>;
};

export type LoanReportLoanProductBalanceArgs = {
  data?: InputMaybe<LoanProductBalanceReportFilter>;
};

export type LoanReportLoanStatementReportArgs = {
  data: LoanStatementReportSettings;
};

export type LoanReportLoanTransactionStatementReportArgs = {
  data: LoanStatementReportSettings;
};

export type LoanReportLoanWriteOffReportArgs = {
  data: LoanWriteOffReportFilter;
};

export type LoanReportPersonalGuaranteeReportArgs = {
  data?: InputMaybe<LoanAccountGuaranteeReportInput>;
};

export type LoanRequestConnection = {
  edges?: Maybe<Array<Maybe<LoanRequestEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type LoanRequestEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<LoanRequestList>;
};

export type LoanRequestList = {
  approvalStatus: RequestStatus;
  id: Scalars['String'];
  lastModifiedDate: Scalars['String'];
  loanAmount: Scalars['String'];
  memberAge?: Maybe<Scalars['Int']>;
  memberCode?: Maybe<Scalars['String']>;
  memberGender?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNumber: Scalars['String'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
};

export const LoanRequiredDocuments = {
  Citizenship: 'CITIZENSHIP',
  Form: 'FORM',
  LoanChangeDocument: 'LOAN_CHANGE_DOCUMENT',
  PolicyDocument: 'POLICY_DOCUMENT',
} as const;

export type LoanRequiredDocuments =
  typeof LoanRequiredDocuments[keyof typeof LoanRequiredDocuments];
export type LoanSettingsMutation = {
  editOrganizationRate: InterestSetupMutationResult;
  general?: Maybe<LoanSettingsResult>;
  insuranceScheme?: Maybe<LoanSettingsResult>;
  productType?: Maybe<LoanSettingsResult>;
  setOrganizationRate: InterestSetupMutationResult;
};

export type LoanSettingsMutationEditOrganizationRateArgs = {
  data: InterestRateSetupInput;
  id: Scalars['ID'];
};

export type LoanSettingsMutationGeneralArgs = {
  data?: InputMaybe<LoanGeneralSettingsInput>;
};

export type LoanSettingsMutationInsuranceSchemeArgs = {
  data?: InputMaybe<Array<InputMaybe<LoanInsuranceSchemeInput>>>;
};

export type LoanSettingsMutationProductTypeArgs = {
  data?: InputMaybe<LoanSettingsProductTypeInput>;
};

export type LoanSettingsMutationSetOrganizationRateArgs = {
  data: InterestRateSetupInput;
};

export type LoanSettingsNatureOfProductData = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  natureOfProduct?: Maybe<Scalars['String']>;
};

export type LoanSettingsProductSubTypeData = {
  id?: Maybe<Scalars['ID']>;
  productSubType?: Maybe<Scalars['String']>;
  productTypeID?: Maybe<Scalars['ID']>;
};

export type LoanSettingsProductType = {
  loanProducts?: Maybe<Array<Maybe<LoanProductMinimal>>>;
  multipleProductSubTypes?: Maybe<Array<Maybe<LoanSettingsProductSubTypeData>>>;
  natureOfProduct?: Maybe<Array<Maybe<LoanSettingsNatureOfProductData>>>;
  productSubTypes?: Maybe<Array<Maybe<LoanSettingsProductSubTypeData>>>;
  productTypes?: Maybe<Array<Maybe<LoanSettingsProductTypeData>>>;
};

export type LoanSettingsProductTypeLoanProductsArgs = {
  subTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type LoanSettingsProductTypeMultipleProductSubTypesArgs = {
  productTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type LoanSettingsProductTypeProductSubTypesArgs = {
  productTypeID?: InputMaybe<Scalars['String']>;
};

export type LoanSettingsProductTypeData = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  productType?: Maybe<Scalars['String']>;
};

export type LoanSettingsProductTypeInput = {
  natureOfProduct?: InputMaybe<Array<InputMaybe<LoanNatureOfProductInput>>>;
  productSubTypes?: InputMaybe<Array<InputMaybe<LoanProductSubTypeInput>>>;
  productTypes?: InputMaybe<Array<InputMaybe<LoanProductTypeInput>>>;
};

export type LoanSettingsQuery = {
  general?: Maybe<LoanGeneralSettings>;
  getCurrentOrganizationRate?: Maybe<Scalars['Float']>;
  getOrganizationRate: InterestSetupQueryResult;
  insuranceSchemes?: Maybe<Array<Maybe<LoanInsuranceScheme>>>;
  listOrganizationRate: InterestSetupListResult;
  productType?: Maybe<LoanSettingsProductType>;
};

export type LoanSettingsQueryGetOrganizationRateArgs = {
  id: Scalars['ID'];
};

export type LoanSettingsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanSettingsQuery>;
  record?: Maybe<LoanSettingsQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanStatement = {
  date?: Maybe<Scalars['Localized']>;
  disbursePrinciple?: Maybe<Scalars['String']>;
  discount?: Maybe<Scalars['String']>;
  finePaid?: Maybe<Scalars['String']>;
  interestPaid?: Maybe<Scalars['String']>;
  ledgerBalance?: Maybe<BalanceValue>;
  paidPrinciple?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  remainingPrinciple?: Maybe<Scalars['String']>;
  txnId?: Maybe<Scalars['String']>;
  withdrawPrincipal?: Maybe<Scalars['String']>;
};

export type LoanStatementFooter = {
  closingBalance?: Maybe<BalanceValue>;
  disbursePrincipleTotal?: Maybe<Scalars['String']>;
  discountTotal?: Maybe<Scalars['String']>;
  interestPaidTotal?: Maybe<Scalars['String']>;
  openingBalance?: Maybe<BalanceValue>;
  paidPrincipleTotal?: Maybe<Scalars['String']>;
  penaltyPaidTotal?: Maybe<Scalars['String']>;
  remainingPrincipleTotal?: Maybe<Scalars['String']>;
};

export type LoanStatementReport = {
  footer?: Maybe<LoanStatementFooter>;
  loanStatement?: Maybe<Array<Maybe<LoanStatement>>>;
  meta?: Maybe<LoanAccReportDetails>;
};

export type LoanStatementReportSettings = {
  loanAccountId: Scalars['ID'];
  memberId: Scalars['ID'];
  period: LocalizedDateFilter;
};

export type LoanWriteOffReportData = {
  disbursedPrincipal?: Maybe<Scalars['String']>;
  loanId?: Maybe<Scalars['String']>;
  loanIssueDate?: Maybe<Scalars['Localized']>;
  loanMaturityDate?: Maybe<Scalars['Localized']>;
  loanNo?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  overdueDays?: Maybe<Scalars['Int']>;
  remainingFineAmount?: Maybe<Scalars['String']>;
  remainingInterestAmount?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  remainingPrincipalAmount?: Maybe<Scalars['String']>;
  writeOffDate?: Maybe<Scalars['Localized']>;
  writeOffFine?: Maybe<Scalars['String']>;
  writeOffInterestAmount?: Maybe<Scalars['String']>;
  writeOffPrincipalAmount?: Maybe<Scalars['String']>;
  writeOffReason?: Maybe<Scalars['String']>;
};

export type LoanWriteOffReportFilter = {
  branchId: Array<Scalars['String']>;
  period: LocalizedDateFilter;
};

export type LoanWriteOffReportResult = {
  data?: Maybe<Array<Maybe<LoanWriteOffReportData>>>;
  error?: Maybe<QueryError>;
  summary?: Maybe<LoanWriteOffReportSummary>;
};

export type LoanWriteOffReportSummary = {
  totalDisbursedPrincipal?: Maybe<Scalars['String']>;
  totalRemainingFine?: Maybe<Scalars['String']>;
  totalRemainingInterestAmount?: Maybe<Scalars['String']>;
  totalRemainingPrincipal?: Maybe<Scalars['String']>;
  totalRemainingPrincipalAmount?: Maybe<Scalars['String']>;
  totalWriteOffFine?: Maybe<Scalars['String']>;
  totalWriteOffInterestAmount?: Maybe<Scalars['String']>;
  totalWriteOffPrincipalAmount?: Maybe<Scalars['String']>;
};

export type LocalizationExample = {
  name?: Maybe<Scalars['Localized']>;
};

export type LocalizedDate = {
  from: Scalars['Localized'];
  to: Scalars['Localized'];
};

export type LocalizedDateFilter = {
  from: Scalars['Localized'];
  to: Scalars['Localized'];
};

export type LocationCoordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type LocationCoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type LoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type LoginRecord = {
  data: UserData;
  token: AuthToken;
};

export type LoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<LoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MBankingTransactionData = {
  amount?: Maybe<Scalars['String']>;
  destAccount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  initiatorName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  narration?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
  srcAccount?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  transDate?: Maybe<Scalars['Localized']>;
  transThrough?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
};

export type MBankingTransactionFilter = {
  filter?: InputMaybe<MBankingTransactionFilterData>;
  period: LocalizedDateFilter;
};

export type MBankingTransactionFilterData = {
  transactionType?: InputMaybe<Array<InputMaybe<TransactionTypeFilter>>>;
};

export type MBankingTransactionResult = {
  data?: Maybe<Array<Maybe<MBankingTransactionData>>>;
  error?: Maybe<QueryError>;
};

export type MfCenterEntry = {
  address?: Maybe<Address>;
  code: Scalars['String'];
  createdDate: Scalars['Localized'];
  id: Scalars['String'];
  name: Scalars['String'];
  totalMembers: Scalars['String'];
  totalgroups: Scalars['String'];
};

export type MfCenterInput = {
  Documents: Array<DocumentInsertInput>;
  branchIds: Array<Scalars['String']>;
  centerCode: Scalars['String'];
  centerName: Scalars['String'];
  coordinatorId: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
};

export type MfCenterListConnection = {
  edges?: Maybe<Array<Maybe<MfCenterListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type MfCenterListEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<MfCenterEntry>;
};

export type MfCenterResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MfGroupInput = {
  Documents: Array<DocumentInsertInput>;
  MaxMmebers?: InputMaybe<Scalars['Int']>;
  branchId?: InputMaybe<Scalars['String']>;
  centerId?: InputMaybe<Scalars['String']>;
  coordinatorId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  groupCode?: InputMaybe<Scalars['String']>;
  groupName?: InputMaybe<Scalars['String']>;
  minMembers?: InputMaybe<Scalars['Int']>;
};

export const MfGroupObjectState = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const;

export type MfGroupObjectState = typeof MfGroupObjectState[keyof typeof MfGroupObjectState];
export type MfGroupResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export const MfObjectState = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const;

export type MfObjectState = typeof MfObjectState[keyof typeof MfObjectState];
export const MrTransactionFilter = {
  Deposit: 'DEPOSIT',
  Withdraw: 'WITHDRAW',
} as const;

export type MrTransactionFilter = typeof MrTransactionFilter[keyof typeof MrTransactionFilter];
export type MrTransactionFilterType = {
  transactionType?: InputMaybe<MrTransactionFilter>;
};

export type MrTransactionReport = {
  accountName?: Maybe<Scalars['String']>;
  accountNo?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['String']>;
  mrId?: Maybe<Scalars['String']>;
  mrName?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  typeOfTransaction?: Maybe<MrTransactionFilter>;
};

export type MrTransactionReportFilter = {
  filter?: InputMaybe<MrTransactionFilterType>;
  period: LocalizedDateFilter;
  userId: Array<Scalars['String']>;
};

export type MrTransactionReportResult = {
  data?: Maybe<Array<Maybe<MrTransactionReport>>>;
  error?: Maybe<QueryError>;
};

export type MRmemberInstallmentData = {
  installments?: Maybe<Scalars['Int']>;
  memberCode: Scalars['String'];
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  nearestRemainingDays?: Maybe<Scalars['Int']>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
};

export type MRmemberInstallmentDataGroup = {
  recurringData?: Maybe<Array<Maybe<MRmemberInstallmentData>>>;
  savingData?: Maybe<Array<Maybe<MRmemberInstallmentData>>>;
};

export type MRmemberInstallmentResult = {
  data?: Maybe<MRmemberInstallmentDataGroup>;
  error?: Maybe<QueryError>;
};

export const MaritalStatusInputType = {
  Divorced: 'DIVORCED',
  Married: 'MARRIED',
  Unmrarried: 'UNMRARRIED',
} as const;

export type MaritalStatusInputType =
  typeof MaritalStatusInputType[keyof typeof MaritalStatusInputType];
export const MaritalStatusType = {
  Divorced: 'DIVORCED',
  Married: 'MARRIED',
  Unmrarried: 'UNMRARRIED',
} as const;

export type MaritalStatusType = typeof MaritalStatusType[keyof typeof MaritalStatusType];
export type MeResult = {
  data?: Maybe<UserData>;
  error?: Maybe<QueryError>;
};

export type Member = Base & {
  activeDate?: Maybe<Scalars['Localized']>;
  address?: Maybe<Address>;
  age?: Maybe<Scalars['Int']>;
  branch?: Maybe<Scalars['String']>;
  citizenship?: Maybe<KymIndIdentification>;
  citizenshipPicUrl?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dateJoined?: Maybe<Scalars['Localized']>;
  gender?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  inactiveDate?: Maybe<Scalars['Localized']>;
  maritalStatus?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['Localized']>;
  objState: ObjState;
  panVatNo?: Maybe<Scalars['String']>;
  profile?: Maybe<MemberProfile>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  share?: Maybe<MemberShare>;
  signaturePicUrl?: Maybe<Scalars['String']>;
  signaturepic?: Maybe<Scalars['String']>;
  type: KymMemberTypesEnum;
};

export type MemberAccountData = {
  depositAccount?: Maybe<Array<Maybe<DepositAccount>>>;
  loanAccount?: Maybe<Array<Maybe<LoanAccount>>>;
  memberId?: Maybe<Scalars['String']>;
};

export type MemberAccountDataDepositAccountArgs = {
  filter?: InputMaybe<Array<InputMaybe<NatureOfDepositProduct>>>;
  includeLoc?: InputMaybe<Scalars['Boolean']>;
  objState?: InputMaybe<AccountObjState>;
};

export type MemberAccountDetails = {
  accountBalance?: Maybe<Scalars['String']>;
  accountBranch?: Maybe<Scalars['String']>;
  accountExpiryDate?: Maybe<Scalars['Localized']>;
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountOpenDate?: Maybe<Scalars['Localized']>;
  accountTenure?: Maybe<Scalars['String']>;
  accountType?: Maybe<NatureOfDepositProduct>;
  allowLoan?: Maybe<Scalars['Boolean']>;
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  alternativeChannel?: Maybe<Scalars['Boolean']>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  autoOpen?: Maybe<Scalars['Boolean']>;
  availableBalance?: Maybe<Scalars['String']>;
  chequeIssue?: Maybe<Scalars['Boolean']>;
  closedAt?: Maybe<Scalars['String']>;
  defaultAccountType?: Maybe<DefaultAccountType>;
  dues?: Maybe<Dues>;
  guaranteedAmount?: Maybe<Scalars['String']>;
  installmentAmount?: Maybe<Scalars['String']>;
  insurance?: Maybe<Scalars['Boolean']>;
  interestAccrued?: Maybe<Scalars['String']>;
  interestEarned?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['Float']>;
  interestTax?: Maybe<Scalars['String']>;
  isForMinors?: Maybe<Scalars['Boolean']>;
  isMandatory?: Maybe<Scalars['Boolean']>;
  lastInstallmentUpdatedDate?: Maybe<Scalars['Localized']>;
  lastTransactionDate?: Maybe<Scalars['Localized']>;
  member?: Maybe<Member>;
  monthlyInterestCompulsory?: Maybe<Scalars['Boolean']>;
  nomineeAccountName?: Maybe<Scalars['String']>;
  nomineeAccountNumber?: Maybe<Scalars['String']>;
  objState?: Maybe<ObjState>;
  overDrawnBalance?: Maybe<Scalars['String']>;
  prematurePenalty?: Maybe<Scalars['String']>;
  product?: Maybe<DepositProduct>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultiple?: Maybe<Scalars['Boolean']>;
  totalDepositBalance?: Maybe<Scalars['String']>;
  transactionConstraints?: Maybe<TransactionConstraintsStatus>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type MemberAccountMinView = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  closedDate?: Maybe<Scalars['Localized']>;
  guaranteeAccounts?: Maybe<Array<Maybe<GuaranteeAccountsMinView>>>;
  interestBooked?: Maybe<Scalars['String']>;
  interestEarned?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['String']>;
  objState?: Maybe<ObjState>;
  productName?: Maybe<Scalars['String']>;
  productType?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  subscriptionDate?: Maybe<Scalars['Localized']>;
  totalBalance?: Maybe<Scalars['String']>;
};

export type MemberAccountResult = {
  data?: Maybe<MemberAccountData>;
  error?: Maybe<QueryError>;
  memberId?: Maybe<Scalars['String']>;
};

export type MemberActivateCheck = {
  isAccountUpdated: Scalars['Boolean'];
  isFeePaid: Scalars['Boolean'];
  isShareIssued: Scalars['Boolean'];
};

export type MemberActivateMutation = {
  membershipPayment?: Maybe<MembershipPaymentResult>;
};

export type MemberActivateMutationMembershipPaymentArgs = {
  data?: InputMaybe<MembershipPaymentInput>;
  memberId: Scalars['ID'];
};

export type MemberActivateQuery = {
  accountUpdateCheck: Scalars['Boolean'];
  getMembershipFee?: Maybe<MembershipFeeQueryResult>;
  memberActivateChecks?: Maybe<MemberActivateCheck>;
};

export type MemberActivateQueryAccountUpdateCheckArgs = {
  accountId: Scalars['ID'];
  memberId: Scalars['ID'];
};

export type MemberActivateQueryGetMembershipFeeArgs = {
  memberID: Scalars['ID'];
};

export type MemberActivateQueryMemberActivateChecksArgs = {
  memberId: Scalars['ID'];
};

export type MemberActiveData = {
  cooperative?: Maybe<Scalars['Boolean']>;
  cooperativeUnion?: Maybe<Scalars['Boolean']>;
  individual?: Maybe<Scalars['Boolean']>;
  institution?: Maybe<Scalars['Boolean']>;
};

export type MemberActiveInput = {
  cooperative?: InputMaybe<Scalars['Boolean']>;
  cooperativeUnion?: InputMaybe<Scalars['Boolean']>;
  individual?: InputMaybe<Scalars['Boolean']>;
  institution?: InputMaybe<Scalars['Boolean']>;
};

export type MemberAgeRange = {
  max?: InputMaybe<Scalars['Int']>;
  min?: InputMaybe<Scalars['Int']>;
};

export type MemberBalanceExtraFilter = {
  loanBalance?: InputMaybe<IntRange>;
  memberType?: InputMaybe<KymMemberTypesEnum>;
  savingBalance?: InputMaybe<IntRange>;
  shareBalance?: InputMaybe<IntRange>;
};

export type MemberBalanceFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<MemberBalanceExtraFilter>;
  period: LocalizedDateFilter;
};

export type MemberBalanceReportData = {
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  memberType?: Maybe<Scalars['String']>;
  membershipDate?: Maybe<Scalars['Localized']>;
  totalLoanCrBalance?: Maybe<Scalars['String']>;
  totalLoanDrBalance?: Maybe<Scalars['String']>;
  totalSavingCrBalance?: Maybe<Scalars['String']>;
  totalSavingDrBalance?: Maybe<Scalars['String']>;
  totalShareCrBalance?: Maybe<Scalars['String']>;
  totalShareDrBalance?: Maybe<Scalars['String']>;
};

export type MemberBalanceReportResult = {
  data?: Maybe<Array<Maybe<MemberBalanceReportData>>>;
  error?: Maybe<QueryError>;
  summary?: Maybe<MemberBalanceReportResultSummary>;
};

export type MemberBalanceReportResultSummary = {
  totalLoanCrBalance?: Maybe<Scalars['String']>;
  totalLoanDrBalance?: Maybe<Scalars['String']>;
  totalSavingCrBalance?: Maybe<Scalars['String']>;
  totalSavingDrBalance?: Maybe<Scalars['String']>;
  totalShareCrBalance?: Maybe<Scalars['String']>;
  totalShareDrBalance?: Maybe<Scalars['String']>;
};

export type MemberBasicInfoView =
  | CooperativeBasicMinInfo
  | CooperativeUnionBasicMinInfo
  | IndividualBasicMinInfo
  | InstitutionBasicMinInfo;

export type MemberChargeData = {
  charge: Scalars['Int'];
  ledgerId: Scalars['ID'];
  memberType: KymMemberTypesEnum;
};

export type MemberChargeInput = {
  charge: Scalars['Int'];
  ledgerId: Scalars['ID'];
  memberType: KymMemberTypesEnum;
};

export type MemberChequeDetails = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  cancelled?: Maybe<Scalars['Int']>;
  issued?: Maybe<Scalars['Int']>;
  left?: Maybe<Scalars['Int']>;
  used?: Maybe<Scalars['Int']>;
};

export type MemberClassificationFilter = {
  branch?: InputMaybe<Scalars['String']>;
  period: LocalizedDateFilter;
};

export type MemberClassificationReportAddressData = {
  district?: Maybe<Array<Maybe<ReportEntry>>>;
  province?: Maybe<Array<Maybe<ReportEntry>>>;
};

export type MemberClassificationReportData = {
  address?: Maybe<MemberClassificationReportAddressData>;
  age?: Maybe<Array<Maybe<ReportEntry>>>;
  education?: Maybe<Array<Maybe<ReportEntry>>>;
  gender?: Maybe<Array<Maybe<ReportEntry>>>;
  income?: Maybe<Array<Maybe<ReportEntry>>>;
  memberCategory?: Maybe<Array<Maybe<ReportEntry>>>;
  occupation?: Maybe<Array<Maybe<ReportEntry>>>;
};

export type MemberClassificationReportResult = {
  data?: Maybe<MemberClassificationReportData>;
  error?: Maybe<QueryError>;
};

export type MemberClosedAccounts = {
  accountName?: Maybe<Scalars['String']>;
  accountNo?: Maybe<Scalars['String']>;
  accountType?: Maybe<Scalars['String']>;
  closedDate?: Maybe<Scalars['Localized']>;
};

export type MemberCode = {
  initialNo?: Maybe<Scalars['String']>;
  noOfDigits?: Maybe<Scalars['Int']>;
  prefix?: Maybe<Scalars['String']>;
};

export type MemberCodeInput = {
  initialNo?: InputMaybe<Scalars['String']>;
  noOfDigits?: InputMaybe<Scalars['Int']>;
  prefix?: InputMaybe<Scalars['String']>;
};

export type MemberDeleteDraftResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MemberDetailsResult = {
  data?: Maybe<Member>;
};

export type MemberDocumentDetails = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type MemberDormancyInput = {
  blockLoanTransaction: Scalars['Boolean'];
  blockSavingTransaction: Scalars['Boolean'];
  blockShareTransaction: Scalars['Boolean'];
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  loanAccountId?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  reason: Scalars['String'];
  savingAccountId?: InputMaybe<Scalars['String']>;
};

export type MemberDormancyResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Member>;
};

export type MemberFilterMapping = {
  activeDate?: Maybe<DateFilterOutput>;
  createdAtDate?: Maybe<DateFilterOutput>;
  id?: Maybe<Scalars['String']>;
  memberType: Array<LabelValueArray>;
  objState: Array<ObjState>;
  serviceCenter: Array<LabelValueArray>;
};

export type MemberGraphData = {
  data?: Maybe<Array<Maybe<GraphData>>>;
  periodType?: Maybe<PeriodTypeEnum>;
};

export const MemberIdentityLevel = {
  General: 'GENERAL',
  Mid: 'MID',
  Vip: 'VIP',
} as const;

export type MemberIdentityLevel = typeof MemberIdentityLevel[keyof typeof MemberIdentityLevel];
export type MemberInactivateQuery = {
  accountCloseCheck: Scalars['Boolean'];
  inactivateCheck?: Maybe<InactivateMemberCheck>;
};

export type MemberInactivateQueryAccountCloseCheckArgs = {
  accountId: Scalars['ID'];
  accounttype: AccountTypeFilter;
  memberId: Scalars['ID'];
};

export type MemberInactivateQueryInactivateCheckArgs = {
  memberId: Scalars['ID'];
};

export type MemberInactiveResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymEntryQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MemberIndividualData = {
  SpouseName?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  contactNo?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  fatherName?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['Boolean']>;
  grandFatherName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['Boolean']>;
  profession?: Maybe<Scalars['String']>;
  shareInfo?: Maybe<ShareInformation>;
};

export type MemberLoanDetail = {
  approvedAmount?: Maybe<Scalars['String']>;
  issuedDate?: Maybe<Scalars['Localized']>;
  lastPaymentDate?: Maybe<Scalars['Localized']>;
  loanAccountName?: Maybe<Scalars['String']>;
  loanAccountNo?: Maybe<Scalars['String']>;
  remainingAmount?: Maybe<Scalars['String']>;
};

export type MemberLoanInformation = {
  collateralInformation?: Maybe<Array<Maybe<LoanCollateralInformation>>>;
  collateralSummary?: Maybe<LoanCollateralInformationSummary>;
  loanAccountNo?: Maybe<Scalars['String']>;
  loanAccountType?: Maybe<Scalars['String']>;
  loanDisbursedAmount?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
};

export type MemberMutation = {
  activateMember?: Maybe<MemberActivateMutation>;
  cooperative?: Maybe<KymCooperativeMutation>;
  cooperativeUnion?: Maybe<KymCoopUnionMutation>;
  deleteDraft?: Maybe<MemberDeleteDraftResult>;
  entry: KymEntryMutation;
  generateExcel: Scalars['String'];
  individual?: Maybe<KymIndMutation>;
  institution?: Maybe<KymInsMutation>;
  issueCertificate: Scalars['String'];
  makeDormant?: Maybe<MemberDormancyResult>;
  makeInactive?: Maybe<MemberInactiveResult>;
  officialUse?: Maybe<OfficialUseResult>;
  revokeDormancy: MemberDormancyResult;
  transfer: MemberTransferMutation;
  translate?: Maybe<TranslateData>;
  updateDormancy: MemberDormancyResult;
  updateKym: KymUpdateResult;
};

export type MemberMutationDeleteDraftArgs = {
  memberId: Scalars['ID'];
};

export type MemberMutationEntryArgs = {
  memberId: Scalars['String'];
};

export type MemberMutationGenerateExcelArgs = {
  filename: Scalars['String'];
  id: Scalars['ID'];
};

export type MemberMutationIssueCertificateArgs = {
  id: Scalars['ID'];
};

export type MemberMutationMakeDormantArgs = {
  data: MemberDormancyInput;
  memberId: Scalars['ID'];
};

export type MemberMutationMakeInactiveArgs = {
  memberId: Scalars['ID'];
};

export type MemberMutationOfficialUseArgs = {
  data: OfficialUseInputData;
};

export type MemberMutationRevokeDormancyArgs = {
  data: RevokeDormancyInput;
  memberId: Scalars['ID'];
};

export type MemberMutationTranslateArgs = {
  data: TranslateInput;
  memberId: Scalars['ID'];
};

export type MemberMutationUpdateDormancyArgs = {
  data: UpdateDormancyInput;
  memberId: Scalars['ID'];
};

export type MemberMutationUpdateKymArgs = {
  date: Scalars['Localized'];
  id: Scalars['ID'];
};

export type MemberOtherData = {
  address?: Maybe<Address>;
  authPersonName?: Maybe<Scalars['String']>;
  balanceSheet?: Maybe<Scalars['String']>;
  contactNo?: Maybe<Scalars['String']>;
  doe?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Boolean']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['String']>;
  post?: Maybe<Scalars['String']>;
  shareInfo?: Maybe<ShareInformation>;
  stamp?: Maybe<Scalars['Boolean']>;
  totalMember?: Maybe<Scalars['String']>;
  typeOfInstitution?: Maybe<Scalars['String']>;
  workingArea?: Maybe<Scalars['String']>;
};

export type MemberOverview = {
  memberCode: Scalars['String'];
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNo: Scalars['String'];
  profilePicId?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
};

export type MemberOverviewAccountsView = {
  accounts?: Maybe<Array<Maybe<MemberAccountMinView>>>;
  closedAccounts?: Maybe<Array<Maybe<MemberAccountMinView>>>;
  payments?: Maybe<Array<Maybe<MemberPaymentView>>>;
};

export type MemberOverviewAccountsViewV2 = {
  data?: Maybe<MemberOverviewAccountsView>;
  error?: Maybe<QueryError>;
};

export type MemberOverviewBio = CoopBio | CoopUnionBio | IndividualBio | InstitutionBio;

export type MemberOverviewBioV2 = {
  data?: Maybe<MemberOverviewBio>;
  error?: Maybe<QueryError>;
};

export type MemberOverviewChequeV2 = {
  data?: Maybe<Array<Maybe<MemberChequeDetails>>>;
  error?: Maybe<QueryError>;
};

export type MemberOverviewData = {
  accounts?: Maybe<MemberOverviewAccountsView>;
  bio?: Maybe<MemberOverviewBio>;
  cheques?: Maybe<Array<Maybe<MemberChequeDetails>>>;
  loan?: Maybe<MemberOverviewLoanView>;
  overview?: Maybe<OverviewView>;
  reports?: Maybe<MemberOverviewReportView>;
  share?: Maybe<MemberOverviewShareView>;
};

export type MemberOverviewGraphs = {
  deposit?: Maybe<MemberGraphData>;
  withdraw?: Maybe<MemberGraphData>;
};

export type MemberOverviewLoanView = {
  accounts?: Maybe<Array<Maybe<MemberAccountMinView>>>;
  closedAccounts?: Maybe<Array<Maybe<MemberAccountMinView>>>;
  payments?: Maybe<Array<Maybe<MemberPaymentView>>>;
};

export type MemberOverviewLoanViewV2 = {
  data?: Maybe<MemberOverviewLoanView>;
  error?: Maybe<QueryError>;
};

export type MemberOverviewReportView = {
  list?: Maybe<Array<Maybe<MemberReportView>>>;
};

export type MemberOverviewReportViewV2 = {
  data?: Maybe<MemberOverviewReportView>;
  error?: Maybe<QueryError>;
};

export type MemberOverviewResult = {
  data?: Maybe<MemberOverviewData>;
  error?: Maybe<QueryError>;
};

export type MemberOverviewShareView = {
  balanceDetails?: Maybe<ShareRegisterConnection>;
  registerDetails?: Maybe<Array<Maybe<ShareRegisterDetails>>>;
  shareInfo?: Maybe<ShareInfoView>;
};

export type MemberOverviewShareViewV2 = {
  data?: Maybe<MemberOverviewShareView>;
  error?: Maybe<QueryError>;
};

export type MemberOverviewV2Result = {
  accounts?: Maybe<MemberOverviewAccountsViewV2>;
  bio?: Maybe<MemberOverviewBioV2>;
  cheques?: Maybe<MemberOverviewChequeV2>;
  loan?: Maybe<MemberOverviewLoanViewV2>;
  overview?: Maybe<OverviewViewV2>;
  reports?: Maybe<MemberOverviewReportViewV2>;
  share?: Maybe<MemberOverviewShareViewV2>;
};

export type MemberOverviewV2ResultAccountsArgs = {
  memberId: Scalars['ID'];
};

export type MemberOverviewV2ResultBioArgs = {
  memberId: Scalars['ID'];
};

export type MemberOverviewV2ResultChequesArgs = {
  memberId: Scalars['ID'];
};

export type MemberOverviewV2ResultLoanArgs = {
  memberId: Scalars['ID'];
};

export type MemberOverviewV2ResultOverviewArgs = {
  memberId: Scalars['ID'];
};

export type MemberOverviewV2ResultReportsArgs = {
  memberId: Scalars['ID'];
};

export type MemberOverviewV2ResultShareArgs = {
  memberId: Scalars['ID'];
};

export type MemberPaymentView = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  installmentNo?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
};

export type MemberProfile =
  | KymCoopUnionFormStateQuery
  | KymCooperativeFormStateQuery
  | KymIndFormStateQuery
  | KymInsFormStateQuery;

export type MemberQuery = {
  activateMember?: Maybe<MemberActivateQuery>;
  cooperative?: Maybe<KymCooperativeQuery>;
  cooperativeUnion?: Maybe<KymCoopUnionQuery>;
  details: MemberDetailsResult;
  dormancyDetails?: Maybe<DormancyResult>;
  entry?: Maybe<KymEntryQuery>;
  filterMapping?: Maybe<MemberFilterMapping>;
  getAllAccounts?: Maybe<MemberAccountResult>;
  inactivateMember?: Maybe<MemberInactivateQuery>;
  individual?: Maybe<KymIndQuery>;
  institution?: Maybe<KymInsQuery>;
  list: KymMemberListConnection;
  listMinor?: Maybe<MinorListConnection>;
  memberOverview?: Maybe<MemberOverviewResult>;
  memberOverviewV2?: Maybe<MemberOverviewV2Result>;
  memberPDF: Scalars['String'];
  memberTypes: MemberTypeResult;
  minorProfile?: Maybe<MinorProfile>;
  officialUse?: Maybe<OfficialUseResult>;
  transfer: MemberTransferQuery;
  translate: TranslateQueryResult;
};

export type MemberQueryCooperativeArgs = {
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
};

export type MemberQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type MemberQueryDormancyDetailsArgs = {
  memberId: Scalars['ID'];
};

export type MemberQueryEntryArgs = {
  membeId: Scalars['String'];
};

export type MemberQueryGetAllAccountsArgs = {
  memberId: Scalars['ID'];
};

export type MemberQueryIndividualArgs = {
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['String'];
};

export type MemberQueryInstitutionArgs = {
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
};

export type MemberQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type MemberQueryListMinorArgs = {
  filter?: InputMaybe<MinorFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type MemberQueryMemberOverviewArgs = {
  id: Scalars['ID'];
};

export type MemberQueryMemberPdfArgs = {
  id: Scalars['ID'];
};

export type MemberQueryMinorProfileArgs = {
  minorId: Scalars['String'];
};

export type MemberQueryOfficialUseArgs = {
  id: Scalars['ID'];
};

export type MemberQueryTranslateArgs = {
  id: Scalars['ID'];
};

export type MemberRecentTransactionView = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  noOfShares?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  txnType?: Maybe<MemberRecentTransactionViewTxnType>;
};

export const MemberRecentTransactionViewTxnType = {
  Credit: 'CREDIT',
  Debit: 'DEBIT',
} as const;

export type MemberRecentTransactionViewTxnType =
  typeof MemberRecentTransactionViewTxnType[keyof typeof MemberRecentTransactionViewTxnType];
export type MemberRecentTransactions = {
  accountType?: Maybe<Scalars['String']>;
  transactionAmount?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
};

export type MemberRegFilters = {
  gender?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  institutionType?: InputMaybe<Scalars['ID']>;
  memberType?: InputMaybe<Array<InputMaybe<MemberType>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type MemberRegistrationReport = {
  individual?: Maybe<Array<Maybe<MemberIndividualData>>>;
  other?: Maybe<Array<Maybe<MemberOtherData>>>;
};

export type MemberRegistrationReportData = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<MemberRegFilters>;
  period: LocalizedDateFilter;
};

export type MemberRegistrationReportResult = {
  data?: Maybe<MemberRegistrationReport>;
  error?: Maybe<QueryError>;
};

export type MemberReport = {
  activeInactiveMemberReport?: Maybe<ReportResult>;
  copomisReport?: Maybe<CopomisReportResult>;
  exportActiveInactiveMemberReport: Scalars['String'];
  individualMemberReport?: Maybe<IndividualMemberProfileReportResult>;
  kymStatusReport?: Maybe<KymStatusReportResult>;
  memberBalanceReport?: Maybe<MemberBalanceReportResult>;
  memberClassificationReport: MemberClassificationReportResult;
  memberRegistrationReport?: Maybe<MemberRegistrationReportResult>;
  minorReport?: Maybe<MinorReportResult>;
};

export type MemberReportActiveInactiveMemberReportArgs = {
  data?: InputMaybe<ActiveInactiveMemberReportData>;
};

export type MemberReportCopomisReportArgs = {
  data?: InputMaybe<CopomisReportFilter>;
};

export type MemberReportExportActiveInactiveMemberReportArgs = {
  data?: InputMaybe<ActiveInactiveMemberReportData>;
};

export type MemberReportIndividualMemberReportArgs = {
  memberId: Scalars['ID'];
};

export type MemberReportKymStatusReportArgs = {
  data?: InputMaybe<KymStatusReportFilter>;
};

export type MemberReportMemberBalanceReportArgs = {
  data?: InputMaybe<MemberBalanceFilter>;
};

export type MemberReportMemberClassificationReportArgs = {
  data: MemberClassificationFilter;
};

export type MemberReportMemberRegistrationReportArgs = {
  data?: InputMaybe<MemberRegistrationReportData>;
};

export type MemberReportMinorReportArgs = {
  data?: InputMaybe<MinorFilter>;
};

export type MemberReportFilters = {
  ageRange?: InputMaybe<MemberAgeRange>;
  gender?: InputMaybe<Scalars['ID']>;
  institutionType?: InputMaybe<Scalars['ID']>;
  memberType?: InputMaybe<MemberType>;
  occupation?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<MemberStatus>;
};

export type MemberReportView = {
  category?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  reportName?: Maybe<Scalars['String']>;
};

export type MemberRiskData = {
  generalRisk?: Maybe<Scalars['Int']>;
  highRisk?: Maybe<Scalars['Int']>;
  mediumRisk?: Maybe<Scalars['Int']>;
};

export type MemberRiskInput = {
  generalRisk?: InputMaybe<Scalars['Int']>;
  highRisk?: InputMaybe<Scalars['Int']>;
  mediumRisk?: InputMaybe<Scalars['Int']>;
};

export type MemberSavingDetail = {
  accountName?: Maybe<Scalars['String']>;
  accountNo?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  balanceType?: Maybe<BalanceType>;
  guaranteeLoanDetail?: Maybe<Array<Maybe<GuaranteeLoanDetail>>>;
  totalGuaranteeAmount?: Maybe<Scalars['String']>;
  transactionCount?: Maybe<Scalars['Int']>;
};

export type MemberShare = {
  history?: Maybe<Array<Maybe<ShareRegister>>>;
  summary?: Maybe<ShareBalance>;
};

export type MemberShareDetail = {
  count?: Maybe<Scalars['Int']>;
  shareBalance?: Maybe<Scalars['String']>;
  shareKitta?: Maybe<Scalars['String']>;
};

export type MemberStatisticsView = {
  accountBalance?: Maybe<Scalars['String']>;
  loanBalance?: Maybe<Scalars['String']>;
  totalLoanInterest?: Maybe<Scalars['String']>;
  totalLoanRemainingPrincipal?: Maybe<Scalars['String']>;
  totalSavingInterestAccured?: Maybe<Scalars['String']>;
  totalSavingInterestPosted?: Maybe<Scalars['String']>;
  totalShareValue?: Maybe<Scalars['String']>;
};

export const MemberStatus = {
  Active: 'ACTIVE',
  All: 'ALL',
  Inactive: 'INACTIVE',
} as const;

export type MemberStatus = typeof MemberStatus[keyof typeof MemberStatus];
export type MemberTransferEntry = {
  approvedDate?: Maybe<Scalars['Localized']>;
  approverId?: Maybe<Scalars['ID']>;
  approverName?: Maybe<Scalars['String']>;
  docs?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  id: Scalars['ID'];
  memberId?: Maybe<Scalars['ID']>;
  memberName?: Maybe<Scalars['String']>;
  newBranchId?: Maybe<Scalars['String']>;
  newBranchName?: Maybe<Scalars['String']>;
  postNotes?: Maybe<Scalars['String']>;
  prevBranchId?: Maybe<Scalars['String']>;
  prevBranchName?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  requestDate?: Maybe<Scalars['Localized']>;
  state?: Maybe<MemberTransferState>;
};

export type MemberTransferInput = {
  docs?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  newBranchId: Scalars['ID'];
  reason: Scalars['String'];
};

export type MemberTransferListConnection = {
  edges?: Maybe<Array<Maybe<MemberTransferListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type MemberTransferListEdges = {
  cursor: Scalars['Cursor'];
  node: MemberTransferEntry;
};

export type MemberTransferMutation = {
  action: MemberTransferSuccessResult;
  initiate: MemberTransferResult;
};

export type MemberTransferMutationActionArgs = {
  notes?: InputMaybe<Scalars['String']>;
  requestId: Scalars['ID'];
  state: MemberTransferState;
};

export type MemberTransferMutationInitiateArgs = {
  data: MemberTransferInput;
  memberId: Scalars['ID'];
};

export type MemberTransferQuery = {
  get: MemberTrasferQueryResult;
  list: MemberTransferListConnection;
};

export type MemberTransferQueryGetArgs = {
  requestId: Scalars['ID'];
};

export type MemberTransferQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type MemberTransferResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export const MemberTransferState = {
  Applied: 'APPLIED',
  Approved: 'APPROVED',
  Rejected: 'REJECTED',
} as const;

export type MemberTransferState = typeof MemberTransferState[keyof typeof MemberTransferState];
export type MemberTransferSuccessData = {
  loanAccountList?: Maybe<Array<Maybe<Scalars['String']>>>;
  memberName?: Maybe<Scalars['String']>;
  newBranch?: Maybe<Scalars['String']>;
  oldBranch?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['String']>;
  savingAccountList?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<MemberTransferState>;
  valueDate?: Maybe<Scalars['Localized']>;
};

export type MemberTransferSuccessResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<MemberTransferSuccessData>;
};

export type MemberTrasferQueryResult = {
  data?: Maybe<MemberTransferEntry>;
  error?: Maybe<QueryError>;
};

export const MemberType = {
  All: 'ALL',
  Cooperative: 'COOPERATIVE',
  CooperativeUnion: 'COOPERATIVE_UNION',
  Individual: 'INDIVIDUAL',
  Institution: 'INSTITUTION',
} as const;

export type MemberType = typeof MemberType[keyof typeof MemberType];
export type MemberTypeResult = {
  data?: Maybe<Array<Maybe<KymMemberTypes>>>;
  error?: Maybe<QueryError>;
};

export type MembershipFeeQueryResult = {
  data?: Maybe<MemberChargeData>;
  error?: Maybe<QueryError>;
};

export type MembershipPaymentInput = {
  amount?: InputMaybe<Scalars['String']>;
  bankDeposit?: InputMaybe<BankDepositData>;
  cashData?: InputMaybe<CashDepositData>;
  depositedBy?: InputMaybe<DepositedBy>;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  otherName?: InputMaybe<Scalars['String']>;
  other_doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentMode: DepositPaymentType;
  remark?: InputMaybe<Scalars['String']>;
  sourceFund?: InputMaybe<Scalars['String']>;
  withdrawSlipData?: InputMaybe<WithdrawSlipDepositData>;
};

export type MembershipPaymentRecord = {
  id: Scalars['ID'];
};

export type MembershipPaymentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<MemberQuery>;
  record?: Maybe<MembershipPaymentRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MembershipRequest = {
  dateOfBirth?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  phoneNumber?: Maybe<Scalars['String']>;
  requestedDate?: Maybe<Scalars['Localized']>;
  status?: Maybe<RequestStatus>;
};

export type MembershipRequestConnection = {
  edges?: Maybe<Array<Maybe<MembershipRequestEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type MembershipRequestEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<MembershipRequest>;
};

export type MicroFinanceCenterMutation = {
  addMFCenter: MfCenterResult;
};

export type MicroFinanceCenterMutationAddMfCenterArgs = {
  input: MfCenterInput;
};

export type MicroFinanceCenterQuery = {
  listMFCenter: MfCenterListConnection;
};

export type MicroFinanceCenterQueryListMfCenterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type MicroFinanceGroupMutation = {
  addMFGroup: MfGroupResult;
};

export type MicroFinanceGroupMutationAddMfGroupArgs = {
  input: MfGroupInput;
};

export type MicroFinanceMutation = {
  center?: Maybe<MicroFinanceCenterMutation>;
  group?: Maybe<MicroFinanceGroupMutation>;
};

export type MicroFinanceQuery = {
  center: MicroFinanceCenterQuery;
};

export type MinMaxFilter = {
  max?: InputMaybe<Scalars['String']>;
  min?: InputMaybe<Scalars['String']>;
};

export type MinorFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  id?: InputMaybe<Scalars['String']>;
  minorType?: InputMaybe<MinorTypeFilter>;
};

export type MinorInformation = {
  dateOfBirth?: Maybe<Scalars['Localized']>;
  id: Scalars['String'];
  memberCode: Scalars['String'];
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  minorName: Scalars['String'];
  relationshipId?: Maybe<Scalars['String']>;
  relationshipName?: Maybe<Scalars['String']>;
  serviceCentreId: Scalars['String'];
  serviceCentreName: Scalars['String'];
};

export type MinorListConnection = {
  edges?: Maybe<Array<Maybe<MinorListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type MinorListEdges = {
  cursor: Scalars['Cursor'];
  node: MinorInformation;
};

export type MinorProfile = {
  address?: Maybe<Address>;
  dateOfBirth: Scalars['Localized'];
  fullName: Scalars['String'];
  gender: Scalars['String'];
  memberCode: Scalars['String'];
  memberId: Scalars['String'];
  minorId: Scalars['String'];
  parentName: Scalars['String'];
  savingAccounts?: Maybe<Array<Maybe<DepositAccount>>>;
  serviceCentreId: Scalars['String'];
  serviceCentreName: Scalars['String'];
};

export type MinorReportResult = {
  data?: Maybe<Array<Maybe<MinorInformation>>>;
};

export const MinorTypeFilter = {
  AllMinors: 'ALL_MINORS',
  WithSavingAccount: 'WITH_SAVING_ACCOUNT',
} as const;

export type MinorTypeFilter = typeof MinorTypeFilter[keyof typeof MinorTypeFilter];
export const MinorWiseFilter = {
  All: 'ALL',
  MinorProduct: 'MINOR_PRODUCT',
  NotMinorProduct: 'NOT_MINOR_PRODUCT',
} as const;

export type MinorWiseFilter = typeof MinorWiseFilter[keyof typeof MinorWiseFilter];
export type MobileBankingReport = {
  mBankingExpiryReport?: Maybe<EbankingRegistrationReportResult>;
  mBankingTransactionReport?: Maybe<MBankingTransactionResult>;
  mbankingRegistrationReport?: Maybe<EbankingRegistrationReportResult>;
};

export type MobileBankingReportMBankingExpiryReportArgs = {
  data?: InputMaybe<EbankingReportFilter>;
};

export type MobileBankingReportMBankingTransactionReportArgs = {
  data?: InputMaybe<MBankingTransactionFilter>;
};

export type MobileBankingReportMbankingRegistrationReportArgs = {
  data?: InputMaybe<EbankingReportFilter>;
};

export type MoneyLedgerResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['ID'];
};

export type MonthlyDividendRate = {
  eightMonth?: Maybe<Scalars['Float']>;
  eleventhMonth?: Maybe<Scalars['Float']>;
  fifthMonth?: Maybe<Scalars['Float']>;
  firstMonth?: Maybe<Scalars['Float']>;
  fourthMonth?: Maybe<Scalars['Float']>;
  ninthMonth?: Maybe<Scalars['Float']>;
  secondMonth?: Maybe<Scalars['Float']>;
  seventhMonth?: Maybe<Scalars['Float']>;
  sixthMonth?: Maybe<Scalars['Float']>;
  tenthMonth?: Maybe<Scalars['Float']>;
  thirdMonth?: Maybe<Scalars['Float']>;
  twelfthMonth?: Maybe<Scalars['Float']>;
};

export type MonthlyDividendRateInput = {
  eightMonth?: InputMaybe<Scalars['Float']>;
  eleventhMonth?: InputMaybe<Scalars['Float']>;
  fifthMonth?: InputMaybe<Scalars['Float']>;
  firstMonth?: InputMaybe<Scalars['Float']>;
  fourthMonth?: InputMaybe<Scalars['Float']>;
  ninthMonth?: InputMaybe<Scalars['Float']>;
  secondMonth?: InputMaybe<Scalars['Float']>;
  seventhMonth?: InputMaybe<Scalars['Float']>;
  sixthMonth?: InputMaybe<Scalars['Float']>;
  tenthMonth?: InputMaybe<Scalars['Float']>;
  thirdMonth?: InputMaybe<Scalars['Float']>;
  twelfthMonth?: InputMaybe<Scalars['Float']>;
};

export const Months = {
  April: 'APRIL',
  August: 'AUGUST',
  December: 'DECEMBER',
  February: 'FEBRUARY',
  January: 'JANUARY',
  July: 'JULY',
  June: 'JUNE',
  March: 'MARCH',
  May: 'MAY',
  November: 'NOVEMBER',
  October: 'OCTOBER',
  September: 'SEPTEMBER',
} as const;

export type Months = typeof Months[keyof typeof Months];
export const MortageType = {
  Collateral: 'COLLATERAL',
  LoanAgainstFd: 'LOAN_AGAINST_FD',
} as const;

export type MortageType = typeof MortageType[keyof typeof MortageType];
export type Municipality = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
  wards: Array<Scalars['Int']>;
};

export type Mutation = {
  account: DepositLoanAccountMutation;
  accounting: AccountingMutation;
  agent: AgentMutation;
  alternativeChannel?: Maybe<AlternativeChannelMutation>;
  auth: AuthMutation;
  bank: BankMutation;
  document: DocumentMutation;
  example: ExampleMutation;
  hr: HrMutation;
  inventory: InventoryMutation;
  loanAccount: LoanAccountMutation;
  members: MemberMutation;
  microFinance: MicroFinanceMutation;
  newId: Scalars['String'];
  presignedUrl: PresignedUrlMutation;
  profitToFundManagement: FundManagementMutation;
  report: ReportMutation;
  requests: RequestsMutation;
  search: SearchMutation;
  seed: Scalars['Boolean'];
  settings: SettingsMutation;
  share: ShareMutation;
  transaction: TransactionMutation;
  user: UserMutation;
  withdrawSlip: WithdrawSlipMutation;
};

export type MutationNewIdArgs = {
  idType?: InputMaybe<Id_Type>;
};

export type MutationError =
  | AuthorizationError
  | BadRequestError
  | NotFoundError
  | ServerError
  | ValidationError;

export type MyCoopInfo = {
  totalBranch?: Maybe<Scalars['Int']>;
  totalMembers?: Maybe<Scalars['Int']>;
  totalShareIssued?: Maybe<Scalars['Int']>;
};

export type MyraUser = {
  branch?: Maybe<Branch>;
  contactNo?: Maybe<Scalars['String']>;
  createdAt: Scalars['Localized'];
  createdBy: Identity;
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  empCode?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  id: Scalars['ID'];
  isCoreEmployee?: Maybe<Scalars['Boolean']>;
  lastActiveDate?: Maybe<Scalars['Localized']>;
  linkedBranches?: Maybe<Array<Maybe<BranchMinimal>>>;
  modifiedAt: Scalars['Localized'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  role?: Maybe<Array<Maybe<RoleInfo>>>;
};

export type MyraUserConnection = {
  edges?: Maybe<Array<MyraUserEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type MyraUserEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<MyraUser>;
};

export type MyraUserFormStateData = {
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactNo?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  empCode?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  id?: Maybe<Scalars['String']>;
  identificationDetails?: Maybe<Array<Maybe<MyraUserIdentification>>>;
  identificationSelection?: Maybe<Array<Maybe<Scalars['String']>>>;
  isCoreEmployee?: Maybe<Scalars['Boolean']>;
  isTempAsPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  profilePicture?: Maybe<Array<Maybe<PictureData>>>;
  role?: Maybe<Array<Maybe<Scalars['String']>>>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type MyraUserFormStateResult = {
  data?: Maybe<MyraUserFormStateData>;
  error?: Maybe<QueryError>;
};

export type MyraUserIdentification = {
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  idNo?: Maybe<Scalars['String']>;
  idType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
};

export type MyraUserIdentificationInput = {
  date?: InputMaybe<Scalars['Localized']>;
  idNo?: InputMaybe<Scalars['String']>;
  idType?: InputMaybe<Scalars['String']>;
  place?: InputMaybe<Scalars['String']>;
};

export type MyraUserIdentificationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<MyraUserQuery>;
  record?: Maybe<MyraUserIdentification>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MyraUserInput = {
  branch?: InputMaybe<Array<Scalars['String']>>;
  contactNo: Scalars['String'];
  dob: Scalars['Localized'];
  email: Scalars['String'];
  empCode: Scalars['String'];
  gender: UserGender;
  identificationDetails?: InputMaybe<Array<InputMaybe<MyraUserIdentificationInput>>>;
  identificationSelection?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  isCoreEmployee?: InputMaybe<Scalars['Boolean']>;
  isTempAsPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  permanentAddress?: InputMaybe<KymAddressInput>;
  profilePicture?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  role?: InputMaybe<Array<Scalars['String']>>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type MyraUserMutation = {
  add?: Maybe<MyraUserResult>;
};

export type MyraUserMutationAddArgs = {
  data?: InputMaybe<MyraUserInput>;
  id: Scalars['ID'];
};

export type MyraUserQuery = {
  formState?: Maybe<MyraUserFormStateResult>;
  list?: Maybe<MyraUserConnection>;
  tellers?: Maybe<Array<Maybe<TellerInfo>>>;
  userDetail?: Maybe<UserDetailQuery>;
};

export type MyraUserQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type MyraUserQueryListArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type MyraUserQueryUserDetailArgs = {
  userID: Scalars['ID'];
};

export type MyraUserResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<MyraUserQuery>;
  record?: Maybe<MyraUser>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MyraUserSearchFilter = {
  branchId?: InputMaybe<Scalars['String']>;
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type Name = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
};

export const NatureOfBankTransaction = {
  All: 'ALL',
  Deposit: 'DEPOSIT',
  Withdraw: 'WITHDRAW',
} as const;

export type NatureOfBankTransaction =
  typeof NatureOfBankTransaction[keyof typeof NatureOfBankTransaction];
export const NatureOfDepositProduct = {
  Current: 'CURRENT',
  RecurringSaving: 'RECURRING_SAVING',
  Saving: 'SAVING',
  TermSavingOrFd: 'TERM_SAVING_OR_FD',
} as const;

export type NatureOfDepositProduct =
  typeof NatureOfDepositProduct[keyof typeof NatureOfDepositProduct];
export const NatureOfLoanProduct = {
  Progressive: 'PROGRESSIVE',
  Unprogressive: 'UNPROGRESSIVE',
} as const;

export type NatureOfLoanProduct = typeof NatureOfLoanProduct[keyof typeof NatureOfLoanProduct];
export const NatureOfTransaction = {
  AccountClose: 'ACCOUNT_CLOSE',
  All: 'ALL',
  AlternateChannel: 'ALTERNATE_CHANNEL',
  Deposit: 'DEPOSIT',
  Ebanking: 'EBANKING',
  InterestBooking: 'INTEREST_BOOKING',
  InterestPosting: 'INTEREST_POSTING',
  InterBranchTransfer: 'INTER_BRANCH_TRANSFER',
  JournalVoucher: 'JOURNAL_VOUCHER',
  LoanDisbursment: 'LOAN_DISBURSMENT',
  LoanRepayment: 'LOAN_REPAYMENT',
  Membership: 'MEMBERSHIP',
  OpeningBalance: 'OPENING_BALANCE',
  SharePurchase: 'SHARE_PURCHASE',
  ShareReturn: 'SHARE_RETURN',
  TellerTransfer: 'TELLER_TRANSFER',
  Transfer: 'TRANSFER',
  Withdraw: 'WITHDRAW',
} as const;

export type NatureOfTransaction = typeof NatureOfTransaction[keyof typeof NatureOfTransaction];
export type NewBankAccountInput = {
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<AccountingBankAccountType>;
  bankId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  openingBalance?: InputMaybe<Scalars['String']>;
};

export type NewBankAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankAccountQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type NewCoaGroupInput = {
  accountClass?: InputMaybe<CoaAccountClass>;
  accountCode?: InputMaybe<Scalars['String']>;
  accountSetup?: InputMaybe<CoaAccountSetup>;
  allowDirectPostingFromJV?: InputMaybe<Scalars['Boolean']>;
  allowMultipleLedger?: InputMaybe<Scalars['Boolean']>;
  allowedBalance?: InputMaybe<CoaTypeOfTransaction>;
  category?: InputMaybe<CoaCategory>;
  groupName?: InputMaybe<Scalars['String']>;
  ledgerName?: InputMaybe<Scalars['String']>;
  openForBranches?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  typeOfTransaction?: InputMaybe<CoaTypeOfTransaction>;
  underAccountCode?: InputMaybe<Scalars['String']>;
};

export type NewCoaGroupResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ChartsOfAccountSettingsQuery>;
  recordId: Scalars['ID'];
};

export type NewDepartment = {
  description: Scalars['String'];
  name: Scalars['String'];
};

export type NewDesignation = {
  description: Scalars['String'];
  name: Scalars['String'];
};

export type NewEmployeeHealthInsurance = {
  healthInsuranceNumber: Scalars['String'];
  healthInsuranceProvider: Scalars['String'];
};

export type NewEmployeeLevel = {
  description: Scalars['String'];
  name: Scalars['String'];
};

export type NewEmployeeType = {
  description: Scalars['String'];
  name: Scalars['String'];
};

export type NewTaxInput = {
  default?: InputMaybe<Scalars['Boolean']>;
  rate?: InputMaybe<Scalars['Float']>;
  taxName?: InputMaybe<Scalars['String']>;
};

export type NewTaxResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<AccountingSettingsQuery>;
  record?: Maybe<AccountingTaxRate>;
  recordId?: Maybe<Scalars['String']>;
};

export type Nominee = {
  address?: Maybe<Address>;
  citizenship?: Maybe<Citizenship>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NomineeAccountUpdateInput = {
  accountID: Scalars['ID'];
  updatedAccountID: Scalars['ID'];
};

export type NomineeAccountUpdateResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type NomineeInNepali = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NotFoundError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export const ObjState = {
  Active: 'ACTIVE',
  Approved: 'APPROVED',
  Dormant: 'DORMANT',
  Draft: 'DRAFT',
  Inactive: 'INACTIVE',
  Submitted: 'SUBMITTED',
  Validated: 'VALIDATED',
} as const;

export type ObjState = typeof ObjState[keyof typeof ObjState];
export type OfficialUseData = {
  acceptableAddressDoc?: Maybe<Scalars['Boolean']>;
  checkNegative?: Maybe<Scalars['Boolean']>;
  checkSanction?: Maybe<Scalars['Boolean']>;
  docCollectedAndVerified?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  isStaff?: Maybe<Scalars['Boolean']>;
  riskCategory?: Maybe<OfficialUseRiskCategory>;
};

export type OfficialUseInputData = {
  acceptableAddressDoc?: InputMaybe<Scalars['Boolean']>;
  checkNegative?: InputMaybe<Scalars['Boolean']>;
  checkSanction?: InputMaybe<Scalars['Boolean']>;
  docCollectedAndVerified?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isStaff?: InputMaybe<Scalars['Boolean']>;
  riskCategory?: InputMaybe<OfficialUseRiskCategory>;
};

export type OfficialUseResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<OfficialUseData>;
  recordId?: Maybe<Scalars['ID']>;
};

export const OfficialUseRiskCategory = {
  High: 'HIGH',
  Low: 'LOW',
  Medium: 'MEDIUM',
  Pep: 'PEP',
} as const;

export type OfficialUseRiskCategory =
  typeof OfficialUseRiskCategory[keyof typeof OfficialUseRiskCategory];
export const OnboardingStatus = {
  Completed: 'COMPLETED',
  Draft: 'DRAFT',
  Pending: 'PENDING',
} as const;

export type OnboardingStatus = typeof OnboardingStatus[keyof typeof OnboardingStatus];
export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export type Organization = {
  aKey?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  basicDetails?: Maybe<OrganizationBasicDetails>;
  contactDetails?: Maybe<OrganizationContactDetails>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  mainContactPerson?: Maybe<OrganizationMainContactPerson>;
  registrationDetails?: Maybe<OrganizationRegistrationDetails>;
  sKey?: Maybe<Scalars['String']>;
  statistics?: Maybe<OrganizationStatistics>;
};

export type OrganizationAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  record?: Maybe<Organization>;
  recordId: Scalars['ID'];
};

export type OrganizationBasicDetails = {
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  typeOfOrganization?: Maybe<TypeOfOrganization>;
};

export type OrganizationBasicDetailsInput = {
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  typeOfOrganization?: InputMaybe<TypeOfOrganization>;
};

export type OrganizationContactDetails = {
  email?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationContactDetailsInput = {
  email?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type OrganizationDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  recordId: Scalars['ID'];
};

export type OrganizationDocument = {
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationDocumentInput = {
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type OrganizationEntry = {
  address: KymAddress;
  name: Scalars['String'];
  note?: Maybe<Scalars['String']>;
};

export type OrganizationEntryEntry = {
  address?: Maybe<Address>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
};

export type OrganizationEntryFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type OrganizationEntryListConnection = {
  edges?: Maybe<Array<Maybe<OrganizationEntryListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type OrganizationEntryListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<OrganizationEntryEntry>;
};

export type OrganizationFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type OrganizationFormData = {
  address?: Maybe<KymAddress>;
  basicDetails?: Maybe<OrganizationBasicDetails>;
  contactDetails?: Maybe<OrganizationContactDetails>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  mainContactPerson?: Maybe<OrganizationMainContactPerson>;
  registrationDetails?: Maybe<OrganizationRegistrationDetails>;
  statistics?: Maybe<OrganizationStatistics>;
};

export type OrganizationFormStateResult = {
  data?: Maybe<OrganizationFormData>;
  error?: Maybe<QueryError>;
};

export type OrganizationGetResult = {
  data?: Maybe<Organization>;
  error?: Maybe<QueryError>;
};

export type OrganizationInput = {
  address?: InputMaybe<AddressInput>;
  basicDetails?: InputMaybe<OrganizationBasicDetailsInput>;
  contactDetails?: InputMaybe<OrganizationContactDetailsInput>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  mainContactPerson?: InputMaybe<OrganizationMainContactPersonInput>;
  registrationDetails?: InputMaybe<OrganizationRegistrationDetailsInput>;
  statistics?: InputMaybe<OrganizationStatisticsInput>;
};

export type OrganizationListResult = {
  data?: Maybe<Array<Maybe<Organization>>>;
  error?: Maybe<QueryError>;
};

export type OrganizationMainContactPerson = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type OrganizationMainContactPersonInput = {
  contactPersonContactNumber?: InputMaybe<Scalars['String']>;
  contactPersonName?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type OrganizationProfileReport = {
  committee: Array<Committee>;
  organization: Organization;
};

export type OrganizationRegistrationDetails = {
  panOrVat?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
};

export type OrganizationRegistrationDetailsInput = {
  panOrVat?: InputMaybe<Scalars['String']>;
  regdAddress?: InputMaybe<Scalars['String']>;
  regdNo?: InputMaybe<Scalars['String']>;
  regdOffice?: InputMaybe<Scalars['String']>;
};

export type OrganizationSettingsMutation = {
  initialSetup?: Maybe<OrganizationAddResult>;
  removeCommitteeMember?: Maybe<Scalars['String']>;
  upsertCommittee?: Maybe<CommitteeAddResult>;
  upsertCommitteeMember?: Maybe<CommitteeMemberAddResult>;
};

export type OrganizationSettingsMutationInitialSetupArgs = {
  data: OrganizationInput;
};

export type OrganizationSettingsMutationRemoveCommitteeMemberArgs = {
  ids: Array<Scalars['ID']>;
};

export type OrganizationSettingsMutationUpsertCommitteeArgs = {
  data: CommitteeInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type OrganizationSettingsMutationUpsertCommitteeMemberArgs = {
  data: Array<CommitteeMemberInput>;
};

export type OrganizationSettingsQuery = {
  committee?: Maybe<Array<Maybe<Committee>>>;
  committeeMembers?: Maybe<Array<Maybe<CommitteeMember>>>;
  formState?: Maybe<OrganizationFormStateResult>;
  /** This is to get organization details of a logged in employee. id of that email will be extracted from the employee who sends the request */
  mine?: Maybe<OrganizationGetResult>;
};

export type OrganizationSettingsQueryCommitteeMembersArgs = {
  committeeId?: InputMaybe<Scalars['ID']>;
};

export type OrganizationStatistics = {
  totalCapital: Scalars['Float'];
  totalMembers: Scalars['Int'];
};

export type OrganizationStatisticsInput = {
  totalCapital: Scalars['Float'];
  totalMembers: Scalars['Int'];
};

export type OtherFundDistribution = {
  accountCode?: InputMaybe<Scalars['String']>;
  percent?: InputMaybe<Scalars['Float']>;
};

export type OtherReport = {
  generalLedgerReport: GenderLedgerReportResult;
  savingsBalanceReport: SavingsBalanceReportResult;
};

export type OtherReportGeneralLedgerReportArgs = {
  data: GeneralLedgerFilter;
};

export type OtherReportSavingsBalanceReportArgs = {
  data: SavingsBalanceFilterData;
};

export type OverviewView = {
  basicInformation?: Maybe<MemberBasicInfoView>;
  memberGraphs?: Maybe<MemberOverviewGraphs>;
  payments?: Maybe<Array<Maybe<MemberPaymentView>>>;
  pendingView?: Maybe<Array<Maybe<PendingOverview>>>;
  recentTransactions?: Maybe<Array<Maybe<MemberRecentTransactionView>>>;
  statistics?: Maybe<MemberStatisticsView>;
};

export type OverviewViewV2 = {
  data?: Maybe<OverviewView>;
  error?: Maybe<QueryError>;
};

export type PlCurrentData = {
  expenseEntries?: Maybe<Array<Maybe<PlEntry>>>;
  incomeEntries?: Maybe<Array<Maybe<PlEntry>>>;
  totalExpense?: Maybe<BalanceValue>;
  totalIncome?: Maybe<BalanceValue>;
};

export type PlCurrentResult = {
  data?: Maybe<PlCurrentData>;
  error?: Maybe<QueryError>;
};

export type PlEntry = {
  balance?: Maybe<BalanceValue>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  ledgerName?: Maybe<Scalars['String']>;
};

export type PageInfo = {
  endCursor?: Maybe<Scalars['Cursor']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Pagination = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<Order>;
};

export type PartialReleaseGuaranteeInput = {
  files?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  note?: InputMaybe<Scalars['String']>;
  releaseAmount: Scalars['String'];
};

export type PasswordRecoveryData = {
  newPassword: Scalars['String'];
  token: Scalars['String'];
};

export type PasswordRecoveryInput = {
  email: Scalars['String'];
  url: Scalars['String'];
};

export type PasswordRecoveryMutation = {
  sendRecoveryEmail?: Maybe<PasswordRecoveryResult>;
  setNewPassword?: Maybe<PasswordRecoveryResult>;
};

export type PasswordRecoveryMutationSendRecoveryEmailArgs = {
  data: PasswordRecoveryInput;
};

export type PasswordRecoveryMutationSetNewPasswordArgs = {
  data?: InputMaybe<PasswordRecoveryData>;
};

export type PasswordRecoveryResult = {
  error?: Maybe<MutationError>;
  recordID?: Maybe<Scalars['ID']>;
};

export type PaymentAllocation = {
  amount: Scalars['String'];
  date: Scalars['Localized'];
  leftToAllocate: Scalars['String'];
  thisAllocation: Scalars['String'];
  type: Scalars['String'];
};

export type PaymentAllocationInput = {
  amount: Scalars['String'];
  date: Scalars['Localized'];
  leftToAllocate: Scalars['String'];
  thisAllocation: Scalars['String'];
  type: Scalars['String'];
};

export const PaymentDepositedBy = {
  Other: 'OTHER',
  Self: 'SELF',
} as const;

export type PaymentDepositedBy = typeof PaymentDepositedBy[keyof typeof PaymentDepositedBy];
export type PaymentDetail = {
  discount?: Maybe<Scalars['String']>;
  grandTotal?: Maybe<Scalars['String']>;
  nonTaxableTotal?: Maybe<Scalars['String']>;
  subTotal?: Maybe<Scalars['String']>;
  taxableTotal?: Maybe<Scalars['String']>;
  vat?: Maybe<Scalars['String']>;
};

export const PaymentMode = {
  Bank: 'BANK',
  Cash: 'CASH',
} as const;

export type PaymentMode = typeof PaymentMode[keyof typeof PaymentMode];
export const PaymentModeEnum = {
  BankTransfer: 'BANK_TRANSFER',
  Cash: 'CASH',
  Check: 'CHECK',
} as const;

export type PaymentModeEnum = typeof PaymentModeEnum[keyof typeof PaymentModeEnum];
export const PayrollFrequencyEnum = {
  Monthly: 'MONTHLY',
  Yearly: 'YEARLY',
} as const;

export type PayrollFrequencyEnum = typeof PayrollFrequencyEnum[keyof typeof PayrollFrequencyEnum];
export type PearlsConfiguration = {
  denominator: Scalars['String'];
  denominatorVariables: Scalars['Map'];
  description: Scalars['String'];
  goal: Scalars['String'];
  header: Scalars['String'];
  indicatorId: Scalars['String'];
  numerator: Scalars['String'];
  numeratorVariables: Scalars['Map'];
};

export type PearlsConfigurationInput = {
  denominatorVariables: Scalars['Map'];
  numeratorVariables: Scalars['Map'];
};

export type PearlsConfigurationMutation = {
  update?: Maybe<PearlsConfigurationResult>;
};

export type PearlsConfigurationMutationUpdateArgs = {
  data?: InputMaybe<PearlsConfigurationInput>;
  indicatorId: Scalars['String'];
};

export type PearlsConfigurationQuery = {
  list?: Maybe<Array<Maybe<PearlsConfiguration>>>;
};

export type PearlsConfigurationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<PearlsConfigurationQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type PearlsRecord = {
  denominator: Scalars['String'];
  description: Scalars['String'];
  goal: Scalars['String'];
  lastMonth: Scalars['String'];
  numerator: Scalars['String'];
  pearl: Scalars['String'];
  thisMonth: Scalars['String'];
};

export type PearlsReportInput = {
  period: LocalizedDateFilter;
};

export type PearlsReportResult = {
  typeA?: Maybe<Array<Maybe<PearlsRecord>>>;
  typeE?: Maybe<Array<Maybe<PearlsRecord>>>;
  typeL?: Maybe<Array<Maybe<PearlsRecord>>>;
  typeP?: Maybe<Array<Maybe<PearlsRecord>>>;
  typeR?: Maybe<Array<Maybe<PearlsRecord>>>;
  typeS?: Maybe<Array<Maybe<PearlsRecord>>>;
};

export type Penalty = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
  penaltyType?: Maybe<PenaltyType>;
};

export type PenaltyFormState = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PenaltyInput = {
  dayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  flatRatePenalty?: InputMaybe<Scalars['Float']>;
  minimumAmount?: InputMaybe<Scalars['Amount']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
  rateType?: InputMaybe<PenaltyRateType>;
};

export const PenaltyRateType = {
  FlatRate: 'FLAT_RATE',
  RelativeRate: 'RELATIVE_RATE',
} as const;

export type PenaltyRateType = typeof PenaltyRateType[keyof typeof PenaltyRateType];
export type PenaltyRebate = {
  penalty?: Maybe<PenaltyFormState>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  rebate?: Maybe<RebateFormState>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
};

export type PenaltyRebateResult = {
  data?: Maybe<PenaltyRebate>;
  error?: Maybe<QueryError>;
};

export const PenaltyType = {
  LoanInstallmentAmount: 'LoanInstallmentAmount',
  PenalInterest: 'PenalInterest',
  RemainingPrincipal: 'RemainingPrincipal',
} as const;

export type PenaltyType = typeof PenaltyType[keyof typeof PenaltyType];
export type PenaltyTypeInput = {
  dayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
  penaltyType?: InputMaybe<PenaltyType>;
};

export type PendingOverview = {
  account?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
};

export type PendingRequestInfo = {
  loanApplicationRequest?: Maybe<Scalars['Int']>;
  loanDisbursementRequest?: Maybe<Scalars['Int']>;
  memberRequestCount?: Maybe<Scalars['Int']>;
  withdrawSlipCount?: Maybe<Scalars['Int']>;
};

export type PeriodType = {
  period?: Maybe<CustomPeriodType>;
  periodType: ReportPeriodType;
};

export const PeriodTypeEnum = {
  Last_7Days: 'LAST_7_DAYS',
  Last_14Days: 'LAST_14_DAYS',
  Last_30Days: 'LAST_30_DAYS',
  Lifetime: 'LIFETIME',
  ThisFiscalYearToDate: 'THIS_FISCAL_YEAR_TO_DATE',
  Today: 'TODAY',
  Yesterday: 'YESTERDAY',
} as const;

export type PeriodTypeEnum = typeof PeriodTypeEnum[keyof typeof PeriodTypeEnum];
export type PermissionQuery = {
  allPermission?: Maybe<Scalars['Map']>;
  menuPermission?: Maybe<Array<Maybe<Scalars['String']>>>;
  myPermission?: Maybe<Scalars['Map']>;
  resources?: Maybe<PermissionResourceQuery>;
};

export type PermissionResourceQuery = {
  action?: Maybe<Array<Maybe<Action>>>;
  resource?: Maybe<Array<Maybe<Resource>>>;
};

export type PersonalInformation = {
  citizenship?: Maybe<Citizenship>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  gender?: Maybe<Scalars['String']>;
  inNepali?: Maybe<PersonalInformationInNepali>;
  name?: Maybe<Name>;
  nationality?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
  panNumber?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type PersonalInformationInNepali = {
  name?: Maybe<Name>;
  occupation?: Maybe<Scalars['String']>;
};

export const PickupMethod = {
  MarketRepresentative: 'MARKET_REPRESENTATIVE',
  Self: 'SELF',
} as const;

export type PickupMethod = typeof PickupMethod[keyof typeof PickupMethod];
export type PictureData = {
  identifier?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type PredefinedElementFilter = {
  category: FormCategory;
  searchTerm: FormSearchTerm;
};

export type PredefinedElementListFilter = {
  category?: InputMaybe<FormCategory>;
};

export type PredefinedElementListQueryResult = {
  data?: Maybe<Array<Maybe<FormElement>>>;
  error?: Maybe<QueryError>;
};

export type PredefinedElementQueryResult = {
  data?: Maybe<FormElement>;
  error?: Maybe<QueryError>;
};

export type PredefinedFormQuery = {
  details: PredefinedElementQueryResult;
  list: PredefinedElementListQueryResult;
};

export type PredefinedFormQueryDetailsArgs = {
  filter: PredefinedElementFilter;
};

export type PredefinedFormQueryListArgs = {
  filter: PredefinedElementListFilter;
};

export type PrematurePenalty = {
  noOfDays?: InputMaybe<Scalars['Int']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyDateType?: InputMaybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export const PrematurePenaltyDateType = {
  EffectiveDaysFromStart: 'EFFECTIVE_DAYS_FROM_START',
  RemainingDaysToGetMatured: 'REMAINING_DAYS_TO_GET_MATURED',
} as const;

export type PrematurePenaltyDateType =
  typeof PrematurePenaltyDateType[keyof typeof PrematurePenaltyDateType];
export type PrematurePenaltyFormState = {
  noOfDays?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDateType?: Maybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PresignedUrlMutation = {
  upload: PresignedUrlOutput;
};

export type PresignedUrlMutationUploadArgs = {
  contentType?: InputMaybe<Scalars['String']>;
};

export type PresignedUrlOutput = {
  filename?: Maybe<Scalars['String']>;
  getUrl?: Maybe<Scalars['String']>;
  putUrl?: Maybe<Scalars['String']>;
};

export type PreviousYearFundDistribution = {
  accountCode?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  percent?: Maybe<Scalars['Float']>;
};

export type PrintPreference = {
  blockOne?: Maybe<SlipElementMeasurement>;
  blockThree?: Maybe<SlipElementMeasurement>;
  blockTwo?: Maybe<SlipElementMeasurement>;
  isSlipStandardActive?: Maybe<Scalars['Boolean']>;
  slipSizeCustom?: Maybe<CustomSlipSize>;
  slipSizeStandard: SlipSizeStandard;
};

export type PrintPreferenceData = {
  data?: Maybe<Array<Maybe<PrintPreference>>>;
  error?: Maybe<QueryError>;
};

export type PrintPreferenceInput = {
  blockOne?: InputMaybe<SlipElementMeasurementInput>;
  blockThree?: InputMaybe<SlipElementMeasurementInput>;
  blockTwo?: InputMaybe<SlipElementMeasurementInput>;
  slipSizeCustom?: InputMaybe<CustomSlipSizeInput>;
  slipSizeStandard: SlipSizeStandard;
};

export type PrintPreferenceMutation = {
  add?: Maybe<PrintPreferenceResult>;
};

export type PrintPreferenceMutationAddArgs = {
  data?: InputMaybe<PrintPreferenceInput>;
};

export type PrintPreferenceQuery = {
  get?: Maybe<PrintPreferenceData>;
};

export type PrintPreferenceResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<PrintPreferenceQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export const PrintType = {
  CustomerCopy: 'CUSTOMER_COPY',
  FdCertificate: 'FD_CERTIFICATE',
  IssueCertificate: 'ISSUE_CERTIFICATE',
  OfficeVoucher: 'OFFICE_VOUCHER',
} as const;

export type PrintType = typeof PrintType[keyof typeof PrintType];
export type ProductAccountOpenCloseData = {
  additionalData?: Maybe<ProductChargeAdditionalData>;
  payload?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
};

export type ProductAccountOpenCloseListQueryResult = {
  data?: Maybe<Array<Maybe<ProductAccountOpenCloseData>>>;
  error?: Maybe<QueryError>;
};

export type ProductAccountOpenCloseQueryResult = {
  data?: Maybe<ProductAccountOpenCloseData>;
  error?: Maybe<QueryError>;
};

export type ProductActivateResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['ID'];
};

export type ProductChargeAdditionalData = {
  createdAt?: Maybe<Scalars['Localized']>;
  effectiveDate: Scalars['Localized'];
  fileUploads?: Maybe<Array<Maybe<UploadedDocumentData>>>;
  id?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
};

export type ProductChargeAdditionalDataInput = {
  effectiveDate: Scalars['Localized'];
  fileUploads?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  notes?: InputMaybe<Scalars['String']>;
};

export type ProductChargeMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['ID']>;
};

export type ProductCode = {
  initialNo?: InputMaybe<Scalars['String']>;
  noOfDigits?: InputMaybe<Scalars['Int']>;
  prefix?: InputMaybe<Scalars['String']>;
};

export type ProductCodeFormState = {
  initialNo: Scalars['String'];
  noOfDigits?: Maybe<Scalars['Int']>;
  prefix: Scalars['String'];
};

export type ProductCodeType = {
  initialNo: Scalars['String'];
  noOfDigits?: Maybe<Scalars['Int']>;
  prefix: Scalars['String'];
};

export type ProductPenaltyData = {
  additionalData?: Maybe<ProductChargeAdditionalData>;
  payload?: Maybe<Penalty>;
};

export type ProductPenaltyListQueryResult = {
  data?: Maybe<Array<Maybe<ProductPenaltyData>>>;
  error?: Maybe<QueryError>;
};

export type ProductPenaltyQueryResult = {
  data?: Maybe<ProductPenaltyData>;
  error?: Maybe<QueryError>;
};

export const PromotionType = {
  Designation: 'DESIGNATION',
  EmployeeLevel: 'EMPLOYEE_LEVEL',
} as const;

export type PromotionType = typeof PromotionType[keyof typeof PromotionType];
export type Province = {
  districts: Array<District>;
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type ProvisionAccount = {
  loanAccounts?: InputMaybe<Array<Scalars['String']>>;
  provisionMapping?: InputMaybe<ProvisionMapping>;
  selectAll?: InputMaybe<Scalars['Boolean']>;
};

export type ProvisionMapping = {
  from: Scalars['String'];
  to: Scalars['String'];
};

export type PurchaseDebitNote = {
  date?: Maybe<Scalars['Localized']>;
  invoiceReference: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  paymentDetail?: Maybe<PaymentDetail>;
  products: Array<SaleProduct>;
  supplierId: Scalars['String'];
  supplierName: Scalars['String'];
};

export type PurchaseDebitNoteDetails = {
  data?: Maybe<PurchaseDebitNote>;
  error?: Maybe<QueryError>;
};

export type PurchaseDebitNoteInput = {
  discount?: InputMaybe<Scalars['String']>;
  invoiceDate?: InputMaybe<Scalars['Localized']>;
  itemDetails?: InputMaybe<Array<InputMaybe<PurchaseItemDetails>>>;
  notes?: InputMaybe<Scalars['String']>;
  purchaseReference?: InputMaybe<Scalars['String']>;
  supplier?: InputMaybe<Scalars['String']>;
};

export type PurchaseDetailEntry = {
  data?: Maybe<AccountingPurchaseEntryDetail>;
  error?: Maybe<QueryError>;
};

export type PurchaseEntryInput = {
  discount?: InputMaybe<Scalars['String']>;
  dueDate?: InputMaybe<Scalars['Localized']>;
  invoiceDate?: InputMaybe<Scalars['Localized']>;
  invoiceReference?: InputMaybe<Scalars['String']>;
  itemDetails?: InputMaybe<Array<InputMaybe<PurchaseItemDetails>>>;
  notes?: InputMaybe<Scalars['String']>;
  supplier?: InputMaybe<Scalars['String']>;
};

export type PurchaseEntryResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<AccountingPurchaseQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type PurchaseExpenseDetails = {
  data?: Maybe<AccountingPurchaseExpenseDetail>;
  error?: Maybe<QueryError>;
};

export type PurchaseItemDetails = {
  amount?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  itemId?: InputMaybe<Scalars['String']>;
  itemName?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['String']>;
  rate?: InputMaybe<Scalars['String']>;
  tax?: InputMaybe<Scalars['String']>;
  taxValue?: InputMaybe<Scalars['String']>;
  warehouse?: InputMaybe<Scalars['String']>;
  warehouseName?: InputMaybe<Scalars['String']>;
};

export type PurchaseItemDetailsType = {
  amount?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  itemId?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['String']>;
  rate?: Maybe<Scalars['String']>;
  tax?: Maybe<Scalars['String']>;
  taxValue?: Maybe<Scalars['String']>;
  warehouse?: Maybe<Scalars['String']>;
  warehouseName?: Maybe<Scalars['String']>;
};

export type QuarterlyDividendRate = {
  firstQuarter?: Maybe<Scalars['Float']>;
  fourthQuarter?: Maybe<Scalars['Float']>;
  secondQuarter?: Maybe<Scalars['Float']>;
  thirdQuarter?: Maybe<Scalars['Float']>;
};

export type QuarterlyDividendRateInput = {
  firstQuarter?: InputMaybe<Scalars['Float']>;
  fourthQuarter?: InputMaybe<Scalars['Float']>;
  secondQuarter?: InputMaybe<Scalars['Float']>;
  thirdQuarter?: InputMaybe<Scalars['Float']>;
};

export type Query = {
  accessLog: AccessLogQuery;
  account: DepositLoanAccountQuery;
  accounting: AccountingQuery;
  administration: AdministrationQuery;
  agent: AgentQuery;
  allAccounts: AllAccountsQuery;
  alternativeChannel: AlternativeChannelQuery;
  auditLog: AuditLogQuery;
  auth: AuthQuery;
  bank: BankQuery;
  config: ConfigQuery;
  dashboard: DashboardQuery;
  document: DocumentQuery;
  endOfDay: EodQuery;
  example: ExampleQuery;
  form: FormQuery;
  hr: HrQuery;
  inventory: InventoryQuery;
  loanAccount: LoanAccountQuery;
  members: MemberQuery;
  microFinance: MicroFinanceQuery;
  permission: PermissionQuery;
  profitToFundManagement: FundManagementQuery;
  report: ReportQuery;
  requests: RequestsQuery;
  routesAndCodes: RoutesAndCodesQuery;
  search: SearchQuery;
  settings: SettingsQuery;
  share: ShareQuery;
  transaction: TransactionQuery;
  user: UserQuery;
  withdrawSlip: WithdrawSlipQuery;
};

export type QueryError = AuthorizationError | BadRequestError | NotFoundError | ServerError;

export const Resource = {
  AccountingAccounting: 'ACCOUNTING_ACCOUNTING',
  AccountingInvestment: 'ACCOUNTING_INVESTMENT',
  AccountingLoan: 'ACCOUNTING_LOAN',
  AccountingPurchase: 'ACCOUNTING_PURCHASE',
  AccountingSales: 'ACCOUNTING_SALES',
  AccountingSystemAccountingBankAccounts: 'ACCOUNTING_SYSTEM_ACCOUNTING_BANK_ACCOUNTS',
  AccountingSystemAccountingBankTransactions: 'ACCOUNTING_SYSTEM_ACCOUNTING_BANK_TRANSACTIONS',
  AccountingSystemAccountingCashTransfer: 'ACCOUNTING_SYSTEM_ACCOUNTING_CASH_TRANSFER',
  AccountingSystemAccountingChartsOfAccounts: 'ACCOUNTING_SYSTEM_ACCOUNTING_CHARTS_OF_ACCOUNTS',
  AccountingSystemAccountingJournalEntry: 'ACCOUNTING_SYSTEM_ACCOUNTING_JOURNAL_ENTRY',
  AccountingSystemAccountingQuickPayment: 'ACCOUNTING_SYSTEM_ACCOUNTING_QUICK_PAYMENT',
  AccountingSystemAccountingQuickReceipt: 'ACCOUNTING_SYSTEM_ACCOUNTING_QUICK_RECEIPT',
  AccountingSystemExternalLoan: 'ACCOUNTING_SYSTEM_EXTERNAL_LOAN',
  AccountingSystemExternalLoanAccounts: 'ACCOUNTING_SYSTEM_EXTERNAL_LOAN_ACCOUNTS',
  AccountingSystemExternalLoanPayments: 'ACCOUNTING_SYSTEM_EXTERNAL_LOAN_PAYMENTS',
  AccountingSystemInvestments: 'ACCOUNTING_SYSTEM_INVESTMENTS',
  AccountingSystemInvestmentsAccounts: 'ACCOUNTING_SYSTEM_INVESTMENTS_ACCOUNTS',
  AccountingSystemInvestmentTransactions: 'ACCOUNTING_SYSTEM_INVESTMENT_TRANSACTIONS',
  AccountingSystemPurchaseDebitNote: 'ACCOUNTING_SYSTEM_PURCHASE_DEBIT_NOTE',
  AccountingSystemPurchaseExpenses: 'ACCOUNTING_SYSTEM_PURCHASE_EXPENSES',
  AccountingSystemPurchasePurchaseEntry: 'ACCOUNTING_SYSTEM_PURCHASE_PURCHASE_ENTRY',
  AccountingSystemPurchaseSuppliers: 'ACCOUNTING_SYSTEM_PURCHASE_SUPPLIERS',
  AccountingSystemPurchaseSupplierPayment: 'ACCOUNTING_SYSTEM_PURCHASE_SUPPLIER_PAYMENT',
  AccountingSystemSalesCreditNote: 'ACCOUNTING_SYSTEM_SALES_CREDIT_NOTE',
  AccountingSystemSalesCustomers: 'ACCOUNTING_SYSTEM_SALES_CUSTOMERS',
  AccountingSystemSalesCustomerPayment: 'ACCOUNTING_SYSTEM_SALES_CUSTOMER_PAYMENT',
  AccountingSystemSalesSalesEntry: 'ACCOUNTING_SYSTEM_SALES_SALES_ENTRY',
  AlternativeChannelsAtmCardRegistration: 'ALTERNATIVE_CHANNELS_ATM_CARD_REGISTRATION',
  AlternativeChannelsDownloads: 'ALTERNATIVE_CHANNELS_DOWNLOADS',
  AlternativeChannelsEBankingRegistration: 'ALTERNATIVE_CHANNELS_E_BANKING_REGISTRATION',
  AlternativeChannelsMobileBankingRegistration: 'ALTERNATIVE_CHANNELS_MOBILE_BANKING_REGISTRATION',
  AlternativeChannelsSmsRegistration: 'ALTERNATIVE_CHANNELS_SMS_REGISTRATION',
  AlternativeChannelsUsers: 'ALTERNATIVE_CHANNELS_USERS',
  AppAccounting: 'APP_ACCOUNTING',
  AppAlternativeChannel: 'APP_ALTERNATIVE_CHANNEL',
  AppCbs: 'APP_CBS',
  AppHcm: 'APP_HCM',
  AppInventory: 'APP_INVENTORY',
  AppMemberShare: 'APP_MEMBER_SHARE',
  CbbMembersMemberFee: 'CBB_MEMBERS_MEMBER_FEE',
  CbsEndOfTheDay: 'CBS_END_OF_THE_DAY',
  CbsLoan: 'CBS_LOAN',
  CbsLoanDeclinedLoan: 'CBS_LOAN_DECLINED_LOAN',
  CbsLoanLoanAccount: 'CBS_LOAN_LOAN_ACCOUNT',
  CbsLoanLoanAccountClose: 'CBS_LOAN_LOAN_ACCOUNT_CLOSE',
  CbsLoanLoanApplication: 'CBS_LOAN_LOAN_APPLICATION',
  CbsLoanLoanCollateralRelease: 'CBS_LOAN_LOAN_COLLATERAL_RELEASE',
  CbsLoanLoanDisbursement: 'CBS_LOAN_LOAN_DISBURSEMENT',
  CbsLoanLoanInterestPost: 'CBS_LOAN_LOAN_INTEREST_POST',
  CbsLoanLoanInterestRateChange: 'CBS_LOAN_LOAN_INTEREST_RATE_CHANGE',
  CbsLoanLoanRenewOrReschedule: 'CBS_LOAN_LOAN_RENEW_OR_RESCHEDULE',
  CbsMembersKymUpdate: 'CBS_MEMBERS_KYM_UPDATE',
  CbsMembersMember: 'CBS_MEMBERS_MEMBER',
  CbsMembersMemberClose: 'CBS_MEMBERS_MEMBER_CLOSE',
  CbsMembersMemberDetail: 'CBS_MEMBERS_MEMBER_DETAIL',
  CbsMembersTransfer: 'CBS_MEMBERS_TRANSFER',
  CbsMiscellaneousMarketRepresentatives: 'CBS_MISCELLANEOUS_MARKET_REPRESENTATIVES',
  CbsMiscellaneousMarketRepresentativesDayClose:
    'CBS_MISCELLANEOUS_MARKET_REPRESENTATIVES_DAY_CLOSE',
  CbsMiscellaneousMarketRepresentativesMemberAssignment:
    'CBS_MISCELLANEOUS_MARKET_REPRESENTATIVES_MEMBER_ASSIGNMENT',
  CbsMiscellaneousMarketRepresentativesProfitToFundManagement:
    'CBS_MISCELLANEOUS_MARKET_REPRESENTATIVES_PROFIT_TO_FUND_MANAGEMENT',
  CbsMiscellaneousMarketRepresentativesShareDividendPosting:
    'CBS_MISCELLANEOUS_MARKET_REPRESENTATIVES_SHARE_DIVIDEND_POSTING',
  CbsMiscellaneousMarketRepresentativesTodayCollectionSheet:
    'CBS_MISCELLANEOUS_MARKET_REPRESENTATIVES_TODAY_COLLECTION_SHEET',
  CbsOthers: 'CBS_OTHERS',
  CbsReports: 'CBS_REPORTS',
  CbsReportsAtm: 'CBS_REPORTS_ATM',
  CbsReportsBranchlessBanking: 'CBS_REPORTS_BRANCHLESS_BANKING',
  CbsReportsLoan: 'CBS_REPORTS_LOAN',
  CbsReportsMember: 'CBS_REPORTS_MEMBER',
  CbsReportsMobileBanking: 'CBS_REPORTS_MOBILE_BANKING',
  CbsReportsOrganization: 'CBS_REPORTS_ORGANIZATION',
  CbsReportsOther: 'CBS_REPORTS_OTHER',
  CbsReportsSavings: 'CBS_REPORTS_SAVINGS',
  CbsReportsServiceCenter: 'CBS_REPORTS_SERVICE_CENTER',
  CbsReportsShare: 'CBS_REPORTS_SHARE',
  CbsReportsTransaction: 'CBS_REPORTS_TRANSACTION',
  CbsRequests: 'CBS_REQUESTS',
  CbsRequestsLoanRequests: 'CBS_REQUESTS_LOAN_REQUESTS',
  CbsRequestsMemberRequests: 'CBS_REQUESTS_MEMBER_REQUESTS',
  CbsRequestsWithdrawRequest: 'CBS_REQUESTS_WITHDRAW_REQUEST',
  CbsSavings: 'CBS_SAVINGS',
  CbsSavingsFdCertificatePrint: 'CBS_SAVINGS_FD_CERTIFICATE_PRINT',
  CbsSavingsSavingAccount: 'CBS_SAVINGS_SAVING_ACCOUNT',
  CbsSavingsSavingAccountClose: 'CBS_SAVINGS_SAVING_ACCOUNT_CLOSE',
  CbsSavingsSavingAccountRenew: 'CBS_SAVINGS_SAVING_ACCOUNT_RENEW',
  CbsSavingsSavingInterestPost: 'CBS_SAVINGS_SAVING_INTEREST_POST',
  CbsSavingsSavingInterestRateChange: 'CBS_SAVINGS_SAVING_INTEREST_RATE_CHANGE',
  CbsSavingsSavingProduct: 'CBS_SAVINGS_SAVING_PRODUCT',
  CbsShare: 'CBS_SHARE',
  CbsShareShareBalance: 'CBS_SHARE_SHARE_BALANCE',
  CbsShareShareCertificate: 'CBS_SHARE_SHARE_CERTIFICATE',
  CbsShareShareIssue: 'CBS_SHARE_SHARE_ISSUE',
  CbsShareShareRegister: 'CBS_SHARE_SHARE_REGISTER',
  CbsShareShareReturn: 'CBS_SHARE_SHARE_RETURN',
  CbsTransactions: 'CBS_TRANSACTIONS',
  CbsTransactionsAccountTransfer: 'CBS_TRANSACTIONS_ACCOUNT_TRANSFER',
  CbsTransactionsAllTransactions: 'CBS_TRANSACTIONS_ALL_TRANSACTIONS',
  CbsTransactionsBulkAccountTransfer: 'CBS_TRANSACTIONS_BULK_ACCOUNT_TRANSFER',
  CbsTransactionsDeposit: 'CBS_TRANSACTIONS_DEPOSIT',
  CbsTransactionsJournalVoucher: 'CBS_TRANSACTIONS_JOURNAL_VOUCHER',
  CbsTransactionsLoanRepayment: 'CBS_TRANSACTIONS_LOAN_REPAYMENT',
  CbsTransactionsMarketRepresentativeCollection:
    'CBS_TRANSACTIONS_MARKET_REPRESENTATIVE_COLLECTION',
  CbsTransactionsWithdraw: 'CBS_TRANSACTIONS_WITHDRAW',
  CbsTransactionLimitDepositLimit: 'CBS_TRANSACTION_LIMIT_DEPOSIT_LIMIT',
  CbsTransactionLimitLoanDisburse: 'CBS_TRANSACTION_LIMIT_LOAN_DISBURSE',
  CbsTransactionLimitShare: 'CBS_TRANSACTION_LIMIT_SHARE',
  CbsTransactionLimitWithdrawLimit: 'CBS_TRANSACTION_LIMIT_WITHDRAW_LIMIT',
  CbsTransactionRestrict: 'CBS_TRANSACTION_RESTRICT',
  CbsTransactionRevert: 'CBS_TRANSACTION_REVERT',
  CbsTransactionYearEnd: 'CBS_TRANSACTION_YEAR_END',
  CbsTransfers: 'CBS_TRANSFERS',
  CbsTransfersBankTransfer: 'CBS_TRANSFERS_BANK_TRANSFER',
  CbsTransfersCashInTransitTransfer: 'CBS_TRANSFERS_CASH_IN_TRANSIT_TRANSFER',
  CbsTransfersServiceCenterCashTransfer: 'CBS_TRANSFERS_SERVICE_CENTER_CASH_TRANSFER',
  CbsTransfersServiceCenterTransfer: 'CBS_TRANSFERS_SERVICE_CENTER_TRANSFER',
  CbsTransfersTellerTransfer: 'CBS_TRANSFERS_TELLER_TRANSFER',
  CbsTransfersVaultTransfer: 'CBS_TRANSFERS_VAULT_TRANSFER',
  CbsWithdrawSlips: 'CBS_WITHDRAW_SLIPS',
  CbsWithdrawSlipsWithdrawSlipsBlock: 'CBS_WITHDRAW_SLIPS_WITHDRAW_SLIPS_BLOCK',
  CbsWithdrawSlipsWithdrawSlipsIssue: 'CBS_WITHDRAW_SLIPS_WITHDRAW_SLIPS_ISSUE',
  CbsWithdrawSlipsWithdrawSlipsRequests: 'CBS_WITHDRAW_SLIPS_WITHDRAW_SLIPS_REQUESTS',
  HcmEmployee: 'HCM_EMPLOYEE',
  HcmEmployeeAttendance: 'HCM_EMPLOYEE_ATTENDANCE',
  HcmEmployeeEmployees: 'HCM_EMPLOYEE_EMPLOYEES',
  HcmEmployeeLeave: 'HCM_EMPLOYEE_LEAVE',
  HcmEmployeeLifecycle: 'HCM_EMPLOYEE_LIFECYCLE',
  HcmEmployeeLifecycleExit: 'HCM_EMPLOYEE_LIFECYCLE_EXIT',
  HcmEmployeeLifecycleOnboarding: 'HCM_EMPLOYEE_LIFECYCLE_ONBOARDING',
  HcmEmployeeLifecyclePromotion: 'HCM_EMPLOYEE_LIFECYCLE_PROMOTION',
  HcmEmployeeLifecycleSeperation: 'HCM_EMPLOYEE_LIFECYCLE_SEPERATION',
  HcmEmployeeLifecycleTransfer: 'HCM_EMPLOYEE_LIFECYCLE_TRANSFER',
  HcmPayroll: 'HCM_PAYROLL',
  HcmPayrollEntry: 'HCM_PAYROLL_ENTRY',
  HcmPayrollExpense: 'HCM_PAYROLL_EXPENSE',
  HcmPayrollSalarySlip: 'HCM_PAYROLL_SALARY_SLIP',
  HcmPayrollSalaryStructureAssignment: 'HCM_PAYROLL_SALARY_STRUCTURE_ASSIGNMENT',
  HcmRecruitment: 'HCM_RECRUITMENT',
  HcmRecruitmentAppointmentLetter: 'HCM_RECRUITMENT_APPOINTMENT_LETTER',
  HcmRecruitmentInterview: 'HCM_RECRUITMENT_INTERVIEW',
  HcmRecruitmentJobApplication: 'HCM_RECRUITMENT_JOB_APPLICATION',
  HcmRecruitmentJobOffer: 'HCM_RECRUITMENT_JOB_OFFER',
  HcmRecruitmentJobOpening: 'HCM_RECRUITMENT_JOB_OPENING',
  HcmRecruitmentStaffPlanning: 'HCM_RECRUITMENT_STAFF_PLANNING',
  HcmReport: 'HCM_REPORT',
  HcmTraining: 'HCM_TRAINING',
  HcmTrainingCourses: 'HCM_TRAINING_COURSES',
  HcmTrainingStudents: 'HCM_TRAINING_STUDENTS',
  SettingsAlternativeChannels: 'SETTINGS_ALTERNATIVE_CHANNELS',
  SettingsAuditLog: 'SETTINGS_AUDIT_LOG',
  SettingsBank: 'SETTINGS_BANK',
  SettingsCoa: 'SETTINGS_COA',
  SettingsCoaLedgerTransfer: 'SETTINGS_COA_LEDGER_TRANSFER',
  SettingsCodeManagement: 'SETTINGS_CODE_MANAGEMENT',
  SettingsDocumentManagement: 'SETTINGS_DOCUMENT_MANAGEMENT',
  SettingsEodSeed: 'SETTINGS_EOD_SEED',
  SettingsGeneral: 'SETTINGS_GENERAL',
  SettingsHcmEmployee: 'SETTINGS_HCM_EMPLOYEE',
  SettingsHcmPayroll: 'SETTINGS_HCM_PAYROLL',
  SettingsIndexing: 'SETTINGS_INDEXING',
  SettingsInsurance: 'SETTINGS_INSURANCE',
  SettingsKymSetting: 'SETTINGS_KYM_SETTING',
  SettingsLoanParameters: 'SETTINGS_LOAN_PARAMETERS',
  SettingsLoanProducts: 'SETTINGS_LOAN_PRODUCTS',
  SettingsMember: 'SETTINGS_MEMBER',
  SettingsMigration: 'SETTINGS_MIGRATION',
  SettingsOrganizationProfile: 'SETTINGS_ORGANIZATION_PROFILE',
  SettingsPrintPreference: 'SETTINGS_PRINT_PREFERENCE',
  SettingsReportSetting: 'SETTINGS_REPORT_SETTING',
  SettingsSavingParameters: 'SETTINGS_SAVING_PARAMETERS',
  SettingsSavingProducts: 'SETTINGS_SAVING_PRODUCTS',
  SettingsServiceCenter: 'SETTINGS_SERVICE_CENTER',
  SettingsShare: 'SETTINGS_SHARE',
  SettingsUsers: 'SETTINGS_USERS',
  UserUser: 'USER_USER',
  UserUserPassword: 'USER_USER_PASSWORD',
} as const;

export type Resource = typeof Resource[keyof typeof Resource];
export type RawAccessLog = {
  data?: Maybe<Array<Maybe<AccessLog>>>;
  error?: Maybe<QueryError>;
};

export type RawAuditLog = {
  data?: Maybe<Array<Maybe<AuditLog>>>;
  error?: Maybe<QueryError>;
};

export type Rebate = {
  dayBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
  rebateLedgerMapping?: Maybe<Scalars['String']>;
  rebateRate?: Maybe<Scalars['Float']>;
};

export type RebateFormState = {
  dayBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
  rebateLedgerMapping?: Maybe<Scalars['String']>;
  rebateRate?: Maybe<Scalars['Float']>;
};

export type RebateInput = {
  daysBeforeInstallmentDate?: InputMaybe<Scalars['Int']>;
  noOfInstallment?: InputMaybe<Scalars['Int']>;
  percentage?: InputMaybe<Scalars['Float']>;
  rebateAmount?: InputMaybe<Scalars['Amount']>;
};

export type RebateTypeInput = {
  dayBeforeInstallmentDate?: InputMaybe<Scalars['Int']>;
  noOfInstallment?: InputMaybe<Scalars['Int']>;
  rebateAmount?: InputMaybe<Scalars['Amount']>;
  rebateLedgerMapping?: InputMaybe<Scalars['String']>;
  rebateRate?: InputMaybe<Scalars['Float']>;
};

export type ReleaseGuaranteeInput = {
  files?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  note: Scalars['String'];
};

export type RemoveMemberResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type RepaymentPenaltyInput = {
  amount: Scalars['String'];
  doc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ReportDetail = {
  id: Scalars['ID'];
  lastModifiedDate: Scalars['Localized'];
  name: Scalars['String'];
  reportType: Scalars['String'];
  savedBy: Scalars['String'];
};

export type ReportEntry = {
  entryName?: Maybe<Scalars['String']>;
  inNumber?: Maybe<Scalars['Int']>;
  inPercent?: Maybe<Scalars['String']>;
};

export type ReportListConnection = {
  edges?: Maybe<Array<Maybe<ReportListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ReportListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<ReportDetail>;
};

export type ReportListFilter = {
  name?: InputMaybe<Scalars['String']>;
  reportType?: InputMaybe<Scalars['String']>;
  savedBy?: InputMaybe<Scalars['String']>;
};

export type ReportMutation = {
  statementReport?: Maybe<ReportResult>;
};

export type ReportMutationStatementReportArgs = {
  data: StatementReportInput;
};

export const ReportPeriodType = {
  CustomPeriod: 'CUSTOM_PERIOD',
  Last_7Days: 'LAST_7_DAYS',
  Last_14Days: 'LAST_14_DAYS',
  Last_30Days: 'LAST_30_DAYS',
  LastYear: 'LAST_YEAR',
  Lifetime: 'LIFETIME',
  ThisFiscalYearToDate: 'THIS_FISCAL_YEAR_TO_DATE',
  ThisYear: 'THIS_YEAR',
  Today: 'TODAY',
  Yesterday: 'YESTERDAY',
} as const;

export type ReportPeriodType = typeof ReportPeriodType[keyof typeof ReportPeriodType];
export type ReportQuery = {
  accountingReport: AccountingReport;
  branchReport: BranchReport;
  cashReport: CashReport;
  committeeQuery: CommitteeReport;
  copomisFinancialReport: CopomisFinancialResult;
  depositReport: DepositReport;
  employeeReport: EmployeeReport;
  exceptionReport: ExceptionReport;
  getReport?: Maybe<SavedReportResponse>;
  inventoryReport: InventoryReport;
  listReports: ReportListConnection;
  loanReport: LoanReport;
  memberReport: MemberReport;
  mobileBankingReport: MobileBankingReport;
  otherReport: OtherReport;
  pearlsReport?: Maybe<PearlsReportResult>;
  printReport: CertificatePrint;
  shareReport: ShareReport;
  transactionReport: TransactionReport;
};

export type ReportQueryCopomisFinancialReportArgs = {
  data: CopomisFinancialInput;
};

export type ReportQueryGetReportArgs = {
  reportId: Scalars['ID'];
};

export type ReportQueryListReportsArgs = {
  filter?: InputMaybe<ReportListFilter>;
  organizationId?: InputMaybe<Scalars['ID']>;
  pagination?: InputMaybe<Pagination>;
};

export type ReportQueryPearlsReportArgs = {
  data: PearlsReportInput;
};

export type ReportResult = {
  error?: Maybe<QueryError>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['ID']>;
  statement?: Maybe<StatementReport>;
};

export type ReportSettingMutation = {
  resetTrialCache?: Maybe<Scalars['String']>;
};

export type ReportSettingsMutation = {
  copomis?: Maybe<CopomisConfigurationMutation>;
  pearls?: Maybe<PearlsConfigurationMutation>;
};

export type ReportSettingsQuery = {
  copomis?: Maybe<CopomisConfigurationQuery>;
  pearls?: Maybe<PearlsConfigurationQuery>;
};

export type RequestApproveOrDeclineInput = {
  approve: Scalars['Boolean'];
  notifyMember?: InputMaybe<Scalars['Boolean']>;
  purposedDate?: InputMaybe<Scalars['Localized']>;
  reasonForDeclination?: InputMaybe<Scalars['String']>;
  requestId: Scalars['String'];
};

export type RequestApproveOrDeclineResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<RequestsQuery>;
  requestId?: Maybe<Scalars['String']>;
};

export type RequestFilter = {
  id?: InputMaybe<Scalars['ID']>;
  requestStatus?: InputMaybe<RequestStatus>;
  requestType?: InputMaybe<Scalars['String']>;
};

export const RequestStatus = {
  Approved: 'APPROVED',
  Declined: 'DECLINED',
  Pending: 'PENDING',
} as const;

export type RequestStatus = typeof RequestStatus[keyof typeof RequestStatus];
export const RequestType = {
  BlockCheque: 'BLOCK_CHEQUE',
  ChequeBookRequest: 'CHEQUE_BOOK_REQUEST',
  LoanRequest: 'LOAN_REQUEST',
  WithdrawRequest: 'WITHDRAW_REQUEST',
} as const;

export type RequestType = typeof RequestType[keyof typeof RequestType];
export type RequestsList = {
  blockCheque?: Maybe<BlockChequeRequestConnection>;
  chequeBookRequest?: Maybe<ChequeBookRequestConnection>;
  loanRequest?: Maybe<LoanRequestConnection>;
  membershipRequest?: Maybe<MembershipRequestConnection>;
  withdrawViaCollector?: Maybe<WithdrawViaCollectorConnection>;
};

export type RequestsListBlockChequeArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsListChequeBookRequestArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsListLoanRequestArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsListMembershipRequestArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsListWithdrawViaCollectorArgs = {
  filter?: InputMaybe<Filter>;
  paginate?: InputMaybe<Pagination>;
};

export type RequestsMutation = {
  approveOrDecline?: Maybe<ApproveOrDeclineMutation>;
  requestApproveOrDecline?: Maybe<RequestApproveOrDeclineResult>;
};

export type RequestsMutationRequestApproveOrDeclineArgs = {
  data?: InputMaybe<RequestApproveOrDeclineInput>;
  requestType: RequestType;
};

export type RequestsQuery = {
  list?: Maybe<RequestsList>;
};

export type ResetPasswordData = {
  newPassword: Scalars['String'];
  oldPassword: Scalars['String'];
  userId: Scalars['String'];
};

export type ResetPasswordResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type RestrictTransactionInput = {
  accountId?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<Scalars['String']>;
  effectiveSince: Scalars['Localized'];
  effectiveTill: Scalars['Localized'];
  ledgerId?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  txnType: CoaTypeOfTransaction;
};

export type RestrictTransactionListEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<RestrictTransactionResultEntry>;
};

export type RestrictTransactionMutation = {
  disable?: Maybe<RestrictTransactionMutationResult>;
  restrict?: Maybe<RestrictTransactionMutationResult>;
};

export type RestrictTransactionMutationDisableArgs = {
  id: Scalars['ID'];
};

export type RestrictTransactionMutationRestrictArgs = {
  data: RestrictTransactionInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type RestrictTransactionMutationResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type RestrictTransactionQuery = {
  list?: Maybe<RestrictTransactionResult>;
};

export type RestrictTransactionQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type RestrictTransactionResult = {
  edges?: Maybe<Array<Maybe<RestrictTransactionListEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type RestrictTransactionResultEntry = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountType?: Maybe<Scalars['String']>;
  effectiveSince: Scalars['Localized'];
  effectiveTill: Scalars['Localized'];
  id?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  ledgerName?: Maybe<Scalars['String']>;
  ledgerType?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  state?: Maybe<ObjState>;
  txnType?: Maybe<CoaTypeOfTransaction>;
  valueDate?: Maybe<Scalars['Localized']>;
};

export type Result = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type ReturnAppointmentLetter = {
  error?: Maybe<MutationError>;
  record?: Maybe<AppointmentLetterRecord>;
  recordId: Scalars['ID'];
};

export type ReturnDeductionComponent = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type ReturnEarningComponent = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type ReturnEmployeeExit = {
  error?: Maybe<MutationError>;
  record?: Maybe<EmployeeExitRecord>;
  recordId: Scalars['ID'];
};

export type ReturnEmployeeOnboarding = {
  error?: Maybe<MutationError>;
  record?: Maybe<EmployeeOnboardingRecord>;
  recordId: Scalars['ID'];
};

export type ReturnEmployeeTransfer = {
  error?: Maybe<MutationError>;
  record?: Maybe<EmployeeTransferRecord>;
  recordId: Scalars['ID'];
};

export type ReturnJobApplication = {
  error?: Maybe<MutationError>;
  record?: Maybe<JobApplicationRecord>;
  recordId: Scalars['ID'];
};

export type ReturnJobOffer = {
  error?: Maybe<MutationError>;
  record?: Maybe<JobOfferRecord>;
  recordId: Scalars['ID'];
};

export type ReturnJobOpening = {
  error?: Maybe<MutationError>;
  record?: Maybe<JobOpeningRecord>;
  recordId: Scalars['ID'];
};

export type ReturnStaffPlan = {
  error?: Maybe<MutationError>;
  record?: Maybe<StaffPlanRecord>;
  recordId?: Maybe<Scalars['String']>;
};

export type ReturnWarehouseInput = {
  address: Scalars['String'];
  branchId: Scalars['String'];
  name: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type RevertTransactionResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type RevokeDormancyInput = {
  activateLoanTransaction: Scalars['Boolean'];
  activateSavingTransaction: Scalars['Boolean'];
  activateShareTransaction: Scalars['Boolean'];
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  notes?: InputMaybe<Scalars['String']>;
};

export const RiskCategoryFilter = {
  All: 'ALL',
  High: 'HIGH',
  Low: 'LOW',
  Medium: 'MEDIUM',
} as const;

export type RiskCategoryFilter = typeof RiskCategoryFilter[keyof typeof RiskCategoryFilter];
export type RoleInfo = {
  id: Scalars['String'];
  name: Scalars['String'];
};

export const Roles = {
  Accountant: 'ACCOUNTANT',
  Agent: 'AGENT',
  BranchManager: 'BRANCH_MANAGER',
  CustomerServiceRepresentative: 'CUSTOMER_SERVICE_REPRESENTATIVE',
  HeadTeller: 'HEAD_TELLER',
  Superadmin: 'SUPERADMIN',
  Teller: 'TELLER',
} as const;

export type Roles = typeof Roles[keyof typeof Roles];
export const RolesFilter = {
  Agent: 'AGENT',
  BranchManager: 'BRANCH_MANAGER',
  HeadTeller: 'HEAD_TELLER',
  Superadmin: 'SUPERADMIN',
  Teller: 'TELLER',
} as const;

export type RolesFilter = typeof RolesFilter[keyof typeof RolesFilter];
export type RoutesAndCodes = {
  code?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type RoutesAndCodesFilter = {
  code?: InputMaybe<Scalars['Int']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type RoutesAndCodesQuery = {
  list: Array<RoutesAndCodes>;
};

export type RoutesAndCodesQueryListArgs = {
  filter?: InputMaybe<RoutesAndCodesFilter>;
};

export const Share_Status = {
  Active: 'ACTIVE',
  Draft: 'DRAFT',
  Submitted: 'SUBMITTED',
} as const;

export type Share_Status = typeof Share_Status[keyof typeof Share_Status];
export const Share_Transaction_Direction = {
  Purchase: 'PURCHASE',
  Return: 'RETURN',
} as const;

export type Share_Transaction_Direction =
  typeof Share_Transaction_Direction[keyof typeof Share_Transaction_Direction];
export type StrDetailData = {
  bio?: Maybe<IndividualBio>;
  deposits?: Maybe<Array<Maybe<TransactionDetail>>>;
  loanAccount?: Maybe<Array<Maybe<LoanAccount>>>;
  memberType?: Maybe<KymMemberTypesEnum>;
  savingAccounts?: Maybe<Array<Maybe<DepositAccount>>>;
  strAccountDetails?: Maybe<CombinedAccountDetail>;
  strReason?: Maybe<Scalars['String']>;
  strStatus?: Maybe<Scalars['Boolean']>;
  strTopology?: Maybe<Scalars['String']>;
  transactionDetails?: Maybe<Array<Maybe<AccountwiseTransactionDetail>>>;
  withdraw?: Maybe<Array<Maybe<TransactionDetail>>>;
};

export type StrTransactionActionResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type StrTransactionDetailQuery = {
  data?: Maybe<StrDetailData>;
  error?: Maybe<QueryError>;
};

export type SalaryRange = {
  default: Scalars['String'];
  id: Scalars['ID'];
  max: Scalars['String'];
  min: Scalars['String'];
};

export type SalaryRangeInput = {
  default: Scalars['String'];
  max: Scalars['String'];
  min: Scalars['String'];
};

export type SalaryStructureDeductionDetails = {
  abbr: Scalars['String'];
  amount?: InputMaybe<Scalars['Int']>;
  baseMultiple?: InputMaybe<Scalars['String']>;
  component?: InputMaybe<Scalars['String']>;
  multiplier?: InputMaybe<Scalars['Float']>;
};

export type SalaryStructureDeductionDetailsType = {
  abbr: Scalars['String'];
  amount?: Maybe<Scalars['Int']>;
  baseMultiple?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  multiplier?: Maybe<Scalars['Float']>;
};

export type SalaryStructureEarningDetails = {
  abbr: Scalars['String'];
  amount?: InputMaybe<Scalars['Int']>;
  baseMultiple?: InputMaybe<Scalars['String']>;
  component?: InputMaybe<Scalars['String']>;
  multiplier?: InputMaybe<Scalars['Float']>;
};

export type SalaryStructureEarningDetailsType = {
  abbr: Scalars['String'];
  amount?: Maybe<Scalars['Int']>;
  baseMultiple?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  multiplier?: Maybe<Scalars['Float']>;
};

export type SalaryStructureListConnection = {
  edges?: Maybe<Array<Maybe<SalaryStructureListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalaryStructureListEdges = {
  cursor: Scalars['Cursor'];
  node: SalaryStructureNode;
};

export type SalaryStructureNode = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<SalaryStructureStatusEnum>;
};

export type SalaryStructureOutput = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export const SalaryStructureStatusEnum = {
  Disabled: 'DISABLED',
  Enabled: 'ENABLED',
} as const;

export type SalaryStructureStatusEnum =
  typeof SalaryStructureStatusEnum[keyof typeof SalaryStructureStatusEnum];
export type SaleProduct = {
  amount?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  itemId?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['String']>;
  rate?: Maybe<Scalars['String']>;
  tax?: Maybe<Scalars['String']>;
  taxValue?: Maybe<Scalars['String']>;
  warehouse?: Maybe<Scalars['String']>;
  warehouseName?: Maybe<Scalars['String']>;
};

export type SaleProductInput = {
  amount: Scalars['String'];
  name: Scalars['String'];
  productDescription?: InputMaybe<Scalars['String']>;
  quantity: Scalars['String'];
  rate: Scalars['String'];
  salesLedger?: InputMaybe<Scalars['String']>;
  tax: Scalars['Float'];
  warehousePartition?: InputMaybe<Scalars['String']>;
};

export type SalesCreditNote = {
  customerID: Scalars['ID'];
  customerName?: Maybe<Scalars['String']>;
  date: Scalars['Localized'];
  invoiceReference: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  paymentDetail?: Maybe<PaymentDetail>;
  products: Array<SaleProduct>;
};

export type SalesCreditNoteEntry = {
  amount: Scalars['String'];
  customerId: Scalars['String'];
  customerName: Scalars['String'];
  date: Scalars['Localized'];
  id: Scalars['ID'];
  invoiceReferenceNo?: Maybe<Scalars['String']>;
  noteNo: Scalars['String'];
};

export type SalesCreditNoteFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SalesCreditNoteInput = {
  customerID?: InputMaybe<Scalars['ID']>;
  discount?: InputMaybe<Scalars['String']>;
  invoiceDate?: InputMaybe<Scalars['Localized']>;
  invoiceReference?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<Array<InputMaybe<PurchaseItemDetails>>>;
};

export type SalesCreditNoteListConnection = {
  edges?: Maybe<Array<Maybe<SalesCreditNoteListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalesCreditNoteListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SalesCreditNoteEntry>;
};

export type SalesCustomer = {
  address: KymAddress;
  code: Scalars['String'];
  creditLimit?: Maybe<Scalars['String']>;
  creditTerms?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  openingBalance?: Maybe<Scalars['String']>;
  pan: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type SalesCustomerDetail = {
  data?: Maybe<SalesCustomerEntry>;
  error?: Maybe<QueryError>;
};

export type SalesCustomerEntry = {
  address?: Maybe<Address>;
  code?: Maybe<Scalars['String']>;
  creditLimit?: Maybe<Scalars['String']>;
  creditTerms?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  openingBalance?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

export type SalesCustomerFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SalesCustomerInput = {
  address: KymAddressInput;
  code: Scalars['String'];
  creditLimit?: InputMaybe<Scalars['String']>;
  creditTerms?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  openingBalance?: InputMaybe<Scalars['String']>;
  pan: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type SalesCustomerListConnection = {
  edges?: Maybe<Array<Maybe<SalesCustomerListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalesCustomerListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SalesCustomerEntry>;
};

export type SalesCustomerPayment = {
  notes?: Maybe<Scalars['String']>;
  paymentAllocation: Array<PaymentAllocation>;
  paymentMethod: CustomerPayment;
  paymentReferenceNo?: Maybe<Scalars['String']>;
  receivedAccount: Scalars['String'];
  receivedAmount: Scalars['String'];
  receivedDate: Scalars['Localized'];
  receivedFrom: Scalars['String'];
  tds: Scalars['Boolean'];
  tdsAccount?: Maybe<Scalars['String']>;
  tdsAmount?: Maybe<Scalars['String']>;
  tdsType?: Maybe<Scalars['String']>;
};

export type SalesCustomerPaymentEntry = {
  date?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  paymentMode?: Maybe<CustomerPayment>;
  receivedFrom?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
};

export type SalesCustomerPaymentFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SalesCustomerPaymentInput = {
  notes?: InputMaybe<Scalars['String']>;
  paymentAllocation: Array<PaymentAllocationInput>;
  paymentMethod: CustomerPayment;
  paymentReferenceNo?: InputMaybe<Scalars['String']>;
  receivedAccount: Scalars['String'];
  receivedAmount: Scalars['String'];
  receivedDate: Scalars['Localized'];
  receivedFrom: Scalars['String'];
  tds: Scalars['Boolean'];
  tdsAccount?: InputMaybe<Scalars['String']>;
  tdsAmount?: InputMaybe<Scalars['String']>;
  tdsType?: InputMaybe<Scalars['String']>;
};

export type SalesCustomerPaymentListConnection = {
  edges?: Maybe<Array<Maybe<SalesCustomerPaymentListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalesCustomerPaymentListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SalesCustomerPaymentEntry>;
};

export type SalesReportDataList = {
  itemId: Scalars['String'];
  itemName: Scalars['String'];
  netAmountWithVat: Scalars['String'];
  selligPrice: Scalars['String'];
  soldQuantity: Scalars['String'];
  totalPrice: Scalars['String'];
  unitName: Scalars['String'];
  vatAmount: Scalars['String'];
};

export type SalesReportFilter = {
  creatorIds?: InputMaybe<Array<Scalars['String']>>;
  itemIds?: InputMaybe<Array<Scalars['String']>>;
  period: LocalizedDateFilter;
  warehouseId: Array<Scalars['String']>;
};

export type SalesReportResult = {
  data?: Maybe<Array<Maybe<SalesReportDataList>>>;
  error?: Maybe<QueryError>;
  summationData?: Maybe<SalesResportSummary>;
};

export type SalesResportSummary = {
  totalPerQuantityPrice: Scalars['String'];
  totalPrice: Scalars['String'];
  totalPriceWithVat: Scalars['String'];
  totalQuantitySold: Scalars['String'];
  totalVatAmount: Scalars['String'];
};

export type SalesSaleCreditNote = {
  data?: Maybe<SalesCreditNote>;
  error?: Maybe<QueryError>;
};

export type SalesSaleDetailEntry = {
  data?: Maybe<SalesSaleEntry>;
  error?: Maybe<QueryError>;
};

export type SalesSaleEntry = {
  customerID: Scalars['ID'];
  customerName?: Maybe<Scalars['String']>;
  dueDate: Scalars['Localized'];
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  invoiceDate: Scalars['Localized'];
  invoiceNo?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  paymentDetail?: Maybe<PaymentDetail>;
  products: Array<SaleProduct>;
  reference: Scalars['String'];
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
};

export type SalesSaleEntryEntry = {
  customerId: Scalars['String'];
  customerName: Scalars['String'];
  date: Scalars['Localized'];
  id: Scalars['ID'];
  invoiceNo: Scalars['String'];
  itemDetails?: Maybe<Array<Maybe<PurchaseItemDetailsType>>>;
  referenceId: Scalars['String'];
  totalAmount: Scalars['String'];
};

export type SalesSaleEntryFilter = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SalesSaleEntryInput = {
  customerID?: InputMaybe<Scalars['ID']>;
  discount?: InputMaybe<Scalars['String']>;
  dueDate?: InputMaybe<Scalars['Localized']>;
  invoiceDate?: InputMaybe<Scalars['Localized']>;
  invoiceNumber?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<Array<InputMaybe<PurchaseItemDetails>>>;
};

export type SalesSaleEntryListConnection = {
  edges?: Maybe<Array<Maybe<SalesSaleEntryListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SalesSaleEntryListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SalesSaleEntryEntry>;
};

export type SavedReportResponse = {
  name?: Maybe<Scalars['String']>;
  settings?: Maybe<SavedReportSettings>;
};

export type SavedReportSettings = ShareStatementReportSettingsType;

export type SavingAccrueBasicInfo = {
  accountId: Scalars['String'];
  accountName: Scalars['String'];
  accountType: NatureOfDepositProduct;
  address?: Maybe<Address>;
  currentInterestRate: Scalars['Float'];
  memberCode: Scalars['String'];
  memberId: Scalars['String'];
  memberName: Scalars['String'];
  membershipDate: Scalars['Localized'];
  serviceCentreId: Scalars['String'];
  serviceCentreName: Scalars['String'];
};

export type SavingAccruedInterestResult = {
  basicInfo?: Maybe<SavingAccrueBasicInfo>;
  data?: Maybe<Array<Maybe<AccrueInterestInfo>>>;
  error?: Maybe<QueryError>;
};

export type SavingAmountRange = {
  max?: InputMaybe<Scalars['Int']>;
  min?: InputMaybe<Scalars['Int']>;
};

export type SavingBalanceReportSummary = {
  totalIndividualAccount?: Maybe<Scalars['Int']>;
  totalMinorAccount?: Maybe<Scalars['Int']>;
  totalOtherAccount?: Maybe<Scalars['Int']>;
};

export type SavingFilters = {
  amountRange?: InputMaybe<SavingAmountRange>;
  service?: InputMaybe<SavingServiceType>;
  transactionType?: InputMaybe<SavingTransactionType>;
};

export type SavingInvestment = {
  frequency: InstallmentFrequency;
  installmentAmount: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  openDate: Scalars['Localized'];
  rate: Scalars['Float'];
  type: SavingInvestmentType;
};

export type SavingInvestmentInput = {
  frequency?: InputMaybe<InstallmentFrequency>;
  installmentAmount?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  openDate: Scalars['Localized'];
  rate: Scalars['Float'];
  type: SavingInvestmentType;
};

export const SavingInvestmentType = {
  RecurringSaving: 'RECURRING_SAVING',
  VolunntarySaving: 'VOLUNNTARY_SAVING',
} as const;

export type SavingInvestmentType = typeof SavingInvestmentType[keyof typeof SavingInvestmentType];
export type SavingProductBalanceData = {
  accountTotal?: Maybe<Scalars['Any']>;
  balanceTotal?: Maybe<Scalars['Any']>;
  entries?: Maybe<Array<Maybe<SavingProductBalanceEntry>>>;
};

export type SavingProductBalanceEntry = {
  balanceMap?: Maybe<Scalars['Any']>;
  code?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nature?: Maybe<NatureOfDepositProduct>;
  noOfAccountsMap?: Maybe<Scalars['Any']>;
};

export type SavingProductBalanceFilter = {
  branchId: Array<Scalars['String']>;
  filter?: InputMaybe<SavingProductBalanceReportFilter>;
};

export type SavingProductBalanceReportFilter = {
  amount?: InputMaybe<MinMaxFilter>;
  nature?: InputMaybe<Array<InputMaybe<NatureOfDepositProduct>>>;
};

export type SavingProductBalanceResult = {
  data?: Maybe<SavingProductBalanceData>;
  error?: Maybe<QueryError>;
};

export const SavingServiceType = {
  Charges: 'CHARGES',
  CustomerInitiated: 'CUSTOMER_INITIATED',
  Interest: 'INTEREST',
} as const;

export type SavingServiceType = typeof SavingServiceType[keyof typeof SavingServiceType];
export type SavingStatement = {
  balanceAmount?: Maybe<Scalars['String']>;
  chequeOrVoucherNo?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  depositCr?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  withdrawDr?: Maybe<Scalars['String']>;
};

export type SavingStatementMeta = {
  accountNo?: Maybe<Scalars['String']>;
  currentInterestRate?: Maybe<Scalars['Float']>;
  installments?: Maybe<Scalars['Int']>;
  productName?: Maybe<Scalars['String']>;
  savingType?: Maybe<Scalars['String']>;
  tenureUnit?: Maybe<Scalars['String']>;
};

export type SavingStatementReport = {
  meta?: Maybe<SavingStatementMeta>;
  savingStatement?: Maybe<Array<Maybe<SavingStatement>>>;
  totals?: Maybe<SavingTotalReport>;
};

export type SavingStatementReportSettings = {
  accountId: Scalars['ID'];
  filter?: InputMaybe<SavingFilters>;
  memberId: Scalars['ID'];
  period: LocalizedDateFilter;
};

export type SavingTotalReport = {
  totalBalance?: Maybe<Scalars['String']>;
  totalDeposit?: Maybe<Scalars['String']>;
  totalWithdraw?: Maybe<Scalars['String']>;
};

export const SavingTransactionType = {
  All: 'ALL',
  Deposit: 'DEPOSIT',
  Withdraw: 'WITHDRAW',
} as const;

export type SavingTransactionType =
  typeof SavingTransactionType[keyof typeof SavingTransactionType];
export type SavingsBalanceFilter = {
  age?: InputMaybe<Scalars['Int']>;
  amount?: InputMaybe<MinMaxFilter>;
  gender?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  memberIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  memberType?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  minorWise?: InputMaybe<MinorWiseFilter>;
  productTypes?: InputMaybe<Array<InputMaybe<NatureOfDepositProduct>>>;
};

export type SavingsBalanceFilterData = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<SavingsBalanceFilter>;
  period: LocalizedDateFilter;
};

export type SavingsBalanceReport = {
  accountId?: Maybe<Scalars['String']>;
  accountOpeningDate?: Maybe<Scalars['Localized']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  crBalance?: Maybe<Scalars['String']>;
  currentInterest?: Maybe<Scalars['String']>;
  currentInterestRate?: Maybe<Scalars['Float']>;
  currentInterestType?: Maybe<BalanceType>;
  drBalance?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['Localized']>;
  isClosed?: Maybe<Scalars['Boolean']>;
  isInactive?: Maybe<Scalars['Boolean']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  memberType?: Maybe<KymMemberTypesEnum>;
  productCode?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
};

export type SavingsBalanceReportResult = {
  data?: Maybe<Array<Maybe<SavingsBalanceReport>>>;
  error?: Maybe<QueryError>;
  interestType?: Maybe<BalanceType>;
  summary?: Maybe<SavingBalanceReportSummary>;
  totalCrBalance?: Maybe<Scalars['String']>;
  totalDrBalance?: Maybe<Scalars['String']>;
  totalInterest?: Maybe<Scalars['String']>;
};

export type SavingsTenureUpdateInput = {
  accountId: Scalars['ID'];
  updatedTenure: Scalars['Int'];
};

export type SavingsTenureUpdateResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type SearchFilterData = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<ObjState>;
  page?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export type SearchListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SearchResultNode>;
};

export type SearchMutation = {
  indexData?: Maybe<Scalars['String']>;
};

export type SearchMutationIndexDataArgs = {
  tableName: Array<Scalars['String']>;
};

export type SearchQuery = {
  globalPages: SearchQueryResult;
};

export type SearchQueryGlobalPagesArgs = {
  filter?: InputMaybe<SearchFilterData>;
  pagination?: InputMaybe<Pagination>;
};

export type SearchQueryResult = {
  data?: Maybe<SearchQueryResultData>;
  error?: Maybe<QueryError>;
};

export type SearchQueryResultData = {
  edges?: Maybe<Array<Maybe<SearchListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SearchResultNode = GlobalPagesResultNode;

export type SectionDetailsFilter = {
  id: Scalars['ID'];
};

export type SectionDetailsQueryResult = {
  data?: Maybe<FormSection>;
  error?: Maybe<QueryError>;
};

export type SectionWiseError = {
  errors?: Maybe<Scalars['InvalidData']>;
  sectionName?: Maybe<Scalars['String']>;
};

export const SeparationStatusEnum = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const;

export type SeparationStatusEnum = typeof SeparationStatusEnum[keyof typeof SeparationStatusEnum];
export const SeparationTypeEnum = {
  Resigned: 'RESIGNED',
  Retired: 'RETIRED',
  Transferred: 'TRANSFERRED',
} as const;

export type SeparationTypeEnum = typeof SeparationTypeEnum[keyof typeof SeparationTypeEnum];
export type SericeCenterStatementResult = {
  data?: Maybe<Array<Maybe<ServiceCenterBalanceEntry>>>;
  error?: Maybe<QueryError>;
};

export type SericeCenterWiseStatementData = {
  entries?: Maybe<Array<Maybe<ServiceCenterCoaWiseBalanceEntry>>>;
  total?: Maybe<Scalars['Map']>;
};

export type SericeCenterWiseStatementResult = {
  data?: Maybe<SericeCenterWiseStatementData>;
  error?: Maybe<QueryError>;
};

export type ServerError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type ServiceCenter = {
  address?: Maybe<Address>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  contactNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['Localized']>;
  id: Scalars['ID'];
  isExtensionCounter?: Maybe<Scalars['Boolean']>;
  managerContact?: Maybe<Scalars['String']>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  serviceCenterCode?: Maybe<Scalars['String']>;
};

export type ServiceCenterActivityDetails = {
  amount?: Maybe<Scalars['String']>;
  ibtAccount?: Maybe<Scalars['String']>;
  ibtAccountName?: Maybe<Scalars['String']>;
  ibtCr?: Maybe<Scalars['String']>;
  ibtDr?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  journalId?: Maybe<Scalars['String']>;
  receiver?: Maybe<Scalars['String']>;
  receiverId?: Maybe<Scalars['String']>;
  sender?: Maybe<Scalars['String']>;
  senderId?: Maybe<Scalars['String']>;
  status?: Maybe<IbtStatus>;
  transactionDate?: Maybe<Scalars['Localized']>;
};

export type ServiceCenterActivityListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<ServiceCenterActivityDetails>;
};

export type ServiceCenterBalanceEntry = {
  ServiceCenterName?: Maybe<Scalars['String']>;
  depositToLiquidityRatio?: Maybe<Scalars['String']>;
  serviceCenterId?: Maybe<Scalars['String']>;
  todayBankBalance?: Maybe<Scalars['String']>;
  todayCashBalance?: Maybe<Scalars['String']>;
  todaySavingBalance?: Maybe<Scalars['String']>;
  todayTotalBalance?: Maybe<Scalars['String']>;
  totalBankBalance?: Maybe<Scalars['String']>;
  totalCashBalance?: Maybe<Scalars['String']>;
  totalSavingBalance?: Maybe<Scalars['String']>;
  totalTotalBalance?: Maybe<Scalars['String']>;
};

export type ServiceCenterBalanceFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
};

export type ServiceCenterCoaWiseBalanceEntry = {
  ServiceCenterName?: Maybe<Scalars['String']>;
  balanceMap?: Maybe<Scalars['Map']>;
  serviceCenterCode?: Maybe<Scalars['String']>;
  serviceCenterId?: Maybe<Scalars['String']>;
};

export type ServiceCenterCoaWiseBalanceFilter = {
  branchId: Array<Scalars['String']>;
  coaHead: Array<CoaHead>;
  date: Scalars['Localized'];
};

export type ServiceCenterCashTransferDetail = {
  data?: Maybe<ServiceCenterCashTransferView>;
  error?: Maybe<QueryError>;
};

export type ServiceCenterCashTransferView = {
  amount?: Maybe<Scalars['String']>;
  destinationBranchInfo?: Maybe<Array<Maybe<CashTransferBranchView>>>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id?: Maybe<Scalars['ID']>;
  note?: Maybe<Scalars['String']>;
  reveiverServiceCenter?: Maybe<Scalars['String']>;
  senderServiceCenter?: Maybe<Scalars['String']>;
  srcLedgerInfo?: Maybe<Array<Maybe<CashTransferLedgerView>>>;
  status?: Maybe<IbtStatus>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalSenderCr?: Maybe<Scalars['String']>;
  totalSenderDr?: Maybe<Scalars['String']>;
  totalServiceCenterCr?: Maybe<Scalars['String']>;
  totalServiceCenterDr?: Maybe<Scalars['String']>;
  transactionID?: Maybe<Scalars['String']>;
  transferDate?: Maybe<Scalars['Localized']>;
  userName?: Maybe<Scalars['String']>;
  userProfileUrl?: Maybe<Scalars['String']>;
};

export type ServiceCenterTransactionFilter = {
  transactionId?: InputMaybe<Scalars['String']>;
};

export type ServiceCentreCashTransferActivity = {
  edges?: Maybe<Array<Maybe<ServiceCenterActivityListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ServiceCentreCashTransferInput = {
  branchEntries?: InputMaybe<Array<InputMaybe<CashTransferServiceCentreEntry>>>;
  note?: InputMaybe<Scalars['String']>;
  selfEntries?: InputMaybe<Array<InputMaybe<CashTransferSelfEntry>>>;
};

export type ServiceCentreCashTransferResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type ServiceCharge = {
  amount?: Maybe<Scalars['Amount']>;
  name: Scalars['String'];
};

export type ServiceChargeInput = {
  amount: Scalars['Amount'];
  name: Scalars['String'];
};

export type ServiceType = {
  amount?: InputMaybe<Scalars['Amount']>;
  ledgerName?: InputMaybe<Scalars['String']>;
  percentage?: InputMaybe<Scalars['Float']>;
  serviceName?: InputMaybe<Scalars['String']>;
};

export type ServiceTypeFormState = {
  amount?: Maybe<Scalars['Amount']>;
  ledgerName?: Maybe<Scalars['String']>;
  percentage?: Maybe<Scalars['Float']>;
  serviceName?: Maybe<Scalars['String']>;
};

export type SettingAddTagToLedgerResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['String']>;
};

export type SettingLedgerTagListConnection = {
  edges?: Maybe<Array<Maybe<SettingLedgerTagListEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SettingLedgerTagListEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LedgerTag>;
};

export type SettingLedgerTagMutation = {
  addTagToLedger?: Maybe<SettingAddTagToLedgerResult>;
  removeTagFromLedger?: Maybe<MutationError>;
  upsert?: Maybe<SettingLedgerTagResult>;
};

export type SettingLedgerTagMutationAddTagToLedgerArgs = {
  ledgerId: Scalars['ID'];
  tagId: Array<Scalars['ID']>;
};

export type SettingLedgerTagMutationRemoveTagFromLedgerArgs = {
  ledgerId: Scalars['ID'];
  tagId: Scalars['ID'];
};

export type SettingLedgerTagMutationUpsertArgs = {
  data: LedgerTagInput;
  id?: InputMaybe<Scalars['ID']>;
};

export type SettingLedgerTagQuery = {
  list?: Maybe<SettingLedgerTagListConnection>;
  listLedgerTags?: Maybe<LedgerTagsResult>;
  listTagLedgers?: Maybe<SettingTagLedgersListConnection>;
};

export type SettingLedgerTagQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type SettingLedgerTagQueryListLedgerTagsArgs = {
  ledgerId: Scalars['ID'];
};

export type SettingLedgerTagQueryListTagLedgersArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type SettingLedgerTagResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['String']>;
};

export type SettingTagLedgersListConnection = {
  edges?: Maybe<Array<Maybe<SettingTagLedgersListEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SettingTagLedgersListEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<TagLedger>;
};

export type SettingsMutation = {
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  declaration: DeclarationMutation;
  form?: Maybe<FormSettingMutation>;
  general?: Maybe<GeneralSettingsMutation>;
  myraUser?: Maybe<MyraUserMutation>;
  report?: Maybe<ReportSettingMutation>;
};

export type SettingsQuery = {
  allRoles?: Maybe<Array<Maybe<RoleInfo>>>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  declaration: DeclarationQuery;
  form?: Maybe<FormSettingQuery>;
  general?: Maybe<GeneralSettingsQuery>;
  getPrintCount: Scalars['Int'];
  myraUser?: Maybe<MyraUserQuery>;
};

export type SettingsQueryGetPrintCountArgs = {
  objectId: Scalars['ID'];
  type: PrintType;
};

export type SetupMutation = {
  eodAction?: Maybe<Scalars['Boolean']>;
  eodException?: Maybe<Scalars['Boolean']>;
  eodSeed?: Maybe<Scalars['String']>;
  migration?: Maybe<DataMigration>;
};

export type SetupMutationEodActionArgs = {
  value: EodActionInput;
};

export type SetupMutationEodExceptionArgs = {
  value: EodExceptionInput;
};

export type SetupMutationEodSeedArgs = {
  date: Scalars['Localized'];
};

export type SetupQuery = {
  eodAction?: Maybe<EodAction>;
  eodException?: Maybe<EodException>;
  eodSeed?: Maybe<Scalars['Localized']>;
};

export type ShareBalance = {
  amount: Scalars['Int'];
  count: Scalars['Int'];
  id?: Maybe<Scalars['ID']>;
  member: Member;
  memberId?: Maybe<Scalars['ID']>;
  shareCertificateNo?: Maybe<Scalars['String']>;
  totalIssued?: Maybe<Scalars['Int']>;
  totalReturned?: Maybe<Scalars['Int']>;
};

export type ShareBalanceConnection = {
  edges: Array<ShareBalanceEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ShareBalanceEdge = {
  cursor: Scalars['String'];
  node: ShareBalance;
};

export type ShareBalanceFilterData = {
  age?: InputMaybe<Scalars['Int']>;
  balanceRange?: InputMaybe<MinMaxFilter>;
  gender?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ShareBalanceReportData = {
  address?: Maybe<Address>;
  balance?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  contactNo?: Maybe<Scalars['String']>;
  isInactive?: Maybe<Scalars['Boolean']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  membershipDate?: Maybe<Scalars['Localized']>;
  noOfKitta?: Maybe<Scalars['Int']>;
  shareCertificateNo?: Maybe<Scalars['String']>;
  shareType?: Maybe<Scalars['String']>;
};

export type ShareBalanceReportFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<ShareBalanceFilterData>;
  period: LocalizedDateFilter;
};

export type ShareBalanceReportResult = {
  data?: Maybe<Array<Maybe<ShareBalanceReportData>>>;
  error?: Maybe<QueryError>;
  totalBalance?: Maybe<Scalars['String']>;
};

export type ShareBonusSettingsBonusResult = {
  accountMapping?: Maybe<Scalars['ID']>;
  taxPayer?: Maybe<TaxPayerOptions>;
  taxRate?: Maybe<Scalars['Float']>;
};

export type ShareBonusSettingsInput = {
  accountMapping?: InputMaybe<Scalars['ID']>;
  taxPayer?: InputMaybe<TaxPayerOptions>;
  taxRate?: InputMaybe<Scalars['Float']>;
};

export type ShareCharge = {
  charge?: Maybe<Scalars['String']>;
  ledgerMapping?: Maybe<Scalars['ID']>;
  maxShare?: Maybe<Scalars['Int']>;
  minShare?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<ShareChargeType>;
};

export type ShareChargeInput = {
  charge?: InputMaybe<Scalars['String']>;
  ledgerMapping?: InputMaybe<Scalars['ID']>;
  maxShare?: InputMaybe<Scalars['Int']>;
  minShare?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ShareChargeType>;
};

export const ShareChargeType = {
  FixedAmount: 'FIXED_AMOUNT',
  Percentage: 'PERCENTAGE',
} as const;

export type ShareChargeType = typeof ShareChargeType[keyof typeof ShareChargeType];
export type ShareCharges = {
  charge?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type ShareDetailData = {
  amount?: Maybe<Scalars['String']>;
  charges?: Maybe<Array<Maybe<ShareExtraChargeDetails>>>;
  date?: Maybe<Scalars['Localized']>;
  fromTo?: Maybe<ShareNumber>;
  glTransactions?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  noOfShare?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  paymentDetail?: Maybe<SharePaymentDetail>;
  paymentFile?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  teller?: Maybe<Scalars['String']>;
  total?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalShareAmount?: Maybe<Scalars['String']>;
  totalShareCount?: Maybe<Scalars['Int']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type ShareDetailResult = {
  data?: Maybe<ShareDetailData>;
  error?: Maybe<QueryError>;
};

export type ShareDividendSettingsInput = {
  accountForFractionalDividends?: InputMaybe<Scalars['ID']>;
  accountForShareDividends?: InputMaybe<Scalars['ID']>;
  distributionCondition?: InputMaybe<DividendDistributionCondition>;
  dividendRate?: InputMaybe<DividendRateInput>;
  dividendTransferTreatment?: InputMaybe<DividendTransferTreatment>;
  organizationFundForDividends?: InputMaybe<Scalars['ID']>;
};

export type ShareDividendSettingsResult = {
  accountForFractionalDividends?: Maybe<Scalars['ID']>;
  accountForShareDividends?: Maybe<Scalars['ID']>;
  distributionCondition?: Maybe<DividendDistributionCondition>;
  dividendRate?: Maybe<DividendRate>;
  dividendTransferTreatment?: Maybe<DividendTransferTreatment>;
  organizationFundForDividends?: Maybe<Scalars['ID']>;
};

export type ShareExtraChargeDetails = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type ShareExtraCharges = {
  name: Scalars['String'];
  value: Scalars['Float'];
};

export type ShareExtraChargesInput = {
  Id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type ShareFilterMapping = {
  from?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['String']>;
  status?: Maybe<Array<LabelValueArray>>;
  to?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<DateFilterOutput>;
  transactionDirection?: Maybe<Array<LabelValueArray>>;
};

export type ShareHistory = {
  balance?: Maybe<ShareBalance>;
  history?: Maybe<Array<Maybe<ShareRegister>>>;
};

export type ShareInfoView = {
  issuedCount?: Maybe<Scalars['String']>;
  returnedCount?: Maybe<Scalars['String']>;
  shareCertificateNo?: Maybe<Scalars['String']>;
  totalBalance?: Maybe<Scalars['String']>;
  totalCount?: Maybe<Scalars['String']>;
};

export type ShareInformation = {
  amount?: Maybe<Scalars['String']>;
  kitta?: Maybe<Scalars['String']>;
  perShareAmount?: Maybe<Scalars['String']>;
};

export type ShareInvestment = {
  certificateNo: Scalars['String'];
  count: Scalars['Int'];
  date: Scalars['Localized'];
  notes?: Maybe<Scalars['String']>;
  purchaseAmount: Scalars['String'];
  rate: Scalars['String'];
};

export type ShareInvestmentInput = {
  certificateNo: Scalars['String'];
  count: Scalars['Int'];
  date: Scalars['Localized'];
  notes?: InputMaybe<Scalars['String']>;
  purchaseAmount: Scalars['String'];
  rate: Scalars['String'];
};

export type ShareInvestmentTransactionInput = {
  count: Scalars['Int'];
  date: Scalars['Localized'];
  rate: Scalars['String'];
  totalAmount?: InputMaybe<Scalars['String']>;
  type: ShareInvestmentType;
};

export const ShareInvestmentType = {
  ShareBonusDividend: 'SHARE_BONUS_DIVIDEND',
  SharePurchase: 'SHARE_PURCHASE',
  ShareReturn: 'SHARE_RETURN',
} as const;

export type ShareInvestmentType = typeof ShareInvestmentType[keyof typeof ShareInvestmentType];
export type ShareIssueChargesInput = {
  other?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
  shareCertificate?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
};

export type ShareIssueChargesResult = {
  other?: Maybe<Array<Maybe<ShareCharge>>>;
  shareCertificate?: Maybe<Array<Maybe<ShareCharge>>>;
};

export type ShareMutation = {
  purchase: SharePurchaseResult;
  return: ShareReturnResult;
};

export type ShareMutationPurchaseArgs = {
  data: SharePurchaseInput;
};

export type ShareMutationReturnArgs = {
  data: ShareReturnInput;
};

export type ShareNumber = {
  end?: Maybe<Scalars['Int']>;
  start?: Maybe<Scalars['Int']>;
};

export type SharePaymentDetail = {
  amount?: Maybe<Scalars['String']>;
  depositedDate?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<SharePaymentMode>;
  sourceOfFund?: Maybe<Scalars['String']>;
};

export const SharePaymentMode = {
  Account: 'ACCOUNT',
  BankVoucherOrCheque: 'BANK_VOUCHER_OR_CHEQUE',
  Cash: 'CASH',
} as const;

export type SharePaymentMode = typeof SharePaymentMode[keyof typeof SharePaymentMode];
export type SharePurchaseError = InvalidDataError;

export type SharePurchaseInput = {
  account?: InputMaybe<ShareTransactionAccountPayment>;
  bankVoucher?: InputMaybe<ShareTransactionVoucherPayment>;
  cash?: InputMaybe<ShareTransactionCash>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId: Scalars['String'];
  paymentMode?: InputMaybe<SharePaymentMode>;
  shareCount: Scalars['Int'];
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type SharePurchaseRegisterFilter = {
  type?: InputMaybe<ShareTransactionType>;
};

export type SharePurchaseRegisterReport = {
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  kittaNumFrom?: Maybe<Scalars['String']>;
  kittaNumTo?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  perShareAmount?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  totalKitta?: Maybe<Scalars['String']>;
};

export type SharePurchaseRegisterReportFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<SharePurchaseRegisterFilter>;
  period: LocalizedDateFilter;
};

export type SharePurchaseRegisterResult = {
  Summary?: Maybe<Scalars['Map']>;
  data?: Maybe<Array<Maybe<SharePurchaseRegisterReport>>>;
  error?: Maybe<QueryError>;
  meta?: Maybe<Scalars['Map']>;
};

export type SharePurchaseResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type ShareQuery = {
  balance?: Maybe<ShareBalanceConnection>;
  charges?: Maybe<Array<Maybe<ShareCharges>>>;
  filterMapping?: Maybe<ShareFilterMapping>;
  history?: Maybe<ShareHistory>;
  register?: Maybe<ShareRegisterConnection>;
  shareDetail?: Maybe<ShareDetailResult>;
};

export type ShareQueryBalanceArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ShareQueryChargesArgs = {
  shareCount: Scalars['Int'];
  transactionType: Share_Transaction_Direction;
};

export type ShareQueryHistoryArgs = {
  memberId: Scalars['ID'];
};

export type ShareQueryRegisterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ShareQueryShareDetailArgs = {
  transactionID: Scalars['ID'];
};

export type ShareRegister = {
  accountId?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['Int']>;
  bankId?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Localized']>;
  credit?: Maybe<Scalars['Int']>;
  debit?: Maybe<Scalars['Int']>;
  endNumber: Scalars['Int'];
  extraFee?: Maybe<Array<Maybe<ShareExtraCharges>>>;
  id?: Maybe<Scalars['ID']>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['String']>;
  noOfShare?: Maybe<Scalars['String']>;
  otherCharge?: Maybe<Scalars['String']>;
  paymentMode?: Maybe<SharePaymentMode>;
  shareAmount?: Maybe<Scalars['String']>;
  shareCertificateCharge?: Maybe<Scalars['String']>;
  startNumber: Scalars['Int'];
  status?: Maybe<Share_Status>;
  totalAmount?: Maybe<Scalars['Float']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  transactionDirection: Share_Transaction_Direction;
  transactionId?: Maybe<Scalars['String']>;
  voucherNumber?: Maybe<Scalars['String']>;
};

export type ShareRegisterConnection = {
  edges: Array<ShareRegisterEdge>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ShareRegisterDetails = {
  date?: Maybe<Scalars['Localized']>;
  noOfShares?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  txnAmount?: Maybe<Scalars['String']>;
  txnType?: Maybe<ShareTransactionType>;
};

export type ShareRegisterEdge = {
  cursor: Scalars['String'];
  node: ShareRegister;
};

export type ShareReport = {
  shareBalanceReport?: Maybe<ShareBalanceReportResult>;
  sharePurchaseRegisterReport?: Maybe<SharePurchaseRegisterResult>;
  shareStatementReport?: Maybe<ReportResult>;
  shareTransactionReport?: Maybe<ShareTransactionReportResult>;
};

export type ShareReportShareBalanceReportArgs = {
  data?: InputMaybe<ShareBalanceReportFilter>;
};

export type ShareReportSharePurchaseRegisterReportArgs = {
  data?: InputMaybe<SharePurchaseRegisterReportFilter>;
};

export type ShareReportShareStatementReportArgs = {
  data: ShareStatementReportSettings;
};

export type ShareReportShareTransactionReportArgs = {
  data?: InputMaybe<ShareTransactionReportFilter>;
};

export type ShareReturnChargesInput = {
  other?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
};

export type ShareReturnChargesResult = {
  other?: Maybe<Array<Maybe<ShareCharge>>>;
};

export type ShareReturnError = InvalidDataError;

export type ShareReturnInput = {
  account?: InputMaybe<ShareTransactionAccountPayment>;
  bankCheque?: InputMaybe<ShareTransactionChequePayment>;
  cash?: InputMaybe<ShareTransactionCash>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId: Scalars['String'];
  noOfReturnedShares: Scalars['Int'];
  paymentMode?: InputMaybe<SharePaymentMode>;
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type ShareReturnResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type ShareSettingsAddMutation = {
  bonus?: Maybe<ShareSettingsQuery>;
  dividend?: Maybe<ShareSettingsQuery>;
  general?: Maybe<ShareSettingsQuery>;
  shareIssueCharges?: Maybe<ShareSettingsQuery>;
  shareReturnCharges?: Maybe<ShareSettingsQuery>;
  transfer?: Maybe<ShareSettingsQuery>;
};

export type ShareSettingsAddMutationBonusArgs = {
  data?: InputMaybe<ShareBonusSettingsInput>;
};

export type ShareSettingsAddMutationDividendArgs = {
  data?: InputMaybe<ShareDividendSettingsInput>;
};

export type ShareSettingsAddMutationGeneralArgs = {
  data?: InputMaybe<ShareSettingsGeneralInput>;
};

export type ShareSettingsAddMutationShareIssueChargesArgs = {
  data?: InputMaybe<ShareIssueChargesInput>;
};

export type ShareSettingsAddMutationShareReturnChargesArgs = {
  data?: InputMaybe<ShareReturnChargesInput>;
};

export type ShareSettingsAddMutationTransferArgs = {
  data?: InputMaybe<ShareTransferSettingsInput>;
};

export type ShareSettingsGeneralInput = {
  endNumber?: InputMaybe<Scalars['Int']>;
  incrementor?: InputMaybe<Scalars['Int']>;
  maximumQuantityOfShare?: InputMaybe<Scalars['Int']>;
  minimumQuantityOfShare?: InputMaybe<Scalars['Int']>;
  multiplicityFactor?: InputMaybe<Scalars['Int']>;
  noOfAuthorisedPaidUpShare?: InputMaybe<Scalars['Int']>;
  noOfDigits?: InputMaybe<Scalars['Int']>;
  noOfIssuedShare?: InputMaybe<Scalars['Int']>;
  paidUpShareRate?: InputMaybe<Scalars['Int']>;
  shareIssueAuthority?: InputMaybe<Array<InputMaybe<BranchCategory>>>;
  startNumber?: InputMaybe<Scalars['Int']>;
  typeOfShare?: InputMaybe<TypeOfShare>;
  typeOfShareKitta?: InputMaybe<TypeOfShare>;
};

export type ShareSettingsGeneralResult = {
  endNumber?: Maybe<Scalars['Int']>;
  incrementor?: Maybe<Scalars['Int']>;
  maximumQuantityOfShare?: Maybe<Scalars['Int']>;
  minimumQuantityOfShare?: Maybe<Scalars['Int']>;
  multiplicityFactor?: Maybe<Scalars['Int']>;
  noOfAuthorisedPaidUpShare?: Maybe<Scalars['Int']>;
  noOfDigits?: Maybe<Scalars['Int']>;
  noOfIssuedShare?: Maybe<Scalars['Int']>;
  paidUpShareRate?: Maybe<Scalars['Int']>;
  shareIssueAuthority?: Maybe<Array<Maybe<BranchCategory>>>;
  startNumber?: Maybe<Scalars['Int']>;
  typeOfShare?: Maybe<TypeOfShare>;
  typeOfShareKitta?: Maybe<TypeOfShare>;
};

export type ShareSettingsMutation = {
  add?: Maybe<ShareSettingsAddMutation>;
};

export type ShareSettingsQuery = {
  bonus?: Maybe<ShareBonusSettingsBonusResult>;
  dividend?: Maybe<ShareDividendSettingsResult>;
  general?: Maybe<ShareSettingsGeneralResult>;
  shareIssueCharges?: Maybe<ShareIssueChargesResult>;
  shareReturnCharges?: Maybe<ShareReturnChargesResult>;
  transfer?: Maybe<ShareTransferSettingsResult>;
};

export type ShareStatement = {
  balanceSheet: Scalars['Int'];
  date: Scalars['Localized'];
  noOfShares: Scalars['Int'];
  particular: Scalars['String'];
  purchaseAmountCr: Scalars['Int'];
  returnAmountDr: Scalars['Int'];
};

export type ShareStatementReport = {
  openingBalance?: Maybe<Scalars['Int']>;
  shareStatement?: Maybe<Array<Maybe<ShareStatement>>>;
  totals?: Maybe<TotalReport>;
};

export type ShareStatementReportSettings = {
  filter?: InputMaybe<ShareTransactionType>;
  memberId: Scalars['ID'];
  period: LocalizedDateFilter;
};

export type ShareStatementReportSettingsType = {
  filter?: Maybe<ShareTransactionType>;
  memberId: Scalars['ID'];
  period: PeriodType;
};

export type ShareTransactionAccountPayment = {
  accountId: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type ShareTransactionCash = {
  cashPaid: Scalars['String'];
  denominations?: InputMaybe<Array<Denomination>>;
  disableDenomination: Scalars['Boolean'];
  fileUpload?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  returned_amount: Scalars['String'];
  sourceOfFund?: InputMaybe<Scalars['String']>;
  total: Scalars['String'];
};

export type ShareTransactionChequePayment = {
  bankId: Scalars['ID'];
  chequeNo: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type ShareTransactionFilter = {
  ageRange?: InputMaybe<MemberAgeRange>;
  districtId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  education?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  gender?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  localGovernmentId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  provinceId?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export type ShareTransactionFooter = {
  totalBalance?: Maybe<Scalars['String']>;
  totalCr?: Maybe<Scalars['String']>;
  totalDr?: Maybe<Scalars['String']>;
};

export type ShareTransactionReport = {
  balance?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  particular?: Maybe<Scalars['String']>;
  shareIssueCr?: Maybe<Scalars['String']>;
  shareReturnDr?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
};

export type ShareTransactionReportFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<ShareTransactionFilter>;
  period: LocalizedDateFilter;
};

export type ShareTransactionReportResult = {
  avgSharePerMember?: Maybe<Scalars['String']>;
  data?: Maybe<Array<Maybe<ShareTransactionReport>>>;
  error?: Maybe<QueryError>;
  footer?: Maybe<ShareTransactionFooter>;
  openingValue?: Maybe<Scalars['String']>;
  totalShareIssued?: Maybe<Scalars['String']>;
};

export const ShareTransactionType = {
  All: 'ALL',
  Issue: 'ISSUE',
  Return: 'RETURN',
} as const;

export type ShareTransactionType = typeof ShareTransactionType[keyof typeof ShareTransactionType];
export type ShareTransactionVoucherPayment = {
  bankId: Scalars['ID'];
  citizenshipDocument?: InputMaybe<Scalars['String']>;
  depositedBy: ShareVoucherDepositedBy;
  depositedByOtherName?: InputMaybe<Scalars['String']>;
  depositedDate: Scalars['Localized'];
  fileUpload?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  voucherId?: InputMaybe<Scalars['String']>;
};

export type ShareTransferSettingsInput = {
  accountForShareFund?: InputMaybe<Scalars['ID']>;
  mappedShareLedger?: InputMaybe<Scalars['ID']>;
  type?: InputMaybe<ShareTransferType>;
};

export type ShareTransferSettingsResult = {
  accountForShareFund?: Maybe<Scalars['ID']>;
  mappedShareLedger?: Maybe<Scalars['ID']>;
  type?: Maybe<ShareTransferType>;
};

export const ShareTransferType = {
  MemberToMember: 'MEMBER_TO_MEMBER',
  ShareRefund: 'SHARE_REFUND',
} as const;

export type ShareTransferType = typeof ShareTransferType[keyof typeof ShareTransferType];
export const ShareVoucherDepositedBy = {
  Other: 'OTHER',
  Self: 'SELF',
} as const;

export type ShareVoucherDepositedBy =
  typeof ShareVoucherDepositedBy[keyof typeof ShareVoucherDepositedBy];
export type SisterConcernDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type SlipElementMeasurement = {
  left?: Maybe<Scalars['Float']>;
  top?: Maybe<Scalars['Float']>;
};

export type SlipElementMeasurementInput = {
  left?: InputMaybe<Scalars['Float']>;
  top?: InputMaybe<Scalars['Float']>;
};

export type SlipEntry = {
  date?: Maybe<Scalars['Localized']>;
  slipNumber: Scalars['String'];
  state: SlipState;
};

export type SlipRange = {
  from: Scalars['String'];
  to: Scalars['String'];
};

export type SlipRangeInput = {
  from: Scalars['Int'];
  to: Scalars['Int'];
};

export const SlipSizeStandard = {
  Custom: 'CUSTOM',
  Width_7Point5Height_3Point5: 'WIDTH_7POINT5_HEIGHT_3POINT5',
  Width_7Height_3Point5: 'WIDTH_7_HEIGHT_3POINT5',
  Width_9Height_3: 'WIDTH_9_HEIGHT_3',
} as const;

export type SlipSizeStandard = typeof SlipSizeStandard[keyof typeof SlipSizeStandard];
export const SlipState = {
  Cancelled: 'CANCELLED',
  Issued: 'ISSUED',
  Used: 'USED',
} as const;

export type SlipState = typeof SlipState[keyof typeof SlipState];
export const SourceOfHire = {
  Direct: 'DIRECT',
  Referel: 'REFEREL',
  Vacancy: 'VACANCY',
} as const;

export type SourceOfHire = typeof SourceOfHire[keyof typeof SourceOfHire];
export type StaffPlanInput = {
  branchId?: InputMaybe<Scalars['String']>;
  date: LocalizedDateFilter;
  note?: InputMaybe<Scalars['String']>;
  staffPlans?: InputMaybe<Array<StaffPlanTypesInput>>;
  title: Scalars['String'];
};

export type StaffPlanRecord = {
  branchId?: Maybe<Scalars['String']>;
  date: LocalizedDate;
  id: Scalars['ID'];
  note?: Maybe<Scalars['String']>;
  staffPlans?: Maybe<Array<StaffPlanTypes>>;
  title: Scalars['String'];
  total_cost_estimation: Scalars['String'];
  total_vacancies: Scalars['Int'];
};

export type StaffPlanTypes = {
  designation: Scalars['String'];
  estimated_cost: Scalars['String'];
  estimated_cost_per_employee: Scalars['String'];
  vacancies: Scalars['Int'];
};

export type StaffPlanTypesInput = {
  designation: Scalars['String'];
  estimated_cost: Scalars['String'];
  estimated_cost_per_employee: Scalars['String'];
  vacancies: Scalars['Int'];
};

export type StaffPlanning = {
  date: LocalizedDate;
  id: Scalars['ID'];
  open_position: Scalars['Int'];
  staffPlanTitle: Scalars['String'];
  vacancies: Scalars['Int'];
};

export type StaffPlanningConnection = {
  edges?: Maybe<Array<Maybe<StaffPlanningEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type StaffPlanningEdge = {
  cursor: Scalars['Cursor'];
  node: StaffPlanning;
};

export type StatementReport =
  | ActiveInactiveMemberReport
  | LoanStatementReport
  | SavingStatementReport
  | ShareStatementReport;

export type StatementReportInput = {
  data?: InputMaybe<ShareStatementReportSettings>;
  id: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
  reportType?: InputMaybe<Scalars['String']>;
};

export type StrTransactionActionInput = {
  declineReason?: InputMaybe<Scalars['String']>;
  isAccepted: Scalars['Boolean'];
  transactionId: Scalars['ID'];
};

export type SubscriptionMutation = {
  ReferenceKYM: DocumentMutationResult;
  Upsert: DocumentMutationResult;
};

export type SubscriptionMutationReferenceKymArgs = {
  deference?: InputMaybe<Scalars['Boolean']>;
  fieldId: Scalars['String'];
  memberId: Scalars['String'];
};

export type SubscriptionMutationUpsertArgs = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
};

export type SuspiciousTransactionReport = {
  amount?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  id?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  product_name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Boolean']>;
  tranxType?: Maybe<NatureOfTransaction>;
};

export type SuspiciousTransactionReportInput = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<SuspiciousTransactionReportInputFilter>;
  period: LocalizedDateFilter;
};

export type SuspiciousTransactionReportInputFilter = {
  amount?: InputMaybe<MinMaxFilter>;
  memberId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  nature?: InputMaybe<Array<InputMaybe<NatureOfTransaction>>>;
};

export type SuspiciousTransactionReportResult = {
  data?: Maybe<Array<Maybe<SuspiciousTransactionReport>>>;
  error?: Maybe<QueryError>;
};

export const SuspiciousTransactionTopology = {
  ChequeFraud: 'CHEQUE_FRAUD',
  CorruptionGratuity: 'CORRUPTION_GRATUITY',
  CounterfeitInstrument: 'COUNTERFEIT_INSTRUMENT',
  DebitCreditOrOtherCardFraud: 'DEBIT_CREDIT_OR_OTHER_CARD_FRAUD',
  FalseStatement: 'FALSE_STATEMENT',
  IdentityTheft: 'IDENTITY_THEFT',
  LoanFraud: 'LOAN_FRAUD',
  MisuseOfPositionOrSelf: 'MISUSE_OF_POSITION_OR_SELF',
  MysteriousDisapperanceBehaviour: 'MYSTERIOUS_DISAPPERANCE_BEHAVIOUR',
  TaxEvasion: 'TAX_EVASION',
  TerroristFinancing: 'TERRORIST_FINANCING',
} as const;

export type SuspiciousTransactionTopology =
  typeof SuspiciousTransactionTopology[keyof typeof SuspiciousTransactionTopology];
export type SwitchGuaranteeInput = {
  accountID: Scalars['ID'];
  guaranteeAmount: Scalars['String'];
  memberID: Scalars['ID'];
};

export type SwitchRoleData = {
  me?: Maybe<UserData>;
  token?: Maybe<AuthToken>;
};

export type SwitchRoleResult = {
  data?: Maybe<SwitchRoleData>;
  error?: Maybe<MutationError>;
};

export const TdsStatus = {
  NoTds: 'NO_TDS',
  Tds: 'TDS',
} as const;

export type TdsStatus = typeof TdsStatus[keyof typeof TdsStatus];
export const Transaction_Direction = {
  Purchased: 'PURCHASED',
  Sold: 'SOLD',
} as const;

export type Transaction_Direction =
  typeof Transaction_Direction[keyof typeof Transaction_Direction];
export type TtrDataEntry = {
  accountNo?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  amount?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  nature?: Maybe<NatureOfTransaction>;
  remarks?: Maybe<Scalars['String']>;
  sourceOfFund?: Maybe<Scalars['String']>;
};

export type TtrFilter = {
  amount?: InputMaybe<MinMaxFilter>;
  fiscalYear?: InputMaybe<LocalizedDateFilter>;
  member?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  natureOfTransactions?: InputMaybe<Array<InputMaybe<NatureOfTransaction>>>;
};

export type TtrReportData = {
  perTranx?: Maybe<Array<Maybe<TtrDataEntry>>>;
  yearly?: Maybe<Array<Maybe<TtrDataEntry>>>;
};

export type TtrReportFilter = {
  branchId?: InputMaybe<Array<Scalars['String']>>;
  filter?: InputMaybe<TtrFilter>;
  period: LocalizedDateFilter;
};

export type TtrReportResult = {
  data?: Maybe<TtrReportData>;
  error?: Maybe<QueryError>;
};

export type TagConciseEntry = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type TagKhataReportFilter = {
  branchId: Array<InputMaybe<Scalars['String']>>;
  filter?: InputMaybe<TrialSheetFilter>;
  period: LocalizedDateFilter;
  tagId: Array<Scalars['String']>;
};

export type TagKhataReportLedger = {
  closingBalance?: Maybe<Scalars['Any']>;
  crAmount?: Maybe<Scalars['String']>;
  drAmount?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  ledgerName?: Maybe<Scalars['String']>;
  netBalance?: Maybe<Scalars['Any']>;
  openingBalance?: Maybe<Scalars['Any']>;
};

export type TagKhataReportResult = {
  data?: Maybe<Array<Maybe<TagKhataReportTag>>>;
  error?: Maybe<QueryError>;
};

export type TagKhataReportTag = {
  closingBalance?: Maybe<Scalars['Any']>;
  crAmount?: Maybe<Scalars['String']>;
  drAmount?: Maybe<Scalars['String']>;
  ledgers?: Maybe<Array<Maybe<TagKhataReportLedger>>>;
  netBalance?: Maybe<Scalars['Any']>;
  openingBalance?: Maybe<Scalars['Any']>;
  tagId?: Maybe<Scalars['String']>;
  tagName?: Maybe<Scalars['String']>;
};

export type TagLedger = {
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  ledgerId: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  tagId?: Maybe<Scalars['String']>;
  tagName?: Maybe<Scalars['String']>;
};

export const TaxPayerOptions = {
  Cooperative: 'COOPERATIVE',
  Member: 'MEMBER',
} as const;

export type TaxPayerOptions = typeof TaxPayerOptions[keyof typeof TaxPayerOptions];
export type TellerActivityEntry = {
  ID: Scalars['ID'];
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  denomination?: Maybe<Array<Maybe<DenominationValue>>>;
  destBranch?: Maybe<Scalars['Localized']>;
  destProfilePic?: Maybe<Scalars['String']>;
  destProfilePicUrl?: Maybe<Scalars['String']>;
  destTeller?: Maybe<Scalars['Localized']>;
  srcBranch?: Maybe<Scalars['Localized']>;
  srcProfilePic?: Maybe<Scalars['String']>;
  srcProfilePicUrl?: Maybe<Scalars['String']>;
  srcTeller?: Maybe<Scalars['Localized']>;
  transactionBranchId?: Maybe<Scalars['String']>;
  transactionBranchName?: Maybe<Scalars['String']>;
  transferCode?: Maybe<Scalars['String']>;
  transferState: TellerActivityState;
  transferType: TellerTransferType;
};

export type TellerActivityListConnection = {
  edges?: Maybe<Array<Maybe<TellerActivityListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type TellerActivityListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<TellerActivityEntry>;
};

export const TellerActivityState = {
  Approved: 'APPROVED',
  Cancelled: 'CANCELLED',
  Pending: 'PENDING',
} as const;

export type TellerActivityState = typeof TellerActivityState[keyof typeof TellerActivityState];
export type TellerBankTransfer = {
  amount?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  tellerName?: Maybe<Scalars['String']>;
  transactionBranchId?: Maybe<Scalars['String']>;
  transactionBranchName?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  transactionId?: Maybe<Scalars['String']>;
  transferType?: Maybe<TellerBankTransferType>;
};

export type TellerBankTransferActivity = {
  edges?: Maybe<Array<Maybe<TellerBankTransferActivityListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type TellerBankTransferActivityListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<TellerBankTransfer>;
};

export type TellerBankTransferFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  tellerName?: InputMaybe<Scalars['String']>;
  transactionId?: InputMaybe<Scalars['String']>;
  transferType?: InputMaybe<Scalars['String']>;
};

export type TellerBankTransferInput = {
  amount?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  tellerId?: InputMaybe<Scalars['ID']>;
  transferType?: InputMaybe<TellerBankTransferType>;
};

export type TellerBankTransferMutation = {
  new?: Maybe<TellerBankTransferResult>;
};

export type TellerBankTransferMutationNewArgs = {
  data?: InputMaybe<TellerBankTransferInput>;
};

export type TellerBankTransferQuery = {
  list?: Maybe<TellerBankTransferActivity>;
  viewDetail?: Maybe<TellerBankTransferViewResult>;
};

export type TellerBankTransferQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TellerBankTransferQueryViewDetailArgs = {
  transactionId: Scalars['ID'];
};

export type TellerBankTransferResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<TellerBankTransfer>;
  recordId?: Maybe<Scalars['ID']>;
};

export const TellerBankTransferType = {
  Deposit: 'DEPOSIT',
  Withdraw: 'WITHDRAW',
} as const;

export type TellerBankTransferType =
  typeof TellerBankTransferType[keyof typeof TellerBankTransferType];
export type TellerBankTransferView = {
  amount?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bankTransferType?: Maybe<TellerBankTransferType>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id?: Maybe<Scalars['ID']>;
  note?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  tellerName?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  transactionId?: Maybe<Scalars['String']>;
  transferType?: Maybe<Scalars['String']>;
};

export type TellerBankTransferViewResult = {
  data?: Maybe<TellerBankTransferView>;
  error?: Maybe<QueryError>;
};

export type TellerDataEntry = {
  balance?: Maybe<Scalars['String']>;
  inAmount?: Maybe<Scalars['String']>;
  inTransit?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outAmount?: Maybe<Scalars['String']>;
  stack?: Maybe<Scalars['String']>;
  tellerId?: Maybe<Scalars['String']>;
};

export type TellerDataHolder = {
  balanceTotal?: Maybe<Scalars['String']>;
  entries?: Maybe<Array<Maybe<TellerDataEntry>>>;
  inAmountTotal?: Maybe<Scalars['String']>;
  inTransitTotal?: Maybe<Scalars['String']>;
  outAmountTotal?: Maybe<Scalars['String']>;
  stackTotal?: Maybe<Scalars['String']>;
};

export type TellerFilter = {
  tellerId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tellerType?: InputMaybe<TellerType>;
};

export type TellerInfo = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type TellerReportData = {
  headTeller?: Maybe<TellerDataHolder>;
  teller?: Maybe<TellerDataHolder>;
};

export type TellerReportFilter = {
  branchId: Scalars['String'];
  filter?: InputMaybe<TellerFilter>;
  period: LocalizedDateFilter;
};

export type TellerReportResult = {
  data?: Maybe<TellerReportData>;
  error?: Maybe<QueryError>;
};

export type TellerTransactionFilter = {
  type?: InputMaybe<Array<InputMaybe<TellerTransferType>>>;
};

export type TellerTransferActionResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<Scalars['ID']>;
};

export type TellerTransferInput = {
  amount?: InputMaybe<Scalars['String']>;
  collectorName?: InputMaybe<Scalars['String']>;
  denominations?: InputMaybe<Array<Denomination>>;
  destBranch?: InputMaybe<Scalars['String']>;
  destTellerID?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  srcBranch?: InputMaybe<Scalars['String']>;
  srcTellerID?: InputMaybe<Scalars['String']>;
  transferMode?: InputMaybe<CashTransferMode>;
  transferType: TellerTransferType;
};

export type TellerTransferResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<Scalars['ID']>;
};

export const TellerTransferType = {
  BranchTransfer: 'BRANCH_TRANSFER',
  CashInTransit: 'CASH_IN_TRANSIT',
  CashToVault: 'CASH_TO_VAULT',
  TellerTransfer: 'TELLER_TRANSFER',
  VaultToCash: 'VAULT_TO_CASH',
} as const;

export type TellerTransferType = typeof TellerTransferType[keyof typeof TellerTransferType];
export type TellerTransferView = {
  ID: Scalars['ID'];
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  destBranch?: Maybe<Scalars['Localized']>;
  destTeller?: Maybe<Scalars['Localized']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  note?: Maybe<Scalars['String']>;
  srcBranch?: Maybe<Scalars['Localized']>;
  srcProfilePic?: Maybe<Scalars['String']>;
  srcProfilePicUrl?: Maybe<Scalars['String']>;
  srcTeller?: Maybe<Scalars['Localized']>;
  totalBalance?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  transferCode?: Maybe<Scalars['String']>;
  transferState?: Maybe<TellerActivityState>;
  transferType: TellerTransferType;
};

export const TellerType = {
  All: 'ALL',
  HeadTeller: 'HEAD_TELLER',
  Teller: 'TELLER',
} as const;

export type TellerType = typeof TellerType[keyof typeof TellerType];
export type TenureUpdateData = {
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
};

export type TestDbResult = {
  name: Scalars['String'];
};

export const TextFormat = {
  Email: 'EMAIL',
  IPv4: 'IPv4',
  IPv6: 'IPv6',
} as const;

export type TextFormat = typeof TextFormat[keyof typeof TextFormat];
export const TodayListStatus = {
  Collected: 'COLLECTED',
  Completed: 'COMPLETED',
  Failed: 'FAILED',
  Pending: 'PENDING',
} as const;

export type TodayListStatus = typeof TodayListStatus[keyof typeof TodayListStatus];
export type TotalReport = {
  totalBalanceSheet?: Maybe<Scalars['Int']>;
  totalCr?: Maybe<Scalars['Int']>;
  totalDr?: Maybe<Scalars['Int']>;
  totalShares?: Maybe<Scalars['Int']>;
};

export type TransactionConstraintsStatus = {
  blockId?: Maybe<Scalars['ID']>;
  effectiveSince?: Maybe<Scalars['Localized']>;
  effectiveTill?: Maybe<Scalars['Localized']>;
  transactionType?: Maybe<CoaTypeOfTransaction>;
};

export type TransactionData = {
  noOfTransaction?: Maybe<Scalars['Int']>;
  percent?: Maybe<Scalars['String']>;
  todayValue?: Maybe<Scalars['String']>;
};

export type TransactionDetail = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['Localized']>;
  depositer?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  remarks?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
};

export type TransactionFilterMapping = {
  agent?: Maybe<AgentFilterMapping>;
  allTransaction?: Maybe<AllTransactionFilterMapping>;
  deposit?: Maybe<DepositFilterMapping>;
  transfer?: Maybe<TransferFilterMapping>;
  withdraw?: Maybe<WithdrawFilterMapping>;
};

export type TransactionInfo = {
  amount: Scalars['String'];
  branchId: Scalars['String'];
  branchName: Scalars['String'];
  date: Scalars['Localized'];
  id: Scalars['String'];
  narration: Scalars['String'];
  transactionType: AllTransactionType;
};

export type TransactionListSummary = {
  averageBalance?: Maybe<Scalars['String']>;
  expensesThisMonth?: Maybe<Scalars['String']>;
  totalDeposit?: Maybe<Scalars['String']>;
  totalPrincipalPaid?: Maybe<Scalars['String']>;
  totalRemainingPrincipal?: Maybe<Scalars['String']>;
  totalWithdraw?: Maybe<Scalars['String']>;
};

export const TransactionMode = {
  Ebanking: 'EBANKING',
  Mobile: 'MOBILE',
  MyraErp: 'MYRA_ERP',
} as const;

export type TransactionMode = typeof TransactionMode[keyof typeof TransactionMode];
export type TransactionMutation = {
  approveIBT?: Maybe<ApproveIbtResult>;
  bulkDeposit: BulkDepositResult;
  bulkTransfer?: Maybe<BulkTransferResult>;
  cashInTransit?: Maybe<CashInTransitMutation>;
  deposit: DepositResult;
  endOfDay?: Maybe<EodResult>;
  readyBranchEOD?: Maybe<Array<Maybe<Scalars['String']>>>;
  restrictAccounting?: Maybe<RestrictTransactionMutation>;
  revertTransaction: RevertTransactionResult;
  serviceCentreCashTransfer: ServiceCentreCashTransferResult;
  strTransactionAction?: Maybe<StrTransactionActionResult>;
  tellerBankTransfer?: Maybe<TellerBankTransferMutation>;
  tellerTransfer: TellerTransferResult;
  tellerTransferAction: TellerTransferActionResult;
  transfer: TransferResult;
  withdraw: WithdrawResult;
  yearEndSettlement?: Maybe<YearEndSettlementResult>;
};

export type TransactionMutationApproveIbtArgs = {
  data: JournalVoucherInput;
  requestId: Scalars['ID'];
};

export type TransactionMutationBulkDepositArgs = {
  data?: InputMaybe<BulkDepositInput>;
};

export type TransactionMutationBulkTransferArgs = {
  data: BulkTransferInput;
};

export type TransactionMutationDepositArgs = {
  data: DepositInput;
};

export type TransactionMutationEndOfDayArgs = {
  option?: InputMaybe<EodOption>;
};

export type TransactionMutationReadyBranchEodArgs = {
  revertBranchId?: InputMaybe<Scalars['ID']>;
};

export type TransactionMutationRevertTransactionArgs = {
  journalId: Scalars['ID'];
};

export type TransactionMutationServiceCentreCashTransferArgs = {
  data: ServiceCentreCashTransferInput;
};

export type TransactionMutationStrTransactionActionArgs = {
  data: StrTransactionActionInput;
};

export type TransactionMutationTellerTransferArgs = {
  data: TellerTransferInput;
};

export type TransactionMutationTellerTransferActionArgs = {
  action: TransferRequestAction;
  declineReason?: InputMaybe<Scalars['String']>;
  requestId: Scalars['ID'];
};

export type TransactionMutationTransferArgs = {
  data: TransferInput;
};

export type TransactionMutationWithdrawArgs = {
  data: WithdrawInput;
};

export type TransactionMutationYearEndSettlementArgs = {
  destinationCOALeaf: Scalars['ID'];
};

export type TransactionMyDay = {
  cashInHand?: Maybe<CashInHandData>;
  deposit?: Maybe<TransactionData>;
  withdraw?: Maybe<TransactionData>;
};

export type TransactionMyDayData = {
  data?: Maybe<TransactionMyDay>;
  error?: Maybe<QueryError>;
};

export type TransactionQuery = {
  cashInTransit: CashInTransitConnection;
  cashInTransitDetail?: Maybe<CashInTransitViewResult>;
  endOfDayDate: EodDate;
  eodStatus?: Maybe<EodSatusResult>;
  filterMapping?: Maybe<TransactionFilterMapping>;
  listAllTransactions?: Maybe<AllTransactionsConnection>;
  listBulkTransfers?: Maybe<BulkTransferConnection>;
  listDeposit: AccountActivityListConnection;
  listServiceCenterCashTransfer?: Maybe<ServiceCentreCashTransferActivity>;
  listTellerTransaction: TellerActivityListConnection;
  listTransfer: AccountTransferListConnection;
  listWithdraw: AccountActivityListConnection;
  restrictAccounting?: Maybe<RestrictTransactionQuery>;
  strTransactionDetail?: Maybe<StrTransactionDetailQuery>;
  tellerBankTransfer?: Maybe<TellerBankTransferQuery>;
  transferDetail?: Maybe<TransferDetailViewResult>;
  viewAccountTransfer?: Maybe<AccountTransferViewResult>;
  viewDeposit?: Maybe<DepositTransactionViewResult>;
  viewLoanRepayment?: Maybe<LoanRepaymentViewResult>;
  viewServiceCenterCashTransfer?: Maybe<ServiceCenterCashTransferDetail>;
  viewTransactionDetail?: Maybe<AllTransactionViewResult>;
  viewWithdraw?: Maybe<WithdrawTransactionViewResult>;
  yearEnd?: Maybe<YearEndResult>;
};

export type TransactionQueryCashInTransitArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryCashInTransitDetailArgs = {
  transitID: Scalars['ID'];
};

export type TransactionQueryListAllTransactionsArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListBulkTransfersArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListDepositArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListServiceCenterCashTransferArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListTellerTransactionArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListTransferArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListWithdrawArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryStrTransactionDetailArgs = {
  transactionId: Scalars['ID'];
};

export type TransactionQueryTransferDetailArgs = {
  transferID: Scalars['ID'];
};

export type TransactionQueryViewAccountTransferArgs = {
  transactionId: Scalars['ID'];
};

export type TransactionQueryViewDepositArgs = {
  transactionId: Scalars['ID'];
};

export type TransactionQueryViewLoanRepaymentArgs = {
  paymentId: Scalars['ID'];
};

export type TransactionQueryViewServiceCenterCashTransferArgs = {
  entryID: Scalars['ID'];
};

export type TransactionQueryViewTransactionDetailArgs = {
  transactionId: Scalars['ID'];
  txnType?: InputMaybe<AllTransactionType>;
};

export type TransactionQueryViewWithdrawArgs = {
  transactionId: Scalars['ID'];
};

export type TransactionReport = {
  audit: AuditTransactionReport;
  financial: FianancialTransactionReport;
};

export const TransactionState = {
  Active: 'ACTIVE',
  Submitted: 'SUBMITTED',
} as const;

export type TransactionState = typeof TransactionState[keyof typeof TransactionState];
export const TransactionTypeFilter = {
  All: 'ALL',
  Ibft: 'IBFT',
  Qr: 'QR',
  Wallet: 'WALLET',
} as const;

export type TransactionTypeFilter =
  typeof TransactionTypeFilter[keyof typeof TransactionTypeFilter];
export type TransferData = {
  amount?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Localized']>;
  date?: Maybe<Scalars['Localized']>;
  fine?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  payeeNumber?: Maybe<Scalars['String']>;
  receiverAccountId?: Maybe<Scalars['String']>;
  receiverAccountName?: Maybe<Scalars['String']>;
  receiverMemberId?: Maybe<Scalars['String']>;
  receiverMemberName?: Maybe<Scalars['Localized']>;
  remarks?: Maybe<Scalars['String']>;
  senderAccountId?: Maybe<Scalars['String']>;
  senderAccountName?: Maybe<Scalars['String']>;
  senderMemberId?: Maybe<Scalars['String']>;
  senderMemberName?: Maybe<Scalars['Localized']>;
  slipNo?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionAccount?: Maybe<Scalars['String']>;
  transactionMode?: Maybe<TransactionMode>;
  transferType?: Maybe<TransferType>;
  withdrawWith?: Maybe<WithdrawWith>;
};

export type TransferDetailViewResult = {
  data?: Maybe<TellerTransferView>;
  error?: Maybe<QueryError>;
};

export type TransferFilterMapping = {
  type: Array<LabelValueArray>;
};

export type TransferInput = {
  amount: Scalars['String'];
  counterSlipNo?: InputMaybe<Scalars['String']>;
  destAccountId: Scalars['String'];
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  pin?: InputMaybe<Scalars['Int']>;
  srcAccountId: Scalars['String'];
  transferMode?: InputMaybe<TransactionMode>;
  transferType?: InputMaybe<TransferType>;
  withdrawSlipNo?: InputMaybe<Scalars['String']>;
  withdrawWith?: InputMaybe<WithdrawWith>;
};

export type TransferItemDetails = {
  description?: InputMaybe<Scalars['String']>;
  itemId?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['String']>;
};

export const TransferRequestAction = {
  Approve: 'APPROVE',
  Decline: 'DECLINE',
} as const;

export type TransferRequestAction =
  typeof TransferRequestAction[keyof typeof TransferRequestAction];
export type TransferRequestInput = {
  response: WarehouseRequestResponse;
  transferId: Scalars['String'];
};

export type TransferResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<TransferData>;
  recordId?: Maybe<Scalars['ID']>;
};

export const TransferType = {
  Member: 'MEMBER',
  Self: 'SELF',
} as const;

export type TransferType = typeof TransferType[keyof typeof TransferType];
export type TranslateData = {
  data?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: Maybe<Scalars['String']>;
};

export type TranslateInput = {
  data?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: InputMaybe<Scalars['String']>;
};

export type TranslateQueryResult = {
  data?: Maybe<Array<Maybe<TranslateData>>>;
  error?: Maybe<QueryError>;
};

export type TrialSheetFilter = {
  includeZero?: InputMaybe<Scalars['Boolean']>;
};

export type TrialSheetReportData = {
  assets?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  assetsTotal?: Maybe<Scalars['Map']>;
  equityAndLiablities?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  equityAndLiablitiesTotal?: Maybe<Scalars['Map']>;
  expenseTotal?: Maybe<Scalars['Map']>;
  expenses?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  income?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  incomeTotal?: Maybe<Scalars['Map']>;
  offBalance?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  offBalanceTotal?: Maybe<Scalars['Map']>;
  orphanEntries?: Maybe<Array<Maybe<TrialSheetReportDataEntry>>>;
  orphanTotal?: Maybe<Scalars['Map']>;
  totalAssetExpense?: Maybe<Scalars['Map']>;
  totalLiablitiesIncome?: Maybe<Scalars['Map']>;
  totalProfitLoss?: Maybe<Scalars['Map']>;
};

export type TrialSheetReportDataEntry = {
  balance?: Maybe<Scalars['Map']>;
  ledgerId?: Maybe<Scalars['String']>;
  ledgerName?: Maybe<Scalars['Localized']>;
  under?: Maybe<Scalars['String']>;
};

export type TrialSheetReportFilter = {
  branchId: Array<InputMaybe<Scalars['String']>>;
  filter?: InputMaybe<TrialSheetFilter>;
  injectProfit?: InputMaybe<Scalars['Boolean']>;
  period: LocalizedDateFilter;
};

export type TrialSheetReportResult = {
  data?: Maybe<TrialSheetReportData>;
  error?: Maybe<QueryError>;
};

export const TypeOfLoan = {
  LineOfCredit: 'LINE_OF_CREDIT',
  Normal: 'NORMAL',
} as const;

export type TypeOfLoan = typeof TypeOfLoan[keyof typeof TypeOfLoan];
export const TypeOfOrganization = {
  Cooperative: 'COOPERATIVE',
  CooperativeUnion: 'COOPERATIVE_UNION',
} as const;

export type TypeOfOrganization = typeof TypeOfOrganization[keyof typeof TypeOfOrganization];
export const TypeOfShare = {
  PaidUp: 'PAID_UP',
} as const;

export type TypeOfShare = typeof TypeOfShare[keyof typeof TypeOfShare];
export type UpdateBankAccountInput = {
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<AccountingBankAccountType>;
  bankId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  openingBalance?: InputMaybe<Scalars['String']>;
};

export type UpdateDormancyInput = {
  blockLoanTransaction: Scalars['Boolean'];
  blockSavingTransaction: Scalars['Boolean'];
  blockShareTransaction: Scalars['Boolean'];
};

export type UpdateLedgerResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type UploadedDocument = {
  docData: Array<Maybe<UploadedDocumentData>>;
  fieldId?: Maybe<Scalars['String']>;
};

export type UploadedDocumentData = {
  identifier: Scalars['String'];
  url: Scalars['String'];
};

export type User = {
  contact?: Maybe<Scalars['String']>;
  currentBranch?: Maybe<Branch>;
  currentRole?: Maybe<RoleInfo>;
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['Localized'];
  id: Scalars['ID'];
  lastLoggedIn?: Maybe<Scalars['Time']>;
  lastName: Scalars['Localized'];
  middleName: Scalars['Localized'];
  organization?: Maybe<Organization>;
  profilePic?: Maybe<Scalars['String']>;
  userBalance?: Maybe<BalanceValue>;
  userLedger?: Maybe<Scalars['String']>;
  username: Scalars['String'];
};

export type UserBio = {
  documents?: Maybe<Array<Maybe<PictureData>>>;
  identificationDetail?: Maybe<Array<Maybe<MyraUserIdentification>>>;
  isTemporarySameAsPermanent?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  temporaryAddress?: Maybe<Address>;
};

export type UserData = {
  branches?: Maybe<Array<Maybe<BranchMinimal>>>;
  permission?: Maybe<PermissionQuery>;
  preference?: Maybe<UserPreference>;
  rolesList?: Maybe<Array<Maybe<RoleInfo>>>;
  user?: Maybe<User>;
  userId?: Maybe<Scalars['String']>;
};

export type UserDetailQuery = {
  basicInfo?: Maybe<UserMinimal>;
  error?: Maybe<QueryError>;
  userBio?: Maybe<UserBio>;
  userOverview?: Maybe<UserOverview>;
};

export const UserGender = {
  Female: 'FEMALE',
  Male: 'MALE',
  Other: 'OTHER',
} as const;

export type UserGender = typeof UserGender[keyof typeof UserGender];
export type UserMinimal = {
  name: Scalars['Localized'];
  profilePicUrl?: Maybe<Scalars['String']>;
  userId: Scalars['ID'];
};

export type UserMutation = {
  passwordRecovery?: Maybe<PasswordRecoveryMutation>;
  preference?: Maybe<UserPreferenceMutation>;
  resetPassword?: Maybe<ResetPasswordResult>;
};

export type UserMutationResetPasswordArgs = {
  data: ResetPasswordData;
};

export type UserOverview = {
  branches?: Maybe<Array<Maybe<BranchMinimal>>>;
  contactNo?: Maybe<Scalars['String']>;
  dateJoined?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  empCode?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  isCoreEmployee?: Maybe<Scalars['Boolean']>;
  lastActiveDate?: Maybe<Scalars['Localized']>;
  name?: Maybe<Scalars['Localized']>;
  role?: Maybe<Array<Maybe<RoleInfo>>>;
  rolesCount?: Maybe<Scalars['Int']>;
  serviceCenterCount?: Maybe<Scalars['Int']>;
};

export type UserPreference = {
  date?: Maybe<DateType>;
  id?: Maybe<Scalars['ID']>;
  language?: Maybe<Language>;
  languageCode?: Maybe<Scalars['String']>;
};

export type UserPreferenceInput = {
  date?: InputMaybe<DateType>;
  language?: InputMaybe<Language>;
};

export type UserPreferenceMutation = {
  update?: Maybe<UserPreferenceResult>;
};

export type UserPreferenceMutationUpdateArgs = {
  data: UserPreferenceInput;
  id: Scalars['ID'];
};

export type UserPreferenceQuery = {
  get?: Maybe<UserPreference>;
};

export type UserPreferenceQueryGetArgs = {
  id: Scalars['ID'];
};

export type UserPreferenceResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UserPreference>;
  recordId?: Maybe<Scalars['ID']>;
};

export type UserQuery = {
  preference?: Maybe<UserPreferenceQuery>;
};

export type UserReport = {
  accessForBranch?: Maybe<Scalars['String']>;
  accessForGroup?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDate?: Maybe<Scalars['Localized']>;
  empCode?: Maybe<Scalars['String']>;
  employeeName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  isCoreEmployee?: Maybe<Scalars['Boolean']>;
  remarks?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  usernameCode?: Maybe<Scalars['String']>;
};

export type UserReportFilter = {
  branchId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<UserReportFilterData>;
  period: LocalizedDateFilter;
};

export type UserReportFilterData = {
  coreEmployee?: InputMaybe<CoreEmployee>;
  role?: InputMaybe<Array<Scalars['String']>>;
};

export type UserReportResult = {
  data?: Maybe<Array<Maybe<UserReport>>>;
  error?: Maybe<QueryError>;
};

export const UserType = {
  Human: 'HUMAN',
  System: 'SYSTEM',
} as const;

export type UserType = typeof UserType[keyof typeof UserType];
export type ValidationError = {
  code: Scalars['Int'];
  message: Scalars['InvalidData'];
};

export const ValuationMethod = {
  Dv: 'DV',
  Fmv: 'FMV',
} as const;

export type ValuationMethod = typeof ValuationMethod[keyof typeof ValuationMethod];
export type Valuator = Base & {
  academicQualification?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  contractDate?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  insurancePremium?: Maybe<Scalars['Float']>;
  mobileNo?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  phoneNo?: Maybe<Scalars['String']>;
  renewalDate?: Maybe<Scalars['String']>;
  valuationLicenseNo?: Maybe<Scalars['String']>;
  valuatorId?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
  valuatorType?: Maybe<ValuatorType>;
};

export type ValuatorConnection = {
  edges?: Maybe<Array<ValuatorEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ValuatorEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Valuator>;
};

export type ValuatorFormStateData = {
  academicQualification?: Maybe<Scalars['String']>;
  address?: Maybe<KymAddress>;
  contractDate?: Maybe<Scalars['Localized']>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  insurancePremium?: Maybe<Scalars['Float']>;
  mobileNo?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
  renewalDate?: Maybe<Scalars['Localized']>;
  valuationLicenseNo?: Maybe<Scalars['String']>;
  valuatorId?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
  valuatorType?: Maybe<ValuatorType>;
};

export type ValuatorFormStateResult = {
  data?: Maybe<ValuatorFormStateData>;
  error?: Maybe<QueryError>;
};

export type ValuatorInput = {
  academicQualification?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<KymAddressInput>;
  contractDate?: InputMaybe<Scalars['Localized']>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  email?: InputMaybe<Scalars['String']>;
  insurancePremium?: InputMaybe<Scalars['Float']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
  renewalDate?: InputMaybe<Scalars['Localized']>;
  valuationLicenseNo?: InputMaybe<Scalars['String']>;
  valuatorId?: InputMaybe<Scalars['String']>;
  valuatorName?: InputMaybe<Scalars['String']>;
  valuatorType?: InputMaybe<ValuatorType>;
};

export type ValuatorResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ValuatorSettingsQuery>;
  record?: Maybe<Valuator>;
  recordId: Scalars['ID'];
};

export type ValuatorSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type ValuatorSettingsMutation = {
  add?: Maybe<ValuatorResult>;
};

export type ValuatorSettingsMutationAddArgs = {
  data?: InputMaybe<ValuatorInput>;
  id: Scalars['ID'];
};

export type ValuatorSettingsQuery = {
  formState?: Maybe<ValuatorFormStateResult>;
  list?: Maybe<ValuatorConnection>;
};

export type ValuatorSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type ValuatorSettingsQueryListArgs = {
  filter?: InputMaybe<ValuatorSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export const ValuatorType = {
  Individual: 'INDIVIDUAL',
  Organization: 'ORGANIZATION',
} as const;

export type ValuatorType = typeof ValuatorType[keyof typeof ValuatorType];
export type VaultBalanceDataEntry = {
  amountTotal?: Maybe<Scalars['String']>;
  denomination?: Maybe<Array<Maybe<DenominationValue>>>;
  noneAmount?: Maybe<Scalars['String']>;
  noteTotal?: Maybe<Scalars['String']>;
};

export type VaultBalanceReportData = {
  closing?: Maybe<VaultBalanceDataEntry>;
  opening?: Maybe<VaultBalanceDataEntry>;
  vaultIn?: Maybe<VaultBalanceDataEntry>;
  vaultOut?: Maybe<VaultBalanceDataEntry>;
};

export type VaultBalanceReportFilter = {
  branchId: Scalars['String'];
  period: LocalizedDateFilter;
};

export type VaultBalanceReportResult = {
  data?: Maybe<VaultBalanceReportData>;
  error?: Maybe<QueryError>;
};

export type WareHouseDetailDataResult = {
  data?: Maybe<WarehouseInfo>;
  error?: Maybe<QueryError>;
};

export type WarehouseConnection = {
  edges?: Maybe<Array<Maybe<WarehouseEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type WarehouseEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<WarehouseInfo>;
};

export type WarehouseFilter = {
  id?: InputMaybe<Scalars['String']>;
};

export type WarehouseInfo = {
  address?: Maybe<Scalars['String']>;
  branchId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

export type WarehouseMutation = {
  acceptTransferRequest?: Maybe<WarehouseTransferResult>;
  add?: Maybe<AddWarehouseResult>;
  transfer?: Maybe<WarehouseTransferResult>;
};

export type WarehouseMutationAcceptTransferRequestArgs = {
  data: TransferRequestInput;
};

export type WarehouseMutationAddArgs = {
  data?: InputMaybe<AddWarehouseInput>;
  id?: InputMaybe<Scalars['ID']>;
};

export type WarehouseMutationTransferArgs = {
  data?: InputMaybe<WarehouseTransferInput>;
};

export type WarehouseQuery = {
  getWarehouse: GetWarehouseResponse;
  getWarehouseDetails: WareHouseDetailDataResult;
  getWarehouseTransferDetail: WarehouseTransferDetailDataResult;
  listTransfers?: Maybe<WarehouseTransferConnection>;
  listWarehouses?: Maybe<WarehouseConnection>;
};

export type WarehouseQueryGetWarehouseArgs = {
  id: Scalars['ID'];
};

export type WarehouseQueryGetWarehouseDetailsArgs = {
  id: Scalars['ID'];
};

export type WarehouseQueryGetWarehouseTransferDetailArgs = {
  id: Scalars['ID'];
};

export type WarehouseQueryListTransfersArgs = {
  filter?: InputMaybe<WarehouseTransferFilter>;
  paginate: Pagination;
};

export type WarehouseQueryListWarehousesArgs = {
  filter?: InputMaybe<Filter>;
  paginate: Pagination;
};

export const WarehouseRequestResponse = {
  Accept: 'ACCEPT',
  Reject: 'REJECT',
} as const;

export type WarehouseRequestResponse =
  typeof WarehouseRequestResponse[keyof typeof WarehouseRequestResponse];
export type WarehouseTransfer = {
  date: Scalars['Localized'];
  destinationWarehouseId: Scalars['String'];
  destinationWarehouseName: Scalars['String'];
  entryNo: Scalars['String'];
  id: Scalars['String'];
  reference: Scalars['String'];
  sourceWarehouseId: Scalars['String'];
  sourceWarehouseName: Scalars['String'];
  status: WarehouseTransferStatus;
};

export type WarehouseTransferConnection = {
  edges?: Maybe<Array<Maybe<WarehouseTransferEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type WarehouseTransferDetailData = {
  authorizedReceiver?: Maybe<Scalars['String']>;
  authorizedSender?: Maybe<Scalars['String']>;
  branchName: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  itemDetails?: Maybe<Array<Maybe<ItemDetails>>>;
  transferEntry?: Maybe<WarehouseTransfer>;
};

export type WarehouseTransferDetailDataResult = {
  data?: Maybe<WarehouseTransferDetailData>;
  error?: Maybe<QueryError>;
};

export type WarehouseTransferEdge = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<WarehouseTransfer>;
};

export type WarehouseTransferFilter = {
  id?: InputMaybe<Scalars['String']>;
  objState?: InputMaybe<WarehouseTransferStatus>;
  query?: InputMaybe<Scalars['String']>;
  transferType?: InputMaybe<WarehouseTransferType>;
};

export type WarehouseTransferInput = {
  authorizedReceiver?: InputMaybe<Scalars['String']>;
  authorizedSender?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['Localized']>;
  destinationWarehouse?: InputMaybe<Scalars['String']>;
  itemDetails?: InputMaybe<Array<InputMaybe<TransferItemDetails>>>;
  note?: InputMaybe<Scalars['String']>;
  referenceNumber?: InputMaybe<Scalars['String']>;
  sourceWarehouse?: InputMaybe<Scalars['String']>;
  transferType?: InputMaybe<WarehouseTransferType>;
};

export type WarehouseTransferResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<WarehouseQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export const WarehouseTransferStatus = {
  Completed: 'COMPLETED',
  OnTransit: 'ON_TRANSIT',
  Rejected: 'REJECTED',
} as const;

export type WarehouseTransferStatus =
  typeof WarehouseTransferStatus[keyof typeof WarehouseTransferStatus];
export const WarehouseTransferType = {
  Direct: 'DIRECT',
  Request: 'REQUEST',
} as const;

export type WarehouseTransferType =
  typeof WarehouseTransferType[keyof typeof WarehouseTransferType];
export const Week = {
  Friday: 'FRIDAY',
  Monday: 'MONDAY',
  Saturday: 'SATURDAY',
  Sunday: 'SUNDAY',
  Thursday: 'THURSDAY',
  Tuesday: 'TUESDAY',
  Wednesday: 'WEDNESDAY',
} as const;

export type Week = typeof Week[keyof typeof Week];
export const WeeklyFrequency = {
  Day: 'DAY',
  DayOfTheWeek: 'DAY_OF_THE_WEEK',
} as const;

export type WeeklyFrequency = typeof WeeklyFrequency[keyof typeof WeeklyFrequency];
export type WithdrawBankCheque = {
  amount: Scalars['String'];
  bankId: Scalars['String'];
  chequeNo: Scalars['String'];
};

export const WithdrawBy = {
  Agent: 'AGENT',
  Other: 'OTHER',
  Self: 'SELF',
} as const;

export type WithdrawBy = typeof WithdrawBy[keyof typeof WithdrawBy];
export type WithdrawFilterMapping = {
  paymentMode: Array<LabelValueArray>;
};

export type WithdrawInput = {
  accountId: Scalars['String'];
  agentId?: InputMaybe<Scalars['String']>;
  amount: Scalars['String'];
  bankCheque?: InputMaybe<WithdrawBankCheque>;
  cash?: InputMaybe<DepositCash>;
  counterSlipNo?: InputMaybe<Scalars['String']>;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  fine?: InputMaybe<Scalars['String']>;
  isSuspicious?: InputMaybe<Scalars['Boolean']>;
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  otherWithdrawerName?: InputMaybe<Scalars['String']>;
  override?: InputMaybe<Scalars['Boolean']>;
  payment_type: WithdrawPaymentType;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  suspicionRemarks?: InputMaybe<Scalars['String']>;
  suspicionTopologies?: InputMaybe<Array<InputMaybe<SuspiciousTransactionTopology>>>;
  withdrawSlipNo?: InputMaybe<Scalars['String']>;
  withdrawWith: WithdrawWith;
  withdrawnBy: WithdrawBy;
};

export const WithdrawPaymentType = {
  BankCheque: 'BANK_CHEQUE',
  Cash: 'CASH',
} as const;

export type WithdrawPaymentType = typeof WithdrawPaymentType[keyof typeof WithdrawPaymentType];
export type WithdrawPenalty = {
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export type WithdrawPenaltyFormState = {
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type WithdrawRecord = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Localized']>;
  date?: Maybe<Scalars['Localized']>;
  fine?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  memberName?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<WithdrawPaymentType>;
  slipNo?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['String']>;
  transactionID?: Maybe<Scalars['ID']>;
  withdrawOther?: Maybe<Scalars['String']>;
  withdrawWith?: Maybe<WithdrawWith>;
  withdrawnBy?: Maybe<WithdrawBy>;
};

export type WithdrawResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<WithdrawRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type WithdrawSlip = {
  accId: Scalars['String'];
  amount: Scalars['String'];
  isDifferentMember?: InputMaybe<Scalars['Boolean']>;
  memberId?: InputMaybe<Scalars['String']>;
  verifyWith?: InputMaybe<AccountOpenDepositVerify>;
  withdrawSlipNo?: InputMaybe<Scalars['String']>;
};

export type WithdrawSlipDepositData = {
  accountId: Scalars['String'];
  agentID?: InputMaybe<Scalars['ID']>;
  amount: Scalars['String'];
  depositedBy: DepositedBy;
  isDifferentMember?: InputMaybe<Scalars['Boolean']>;
  memberId?: InputMaybe<Scalars['String']>;
  withdrawSlipNo: Scalars['String'];
};

export type WithdrawSlipIssueInput = {
  accountId: Scalars['ID'];
  branchId?: InputMaybe<Scalars['String']>;
  count: Scalars['Int'];
  marketRepresentative?: InputMaybe<Scalars['String']>;
  pickupMethod: PickupMethod;
};

export type WithdrawSlipMutation = {
  cancelSlip?: Maybe<AccountWithdrawSlipMutationResult>;
  issueNew?: Maybe<AccountWithdrawSlipMutationResult>;
  printSlip?: Maybe<AccountWithdrawSlipMutationResult>;
};

export type WithdrawSlipMutationCancelSlipArgs = {
  accountId: Scalars['ID'];
  reason?: InputMaybe<Scalars['String']>;
  slipNumber?: InputMaybe<Scalars['Int']>;
  slipRange?: InputMaybe<SlipRangeInput>;
};

export type WithdrawSlipMutationIssueNewArgs = {
  data: WithdrawSlipIssueInput;
};

export type WithdrawSlipMutationPrintSlipArgs = {
  data?: InputMaybe<WithdrawSlipPrintInput>;
};

export type WithdrawSlipPrintInput = {
  noOfLeaves: Scalars['Int'];
  requestID: Scalars['ID'];
};

export type WithdrawSlipQuery = {
  getAvailableRange?: Maybe<AccountWithdrawSlipRangeQueryResult>;
  getWithdrawSlipData?: Maybe<AccountWithdrawSlipResult>;
  listAvailableSlips?: Maybe<AccountWithdrawSlipQueryResult>;
  listPastSlips?: Maybe<AccountWithdrawSlipQueryResult>;
};

export type WithdrawSlipQueryGetAvailableRangeArgs = {
  count: Scalars['Int'];
};

export type WithdrawSlipQueryGetWithdrawSlipDataArgs = {
  requestID: Scalars['ID'];
};

export type WithdrawSlipQueryListAvailableSlipsArgs = {
  accountId: Scalars['ID'];
};

export type WithdrawSlipQueryListPastSlipsArgs = {
  accountId: Scalars['ID'];
};

export type WithdrawTransactionView = {
  accountId?: Maybe<Scalars['ID']>;
  accountName?: Maybe<Scalars['String']>;
  chequeNo?: Maybe<Scalars['String']>;
  fine?: Maybe<Scalars['String']>;
  glTransaction?: Maybe<Array<Maybe<GlTransaction>>>;
  id: Scalars['ID'];
  marketRepId?: Maybe<Scalars['String']>;
  marketRepName?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  note?: Maybe<Scalars['String']>;
  paymentFile?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentMode?: Maybe<WithdrawPaymentType>;
  status?: Maybe<ObjState>;
  teller?: Maybe<Scalars['String']>;
  totalCredit?: Maybe<Scalars['String']>;
  totalDebit?: Maybe<Scalars['String']>;
  totalWithdrawnAmount?: Maybe<Scalars['String']>;
  transactionBranch?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
  txnUserName?: Maybe<Scalars['String']>;
  withdrawAmount?: Maybe<Scalars['String']>;
  withdrawWith?: Maybe<WithdrawWith>;
  withdrawnBy?: Maybe<WithdrawBy>;
};

export type WithdrawTransactionViewResult = {
  data?: Maybe<WithdrawTransactionView>;
  error?: Maybe<QueryError>;
};

export type WithdrawViaCollectorConnection = {
  edges?: Maybe<Array<Maybe<WithdrawViaCollectorEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type WithdrawViaCollectorEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<WithdrawViaCollectorList>;
};

export type WithdrawViaCollectorList = {
  accountNumber: Scalars['String'];
  accountType: Scalars['String'];
  amount: Scalars['String'];
  approvalStatus: RequestStatus;
  collectorName: Scalars['String'];
  id: Scalars['String'];
  memberAge?: Maybe<Scalars['Int']>;
  memberCode?: Maybe<Scalars['String']>;
  memberGender?: Maybe<Scalars['String']>;
  memberId: Scalars['String'];
  memberName: Scalars['Localized'];
  memberPhoneNumber: Scalars['String'];
  memberProfilePicId?: Maybe<Scalars['String']>;
  memberProfilePicUrl?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  requestedDate: Scalars['String'];
};

export const WithdrawWith = {
  CounterSlip: 'COUNTER_SLIP',
  WithdrawSlip: 'WITHDRAW_SLIP',
} as const;

export type WithdrawWith = typeof WithdrawWith[keyof typeof WithdrawWith];
export type YearEndResult = {
  getCurrentState?: Maybe<PlCurrentResult>;
};

export type YearEndSettlementResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['String']>;
};

export type Activity = {
  beginsOn?: Maybe<Scalars['Localized']>;
  duration?: Maybe<Scalars['String']>;
  isDone?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

export type ActivityInput = {
  beginsOn?: InputMaybe<Scalars['Localized']>;
  duration?: InputMaybe<Scalars['String']>;
  isDone?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Scalars['String']>;
  userName?: InputMaybe<Scalars['String']>;
};

export const ApplicantStatus = {
  Accepted: 'ACCEPTED',
  NotAccepted: 'NOT_ACCEPTED',
  Pending: 'PENDING',
  Shortlisted: 'SHORTLISTED',
} as const;

export type ApplicantStatus = typeof ApplicantStatus[keyof typeof ApplicantStatus];
export type BranchTransferDetails = {
  transferDate?: Maybe<Scalars['Localized']>;
  transferredFrom?: Maybe<Scalars['String']>;
  transferredTo?: Maybe<Scalars['String']>;
};

export type DepartTransferDetails = {
  transferredDate?: Maybe<Scalars['Localized']>;
  transferredFrom?: Maybe<Scalars['String']>;
  transferredTo?: Maybe<Scalars['String']>;
};

export type Experience = {
  company?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['String']>;
  fromDate?: Maybe<Scalars['Localized']>;
  occupationName?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  toDate?: Maybe<Scalars['Localized']>;
};

export type ExperienceInput = {
  company?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
  fromDate?: InputMaybe<Scalars['Localized']>;
  occupationName?: InputMaybe<Scalars['String']>;
  summary?: InputMaybe<Scalars['String']>;
  toDate?: InputMaybe<Scalars['Localized']>;
};

export type Fields = {
  activityName?: Maybe<Scalars['String']>;
  beginsOn?: Maybe<Scalars['Localized']>;
  done?: Maybe<Scalars['Boolean']>;
  duration?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
};

export type FieldsInput = {
  activityName?: InputMaybe<Scalars['String']>;
  beginsOn?: InputMaybe<Scalars['Localized']>;
  done?: InputMaybe<Scalars['Boolean']>;
  duration?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Scalars['String']>;
  user?: InputMaybe<Scalars['String']>;
};

export type LedgerDetails = {
  accountId: Scalars['String'];
  amount?: Maybe<Scalars['String']>;
  tax?: Maybe<Scalars['String']>;
  taxAmount: Scalars['String'];
};

export const Level = {
  BelowOneYrs: 'BELOW_ONE_YRS',
  BetweenOneTwoYrs: 'BETWEEN_ONE_TWO_YRS',
  BetweenTwoThreeYrs: 'BETWEEN_TWO_THREE_YRS',
  ThreeYrsAndAbove: 'THREE_YRS_AND_ABOVE',
} as const;

export type Level = typeof Level[keyof typeof Level];
export type SetBankAccountsMutationVariables = Exact<{
  data?: InputMaybe<NewBankAccountInput>;
}>;

export type SetBankAccountsMutation = {
  accounting: {
    bankAccounts: {
      new?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    };
  };
};

export type SetJournalVoucherDataMutationVariables = Exact<{
  data?: InputMaybe<JournalVoucherInput>;
}>;

export type SetJournalVoucherDataMutation = {
  accounting: {
    journalVoucher: {
      new?: {
        recordId?: string | null;
        record?: {
          transactionId?: string | null;
          creatorId?: string | null;
          creatorName?: string | null;
          reference?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          note?: string | null;
          paymentMode?: JournalVoucherPaymentMode | null;
          totalAmount?: string | null;
          createdAt?: Record<'local' | 'en' | 'np', string> | null;
          entries?: Array<{ name?: string | null; value?: string | null } | null> | null;
          glTransaction?: Array<{
            ledgerId?: string | null;
            account: string;
            serviceCentreId?: string | null;
            serviceCenter?: string | null;
            debit?: string | null;
            credit?: string | null;
          } | null> | null;
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    };
  };
};

export type UpdateBankAccountsMutationVariables = Exact<{
  data?: InputMaybe<UpdateBankAccountInput>;
}>;

export type UpdateBankAccountsMutation = {
  accounting: {
    bankAccounts: {
      update?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    };
  };
};

export type InitiateLedgerBalanceTransferMutationVariables = Exact<{
  input: LedgerBalanceTransferRequestInput;
}>;

export type InitiateLedgerBalanceTransferMutation = {
  accounting: {
    ledgerBalanceTransfer: {
      initiateTransferRequest: {
        recordId?: string | null;
        data?: {
          transactionId: string;
          totalLedgerAccounts: string;
          destinationLedgerName: string;
          totalTransferBalance: { amount?: string | null; amountType?: BalanceType | null };
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetExternalLoanMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<ExternalLoanApplicationInput>;
}>;

export type SetExternalLoanMutation = {
  accounting: {
    externalLoan: {
      loan?: {
        new?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    };
  };
};

export type SetExternalPaymentMutationVariables = Exact<{
  data?: InputMaybe<ExternalLoanPaymentInput>;
}>;

export type SetExternalPaymentMutation = {
  accounting: {
    externalLoan: {
      payment?: {
        new?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    };
  };
};

export type SetInvestmentEntryDataMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: InvestmentEntryInput;
}>;

export type SetInvestmentEntryDataMutation = {
  accounting: {
    investment: {
      upsertEntry: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetInvestmentTransactionDataMutationVariables = Exact<{
  data: InvestmentTransactionInput;
}>;

export type SetInvestmentTransactionDataMutation = {
  accounting: {
    investment: {
      addTransaction: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetAccountingOrganizationDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: InvestmentAccountInput;
}>;

export type SetAccountingOrganizationDataMutation = {
  accounting: {
    organization: {
      upsert: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetPurchaseEntryMutationVariables = Exact<{
  data: PurchaseEntryInput;
}>;

export type SetPurchaseEntryMutation = {
  accounting: {
    purchase: {
      purchaseEntry?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    };
  };
};

export type AddNewExpenseMutationVariables = Exact<{
  data?: InputMaybe<AccountingExpenseInput>;
}>;

export type AddNewExpenseMutation = {
  accounting: {
    purchase: {
      expense?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    };
  };
};

export type AddNewDebitNoteMutationVariables = Exact<{
  data: PurchaseDebitNoteInput;
}>;

export type AddNewDebitNoteMutation = {
  accounting: {
    purchase: {
      debitNote?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    };
  };
};

export type SetSalesCustomerDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: SalesCustomerInput;
}>;

export type SetSalesCustomerDataMutation = {
  accounting: {
    sales: {
      upsertCustomer: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetSalesSaleEntryDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: SalesSaleEntryInput;
}>;

export type SetSalesSaleEntryDataMutation = {
  accounting: {
    sales: {
      upsertSaleEntry: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetSalesCreditNoteDataMutationVariables = Exact<{
  data: SalesCreditNoteInput;
}>;

export type SetSalesCreditNoteDataMutation = {
  accounting: {
    sales: {
      creditNote: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetSalesCustomerPaymentDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: SalesCustomerPaymentInput;
}>;

export type SetSalesCustomerPaymentDataMutation = {
  accounting: {
    sales: {
      upsertCustomerPayment: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type SetAccountCloseDataMutationVariables = Exact<{
  data?: InputMaybe<DepositAccountClose>;
}>;

export type SetAccountCloseDataMutation = {
  account: {
    close?: {
      recordId: string;
      calculatedAmount?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAccountOpenDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: DepositLoanAccountInput;
}>;

export type SetAccountOpenDataMutation = {
  account: {
    add?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAccountDocumentDataMutationVariables = Exact<{
  subscriptionId: Scalars['String'];
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetAccountDocumentDataMutation = {
  document: { Subscription: { Upsert: { recordId?: string | null } } };
};

export type SetMakeDormantAccountActiveMutationVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type SetMakeDormantAccountActiveMutation = { account: { makeActive?: string | null } };

export type SetupdateSavingsNomineeAccountMutationVariables = Exact<{
  NomineeAccountUpdateInput: NomineeAccountUpdateInput;
}>;

export type SetupdateSavingsNomineeAccountMutation = {
  account: {
    updateNomineeAccount?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetupdateSavingTenureMutationVariables = Exact<{
  SavingsTenureUpdateInput: SavingsTenureUpdateInput;
}>;

export type SetupdateSavingTenureMutation = {
  account: {
    updateTenure?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetupdateSignatureMutationVariables = Exact<{
  accountID: Scalars['ID'];
  data: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetupdateSignatureMutation = {
  account: {
    updateSignature?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetupdateInstallmentAmountMutationVariables = Exact<{
  accountId: Scalars['ID'];
  newInstallmentAmount: Scalars['String'];
  effectiveDate: Scalars['Localized'];
}>;

export type SetupdateInstallmentAmountMutation = {
  account: {
    updateInstallmentAmount?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type IssueFdCertificateMutationVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type IssueFdCertificateMutation = { account: { issueFDCertificate: string } };

export type UpdateSavingsLoanAccountNameMutationVariables = Exact<{
  accountId: Scalars['ID'];
  name: Scalars['String'];
  accountType: AccountTypeFilter;
}>;

export type UpdateSavingsLoanAccountNameMutation = {
  account: {
    updateAccountName?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type UpdateAccountInterestMutationVariables = Exact<{
  accountId: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type UpdateAccountInterestMutation = {
  account: {
    updateAccountInterest: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type EditAccountInterestMutationVariables = Exact<{
  id: Scalars['ID'];
  accountId: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type EditAccountInterestMutation = {
  account: {
    editAccountInterest: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetIssueNewSlipMutationVariables = Exact<{
  data: WithdrawSlipIssueInput;
}>;

export type SetIssueNewSlipMutation = {
  withdrawSlip: {
    issueNew?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type PrintSlipMutationVariables = Exact<{
  data?: InputMaybe<WithdrawSlipPrintInput>;
}>;

export type PrintSlipMutation = {
  withdrawSlip: {
    printSlip?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAddMemberToAgentDataMutationVariables = Exact<{
  agentId: Scalars['String'];
  data?: InputMaybe<AssignMembersInput>;
  override?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetAddMemberToAgentDataMutation = {
  agent: {
    addMemberToAgent?: {
      data?: { id: string } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAgentTodayListDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>> | InputMaybe<AgentTodayListInput>>;
}>;

export type SetAgentTodayListDataMutation = {
  agent: {
    agentTodayList?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAgentTodayDepositDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>> | InputMaybe<AgentTodayListInput>>;
}>;

export type SetAgentTodayDepositDataMutation = {
  agent: {
    agentTodayDeposit?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type RemoveMemberAccountAgentMutationVariables = Exact<{
  accountId: Scalars['ID'];
  agentID: Scalars['ID'];
}>;

export type RemoveMemberAccountAgentMutation = {
  agent: {
    removeMemberAccountAgent?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type AgentTodayCollectionMutationVariables = Exact<{
  agentId: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>> | InputMaybe<AgentTodayListInput>>;
}>;

export type AgentTodayCollectionMutation = {
  agent: {
    agentTodayCollection?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAgentTemplateMutationVariables = Exact<{
  agentId: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTemplateInput>> | InputMaybe<AgentTemplateInput>>;
}>;

export type SetAgentTemplateMutation = {
  agent: {
    agentTemplate?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ResetPasswordMutationVariables = Exact<{
  userId: Scalars['String'];
  newPassword: Scalars['String'];
  oldPassword: Scalars['String'];
}>;

export type ResetPasswordMutation = {
  user: {
    resetPassword?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetRecoveryPasswordMutationVariables = Exact<{
  email: Scalars['String'];
  url: Scalars['String'];
}>;

export type SetRecoveryPasswordMutation = {
  user: {
    passwordRecovery?: {
      sendRecoveryEmail?: {
        recordID?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetNewPasswordMutationVariables = Exact<{
  token: Scalars['String'];
  newPassword: Scalars['String'];
}>;

export type SetNewPasswordMutation = {
  user: {
    passwordRecovery?: {
      setNewPassword?: {
        recordID?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SwitchRoleMutationVariables = Exact<{
  role?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['String']>;
}>;

export type SwitchRoleMutation = {
  auth: {
    switchRole?: {
      data?: {
        token?: { access: string; refresh: string } | null;
        me?: {
          branches?: Array<{ id: string; name: string } | null> | null;
          rolesList?: Array<{ id: string; name: string } | null> | null;
          permission?: { myPermission?: Record<string, string> | null } | null;
          preference?: {
            language?: Language | null;
            languageCode?: string | null;
            date?: DateType | null;
          } | null;
          user?: UserFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ChangeUserStateMutationVariables = Exact<{
  userID: Scalars['ID'];
  state: ObjState;
}>;

export type ChangeUserStateMutation = { auth: { changeState?: string | null } };

export type AddNewAccountInCoaMutationVariables = Exact<{
  data: AddCoaAccountInput;
}>;

export type AddNewAccountInCoaMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        add: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type DeleteCoaMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteCoaMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        delete: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type AddGroupMutationVariables = Exact<{
  data: NewCoaGroupInput;
}>;

export type AddGroupMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        newGroup: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type AddAccountInCoaMutationVariables = Exact<{
  accountSetup: CoaAccountSetup;
  parentAccountCode: Scalars['String'];
  openForBranches?: InputMaybe<Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>>;
  ledgerName?: InputMaybe<Scalars['String']>;
  tagIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>>;
}>;

export type AddAccountInCoaMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        addAccount?: {
          success: boolean;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateLedgerStatusMutationVariables = Exact<{
  id: Scalars['ID'];
  status: Scalars['Boolean'];
}>;

export type UpdateLedgerStatusMutation = {
  settings: {
    general?: {
      chartsOfAccount?: {
        account?: {
          updateMoneyLedger?: {
            recordId: string;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateLedgerNameMutationVariables = Exact<{
  ledgerId: Scalars['ID'];
  newName: Scalars['String'];
}>;

export type UpdateLedgerNameMutation = {
  settings: {
    general?: {
      chartsOfAccount?: {
        account?: {
          updateLedgerName?: {
            recordId?: string | null;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AddProfitToFundManagementDataMutationVariables = Exact<{
  data: FundManagementInput;
}>;

export type AddProfitToFundManagementDataMutation = {
  profitToFundManagement: {
    new?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetNewEmployeeMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: EmployeeInput;
}>;

export type SetNewEmployeeMutation = {
  hr: {
    employee: {
      employee: {
        upsertEmployee: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    };
  };
};

export type SetNewLeaveMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: LeaveInput;
}>;

export type SetNewLeaveMutation = {
  hr: {
    employee: {
      leave: {
        upsertLeave: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    };
  };
};

export type SetEmployeeOnboardingUpsertMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  input: EmployeeOnboardingInput;
}>;

export type SetEmployeeOnboardingUpsertMutation = {
  hr: {
    employeelifecycle?: {
      employeeOnboarding: {
        upsertEmployeeOnboarding: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type SetEmployeeTransferUpsertMutationVariables = Exact<{
  input: EmployeeTransferInput;
}>;

export type SetEmployeeTransferUpsertMutation = {
  hr: {
    employeelifecycle?: {
      employeeTransfer: {
        insertEmployeeTransfer: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type SetEmployeeSeerationUpsertMutationVariables = Exact<{
  input: EmployeeSeparationInput;
}>;

export type SetEmployeeSeerationUpsertMutation = {
  hr: {
    employeelifecycle?: {
      employeeSeparation: {
        addEmployeeSeparation: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type SetEmployeePromotionUpsertMutationVariables = Exact<{
  input: EmployeePromotionInput;
}>;

export type SetEmployeePromotionUpsertMutation = {
  hr: {
    employeelifecycle?: {
      employeePromotion: {
        addEmployeePromotion: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type SetEmployeeExitUpsertMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  input: EmployeeExitInput;
}>;

export type SetEmployeeExitUpsertMutation = {
  hr: {
    employeelifecycle?: {
      employeeExit: {
        upsertEmployeeExit: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type SetStaffPlanningMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  input: StaffPlanInput;
}>;

export type SetStaffPlanningMutation = {
  hr: {
    recruitment: {
      recruitment: {
        upsertStaffPlan: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    };
  };
};

export type SetJobOpeningMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  input: JobOpeningInput;
}>;

export type SetJobOpeningMutation = {
  hr: {
    recruitment: {
      recruitmentJobOpening: {
        upsertJobOpening: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    };
  };
};

export type SetJobOfferMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  input: JobOfferInput;
}>;

export type SetJobOfferMutation = {
  hr: {
    recruitment: {
      recruitmentJobOffer: {
        upsertJobOffer: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    };
  };
};

export type SetAppointmentLetterMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  input: AppointmentLetterInput;
}>;

export type SetAppointmentLetterMutation = {
  hr: {
    recruitment: {
      recruitmentAppointmentLetter: {
        upsertAppointmentLetter: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    };
  };
};

export type SetJobApplicationMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  input: JobApplicationInput;
}>;

export type SetJobApplicationMutation = {
  hr: {
    recruitment: {
      recruitmentJobApplication: {
        upsertJobApplication: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    };
  };
};

export type SearchIndexingMutationVariables = Exact<{ [key: string]: never }>;

export type SearchIndexingMutation = { search: { indexData?: string | null } };

export type SearchInternalIndexingMutationVariables = Exact<{ [key: string]: never }>;

export type SearchInternalIndexingMutation = { search: { indexData?: string | null } };

export type ResetTrialBalanceCacheMutationVariables = Exact<{ [key: string]: never }>;

export type ResetTrialBalanceCacheMutation = {
  settings: { report?: { resetTrialCache?: string | null } | null };
};

export type SetItemCategoryMutationVariables = Exact<{
  data: InvItemsGroupInput;
}>;

export type SetItemCategoryMutation = {
  inventory: {
    itemsGroup?: {
      add: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    } | null;
  };
};

export type SetUnitsMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: InvUnitOfMeasureInput;
}>;

export type SetUnitsMutation = {
  inventory: {
    unitOfMeasure?: {
      add: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    } | null;
  };
};

export type SetWareHouseMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data?: InputMaybe<AddWarehouseInput>;
}>;

export type SetWareHouseMutation = {
  inventory: {
    warehouse?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetSuppliersMutationVariables = Exact<{
  data?: InputMaybe<InvSupplierInput>;
}>;

export type SetSuppliersMutation = {
  inventory: {
    suppliers?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetItemsMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: InvItemsInput;
}>;

export type SetItemsMutation = {
  inventory: {
    items?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetSuppliersAddMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data?: InputMaybe<InvSupplierInput>;
}>;

export type SetSuppliersAddMutation = {
  inventory: {
    suppliers?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetWareHouseTransferMutationVariables = Exact<{
  data?: InputMaybe<WarehouseTransferInput>;
}>;

export type SetWareHouseTransferMutation = {
  inventory: {
    warehouse?: {
      transfer?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetInventoryAdjustmentMutationVariables = Exact<{
  data?: InputMaybe<InventoryAdjustmentInput>;
}>;

export type SetInventoryAdjustmentMutation = {
  inventory: {
    adjustment?: {
      new?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetInventoryWarehouseRequestAcceptHandlerMutationVariables = Exact<{
  data: TransferRequestInput;
}>;

export type SetInventoryWarehouseRequestAcceptHandlerMutation = {
  inventory: {
    warehouse?: {
      acceptTransferRequest?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetKymCooperativeDataMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: KymCooperativeFormInput;
  forDraft?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetKymCooperativeDataMutation = {
  members: {
    cooperative?: {
      add?: {
        recordId: string;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetCooperativeUnionDataMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: CoopUnionInstitutionInformationInput;
  forDraft?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetCooperativeUnionDataMutation = {
  members: {
    cooperativeUnion?: {
      add?: {
        recordId: string;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetKymIndividualDataMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: KymIndMemberInput;
  forDraft?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetKymIndividualDataMutation = {
  members: {
    individual?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type AddFamilyMemberMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndFamilyMemberInput;
}>;

export type AddFamilyMemberMutation = {
  members: {
    individual?: {
      addMinorFamliyMember?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetKymInstitutionDataMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: KymInsInput;
  forDraft?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetKymInstitutionDataMutation = {
  members: {
    institution?: {
      add?: {
        recordId: string;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SendLoanApplicationForApprovalMutationVariables = Exact<{
  id: Scalars['ID'];
  data: LoanAccountInput;
}>;

export type SendLoanApplicationForApprovalMutation = {
  loanAccount: {
    add?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetDisburseLoanMutationVariables = Exact<{
  loanAccountId: Scalars['ID'];
  data: LoanDisbursementInput;
}>;

export type SetDisburseLoanMutation = {
  loanAccount: {
    disburse?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ApproveLoanAccountMutationVariables = Exact<{
  id: Scalars['String'];
  action: LoanApproveOrCancel;
  remarks?: InputMaybe<Scalars['String']>;
}>;

export type ApproveLoanAccountMutation = {
  loanAccount: {
    approveOrCancel?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetLoanRepaymentMutationVariables = Exact<{
  data?: InputMaybe<LoanRepaymentInput>;
}>;

export type SetLoanRepaymentMutation = {
  loanAccount: {
    repayment?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
      record?: {
        transactionId?: string | null;
        accountId?: string | null;
        accountName?: string | null;
        memberId?: string | null;
        memberName?: Record<'local' | 'en' | 'np', string> | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        createdAt?: Record<'local' | 'en' | 'np', string> | null;
        installmentNo?: string | null;
        principalAmount?: string | null;
        interestAmount?: string | null;
        penaltyAmount?: string | null;
        discountAmount?: string | null;
        rebateAmount?: string | null;
        totalAmount?: string | null;
        paymentMethod?: LoanRepaymentMethod | null;
        nextInstallment?: {
          installmentNo: number;
          installmentDate: Record<'local' | 'en' | 'np', string>;
          currentRemainingPrincipal: string;
          remainingInterest: string;
        } | null;
      } | null;
    } | null;
  };
};

export type ChangeLocMutationVariables = Exact<{
  accountId: Scalars['ID'];
  newAmount: Scalars['String'];
}>;

export type ChangeLocMutation = { loanAccount: { changeLOC?: string | null } };

export type UpdateLinkedAccountMutationVariables = Exact<{
  loanAccountId: Scalars['ID'];
  newLinkedAccountId: Scalars['ID'];
}>;

export type UpdateLinkedAccountMutation = {
  loanAccount: {
    updateLinkedAccount?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ReleaseCollateralMutationVariables = Exact<{
  data: LoanCollateralReleaseInput;
}>;

export type ReleaseCollateralMutation = {
  loanAccount: {
    loanCollateralActions?: {
      releaseCollateral?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SwitchCollateralMutationVariables = Exact<{
  data?: InputMaybe<LoanCollateralSwitchInput>;
  input?: InputMaybe<LoanAccountCollateralData>;
}>;

export type SwitchCollateralMutation = {
  loanAccount: {
    loanCollateralActions?: {
      switchCollateral?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type LoanAccountGuaranteeActionsMutationVariables = Exact<{
  actionType: GuaranteeActions;
  data: LoanGuaranteeActionsInput;
}>;

export type LoanAccountGuaranteeActionsMutation = {
  loanAccount: {
    loanGuaranteeActions?: {
      guaranteeActions?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetLoanCloseMutationVariables = Exact<{
  data?: InputMaybe<LoanRepaymentInput>;
}>;

export type SetLoanCloseMutation = {
  loanAccount: {
    close?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
      record?: {
        accountID?: string | null;
        closedDate?: Record<'local' | 'en' | 'np', string> | null;
        accountName?: string | null;
        totalPrincipal?: string | null;
        totalInterest?: string | null;
        totalFine?: string | null;
        paymentMode?: AccountClosePaymentMode | null;
        totalAmount?: string | null;
      } | null;
    } | null;
  };
};

export type UpdateLoanAccountInterestMutationVariables = Exact<{
  accountId: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type UpdateLoanAccountInterestMutation = {
  loanAccount: {
    updateAccountInterest: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type EditLoanAccountInterestMutationVariables = Exact<{
  id: Scalars['ID'];
  accountId: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type EditLoanAccountInterestMutation = {
  loanAccount: {
    editAccountInterest: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetLoanCollateralMutationVariables = Exact<{
  loanAccountID: Scalars['ID'];
  data?: InputMaybe<LoanAccountCollateralData>;
}>;

export type SetLoanCollateralMutation = {
  loanAccount: {
    loanCollateralActions?: {
      addCollateral?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetLoanGuaranteeMutationVariables = Exact<{
  loanAccountID: Scalars['ID'];
  data: LoanAccountGuranteeInput;
}>;

export type SetLoanGuaranteeMutation = {
  loanAccount: {
    loanGuaranteeActions?: {
      addGuarantee?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type LoanLossProvisionMutationVariables = Exact<{
  data?: InputMaybe<LoanLossProvisionInput>;
}>;

export type LoanLossProvisionMutation = {
  loanAccount: {
    loanProvision?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type GetNewIdMutationVariables = Exact<{
  idType?: InputMaybe<Id_Type>;
}>;

export type GetNewIdMutation = { newId: string };

export type SetOfficialUseMutationVariables = Exact<{
  id: Scalars['ID'];
  isStaff?: InputMaybe<Scalars['Boolean']>;
  checkSanction?: InputMaybe<Scalars['Boolean']>;
  checkNegative?: InputMaybe<Scalars['Boolean']>;
  riskCategory?: InputMaybe<OfficialUseRiskCategory>;
  docCollectedAndVerified?: InputMaybe<Scalars['Boolean']>;
  acceptableAddressDoc?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetOfficialUseMutation = {
  members: {
    officialUse?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type DeleteDraftMutationVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type DeleteDraftMutation = {
  members: {
    deleteDraft?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type IssueCertificateMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type IssueCertificateMutation = { members: { issueCertificate: string } };

export type UpdateKymMutationVariables = Exact<{
  date: Scalars['Localized'];
  id: Scalars['ID'];
}>;

export type UpdateKymMutation = {
  members: {
    updateKym: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type MakeMemberDormantMutationVariables = Exact<{
  memberId: Scalars['ID'];
  data: MemberDormancyInput;
}>;

export type MakeMemberDormantMutation = {
  members: {
    makeDormant?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type RevokeMemberDormancyMutationVariables = Exact<{
  memberId: Scalars['ID'];
  data: RevokeDormancyInput;
}>;

export type RevokeMemberDormancyMutation = {
  members: {
    revokeDormancy: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type UpdateMemberDormancyMutationVariables = Exact<{
  memberId: Scalars['ID'];
  data: UpdateDormancyInput;
}>;

export type UpdateMemberDormancyMutation = {
  members: {
    updateDormancy: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type MemberTransferInitiateMutationVariables = Exact<{
  memberId: Scalars['ID'];
  data: MemberTransferInput;
}>;

export type MemberTransferInitiateMutation = {
  members: {
    transfer: {
      initiate: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type MemberTransferActionMutationVariables = Exact<{
  requestId: Scalars['ID'];
  state: MemberTransferState;
  notes?: InputMaybe<Scalars['String']>;
}>;

export type MemberTransferActionMutation = {
  members: {
    transfer: {
      action: {
        record?: {
          recordId?: string | null;
          memberName?: string | null;
          valueDate?: Record<'local' | 'en' | 'np', string> | null;
          oldBranch?: string | null;
          newBranch?: string | null;
          state?: MemberTransferState | null;
          savingAccountList?: Array<string | null> | null;
          loanAccountList?: Array<string | null> | null;
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      };
    };
  };
};

export type PayMembershipMutationVariables = Exact<{
  data?: InputMaybe<MembershipPaymentInput>;
  memberId: Scalars['ID'];
}>;

export type PayMembershipMutation = {
  members: {
    activateMember?: {
      membershipPayment?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type InactivateMemberMutationVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type InactivateMemberMutation = {
  members: { makeInactive?: { recordId?: string | null } | null };
};

export type SetOrganizationDataMutationVariables = Exact<{
  data: OrganizationInput;
}>;

export type SetOrganizationDataMutation = {
  settings: {
    general?: {
      organization?: {
        initialSetup?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreSignedUrlMutationVariables = Exact<{
  contentType?: InputMaybe<Scalars['String']>;
}>;

export type GetPreSignedUrlMutation = {
  presignedUrl: {
    upload: { filename?: string | null; getUrl?: string | null; putUrl?: string | null };
  };
};

export type SaveNewReportMutationVariables = Exact<{
  data: StatementReportInput;
}>;

export type SaveNewReportMutation = {
  report: {
    statementReport?: {
      member?: {
        id: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
      } | null;
      statement?:
        | {
            shareStatement?: Array<{
              date: Record<'local' | 'en' | 'np', string>;
              particular: string;
              noOfShares: number;
              returnAmountDr: number;
              purchaseAmountCr: number;
              balanceSheet: number;
            } | null> | null;
            totals?: {
              totalShares?: number | null;
              totalDr?: number | null;
              totalCr?: number | null;
              totalBalanceSheet?: number | null;
            } | null;
          }
        | {}
        | null;
    } | null;
  };
};

export type ApproveOrDeclineRequestMutationVariables = Exact<{
  data?: InputMaybe<RequestApproveOrDeclineInput>;
  requestType: RequestType;
}>;

export type ApproveOrDeclineRequestMutation = {
  requests: {
    requestApproveOrDecline?: {
      requestId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type CancelWithdrawSlipRequestMutationVariables = Exact<{
  accountId: Scalars['ID'];
  slipNumber?: InputMaybe<Scalars['Int']>;
  slipRange?: InputMaybe<SlipRangeInput>;
  reason?: InputMaybe<Scalars['String']>;
}>;

export type CancelWithdrawSlipRequestMutation = {
  withdrawSlip: {
    cancelSlip?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ApproveOrDeclineMemberRequestMutationVariables = Exact<{
  data?: InputMaybe<RequestApproveOrDeclineInput>;
}>;

export type ApproveOrDeclineMemberRequestMutation = {
  requests: {
    approveOrDecline?: {
      membershipRequest?: {
        requestId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetAccountingNewTaxMutationVariables = Exact<{
  data?: InputMaybe<NewTaxInput>;
  id?: InputMaybe<Scalars['String']>;
}>;

export type SetAccountingNewTaxMutation = {
  settings: {
    general?: {
      accounting?: {
        newTax?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SaveAlternativeChargesMutationVariables = Exact<{
  data?: InputMaybe<
    Array<InputMaybe<AlternativeChannelChargesInput>> | InputMaybe<AlternativeChannelChargesInput>
  >;
}>;

export type SaveAlternativeChargesMutation = {
  settings: {
    general?: {
      alternativeChannel?: {
        feesAndCharges?: {
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: Array<{
            id?: string | null;
            amount?: string | null;
            ledgerId?: string | null;
            serviceType?: AlternativeChannelServiceType | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ActivateServiceMutationVariables = Exact<{
  data?: InputMaybe<AlternativeChannelServiceActivationInput>;
}>;

export type ActivateServiceMutation = {
  alternativeChannel?: {
    serviceActivation?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  } | null;
};

export type SetBankListMutationVariables = Exact<{
  data?: InputMaybe<Array<InputMaybe<BankInput>> | InputMaybe<BankInput>>;
}>;

export type SetBankListMutation = {
  bank: {
    bank?: {
      add?: {
        record?: Array<{ id: string } | null> | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetBranchDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: BranchInput;
}>;

export type SetBranchDataMutation = {
  settings: {
    general?: {
      branch?: {
        add: {
          record?: { id: string } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type SetCbsCodeMutationVariables = Exact<{
  data?: InputMaybe<CodeManagementInput>;
}>;

export type SetCbsCodeMutation = {
  settings: {
    general?: {
      codes?: {
        cbs?: {
          add?: {
            recordId?: string | null;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetCommitteeAddMutationVariables = Exact<{
  data: CommitteeInput;
  id?: InputMaybe<Scalars['ID']>;
}>;

export type SetCommitteeAddMutation = {
  settings: {
    general?: {
      organization?: {
        upsertCommittee?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetCommitteeMemberAddMutationVariables = Exact<{
  data: Array<CommitteeMemberInput> | CommitteeMemberInput;
}>;

export type SetCommitteeMemberAddMutation = {
  settings: {
    general?: {
      organization?: {
        upsertCommitteeMember?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositProductMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<DepositProductInput>;
  edit?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetDepositProductMutation = {
  settings: {
    general?: {
      depositProduct?: {
        add?: {
          recordId: string;
          record?: {
            id: string;
            productCode: string;
            productName: string;
            createdDate?: string | null;
            interest?: number | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositProductInactiveMutationVariables = Exact<{
  data?: InputMaybe<DepositProductInactiveData>;
}>;

export type SetDepositProductInactiveMutation = {
  settings: {
    general?: { depositProduct?: { makeInactive?: { recordId: string } | null } | null } | null;
  };
};

export type ActivateSavingsProductMutationVariables = Exact<{
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
  remarks: Scalars['String'];
}>;

export type ActivateSavingsProductMutation = {
  settings: {
    general?: {
      depositProduct?: {
        activateProduct?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateSavingProductInterestRateMutationVariables = Exact<{
  productId: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type UpdateSavingProductInterestRateMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updateProductInterest: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type EditSavingProductInterestRateMutationVariables = Exact<{
  id: Scalars['ID'];
  productId: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type EditSavingProductInterestRateMutation = {
  settings: {
    general?: {
      depositProduct?: {
        editProductInterest: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type EditSavingProductBalanceLimitMutationVariables = Exact<{
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
  data: AmountLimit;
}>;

export type EditSavingProductBalanceLimitMutation = {
  settings: {
    general?: {
      depositProduct?: {
        editBalanceLimit?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateSavingProductPenaltyMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  productId: Scalars['ID'];
  payload: PenaltyTypeInput;
  additionalData: ProductChargeAdditionalDataInput;
}>;

export type UpdateSavingProductPenaltyMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updatePenaltyCharge: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type UpdateOpenChargeMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  productId: Scalars['ID'];
  payload: Array<ServiceType> | ServiceType;
  additionalData: ProductChargeAdditionalDataInput;
}>;

export type UpdateOpenChargeMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updateOpenCharge: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type UpdateCloseChargeMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  productId: Scalars['ID'];
  payload: Array<ServiceType> | ServiceType;
  additionalData: ProductChargeAdditionalDataInput;
}>;

export type UpdateCloseChargeMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updateCloseCharge: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type EditChequeSettingsMutationVariables = Exact<{
  productId: Scalars['ID'];
  isChequeIssueAllowed: Scalars['Boolean'];
  chequeCharge?: InputMaybe<Array<InputMaybe<ServiceType>> | InputMaybe<ServiceType>>;
}>;

export type EditChequeSettingsMutation = {
  settings: {
    general?: {
      depositProduct?: {
        editChequeSettings?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateSavingLoanProductAccountPremiumMutationVariables = Exact<{
  productId: Scalars['ID'];
  payload: AccountPremium;
  productType: AccountTypeFilter;
}>;

export type UpdateSavingLoanProductAccountPremiumMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updateAccountPremium: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type UpdateSavingLoanProductTenureMutationVariables = Exact<{
  productId: Scalars['ID'];
  payload: TenureUpdateData;
  productType: AccountTypeFilter;
}>;

export type UpdateSavingLoanProductTenureMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updateProductTenure: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type UpdateSavingProductPrematurePenaltyMutationVariables = Exact<{
  productId: Scalars['ID'];
  allowPenalty: Scalars['Boolean'];
  payload: PrematurePenalty;
}>;

export type UpdateSavingProductPrematurePenaltyMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updatePrematurePenalty: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type UpdateWithdrawPenaltyMutationVariables = Exact<{
  productId: Scalars['ID'];
  payload: WithdrawPenalty;
}>;

export type UpdateWithdrawPenaltyMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updateWithdrawPenalty?: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateSavingProductRebateMutationVariables = Exact<{
  productId: Scalars['ID'];
  isRebateAllowed: Scalars['Boolean'];
  payload: RebateTypeInput;
}>;

export type UpdateSavingProductRebateMutation = {
  settings: {
    general?: {
      depositProduct?: {
        updateRebate?: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositIroMutationVariables = Exact<{
  data?: InputMaybe<DepositIroInput>;
}>;

export type SetDepositIroMutation = {
  settings: {
    general?: {
      deposit?: {
        iroSetup?: {
          recordId: string;
          record?: {
            id: string;
            iroName?: string | null;
            iroAddress?: string | null;
            iroCode?: string | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | { __typename: 'ValidationError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositTdsMutationVariables = Exact<{
  data?: InputMaybe<DepositTdsInput>;
}>;

export type SetDepositTdsMutation = {
  settings: {
    general?: {
      deposit?: {
        tdsSetup?: {
          recordId: string;
          record?: {
            id: string;
            individual?: number | null;
            institution?: number | null;
            cooperative?: number | null;
            coopUnion?: number | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | { __typename: 'ValidationError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSavingsOrganizationRateMutationVariables = Exact<{
  data: InterestRateSetupInput;
}>;

export type SetSavingsOrganizationRateMutation = {
  settings: {
    general?: {
      deposit?: {
        setOrganizationRate: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type EditSavingsOrganizationRateMutationVariables = Exact<{
  id: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type EditSavingsOrganizationRateMutation = {
  settings: {
    general?: {
      deposit?: {
        editOrganizationRate: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type EodDateSetupMutationVariables = Exact<{
  date: Scalars['Localized'];
}>;

export type EodDateSetupMutation = {
  settings: { general?: { setup: { eodSeed?: string | null } } | null };
};

export type EodExceptionSetupMutationVariables = Exact<{
  value: EodExceptionInput;
}>;

export type EodExceptionSetupMutation = {
  settings: { general?: { setup: { eodException?: boolean | null } } | null };
};

export type EodActivitiesSetupMutationVariables = Exact<{
  value: EodActionInput;
}>;

export type EodActivitiesSetupMutation = {
  settings: { general?: { setup: { eodAction?: boolean | null } } | null };
};

export type SetEmployeeLevelMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: NewEmployeeLevel;
}>;

export type SetEmployeeLevelMutation = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            upsertEmployeeLevel?: {
              recordId: string;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | MutationError_ValidationError_Fragment
                | null;
            } | null;
          };
        };
      } | null;
    } | null;
  };
};

export type SetDepartmentMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: NewDepartment;
}>;

export type SetDepartmentMutation = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            upsertDepartment: {
              recordId: string;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | MutationError_ValidationError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type SetDesignationMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: NewDesignation;
}>;

export type SetDesignationMutation = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            upsertDesignation: {
              recordId: string;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | MutationError_ValidationError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type SetEmployeeTypeMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: NewEmployeeType;
}>;

export type SetEmployeeTypeMutation = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            upsertEmployeeType: {
              recordId?: string | null;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | MutationError_ValidationError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type SetEmployeeHealthInsuranceMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: NewEmployeeHealthInsurance;
}>;

export type SetEmployeeHealthInsuranceMutation = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            upsertEmployeeHealthInsurance: {
              recordId: string;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | MutationError_ValidationError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type DeleteHcmEmployeeGeneralMutationVariables = Exact<{
  id: Scalars['String'];
}>;

export type DeleteHcmEmployeeGeneralMutation = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            deleteHcmEmployeeGeneral: {
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | MutationError_ValidationError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type SetEmployeeLeaveTypeMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: LeaveTypeInput;
}>;

export type SetEmployeeLeaveTypeMutation = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          leave: {
            upsertLeaveType: {
              recordId: string;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | MutationError_ValidationError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type SetEmployeeLeavePolicyMutationVariables = Exact<{
  id?: InputMaybe<Scalars['String']>;
  input: LeavePolicyInput;
}>;

export type SetEmployeeLeavePolicyMutation = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          leavePolicy: {
            upsertLeavePolicy: {
              recordId?: string | null;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | MutationError_ValidationError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type UpsertLedgerTagMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: LedgerTagInput;
}>;

export type UpsertLedgerTagMutation = {
  settings: {
    chartsOfAccount?: {
      tag?: {
        upsert?: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AddTagToLedgerMutationVariables = Exact<{
  ledgerId: Scalars['ID'];
  tagId: Array<Scalars['ID']> | Scalars['ID'];
}>;

export type AddTagToLedgerMutation = {
  settings: {
    chartsOfAccount?: {
      tag?: {
        addTagToLedger?: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanProductMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<LoanProductInput>;
  edit?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetLoanProductMutation = {
  settings: {
    general?: {
      loanProducts?: {
        upsert?: {
          recordId?: string | null;
          record?: {
            id: string;
            objState: ObjState;
            productName: string;
            productType: string;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanProductInactiveMutationVariables = Exact<{
  data?: InputMaybe<LoanProductInactiveData>;
}>;

export type SetLoanProductInactiveMutation = {
  settings: {
    general?: { loanProducts?: { makeInactive?: { recordId: string } | null } | null } | null;
  };
};

export type SetProductActiveMutationVariables = Exact<{
  productId: Scalars['ID'];
  productType: AccountTypeFilter;
  remarks: Scalars['String'];
}>;

export type SetProductActiveMutation = {
  settings: {
    general?: {
      depositProduct?: {
        activateProduct?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateLoanProductInterestRateMutationVariables = Exact<{
  productId: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type UpdateLoanProductInterestRateMutation = {
  settings: {
    general?: {
      loanProducts?: {
        updateProductInterest: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type EditLoanProductInterestRateMutationVariables = Exact<{
  id: Scalars['ID'];
  productId: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type EditLoanProductInterestRateMutation = {
  settings: {
    general?: {
      loanProducts?: {
        editProductInterest: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type UpdateLoanProductPenaltyMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  productId: Scalars['ID'];
  payload: PenaltyTypeInput;
  additionalData: ProductChargeAdditionalDataInput;
}>;

export type UpdateLoanProductPenaltyMutation = {
  settings: {
    general?: {
      loanProducts?: {
        updatePenaltyCharge: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type UpdateLoanProductProcessingChargeMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  productId: Scalars['ID'];
  payload: Array<ServiceType> | ServiceType;
  additionalData: ProductChargeAdditionalDataInput;
}>;

export type UpdateLoanProductProcessingChargeMutation = {
  settings: {
    general?: {
      loanProducts?: {
        updateProcessingCharge: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type SetLoanGeneralSettingsMutationVariables = Exact<{
  emi?: InputMaybe<Scalars['Boolean']>;
  epi?: InputMaybe<Scalars['Boolean']>;
  flat?: InputMaybe<Scalars['Boolean']>;
  collateralList?: InputMaybe<
    Array<InputMaybe<CollateralListInputData>> | InputMaybe<CollateralListInputData>
  >;
}>;

export type SetLoanGeneralSettingsMutation = {
  settings: {
    general?: {
      loan?: {
        general?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanInsuranceSchemeMutationVariables = Exact<{
  data?: InputMaybe<
    Array<InputMaybe<LoanInsuranceSchemeInput>> | InputMaybe<LoanInsuranceSchemeInput>
  >;
}>;

export type SetLoanInsuranceSchemeMutation = {
  settings: {
    general?: {
      loan?: {
        insuranceScheme?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetProductTypeMutationVariables = Exact<{
  productType?: InputMaybe<
    Array<InputMaybe<LoanProductTypeInput>> | InputMaybe<LoanProductTypeInput>
  >;
  productSubType?: InputMaybe<
    Array<InputMaybe<LoanProductSubTypeInput>> | InputMaybe<LoanProductSubTypeInput>
  >;
}>;

export type SetProductTypeMutation = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanOrganizationRateMutationVariables = Exact<{
  data: InterestRateSetupInput;
}>;

export type SetLoanOrganizationRateMutation = {
  settings: {
    general?: {
      loan?: {
        setOrganizationRate: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type EditLoanOrganizationRateMutationVariables = Exact<{
  id: Scalars['ID'];
  data: InterestRateSetupInput;
}>;

export type EditLoanOrganizationRateMutation = {
  settings: {
    general?: {
      loan?: {
        editOrganizationRate: {
          record?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type AddGeneralMemberMutationVariables = Exact<{
  data: GeneralMemberInput;
}>;

export type AddGeneralMemberMutation = {
  settings: {
    general?: {
      KYM?: {
        general?: {
          generalMember?: {
            recordId: string;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpsertNewOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  data: FormOptionUpsertInput;
}>;

export type UpsertNewOptionMutation = {
  settings: {
    form?: {
      option: {
        upsert: {
          recordId?: string | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            enabled: boolean;
            order: number;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteOptionMutationVariables = Exact<{
  optionId: Scalars['ID'];
}>;

export type DeleteOptionMutation = {
  settings: { form?: { option: { delete: { recordId?: string | null } } } | null };
};

export type MoveOptionMutationVariables = Exact<{
  optionId: Scalars['ID'];
  to: Scalars['Int'];
}>;

export type MoveOptionMutation = {
  settings: {
    form?: {
      option: {
        move: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type ToggleFieldOtherOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  hasOtherField?: InputMaybe<Scalars['Boolean']>;
}>;

export type ToggleFieldOtherOptionMutation = {
  settings: {
    form?: {
      field: {
        update: {
          record?: { name: Record<'local' | 'en' | 'np', string>; hasOtherField: boolean } | null;
        };
      };
    } | null;
  };
};

export type UpsertSectionOptionMutationVariables = Exact<{
  sectionId: Scalars['ID'];
  data: FormFieldUpsertInput;
}>;

export type UpsertSectionOptionMutation = {
  settings: {
    form?: {
      field: {
        upsert: {
          recordId?: string | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            enabled: boolean;
            fieldType: FormFieldType;
            order: number;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteFieldMutationVariables = Exact<{
  fieldId: Scalars['ID'];
}>;

export type DeleteFieldMutation = {
  settings: {
    form?: {
      field: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type MoveFieldMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  to: Scalars['Int'];
}>;

export type MoveFieldMutation = {
  settings: {
    form?: {
      field: {
        move: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type AddConditionOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  dependsOn: Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>;
}>;

export type AddConditionOptionMutation = {
  settings: {
    form?: {
      field: {
        condition: {
          recordId?: string | null;
          record?: {
            id: string;
            dependsOn?: Array<string | null> | null;
            name: Record<'local' | 'en' | 'np', string>;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type AddFileSizeToSectionMutationVariables = Exact<{
  sectionId: Scalars['ID'];
  maxSize: Scalars['Int'];
}>;

export type AddFileSizeToSectionMutation = {
  settings: {
    form?: {
      maxSize: {
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
        record?:
          | { id: string; name: Record<'local' | 'en' | 'np', string>; maxSize?: number | null }
          | {}
          | null;
      };
    } | null;
  };
};

export type UpsertCustomSectionMutationVariables = Exact<{
  data: FormSectionUpsertInput;
}>;

export type UpsertCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        upsert: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            isCustom: boolean;
          } | null;
        };
      };
    } | null;
  };
};

export type UpsertCustomFieldMutationVariables = Exact<{
  data: FormFieldUpsertInput;
}>;

export type UpsertCustomFieldMutation = {
  settings: {
    form?: {
      field: {
        upsert: {
          record?: { id: string } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteCustomSectionMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteCustomSectionFieldMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteCustomSectionFieldMutation = {
  settings: {
    form?: {
      field: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type UpdateCustomSectionMutationVariables = Exact<{
  id: Scalars['ID'];
  data: FormSectionUpdateInput;
}>;

export type UpdateCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        update: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            isCustom: boolean;
          } | null;
        };
      };
    } | null;
  };
};

export type UpdateCustomSectionFieldMutationVariables = Exact<{
  id: Scalars['ID'];
  data: FormFieldUpdateInput;
}>;

export type UpdateCustomSectionFieldMutation = {
  settings: { form?: { field: { update: { record?: { id: string } | null } } } | null };
};

export type UpdateDeclarationMutationVariables = Exact<{
  data: DeclarationInput;
}>;

export type UpdateDeclarationMutation = {
  settings: {
    declaration: { update: { record?: { content: Record<'local' | 'en' | 'np', string> } | null } };
  };
};

export type SetOrganizationInitialSetupMutationVariables = Exact<{
  data: OrganizationInput;
}>;

export type SetOrganizationInitialSetupMutation = {
  settings: {
    general?: {
      organization?: {
        initialSetup?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetWithdrawSlipPrintPreferenceMutationVariables = Exact<{
  data?: InputMaybe<PrintPreferenceInput>;
}>;

export type SetWithdrawSlipPrintPreferenceMutation = {
  settings: {
    general?: {
      printPreference?: {
        add?: {
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetWithdrawSlipPrintPreferenceQueryVariables = Exact<{ [key: string]: never }>;

export type GetWithdrawSlipPrintPreferenceQuery = {
  settings: {
    general?: {
      printPreference?: {
        get?: {
          data?: Array<{
            isSlipStandardActive?: boolean | null;
            slipSizeStandard: SlipSizeStandard;
            slipSizeCustom?: { height?: number | null; width?: number | null } | null;
            blockOne?: { top?: number | null; left?: number | null } | null;
            blockTwo?: { top?: number | null; left?: number | null } | null;
            blockThree?: { top?: number | null; left?: number | null } | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdatePearlsReportFormulaMutationVariables = Exact<{
  indicatorId: Scalars['String'];
  data?: InputMaybe<PearlsConfigurationInput>;
}>;

export type UpdatePearlsReportFormulaMutation = {
  settings: {
    general?: {
      reports?: {
        pearls?: {
          update?: {
            recordId?: string | null;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateCopomisReportFormulaMutationVariables = Exact<{
  indicatorId: Scalars['String'];
  data?: InputMaybe<CopomisConfigurationInput>;
}>;

export type UpdateCopomisReportFormulaMutation = {
  settings: {
    general?: {
      reports?: {
        copomis?: {
          update?: {
            recordId?: string | null;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareBonusMutationVariables = Exact<{
  data?: InputMaybe<ShareBonusSettingsInput>;
}>;

export type SetSettingsShareBonusMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          bonus?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareDividendMutationVariables = Exact<{
  data?: InputMaybe<ShareDividendSettingsInput>;
}>;

export type SetSettingsShareDividendMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          dividend?: {
            dividend?: {
              distributionCondition?: DividendDistributionCondition | null;
              dividendTransferTreatment?: DividendTransferTreatment | null;
              accountForFractionalDividends?: string | null;
              accountForShareDividends?: string | null;
              organizationFundForDividends?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareIssueChargesMutationVariables = Exact<{
  data?: InputMaybe<ShareIssueChargesInput>;
}>;

export type SetSettingsShareIssueChargesMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          shareIssueCharges?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareReturnChargesMutationVariables = Exact<{
  data?: InputMaybe<ShareReturnChargesInput>;
}>;

export type SetSettingsShareReturnChargesMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          shareReturnCharges?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareGeneralMutationVariables = Exact<{
  data?: InputMaybe<ShareSettingsGeneralInput>;
}>;

export type SetSettingsShareGeneralMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          general?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareTransferMutationVariables = Exact<{
  data?: InputMaybe<ShareTransferSettingsInput>;
}>;

export type SetSettingsShareTransferMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          transfer?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetServiceCenterCashTransferMutationVariables = Exact<{
  data: ServiceCentreCashTransferInput;
}>;

export type SetServiceCenterCashTransferMutation = {
  transaction: {
    serviceCentreCashTransfer: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetCashInTransitTransferMutationVariables = Exact<{
  data: CashInTransitInput;
}>;

export type SetCashInTransitTransferMutation = {
  transaction: {
    cashInTransit?: {
      new?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type ApproveCashInTransitTransferMutationVariables = Exact<{
  requestId: Scalars['String'];
}>;

export type ApproveCashInTransitTransferMutation = {
  transaction: {
    cashInTransit?: {
      approve?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetBankTransferMutationVariables = Exact<{
  data?: InputMaybe<TellerBankTransferInput>;
}>;

export type SetBankTransferMutation = {
  transaction: {
    tellerBankTransfer?: {
      new?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetSettingsUserDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<MyraUserInput>;
}>;

export type SetSettingsUserDataMutation = {
  settings: {
    myraUser?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetPreferenceMutationVariables = Exact<{
  id: Scalars['ID'];
  data: UserPreferenceInput;
}>;

export type SetPreferenceMutation = {
  user: {
    preference?: {
      update?: {
        recordId?: string | null;
        record?: {
          language?: Language | null;
          languageCode?: string | null;
          date?: DateType | null;
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetValuatorMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<ValuatorInput>;
}>;

export type SetValuatorMutation = {
  settings: {
    general?: {
      valuator?: {
        add?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AddSharePurchaseMutationVariables = Exact<{
  data: SharePurchaseInput;
}>;

export type AddSharePurchaseMutation = {
  share: {
    purchase: {
      recordId: string;
      record?: {
        id?: string | null;
        transactionId?: string | null;
        createdAt?: Record<'local' | 'en' | 'np', string> | null;
        status?: Share_Status | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        transactionDirection: Share_Transaction_Direction;
        credit?: number | null;
        debit?: number | null;
        startNumber: number;
        endNumber: number;
        noOfShare?: string | null;
        balance?: number | null;
        shareAmount?: string | null;
        shareCertificateCharge?: string | null;
        otherCharge?: string | null;
        totalAmount?: number | null;
        paymentMode?: SharePaymentMode | null;
        bankId?: string | null;
        voucherNumber?: string | null;
        accountId?: string | null;
        memberId?: string | null;
        extraFee?: Array<{ name: string; value: number } | null> | null;
        member?: { code: string; name?: Record<'local' | 'en' | 'np', string> | null } | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type AddShareReturnMutationVariables = Exact<{
  data: ShareReturnInput;
}>;

export type AddShareReturnMutation = {
  share: {
    return: {
      recordId: string;
      record?: {
        id?: string | null;
        transactionId?: string | null;
        createdAt?: Record<'local' | 'en' | 'np', string> | null;
        status?: Share_Status | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        transactionDirection: Share_Transaction_Direction;
        credit?: number | null;
        debit?: number | null;
        startNumber: number;
        endNumber: number;
        noOfShare?: string | null;
        balance?: number | null;
        shareAmount?: string | null;
        shareCertificateCharge?: string | null;
        otherCharge?: string | null;
        totalAmount?: number | null;
        paymentMode?: SharePaymentMode | null;
        bankId?: string | null;
        voucherNumber?: string | null;
        accountId?: string | null;
        memberId?: string | null;
        extraFee?: Array<{ name: string; value: number } | null> | null;
        member?: { code: string; name?: Record<'local' | 'en' | 'np', string> | null } | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetDepositDataMutationVariables = Exact<{
  data: DepositInput;
}>;

export type SetDepositDataMutation = {
  transaction: {
    deposit: {
      recordId?: string | null;
      record?: {
        transactionID?: string | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        amount?: string | null;
        fine?: string | null;
        rebate?: string | null;
        discount?: string | null;
        paymentMode?: DepositPaymentType | null;
        depositedBy?: DepositedBy | null;
        createdAt?: Record<'local' | 'en' | 'np', string> | null;
        memberName?: Record<'local' | 'en' | 'np', string> | null;
        memberId?: string | null;
        accountId?: string | null;
        accountName?: string | null;
        depositedOther?: string | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetBulkDepositDataMutationVariables = Exact<{
  data?: InputMaybe<BulkDepositInput>;
}>;

export type SetBulkDepositDataMutation = {
  transaction: {
    bulkDeposit: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetWithdrawDataMutationVariables = Exact<{
  data: WithdrawInput;
}>;

export type SetWithdrawDataMutation = {
  transaction: {
    withdraw: {
      recordId?: string | null;
      record?: {
        transactionID?: string | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        accountId?: string | null;
        accountName?: string | null;
        memberId?: string | null;
        memberName?: Record<'local' | 'en' | 'np', string> | null;
        createdAt?: Record<'local' | 'en' | 'np', string> | null;
        amount?: string | null;
        fine?: string | null;
        totalAmount?: string | null;
        withdrawnBy?: WithdrawBy | null;
        withdrawOther?: string | null;
        withdrawWith?: WithdrawWith | null;
        paymentMode?: WithdrawPaymentType | null;
        slipNo?: string | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetAccountTransferDataMutationVariables = Exact<{
  data: TransferInput;
}>;

export type SetAccountTransferDataMutation = {
  transaction: {
    transfer: {
      recordId?: string | null;
      record?: {
        totalAmount?: string | null;
        amount?: string | null;
        createdAt?: Record<'local' | 'en' | 'np', string> | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        id?: string | null;
        remarks?: string | null;
        fine?: string | null;
        payeeNumber?: string | null;
        receiverAccountId?: string | null;
        receiverAccountName?: string | null;
        receiverMemberId?: string | null;
        receiverMemberName?: Record<'local' | 'en' | 'np', string> | null;
        senderAccountId?: string | null;
        senderAccountName?: string | null;
        senderMemberId?: string | null;
        senderMemberName?: Record<'local' | 'en' | 'np', string> | null;
        transactionMode?: TransactionMode | null;
        withdrawWith?: WithdrawWith | null;
        transferType?: TransferType | null;
        slipNo?: string | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetAccountForgiveInstallmentDataMutationVariables = Exact<{
  id: Scalars['ID'];
  installmentDates: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetAccountForgiveInstallmentDataMutation = {
  account: {
    forgiveInstallment?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetEndOfDayDataMutationVariables = Exact<{
  option?: InputMaybe<EodOption>;
}>;

export type SetEndOfDayDataMutation = {
  transaction: {
    endOfDay?: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetTellerTransferDataMutationVariables = Exact<{
  data: TellerTransferInput;
}>;

export type SetTellerTransferDataMutation = {
  transaction: {
    tellerTransfer: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type SetTellerTransferActionMutationVariables = Exact<{
  requestId: Scalars['ID'];
  action: TransferRequestAction;
  declineReason?: InputMaybe<Scalars['String']>;
}>;

export type SetTellerTransferActionMutation = {
  transaction: {
    tellerTransferAction: {
      record?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type ReadyBranchEodMutationVariables = Exact<{
  revertBranchId?: InputMaybe<Scalars['ID']>;
}>;

export type ReadyBranchEodMutation = {
  transaction: { readyBranchEOD?: Array<string | null> | null };
};

export type SetStrTransactionActionMutationVariables = Exact<{
  data: StrTransactionActionInput;
}>;

export type SetStrTransactionActionMutation = {
  transaction: {
    strTransactionAction?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ApproveIbtMutationVariables = Exact<{
  requestId: Scalars['ID'];
  data: JournalVoucherInput;
}>;

export type ApproveIbtMutation = {
  transaction: {
    approveIBT?: {
      recordId?: string | null;
      record?: {
        transactionId?: string | null;
        creatorId?: string | null;
        creatorName?: string | null;
        reference?: string | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        note?: string | null;
        paymentMode?: JournalVoucherPaymentMode | null;
        totalAmount?: string | null;
        createdAt?: Record<'local' | 'en' | 'np', string> | null;
        entries?: Array<{ name?: string | null; value?: string | null } | null> | null;
        glTransaction?: Array<{
          ledgerId?: string | null;
          account: string;
          serviceCentreId?: string | null;
          serviceCenter?: string | null;
          debit?: string | null;
          credit?: string | null;
        } | null> | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type RevertTransactionMutationVariables = Exact<{
  journalId: Scalars['ID'];
}>;

export type RevertTransactionMutation = {
  transaction: {
    revertTransaction: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type BulkTransferMutationVariables = Exact<{
  data: BulkTransferInput;
}>;

export type BulkTransferMutation = {
  transaction: {
    bulkTransfer?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type RestrictAccountingTransactionMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data: RestrictTransactionInput;
}>;

export type RestrictAccountingTransactionMutation = {
  transaction: {
    restrictAccounting?: {
      restrict?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type DisableAccountingTransactionRestrictMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DisableAccountingTransactionRestrictMutation = {
  transaction: {
    restrictAccounting?: {
      disable?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type YearEndSettlementMutationVariables = Exact<{
  destinationCOALeaf: Scalars['ID'];
}>;

export type YearEndSettlementMutation = {
  transaction: {
    yearEndSettlement?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type GetAccountMemberListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountMemberListQuery = {
  members: {
    list: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          type: KymMemberTypesEnum;
          contact?: string | null;
          createdAt: string;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        };
      } | null> | null;
      pageInfo?: { startCursor?: string | null; endCursor?: string | null } | null;
    };
  };
};

export type GetProductListQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetProductListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductList?: {
          allowed?: Array<{
            id: string;
            productName: string;
            nature: NatureOfDepositProduct;
          } | null> | null;
          notAllowed?: Array<{
            error?: Array<string | null> | null;
            data?: { id: string; productName: string; nature: NatureOfDepositProduct } | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenProductDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountOpenProductDetailsQuery = {
  settings: {
    general?: {
      depositProduct?: {
        formState?: {
          data?: {
            productName?: string | null;
            nature?: NatureOfDepositProduct | null;
            typeOfMember?: Array<KymMemberTypesEnum | null> | null;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            isMandatorySaving?: boolean | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            depositFrequency?: Frequency | null;
            penalty?: boolean | null;
            rebate?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            isTenureApplicable?: boolean | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            ladderRate?: boolean | null;
            postingFrequency?: DepositFrequency | null;
            maxPostingFreqDifference?: number | null;
            noOftransactionAllowed?: number | null;
            accountType?: DefaultAccountType | null;
            autoOpen?: boolean | null;
            allowLoan?: boolean | null;
            chequeIssue?: boolean | null;
            percentageOfDeposit?: number | null;
            alternativeChannels?: boolean | null;
            atmFacility?: boolean | null;
            isForMinors?: boolean | null;
            supportMultiple?: boolean | null;
            staffProduct?: boolean | null;
            withdrawRestricted?: boolean | null;
            specifyWithdrawRestriction?: string | null;
            wealthBuildingProduct?: boolean | null;
            individualDocuments?: Array<IndividualRequiredDocument | null> | null;
            institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
            productPremiumInterest?: number | null;
            productCode: { prefix: string; initialNo: string };
            depositAmount?: { minAmount?: any | null; maxAmount?: any | null } | null;
            penaltyData?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebateData?: {
              dayBeforeInstallmentDate?: number | null;
              noOfInstallment?: number | null;
              rebateAmount?: any | null;
              rebateRate?: number | null;
              rebateLedgerMapping?: string | null;
            } | null;
            balanceLimit?: {
              minAmount?: any | null;
              maxAmount?: any | null;
              avgAmount?: any | null;
            } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate?: number | null;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              additionalRate?: number | null;
            } | null;
            ladderRateData?: Array<{ type: string; amount: any; rate: number } | null> | null;
            serviceCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            accountCloseCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            alternativeChannelCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            atmCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            dormantSetup?: Array<{
              duration?: DormantDuration | null;
              condition?: DormantCondition | null;
            } | null> | null;
            withdrawAmountLimit?: {
              minAmount?: any | null;
              maxAmount?: any | null;
              avgAmount?: any | null;
            } | null;
            chequeCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountOpenEditDataQuery = {
  account: {
    formState?: {
      data?: {
        memberId: string;
        productId: string;
        accountName?: string | null;
        minor?: string | null;
        tenure?: FrequencyTenure | null;
        tenureNumber?: number | null;
        initialDepositAmount?: any | null;
        defaultAmountDepositAccountName?: string | null;
        interestRate?: number | null;
        interestAuthority?: InterestAuthority | null;
        installmentAmount?: string | null;
        depositFrequencyWeekly?: Week | null;
        depositFrequencyMonthly?: WeeklyFrequency | null;
        depositFrequencyDay?: number | null;
        depositFrequencyFrequencyDay?: FrequencyDay | null;
        depositFrequencyDayOfWeek?: Week | null;
        depositFrequencyYearlyMonth?: Months | null;
        depositFrequencyYearlyDay?: number | null;
        mobileBanking?: boolean | null;
        eBanking?: boolean | null;
        atmFacility?: boolean | null;
        smsBanking?: boolean | null;
        chequeFacility?: boolean | null;
        agentId?: string | null;
        interestDoc?: Array<{ identifier?: string | null; url?: string | null } | null> | null;
        serviceCharge?: Array<{ name: string; amount?: any | null } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAccountTableListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetAccountTableListQuery = {
  account: {
    list?: {
      totalCount: number;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
      edges?: Array<{
        node?: {
          id: string;
          objState: ObjState;
          createdAt: string;
          accountName?: string | null;
          modifiedAt: string;
          installmentAmount?: string | null;
          balance?: string | null;
          availableBalance?: string | null;
          accountOpenedDate?: Record<'local' | 'en' | 'np', string> | null;
          lastTransactionDate?: Record<'local' | 'en' | 'np', string> | null;
          accountExpiryDate?: Record<'local' | 'en' | 'np', string> | null;
          closedAt?: string | null;
          overDrawnBalance?: string | null;
          guaranteedAmount?: string | null;
          interestAccured?: string | null;
          interestTax?: string | null;
          prematurePenalty?: string | null;
          createdBy: { id: string };
          modifiedBy: { id: string };
          member?: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePicUrl?: string | null;
            profilePic?: string | null;
            signaturePicUrl?: string | null;
            contact?: string | null;
            dateJoined?: Record<'local' | 'en' | 'np', string> | null;
            address?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
          product: {
            id: string;
            productCode: string;
            productName: string;
            nature: NatureOfDepositProduct;
            minimumBalance?: string | null;
            isMandatorySaving?: boolean | null;
            withdrawRestricted?: boolean | null;
            interest?: number | null;
            accountClosingCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          };
          dues?: {
            fine?: string | null;
            totalDue?: string | null;
            dueInstallments?: number | null;
          } | null;
        } | null;
      }> | null;
    } | null;
  };
};

export type GetAccountTableListMinimalQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetAccountTableListMinimalQuery = {
  account: {
    list?: {
      totalCount: number;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
      edges?: Array<{
        node?: {
          id: string;
          objState: ObjState;
          createdAt: string;
          accountName?: string | null;
          balance?: string | null;
          accountOpenedDate?: Record<'local' | 'en' | 'np', string> | null;
          accountExpiryDate?: Record<'local' | 'en' | 'np', string> | null;
          closedAt?: string | null;
          installmentAmount?: string | null;
          member?: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            code: string;
            profilePicUrl?: string | null;
          } | null;
          product: {
            id: string;
            productCode: string;
            productName: string;
            nature: NatureOfDepositProduct;
            interest?: number | null;
            isMandatorySaving?: boolean | null;
          };
        } | null;
      }> | null;
    } | null;
  };
};

export type GetAccountDocumentsListQueryVariables = Exact<{
  subscriptionId: Scalars['String'];
}>;

export type GetAccountDocumentsListQuery = {
  document: {
    listSubscriptionDocuments: {
      data?: Array<{
        fieldId?: string | null;
        docData: Array<{ identifier: string; url: string } | null>;
      } | null> | null;
    };
  };
};

export type GetAccountOpenProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetAccountOpenProductCriteriaQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductCriteria?: {
          data?: {
            gender?: Array<string | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            ethnicity?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            maritalStatus?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            occupation?: Array<string | null> | null;
            institutionType?: Array<string | null> | null;
            cooperativeUnion?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenProductPenaltyQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetAccountOpenProductPenaltyQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getPenaltyRebateInfo?: {
          data?: {
            penalty?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebate?: {
              dayBeforeInstallmentDate?: number | null;
              rebateRate?: number | null;
              rebateAmount?: any | null;
              rebateLedgerMapping?: string | null;
              noOfInstallment?: number | null;
            } | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenMinorListQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetAccountOpenMinorListQuery = {
  account: {
    listMinors?: {
      data?: Array<{
        id?: string | null;
        fullName?: string | null;
        familyMemberId?: string | null;
      } | null> | null;
    } | null;
  };
};

export type GetInstallmentsListDataQueryVariables = Exact<{
  id: Scalars['ID'];
  from?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
  fromN?: InputMaybe<Scalars['Int']>;
  toN?: InputMaybe<Scalars['Int']>;
}>;

export type GetInstallmentsListDataQuery = {
  account: {
    getInstallments?: {
      data?: Array<{
        number: number;
        dueDate: Record<'local' | 'en' | 'np', string>;
        status: InstallmentState;
        monthName: Record<'local' | 'en' | 'np', string>;
        fine?: string | null;
        rebate?: string | null;
      } | null> | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetBulkInstallmentsDataQueryVariables = Exact<{
  ids: Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>;
}>;

export type GetBulkInstallmentsDataQuery = {
  account: {
    getBulkInstallments?: Array<{
      accountId?: string | null;
      value?: {
        data?: Array<{
          dueDate: Record<'local' | 'en' | 'np', string>;
          status: InstallmentState;
          monthName: Record<'local' | 'en' | 'np', string>;
          fine?: string | null;
          rebate?: string | null;
        } | null> | null;
      } | null;
    } | null> | null;
  };
};

export type GetDefaultAccountListQueryVariables = Exact<{
  productId: Scalars['ID'];
  memberId: Scalars['ID'];
}>;

export type GetDefaultAccountListQuery = {
  account: {
    listDefaultAccounts?: {
      data?: Array<{ id: string; accountName?: string | null; productId: string } | null> | null;
    } | null;
  };
};

export type GetAccountDetailsDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountDetailsDataQuery = {
  account: {
    accountDetails?: {
      data?: {
        accountId?: string | null;
        objState?: ObjState | null;
        nomineeAccountNumber?: string | null;
        nomineeAccountName?: string | null;
        productId?: string | null;
        installmentAmount?: string | null;
        accountName?: string | null;
        availableBalance?: string | null;
        accountTenure?: string | null;
        productName?: string | null;
        accountOpenDate?: Record<'local' | 'en' | 'np', string> | null;
        accountType?: NatureOfDepositProduct | null;
        defaultAccountType?: DefaultAccountType | null;
        accountBalance?: string | null;
        totalDepositBalance?: string | null;
        interestAccrued?: string | null;
        interestEarned?: string | null;
        guaranteedAmount?: string | null;
        accountBranch?: string | null;
        alternativeChannel?: boolean | null;
        allowLoan?: boolean | null;
        withdrawRestricted?: boolean | null;
        supportMultiple?: boolean | null;
        staffProduct?: boolean | null;
        atmFacility?: boolean | null;
        chequeIssue?: boolean | null;
        allowPartialInstallment?: boolean | null;
        monthlyInterestCompulsory?: boolean | null;
        isForMinors?: boolean | null;
        autoOpen?: boolean | null;
        isMandatory?: boolean | null;
        interestRate?: number | null;
        prematurePenalty?: string | null;
        interestTax?: string | null;
        overDrawnBalance?: string | null;
        lastTransactionDate?: Record<'local' | 'en' | 'np', string> | null;
        accountExpiryDate?: Record<'local' | 'en' | 'np', string> | null;
        closedAt?: string | null;
        lastInstallmentUpdatedDate?: Record<'local' | 'en' | 'np', string> | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          profilePicUrl?: string | null;
          profilePic?: string | null;
          signaturePicUrl?: string | null;
          contact?: string | null;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null;
        product?: {
          id: string;
          productCode: string;
          productName: string;
          nature: NatureOfDepositProduct;
          minimumBalance?: string | null;
          isMandatorySaving?: boolean | null;
          withdrawRestricted?: boolean | null;
          interest?: number | null;
          depositFrequency?: Frequency | null;
          accountClosingCharge?: Array<{
            serviceName?: string | null;
            ledgerName?: string | null;
            amount?: any | null;
          } | null> | null;
          withdrawPenalty?: {
            penaltyLedgerMapping?: string | null;
            penaltyAmount?: any | null;
            penaltyRate?: number | null;
          } | null;
        } | null;
        dues?: {
          fine?: string | null;
          totalDue?: string | null;
          dueInstallments?: number | null;
        } | null;
        transactionConstraints?: {
          blockId?: string | null;
          transactionType?: CoaTypeOfTransaction | null;
          effectiveSince?: Record<'local' | 'en' | 'np', string> | null;
          effectiveTill?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountTransactionListsQueryVariables = Exact<{
  filter: AccountsTransactionFilter;
  pagination: Pagination;
}>;

export type GetAccountTransactionListsQuery = {
  account: {
    listTransactions?: {
      totalCount?: number | null;
      edges?: Array<{
        node: {
          id: string;
          transactionId?: string | null;
          accountId?: string | null;
          name: string;
          date: Record<'local' | 'en' | 'np', string>;
          month: Record<'local' | 'en' | 'np', string>;
          transactionDirection: EbankingTransactionDirection;
          transactionType?: string | null;
          amount: string;
          currentBalance: string;
          debit?: string | null;
          credit?: string | null;
          balanceType?: BalanceType | null;
        };
      } | null> | null;
      pageInfo?: {
        endCursor?: string | null;
        startCursor?: string | null;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
      } | null;
      summary?: {
        totalDeposit?: string | null;
        totalWithdraw?: string | null;
        averageBalance?: string | null;
      } | null;
    } | null;
  };
};

export type GetAccountLedgersListQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type GetAccountLedgersListQuery = {
  account: {
    listAccountLedgers?: {
      data?: Array<{
        ledgerId?: string | null;
        ledgerName?: string | null;
        accountType?: string | null;
        balance?: string | null;
        balanceType?: string | null;
      } | null> | null;
    } | null;
  };
};

export type GetAllAccountsQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
  isHoldings?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetAllAccountsQuery = {
  allAccounts: {
    list?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          accountName?: string | null;
          productName?: string | null;
          accountType?: AccountTypes | null;
          accountOpenDate?: Record<'local' | 'en' | 'np', string> | null;
          ledgerId?: string | null;
          serviceCenter?: string | null;
          ledgerBalance?: string | null;
          member?: { name?: Record<'local' | 'en' | 'np', string> | null } | null;
        } | null;
      }> | null;
      pageInfo?: PaginationFragment | null;
    } | null;
  };
};

export type ListAssociatedGuaranteeAccountsQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type ListAssociatedGuaranteeAccountsQuery = {
  account: {
    listAssociatedGuaranteeAccounts?: {
      total?: string | null;
      data?: Array<{
        memberName?: string | null;
        memberId?: string | null;
        accountName?: string | null;
        loanAccountId?: string | null;
        amount?: string | null;
      } | null> | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetSavingFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetSavingFilterMappingQuery = {
  account: {
    filterMapping?: {
      productID: Array<{ label?: string | null; value?: unknown | null } | null>;
    } | null;
  };
};

export type ListAccountInterestRateListQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type ListAccountInterestRateListQuery = {
  account: {
    listAccountInterestRates: {
      data?: Array<{
        id: string;
        rate: number;
        createdAt: Record<'local' | 'en' | 'np', string>;
        effectiveDate: Record<'local' | 'en' | 'np', string>;
      } | null> | null;
    };
  };
};

export type GetAccountInterestRateDetailQueryVariables = Exact<{
  id: Scalars['ID'];
  accountId: Scalars['String'];
}>;

export type GetAccountInterestRateDetailQuery = {
  account: {
    getAccountInterestRate: {
      data?: {
        id: string;
        rate: number;
        createdAt: Record<'local' | 'en' | 'np', string>;
        effectiveDate: Record<'local' | 'en' | 'np', string>;
        note?: string | null;
        fileUploads?: Array<{ identifier: string; url: string } | null> | null;
      } | null;
    };
  };
};

export type GetAllAccountsFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllAccountsFilterMappingQuery = {
  allAccounts: {
    filterMapping?: {
      accountType: Array<OptionTypeFragment>;
      productName: Array<OptionTypeFragment>;
    } | null;
  };
};

export type GetBankAccountListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  currentBranchOnly?: InputMaybe<Scalars['Boolean']>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetBankAccountListQuery = {
  accounting: {
    bankAccounts: {
      list?: {
        totalCount: number;
        edges?: Array<{
          node?: {
            id?: string | null;
            bankId?: string | null;
            bankName?: string | null;
            displayName?: string | null;
            accountType?: AccountingBankAccountType | null;
            accountNo?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
            branchName?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          hasNextPage: boolean;
          hasPreviousPage: boolean;
          startCursor?: string | null;
          endCursor?: string | null;
        } | null;
      } | null;
    };
  };
};

export type GetBankAccountDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetBankAccountDetailsQuery = {
  accounting: {
    bankAccounts: {
      details?: {
        data?: {
          id?: string | null;
          bankId?: string | null;
          displayName?: string | null;
          accountName?: string | null;
          accountNumber?: string | null;
          accountType?: AccountingBankAccountType | null;
          description?: string | null;
        } | null;
      } | null;
    };
  };
};

export type ExternalLoanListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type ExternalLoanListQuery = {
  accounting: {
    externalLoan: {
      loan?: {
        list?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            cursor?: string | null;
            node?: {
              id?: string | null;
              loanName?: string | null;
              organizationId?: string | null;
              organizationName?: string | null;
              createdBy?: string | null;
              appliedDate?: Record<'local' | 'en' | 'np', string> | null;
              loanType?: ExternalLoanType | null;
              amount?: string | null;
            } | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type ExternalLoanPaymentListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type ExternalLoanPaymentListQuery = {
  accounting: {
    externalLoan: {
      payment?: {
        list?: {
          totalCount: number;
          edges?: Array<{
            cursor?: string | null;
            node?: {
              id?: string | null;
              loanId?: string | null;
              loanName?: string | null;
              createdBy?: string | null;
              createdDate?: Record<'local' | 'en' | 'np', string> | null;
              amount?: string | null;
            } | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type GetExternalLoanFormStateQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetExternalLoanFormStateQuery = {
  accounting: {
    externalLoan: {
      loan?: {
        formState: {
          data?: {
            loanName?: string | null;
            organizationId?: string | null;
            loanType?: ExternalLoanType | null;
            mortageType?: MortageType | null;
            loanAppliedDate?: Record<'local' | 'en' | 'np', string> | null;
            loanApprovedDate?: Record<'local' | 'en' | 'np', string> | null;
            appliedAmount?: string | null;
            sanctionedAmount?: string | null;
            disbursedAmount?: string | null;
            loanAccountNumber?: string | null;
            tenure?: number | null;
            tenureUnit?: FrequencyTenure | null;
            repaymentStartDate?: Record<'local' | 'en' | 'np', string> | null;
            maturityDate?: Record<'local' | 'en' | 'np', string> | null;
            interestRate?: number | null;
            installmentType?: LoanRepaymentScheme | null;
            installmentFrequency?: InstallmentFrequency | null;
            fixDeposit?: string | null;
            nameOfRepresentative?: string | null;
            position?: string | null;
            insurance?: boolean | null;
            insuranceCompany?: string | null;
            insurancePremiumAmount?: string | null;
            insuranceStartDate?: Record<'local' | 'en' | 'np', string> | null;
            insuranceValidUpto?: Record<'local' | 'en' | 'np', string> | null;
            bankId?: string | null;
            collateral?: Array<{
              typeOfCollateral?: string | null;
              valuationAmount?: string | null;
              details?: string | null;
            } | null> | null;
            loanCharges?: Array<{
              serviceName?: string | null;
              serviceId?: string | null;
              serviceCharge?: string | null;
            } | null> | null;
            documents?: Array<{
              fieldId?: string | null;
              docData: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null;
        };
      } | null;
    };
  };
};

export type GetInvestmentEntriesListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetInvestmentEntriesListDataQuery = {
  accounting: {
    investment: {
      listEntry: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            type?: InvestmentType | null;
            amount?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetInvestmentEntryFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInvestmentEntryFormStateDataQuery = {
  accounting: {
    investment: {
      entryFormState: {
        data?: {
          organizationID: string;
          investmentType: InvestmentType;
          investmentName: string;
          share?: {
            count: number;
            rate: string;
            purchaseAmount: string;
            certificateNo: string;
            date: Record<'local' | 'en' | 'np', string>;
            notes?: string | null;
          } | null;
          saving?: {
            type: SavingInvestmentType;
            installmentAmount: string;
            frequency: InstallmentFrequency;
            rate: number;
            openDate: Record<'local' | 'en' | 'np', string>;
            notes?: string | null;
          } | null;
          fd?: {
            type: FdInvestmentType;
            fdAmount: string;
            rate: number;
            certificateNo: string;
            startDate: Record<'local' | 'en' | 'np', string>;
            maturityDate: Record<'local' | 'en' | 'np', string>;
            nomineeBankACNo: string;
            notes?: string | null;
          } | null;
        } | null;
      };
    };
  };
};

export type GetInvestmentTransactionsListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetInvestmentTransactionsListDataQuery = {
  accounting: {
    investment: {
      listTransaction: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            type?: InvestmentType | null;
            amount?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetJournalVoucherListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetJournalVoucherListQuery = {
  accounting: {
    journalVoucher: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id?: string | null;
            transactionDate?: Record<'local' | 'en' | 'np', string> | null;
            transactionCode?: string | null;
            reference?: string | null;
            amount?: string | null;
            note?: string | null;
            branchName?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      } | null;
    };
  };
};

export type GetJournalVoucherDetailQueryVariables = Exact<{
  entryId: Scalars['ID'];
}>;

export type GetJournalVoucherDetailQuery = {
  accounting: {
    journalVoucher: {
      viewJournalVoucherDetail?: {
        data?: {
          id?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          status?: string | null;
          reference?: string | null;
          note?: string | null;
          transactionCode?: string | null;
          branchName?: string | null;
          totalDebit?: string | null;
          totalCredit?: string | null;
          creatorName?: string | null;
          glTransaction?: Array<{
            ledgerId?: string | null;
            account: string;
            serviceCentreId?: string | null;
            serviceCenter?: string | null;
            debit?: string | null;
            credit?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type GetLedgerAccountsForTransferQueryVariables = Exact<{
  input: LedgerBalanceTransferRequestInput;
}>;

export type GetLedgerAccountsForTransferQuery = {
  accounting: {
    ledgerBalanceTransfer: {
      getLedgerAccounts: {
        totalLedgerAccounts: string;
        totalTransferBalance: { amount?: string | null; amountType?: BalanceType | null };
        data?: Array<{
          ledgerId: string;
          ledgerName: string;
          transferBalance: string;
          currentBalance: { amount?: string | null; amountType?: BalanceType | null };
          newBalance: { amount?: string | null; amountType?: BalanceType | null };
        } | null> | null;
      };
    };
  };
};

export type GetAccountingOrganiztionListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<OrganizationEntryFilter>;
}>;

export type GetAccountingOrganiztionListQuery = {
  accounting: {
    organization: {
      list: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            note?: string | null;
            address?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetAccountingOrganizationFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountingOrganizationFormStateDataQuery = {
  accounting: {
    organization: {
      formState: {
        data?: {
          name: string;
          note?: string | null;
          address: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          };
        } | null;
      };
    };
  };
};

export type GetAccountingPurchaseEntryListQueryVariables = Exact<{
  filter?: InputMaybe<AccountingPurchaseFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountingPurchaseEntryListQuery = {
  accounting: {
    purchase: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id: string;
            date: Record<'local' | 'en' | 'np', string>;
            entryNo: string;
            supplierId: string;
            supplierName: string;
            totalAmount: string;
            referenceId: string;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    };
  };
};

export type GetAccountingPurchaseSalesListQueryVariables = Exact<{
  filter?: InputMaybe<AccountingPurchaseFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountingPurchaseSalesListQuery = {
  accounting: {
    purchase: {
      listExpense?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id: string;
            reference: string;
            date: Record<'local' | 'en' | 'np', string>;
            entryNo: string;
            supplierId: string;
            supplierName: string;
            totalAmount: string;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    };
  };
};

export type GetAccountingDebitNoteListQueryVariables = Exact<{
  filter?: InputMaybe<AccountingPurchaseFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountingDebitNoteListQuery = {
  accounting: {
    purchase: {
      listDebitNote?: {
        totalCount: number;
        pageInfo?: {
          endCursor?: string | null;
          startCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            totalAmount: string;
            supplierName: string;
            supplierId: string;
            date?: Record<'local' | 'en' | 'np', string> | null;
            noteNo: string;
            referenceNo: string;
          } | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetPurchaseEntryDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetPurchaseEntryDetailsQuery = {
  accounting: {
    purchase: {
      detailPurchaseEntry: {
        data?: {
          billNo: string;
          supplierName: string;
          invoiceReference: string;
          invoiceDate: Record<'local' | 'en' | 'np', string>;
          dueDate: Record<'local' | 'en' | 'np', string>;
          totalDebit?: string | null;
          totalCredit?: string | null;
          notes?: string | null;
          productDetails?: Array<{
            itemId?: string | null;
            itemName?: string | null;
            quantity?: string | null;
            rate?: string | null;
            tax?: string | null;
            taxValue?: string | null;
            amount?: string | null;
            description?: string | null;
            warehouse?: string | null;
            warehouseName?: string | null;
          } | null> | null;
          paymentDetail?: {
            subTotal?: string | null;
            nonTaxableTotal?: string | null;
            taxableTotal?: string | null;
            vat?: string | null;
            grandTotal?: string | null;
            discount?: string | null;
          } | null;
          glTransaction?: Array<{
            ledgerId?: string | null;
            account: string;
            serviceCentreId?: string | null;
            serviceCenter?: string | null;
            debit?: string | null;
            credit?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
          } | null> | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetPurchaseDebitNoteDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetPurchaseDebitNoteDetailsQuery = {
  accounting: {
    purchase: {
      detailDebitNote: {
        data?: {
          supplierName: string;
          supplierId: string;
          invoiceReference: string;
          date?: Record<'local' | 'en' | 'np', string> | null;
          notes?: string | null;
          products: Array<{
            itemId?: string | null;
            itemName?: string | null;
            quantity?: string | null;
            rate?: string | null;
            tax?: string | null;
            taxValue?: string | null;
            amount?: string | null;
            description?: string | null;
            warehouse?: string | null;
            warehouseName?: string | null;
          }>;
          paymentDetail?: {
            subTotal?: string | null;
            nonTaxableTotal?: string | null;
            taxableTotal?: string | null;
            vat?: string | null;
            grandTotal?: string | null;
            discount?: string | null;
          } | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetPurchaseExpenseDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetPurchaseExpenseDetailsQuery = {
  accounting: {
    purchase: {
      detailExpenses: {
        data?: {
          billNo: string;
          supplierName: string;
          invoiceReference: string;
          invoiceDate: Record<'local' | 'en' | 'np', string>;
          dueDate: Record<'local' | 'en' | 'np', string>;
          totalDebit?: string | null;
          totalCredit?: string | null;
          notes?: string | null;
          ledgerDetails?: Array<{
            accountId: string;
            amount?: string | null;
            tax?: string | null;
            taxAmount: string;
          } | null> | null;
          paymentDetail?: {
            subTotal?: string | null;
            nonTaxableTotal?: string | null;
            taxableTotal?: string | null;
            vat?: string | null;
            grandTotal?: string | null;
            discount?: string | null;
          } | null;
          glTransaction?: Array<{
            ledgerId?: string | null;
            account: string;
            serviceCentreId?: string | null;
            serviceCenter?: string | null;
            debit?: string | null;
            credit?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
          } | null> | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetSalesCustomerListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<SalesCustomerFilter>;
}>;

export type GetSalesCustomerListDataQuery = {
  accounting: {
    sales: {
      listCustomer: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            name?: string | null;
            phoneNumber?: string | null;
            email?: string | null;
            address?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
            } | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetSalesCustomerFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSalesCustomerFormStateDataQuery = {
  accounting: {
    sales: {
      customerFormState: {
        data?: {
          name: string;
          code: string;
          phoneNumber: string;
          pan: string;
          email?: string | null;
          creditTerms?: string | null;
          creditLimit?: string | null;
          openingBalance?: string | null;
          address: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          };
        } | null;
      };
    };
  };
};

export type GetSalesSaleEntryListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<SalesSaleEntryFilter>;
}>;

export type GetSalesSaleEntryListDataQuery = {
  accounting: {
    sales: {
      listSaleEntry: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            customerName: string;
            totalAmount: string;
            date: Record<'local' | 'en' | 'np', string>;
            invoiceNo: string;
            itemDetails?: Array<{
              itemId?: string | null;
              quantity?: string | null;
              rate?: string | null;
              tax?: string | null;
              amount?: string | null;
              description?: string | null;
              warehouse?: string | null;
            } | null> | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetSalesCreditNoteListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<SalesCreditNoteFilter>;
}>;

export type GetSalesCreditNoteListDataQuery = {
  accounting: {
    sales: {
      listCreditNote: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            customerName: string;
            amount: string;
            date: Record<'local' | 'en' | 'np', string>;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetSalesCustomerPaymentListDataQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<SalesCustomerPaymentFilter>;
}>;

export type GetSalesCustomerPaymentListDataQuery = {
  accounting: {
    sales: {
      listCustomerPayment: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            receivedFrom?: string | null;
            totalAmount?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            paymentMode?: CustomerPayment | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      };
    };
  };
};

export type GetSalesCustomerPaymentFormStateDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSalesCustomerPaymentFormStateDataQuery = {
  accounting: {
    sales: {
      customerPaymentFormState: {
        data?: {
          receivedFrom: string;
          receivedAccount: string;
          receivedAmount: string;
          receivedDate: Record<'local' | 'en' | 'np', string>;
          paymentMethod: CustomerPayment;
          paymentReferenceNo?: string | null;
          tds: boolean;
          tdsAccount?: string | null;
          tdsType?: string | null;
          tdsAmount?: string | null;
          notes?: string | null;
          paymentAllocation: Array<{
            type: string;
            date: Record<'local' | 'en' | 'np', string>;
            amount: string;
            leftToAllocate: string;
            thisAllocation: string;
          }>;
        } | null;
      };
    };
  };
};

export type GetSalesEntryDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSalesEntryDetailsQuery = {
  accounting: {
    sales: {
      detailSaleEntry: {
        data?: {
          customerID: string;
          reference: string;
          invoiceNo?: string | null;
          customerName?: string | null;
          invoiceDate: Record<'local' | 'en' | 'np', string>;
          dueDate: Record<'local' | 'en' | 'np', string>;
          totalDebit?: string | null;
          totalCredit?: string | null;
          notes?: string | null;
          products: Array<{
            itemId?: string | null;
            itemName?: string | null;
            quantity?: string | null;
            rate?: string | null;
            tax?: string | null;
            taxValue?: string | null;
            amount?: string | null;
            description?: string | null;
            warehouse?: string | null;
            warehouseName?: string | null;
          }>;
          paymentDetail?: {
            subTotal?: string | null;
            nonTaxableTotal?: string | null;
            taxableTotal?: string | null;
            vat?: string | null;
            grandTotal?: string | null;
            discount?: string | null;
          } | null;
          glTransaction?: Array<{
            ledgerId?: string | null;
            account: string;
            serviceCentreId?: string | null;
            serviceCenter?: string | null;
            debit?: string | null;
            credit?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
          } | null> | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetCreditNoteDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetCreditNoteDetailsQuery = {
  accounting: {
    sales: {
      detailCreditNote: {
        data?: {
          customerID: string;
          customerName?: string | null;
          invoiceReference: string;
          date: Record<'local' | 'en' | 'np', string>;
          notes?: string | null;
          products: Array<{
            itemId?: string | null;
            itemName?: string | null;
            quantity?: string | null;
            rate?: string | null;
            tax?: string | null;
            taxValue?: string | null;
            amount?: string | null;
            description?: string | null;
            warehouse?: string | null;
            warehouseName?: string | null;
          }>;
          paymentDetail?: {
            subTotal?: string | null;
            nonTaxableTotal?: string | null;
            taxableTotal?: string | null;
            vat?: string | null;
            grandTotal?: string | null;
            discount?: string | null;
          } | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetCustomerDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetCustomerDetailsQuery = {
  accounting: {
    sales: {
      detailCustomer: {
        data?: {
          id: string;
          name?: string | null;
          code?: string | null;
          phoneNumber?: string | null;
          panNo?: string | null;
          email?: string | null;
          creditTerms?: string | null;
          creditLimit?: string | null;
          openingBalance?: string | null;
          address?: AddressFragment | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type AllAdministrationQueryVariables = Exact<{ [key: string]: never }>;

export type AllAdministrationQuery = {
  administration: {
    all: Array<{
      id: number;
      name: string;
      districts: Array<{
        id: number;
        name: string;
        municipalities: Array<{ id: number; name: string; wards: Array<number> }>;
      }>;
    }>;
  };
};

export type GetAllProvinceQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllProvinceQuery = {
  administration: { provinces: Array<{ id: number; name: string }> };
};

export type GetAllDistrictsQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllDistrictsQuery = {
  administration: { districts: Array<{ id: number; name: string }> };
};

export type GetAllLocalGovernmentQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllLocalGovernmentQuery = {
  administration: { municipalities: Array<{ id: number; name: string }> };
};

export type GetAgentListDataQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  currentBranchOnly?: InputMaybe<Scalars['Boolean']>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAgentListDataQuery = {
  agent: {
    listAgent: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          agentName?: string | null;
          phoneNo?: string | null;
          assignedMember?: number | null;
          profilePicUrl?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAgentDetailDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAgentDetailDataQuery = {
  agent: {
    agentDetail?: {
      data?: {
        id?: string | null;
        name?: string | null;
        branch?: string | null;
        totalMembers?: number | null;
        profilePicUrl?: string | null;
      } | null;
    } | null;
  };
};

export type GetAgentAssignedMemberListDataQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAgentAssignedMemberListDataQuery = {
  agent: {
    assignedMemberList: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          assignedDate?: Record<'local' | 'en' | 'np', string> | null;
          member?: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            code: string;
          } | null;
          account?: {
            id: string;
            accountName?: string | null;
            installmentAmount?: string | null;
            dues?: { totalDue?: string | null; fine?: string | null } | null;
          } | null;
          product?: { productName: string } | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAgentTodayListDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAgentTodayListDataQuery = {
  agent: {
    listAgentTask?: {
      record?: Array<{
        id?: string | null;
        amount?: any | null;
        fine?: string | null;
        amountToBeCollected?: string | null;
        fineToBeCollected?: string | null;
        paid?: boolean | null;
        status?: TodayListStatus | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        account?: { id: string; installmentAmount?: string | null } | null;
      } | null> | null;
    } | null;
  };
};

export type AgentTransactionDetailQueryVariables = Exact<{
  agentId: Scalars['ID'];
  date: Scalars['String'];
}>;

export type AgentTransactionDetailQuery = {
  agent: {
    viewAgentList?: {
      data?: {
        transactionId: string;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        status: string;
        totalAmount?: string | null;
        assignedMember?: Array<{
          transactionId?: string | null;
          member?: string | null;
          account?: string | null;
          amount?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAgentDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAgentDetailQuery = {
  agent: {
    agentDetail?: {
      data?: {
        id?: string | null;
        name?: string | null;
        branch?: string | null;
        totalMembers?: number | null;
        profilePicUrl?: string | null;
      } | null;
    } | null;
  };
};

export type ListAgentCollectionQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type ListAgentCollectionQuery = {
  agent: {
    listAgentCollection?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          mrId: string;
          mrName: string;
          date: Record<'local' | 'en' | 'np', string>;
          amount: string;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type ListAgentTemplateQueryVariables = Exact<{
  agentId: Scalars['ID'];
}>;

export type ListAgentTemplateQuery = {
  agent: {
    listAgentTemplate?: {
      record?: Array<{
        amount?: string | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        account?: { id: string; installmentAmount?: string | null } | null;
      } | null> | null;
    } | null;
  };
};

export type GetMeQueryVariables = Exact<{ [key: string]: never }>;

export type GetMeQuery = {
  auth: {
    me: {
      data?: {
        branches?: Array<{ id: string; name: string } | null> | null;
        rolesList?: Array<{ id: string; name: string } | null> | null;
        permission?: { myPermission?: Record<string, string> | null } | null;
        preference?: {
          language?: Language | null;
          languageCode?: string | null;
          date?: DateType | null;
        } | null;
        user?: UserFragment | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | null;
    };
  };
};

export type UserFragment = {
  id: string;
  username: string;
  email?: string | null;
  firstName: Record<'local' | 'en' | 'np', string>;
  lastName: Record<'local' | 'en' | 'np', string>;
  profilePic?: string | null;
  userLedger?: string | null;
  userBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
  currentRole?: { id: string; name: string } | null;
  currentBranch?: {
    id: string;
    name?: string | null;
    category?: BranchCategory | null;
    branchCode?: string | null;
    branchStatus?: boolean | null;
    branchBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
  } | null;
  organization?: {
    id: string;
    basicDetails?: { name?: string | null; logo?: string | null } | null;
    contactDetails?: {
      website?: string | null;
      phoneNumber?: string | null;
      email?: string | null;
    } | null;
    address?: {
      district?: Record<'local' | 'en' | 'np', string> | null;
      wardNo?: string | null;
      state?: Record<'local' | 'en' | 'np', string> | null;
      locality?: Record<'local' | 'en' | 'np', string> | null;
      localGovernment?: Record<'local' | 'en' | 'np', string> | null;
      houseNo?: string | null;
    } | null;
    registrationDetails?: { regdNo?: string | null; panOrVat?: string | null } | null;
  } | null;
};

export type GetUserAndBranchBalanceQueryVariables = Exact<{ [key: string]: never }>;

export type GetUserAndBranchBalanceQuery = {
  auth: {
    me: {
      data?: {
        user?: {
          userBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
          currentBranch?: {
            branchBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
          } | null;
        } | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | null;
    };
  };
};

export type GetBankListQueryVariables = Exact<{ [key: string]: never }>;

export type GetBankListQuery = {
  bank: { bank?: { list?: Array<{ id: string; name?: string | null } | null> | null } | null };
};

export type GetUserBranchListQueryVariables = Exact<{ [key: string]: never }>;

export type GetUserBranchListQuery = {
  bank: { branch?: { list?: Array<{ id: string; name?: string | null } | null> | null } | null };
};

type MutationError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type MutationError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type MutationError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type MutationError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

type MutationError_ValidationError_Fragment = {
  __typename: 'ValidationError';
  code: number;
  validationErrorMsg: Record<string, Array<string>>;
};

export type MutationErrorFragment =
  | MutationError_AuthorizationError_Fragment
  | MutationError_BadRequestError_Fragment
  | MutationError_NotFoundError_Fragment
  | MutationError_ServerError_Fragment
  | MutationError_ValidationError_Fragment;

type QueryError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type QueryError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type QueryError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type QueryError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

export type QueryErrorFragment =
  | QueryError_AuthorizationError_Fragment
  | QueryError_BadRequestError_Fragment
  | QueryError_NotFoundError_Fragment
  | QueryError_ServerError_Fragment;

export type PaginationFragment = {
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
};

export type AddressFragment = {
  houseNo?: string | null;
  district?: Record<'local' | 'en' | 'np', string> | null;
  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
  locality?: Record<'local' | 'en' | 'np', string> | null;
  state?: Record<'local' | 'en' | 'np', string> | null;
  wardNo?: string | null;
  coordinates?: { latitude?: number | null; longitude?: number | null } | null;
};

export type GetConfigQueryVariables = Exact<{ [key: string]: never }>;

export type GetConfigQuery = {
  config: { countries?: Array<{ name?: string | null; code?: string | null } | null> | null };
};

export type GetCooperativeUnionKymEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCooperativeUnionKymEditDataQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        data?: {
          nameOfInstitutionEn?: string | null;
          nameOfInstitutionNp?: string | null;
          institutionType?: string | null;
          natureOfBusinessEn?: string | null;
          natureOfBusinessNp?: string | null;
          regdDate?: Record<'local' | 'en' | 'np', string> | null;
          vatOrPan?: string | null;
          noOfBranches?: number | null;
          regdNo?: string | null;
          issuingOffice?: string | null;
          phone?: string | null;
          fax?: string | null;
          contactEmail?: string | null;
          website?: string | null;
          postBoxNo?: string | null;
          noOfEmployee?: number | null;
          lastAgmDate?: Record<'local' | 'en' | 'np', string> | null;
          nameOfBank?: string | null;
          accountNumber?: string | null;
          accountName?: string | null;
          applicantName?: string | null;
          applicantNameNp?: string | null;
          applicantDesignationEn?: string | null;
          applicantDesignationNp?: string | null;
          applicantEmail?: string | null;
          applicantContactNo?: string | null;
          applicantPanNo?: string | null;
          applicantDateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
          applicantHighestQualification?: string | null;
          applicantIsPermanentAndTemporaryAddrSame?: boolean | null;
          noOfMaleMemberCurrent?: number | null;
          noOfMaleMemberTarget?: number | null;
          noOfFemaleMemberCurrent?: number | null;
          noOfFemaleMemberTarget?: number | null;
          noOfInstitutionalMemberCurrent?: number | null;
          noOfInstitutionalMemberTarget?: number | null;
          cashAndCashEquivalentCurrent?: number | null;
          cashAndCashEquivalentTarget?: number | null;
          bankCurrent?: number | null;
          bankTarget?: number | null;
          investmentsCurrent?: number | null;
          investmentsTarget?: number | null;
          loanCurrent?: number | null;
          loanTarget?: number | null;
          nonCurrentAssetsCurrent?: number | null;
          nonCurrentAssetsTarget?: number | null;
          otherNonCurrentAssetsCurrent?: number | null;
          otherNonCurrentAssetsTarget?: number | null;
          shareCapitalCurrent?: number | null;
          shareCapitalTarget?: number | null;
          reserveAndSurplusCurrent?: number | null;
          reserveAndSurplusTarget?: number | null;
          savingDepositCurrent?: number | null;
          savingDepositTarget?: number | null;
          loanAccountCurrent?: number | null;
          loanAccountTarget?: number | null;
          capitalGrantCurrent?: number | null;
          capitalGrantTarget?: number | null;
          currentLiabilitiesCurrent?: number | null;
          currentLiabilitiesTarget?: number | null;
          nonCurrentLiabilitiesCurrent?: number | null;
          nonCurrentLiabilitiesTarget?: number | null;
          incomeFromFinancialInvestment?: number | null;
          incomeFromNonFinancialInvestment?: number | null;
          incomeFromInvestment?: number | null;
          incomeFromServiceOperation?: number | null;
          incomeFromSales?: number | null;
          otherIncome?: number | null;
          miscellaneousIncome?: number | null;
          purchase?: number | null;
          directExpense?: number | null;
          administrativeExpense?: number | null;
          financialCost?: number | null;
          riskManagementCost?: number | null;
          deferredTaxExpense?: number | null;
          regdAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          operatingOfficeAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          branchOfficeAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          applicantPermanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          applicantTemporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          directors?: Array<{
            id?: string | null;
            fullName?: string | null;
            fullNameNp?: string | null;
            designationEn?: string | null;
            designationNp?: string | null;
            isPermanentAndTemporaryAddressSame?: boolean | null;
            dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
            highestQualification?: string | null;
            mobileNumber?: string | null;
            email?: string | null;
            citizenshipNo?: string | null;
            panNo?: string | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            trainingAttended?: Array<{
              subjectOfTraining?: string | null;
              dateOfTraining?: Record<'local' | 'en' | 'np', string> | null;
              trainingOrganization?: string | null;
            } | null> | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null> | null;
          accountOperators?: Array<{
            id?: string | null;
            fullName?: string | null;
            fullNameNp?: string | null;
            designationEn?: string | null;
            designationNp?: string | null;
            isPermanentAndTemporaryAddressSame?: boolean | null;
            dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
            highestQualification?: string | null;
            mobileNumber?: string | null;
            email?: string | null;
            citizenshipNo?: string | null;
            panNo?: string | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            trainingAttended?: Array<{
              subjectOfTraining?: string | null;
              dateOfTraining?: Record<'local' | 'en' | 'np', string> | null;
              trainingOrganization?: string | null;
            } | null> | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null> | null;
          centralRepresentative?: {
            id?: string | null;
            fullName?: string | null;
            fullNameNp?: string | null;
            designationEn?: string | null;
            designationNp?: string | null;
            isPermanentAndTemporaryAddressSame?: boolean | null;
            dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
            highestQualification?: string | null;
            mobileNumber?: string | null;
            email?: string | null;
            citizenshipNo?: string | null;
            panNo?: string | null;
            centralRepID?: string | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            trainingAttended?: Array<{
              subjectOfTraining?: string | null;
              dateOfTraining?: Record<'local' | 'en' | 'np', string> | null;
              trainingOrganization?: string | null;
            } | null> | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null;
          documents?: Array<{
            fieldId?: string | null;
            identifiers: Array<{ identifier: string; url: string } | null>;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDashboardDayInfoQueryVariables = Exact<{ [key: string]: never }>;

export type GetDashboardDayInfoQuery = {
  dashboard: {
    myDayInfo?: {
      data?: {
        deposit?: {
          todayValue?: string | null;
          percent?: string | null;
          noOfTransaction?: number | null;
        } | null;
        withdraw?: {
          todayValue?: string | null;
          percent?: string | null;
          noOfTransaction?: number | null;
        } | null;
        cashInHand?: {
          todayValue?: string | null;
          percent?: string | null;
          fromVault?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDashboardInfoQueryVariables = Exact<{ [key: string]: never }>;

export type GetDashboardInfoQuery = {
  dashboard: {
    dashboardInfo?: {
      data?: {
        pendingRequest?: {
          memberRequestCount?: number | null;
          withdrawSlipCount?: number | null;
          loanApplicationRequest?: number | null;
          loanDisbursementRequest?: number | null;
        } | null;
        branchInfo?: {
          membersToApprove?: number | null;
          totalMembers?: number | null;
          percentofMemberRequest?: string | null;
          totalAccounts?: number | null;
          percentOfAccounts?: string | null;
        } | null;
        coopInfo?: {
          totalMembers?: number | null;
          totalShareIssued?: number | null;
          totalBranch?: number | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreviousYearFundManagementQueryVariables = Exact<{ [key: string]: never }>;

export type GetPreviousYearFundManagementQuery = {
  profitToFundManagement: {
    previousYear?: Array<{
      accountCode?: string | null;
      amount?: string | null;
      percent?: number | null;
    } | null> | null;
  };
};

export type GetEmployeeListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetEmployeeListQuery = {
  hr: {
    employee: {
      employee: {
        listEmployee: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: string | null;
              employeeName?: string | null;
              employeeDepartment?: string | null;
              employeeContact?: string | null;
              employeeEmail?: string | null;
              employeeDateOfJoining?: Record<'local' | 'en' | 'np', string> | null;
              employeeAddress?: AddressFragment | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetLeaveListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetLeaveListQuery = {
  hr: {
    employee: {
      leave: {
        listLeave: {
          totalCount: number;
          edges?: Array<{
            cursor?: string | null;
            node?: {
              id: string;
              employeeId: string;
              employeeName: string;
              reason: string;
              leaveType: string;
              leaveFrom: Record<'local' | 'en' | 'np', string>;
              leaveTo: Record<'local' | 'en' | 'np', string>;
              approver?: string | null;
              status?: string | null;
            } | null;
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetSingleEmployeeDetailsQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetSingleEmployeeDetailsQuery = {
  hr: {
    employee: {
      employee: {
        getEmployee: {
          record?: {
            id?: string | null;
            firstName?: string | null;
            middleName?: string | null;
            lastName?: string | null;
            dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
            age?: number | null;
            gender?: GenderType | null;
            maritalStatus?: MaritalStatusType | null;
            workPhoneNumber?: string | null;
            workEmailAddress?: string | null;
            personalPhoneNumber?: string | null;
            personalEmailAddress?: string | null;
            isTemporarySameAsPermanent?: boolean | null;
            employeeLevelId?: string | null;
            departmentId?: string | null;
            designationId?: string | null;
            serviceCenter?: string | null;
            employmentType?: EmployeeTypeEnum | null;
            employeeStatus?: EmployeeStatus | null;
            sourceOfHire?: SourceOfHire | null;
            salaryPaymentMode?: PaymentMode | null;
            panNumber?: string | null;
            providentFundAccount?: string | null;
            salaryStructureAssignment?: string | null;
            jobApplicationId?: string | null;
            jobOffer?: string | null;
            appointmentLetter?: string | null;
            dateOfJoining?: Record<'local' | 'en' | 'np', string> | null;
            reportsToId?: string | null;
            leaveApproverId?: string | null;
            expenseApproverId?: string | null;
            healthInsuranceProviderId?: string | null;
            healthInsuranceNumberId?: string | null;
            educationDetails?: Array<{
              instituteName?: string | null;
              degree_diploma?: string | null;
              specialization?: string | null;
              dateOfCompletion?: Record<'local' | 'en' | 'np', string> | null;
            } | null> | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            workExperience?: Array<{
              companyName?: string | null;
              designation?: string | null;
              salary?: number | null;
              address?: string | null;
            } | null> | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null;
        };
      };
    };
  };
};

export type GetHrEmployeeOnboardingListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetHrEmployeeOnboardingListQuery = {
  hr: {
    employeelifecycle: {
      employeeOnboarding: {
        listEmployeeOnboarding: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              activity?: string | null;
              email?: string | null;
              id: string;
              name?: string | null;
              onboarding_status?: OnboardingStatus | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetHrOnboardingFormStateQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetHrOnboardingFormStateQuery = {
  hr: {
    employeelifecycle: {
      employeeOnboarding: {
        getEmployeeOnboarding: {
          data: {
            applicantId?: string | null;
            serviceCenter?: string | null;
            dateOfJoining?: Record<'local' | 'en' | 'np', string> | null;
            designation?: string | null;
            onboarding_status?: OnboardingStatus | null;
            activity_details?: Array<{
              isDone?: boolean | null;
              name?: string | null;
              userName?: string | null;
              role?: string | null;
              beginsOn?: Record<'local' | 'en' | 'np', string> | null;
              duration?: string | null;
            } | null> | null;
          };
        };
      };
    };
  };
};

export type GetHrEmployeeTransferHistoryQueryVariables = Exact<{
  employeeId: Scalars['ID'];
}>;

export type GetHrEmployeeTransferHistoryQuery = {
  hr: {
    employeelifecycle: {
      employeeTransfer: {
        queryEmployeeTransfer?: {
          branchArray?: Array<{
            transferredFrom?: string | null;
            transferredTo?: string | null;
            transferDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
          departArray?: Array<{
            transferredFrom?: string | null;
            transferredTo?: string | null;
            transferredDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      };
    };
  };
};

export type GetHrTransferListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetHrTransferListQuery = {
  hr: {
    employeelifecycle: {
      employeeTransfer: {
        listEmployeeTransfer: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              employeeId?: string | null;
              id?: string | null;
              name?: string | null;
              transferDate?: Record<'local' | 'en' | 'np', string> | null;
              transferType?: EmployeeTransferType | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetHrSeperationListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetHrSeperationListQuery = {
  hr: {
    employeelifecycle: {
      employeeSeparation: {
        listEmployeeSeparation: {
          totalCount: number;
          edges?: Array<{
            cursor?: string | null;
            node?: {
              employeeId: string;
              id: string;
              designation: string;
              employeeName: string;
              resignationLetterDate: Record<'local' | 'en' | 'np', string>;
            } | null;
          } | null> | null;
          PageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetHrPromotionListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetHrPromotionListQuery = {
  hr: {
    employeelifecycle: {
      employeePromotion: {
        listEmployeePromotion: {
          totalCount: number;
          edges?: Array<{
            cursor?: string | null;
            node?: {
              employeeId: string;
              id: string;
              newPromotion: string;
              promotionDate: Record<'local' | 'en' | 'np', string>;
              promotionType: string;
              employeeName: string;
            } | null;
          } | null> | null;
          PageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetHrExitListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetHrExitListQuery = {
  hr: {
    employeelifecycle: {
      employeeExit: {
        listEmployeeExit: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              employeeId?: string | null;
              id?: string | null;
              interviewer?: string | null;
              lastModifiedDate?: Record<'local' | 'en' | 'np', string> | null;
              separationDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetHrExistFormStateQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetHrExistFormStateQuery = {
  hr: {
    employeelifecycle: {
      employeeExit: {
        getEmployeeExit: {
          data: {
            exitDate?: Record<'local' | 'en' | 'np', string> | null;
            exitStatus?: ExitStatus | null;
            futureIntentions?: string | null;
            interviewer?: string | null;
            others?: string | null;
            overallExp?: string | null;
            separationId?: string | null;
            suggestions?: string | null;
            checklists?: Array<{
              activityName?: string | null;
              beginsOn?: Record<'local' | 'en' | 'np', string> | null;
              done?: boolean | null;
              duration?: string | null;
              role?: string | null;
              user?: string | null;
            } | null> | null;
          };
        };
      };
    };
  };
};

export type GetHrLifecycleEmployeeViewQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetHrLifecycleEmployeeViewQuery = {
  hr: {
    employee: {
      employee: {
        getEmployeeLifecycleView: {
          data?: {
            age?: number | null;
            status?: string | null;
            branch?: string | null;
            companyName?: string | null;
            contactNumber?: string | null;
            department?: string | null;
            email?: string | null;
            gender?: string | null;
            id?: string | null;
            joiningDate?: Record<'local' | 'en' | 'np', string> | null;
            name?: string | null;
          } | null;
        };
      };
    };
  };
};

export type GetStaffPlanningListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetStaffPlanningListQuery = {
  hr: {
    recruitment: {
      recruitment: {
        listStaffPlanning: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id: string;
              staffPlanTitle: string;
              vacancies: number;
              open_position: number;
              date: {
                from: Record<'local' | 'en' | 'np', string>;
                to: Record<'local' | 'en' | 'np', string>;
              };
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetJobOpeningListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetJobOpeningListQuery = {
  hr: {
    recruitment: {
      recruitmentJobOpening: {
        listJobOpening: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id: string;
              title: string;
              status: IsOpenClosed;
              staffPlan: string;
              designation: string;
              department: string;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetJobOfferListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetJobOfferListQuery = {
  hr: {
    recruitment: {
      recruitmentJobOffer: {
        listJobOffer: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id: string;
              name: string;
              status: JobStatus;
              offerDate: Record<'local' | 'en' | 'np', string>;
              email: string;
              designation: string;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetAppointmentLetterListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAppointmentLetterListQuery = {
  hr: {
    recruitment: {
      recruitmentAppointmentLetter: {
        listAppointmentLetter: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id: string;
              name: string;
              probationPeriod: string;
              offerDate: Record<'local' | 'en' | 'np', string>;
              email: string;
              designation: string;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetJobApplicationListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetJobApplicationListQuery = {
  hr: {
    recruitment: {
      recruitmentJobApplication: {
        listJobApplication: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: string | null;
              name?: string | null;
              jobPosting?: string | null;
              applicantStatus?: ApplicantStatus | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        };
      };
    };
  };
};

export type GetStaffPlanQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetStaffPlanQuery = {
  hr: {
    recruitment: {
      recruitment: {
        getStaffPlan: {
          data?: {
            id: string;
            branchId?: string | null;
            title: string;
            note?: string | null;
            total_vacancies: number;
            total_cost_estimation: string;
            date: {
              from: Record<'local' | 'en' | 'np', string>;
              to: Record<'local' | 'en' | 'np', string>;
            };
            staffPlans?: Array<{
              designation: string;
              vacancies: number;
              estimated_cost_per_employee: string;
              estimated_cost: string;
            }> | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      };
    };
  };
};

export type GetJobOpeningQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetJobOpeningQuery = {
  hr: {
    recruitment: {
      recruitmentJobOpening: {
        getJobOpening: {
          data?: {
            id: string;
            branchId?: string | null;
            title: string;
            staffPlan: string;
            department: string;
            designation: string;
            experienceLevel: Level;
            description: string;
            salaryRange: { min: string; max: string; default: string };
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      };
    };
  };
};

export type GetJobOfferQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetJobOfferQuery = {
  hr: {
    recruitment: {
      recruitmentJobOffer: {
        getJobOffer: {
          data?: {
            id: string;
            jobApplicant: string;
            jobStatus: JobStatus;
            jobDesignation: string;
            jobDepartment: string;
            jobOfferDate: Record<'local' | 'en' | 'np', string>;
            jobOfferTerms: Array<{ offerTerm: string; value: string }>;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      };
    };
  };
};

export type GetJobApplicationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetJobApplicationQuery = {
  hr: {
    recruitment: {
      recruitmentJobApplication: {
        getJobApplication: {
          data?: {
            id: string;
            applicantName?: string | null;
            jobOpening?: string | null;
            personalEmailAddress?: string | null;
            personalPhoneNumber?: string | null;
            tempSameAsPerm?: boolean | null;
            applicationStatus?: ApplicantStatus | null;
            applicationRating?: number | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            educationalDetails?: Array<{
              instituteName?: string | null;
              degree_diploma?: string | null;
              specialization?: string | null;
              dateOfCompletion?: Record<'local' | 'en' | 'np', string> | null;
            } | null> | null;
            experienceDetails?: Array<{
              occupationName?: string | null;
              company?: string | null;
              fromDate?: Record<'local' | 'en' | 'np', string> | null;
              toDate?: Record<'local' | 'en' | 'np', string> | null;
              duration?: string | null;
              summary?: string | null;
            } | null> | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      };
    };
  };
};

export type GetAppointmentLetterQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAppointmentLetterQuery = {
  hr: {
    recruitment: {
      recruitmentAppointmentLetter: {
        getAppointmentLetter: {
          data?: {
            appointmentLetterID: string;
            jobApplication: string;
            appointmentDate: Record<'local' | 'en' | 'np', string>;
            body: string;
            appointmentTerms: Array<{ title: string; description: string }>;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      };
    };
  };
};

export type GetKymOverallFormStatusQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetKymOverallFormStatusQuery = {
  members: {
    institution?: {
      overallFormStatus?: {
        accountOperatorDetails?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
        directorDetails?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
        institutionDetails?: {
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null;
        sisterConcernDetails?: Array<{
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetInstitutionKymEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetInstitutionKymEditDataQuery = {
  members: {
    institution?: {
      formState?: {
        data?: {
          institutionName?: string | null;
          institutionTypeId?: string | null;
          natureOfBusiness?: string | null;
          registrationDate?: Record<'local' | 'en' | 'np', string> | null;
          vatOrPanNo?: string | null;
          noOfBranches?: number | null;
          registeredNumber?: string | null;
          issuingOffice?: string | null;
          phone?: string | null;
          fax?: string | null;
          email?: string | null;
          website?: string | null;
          postBoxNo?: string | null;
          numberOfEmployee?: number | null;
          dateOfLastAGM?: Record<'local' | 'en' | 'np', string> | null;
          bank?: string | null;
          accountNumber?: string | null;
          accountName?: string | null;
          natureOfTransaction?: string | null;
          annualTurnover?: number | null;
          initialDepositAmount?: number | null;
          expectedMonthlyTurnover?: string | null;
          expectedMonthlyTransaction?: string | null;
          accountType?: AccountOperationType | null;
          isCompanyStampCompulsory?: boolean | null;
          specialInstruction?: string | null;
          companyStamp?: string | null;
          accountHolderName?: string | null;
          accountHolderPhone?: string | null;
          accountHolderEmail?: string | null;
          accountHolderSignature?: string | null;
          accountHolderStamp?: string | null;
          operatingOfficeAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          branchOfficeAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          registeredAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          accountHolderAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          sisterConcern?: Array<{
            id?: string | null;
            name?: string | null;
            natureOfBusiness?: string | null;
            address?: string | null;
            phone?: string | null;
          } | null> | null;
          director?: Array<{
            id?: string | null;
            name?: string | null;
            designation?: string | null;
            isTemporaryAndPermanentAddressSame?: boolean | null;
            dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
            highestQualification?: string | null;
            mobileNo?: string | null;
            email?: string | null;
            citizenshipNo?: string | null;
            panNo?: string | null;
            isHeadOfOrganization?: boolean | null;
            isAffiliatedWithOtherFirms?: boolean | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            firmDetails?: {
              directorName?: string | null;
              institutionName?: string | null;
              address?: string | null;
              designation?: string | null;
              yearlyIncome?: number | null;
            } | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null> | null;
          accountOperator?: Array<{
            id?: string | null;
            name?: string | null;
            contact?: string | null;
            email?: string | null;
            isTemporaryAndPermanentAddressSame?: boolean | null;
            designation?: string | null;
            panNo?: string | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null> | null;
          documents?: Array<{
            fieldId?: string | null;
            identifiers: Array<{ identifier: string; url: string } | null>;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSuppliersListQueryVariables = Exact<{
  filter?: InputMaybe<InvSupplierFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetSuppliersListQuery = {
  inventory: {
    suppliers?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id?: string | null;
            name?: string | null;
            phoneNo?: string | null;
            email?: string | null;
            location?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetInventoryRegisterListQueryVariables = Exact<{
  filter?: InputMaybe<InventoryRegisterFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetInventoryRegisterListQuery = {
  inventory: {
    register?: {
      totalCount: number;
      edges?: Array<{
        cursor?: string | null;
        node?: {
          id: string;
          itemId: string;
          itemCode: string;
          itemName: string;
          transaction_type: InventoryTransactionType;
          unitPrice: string;
          totalCost: string;
          quantity: string;
        } | null;
      } | null> | null;
      pageInfo?: PaginationFragment | null;
    } | null;
  };
};

export type GetInventoryAdjustmentListQueryVariables = Exact<{
  filter?: InputMaybe<InventoryAdjustmentFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetInventoryAdjustmentListQuery = {
  inventory: {
    adjustment?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            entryNo?: string | null;
            reference?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetInventoryAdjustmentTableQueryVariables = Exact<{
  filter?: InputMaybe<InventoryAdjustmentFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetInventoryAdjustmentTableQuery = {
  inventory: {
    adjustment?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            entryNo?: string | null;
            reference?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetInventoryAdjustmentDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryAdjustmentDetailsQuery = {
  inventory: {
    adjustment?: {
      detailAdjustment: {
        data?: {
          referenceNo: string;
          code: string;
          date: Record<'local' | 'en' | 'np', string>;
          notes?: string | null;
          modeOfAdjustment: InventoryAdjustmentMode;
          itemDetails?: Array<{
            itemId?: string | null;
            warehouseId?: string | null;
            itemName?: string | null;
            warehouseName?: string | null;
            newQuantity?: string | null;
            quantityAdjusted?: string | null;
            quantityAdjustedUnit?: AdjustmentUnit | null;
            newValue?: string | null;
            valueAdjusted?: string | null;
          } | null> | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetInventoryItemsListQueryVariables = Exact<{
  filter?: InputMaybe<InvItemsDataFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetInventoryItemsListQuery = {
  inventory: {
    items?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id: string;
            itemCode: string;
            name: string;
            isVariantItem: boolean;
            type: string;
            costPrice: string;
            sellingPrice: string;
            itemQuantity: string;
            taxId?: string | null;
            itemsInWarehouses?: Record<string, string> | null;
            taxValue?: number | null;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetInventoryUnitOfMeasureQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryUnitOfMeasureQuery = {
  inventory: {
    unitOfMeasure?: {
      list?: {
        edges?: Array<{
          node?: { name: string; shortName: string; acceptFraction: boolean } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetItemCategoryListQueryVariables = Exact<{
  filter?: InputMaybe<InvItemsGroupDataFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetItemCategoryListQuery = {
  inventory: {
    itemsGroup?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: { id: string; name: string; parentCategory: string; description: string } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetUnitsListQueryVariables = Exact<{
  filter?: InputMaybe<InvUnitOfMeasureDataFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetUnitsListQuery = {
  inventory: {
    unitOfMeasure?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id: string;
            name: string;
            shortName: string;
            description?: string | null;
            acceptFraction: boolean;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetInventoryItemGroupsDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryItemGroupsDetailsQuery = {
  inventory: {
    itemsGroup?: {
      getGroupdetails: {
        data?: {
          groupId: string;
          groupName: string;
          underGroup?: string | null;
          description?: string | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetInventoryUnitsDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryUnitsDetailsQuery = {
  inventory: {
    unitOfMeasure?: {
      getUnitDetails: {
        data?: { description?: string | null; shortName?: string | null; unitName: string } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetInventoryItemsDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryItemsDetailsQuery = {
  inventory: {
    items?: {
      getItemDetails?: {
        data?: {
          itemName: string;
          itemCode: string;
          itemGroup: string;
          unit: string;
          tax?: string | null;
          reorderLevel?: string | null;
          valuationMethod?: InvItemsValuationMethod | null;
          variants?: Array<{
            costPrice?: string | null;
            itemName?: string | null;
            sellingPrice?: string | null;
            sku?: string | null;
          } | null> | null;
          ledgerDetail: {
            purchaseLedger: string;
            purchaseReturnLedger: string;
            salesLedger: string;
            salesReturnLedger: string;
          };
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type GetItemsFormStateQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetItemsFormStateQuery = {
  inventory: {
    items?: {
      getItem: {
        data?: {
          itemName: string;
          itemCode: string;
          itemGroup: string;
          primaryUnit: string;
          sellingPrice?: string | null;
          costPrice?: string | null;
          tax: string;
          isVariantItem: boolean;
          reorderLevel?: string | null;
          valuationMethod?: InvItemsValuationMethod | null;
          ledgers?: {
            salesLedger: string;
            purchaseLedger: string;
            salesReturnLedger: string;
            purchaseReturnLedger: string;
          } | null;
          variants?: Array<{
            variantName?: string | null;
            options?: Array<string | null> | null;
          } | null> | null;
          variantList?: Array<{
            id?: string | null;
            sku?: string | null;
            itemName?: string | null;
            sellingPrice?: string | null;
            costPrice?: string | null;
          } | null> | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetUnitsFormStateDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetUnitsFormStateDetailsQuery = {
  inventory: {
    unitOfMeasure?: {
      getUnitDetails: {
        data?: { unitName: string; shortName?: string | null; description?: string | null } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetInventoryItemsFormStateDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryItemsFormStateDetailsQuery = {
  inventory: {
    items?: {
      getItemDetails?: {
        data?: {
          itemName: string;
          itemCode: string;
          itemGroup: string;
          unit: string;
          tax?: string | null;
          reorderLevel?: string | null;
          valuationMethod?: InvItemsValuationMethod | null;
          variants?: Array<{
            sku?: string | null;
            itemName?: string | null;
            sellingPrice?: string | null;
            costPrice?: string | null;
          } | null> | null;
          ledgerDetail: {
            salesLedger: string;
            purchaseLedger: string;
            salesReturnLedger: string;
            purchaseReturnLedger: string;
          };
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type GetInventorySuppliersDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventorySuppliersDetailsQuery = {
  inventory: {
    suppliers?: {
      supplierDetail?: {
        data?: {
          supplierName: string;
          supplierCode: string;
          panNo?: string | null;
          contactNo: string;
          email: string;
          contactPersonName?: string | null;
          contactPersonPhoneNo?: string | null;
          openingBalance?: string | null;
          creditTerms?: string | null;
          creditLimit?: number | null;
          location?: AddressFragment | null;
          registrationDoc?: Array<{ identifier: string; url: string } | null> | null;
          applicationDoc?: Array<{ identifier: string; url: string } | null> | null;
          legalStatusDoc?: Array<{ identifier: string; url: string } | null> | null;
          othersDoc?: Array<{ identifier: string; url: string } | null> | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type GetInventorySuppliersFormstateDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventorySuppliersFormstateDetailsQuery = {
  inventory: {
    suppliers?: {
      getSupplier?: {
        data?: {
          name: string;
          supplierCode: string;
          panNo?: string | null;
          contactNo: string;
          email: string;
          contactPersonName?: string | null;
          contactPersonPhoneNo?: string | null;
          openingBalance?: string | null;
          creditTerms?: string | null;
          creditLimit?: number | null;
          address: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          };
          registrationDoc?: Array<{ identifier: string; url: string } | null> | null;
          applicationDoc?: Array<{ identifier: string; url: string } | null> | null;
          legalStatusDoc?: Array<{ identifier: string; url: string } | null> | null;
          othersDoc?: Array<{ identifier: string; url: string } | null> | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type GetInventoryWarehouseDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryWarehouseDetailsQuery = {
  inventory: {
    warehouse?: {
      getWarehouseDetails: {
        data?: {
          id?: string | null;
          name?: string | null;
          phoneNumber?: string | null;
          address?: string | null;
          branchId?: string | null;
          branchName?: string | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetWarehouseListQueryVariables = Exact<{
  paginate: Pagination;
  filter?: InputMaybe<Filter>;
}>;

export type GetWarehouseListQuery = {
  inventory: {
    warehouse?: {
      listWarehouses?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id?: string | null;
            name?: string | null;
            phoneNumber?: string | null;
            address?: string | null;
            branchId?: string | null;
            branchName?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetInventoryWarehouseTransferQueryVariables = Exact<{
  filter?: InputMaybe<WarehouseTransferFilter>;
  pagination: Pagination;
}>;

export type GetInventoryWarehouseTransferQuery = {
  inventory: {
    warehouse?: {
      listTransfers?: {
        totalCount: number;
        edges?: Array<{
          cursor?: string | null;
          node?: {
            id: string;
            date: Record<'local' | 'en' | 'np', string>;
            entryNo: string;
            reference: string;
            sourceWarehouseId: string;
            sourceWarehouseName: string;
            destinationWarehouseId: string;
            destinationWarehouseName: string;
            status: WarehouseTransferStatus;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetInventoryWarehouseRequestTransferDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInventoryWarehouseRequestTransferDetailsQuery = {
  inventory: {
    warehouse?: {
      getWarehouseTransferDetail: {
        data?: {
          branchName: string;
          authorizedReceiver?: string | null;
          authorizedSender?: string | null;
          description?: string | null;
          transferEntry?: {
            id: string;
            date: Record<'local' | 'en' | 'np', string>;
            entryNo: string;
            reference: string;
            sourceWarehouseId: string;
            sourceWarehouseName: string;
            destinationWarehouseId: string;
            destinationWarehouseName: string;
            status: WarehouseTransferStatus;
          } | null;
          itemDetails?: Array<{
            itemName: string;
            quantity: string;
            rate: string;
            amount: string;
          } | null> | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetWarehouseFormStateDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetWarehouseFormStateDetailsQuery = {
  inventory: {
    warehouse?: {
      getWarehouse: {
        data?: { name: string; phoneNumber: string; address: string; branchId: string } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetIndividualKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetIndividualKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetInstitutionKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetInstitutionKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetCooperativeKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetCooperativeKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetCoopUnionKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetCoopUnionKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetKymCooperativeFormDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetKymCooperativeFormDataQuery = {
  members: {
    cooperative?: {
      formState?: {
        data?: {
          nameOfOrganization?: string | null;
          regdNumber?: string | null;
          regdDate?: Record<'local' | 'en' | 'np', string> | null;
          regdOffice?: string | null;
          email?: string | null;
          website?: string | null;
          contactNumber?: string | null;
          noOfMaleMembers?: number | null;
          noOfFemaleMembers?: number | null;
          noOfOtherMembers?: number | null;
          lastAuditDate?: Record<'local' | 'en' | 'np', string> | null;
          lastAgmDate?: Record<'local' | 'en' | 'np', string> | null;
          representativeFullName?: string | null;
          representativeDesignatiton?: string | null;
          representativeEmail?: string | null;
          representativeContactNumber?: string | null;
          representativePanNo?: string | null;
          isPermanentAndTemporaryAddressSame?: boolean | null;
          cooperativeTypeId?: string | null;
          mainServiceProduct?: string | null;
          noOfMaleEmployee?: number | null;
          noOfFemaleEmployee?: number | null;
          totalEmployee?: number | null;
          shareCapital?: number | null;
          reserveAndSurplus?: number | null;
          savingDeposit?: number | null;
          loanAccount?: number | null;
          capitalGrant?: number | null;
          currentLiabilities?: number | null;
          nonCurrentLiabilities?: number | null;
          cashAndCashEquivalent?: number | null;
          bank?: number | null;
          investments?: number | null;
          loan?: number | null;
          nonCurrentAssets?: number | null;
          otherNonCurrentAssets?: number | null;
          totalAssets?: number | null;
          accountHoldersName?: string | null;
          hasTCAccepted?: boolean | null;
          vatNo?: string | null;
          documents?: Array<{
            fieldId?: string | null;
            identifiers: Array<{ identifier: string; url: string } | null>;
          } | null> | null;
          registeredAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          operatingAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          permanentRepresentativeAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryRepresentativeAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          directorDetails?: Array<{
            id?: string | null;
            designation?: string | null;
            isPermanentAndTemporaryAddressSame?: boolean | null;
            dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
            highestQualification?: string | null;
            contactNumber?: string | null;
            email?: string | null;
            citizenshipNo?: string | null;
            panNo?: string | null;
            nameEn?: string | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null> | null;
          accountOperator?: Array<{
            id?: string | null;
            designation?: string | null;
            isPermanentAndTemporaryAddressSame?: boolean | null;
            dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
            highestQualification?: string | null;
            contactNumber?: string | null;
            email?: string | null;
            citizenshipNo?: string | null;
            panNo?: string | null;
            nameEn?: string | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
            temporaryAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            coopRelatedTraining?: Array<{
              subjectOfTraining?: string | null;
              dateOfTraining?: Record<'local' | 'en' | 'np', string> | null;
              trainingOrganization?: string | null;
            } | null> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetKymIndividualFormDataQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetKymIndividualFormDataQuery = {
  members: {
    individual?: {
      formState?: {
        data?: {
          firstName?: Record<'local' | 'en' | 'np', string> | null;
          middleName?: Record<'local' | 'en' | 'np', string> | null;
          lastName?: Record<'local' | 'en' | 'np', string> | null;
          genderId?: string | null;
          dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
          ethnicityId?: string | null;
          nationalityId?: string | null;
          educationQualificationId?: string | null;
          religionId?: string | null;
          panNo?: string | null;
          mobileNumber?: string | null;
          phoneNumber?: string | null;
          email?: string | null;
          landlordName?: Record<'local' | 'en' | 'np', string> | null;
          landlordContact?: string | null;
          maritalStatusId?: string | null;
          professionId?: Array<string | null> | null;
          otherProfession?: string | null;
          isForeignEmployment?: boolean | null;
          foreignEmpCountryId?: string | null;
          typeOfVisaId?: string | null;
          foreignEstimatedAnnualIncome?: string | null;
          annualIncomeSourceId?: string | null;
          purposeId?: string | null;
          isMemberOfAnotherCooperative?: boolean | null;
          otherCoopName?: string | null;
          otherCoopBranchId?: string | null;
          otherCoopMemberId?: string | null;
          firstIntroducerId?: string | null;
          secondIntroducerId?: string | null;
          isFamilyAMember?: boolean | null;
          initialShare?: number | null;
          initialSaving?: string | null;
          initialLoan?: string | null;
          otherFinancialAmount?: string | null;
          estimatedAnnualTransactionAmount?: string | null;
          estimatedAnnualLoanAmount?: string | null;
          estimatedAnnualTransactionFrequencyId?: string | null;
          estimatedAnnualDepositAmount?: string | null;
          isPoliticallyExposed?: boolean | null;
          politicallyExposedDetails?: string | null;
          hasBeneficialOwner?: boolean | null;
          beneficialRelationshipId?: string | null;
          beneficialFullName?: string | null;
          isConvicted?: boolean | null;
          convictedDetails?: string | null;
          hasForeignResidentialPermit?: boolean | null;
          foreignResidentialPermitTypeId?: string | null;
          declarationAgreement?: boolean | null;
          sameTempAsPermanentAddress?: boolean | null;
          identificationSelection?: Array<string | null> | null;
          mainOccupation?: {
            registrationNo?: string | null;
            address?: string | null;
            contact?: string | null;
            establishedDate?: Record<'local' | 'en' | 'np', string> | null;
            estimatedAnnualIncome?: string | null;
            id?: string | null;
            isOwner?: boolean | null;
            occupationId?: string | null;
            orgName?: string | null;
            panVatNo?: string | null;
          } | null;
          incomeSource?: Array<{
            amount?: string | null;
            id?: string | null;
            incomeSource?: string | null;
          } | null> | null;
          spouseOccupation?: {
            registrationNo?: string | null;
            address?: string | null;
            contact?: string | null;
            establishedDate?: Record<'local' | 'en' | 'np', string> | null;
            estimatedAnnualIncome?: string | null;
            id?: string | null;
            isOwner?: boolean | null;
            occupationId?: string | null;
            orgName?: string | null;
            panVatNo?: string | null;
          } | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          identification?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            id?: string | null;
            identificationNo?: string | null;
            idType: string;
            place?: string | null;
          } | null> | null;
          familyCoopMembers?: Array<{
            dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
            familyMemberId?: string | null;
            fullName?: string | null;
            id?: string | null;
            relationshipId?: string | null;
          } | null> | null;
          familyMembers?: Array<{
            dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
            familyMemberId?: string | null;
            fullName?: string | null;
            id?: string | null;
            relationshipId?: string | null;
            documents?: Array<{
              fieldId?: string | null;
              identifiers: Array<{ identifier: string; url: string } | null>;
            } | null> | null;
          } | null> | null;
          documents?: Array<{
            fieldId?: string | null;
            identifiers: Array<{ identifier: string; url: string } | null>;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type LoanProductFragment = {
  id: string;
  objState: ObjState;
  createdAt: string;
  modifiedAt: string;
  createdDate: string;
  productName: string;
  productType: string;
  loanType: TypeOfLoan;
  productSubType: string;
  productNature: NatureOfLoanProduct;
  description?: string | null;
  productCodeString?: string | null;
  typeOfMember: Array<KymMemberTypesEnum | null>;
  criteria?: Array<CriteriaSection | null> | null;
  minAge?: number | null;
  maxAge?: number | null;
  genderId?: Array<string | null> | null;
  maritalStatusId?: Array<string | null> | null;
  educationQualification?: Array<string | null> | null;
  ethnicity?: Array<string | null> | null;
  occupation?: Array<string | null> | null;
  foreignEmployment?: boolean | null;
  natureOfBusinessInstitution?: Array<string | null> | null;
  natureOFBusinessCoop?: Array<string | null> | null;
  cooperativeType?: Array<string | null> | null;
  tenureUnit?: FrequencyTenure | null;
  isTenureApplicable?: boolean | null;
  minTenureUnitNumber?: number | null;
  maxTenureUnitNumber?: number | null;
  minimumLoanAmount?: any | null;
  maxLoanAmount?: any | null;
  interestMethod?: LoanInterestMethod | null;
  repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
  allowPartialInstallment?: boolean | null;
  isMonthlyInstallmentCompulsory?: boolean | null;
  isPenaltyApplicable?: boolean | null;
  penaltyDayAfterInstallmentDate?: number | null;
  penaltyType?: PenaltyType | null;
  penaltyRate?: number | null;
  penaltyAmount?: any | null;
  principalMaxGraceNumber?: number | null;
  interestMaxGraceNumber?: number | null;
  isRebateApplicable?: boolean | null;
  updateInterest?: boolean | null;
  waiveInterest?: boolean | null;
  isInsuranceApplicable?: boolean | null;
  isStaffProduct?: boolean | null;
  supportMultipleAccounts?: boolean | null;
  loanScheduleChangeOverride?: boolean | null;
  allowGurantee?: boolean | null;
  maxPercentOfGurantee?: number | null;
  isCollateralRequired?: boolean | null;
  collateralTypes?: Array<string | null> | null;
  requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
  productPremiumInterest?: number | null;
  productCode?: { prefix: string; initialNo: string } | null;
  rebate?: {
    dayBeforeInstallmentDate?: number | null;
    rebateRate?: number | null;
    rebateAmount?: any | null;
    rebateLedgerMapping?: string | null;
  } | null;
  interest?: {
    minRate?: number | null;
    maxRate?: number | null;
    defaultRate: number;
    ceoAuthority?: number | null;
    boardAuthority?: number | null;
  } | null;
  loanProcessingCharge?: Array<{
    serviceName?: string | null;
    ledgerName?: string | null;
    percentage?: number | null;
    amount?: any | null;
  } | null> | null;
  insuranceType?: { type?: string | null; amount?: any | null; rate?: number | null } | null;
  ledgerMapping?: {
    principal?: string | null;
    interestAccuredDaily?: string | null;
    interestIncome?: string | null;
  } | null;
  collateralValue?: Array<{
    type?: string | null;
    name?: string | null;
    minFMV?: number | null;
    maxFMV?: number | null;
    minDV?: number | null;
    maxDV?: number | null;
    minValue?: number | null;
    maxValue?: number | null;
  } | null> | null;
  prematurePenaltySetup?: {
    penaltyDateType?: PrematurePenaltyDateType | null;
    noOfDays?: number | null;
    penaltyLedgerMapping?: string | null;
    penaltyAmount?: any | null;
    penaltyRate?: number | null;
  } | null;
};

export type GetLoanProductDetailsDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductDetailsDataQuery = {
  settings: {
    general?: {
      loanProducts?: {
        formState?: {
          data?: LoanProductFragment | null;
          error?:
            | QueryError_AuthorizationError_Fragment
            | QueryError_BadRequestError_Fragment
            | QueryError_NotFoundError_Fragment
            | QueryError_ServerError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductsListQueryVariables = Exact<{
  memberId: Scalars['ID'];
  productTypeId: Scalars['ID'];
  productSubTypeId: Scalars['ID'];
}>;

export type GetLoanProductsListQuery = {
  loanAccount: {
    getProductList?: {
      allowed?: Array<{ id: string; productName: string } | null> | null;
      notAllowed?: Array<{
        error?: Array<string | null> | null;
        data?: { id: string; productName: string } | null;
      } | null> | null;
    } | null;
  };
};

export type GetProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetProductCriteriaQuery = {
  loanAccount: {
    getProductCriteria?: {
      data?: {
        gender?: Array<string | null> | null;
        minAge?: number | null;
        maxAge?: number | null;
        ethnicity?: Array<string | null> | null;
        educationQualification?: Array<string | null> | null;
        occupation?: Array<string | null> | null;
        foreignEmployment?: boolean | null;
        institutionType?: Array<string | null> | null;
        cooperativeUnion?: Array<string | null> | null;
        cooperativeType?: Array<string | null> | null;
        maritalStatus?: Array<string | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetLoanAccountTypeQueryVariables = Exact<{
  productTypeId?: InputMaybe<Scalars['String']>;
}>;

export type GetLoanAccountTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{ id?: string | null; productType?: string | null } | null> | null;
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductTypesQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductTypesQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCollateralListQueryVariables = Exact<{ [key: string]: never }>;

export type GetCollateralListQuery = {
  settings: {
    general?: {
      loan?: {
        general?: {
          collateralList?: Array<{ id?: string | null; name?: string | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetLoanListQuery = {
  loanAccount: {
    list?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          appliedLoanAmount: string;
          totalSanctionedAmount?: string | null;
          LoanAccountName?: string | null;
          createdAt: string;
          closedDate?: Record<'local' | 'en' | 'np', string> | null;
          appliedDate?: Record<'local' | 'en' | 'np', string> | null;
          approvedDate?: Record<'local' | 'en' | 'np', string> | null;
          member: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            code: string;
            profilePicUrl?: string | null;
          };
          product: { productName: string };
        } | null;
      }> | null;
      pageInfo?: {
        endCursor?: string | null;
        startCursor?: string | null;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
      } | null;
    } | null;
  };
};

export type GetLoanInstallmentsQueryVariables = Exact<{
  productId: Scalars['ID'];
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  sanctionAmount: Scalars['Int'];
  tenure: Scalars['Int'];
  interest: Scalars['Float'];
  repaymentScheme: LoanRepaymentScheme;
  installmentFrequency?: InputMaybe<InstallmentFrequency>;
  disburseDate?: InputMaybe<Scalars['Localized']>;
  installmentBeginDate?: InputMaybe<Scalars['Localized']>;
}>;

export type GetLoanInstallmentsQuery = {
  loanAccount: {
    getLoanInstallments?: {
      data?: {
        total: string;
        totalInterest?: string | null;
        totalPrincipal?: string | null;
        installments?: Array<{
          interest: string;
          installmentDate: Record<'local' | 'en' | 'np', string>;
          installmentNo: number;
          payment: string;
          principal: string;
          remainingPrincipal: string;
        } | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetLoanApplicationDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanApplicationDetailsQuery = {
  loanAccount: {
    formState?: {
      data?: {
        memberId?: string | null;
        productType: string;
        productSubType?: string | null;
        productId?: string | null;
        loanAccountName?: string | null;
        appliedLoanAmount?: string | null;
        installmentFrequency?: InstallmentFrequency | null;
        disbursementDate?: Record<'local' | 'en' | 'np', string> | null;
        installmentBeginDate?: Record<'local' | 'en' | 'np', string> | null;
        linkedAccountId?: string | null;
        totalValuation?: string | null;
        totalSanctionedAmount?: string | null;
        justifySanction?: string | null;
        interestAuthority?: InterestAuthority | null;
        intrestRate?: number | null;
        tenure?: number | null;
        tenureType?: FrequencyTenure | null;
        repaymentScheme?: LoanRepaymentScheme | null;
        note?: string | null;
        collateralData?: Array<{
          collateralType?: string | null;
          ownerName?: string | null;
          relation?: string | null;
          sheetNo?: number | null;
          plotNo?: number | null;
          kittaNo?: number | null;
          area?: number | null;
          buildingType?: BuildingType | null;
          constructionType?: ConstructionType | null;
          valuatorId?: string | null;
          noOfStorey?: number | null;
          fmvMaxAmount?: any | null;
          dvMinAmount?: string | null;
          valuationMethod?: ValuationMethod | null;
          valuationPercent?: number | null;
          collaterallValuation?: any | null;
          collateralDescription?: string | null;
          collateralFiles?: Array<string> | null;
          valuationFiles?: Array<string> | null;
          vehicleName?: string | null;
          vehicleModelNo?: string | null;
          vehicleRegistrationNo?: string | null;
          vehicleNo?: string | null;
          vehicleSeatCapacity?: number | null;
          vehicleCapacity?: string | null;
          vehicleType?: string | null;
          vehicleFuelType?: string | null;
          documentName?: string | null;
          valuationAmount?: string | null;
          description?: string | null;
        } | null> | null;
        gurantee_details?: Array<{
          accountId?: string | null;
          guranteeAmount?: any | null;
          maxGuranteeAmountLimit?: any | null;
          memberId?: string | null;
          totalAmount?: any | null;
          accountName?: string | null;
        } | null> | null;
        gracePeriod?: {
          principalGracePeriod?: number | null;
          interestGracePeriod?: number | null;
        } | null;
        interestDoc?: Array<{ identifier?: string | null; url?: string | null } | null> | null;
        loanProcessingCharge?: Array<{
          amount?: any | null;
          ledgerName?: string | null;
          serviceName?: string | null;
        } | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetMemberLoanAccountsQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetMemberLoanAccountsQuery = {
  loanAccount: {
    memberDisbursedLoanAccounts?: Array<{ id?: string | null; name?: string | null } | null> | null;
  };
};

export type GetMemberLoanAccountSearchQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetMemberLoanAccountSearchQuery = {
  loanAccount: {
    list?: {
      edges?: Array<{ node?: { id: string; LoanAccountName?: string | null } | null }> | null;
    } | null;
  };
};

export type GetLoanPreviewQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetLoanPreviewQuery = {
  loanAccount: {
    loanPreview?: {
      data?: {
        productId?: string | null;
        memberId?: string | null;
        additionalFeatures?: {
          allowPartialInstallment?: boolean | null;
          collateral?: boolean | null;
          insurance?: boolean | null;
          isMonthlyInterestCompulsory?: boolean | null;
          loanScheduleChangeOverride?: boolean | null;
          overrideInterest?: boolean | null;
          staffProduct?: boolean | null;
          supportMultipleAccount?: boolean | null;
        } | null;
        criteria?: {
          gender?: Array<string | null> | null;
          minAge?: number | null;
          maxAge?: number | null;
          ethnicity?: Array<string | null> | null;
          educationQualification?: Array<string | null> | null;
          maritalStatus?: Array<string | null> | null;
          foreignEmployment?: boolean | null;
          occupation?: Array<string | null> | null;
          institutionType?: Array<string | null> | null;
          cooperativeUnion?: Array<string | null> | null;
          cooperativeType?: Array<string | null> | null;
        } | null;
        collateralAndGuarantees?: Array<{
          name?: string | null;
          valuation?: string | null;
        } | null> | null;
        generalInformation?: {
          loanProduct?: string | null;
          loanSubType?: string | null;
          loanType?: string | null;
          natureOfLoanProduct?: NatureOfLoanProduct | null;
          loanName?: string | null;
          productCode?: string | null;
          penalty?: {
            penaltyType?: PenaltyType | null;
            penaltyDayAfterInstallmentDate?: number | null;
            penaltyRate?: number | null;
            penaltyAmount?: any | null;
          } | null;
        } | null;
        loanDetails?: {
          appliedLoanAmount?: string | null;
          interestMethod?: LoanInterestMethod | null;
          interestRate?: number | null;
          loanRepaymentScheme?: LoanRepaymentScheme | null;
          tenure?: number | null;
          tenureUnit?: FrequencyTenure | null;
          totalCollateralValuation?: string | null;
          totalGuaranteeValuation?: string | null;
          totalProcessingChargesValuation?: string | null;
          totalSanctionedAmount?: string | null;
          totalDisbursedAmount?: string | null;
          principalGracePeriod?: number | null;
          interestGracePeriod?: number | null;
          interestAmount?: string | null;
          disburseDate?: Record<'local' | 'en' | 'np', string> | null;
          expiryDate?: string | null;
          paymentFrequency?: LoanProductInstallment | null;
          processingCharges?: Array<{ name: string; amount?: any | null } | null> | null;
        } | null;
        repaymentDetails?: {
          lastPaymentDate?: Record<'local' | 'en' | 'np', string> | null;
          nextInstallmentNo?: number | null;
        } | null;
        member?: {
          name?: Record<'local' | 'en' | 'np', string> | null;
          id: string;
          code: string;
          profilePicUrl?: string | null;
        } | null;
        paymentSchedule?: {
          total: string;
          totalInterest?: string | null;
          totalPrincipal?: string | null;
          totalRemainingPayable?: string | null;
          duesSince?: Record<'local' | 'en' | 'np', string> | null;
          totalPayablePrincipal?: string | null;
          totalPayableInterest?: string | null;
          totalOverduePayable?: string | null;
          totalOverduePrincipal?: string | null;
          installments?: Array<{
            installmentDate: Record<'local' | 'en' | 'np', string>;
            installmentNo: number;
            interest: string;
            payment: string;
            principal: string;
            remainingPrincipal: string;
            currentRemainingPrincipal: string;
            paidDate: Record<'local' | 'en' | 'np', string>;
            remainingInterest: string;
            status?: LoanInstallmentStatus | null;
            overDueDays?: number | null;
            penalty?: string | null;
            isPartial?: boolean | null;
            overdueAmount?: string | null;
            fullPrincipal?: string | null;
          } | null> | null;
        } | null;
        statistics?: {
          remainingPayableAmount?: string | null;
          totalPaidAmount?: string | null;
          totalPayableAmount?: string | null;
        } | null;
        idealSchedule?: {
          total: string;
          totalInterest?: string | null;
          totalPrincipal?: string | null;
          totalRemainingPayable?: string | null;
          installments?: Array<{
            installmentDate: Record<'local' | 'en' | 'np', string>;
            installmentNo: number;
            interest: string;
            payment: string;
            principal: string;
            remainingPrincipal: string;
            currentRemainingPrincipal: string;
            paidDate: Record<'local' | 'en' | 'np', string>;
            remainingInterest: string;
            status?: LoanInstallmentStatus | null;
            overDueDays?: number | null;
            penalty?: string | null;
            isPartial?: boolean | null;
            overdueAmount?: string | null;
            fullPrincipal?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanRepaymentListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetLoanRepaymentListQuery = {
  loanAccount: {
    repaymentList?: {
      totalCount?: number | null;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          loanAccountId: string;
          memberId: string;
          memberName: Record<'local' | 'en' | 'np', string>;
          memberCode?: string | null;
          memberProfilePicId?: string | null;
          memberProfilePicUrl?: string | null;
          loanAccountName: string;
          loanProductId: string;
          loanProductName: string;
          amount: string;
          paymentDate: Record<'local' | 'en' | 'np', string>;
          branchName: string;
        } | null;
      }> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetMemberLinkedAccountsQueryVariables = Exact<{
  memberId: Scalars['ID'];
  filter?: InputMaybe<
    Array<InputMaybe<NatureOfDepositProduct>> | InputMaybe<NatureOfDepositProduct>
  >;
  objState?: InputMaybe<AccountObjState>;
  includeLoc?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetMemberLinkedAccountsQuery = {
  members: {
    getAllAccounts?: {
      data?: {
        depositAccount?: Array<{
          id: string;
          accountName?: string | null;
          balance?: string | null;
          availableBalance?: string | null;
          interestAccured?: string | null;
          interestTax?: string | null;
          prematurePenalty?: string | null;
          lastTransactionDate?: Record<'local' | 'en' | 'np', string> | null;
          accountOpenedDate?: Record<'local' | 'en' | 'np', string> | null;
          installmentAmount?: string | null;
          accountExpiryDate?: Record<'local' | 'en' | 'np', string> | null;
          overDrawnBalance?: string | null;
          guaranteedAmount?: string | null;
          member?: { name?: Record<'local' | 'en' | 'np', string> | null } | null;
          product: { productName: string; nature: NatureOfDepositProduct };
          dues?: {
            fine?: string | null;
            totalDue?: string | null;
            dueInstallments?: number | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetMultipleSubProductsQueryVariables = Exact<{
  productTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>;
}>;

export type GetMultipleSubProductsQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          multipleProductSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductsFromSubTypeQueryVariables = Exact<{
  subTypeIds?: InputMaybe<Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>;
}>;

export type GetLoanProductsFromSubTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          loanProducts?: Array<{ id: string; productName: string } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanAccountDetailsQueryVariables = Exact<{
  loanAccountId: Scalars['ID'];
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<EbankingTransactionFilter>;
}>;

export type GetLoanAccountDetailsQuery = {
  loanAccount: {
    loanAccountDetails?: {
      overView?: {
        isClosed: boolean;
        totalPrincipalPaid: string;
        totalInterestPaid: string;
        totalRemainingPrincipal: string;
        generalInformation?: {
          accountId: string;
          accountName: string;
          productId: string;
          productName: string;
          accountOpenDate: Record<'local' | 'en' | 'np', string>;
          loanAccountOpenBranchId: string;
          loanAccountOpenBranchName: string;
          repaymentScheme: LoanRepaymentScheme;
          interestRate: number;
          interestAccrued?: string | null;
          interestEarned?: string | null;
          sanctionedAmount: string;
          principalGracePeriod?: number | null;
          interestGracePeriod?: number | null;
          tenure: number;
          tenureUnit: string;
          linkedAccountId?: string | null;
          linkedAccountName?: string | null;
          installmentFrequency?: InstallmentFrequency | null;
          disbursedAmount?: string | null;
        } | null;
        loanSchedule?: {
          total: string;
          totalInterest?: string | null;
          totalPrincipal?: string | null;
          installments?: Array<{
            paidDate: Record<'local' | 'en' | 'np', string>;
            installmentNo: number;
            installmentDate: Record<'local' | 'en' | 'np', string>;
            principal: string;
            interest: string;
            payment: string;
            remainingPrincipal: string;
            remainingInterest: string;
            currentRemainingPrincipal: string;
            status?: LoanInstallmentStatus | null;
            overDueDays?: number | null;
          } | null> | null;
        } | null;
        transactions?: {
          totalCount?: number | null;
          edges?: Array<{
            node: {
              id: string;
              transactionId?: string | null;
              accountId?: string | null;
              name: string;
              date: Record<'local' | 'en' | 'np', string>;
              month: Record<'local' | 'en' | 'np', string>;
              transactionDirection: EbankingTransactionDirection;
              transactionType?: string | null;
              amount: string;
              currentBalance: string;
              credit?: string | null;
              debit?: string | null;
              balanceType?: BalanceType | null;
            };
          } | null> | null;
          pageInfo?: { startCursor?: string | null; endCursor?: string | null } | null;
        } | null;
        additionalFeatures?: {
          allowPartialInstallment?: boolean | null;
          insurance?: boolean | null;
          staffProduct?: boolean | null;
          loanScheduleChangeOverride?: boolean | null;
          isMonthlyInterestCompulsory?: boolean | null;
          collateral?: boolean | null;
          supportMultipleAccount?: boolean | null;
          overrideInterest?: boolean | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanAccountGuaranteeDetailsQueryVariables = Exact<{
  loanAccountId: Scalars['ID'];
}>;

export type GetLoanAccountGuaranteeDetailsQuery = {
  loanAccount: {
    loanAccountDetails?: {
      guarantee?: {
        noOfGuarantee: number;
        totalGuaranteeValuation: string;
        totalGuaranteeRelease: string;
        guaranteeList?: Array<{
          guaranteeStatus?: GuaranteeStatus | null;
          memberId?: string | null;
          memberName?: string | null;
          accountId?: string | null;
          accountName?: string | null;
          productId?: string | null;
          productName?: string | null;
          maxGuranteeAmountLimit?: any | null;
          guranteeAmount?: any | null;
          totalAmount?: any | null;
          guaranteeId?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetLoanAccountCollateralDetailsQueryVariables = Exact<{
  loanAccountId: Scalars['ID'];
}>;

export type GetLoanAccountCollateralDetailsQuery = {
  loanAccount: {
    loanAccountDetails?: {
      collateral?: {
        noOfCollateral: number;
        totalCollateralValuation: string;
        totalCollateralRelease: string;
        collateralList?: Array<{
          collateralID?: string | null;
          collateralType?: string | null;
          ownerName?: string | null;
          relation?: string | null;
          sheetNo?: number | null;
          plotNo?: number | null;
          kittaNo?: number | null;
          area?: number | null;
          buildingType?: BuildingType | null;
          constructionType?: ConstructionType | null;
          valuatorId?: string | null;
          noOfStorey?: number | null;
          fmvMaxAmount?: any | null;
          dvMinAmount?: string | null;
          valuationMethod?: ValuationMethod | null;
          valuationPercent?: number | null;
          collaterallValuation?: any | null;
          collateralDescription?: string | null;
          collateralFiles?: Array<string> | null;
          valuationFiles?: Array<string> | null;
          vehicleName?: string | null;
          vehicleModelNo?: string | null;
          vehicleRegistrationNo?: string | null;
          vehicleNo?: string | null;
          vehicleSeatCapacity?: number | null;
          vehicleCapacity?: string | null;
          vehicleType?: string | null;
          vehicleFuelType?: string | null;
          documentName?: string | null;
          valuationAmount?: string | null;
          description?: string | null;
          allDocuments?: Array<string> | null;
          status?: GuaranteeStatus | null;
          documents?: Array<{ id: string; url: string } | null> | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetLoanAccountMemberDetailsQueryVariables = Exact<{
  loanAccountId: Scalars['ID'];
}>;

export type GetLoanAccountMemberDetailsQuery = {
  loanAccount: {
    loanAccountDetails?: {
      memberInfo?: {
        memberId: string;
        memberCode: string;
        memberName: Record<'local' | 'en' | 'np', string>;
        memberPhoneNo: string;
        profilePicId?: string | null;
        profilePicUrl?: string | null;
      } | null;
    } | null;
  };
};

export type GetLoanAccountLedgersListQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanAccountLedgersListQuery = {
  account: {
    listAccountLedgers?: {
      data?: Array<{
        ledgerId?: string | null;
        ledgerName?: string | null;
        accountType?: string | null;
        balance?: string | null;
        balanceType?: string | null;
      } | null> | null;
    } | null;
  };
};

export type GetLoanFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanFilterMappingQuery = {
  loanAccount: {
    filterMapping?: {
      productName: Array<{ label?: string | null; value?: unknown | null }>;
    } | null;
  };
};

export type GetLoanCloseDataQueryVariables = Exact<{
  loanAccountId: Scalars['ID'];
}>;

export type GetLoanCloseDataQuery = {
  loanAccount: {
    remainingPayments?: {
      data?: {
        totalInterest?: string | null;
        totalPayableAmount?: string | null;
        totalPenalty?: string | null;
        totalPrincipal?: string | null;
      } | null;
    } | null;
  };
};

export type ListLoanAccountInterestRateListQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type ListLoanAccountInterestRateListQuery = {
  loanAccount: {
    listAccountInterestRates: {
      data?: Array<{
        id: string;
        rate: number;
        createdAt: Record<'local' | 'en' | 'np', string>;
        effectiveDate: Record<'local' | 'en' | 'np', string>;
      } | null> | null;
    };
  };
};

export type GetLoanAccountInterestRateDetailQueryVariables = Exact<{
  id: Scalars['ID'];
  accountId: Scalars['String'];
}>;

export type GetLoanAccountInterestRateDetailQuery = {
  loanAccount: {
    getAccountInterestRate: {
      data?: {
        id: string;
        rate: number;
        createdAt: Record<'local' | 'en' | 'np', string>;
        effectiveDate: Record<'local' | 'en' | 'np', string>;
        note?: string | null;
        fileUploads?: Array<{ identifier: string; url: string } | null> | null;
      } | null;
    };
  };
};

export type GetLoanProvisionAccountsQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProvisionAccountsQuery = {
  loanAccount: {
    loanProvisionAccounts?: {
      goodLoan?: Array<{ id: string; name: string; amount: string } | null> | null;
      oneTo30Days?: Array<{ id: string; name: string; amount: string } | null> | null;
      oneTo12Months?: Array<{ id: string; name: string; amount: string } | null> | null;
      above12Months?: Array<{ id: string; name: string; amount: string } | null> | null;
    } | null;
  };
};

export type LoanProvisionListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type LoanProvisionListQuery = {
  loanAccount: {
    loanProvisionList?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          date: Record<'local' | 'en' | 'np', string>;
          conditions: string;
          provisionCount: number;
          amount: string;
        } | null;
      }> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetMemberListQueryVariables = Exact<{
  pagination: Pagination;
  filter?: InputMaybe<Filter>;
}>;

export type GetMemberListQuery = {
  members: {
    list: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          type: KymMemberTypesEnum;
          branch?: string | null;
          profilePicUrl?: string | null;
          signaturePicUrl?: string | null;
          contact?: string | null;
          createdAt: string;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          activeDate?: Record<'local' | 'en' | 'np', string> | null;
          inactiveDate?: Record<'local' | 'en' | 'np', string> | null;
          gender?: string | null;
          age?: number | null;
          maritalStatus?: string | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        };
      } | null> | null;
      pageInfo?: PaginationFragment | null;
    };
  };
};

export type GetMemberTypesQueryVariables = Exact<{ [key: string]: never }>;

export type GetMemberTypesQuery = {
  members: {
    memberTypes: {
      data?: Array<{ id: string; type?: Array<KymMemberTypesEnum | null> | null } | null> | null;
    };
  };
};

export type GetMemberTranslationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberTranslationQuery = {
  members: {
    translate: {
      data?: Array<{
        id: string;
        data?: string | null;
        translatedValue?: string | null;
      } | null> | null;
    };
  };
};

export type GetMemberIndividualDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberIndividualDataQuery = {
  members: {
    details: {
      data?: {
        id: string;
        code: string;
        type: KymMemberTypesEnum;
        name?: Record<'local' | 'en' | 'np', string> | null;
        profilePicUrl?: string | null;
        profilePic?: string | null;
        contact?: string | null;
        dateJoined?: Record<'local' | 'en' | 'np', string> | null;
        signaturePicUrl?: string | null;
        citizenshipPicUrl?: string | null;
        gender?: string | null;
        age?: number | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          wardNo?: string | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        citizenship?: {
          date?: Record<'local' | 'en' | 'np', string> | null;
          id?: string | null;
          idType: string;
          identificationNo?: string | null;
          place?: string | null;
        } | null;
      } | null;
    };
  };
};

export type GetMemberDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberDetailsQuery = {
  members: {
    details: {
      data?: {
        id: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        code: string;
        contact?: string | null;
        profilePicUrl?: string | null;
        signaturePicUrl?: string | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          wardNo?: string | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
          houseNo?: string | null;
        } | null;
        share?: {
          summary?: {
            memberId?: string | null;
            count: number;
            amount: number;
            member: {
              id: string;
              name?: Record<'local' | 'en' | 'np', string> | null;
              code: string;
            };
          } | null;
        } | null;
      } | null;
    };
  };
};

export type GetOfficialUseQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetOfficialUseQuery = {
  members: {
    officialUse?: {
      recordId?: string | null;
      record?: {
        id?: string | null;
        isStaff?: boolean | null;
        checkSanction?: boolean | null;
        checkNegative?: boolean | null;
        riskCategory?: OfficialUseRiskCategory | null;
        docCollectedAndVerified?: boolean | null;
        acceptableAddressDoc?: boolean | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type GetMemberFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetMemberFilterMappingQuery = {
  members: {
    filterMapping?: {
      objState: Array<ObjState>;
      serviceCenter: Array<{ label?: string | null; value?: unknown | null }>;
    } | null;
  };
};

export type GetMinorListQueryVariables = Exact<{
  filter?: InputMaybe<MinorFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetMinorListQuery = {
  members: {
    listMinor?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node: {
          id: string;
          memberId: string;
          memberCode: string;
          memberName: Record<'local' | 'en' | 'np', string>;
          serviceCentreId: string;
          serviceCentreName: string;
          minorName: string;
          relationshipId?: string | null;
          relationshipName?: string | null;
          dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
        };
      } | null> | null;
      pageInfo?: PaginationFragment | null;
    } | null;
  };
};

export type GetMinorProfileQueryVariables = Exact<{
  minorId: Scalars['String'];
}>;

export type GetMinorProfileQuery = {
  members: {
    minorProfile?: {
      minorId: string;
      fullName: string;
      dateOfBirth: Record<'local' | 'en' | 'np', string>;
      gender: string;
      parentName: string;
      memberId: string;
      memberCode: string;
      serviceCentreId: string;
      serviceCentreName: string;
      address?: {
        state?: Record<'local' | 'en' | 'np', string> | null;
        district?: Record<'local' | 'en' | 'np', string> | null;
        localGovernment?: Record<'local' | 'en' | 'np', string> | null;
        wardNo?: string | null;
        locality?: Record<'local' | 'en' | 'np', string> | null;
        houseNo?: string | null;
        coordinates?: { longitude?: number | null; latitude?: number | null } | null;
      } | null;
      savingAccounts?: Array<{
        accountName?: string | null;
        interestRate?: number | null;
        balance?: string | null;
      } | null> | null;
    } | null;
  };
};

export type MemberDormancyDetailsQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type MemberDormancyDetailsQuery = {
  members: {
    dormancyDetails?: {
      data?: {
        blockSavingTransaction?: boolean | null;
        blockLoanTransaction?: boolean | null;
        blockShareTransaction?: boolean | null;
      } | null;
    } | null;
  };
};

export type GetMemberTransferListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetMemberTransferListQuery = {
  members: {
    transfer: {
      list: {
        totalCount: number;
        edges?: Array<{
          node: {
            id: string;
            memberId?: string | null;
            memberName?: string | null;
            prevBranchId?: string | null;
            prevBranchName?: string | null;
            newBranchId?: string | null;
            newBranchName?: string | null;
            state?: MemberTransferState | null;
            approverId?: string | null;
            approverName?: string | null;
            reason?: string | null;
            postNotes?: string | null;
            requestDate?: Record<'local' | 'en' | 'np', string> | null;
            approvedDate?: Record<'local' | 'en' | 'np', string> | null;
            docs?: Array<{ identifier: string; url: string } | null> | null;
          };
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      };
    };
  };
};

export type GetMemberTransferQueryVariables = Exact<{
  requestId: Scalars['ID'];
}>;

export type GetMemberTransferQuery = {
  members: {
    transfer: {
      get: {
        data?: {
          id: string;
          memberId?: string | null;
          memberName?: string | null;
          prevBranchId?: string | null;
          prevBranchName?: string | null;
          newBranchId?: string | null;
          newBranchName?: string | null;
          state?: MemberTransferState | null;
          approverId?: string | null;
          approverName?: string | null;
          reason?: string | null;
          postNotes?: string | null;
          requestDate?: Record<'local' | 'en' | 'np', string> | null;
          approvedDate?: Record<'local' | 'en' | 'np', string> | null;
          docs?: Array<{ identifier: string; url: string } | null> | null;
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetMembershipFeeQueryVariables = Exact<{
  memberID: Scalars['ID'];
}>;

export type GetMembershipFeeQuery = {
  members: {
    activateMember?: {
      getMembershipFee?: {
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
        data?: { charge: number } | null;
      } | null;
    } | null;
  };
};

export type GetMemberCheckQueryVariables = Exact<{
  memberID: Scalars['ID'];
}>;

export type GetMemberCheckQuery = {
  members: {
    activateMember?: {
      memberActivateChecks?: {
        isFeePaid: boolean;
        isShareIssued: boolean;
        isAccountUpdated: boolean;
      } | null;
    } | null;
  };
};

export type GetAccountCheckQueryVariables = Exact<{
  memberId: Scalars['ID'];
  accountId: Scalars['ID'];
}>;

export type GetAccountCheckQuery = {
  members: { activateMember?: { accountUpdateCheck: boolean } | null };
};

export type GetMemberAccountsQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetMemberAccountsQuery = {
  members: {
    getAllAccounts?: {
      data?: {
        depositAccount?: Array<{
          id: string;
          accountName?: string | null;
          product: {
            nature: NatureOfDepositProduct;
            isMandatorySaving?: boolean | null;
            productName: string;
          };
        } | null> | null;
        loanAccount?: Array<{
          id: string;
          accountName?: string | null;
          product: { productName: string };
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAccountInactiveCheckQueryVariables = Exact<{
  memberId: Scalars['ID'];
  accountId: Scalars['ID'];
  accountType: AccountTypeFilter;
}>;

export type GetAccountInactiveCheckQuery = {
  members: { inactivateMember?: { accountCloseCheck: boolean } | null };
};

export type GetMemberInactiveCheckQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetMemberInactiveCheckQuery = {
  members: {
    inactivateMember?: {
      inactivateCheck?: { isAccountClosed: boolean; isShareReturned: boolean } | null;
    } | null;
  };
};

export type GetMemberDetailsShareBalanceQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberDetailsShareBalanceQuery = {
  share: {
    history?: {
      history?: Array<{
        id?: string | null;
        memberId?: string | null;
        status?: Share_Status | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        transactionDirection: Share_Transaction_Direction;
        credit?: number | null;
        debit?: number | null;
        startNumber: number;
        endNumber: number;
        balance?: number | null;
        shareAmount?: string | null;
        totalAmount?: number | null;
        paymentMode?: SharePaymentMode | null;
        bankId?: string | null;
        voucherNumber?: string | null;
        accountId?: string | null;
        noOfShare?: string | null;
        member?: { id: string; objState: ObjState; createdAt: string } | null;
        extraFee?: Array<{ name: string; value: number } | null> | null;
      } | null> | null;
    } | null;
  };
};

export type GetMemberKymDetailsOverviewQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberKymDetailsOverviewQuery = {
  members: {
    memberOverviewV2?: {
      overview?: {
        data?: {
          basicInformation?:
            | {
                __typename: 'CooperativeBasicMinInfo';
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                registrationNo?: string | null;
                registrationOffice?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                branchId?: string | null;
                branchName?: string | null;
              }
            | {
                __typename: 'CooperativeUnionBasicMinInfo';
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                type?: string | null;
                nature?: string | null;
                branchId?: string | null;
                branchName?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                vatPanNo?: string | null;
                noOfServiceCenters?: number | null;
              }
            | {
                __typename: 'IndividualBasicMinInfo';
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                genderId?: string | null;
                gender?: Record<'local' | 'en' | 'np', string> | null;
                maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
                maritalStatusId?: string | null;
                fathersName?: string | null;
                branchId?: string | null;
                branchName?: string | null;
                mothersName?: string | null;
                grandFathersName?: string | null;
                isStaff?: boolean | null;
                familyMembers?: Array<{
                  fullName?: string | null;
                  relationship?: string | null;
                  dob?: string | null;
                } | null> | null;
              }
            | {
                __typename: 'InstitutionBasicMinInfo';
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                type?: string | null;
                nature?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                vatPanNo?: string | null;
                branchId?: string | null;
                branchName?: string | null;
                noOfServiceCenters?: number | null;
              }
            | null;
          memberGraphs?: {
            deposit?: {
              periodType?: PeriodTypeEnum | null;
              data?: Array<{ time?: number | null; amount?: string | null } | null> | null;
            } | null;
            withdraw?: {
              periodType?: PeriodTypeEnum | null;
              data?: Array<{ time?: number | null; amount?: string | null } | null> | null;
            } | null;
          } | null;
          statistics?: {
            totalShareValue?: string | null;
            accountBalance?: string | null;
            loanBalance?: string | null;
            totalSavingInterestAccured?: string | null;
            totalSavingInterestPosted?: string | null;
            totalLoanInterest?: string | null;
            totalLoanRemainingPrincipal?: string | null;
          } | null;
          payments?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            accountName?: string | null;
            accountId?: string | null;
            paymentType?: string | null;
            amount?: string | null;
            installmentNo?: string | null;
            interestRate?: string | null;
          } | null> | null;
          recentTransactions?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            title?: string | null;
            txnType?: MemberRecentTransactionViewTxnType | null;
            amount?: string | null;
            noOfShares?: number | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberKymDetailsAccountsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberKymDetailsAccountsQuery = {
  members: {
    memberOverviewV2?: {
      accounts?: {
        data?: {
          accounts?: Array<{
            accountName?: string | null;
            accountNumber?: string | null;
            totalBalance?: string | null;
            productName?: string | null;
            productType?: string | null;
            interestRate?: string | null;
            interestEarned?: string | null;
            interestBooked?: string | null;
            guaranteeAccounts?: Array<{
              loanId?: string | null;
              loanAccountName?: string | null;
            } | null> | null;
          } | null> | null;
          payments?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            accountId?: string | null;
            accountName?: string | null;
            paymentType?: string | null;
            amount?: string | null;
            installmentNo?: string | null;
            interestRate?: string | null;
          } | null> | null;
          closedAccounts?: Array<{
            accountName?: string | null;
            accountNumber?: string | null;
            totalBalance?: string | null;
            productName?: string | null;
            productType?: string | null;
            interestRate?: string | null;
            interestEarned?: string | null;
            interestBooked?: string | null;
            guaranteeAccounts?: Array<{
              loanId?: string | null;
              loanAccountName?: string | null;
            } | null> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberKymDetailsLoanQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberKymDetailsLoanQuery = {
  members: {
    memberOverviewV2?: {
      loan?: {
        data?: {
          accounts?: Array<{
            accountName?: string | null;
            accountNumber?: string | null;
            totalBalance?: string | null;
            productName?: string | null;
            productType?: string | null;
            interestRate?: string | null;
            subscriptionDate?: Record<'local' | 'en' | 'np', string> | null;
            interestEarned?: string | null;
            interestBooked?: string | null;
            remainingPrincipal?: string | null;
          } | null> | null;
          payments?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            accountName?: string | null;
            accountId?: string | null;
            paymentType?: string | null;
            amount?: string | null;
            installmentNo?: string | null;
            interestRate?: string | null;
          } | null> | null;
          closedAccounts?: Array<{
            accountName?: string | null;
            accountNumber?: string | null;
            totalBalance?: string | null;
            balanceType?: BalanceType | null;
            productName?: string | null;
            productType?: string | null;
            interestRate?: string | null;
            subscriptionDate?: Record<'local' | 'en' | 'np', string> | null;
            closedDate?: Record<'local' | 'en' | 'np', string> | null;
            interestEarned?: string | null;
            interestBooked?: string | null;
            objState?: ObjState | null;
            guaranteeAccounts?: Array<{
              loanId?: string | null;
              loanAccountName?: string | null;
            } | null> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberKymDetailsSharesQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberKymDetailsSharesQuery = {
  members: {
    memberOverviewV2?: {
      share?: {
        data?: {
          shareInfo?: {
            totalCount?: string | null;
            issuedCount?: string | null;
            returnedCount?: string | null;
            totalBalance?: string | null;
          } | null;
          registerDetails?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            title?: string | null;
            txnAmount?: string | null;
            txnType?: ShareTransactionType | null;
            noOfShares?: number | null;
          } | null> | null;
          balanceDetails?: {
            totalCount: number;
            edges: Array<{
              cursor: string;
              node: {
                id?: string | null;
                memberId?: string | null;
                status?: Share_Status | null;
                transactionDate?: Record<'local' | 'en' | 'np', string> | null;
                transactionDirection: Share_Transaction_Direction;
                credit?: number | null;
                debit?: number | null;
                startNumber: number;
                endNumber: number;
                balance?: number | null;
                shareAmount?: string | null;
                totalAmount?: number | null;
                paymentMode?: SharePaymentMode | null;
                bankId?: string | null;
                voucherNumber?: string | null;
                accountId?: string | null;
                member?: {
                  id: string;
                  objState: ObjState;
                  createdAt: string;
                  modifiedAt: string;
                  code: string;
                  type: KymMemberTypesEnum;
                  name?: Record<'local' | 'en' | 'np', string> | null;
                  contact?: string | null;
                  dateJoined?: Record<'local' | 'en' | 'np', string> | null;
                  profilePic?: string | null;
                  signaturepic?: string | null;
                  profilePicUrl?: string | null;
                  signaturePicUrl?: string | null;
                } | null;
                extraFee?: Array<{ name: string; value: number } | null> | null;
              };
            }>;
            pageInfo?: {
              hasNextPage: boolean;
              hasPreviousPage: boolean;
              startCursor?: string | null;
              endCursor?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberKymDetailsBioQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberKymDetailsBioQuery = {
  members: {
    memberOverviewV2?: {
      bio?: {
        data?:
          | {
              __typename: 'CoopBio';
              basicInfo?: {
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                registrationNo?: string | null;
                registrationOffice?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              registeredAddress?: AddressFragment | null;
              operatingAddress?: AddressFragment | null;
              contactDetails?: {
                email?: string | null;
                website?: string | null;
                phone?: string | null;
              } | null;
              currentMemberDetails?: {
                noOfMaleMembers?: number | null;
                noOfFemaleMembers?: number | null;
                noOfOtherMembers?: number | null;
                lastAuditDate?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              representativeDetails?: {
                name?: string | null;
                designation?: string | null;
                contactNumber?: string | null;
                email?: string | null;
                panVatNo?: string | null;
                address?: AddressFragment | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null;
              additionalCoopDetails?: {
                coopType?: string | null;
                mainServiceProduct?: string | null;
              } | null;
              employeeDetails?: {
                male?: number | null;
                female?: number | null;
                other?: number | null;
                total?: number | null;
              } | null;
              equityLiabilities?: {
                shareCapital?: string | null;
                reserveAndSurplus?: string | null;
                savingDeposit?: string | null;
                loanAccount?: string | null;
                capitalGrant?: string | null;
                total?: string | null;
              } | null;
              assetDetails?: {
                cashAndEquivalents?: string | null;
                bank?: string | null;
                investments?: string | null;
                loan?: string | null;
                nonCurrentAssets?: string | null;
                otherNonCurrentAssets?: string | null;
                other?: string | null;
              } | null;
              partnerDirectorDetails?: Array<{
                name?: string | null;
                designation?: string | null;
                dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
                highestQualification?: string | null;
                mobileNo?: string | null;
                email?: string | null;
                citizenshipNo?: string | null;
                panNo?: string | null;
                permAddress?: AddressFragment | null;
                tempAddress?: AddressFragment | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              operatorDetails?: Array<{
                name?: string | null;
                contactNo?: string | null;
                email?: string | null;
                panNo?: string | null;
                pemAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
            }
          | {
              __typename: 'CoopUnionBio';
              basicInfo?: {
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                type?: string | null;
                nature?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                vatPanNo?: string | null;
                noOfServiceCenters?: number | null;
              } | null;
              address?: AddressFragment | null;
              registrationDetails?: {
                registeredNo?: string | null;
                issuingOffice?: string | null;
                address?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
              } | null;
              operatingAddress?: AddressFragment | null;
              serviceCenterAddress?: AddressFragment | null;
              contactDetails?: {
                phoneNo?: string | null;
                fax?: string | null;
                email?: string | null;
                website?: string | null;
                poBoxNo?: string | null;
                noOfEmployees?: number | null;
                agmDetails?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              bankAccDetails?: {
                bank?: string | null;
                accountNumber?: string | null;
                accountName?: string | null;
              } | null;
              applicantDetails?: {
                name?: string | null;
                designation?: string | null;
                contactNo?: string | null;
                email?: string | null;
                panNo?: string | null;
                address?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null;
              memberInfo?: {
                noOfMaleCurrent?: number | null;
                noOfFemaleCurrent?: number | null;
                noOfInstitutionalCurrent?: number | null;
                noOfMaleTarget?: number | null;
                noOfFemaleTarget?: number | null;
                noOfInstitutionalTarget?: number | null;
                totalCurrent?: number | null;
                totalTarget?: number | null;
              } | null;
              partnerDirectorDetails?: Array<{
                name?: string | null;
                designation?: string | null;
                email?: string | null;
                panNo?: string | null;
                mobileNo?: string | null;
                permAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              operatorDetails?: Array<{
                name?: string | null;
                designation?: string | null;
                contactNo?: string | null;
                email?: string | null;
                panNo?: string | null;
                pemAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              equityLiabilities?: {
                shareCapitalCurrent?: number | null;
                reserveAndSurplusCurrent?: number | null;
                savingDepositCurrent?: number | null;
                loanAccountCurrent?: number | null;
                capitalGrantCurrent?: number | null;
                liabilitiesPayableCurrent?: number | null;
                nonCurrentLiabilitiesCurrent?: number | null;
                totalCurrent?: number | null;
                shareCapitalTarget?: number | null;
                reserveAndSurplusTarget?: number | null;
                savingDepositTarget?: number | null;
                loanAccountTarget?: number | null;
                capitalGrantTarget?: number | null;
                liabilitiesPayableTarget?: number | null;
                nonCurrentLiabilitiesTarget?: number | null;
                totalTarget?: number | null;
              } | null;
              assetDetails?: {
                cashAndEquivalentsCurrent?: number | null;
                bankCurrent?: number | null;
                investmentsCurrent?: number | null;
                loanCurrent?: number | null;
                nonCurrentAssetsCurrent?: number | null;
                otherNonCurrentAssetsCurrent?: number | null;
                totalCurrent?: number | null;
                cashAndEquivalentsTarget?: number | null;
                bankTarget?: number | null;
                investmentsTarget?: number | null;
                loanTarget?: number | null;
                nonCurrentAssetsTarget?: number | null;
                otherNonCurrentAssetsTarget?: number | null;
                totalTarget?: number | null;
              } | null;
              incomeDetails?: {
                financialInvestment?: number | null;
                nonFinancialInvestment?: number | null;
                investment?: number | null;
                serviceOperations?: number | null;
                sales?: number | null;
                otherIncome?: number | null;
                miscIncome?: number | null;
                total?: number | null;
              } | null;
              expenseDetails?: {
                purchase?: number | null;
                directExpense?: number | null;
                adminExpense?: number | null;
                financialCost?: number | null;
                riskManagement?: number | null;
                deferredTax?: number | null;
                total?: number | null;
              } | null;
              docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
            }
          | {
              __typename: 'IndividualBio';
              memberName?: string | null;
              profilePic?: string | null;
              memberCode?: string | null;
              memberJoined?: Record<'local' | 'en' | 'np', string> | null;
              dob?: Record<'local' | 'en' | 'np', string> | null;
              gender?: Record<'local' | 'en' | 'np', string> | null;
              mobile?: string | null;
              email?: string | null;
              currentAddress?: Record<'local' | 'en' | 'np', string> | null;
              permanentAddress?: Record<'local' | 'en' | 'np', string> | null;
              maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
              familyMembers?: Array<{
                relationship?: string | null;
                fullName?: string | null;
                dob?: Record<'local' | 'en' | 'np', string> | null;
              } | null> | null;
              docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
            }
          | {
              __typename: 'InstitutionBio';
              basicInfo?: {
                memberName?: string | null;
                profilePic?: string | null;
                memberCode?: string | null;
                memberJoined?: Record<'local' | 'en' | 'np', string> | null;
                type?: string | null;
                nature?: string | null;
                registrationDate?: Record<'local' | 'en' | 'np', string> | null;
                vatPanNo?: string | null;
                noOfServiceCenters?: number | null;
              } | null;
              addressDetails?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              registrationDetails?: {
                registeredNumber?: string | null;
                issuingOffice?: string | null;
                address?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
              } | null;
              operatingOfficeAddress?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              serviceCenterOfficeAddress?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              contactDetails?: {
                phoneNumber?: string | null;
                fax?: string | null;
                email?: string | null;
                website?: string | null;
                poBoxNo?: string | null;
                noOfEmployees?: number | null;
                agmDetails?: Record<'local' | 'en' | 'np', string> | null;
              } | null;
              bankAcDetails?: {
                bank?: string | null;
                accountNumber?: string | null;
                accountName?: string | null;
              } | null;
              partnerDirectorDetails?: Array<{
                name?: string | null;
                dateOfMembership?: Record<'local' | 'en' | 'np', string> | null;
                highestQualification?: string | null;
                mobileNo?: string | null;
                email?: string | null;
                citizenshipNo?: string | null;
                panNo?: string | null;
                permAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              operatorDetails?: Array<{
                name?: string | null;
                contactNo?: string | null;
                email?: string | null;
                panNo?: string | null;
                pemAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                tempAddress?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
                docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
              } | null> | null;
              transactionProfileDetails?: {
                nature?: string | null;
                annualTurnover?: string | null;
                initialDepositAmount?: string | null;
                expectedMonthlyTurnover?: string | null;
                expectedMonthlyTransaction?: string | null;
              } | null;
              sisterConcernDetails?: Array<{
                name?: Record<'local' | 'en' | 'np', string> | null;
                address?: string | null;
                phone?: string | null;
                natureOfBusiness?: string | null;
              } | null> | null;
              operatorInstructionDetails?: {
                accountType?: string | null;
                stampCompulsory?: boolean | null;
                specialInstruction?: string | null;
              } | null;
              declaration?: {
                name?: string | null;
                phoneNo?: string | null;
                email?: string | null;
                address?: {
                  state?: Record<'local' | 'en' | 'np', string> | null;
                  district?: Record<'local' | 'en' | 'np', string> | null;
                  localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                  wardNo?: string | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                } | null;
              } | null;
              docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
            }
          | null;
      } | null;
    } | null;
  };
};

export type GetMemberKymDetailsWithdrawSlipsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberKymDetailsWithdrawSlipsQuery = {
  members: {
    memberOverviewV2?: {
      cheques?: {
        data?: Array<{
          accountId?: string | null;
          accountName?: string | null;
          issued?: number | null;
          used?: number | null;
          left?: number | null;
          cancelled?: number | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetMemberKymDetailsReportQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberKymDetailsReportQuery = {
  members: {
    memberOverviewV2?: {
      reports?: {
        data?: {
          list?: Array<{
            code?: string | null;
            reportName?: string | null;
            category?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberPdfQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberPdfQuery = { members: { memberPDF: string } };

export type GetAccountingExternalLoanStatementReportQueryVariables = Exact<{
  data: ExternalLoanStatementReportFilter;
}>;

export type GetAccountingExternalLoanStatementReportQuery = {
  report: {
    accountingReport: {
      externalLoanStatementReport: {
        data?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          particulars?: string | null;
          transactionId?: string | null;
          receivedPrincipal?: string | null;
          paidPrincipal?: string | null;
          paidInterest?: string | null;
          paidFine?: string | null;
          discount?: string | null;
          remainingPrincipal?: string | null;
        } | null> | null;
        summary?: {
          paidPrincipalTotal?: string | null;
          paidInterestTotal?: string | null;
          paidFineTotal?: string | null;
          discountTotal?: string | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetAccountingExternalLoanReportQueryVariables = Exact<{
  data: ExternalLoanReportFilter;
}>;

export type GetAccountingExternalLoanReportQuery = {
  report: {
    accountingReport: {
      externalLoanReport: {
        data?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          organizationName?: string | null;
          organizationBranch?: string | null;
          loanNumber?: string | null;
          loanId?: string | null;
          mortgage?: MortageType | null;
          loanApprovedDate?: Record<'local' | 'en' | 'np', string> | null;
          interestRate?: number | null;
          maturityDate?: Record<'local' | 'en' | 'np', string> | null;
          principalPaidAmount?: string | null;
          interestPaidAmount?: string | null;
          outstandingLoanAmount?: string | null;
          rebate?: string | null;
          finePaid?: string | null;
          totalPaid?: string | null;
          installmentType?: LoanRepaymentScheme | null;
          installmentFrequency?: InstallmentFrequency | null;
          tenure?: number | null;
          remainingTenure?: number | null;
          loanClosedDate?: Record<'local' | 'en' | 'np', string> | null;
          relatedBranch?: string | null;
          loanAmount?: string | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
        summary?: {
          totalFinePaid?: string | null;
          totalInterestAmount?: string | null;
          totalLoanAmount?: string | null;
          totalOfTotalPaid?: string | null;
          totalOutstandingLoanAmount?: string | null;
          totalPrincipalAmount?: string | null;
          totalRebate?: string | null;
        } | null;
      };
    };
  };
};

export type GetFdInvestmentStatementReportQueryVariables = Exact<{
  data: FdInvestmentStatementReportFilter;
}>;

export type GetFdInvestmentStatementReportQuery = {
  report: {
    accountingReport: {
      fdInvestmentStatementReport: {
        data?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          chequeNo?: string | null;
          transactionAmount?: string | null;
          transactionType?: InvestmentTransactionType | null;
          particulars?: string | null;
        } | null> | null;
        summary?: { fdAmountTotal?: string | null; openingBalance?: string | null } | null;
      };
    };
  };
};

export type GetFdInvestmentReportQueryVariables = Exact<{
  data: FdInvestmentReportFilter;
}>;

export type GetFdInvestmentReportQuery = {
  report: {
    accountingReport: {
      fdInvestmentReport: {
        data?: Array<{
          organizationName?: string | null;
          organizationBranch?: string | null;
          fdAmount?: string | null;
          fdAccountName?: string | null;
          fdOpeningDate?: Record<'local' | 'en' | 'np', string> | null;
          fdType?: FdInvestmentType | null;
          interestRate?: number | null;
          maturityDate?: Record<'local' | 'en' | 'np', string> | null;
          nomineeBankAccountNo?: string | null;
          remainingTenure?: number | null;
          tenure?: number | null;
        } | null> | null;
      };
    };
  };
};

export type GetBranchReportQueryVariables = Exact<{
  data?: InputMaybe<BranchReportFilter>;
}>;

export type GetBranchReportQuery = {
  report: {
    branchReport: {
      branchReport?: {
        data?: Array<{
          id: string;
          serviceCenterCode?: string | null;
          name?: string | null;
          contactNumber?: string | null;
          email?: string | null;
          managerName?: string | null;
          managerContact?: string | null;
          isExtensionCounter?: boolean | null;
          estDate?: Record<'local' | 'en' | 'np', string> | null;
          branchStatus?: boolean | null;
          remarks?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetServiceCenterCoaBalanceReportQueryVariables = Exact<{
  data: ServiceCenterCoaWiseBalanceFilter;
}>;

export type GetServiceCenterCoaBalanceReportQuery = {
  report: {
    branchReport: {
      serviceCenterCOAWiseBalanceReport: {
        data?: {
          total?: Record<string, string> | null;
          entries?: Array<{
            ServiceCenterName?: string | null;
            balanceMap?: Record<string, string> | null;
            serviceCenterId?: string | null;
            serviceCenterCode?: string | null;
          } | null> | null;
        } | null;
      };
    };
  };
};

export type GetBranchReadinessReportQueryVariables = Exact<{ [key: string]: never }>;

export type GetBranchReadinessReportQuery = {
  report: {
    branchReport: {
      branchReadinessReport: {
        data?: Array<{
          branchName?: string | null;
          branchCode?: string | null;
          status?: boolean | null;
        } | null> | null;
      };
    };
  };
};

export type GetCashLedgerReportQueryVariables = Exact<{
  data?: InputMaybe<CashLedgerReportFilterData>;
}>;

export type GetCashLedgerReportQuery = {
  report: {
    cashReport: {
      cashLedgerReport?: {
        openingBalance?: string | null;
        closingBalance?: string | null;
        summary?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          ledgerCode?: string | null;
          particular?: string | null;
          voucherNo?: string | null;
          cashDr?: string | null;
          cashCr?: string | null;
          balance?: string | null;
        } | null> | null;
        details?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          ledgerCode?: string | null;
          particular?: string | null;
          voucherNo?: string | null;
          cashDr?: string | null;
          cashCr?: string | null;
          balance?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetCopomisImportMemberReportQueryVariables = Exact<{
  data?: InputMaybe<CopomisReportFilter>;
}>;

export type GetCopomisImportMemberReportQuery = {
  report: {
    memberReport: {
      copomisReport?: {
        data?: Array<{
          address?: Record<'local' | 'en' | 'np', string> | null;
          memberNameEn?: string | null;
          memberNameNp?: string | null;
          memberId?: string | null;
          memberRegistrationDate?: Record<'local' | 'en' | 'np', string> | null;
          membershipNo?: string | null;
          shareCertificateNo?: string | null;
          totalShare?: number | null;
          castRecordId?: number | null;
          citizenshipIssuedDate?: Record<'local' | 'en' | 'np', string> | null;
          citizenshipIssuedDistrictId?: number | null;
          citizenshipNo?: string | null;
          dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
          fatherHusbandName?: string | null;
          genderRecordId?: number | null;
          grandfatherName?: string | null;
          maritalStatusId?: number | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetAccountOpeningReportQueryVariables = Exact<{
  data?: InputMaybe<AccountOpeningReportInput>;
}>;

export type GetAccountOpeningReportQuery = {
  report: {
    depositReport: {
      accountOpeningReport?: {
        data?: Array<{
          accountName?: string | null;
          accountNumber?: string | null;
          memberCode?: string | null;
          memberId?: string | null;
          openedBy?: string | null;
          openingDate?: Record<'local' | 'en' | 'np', string> | null;
          branchId?: string | null;
          branchName?: string | null;
          nature?: NatureOfDepositProduct | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetDepositAccountClosingReportQueryVariables = Exact<{
  data?: InputMaybe<AccountClosingReportInput>;
}>;

export type GetDepositAccountClosingReportQuery = {
  report: {
    depositReport: {
      accountClosingReport?: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          accountNumber?: string | null;
          accountName?: string | null;
          openingDate?: Record<'local' | 'en' | 'np', string> | null;
          closingDate?: Record<'local' | 'en' | 'np', string> | null;
          closedBalance?: string | null;
          closedBy?: string | null;
          branchId?: string | null;
          branchName?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetAccountClosingReportQueryVariables = Exact<{
  data?: InputMaybe<AccountClosingReportInput>;
}>;

export type GetAccountClosingReportQuery = {
  report: {
    depositReport: {
      accountClosingReport?: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          accountNumber?: string | null;
          accountName?: string | null;
          openingDate?: Record<'local' | 'en' | 'np', string> | null;
          closingDate?: Record<'local' | 'en' | 'np', string> | null;
          closedBalance?: string | null;
          branchName?: string | null;
          branchId?: string | null;
          closedBy?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetInterestTaxReportQueryVariables = Exact<{
  data: InterestTaxReportFilter;
}>;

export type GetInterestTaxReportQuery = {
  report: {
    depositReport: {
      interestTaxReport: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          name?: Record<'local' | 'en' | 'np', string> | null;
          panNo?: string | null;
          accountNo?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          interest?: string | null;
          tax?: string | null;
          savingBalance?: string | null;
          closingBalance?: string | null;
          remarks?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
      };
    };
  };
};

export type GetTtrReportQueryVariables = Exact<{
  data: TtrReportFilter;
}>;

export type GetTtrReportQuery = {
  report: {
    depositReport: {
      thresholdTransactionReport: {
        data?: {
          yearly?: Array<{
            name?: Record<'local' | 'en' | 'np', string> | null;
            memberId?: string | null;
            branch?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            nature?: NatureOfTransaction | null;
            accountNo?: string | null;
            amount?: string | null;
            sourceOfFund?: string | null;
            remarks?: string | null;
            address?: AddressFragment | null;
          } | null> | null;
          perTranx?: Array<{
            name?: Record<'local' | 'en' | 'np', string> | null;
            memberId?: string | null;
            branch?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            nature?: NatureOfTransaction | null;
            accountNo?: string | null;
            amount?: string | null;
            sourceOfFund?: string | null;
            remarks?: string | null;
            address?: AddressFragment | null;
          } | null> | null;
        } | null;
      };
    };
  };
};

export type GetSavingStatementQueryVariables = Exact<{
  data: SavingStatementReportSettings;
}>;

export type GetSavingStatementQuery = {
  report: {
    depositReport: {
      savingStatementReport?: {
        memberId?: string | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          activeDate?: Record<'local' | 'en' | 'np', string> | null;
          branch?: string | null;
          address?: {
            wardNo?: string | null;
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null;
        statement?:
          | {
              savingStatement?: Array<{
                date?: Record<'local' | 'en' | 'np', string> | null;
                balanceAmount?: string | null;
                depositCr?: string | null;
                chequeOrVoucherNo?: string | null;
                particular?: string | null;
                withdrawDr?: string | null;
              } | null> | null;
              totals?: {
                totalBalance?: string | null;
                totalWithdraw?: string | null;
                totalDeposit?: string | null;
              } | null;
              meta?: {
                currentInterestRate?: number | null;
                accountNo?: string | null;
                savingType?: string | null;
              } | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetInterestStatementReportQueryVariables = Exact<{
  data: InterestStatementFilter;
}>;

export type GetInterestStatementReportQuery = {
  report: {
    depositReport: {
      interestStatementReport: {
        data?: {
          memberId?: string | null;
          accountNo?: string | null;
          accountType?: NatureOfDepositProduct | null;
          currentInterestRate?: number | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          entries?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            amount?: string | null;
            balance?: string | null;
            days?: number | null;
            rate?: number | null;
            remarks?: string | null;
            tds?: string | null;
          } | null> | null;
          address?: {
            wardNo?: string | null;
            state?: Record<'local' | 'en' | 'np', string> | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null;
      };
    };
  };
};

export type GetSuspiciousTransactionReportQueryVariables = Exact<{
  data: SuspiciousTransactionReportInput;
}>;

export type GetSuspiciousTransactionReportQuery = {
  report: {
    depositReport: {
      suspiciousTransctionReport?: {
        data?: Array<{
          id?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          memberId?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          product_name?: string | null;
          tranxType?: NatureOfTransaction | null;
          status?: boolean | null;
          branchId?: string | null;
          branchName?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetFixedDepositReportQueryVariables = Exact<{
  data: FixedDepositReportInput;
}>;

export type GetFixedDepositReportQuery = {
  report: {
    depositReport: {
      fixedDepositReport?: {
        data?: Array<{
          memberID?: string | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          accountOpenDate?: Record<'local' | 'en' | 'np', string> | null;
          serviceCenter?: string | null;
          mobileNo?: string | null;
          accountName?: string | null;
          accountNo?: string | null;
          expiryDate?: Record<'local' | 'en' | 'np', string> | null;
          nomineeAccountNo?: string | null;
          fdAmount?: string | null;
          interestAmount?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetClosedSavingAccountStatementQueryVariables = Exact<{
  data: ClosedSavingAccountInput;
}>;

export type GetClosedSavingAccountStatementQuery = {
  report: {
    depositReport: {
      closedSavingAccountReport?: {
        data?: {
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          memberShipCode?: string | null;
          membershipDate?: Record<'local' | 'en' | 'np', string> | null;
          serviceCenterName?: string | null;
          accountNo?: string | null;
          savingType?: string | null;
          closedDate?: Record<'local' | 'en' | 'np', string> | null;
          totalWithdraw?: string | null;
          totalDeposit?: string | null;
          address?: AddressFragment | null;
          entries?: Array<{
            balanceAmount?: string | null;
            balanceType?: BalanceType | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            transactionID?: string | null;
            withdrawAmount?: string | null;
            depositAmount?: string | null;
            particular?: string | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type GetSavingProductBalanceQueryVariables = Exact<{
  data: SavingProductBalanceFilter;
}>;

export type GetSavingProductBalanceQuery = {
  report: {
    depositReport: {
      savingProductBalanceReport: {
        data?: {
          accountTotal?: unknown | null;
          balanceTotal?: unknown | null;
          entries?: Array<{
            balanceMap?: unknown | null;
            code?: string | null;
            id?: string | null;
            name?: string | null;
            nature?: NatureOfDepositProduct | null;
            noOfAccountsMap?: unknown | null;
          } | null> | null;
        } | null;
      };
    };
  };
};

export type GetDormantAccountReportQueryVariables = Exact<{
  data?: InputMaybe<DormantAccountReportInput>;
}>;

export type GetDormantAccountReportQuery = {
  report: {
    depositReport: {
      dormantAccountReport?: {
        data?: Array<{
          memberID?: string | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          serviceCenter?: string | null;
          memberRegistrationDate?: Record<'local' | 'en' | 'np', string> | null;
          mobileNo?: string | null;
          productName?: string | null;
          accountName?: string | null;
          accountNo?: string | null;
          accountOpenDate?: Record<'local' | 'en' | 'np', string> | null;
          balance?: string | null;
          reason?: string | null;
          remarks?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetSavingAccountAccruedInterestReportQueryVariables = Exact<{
  data: AccruedInterestFilter;
}>;

export type GetSavingAccountAccruedInterestReportQuery = {
  report: {
    depositReport: {
      savingAccruedInterestReport: {
        data?: Array<{
          balance: string;
          date: Record<'local' | 'en' | 'np', string>;
          interestAccrued: string;
          interestRate?: number | null;
          transactionId?: string | null;
        } | null> | null;
        basicInfo?: {
          memberName: string;
          accountId: string;
          accountName: string;
          accountType: NatureOfDepositProduct;
          currentInterestRate: number;
          memberCode: string;
          memberId: string;
          membershipDate: Record<'local' | 'en' | 'np', string>;
          serviceCentreId: string;
          serviceCentreName: string;
          address?: AddressFragment | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetEtdsStatementQueryVariables = Exact<{
  data: EtdsReportFilter;
}>;

export type GetEtdsStatementQuery = {
  report: {
    depositReport: {
      ETDSReport: {
        data?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          branchId?: string | null;
          interest?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          panNo?: string | null;
          tax?: string | null;
          tdsType?: string | null;
        } | null> | null;
      };
    };
  };
};

export type GetUserReportQueryVariables = Exact<{
  data?: InputMaybe<UserReportFilter>;
}>;

export type GetUserReportQuery = {
  report: {
    employeeReport: {
      userReport?: {
        data?: Array<{
          isCoreEmployee?: boolean | null;
          employeeName?: string | null;
          empCode?: string | null;
          username?: string | null;
          usernameCode?: string | null;
          accessForBranch?: string | null;
          accessForGroup?: string | null;
          role?: string | null;
          createdDate?: Record<'local' | 'en' | 'np', string> | null;
          createdBy?: string | null;
          status?: string | null;
          remarks?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetExceptionSavingsBalanceReportQueryVariables = Exact<{
  data: SavingsBalanceFilterData;
}>;

export type GetExceptionSavingsBalanceReportQuery = {
  report: {
    exceptionReport: {
      savingsBalanceReport: {
        totalDrBalance?: string | null;
        totalCrBalance?: string | null;
        interestType?: BalanceType | null;
        totalInterest?: string | null;
        data?: Array<{
          accountId?: string | null;
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          productId?: string | null;
          productName?: string | null;
          productCode?: string | null;
          accountOpeningDate?: Record<'local' | 'en' | 'np', string> | null;
          memberType?: KymMemberTypesEnum | null;
          drBalance?: string | null;
          crBalance?: string | null;
          currentInterestType?: BalanceType | null;
          currentInterestRate?: number | null;
          currentInterest?: string | null;
          endDate?: Record<'local' | 'en' | 'np', string> | null;
          branchId?: string | null;
          branchName?: string | null;
          isInactive?: boolean | null;
          isClosed?: boolean | null;
        } | null> | null;
        summary?: {
          totalIndividualAccount?: number | null;
          totalMinorAccount?: number | null;
          totalOtherAccount?: number | null;
        } | null;
      };
    };
  };
};

export type GetExceptionLoanBalanceReportQueryVariables = Exact<{
  data: LoanBalanceFilterData;
}>;

export type GetExceptionLoanBalanceReportQuery = {
  report: {
    exceptionReport: {
      loanBalanceReport: {
        totalOutstandingBalance?: string | null;
        totalRemainingDrBalance?: string | null;
        totalRemainingCrBalance?: string | null;
        totalRemainingInterest?: string | null;
        totalRemainingInterestType?: BalanceType | null;
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          loanAccountId?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          productName?: string | null;
          productId?: string | null;
          productCode?: string | null;
          disbursedBalance?: string | null;
          remainingCrBalance?: string | null;
          remainingDrBalance?: string | null;
          remainingInterest?: string | null;
          lastPaymentDate?: Record<'local' | 'en' | 'np', string> | null;
          branchId?: string | null;
          branchName?: string | null;
          loanEndDate?: Record<'local' | 'en' | 'np', string> | null;
          interestRate?: number | null;
          loanType?: AllLoanType | null;
          isInactive?: boolean | null;
          isClosed?: boolean | null;
          remainingInterestType?: BalanceType | null;
        } | null> | null;
      };
    };
  };
};

export type GetExceptionShareBalanceReportQueryVariables = Exact<{
  data: ShareBalanceReportFilter;
}>;

export type GetExceptionShareBalanceReportQuery = {
  report: {
    exceptionReport: {
      shareBalanceReport: {
        totalBalance?: string | null;
        data?: Array<{
          shareType?: string | null;
          shareCertificateNo?: string | null;
          memberId?: string | null;
          isInactive?: boolean | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          contactNo?: string | null;
          membershipDate?: Record<'local' | 'en' | 'np', string> | null;
          noOfKitta?: number | null;
          balance?: string | null;
          branchId?: string | null;
          branchName?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetInventoryRegisterReportQueryVariables = Exact<{
  data?: InputMaybe<InventoryRegistrationFilter>;
}>;

export type GetInventoryRegisterReportQuery = {
  report: {
    inventoryReport: {
      inventoryRegistrationReport?: {
        data?: Array<{
          itemId: string;
          itemName: string;
          quantityPurchased: string;
          quantitySoled?: string | null;
          quantityInStock?: string | null;
          pricePerUnit: string;
          stockValue?: string | null;
          vatPercent: string;
          vatAmount?: string | null;
          stockValueVat?: string | null;
          reorderQuantityLevel?: string | null;
        } | null> | null;
        total?: {
          totalQuantityPurchased: string;
          totalQuantitySoled?: string | null;
          totalQuantityInStock?: string | null;
          totalStockValue?: string | null;
          totalVatAmount?: string | null;
          totalStockValueVat?: string | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetInventoryStockStatusReportQueryVariables = Exact<{
  data?: InputMaybe<InventoryStockStatusFilter>;
}>;

export type GetInventoryStockStatusReportQuery = {
  report: {
    inventoryReport: {
      newinventoryStockStatusreport?: {
        data?: Array<{
          upper?: {
            itemCode: string;
            itemName: string;
            warehouseId: string;
            warehouseName: string;
            totalPurchased: string;
            totalSoled: string;
            totalNet: string;
            totalTransferIn: string;
            totalTransferOut: string;
          } | null;
          lower?: Array<{
            purchasedQuantity: string;
            soldQuantity: string;
            purchasedDate?: Record<'local' | 'en' | 'np', string> | null;
            soldDate?: Record<'local' | 'en' | 'np', string> | null;
            transferAcceptQuantity: string;
            transferAcceptDate?: Record<'local' | 'en' | 'np', string> | null;
            transferSentQuantity: string;
            transferSentDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetInventorySalesReportQueryVariables = Exact<{
  data: SalesReportFilter;
}>;

export type GetInventorySalesReportQuery = {
  report: {
    accountingReport: {
      salesReport: {
        summationData?: {
          totalPerQuantityPrice: string;
          totalPrice: string;
          totalPriceWithVat: string;
          totalQuantitySold: string;
          totalVatAmount: string;
        } | null;
        data?: Array<{
          itemId: string;
          itemName: string;
          unitName: string;
          selligPrice: string;
          soldQuantity: string;
          totalPrice: string;
          vatAmount: string;
          netAmountWithVat: string;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      };
    };
  };
};

export type GetLoanBalanceReportQueryVariables = Exact<{
  data: LoanBalanceFilterData;
}>;

export type GetLoanBalanceReportQuery = {
  report: {
    loanReport: {
      loanBalanceReport: {
        totalOutstandingBalance?: string | null;
        totalRemainingDrBalance?: string | null;
        totalRemainingCrBalance?: string | null;
        totalRemainingInterest?: string | null;
        totalRemainingInterestType?: BalanceType | null;
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          loanAccountId?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          productName?: string | null;
          productId?: string | null;
          productCode?: string | null;
          disbursedBalance?: string | null;
          remainingCrBalance?: string | null;
          remainingDrBalance?: string | null;
          remainingInterest?: string | null;
          lastPaymentDate?: Record<'local' | 'en' | 'np', string> | null;
          branchId?: string | null;
          branchName?: string | null;
          loanEndDate?: Record<'local' | 'en' | 'np', string> | null;
          interestRate?: number | null;
          loanType?: AllLoanType | null;
          remainingInterestType?: BalanceType | null;
        } | null> | null;
      };
    };
  };
};

export type GetLoanAgingStatementReportQueryVariables = Exact<{
  data: LoanAgingStatementInput;
}>;

export type GetLoanAgingStatementReportQuery = {
  report: {
    loanReport: {
      loanAgingStatementReport?: {
        data?: {
          report?: Array<{
            memberNo?: string | null;
            memberName?: string | null;
            loanNo?: string | null;
            name?: string | null;
            address?: string | null;
            phoneNo?: string | null;
            loanType?: string | null;
            paymentMode?: string | null;
            issueDate?: Record<'local' | 'en' | 'np', string> | null;
            loanMaturityDate?: Record<'local' | 'en' | 'np', string> | null;
            disbursePrincipal?: string | null;
            remainingPrincipal?: string | null;
            installmentAmount?: string | null;
            remainingInstallmentAmount?: string | null;
            remainingInterest?: string | null;
            remainingPenalty?: string | null;
            totalDueAmount?: string | null;
            goodAmount?: string | null;
            matured1To30Days?: string | null;
            matured1To12Months?: string | null;
            maturedAbove12Months?: string | null;
            lastPrincipalPaidDate?: Record<'local' | 'en' | 'np', string> | null;
            lastInterestPaidDate?: Record<'local' | 'en' | 'np', string> | null;
            installmentLateDays?: number | null;
            nextPaymentDate?: Record<'local' | 'en' | 'np', string> | null;
            tenure?: string | null;
            branchId?: string | null;
            branchName?: string | null;
          } | null> | null;
          summary?: {
            disbursePrincipalTotal?: string | null;
            remainingPrincipalTotal?: string | null;
            installmentAmountTotal?: string | null;
            remainingInstallmentAmountTotal?: string | null;
            remainingInterestTotal?: string | null;
            remainingPenaltyTotal?: string | null;
            dueAmountTotal?: string | null;
            goodAmountTotal?: string | null;
            matured1To30DaysTotal?: string | null;
            matured1To12MonthsTotal?: string | null;
            maturedAbove12MonthsTotal?: string | null;
          } | null;
        } | null;
      } | null;
    };
  };
};

export type GetLoanStatementReportQueryVariables = Exact<{
  data: LoanStatementReportSettings;
}>;

export type GetLoanStatementReportQuery = {
  report: {
    loanReport: {
      loanStatementReport?: {
        memberId?: string | null;
        member?: {
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          branch?: string | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null;
        statement?:
          | {
              meta?: {
                accountNo?: string | null;
                approvedAmount?: string | null;
                interestRate?: number | null;
                loanType?: string | null;
                loanSubtype?: string | null;
                issuedDate?: Record<'local' | 'en' | 'np', string> | null;
                installment?: number | null;
                charge?: string | null;
                openingBalance?: string | null;
                disbursedAmount?: string | null;
              } | null;
              loanStatement?: Array<{
                date?: Record<'local' | 'en' | 'np', string> | null;
                particular?: string | null;
                txnId?: string | null;
                disbursePrinciple?: string | null;
                paidPrinciple?: string | null;
                interestPaid?: string | null;
                finePaid?: string | null;
                discount?: string | null;
                remainingPrinciple?: string | null;
              } | null> | null;
              footer?: {
                disbursePrincipleTotal?: string | null;
                paidPrincipleTotal?: string | null;
                interestPaidTotal?: string | null;
                penaltyPaidTotal?: string | null;
                discountTotal?: string | null;
                remainingPrincipleTotal?: string | null;
                openingBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
                closingBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
              } | null;
            }
          | {}
          | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetClosedLoanAccountReportQueryVariables = Exact<{
  data?: InputMaybe<ClosedLoanAccountFilter>;
}>;

export type GetClosedLoanAccountReportQuery = {
  report: {
    loanReport: {
      closedLoanAccountStatementReport?: {
        data?: Array<{
          date?: Record<'local' | 'en' | 'np', string> | null;
          disbursedPrincipal?: string | null;
          discount?: string | null;
          finePaid?: string | null;
          interestPaid?: string | null;
          particular?: string | null;
          principalPaid?: string | null;
          remainingPrincipal?: string | null;
          transactionId?: string | null;
        } | null> | null;
        meta?: {
          address?: Record<'local' | 'en' | 'np', string> | null;
          memberCode?: string | null;
          memberId?: string | null;
          memberName?: string | null;
          noOfInstallments?: number | null;
          approvedAmount?: string | null;
          branchName?: string | null;
          interestRate?: number | null;
          loanAccountNo?: string | null;
          loanClosedDate?: Record<'local' | 'en' | 'np', string> | null;
          loanIssuedDate?: Record<'local' | 'en' | 'np', string> | null;
          loanProcessingCharge?: string | null;
          loanSubtype?: string | null;
          loanType?: string | null;
        } | null;
        summary?: {
          remainingPrincipal?: string | null;
          totalDisbursedPrincipal?: string | null;
          totalDiscount?: string | null;
          totalFinePaid?: string | null;
          totalInterestPaid?: string | null;
          totalPrincipalPaid?: string | null;
        } | null;
      } | null;
    };
  };
};

export type GetLoanCollateralReportQueryVariables = Exact<{
  data: LoanCollateralFilter;
}>;

export type GetLoanCollateralReportQuery = {
  report: {
    loanReport: {
      loanCollateralReport?: {
        data?: Array<{
          loanAccountNo?: string | null;
          loanAccountType?: string | null;
          loanDisbursedAmount?: string | null;
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: string | null;
          remainingPrincipal?: string | null;
          collateralInformation?: Array<{
            collateralDescription?: string | null;
            collateralType?: string | null;
            dvMinAmount?: string | null;
            fmvMaxAmount?: string | null;
            ownerName?: string | null;
            valuationMethod?: string | null;
            valuationAmount?: string | null;
            valuatorName?: string | null;
            status?: GuaranteeStatus | null;
          } | null> | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetLoanPersonalGuranteeReportQueryVariables = Exact<{
  data?: InputMaybe<LoanAccountGuaranteeReportInput>;
}>;

export type GetLoanPersonalGuranteeReportQuery = {
  report: {
    loanReport: {
      personalGuaranteeReport?: {
        data?: Array<{
          disbursedAmount?: string | null;
          loanAccountNo?: string | null;
          memberCode?: string | null;
          memberId?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          totalGuaranteeAmount?: string | null;
          guarantorInformantion?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            depositAccountNo?: string | null;
            guaranteeAmount?: string | null;
            memCode?: string | null;
            memId?: string | null;
            memName?: string | null;
            guaranteeStatus?: GuaranteeStatus | null;
          } | null> | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetLoanProductBalanceReportQueryVariables = Exact<{
  data?: InputMaybe<LoanProductBalanceReportFilter>;
}>;

export type GetLoanProductBalanceReportQuery = {
  report: {
    loanReport: {
      loanProductBalance?: {
        data?: Array<{
          productCode?: string | null;
          productId?: string | null;
          productType?: string | null;
          productName?: string | null;
          noOfOpeningAccounts?: number | null;
          noOfTotalAccounts?: number | null;
          openingLoanBalance?: string | null;
          totalLoanBalance?: string | null;
        } | null> | null;
        summary?: {
          noOfOpeningAccounts?: number | null;
          noOfTotalAccounts?: number | null;
          totalLoanBalance?: string | null;
          totalOpeningLoanBalance?: string | null;
        } | null;
      } | null;
    };
  };
};

export type GetLoanCallSheetReportQueryVariables = Exact<{
  data?: InputMaybe<LoanCallReportFilter>;
}>;

export type GetLoanCallSheetReportQuery = {
  report: {
    loanReport: {
      loanCallReport?: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          loanAccountNo?: string | null;
          loanType?: string | null;
          serviceCenter?: string | null;
          installmentDate?: Record<'local' | 'en' | 'np', string> | null;
          installmentAmount?: string | null;
          installmentDueAmount?: string | null;
          installmentDueDays?: number | null;
          totalInstallment?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetLoanAccruedInterestReportQueryVariables = Exact<{
  data: AccruedInterestFilter;
}>;

export type GetLoanAccruedInterestReportQuery = {
  report: {
    loanReport: {
      loanAccruedInterestReport?: {
        data?: Array<{
          transactionId?: string | null;
          interestRate?: number | null;
          interestAccrued: string;
          date: Record<'local' | 'en' | 'np', string>;
          balance: string;
        } | null> | null;
        basicInfo?: {
          serviceCentreName: string;
          serviceCentreId: string;
          membershipDate: Record<'local' | 'en' | 'np', string>;
          memberName: string;
          memberId: string;
          memberCode: string;
          currentInterestRate: number;
          accountType: string;
          accountName: string;
          accountId: string;
          accountSubType: string;
          approvedAmount: string;
          disbursedAmount: string;
          loanIssueDate: Record<'local' | 'en' | 'np', string>;
          noOfInstallment: number;
          address?: AddressFragment | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetDosariReportQueryVariables = Exact<{
  data: DosariReportInput;
}>;

export type GetDosariReportQuery = {
  report: {
    loanReport: {
      dosariLoanReport?: {
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
        summary?: {
          disbursePrincipalTotal?: string | null;
          remainingPrincipalTotal?: string | null;
          installmentAmountTotal?: string | null;
          remainingInstallmentAmountTotal?: string | null;
          remainingInterestTotal?: string | null;
          remainingPenaltyTotal?: string | null;
          dueAmountTotal?: string | null;
          goodAmountTotal?: string | null;
          matured1To30DaysTotal?: string | null;
          matured1To12MonthsTotal?: string | null;
          maturedAbove12MonthsTotal?: string | null;
        } | null;
        data?: Array<{
          designation?: string | null;
          fullName?: string | null;
          phoneNumber?: string | null;
          type?: string | null;
          loanAgingStatementData?: {
            report?: Array<{
              memberNo?: string | null;
              loanNo?: string | null;
              name?: string | null;
              address?: string | null;
              phoneNo?: string | null;
              loanType?: string | null;
              paymentMode?: string | null;
              issueDate?: Record<'local' | 'en' | 'np', string> | null;
              loanMaturityDate?: Record<'local' | 'en' | 'np', string> | null;
              disbursePrincipal?: string | null;
              remainingPrincipal?: string | null;
              installmentAmount?: string | null;
              remainingInstallmentAmount?: string | null;
              remainingInterest?: string | null;
              remainingPenalty?: string | null;
              totalDueAmount?: string | null;
              goodAmount?: string | null;
              matured1To30Days?: string | null;
              matured1To12Months?: string | null;
              maturedAbove12Months?: string | null;
              lastPrincipalPaidDate?: Record<'local' | 'en' | 'np', string> | null;
              lastInterestPaidDate?: Record<'local' | 'en' | 'np', string> | null;
              installmentLateDays?: number | null;
              nextPaymentDate?: Record<'local' | 'en' | 'np', string> | null;
              tenure?: string | null;
              branchId?: string | null;
              branchName?: string | null;
            } | null> | null;
          } | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetLoanWriteOffReportQueryVariables = Exact<{
  data: LoanWriteOffReportFilter;
}>;

export type GetLoanWriteOffReportQuery = {
  report: {
    loanReport: {
      loanWriteOffReport?: {
        data?: Array<{
          memberNo?: string | null;
          memberId?: string | null;
          loanNo?: string | null;
          loanId?: string | null;
          name?: string | null;
          loanType?: string | null;
          loanIssueDate?: Record<'local' | 'en' | 'np', string> | null;
          loanMaturityDate?: Record<'local' | 'en' | 'np', string> | null;
          disbursedPrincipal?: string | null;
          remainingPrincipal?: string | null;
          writeOffPrincipalAmount?: string | null;
          writeOffInterestAmount?: string | null;
          writeOffFine?: string | null;
          remainingPrincipalAmount?: string | null;
          remainingInterestAmount?: string | null;
          remainingFineAmount?: string | null;
          writeOffDate?: Record<'local' | 'en' | 'np', string> | null;
          writeOffReason?: string | null;
          overdueDays?: number | null;
        } | null> | null;
        summary?: {
          totalDisbursedPrincipal?: string | null;
          totalWriteOffFine?: string | null;
          totalWriteOffInterestAmount?: string | null;
          totalWriteOffPrincipalAmount?: string | null;
          totalRemainingPrincipal?: string | null;
          totalRemainingPrincipalAmount?: string | null;
          totalRemainingInterestAmount?: string | null;
          totalRemainingFine?: string | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetLoanTransactionReportQueryVariables = Exact<{
  data: LoanStatementReportSettings;
}>;

export type GetLoanTransactionReportQuery = {
  report: {
    loanReport: {
      loanTransactionStatementReport?: {
        memberId?: string | null;
        member?: {
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          branch?: string | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null;
        statement?:
          | {
              meta?: {
                accountNo?: string | null;
                approvedAmount?: string | null;
                interestRate?: number | null;
                loanType?: string | null;
                loanSubtype?: string | null;
                issuedDate?: Record<'local' | 'en' | 'np', string> | null;
                installment?: number | null;
                charge?: string | null;
                openingBalance?: string | null;
                disbursedAmount?: string | null;
              } | null;
              loanStatement?: Array<{
                date?: Record<'local' | 'en' | 'np', string> | null;
                particular?: string | null;
                txnId?: string | null;
                disbursePrinciple?: string | null;
                withdrawPrincipal?: string | null;
                paidPrinciple?: string | null;
                interestPaid?: string | null;
                finePaid?: string | null;
                discount?: string | null;
                remainingPrinciple?: string | null;
                ledgerBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
              } | null> | null;
              footer?: {
                disbursePrincipleTotal?: string | null;
                paidPrincipleTotal?: string | null;
                interestPaidTotal?: string | null;
                penaltyPaidTotal?: string | null;
                discountTotal?: string | null;
                remainingPrincipleTotal?: string | null;
                openingBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
                closingBalance?: { amount?: string | null; amountType?: BalanceType | null } | null;
              } | null;
            }
          | {}
          | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetMemberClassificationReportQueryVariables = Exact<{
  data: MemberClassificationFilter;
}>;

export type GetMemberClassificationReportQuery = {
  report: {
    memberReport: {
      memberClassificationReport: {
        data?: {
          gender?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          age?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          occupation?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          education?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          memberCategory?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          income?: Array<{
            entryName?: string | null;
            inNumber?: number | null;
            inPercent?: string | null;
          } | null> | null;
          address?: {
            province?: Array<{
              entryName?: string | null;
              inNumber?: number | null;
              inPercent?: string | null;
            } | null> | null;
            district?: Array<{
              entryName?: string | null;
              inNumber?: number | null;
              inPercent?: string | null;
            } | null> | null;
          } | null;
        } | null;
      };
    };
  };
};

export type GetActiveInactiveMemberReportQueryVariables = Exact<{
  data?: InputMaybe<ActiveInactiveMemberReportData>;
}>;

export type GetActiveInactiveMemberReportQuery = {
  report: {
    memberReport: {
      activeInactiveMemberReport?: {
        statement?:
          | {
              summary?: {
                activeTotal?: number | null;
                inactiveTotal?: number | null;
                totalMember?: number | null;
              } | null;
              reportStatement?: Array<{
                memberId?: string | null;
                memberCode?: string | null;
                memberName?: string | null;
                district?: string | null;
                wardNo?: string | null;
                address?: string | null;
                dob?: Record<'local' | 'en' | 'np', string> | null;
                age?: number | null;
                contactNo?: string | null;
                gender?: string | null;
                pan?: string | null;
                occupation?: string | null;
                memberRegistrationDate?: Record<'local' | 'en' | 'np', string> | null;
                status?: MemberStatus | null;
                memberType?: KymMemberTypesEnum | null;
                branchId?: string | null;
                branchName?: string | null;
              } | null> | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetKymStatusReportQueryVariables = Exact<{
  data?: InputMaybe<KymStatusReportFilter>;
}>;

export type GetKymStatusReportQuery = {
  report: {
    memberReport: {
      kymStatusReport?: {
        Summary?: Record<string, string> | null;
        data?: Array<{
          memberName?: string | null;
          memberId?: string | null;
          memberCode?: string | null;
          contact?: string | null;
          regDate?: Record<'local' | 'en' | 'np', string> | null;
          riskCategory?: RiskCategoryFilter | null;
          lastKymUpdatedDate?: Record<'local' | 'en' | 'np', string> | null;
          kymExpireDays?: string | null;
          kymStatus?: string | null;
          branchId?: string | null;
          branchName?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetMemberRegistrationReportQueryVariables = Exact<{
  data?: InputMaybe<MemberRegistrationReportData>;
}>;

export type GetMemberRegistrationReportQuery = {
  report: {
    memberReport: {
      memberRegistrationReport?: {
        data?: {
          individual?: Array<{
            memberId?: string | null;
            memberCode?: string | null;
            name?: string | null;
            dob?: Record<'local' | 'en' | 'np', string> | null;
            grandFatherName?: string | null;
            fatherName?: string | null;
            SpouseName?: string | null;
            profession?: string | null;
            fingerPrint?: boolean | null;
            photo?: boolean | null;
            contactNo?: string | null;
            email?: string | null;
            other?: string | null;
            address?: AddressFragment | null;
            shareInfo?: {
              perShareAmount?: string | null;
              kitta?: string | null;
              amount?: string | null;
            } | null;
          } | null> | null;
          other?: Array<{
            memberId?: string | null;
            memberCode?: string | null;
            name?: string | null;
            doe?: Record<'local' | 'en' | 'np', string> | null;
            typeOfInstitution?: string | null;
            workingArea?: string | null;
            totalMember?: string | null;
            balanceSheet?: string | null;
            post?: string | null;
            authPersonName?: string | null;
            logo?: boolean | null;
            stamp?: boolean | null;
            contactNo?: string | null;
            email?: string | null;
            other?: string | null;
            address?: AddressFragment | null;
            shareInfo?: {
              perShareAmount?: string | null;
              kitta?: string | null;
              amount?: string | null;
            } | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type GetMemberWiseBalanceReportQueryVariables = Exact<{
  data?: InputMaybe<MemberBalanceFilter>;
}>;

export type GetMemberWiseBalanceReportQuery = {
  report: {
    memberReport: {
      __typename: 'MemberReport';
      memberBalanceReport?: {
        data?: Array<{
          memberCode?: string | null;
          memberId?: string | null;
          memberName?: string | null;
          memberType?: string | null;
          membershipDate?: Record<'local' | 'en' | 'np', string> | null;
          totalSavingDrBalance?: string | null;
          totalSavingCrBalance?: string | null;
          totalLoanDrBalance?: string | null;
          totalLoanCrBalance?: string | null;
          totalShareDrBalance?: string | null;
          totalShareCrBalance?: string | null;
          branchName?: string | null;
        } | null> | null;
        summary?: {
          totalSavingDrBalance?: string | null;
          totalSavingCrBalance?: string | null;
          totalLoanDrBalance?: string | null;
          totalLoanCrBalance?: string | null;
          totalShareDrBalance?: string | null;
          totalShareCrBalance?: string | null;
        } | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetIndividualMemberReportQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetIndividualMemberReportQuery = {
  report: {
    memberReport: {
      individualMemberReport?: {
        data?: {
          totalTransactionAmount?: string | null;
          totalGuaranteeBalance?: string | null;
          totalSavingBalance?: string | null;
          totalApprovedAmount?: string | null;
          totalRemainingAmount?: string | null;
          totalShareBalance?: string | null;
          header?: {
            memberId?: string | null;
            memberCode?: string | null;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePic?: string | null;
            contactNo?: string | null;
            panNo?: string | null;
            membershipDate?: Record<'local' | 'en' | 'np', string> | null;
            shareCertificateNo?: string | null;
            totalShareCount?: number | null;
            riskCategory?: OfficialUseRiskCategory | null;
            kymStatus?: string | null;
            kymExpiryDate?: Record<'local' | 'en' | 'np', string> | null;
            address?: AddressFragment | null;
          } | null;
          closedAccountDetail?: Array<{
            accountName?: string | null;
            accountNo?: string | null;
            closedDate?: Record<'local' | 'en' | 'np', string> | null;
            accountType?: string | null;
          } | null> | null;
          shareDetail?: Array<{
            shareKitta?: string | null;
            count?: number | null;
            shareBalance?: string | null;
          } | null> | null;
          loanDetail?: Array<{
            loanAccountNo?: string | null;
            loanAccountName?: string | null;
            issuedDate?: Record<'local' | 'en' | 'np', string> | null;
            approvedAmount?: string | null;
            remainingAmount?: string | null;
            lastPaymentDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
          recentTransactions?: Array<{
            transactionId?: string | null;
            transactionDate?: Record<'local' | 'en' | 'np', string> | null;
            transactionType?: string | null;
            transactionAmount?: string | null;
          } | null> | null;
          savingDetail?: Array<{
            accountNo?: string | null;
            accountName?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
            totalGuaranteeAmount?: string | null;
            transactionCount?: number | null;
            guaranteeLoanDetail?: Array<{
              loanAccountNo?: string | null;
              amount?: string | null;
            } | null> | null;
          } | null> | null;
        } | null;
      } | null;
    };
  };
};

export type GetMinorListReportQueryVariables = Exact<{
  data?: InputMaybe<MinorFilter>;
}>;

export type GetMinorListReportQuery = {
  report: {
    memberReport: {
      minorReport?: {
        data?: Array<{
          id: string;
          memberName: Record<'local' | 'en' | 'np', string>;
          dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
          memberId: string;
          relationshipName?: string | null;
          serviceCentreId: string;
          serviceCentreName: string;
          minorName: string;
          relationshipId?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetMBankingRegistrationReportQueryVariables = Exact<{
  data?: InputMaybe<EbankingReportFilter>;
}>;

export type GetMBankingRegistrationReportQuery = {
  report: {
    mobileBankingReport: {
      mbankingRegistrationReport?: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: string | null;
          mobileNo?: string | null;
          branchCode?: string | null;
          regDate?: Record<'local' | 'en' | 'np', string> | null;
          expDate?: Record<'local' | 'en' | 'np', string> | null;
          status?: string | null;
          registeredBy?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetMBankingExpiryReportQueryVariables = Exact<{
  data?: InputMaybe<EbankingReportFilter>;
}>;

export type GetMBankingExpiryReportQuery = {
  report: {
    mobileBankingReport: {
      mbankingRegistrationReport?: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: string | null;
          mobileNo?: string | null;
          branchCode?: string | null;
          regDate?: Record<'local' | 'en' | 'np', string> | null;
          expDate?: Record<'local' | 'en' | 'np', string> | null;
          status?: string | null;
          registeredBy?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetMbTransactionReportQueryVariables = Exact<{
  data?: InputMaybe<MBankingTransactionFilter>;
}>;

export type GetMbTransactionReportQuery = {
  report: {
    mobileBankingReport: {
      mBankingTransactionReport?: {
        data?: Array<{
          initiatorName?: string | null;
          phoneNo?: string | null;
          srcAccount?: string | null;
          destAccount?: string | null;
          amount?: string | null;
          transactionType?: string | null;
          transThrough?: string | null;
          transDate?: Record<'local' | 'en' | 'np', string> | null;
          narration?: string | null;
          status?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetLedgerReportQueryVariables = Exact<{
  data: GeneralLedgerFilter;
}>;

export type GetLedgerReportQuery = {
  report: {
    otherReport: {
      generalLedgerReport: {
        ledgerName?: string | null;
        data?: Array<{
          id?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          account?: string | null;
          balance?: string | null;
          credit?: string | null;
          debit?: string | null;
        } | null> | null;
        summary?: {
          openingBalance?: string | null;
          openingBalanceType?: BalanceType | null;
          closingBalance?: string | null;
          closingBalanceType?: BalanceType | null;
        } | null;
      };
    };
  };
};

export type GetSavingsBalanceReportQueryVariables = Exact<{
  data: SavingsBalanceFilterData;
}>;

export type GetSavingsBalanceReportQuery = {
  report: {
    otherReport: {
      savingsBalanceReport: {
        totalDrBalance?: string | null;
        totalCrBalance?: string | null;
        interestType?: BalanceType | null;
        totalInterest?: string | null;
        data?: Array<{
          accountId?: string | null;
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          productId?: string | null;
          productName?: string | null;
          productCode?: string | null;
          accountOpeningDate?: Record<'local' | 'en' | 'np', string> | null;
          memberType?: KymMemberTypesEnum | null;
          drBalance?: string | null;
          crBalance?: string | null;
          currentInterestType?: BalanceType | null;
          currentInterestRate?: number | null;
          currentInterest?: string | null;
          endDate?: Record<'local' | 'en' | 'np', string> | null;
          branchId?: string | null;
          branchName?: string | null;
        } | null> | null;
        summary?: {
          totalIndividualAccount?: number | null;
          totalMinorAccount?: number | null;
          totalOtherAccount?: number | null;
        } | null;
      };
    };
  };
};

export type GetPearlsReportQueryVariables = Exact<{
  data: PearlsReportInput;
}>;

export type GetPearlsReportQuery = {
  report: {
    pearlsReport?: {
      typeP?: Array<{
        pearl: string;
        description: string;
        numerator: string;
        denominator: string;
        goal: string;
        thisMonth: string;
        lastMonth: string;
      } | null> | null;
      typeE?: Array<{
        pearl: string;
        description: string;
        numerator: string;
        denominator: string;
        goal: string;
        thisMonth: string;
        lastMonth: string;
      } | null> | null;
      typeA?: Array<{
        pearl: string;
        description: string;
        numerator: string;
        denominator: string;
        goal: string;
        thisMonth: string;
        lastMonth: string;
      } | null> | null;
      typeR?: Array<{
        pearl: string;
        description: string;
        numerator: string;
        denominator: string;
        goal: string;
        thisMonth: string;
        lastMonth: string;
      } | null> | null;
      typeL?: Array<{
        pearl: string;
        description: string;
        numerator: string;
        denominator: string;
        goal: string;
        thisMonth: string;
        lastMonth: string;
      } | null> | null;
      typeS?: Array<{
        pearl: string;
        description: string;
        numerator: string;
        denominator: string;
        goal: string;
        thisMonth: string;
        lastMonth: string;
      } | null> | null;
    } | null;
  };
};

export type GetBodRegisterReportQueryVariables = Exact<{
  data: CommitteeRegisterReportFilterData;
}>;

export type GetBodRegisterReportQuery = {
  report: {
    committeeQuery: {
      committeeRegisterReport?: {
        committee?: Array<{
          code?: string | null;
          memberCount?: number | null;
          name?: string | null;
          tenure?: number | null;
          createdAt?: Record<'local' | 'en' | 'np', string> | null;
          description?: string | null;
          id?: string | null;
          file?: { identifier: string; url: string } | null;
          member?: Array<{
            id?: string | null;
            joinedAt: Record<'local' | 'en' | 'np', string>;
            validUpto: Record<'local' | 'en' | 'np', string>;
            position: string;
            familyMember: {
              fatherName?: string | null;
              grandFatherName?: string | null;
              grandMotherName?: string | null;
              motherName?: string | null;
              spouseName?: string | null;
              inNepali?: {
                fatherName?: string | null;
                grandFatherName?: string | null;
                grandMotherName?: string | null;
                motherName?: string | null;
                spouseName?: string | null;
              } | null;
            };
            member: {
              id: string;
              code: string;
              name?: Record<'local' | 'en' | 'np', string> | null;
              contact?: string | null;
              address?: AddressFragment | null;
            };
            occupation?: {
              id?: string | null;
              occupationId?: string | null;
              orgName?: string | null;
              panVatNo?: string | null;
              address?: string | null;
              estimatedAnnualIncome?: string | null;
              establishedDate?: Record<'local' | 'en' | 'np', string> | null;
              registrationNo?: string | null;
              contact?: string | null;
              isOwner?: boolean | null;
            } | null;
          } | null> | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetOrganizationalProfileReportQueryVariables = Exact<{ [key: string]: never }>;

export type GetOrganizationalProfileReportQuery = {
  report: {
    committeeQuery: {
      organizationProfileReport?: {
        organization: {
          id: string;
          basicDetails?: {
            logo?: string | null;
            name?: string | null;
            typeOfOrganization?: TypeOfOrganization | null;
          } | null;
          contactDetails?: {
            email?: string | null;
            phoneNumber?: string | null;
            website?: string | null;
          } | null;
          mainContactPerson?: {
            contactPersonContactNumber?: string | null;
            contactPersonName?: string | null;
            title?: string | null;
          } | null;
          address?: AddressFragment | null;
          registrationDetails?: {
            regdNo?: string | null;
            regdOffice?: string | null;
            regdAddress?: string | null;
            panOrVat?: string | null;
          } | null;
        };
        committee: Array<{
          code?: string | null;
          memberCount?: number | null;
          name?: string | null;
          tenure?: number | null;
          createdAt?: Record<'local' | 'en' | 'np', string> | null;
          description?: string | null;
          id?: string | null;
          file?: { identifier: string; url: string } | null;
          member?: Array<{
            id?: string | null;
            position: string;
            member: {
              id: string;
              code: string;
              name?: Record<'local' | 'en' | 'np', string> | null;
              contact?: string | null;
              address?: AddressFragment | null;
            };
            occupation?: {
              id?: string | null;
              occupationId?: string | null;
              orgName?: string | null;
              panVatNo?: string | null;
              address?: string | null;
              estimatedAnnualIncome?: string | null;
              establishedDate?: Record<'local' | 'en' | 'np', string> | null;
              registrationNo?: string | null;
              contact?: string | null;
              isOwner?: boolean | null;
            } | null;
          } | null> | null;
        }>;
      } | null;
    };
  };
};

export type GetShaareCertificatePrintReportQueryVariables = Exact<{
  data: CertificatePrintFilter;
}>;

export type GetShaareCertificatePrintReportQuery = {
  report: {
    printReport: {
      issueCertificateReport?: {
        data?: Array<{
          Id?: string | null;
          memberId?: string | null;
          memberCode?: string | null;
          accountName?: string | null;
          accountNumber?: string | null;
          printedDate?: Record<'local' | 'en' | 'np', string> | null;
          printCount?: number | null;
          issueServiceCenter?: string | null;
          printedServiceCenter?: string | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetFdCertificatePrintReportQueryVariables = Exact<{
  data: CertificatePrintFilter;
}>;

export type GetFdCertificatePrintReportQuery = {
  report: {
    printReport: {
      fbCertificateReport?: {
        data?: Array<{
          Id?: string | null;
          memberId?: string | null;
          accountNumber?: string | null;
          memberCode?: string | null;
          accountName?: string | null;
          printedDate?: Record<'local' | 'en' | 'np', string> | null;
          printCount?: number | null;
          issueServiceCenter?: string | null;
          printedServiceCenter?: string | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetCopomisFinancialReportQueryVariables = Exact<{
  data: CopomisFinancialInput;
}>;

export type GetCopomisFinancialReportQuery = {
  report: {
    copomisFinancialReport: {
      data?: Array<{
        id?: string | null;
        indicatorName?: string | null;
        dr?: string | null;
        cr?: string | null;
      } | null> | null;
    };
  };
};

export type GetAllSavedReportsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAllSavedReportsQuery = {
  report: {
    listReports: {
      totalCount: number;
      pageInfo?: PaginationFragment | null;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          lastModifiedDate: Record<'local' | 'en' | 'np', string>;
          name: string;
          reportType: string;
          savedBy: string;
        } | null;
      } | null> | null;
    };
  };
};

export type GetSavedReportQueryVariables = Exact<{
  reportId: Scalars['ID'];
}>;

export type GetSavedReportQuery = {
  report: {
    getReport?: {
      name?: string | null;
      settings?: { filter?: ShareTransactionType | null; memberId: string } | null;
    } | null;
  };
};

export type GetShareStatementQueryVariables = Exact<{
  data: ShareStatementReportSettings;
}>;

export type GetShareStatementQuery = {
  report: {
    shareReport: {
      shareStatementReport?: {
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          activeDate?: Record<'local' | 'en' | 'np', string> | null;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          branch?: string | null;
          address?: {
            wardNo?: string | null;
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null;
        statement?:
          | {
              openingBalance?: number | null;
              shareStatement?: Array<{
                date: Record<'local' | 'en' | 'np', string>;
                particular: string;
                noOfShares: number;
                returnAmountDr: number;
                purchaseAmountCr: number;
                balanceSheet: number;
              } | null> | null;
              totals?: {
                totalShares?: number | null;
                totalDr?: number | null;
                totalCr?: number | null;
                totalBalanceSheet?: number | null;
              } | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetShareRegisterReportQueryVariables = Exact<{
  data: SharePurchaseRegisterReportFilter;
}>;

export type GetShareRegisterReportQuery = {
  report: {
    shareReport: {
      sharePurchaseRegisterReport?: {
        data?: Array<{
          memberId?: string | null;
          memberCode?: string | null;
          name?: string | null;
          particular?: string | null;
          perShareAmount?: string | null;
          kittaNumFrom?: string | null;
          kittaNumTo?: string | null;
          totalKitta?: string | null;
          totalAmount?: string | null;
          branchId?: string | null;
          branchName?: string | null;
        } | null> | null;
      } | null;
    };
  };
};

export type GetShareTransactionReportQueryVariables = Exact<{
  data?: InputMaybe<ShareTransactionReportFilter>;
}>;

export type GetShareTransactionReportQuery = {
  report: {
    shareReport: {
      shareTransactionReport?: {
        totalShareIssued?: string | null;
        avgSharePerMember?: string | null;
        data?: Array<{
          transactionDate?: Record<'local' | 'en' | 'np', string> | null;
          memberId?: string | null;
          memberCode?: string | null;
          name?: string | null;
          particular?: string | null;
          shareReturnDr?: string | null;
          shareIssueCr?: string | null;
          balance?: string | null;
          branchId?: string | null;
          branchName?: string | null;
        } | null> | null;
        footer?: {
          totalCr?: string | null;
          totalDr?: string | null;
          totalBalance?: string | null;
        } | null;
      } | null;
    };
  };
};

export type GetShareBalanceReportQueryVariables = Exact<{
  data: ShareBalanceReportFilter;
}>;

export type GetShareBalanceReportQuery = {
  report: {
    shareReport: {
      shareBalanceReport?: {
        totalBalance?: string | null;
        data?: Array<{
          shareType?: string | null;
          shareCertificateNo?: string | null;
          memberId?: string | null;
          memberCode?: string | null;
          memberName?: Record<'local' | 'en' | 'np', string> | null;
          contactNo?: string | null;
          membershipDate?: Record<'local' | 'en' | 'np', string> | null;
          noOfKitta?: number | null;
          balance?: string | null;
          branchId?: string | null;
          branchName?: string | null;
          address?: AddressFragment | null;
        } | null> | null;
        error?:
          | QueryError_AuthorizationError_Fragment
          | QueryError_BadRequestError_Fragment
          | QueryError_NotFoundError_Fragment
          | QueryError_ServerError_Fragment
          | null;
      } | null;
    };
  };
};

export type GetTrialSheetReportQueryVariables = Exact<{
  data: TrialSheetReportFilter;
}>;

export type GetTrialSheetReportQuery = {
  report: {
    transactionReport: {
      financial: {
        trialSheetReport: {
          data?: {
            equityAndLiablitiesTotal?: Record<string, string> | null;
            assetsTotal?: Record<string, string> | null;
            expenseTotal?: Record<string, string> | null;
            incomeTotal?: Record<string, string> | null;
            offBalanceTotal?: Record<string, string> | null;
            orphanTotal?: Record<string, string> | null;
            totalAssetExpense?: Record<string, string> | null;
            totalLiablitiesIncome?: Record<string, string> | null;
            totalProfitLoss?: Record<string, string> | null;
            equityAndLiablities?: Array<{
              balance?: Record<string, string> | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            expenses?: Array<{
              balance?: Record<string, string> | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            income?: Array<{
              balance?: Record<string, string> | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            assets?: Array<{
              balance?: Record<string, string> | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            offBalance?: Array<{
              balance?: Record<string, string> | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
            orphanEntries?: Array<{
              balance?: Record<string, string> | null;
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              under?: string | null;
            } | null> | null;
          } | null;
        };
      };
    };
  };
};

export type GetTransactionTellerReportQueryVariables = Exact<{
  data: TellerReportFilter;
}>;

export type GetTransactionTellerReportQuery = {
  report: {
    transactionReport: {
      financial: {
        tellerReport: {
          data?: {
            headTeller?: {
              inTransitTotal?: string | null;
              stackTotal?: string | null;
              inAmountTotal?: string | null;
              outAmountTotal?: string | null;
              balanceTotal?: string | null;
              entries?: Array<{
                tellerId?: string | null;
                name?: string | null;
                inTransit?: string | null;
                stack?: string | null;
                inAmount?: string | null;
                outAmount?: string | null;
                balance?: string | null;
              } | null> | null;
            } | null;
            teller?: {
              inTransitTotal?: string | null;
              stackTotal?: string | null;
              inAmountTotal?: string | null;
              outAmountTotal?: string | null;
              balanceTotal?: string | null;
              entries?: Array<{
                tellerId?: string | null;
                name?: string | null;
                inTransit?: string | null;
                stack?: string | null;
                inAmount?: string | null;
                outAmount?: string | null;
                balance?: string | null;
              } | null> | null;
            } | null;
          } | null;
        };
      };
    };
  };
};

export type GetVaultBalanceReportQueryVariables = Exact<{
  data: VaultBalanceReportFilter;
}>;

export type GetVaultBalanceReportQuery = {
  report: {
    transactionReport: {
      financial: {
        vaultBalanceReport: {
          data?: {
            opening?: {
              noneAmount?: string | null;
              noteTotal?: string | null;
              amountTotal?: string | null;
              denomination?: Array<{
                value: CashValue;
                quantity: number;
                amount?: string | null;
              } | null> | null;
            } | null;
            vaultIn?: {
              noneAmount?: string | null;
              noteTotal?: string | null;
              amountTotal?: string | null;
              denomination?: Array<{
                value: CashValue;
                quantity: number;
                amount?: string | null;
              } | null> | null;
            } | null;
            vaultOut?: {
              noneAmount?: string | null;
              noteTotal?: string | null;
              amountTotal?: string | null;
              denomination?: Array<{
                value: CashValue;
                quantity: number;
                amount?: string | null;
              } | null> | null;
            } | null;
            closing?: {
              noneAmount?: string | null;
              noteTotal?: string | null;
              amountTotal?: string | null;
              denomination?: Array<{
                value: CashValue;
                quantity: number;
                amount?: string | null;
              } | null> | null;
            } | null;
          } | null;
        };
      };
    };
  };
};

export type GetBankGlStatementReportQueryVariables = Exact<{
  data: BankGlStatementFilter;
}>;

export type GetBankGlStatementReportQuery = {
  report: {
    transactionReport: {
      financial: {
        bankGLStatementReport: {
          data?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            name?: Record<'local' | 'en' | 'np', string> | null;
            particular?: string | null;
            chequeNo?: string | null;
            depositAmount?: string | null;
            withdrawAmount?: string | null;
            balance?: string | null;
            remarks?: string | null;
            branchId?: string | null;
            branchName?: string | null;
          } | null> | null;
        };
      };
    };
  };
};

export type GetDayBookReportQueryVariables = Exact<{
  data: DayBookReportFilter;
}>;

export type GetDayBookReportQuery = {
  report: {
    transactionReport: {
      financial: {
        dayBookReport: {
          data?: {
            closingAmount?: string | null;
            openingBalance?: string | null;
            totalAmount?: string | null;
            totalPayment?: string | null;
            totalReceipts?: string | null;
            payments?: Array<{
              accountHead?: string | null;
              amount?: string | null;
              entries?: Array<{
                particular?: string | null;
                ledger?: string | null;
                voucherNo?: string | null;
                amount?: string | null;
              } | null> | null;
            } | null> | null;
            receipts?: Array<{
              accountHead?: string | null;
              amount?: string | null;
              entries?: Array<{
                particular?: string | null;
                ledger?: string | null;
                voucherNo?: string | null;
                amount?: string | null;
              } | null> | null;
            } | null> | null;
          } | null;
        };
      };
    };
  };
};

export type GetServiceCenterBalanceReportQueryVariables = Exact<{
  data: ServiceCenterBalanceFilter;
}>;

export type GetServiceCenterBalanceReportQuery = {
  report: {
    transactionReport: {
      financial: {
        serviceCenterBalanceReport: {
          data?: Array<{
            serviceCenterId?: string | null;
            ServiceCenterName?: string | null;
            todayCashBalance?: string | null;
            todayBankBalance?: string | null;
            todaySavingBalance?: string | null;
            todayTotalBalance?: string | null;
            totalCashBalance?: string | null;
            totalBankBalance?: string | null;
            totalTotalBalance?: string | null;
            totalSavingBalance?: string | null;
            depositToLiquidityRatio?: string | null;
          } | null> | null;
        };
      };
    };
  };
};

export type GetAbbsStatusReportQueryVariables = Exact<{
  data: AbbsReportFilter;
}>;

export type GetAbbsStatusReportQuery = {
  report: {
    branchReport: {
      abbsStatusReport: {
        data?: Array<{
          serviceCenterId?: string | null;
          ServiceCenterName?: string | null;
          serviceCenterActive?: boolean | null;
          abbsActive?: boolean | null;
        } | null> | null;
      };
    };
  };
};

export type GetBankGlBalanceReportQueryVariables = Exact<{
  data: BankGlBalanceFilter;
}>;

export type GetBankGlBalanceReportQuery = {
  report: {
    transactionReport: {
      financial: {
        bankGLBalanceReport: {
          total?: string | null;
          data?: Array<{
            bankId?: string | null;
            bankName?: string | null;
            bankDisplayName?: string | null;
            bankAccountName?: string | null;
            accountNo?: string | null;
            closingBalance?: string | null;
            balanceType?: BalanceType | null;
          } | null> | null;
        };
      };
    };
  };
};

export type GetCharKhataReportQueryVariables = Exact<{
  data: CharKhataReportFilter;
}>;

export type GetCharKhataReportQuery = {
  report: {
    transactionReport: {
      financial: {
        charKhataReport: {
          data?: {
            equityAndLiablitiesTotal?: Record<string, string> | null;
            assetsTotal?: Record<string, string> | null;
            expenseTotal?: Record<string, string> | null;
            incomeTotal?: Record<string, string> | null;
            offBalanceTotal?: Record<string, string> | null;
            orphanTotal?: Record<string, string> | null;
            totalProfitLoss?: Record<string, string> | null;
            totalAssetExpense?: Record<string, string> | null;
            totalLiablitiesIncome?: Record<string, string> | null;
            equityAndLiablities?: Array<{
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              balance?: Record<string, string> | null;
              under?: string | null;
            } | null> | null;
            assets?: Array<{
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              balance?: Record<string, string> | null;
              under?: string | null;
            } | null> | null;
            expenses?: Array<{
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              balance?: Record<string, string> | null;
              under?: string | null;
            } | null> | null;
            income?: Array<{
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              balance?: Record<string, string> | null;
              under?: string | null;
            } | null> | null;
            offBalance?: Array<{
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              balance?: Record<string, string> | null;
              under?: string | null;
            } | null> | null;
            orphanEntries?: Array<{
              ledgerId?: string | null;
              ledgerName?: Record<'local' | 'en' | 'np', string> | null;
              balance?: Record<string, string> | null;
              under?: string | null;
            } | null> | null;
          } | null;
        };
      };
    };
  };
};

export type GetAbbsTransactionReportQueryVariables = Exact<{
  data: AbbsTransactionReportFilter;
}>;

export type GetAbbsTransactionReportQuery = {
  report: {
    transactionReport: {
      financial: {
        abbsTransactionReport?: {
          data?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            memberId?: string | null;
            memberCode?: string | null;
            memberName?: Record<'local' | 'en' | 'np', string> | null;
            accountNo?: string | null;
            typeOfTransaction?: string | null;
            transactionId?: string | null;
            memberBranch?: string | null;
            transactionBranch?: string | null;
            paymentPayable?: string | null;
            paymentReceivable?: string | null;
          } | null> | null;
        } | null;
      };
    };
  };
};

export type GetMrTransactionReportQueryVariables = Exact<{
  data: MrTransactionReportFilter;
}>;

export type GetMrTransactionReportQuery = {
  report: {
    transactionReport: {
      financial: {
        mrTransactionReport?: {
          data?: Array<{
            memberId?: string | null;
            memberCode?: string | null;
            memberName?: string | null;
            mrId?: string | null;
            mrName?: string | null;
            transactionId?: string | null;
            accountNo?: string | null;
            accountName?: string | null;
            typeOfTransaction?: MrTransactionFilter | null;
            amount?: string | null;
          } | null> | null;
          error?:
            | QueryError_AuthorizationError_Fragment
            | QueryError_BadRequestError_Fragment
            | QueryError_NotFoundError_Fragment
            | QueryError_ServerError_Fragment
            | null;
        } | null;
      };
    };
  };
};

export type GetChequeBookRequestsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetChequeBookRequestsQuery = {
  requests: {
    list?: {
      chequeBookRequest?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id: string;
            memberId: string;
            memberCode?: string | null;
            memberName: Record<'local' | 'en' | 'np', string>;
            memberPhoneNumber: string;
            memberAge?: number | null;
            memberGender?: string | null;
            memberProfilePicUrl?: string | null;
            accountNumber: string;
            accountType: string;
            approvalStatus: RequestStatus;
            requestedDate: Record<'local' | 'en' | 'np', string>;
            branchId?: string | null;
            branchName?: string | null;
            numberOfLeaves?: number | null;
            pickUpMethod?: ChequePickUpMethod | null;
            agentName?: string | null;
            remarks?: string | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetWithdrawViaCollectorQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetWithdrawViaCollectorQuery = {
  requests: {
    list?: {
      withdrawViaCollector?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id: string;
            memberId: string;
            memberCode?: string | null;
            memberName: Record<'local' | 'en' | 'np', string>;
            memberPhoneNumber: string;
            accountNumber: string;
            accountType: string;
            approvalStatus: RequestStatus;
            requestedDate: string;
            collectorName: string;
            amount: string;
            remarks?: string | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetLoanRequestsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetLoanRequestsQuery = {
  requests: {
    list?: {
      loanRequest?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id: string;
            memberId: string;
            memberCode?: string | null;
            memberName: Record<'local' | 'en' | 'np', string>;
            memberPhoneNumber: string;
            approvalStatus: RequestStatus;
            loanAmount: string;
            lastModifiedDate: string;
            purpose?: string | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetBlockChequeListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetBlockChequeListQuery = {
  requests: {
    list?: {
      blockCheque?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id: string;
            memberId: string;
            memberCode?: string | null;
            memberName: Record<'local' | 'en' | 'np', string>;
            memberPhoneNumber: string;
            accountNumber: string;
            accountType: string;
            approvalStatus: RequestStatus;
            requestedDate: string;
            reason?: string | null;
            chequeNumber: string;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetMemberRequestListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetMemberRequestListQuery = {
  requests: {
    list?: {
      membershipRequest?: {
        totalCount?: number | null;
        pageInfo?: PaginationFragment | null;
        edges?: Array<{
          node?: {
            id?: string | null;
            dateOfBirth?: string | null;
            email?: string | null;
            firstName?: string | null;
            gender?: string | null;
            lastName?: string | null;
            middleName?: string | null;
            mobileNumber?: string | null;
            phoneNumber?: string | null;
            requestedDate?: Record<'local' | 'en' | 'np', string> | null;
            status?: RequestStatus | null;
            permanentAddress?: AddressFragment | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetGlobalSearchQueryVariables = Exact<{
  filter?: InputMaybe<SearchFilterData>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetGlobalSearchQuery = {
  search: {
    globalPages: {
      data?: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id?: string | null;
            fullCode?: string | null;
            hasParam?: boolean | null;
            iconType?: GlobalPagesIconType | null;
            page?: string | null;
            url?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    };
  };
};

export type GetAllAccountingTaxesQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllAccountingTaxesQuery = {
  settings: {
    general?: {
      accounting?: {
        taxRates?: Array<{
          default?: boolean | null;
          id: string;
          name: string;
          rate: number;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAlternativeFeeAndChargesQueryVariables = Exact<{ [key: string]: never }>;

export type GetAlternativeFeeAndChargesQuery = {
  settings: {
    general?: {
      alternativeChannel?: {
        feesAndCharges?: {
          data?: Array<{
            id?: string | null;
            serviceType?: AlternativeChannelServiceType | null;
            ledgerId?: string | null;
            amount?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetActivatedServiceQueryVariables = Exact<{
  memberId: Scalars['String'];
}>;

export type GetActivatedServiceQuery = {
  alternativeChannel: {
    memberActivations?: {
      eBanking?: boolean | null;
      mobileBanking?: boolean | null;
      smsBanking?: boolean | null;
    } | null;
  };
};

export type GetAlternativeChannelListQueryVariables = Exact<{
  filter?: InputMaybe<AlternativeChannelFilter>;
  paginate?: InputMaybe<Pagination>;
}>;

export type GetAlternativeChannelListQuery = {
  alternativeChannel: {
    list?: {
      totalCount: number;
      pageInfo?: PaginationFragment | null;
      edges?: Array<{
        cursor: string;
        data?: {
          id?: string | null;
          name?: Record<'local' | 'en' | 'np', string> | null;
          memberId?: string | null;
          coopConnection?: boolean | null;
          lastActive?: string | null;
          phoneNumber?: string | null;
          serviceStatus?: AlternativeChannelStatus | null;
          serviceType?: AlternativeChannelServiceType | null;
        } | null;
      } | null> | null;
    } | null;
  };
};

export type GetAcFeeCoaQueryVariables = Exact<{ [key: string]: never }>;

export type GetAcFeeCoaQuery = {
  settings: {
    chartsOfAccount?: {
      accountsUnder?: {
        data?: Array<{
          id: string;
          accountCode: string;
          name: Record<'local' | 'en' | 'np', string>;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAuditLogListQueryVariables = Exact<{
  filter?: InputMaybe<AuditLogFilters>;
}>;

export type GetAuditLogListQuery = {
  auditLog: {
    humanize?:
      | {
          __typename: 'AuditLogHumanizeResult';
          data?: Array<{
            timestamp?: string | null;
            narration?: string | null;
            extraData?: Array<string | null> | null;
          } | null> | null;
        }
      | { __typename: 'RawAuditLog' }
      | null;
  };
};

export type GetBankTableListQueryVariables = Exact<{
  filter?: InputMaybe<BankSearchFilter>;
}>;

export type GetBankTableListQuery = {
  bank: {
    bank?: {
      list?: Array<{
        id: string;
        objState: ObjState;
        name?: string | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        logo?: string | null;
      } | null> | null;
    } | null;
  };
};

export type GetBranchListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<BranchSearchFilter>;
}>;

export type GetBranchListQuery = {
  settings: {
    general?: {
      branch?: {
        list?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            node?: {
              id: string;
              branchCode?: string | null;
              name?: string | null;
              category?: BranchCategory | null;
              estDate?: string | null;
              managerName?: string | null;
              contactNumber?: string | null;
              email?: string | null;
              plTransferId?: string | null;
              tdsTransaferId?: string | null;
              branchStatus?: boolean | null;
              eodReady?: boolean | null;
              address?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              location?: { longitude?: number | null; latitude?: number | null } | null;
              abbsTransaction?: {
                abbsStatus?: boolean | null;
                receivableAccountId?: string | null;
                payableAccountId?: string | null;
              } | null;
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetBranchEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetBranchEditDataQuery = {
  settings: {
    general?: {
      branch?: {
        formState?: {
          data?: {
            branchCode?: string | null;
            name?: string | null;
            serviceCenterPhone?: string | null;
            category?: BranchCategory | null;
            estDate?: Record<'local' | 'en' | 'np', string> | null;
            managerName?: string | null;
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: string | null;
            phoneNumber?: string | null;
            email?: string | null;
            abbsStatus?: boolean | null;
            receivableAccountId?: string | null;
            payableAccountId?: string | null;
            plTransferId?: string | null;
            tdsTransaferId?: string | null;
            branchStatus?: boolean | null;
            location?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoaListQueryVariables = Exact<{
  filter: ChartsOfAccountFilter;
}>;

export type GetCoaListQuery = {
  settings: {
    general?: {
      chartsOfAccount?: {
        accounts: {
          data?: Array<{
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            under?: string | null;
            accountClass: string;
            accountCode: string;
            currency: string;
            accountType: CoaTypesOfAccount;
            openingBalance: number;
          }> | null;
        };
      } | null;
    } | null;
  };
};

export type GetCoaFullViewQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoaFullViewQuery = {
  settings: {
    chartsOfAccount?: {
      fullView: {
        data?: Array<{
          id: string;
          name: Record<'local' | 'en' | 'np', string>;
          under?: string | null;
          accountType: CoaTypesOfAccount;
          accountClass: string;
          accountCode: string;
          category?: CoaCategory | null;
          allowedBalance?: CoaTypeOfTransaction | null;
          transactionAllowed?: CoaTypeOfTransaction | null;
          allowDirectPostingFromJV?: boolean | null;
          allowMultipleLedger?: boolean | null;
        } | null> | null;
      };
    } | null;
  };
};

export type SearchCoaQueryVariables = Exact<{
  coaName: Scalars['String'];
}>;

export type SearchCoaQuery = {
  settings: {
    general?: {
      chartsOfAccount?: {
        search?: {
          data?: Array<{
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            accountCode: string;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoaAccountsUnderListQueryVariables = Exact<{
  accountCode?: InputMaybe<Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>;
}>;

export type GetCoaAccountsUnderListQuery = {
  settings: {
    chartsOfAccount?: {
      accountsUnder?: {
        data?: Array<{
          id: string;
          accountCode: string;
          name: Record<'local' | 'en' | 'np', string>;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCoaAccountsUnderLeafListQueryVariables = Exact<{
  parentId: Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>;
  currentBranch?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCoaAccountsUnderLeafListQuery = {
  settings: {
    chartsOfAccount?: {
      accountsUnderLeaf?: Array<{ accountId?: string | null; name?: string | null } | null> | null;
    } | null;
  };
};

export type GetCoaAccountListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
  flag?: InputMaybe<CoaListFlag>;
}>;

export type GetCoaAccountListQuery = {
  settings: {
    chartsOfAccount?: {
      coaAccountList?: {
        totalCount: number;
        edges?: Array<{
          node?: {
            accountCode?: string | null;
            accountName?: Record<'local' | 'en' | 'np', string> | null;
            accountClass?: string | null;
            parentGroup?: Record<'local' | 'en' | 'np', string> | null;
            branch?: string | null;
            balance?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          hasNextPage: boolean;
          hasPreviousPage: boolean;
          startCursor?: string | null;
          endCursor?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLedgerForJvPostingQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<CoaListFilter>;
}>;

export type GetLedgerForJvPostingQuery = {
  settings: {
    chartsOfAccount?: {
      ledgersForJVPosting?: {
        totalCount: number;
        edges?: Array<{
          node?: {
            id?: string | null;
            accountCode?: string | null;
            accountName?: Record<'local' | 'en' | 'np', string> | null;
            accountClass?: string | null;
            parentGroup?: Record<'local' | 'en' | 'np', string> | null;
            branch?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          hasNextPage: boolean;
          hasPreviousPage: boolean;
          startCursor?: string | null;
          endCursor?: string | null;
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type GetCoaAccountDetailsQueryVariables = Exact<{
  id: Scalars['String'];
  branch?: InputMaybe<Scalars['String']>;
}>;

export type GetCoaAccountDetailsQuery = {
  settings: {
    chartsOfAccount?: {
      coaAccountDetails?: {
        data?: {
          totalNoOfTxns?: number | null;
          meta?: {
            accountName?: string | null;
            accountId?: string | null;
            accountType?: string | null;
            createdDate?: Record<'local' | 'en' | 'np', string> | null;
            isLoanAccount?: boolean | null;
            isSavingAccount?: boolean | null;
            parentId?: string | null;
          } | null;
          overview?: {
            openingBalance?: string | null;
            dr?: string | null;
            cr?: string | null;
            closingBalance?: string | null;
            balanceType?: BalanceType | null;
          } | null;
          recentTxns?: Array<{
            date?: Record<'local' | 'en' | 'np', string> | null;
            txnId?: string | null;
            txnType?: string | null;
            debit?: string | null;
            credit?: string | null;
            balanceType?: BalanceType | null;
            particulars?: string | null;
            total?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoaLeafNodeDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
  branch?: InputMaybe<Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>;
  snapshot?: InputMaybe<Scalars['String']>;
}>;

export type GetCoaLeafNodeDetailsQuery = {
  settings: {
    chartsOfAccount?: {
      coaLeafNodeDetails?: {
        data?: {
          id?: string | null;
          accountName?: Record<'local' | 'en' | 'np', string> | null;
          accountType?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          noOfAccounts?: string | null;
          drAmount?: string | null;
          crAmount?: string | null;
          closingBalance?: string | null;
          balanceType?: BalanceType | null;
          ledgers?: Array<{
            accountCode?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            ledgerName?: string | null;
            serviceCenter?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
            status?: boolean | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLedgerListQueryVariables = Exact<{
  id: Scalars['ID'];
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
  branchId?: InputMaybe<Array<Scalars['String']> | Scalars['String']>;
  snapshot?: InputMaybe<Scalars['String']>;
}>;

export type GetLedgerListQuery = {
  settings: {
    chartsOfAccount?: {
      coaLedgerList?: {
        totalCount: number;
        pageInfo?: {
          hasNextPage: boolean;
          hasPreviousPage: boolean;
          startCursor?: string | null;
          endCursor?: string | null;
        } | null;
        edges?: Array<{
          cursor: string;
          node?: {
            id?: string | null;
            accountCode?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            ledgerName?: string | null;
            serviceCenter?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
            status?: boolean | null;
            tags?: Array<{ id?: string | null; name?: string | null } | null> | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCoaAccountsAllTransactionListQueryVariables = Exact<{
  id: Scalars['ID'];
  pagination?: InputMaybe<Pagination>;
}>;

export type GetCoaAccountsAllTransactionListQuery = {
  settings: {
    chartsOfAccount?: {
      ledgerAllTransactionsList?: {
        totalCount: number;
        pageInfo?: {
          hasNextPage: boolean;
          hasPreviousPage: boolean;
          startCursor?: string | null;
          endCursor?: string | null;
        } | null;
        edges?: Array<{
          cursor: string;
          node?: {
            date?: Record<'local' | 'en' | 'np', string> | null;
            txnId?: string | null;
            txnType?: string | null;
            particulars?: string | null;
            debit?: string | null;
            credit?: string | null;
            total?: string | null;
            balanceType?: BalanceType | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetTagListForReportQueryVariables = Exact<{ [key: string]: never }>;

export type GetTagListForReportQuery = {
  settings: {
    chartsOfAccount?: {
      tag?: {
        list?: {
          edges?: Array<{ node?: { id: string; name?: string | null } | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ListLeafCoaHeadsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type ListLeafCoaHeadsQuery = {
  settings: {
    chartsOfAccount?: {
      listLeafCoaHeads: {
        edges?: Array<{ node?: { accountCode: string; Name: string } | null } | null> | null;
      };
    } | null;
  };
};

export type ListCbsShareCodesQueryVariables = Exact<{ [key: string]: never }>;

export type ListCbsShareCodesQuery = {
  settings: {
    general?: {
      codes?: {
        cbs?: {
          allCbsCodes?: {
            data?: {
              share?: Array<{
                id?: string | null;
                codeType?: CbsCodeType | null;
                prefix?: string | null;
                noOfDigit?: number | null;
                initialNo?: number | null;
              } | null> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ListCbsTransfersCodesQueryVariables = Exact<{ [key: string]: never }>;

export type ListCbsTransfersCodesQuery = {
  settings: {
    general?: {
      codes?: {
        cbs?: {
          allCbsCodes?: {
            data?: {
              transfers?: Array<{
                id?: string | null;
                codeType?: CbsCodeType | null;
                prefix?: string | null;
                noOfDigit?: number | null;
                initialNo?: number | null;
              } | null> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ListCbsWithdrawSlipCodesQueryVariables = Exact<{ [key: string]: never }>;

export type ListCbsWithdrawSlipCodesQuery = {
  settings: {
    general?: {
      codes?: {
        cbs?: {
          allCbsCodes?: {
            data?: {
              withdrawSlip?: Array<{
                id?: string | null;
                codeType?: CbsCodeType | null;
                prefix?: string | null;
                noOfDigit?: number | null;
                initialNo?: number | null;
              } | null> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCommitteeListQueryVariables = Exact<{ [key: string]: never }>;

export type GetCommitteeListQuery = {
  settings: {
    general?: {
      organization?: {
        committee?: Array<{
          code?: string | null;
          description?: string | null;
          id?: string | null;
          memberCount?: number | null;
          name?: string | null;
          tenure?: number | null;
          file?: { identifier: string; url: string } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCommitteeMemberListQueryVariables = Exact<{
  committeeID?: InputMaybe<Scalars['ID']>;
}>;

export type GetCommitteeMemberListQuery = {
  settings: {
    general?: {
      organization?: {
        committeeMembers?: Array<{
          id?: string | null;
          position: string;
          member: {
            name?: Record<'local' | 'en' | 'np', string> | null;
            contact?: string | null;
            dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          };
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetPrintCountQueryVariables = Exact<{
  type: PrintType;
  objectId: Scalars['ID'];
}>;

export type GetPrintCountQuery = { settings: { getPrintCount: number } };

export type GetEodExceptionsQueryVariables = Exact<{ [key: string]: never }>;

export type GetEodExceptionsQuery = {
  settings: {
    general?: {
      setup: {
        eodSeed?: Record<'local' | 'en' | 'np', string> | null;
        eodException?: {
          branchReadiness: boolean;
          dormantCheck: boolean;
          maturityCheck: boolean;
          cashInHand: boolean;
          loanRepayment: boolean;
        } | null;
        eodAction?: {
          dormantCheck: boolean;
          maturityCheck: boolean;
          loanRepayment: boolean;
        } | null;
      };
    } | null;
  };
};

export type GetEmployeeLevelListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetEmployeeLevelListQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            listEmployeeLevel?: {
              totalCount: number;
              edges?: Array<{
                cursor: string;
                node: { id: string; name: string; description: string };
              } | null> | null;
              pageInfo?: PaginationFragment | null;
            } | null;
          };
        };
      } | null;
    } | null;
  };
};

export type GetDepartmentListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetDepartmentListQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            listDepartment?: {
              totalCount: number;
              edges?: Array<{
                cursor: string;
                node: { id: string; name: string; description: string };
              } | null> | null;
              pageInfo?: PaginationFragment | null;
            } | null;
          };
        };
      } | null;
    } | null;
  };
};

export type GetDesignationListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetDesignationListQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            listDesignation?: {
              totalCount: number;
              edges?: Array<{
                cursor: string;
                node: { id: string; name: string; description: string };
              } | null> | null;
              pageInfo?: PaginationFragment | null;
            } | null;
          };
        };
      } | null;
    } | null;
  };
};

export type GetEmployeeTypeListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetEmployeeTypeListQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            listEmployeeType?: {
              totalCount: number;
              edges?: Array<{
                cursor: string;
                node: { id: string; name: string; description: string };
              } | null> | null;
              pageInfo?: PaginationFragment | null;
            } | null;
          };
        };
      } | null;
    } | null;
  };
};

export type GetEmployeeHealthInsuranceListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetEmployeeHealthInsuranceListQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          employee: {
            listEmployeeHealthInsurance?: {
              totalCount: number;
              edges?: Array<{
                cursor: string;
                node: {
                  id: string;
                  healthInsuranceProvider: string;
                  healthInsuranceNumber: string;
                };
              } | null> | null;
              pageInfo?: PaginationFragment | null;
            } | null;
          };
        };
      } | null;
    } | null;
  };
};

export type GetEmployeeLeaveTypeListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetEmployeeLeaveTypeListQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          leave: {
            listLeaveType: {
              totalCount: number;
              edges?: Array<{
                cursor: string;
                node: { id?: string | null; name?: string | null; description?: string | null };
              } | null> | null;
              pageInfo?: PaginationFragment | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type GetEmployeeLeavePolicyListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetEmployeeLeavePolicyListQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          leavePolicy: {
            listLeavePolicy: {
              totalCount: number;
              edges?: Array<{
                cursor?: string | null;
                node?: { id: string; name: string; description: string } | null;
              } | null> | null;
              pageInfo?: PaginationFragment | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type GetLeaveTypeQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetLeaveTypeQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          leave: {
            getLeaveType: {
              record?: {
                id?: string | null;
                name?: string | null;
                typeOfLeave?: LeaveTypeEnum | null;
                description?: string | null;
                applicableAfter?: number | null;
                maximumLeaveAllowed?: number | null;
                maximumContinuousDaysApplicable?: number | null;
                isCarriedForward?: boolean | null;
                isPartiallyPaid?: boolean | null;
                fractionOfDailySalaryPerLeave?: number | null;
                isOptionalLeave?: boolean | null;
                includeHolidaysWithLeavesAsLeaves?: boolean | null;
                isCompensatory?: boolean | null;
              } | null;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type GetLeavePolicyQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetLeavePolicyQuery = {
  settings: {
    general?: {
      HCM?: {
        employee: {
          leavePolicy: {
            getLeavePolicy: {
              record?: {
                name?: string | null;
                description?: string | null;
                employeeLevelId?: string | null;
                effectiveFrom?: Record<'local' | 'en' | 'np', string> | null;
                leavePolicyDetails?: Array<{
                  leaveTypeId?: string | null;
                  annualAllocation?: number | null;
                } | null> | null;
              } | null;
              error?:
                | MutationError_AuthorizationError_Fragment
                | MutationError_BadRequestError_Fragment
                | MutationError_NotFoundError_Fragment
                | MutationError_ServerError_Fragment
                | null;
            };
          };
        };
      } | null;
    } | null;
  };
};

export type LedgerTagsListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type LedgerTagsListQuery = {
  settings: {
    chartsOfAccount?: {
      tag?: {
        list?: {
          totalCount: number;
          edges?: Array<{
            node?: {
              id: string;
              name?: string | null;
              description?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              ledgerCount?: number | null;
            } | null;
          } | null> | null;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ListTagLedgersQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type ListTagLedgersQuery = {
  settings: {
    chartsOfAccount?: {
      tag?: {
        listTagLedgers?: {
          totalCount: number;
          edges?: Array<{
            node?: {
              ledgerId: string;
              name?: string | null;
              branchId?: string | null;
              branchName?: string | null;
              tagId?: string | null;
              tagName?: string | null;
            } | null;
          } | null> | null;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<LoanProductSearchFilter>;
}>;

export type GetLoanProductListQuery = {
  settings: {
    general?: {
      loanProducts?: {
        list?: {
          totalCount: number;
          pageInfo: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          };
          edges: Array<{
            node: {
              id: string;
              objState: ObjState;
              createdDate: string;
              productName: string;
              productCodeString?: string | null;
              productType: string;
              productSubType: string;
              createdBy: { id: string; name: string; username: string; userType: UserType };
              modifiedBy: { id: string; name: string; username: string; userType: UserType };
              productCode?: { prefix: string; initialNo: string } | null;
              interest?: {
                minRate?: number | null;
                maxRate?: number | null;
                defaultRate: number;
                ceoAuthority?: number | null;
                boardAuthority?: number | null;
              } | null;
            };
          }>;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductEditDataQuery = {
  settings: {
    general?: {
      loanProducts?: {
        formState?: {
          data?: {
            id: string;
            objState: ObjState;
            createdAt: string;
            modifiedAt: string;
            productName: string;
            productType: string;
            loanType: TypeOfLoan;
            productSubType: string;
            productNature: NatureOfLoanProduct;
            description?: string | null;
            typeOfMember: Array<KymMemberTypesEnum | null>;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            minimumLoanAmount?: any | null;
            maxLoanAmount?: any | null;
            repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
            allowPartialInstallment?: boolean | null;
            isMonthlyInstallmentCompulsory?: boolean | null;
            interestMethod?: LoanInterestMethod | null;
            isPenaltyApplicable?: boolean | null;
            penaltyType?: PenaltyType | null;
            penaltyDayAfterInstallmentDate?: number | null;
            penaltyRate?: number | null;
            penaltyAmount?: any | null;
            isRebateApplicable?: boolean | null;
            principalMaxGraceNumber?: number | null;
            interestMaxGraceNumber?: number | null;
            updateInterest?: boolean | null;
            waiveInterest?: boolean | null;
            isInsuranceApplicable?: boolean | null;
            isStaffProduct?: boolean | null;
            supportMultipleAccounts?: boolean | null;
            loanScheduleChangeOverride?: boolean | null;
            requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
            isCollateralRequired?: boolean | null;
            allowGurantee?: boolean | null;
            maxPercentOfGurantee?: number | null;
            collateralTypes?: Array<string | null> | null;
            isPrematurePenaltyApplicable?: boolean | null;
            productCode?: { prefix: string; initialNo: string; noOfDigits?: number | null } | null;
            rebate?: {
              dayBeforeInstallmentDate?: number | null;
              rebateRate?: number | null;
              rebateAmount?: any | null;
              rebateLedgerMapping?: string | null;
            } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate: number;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
            } | null;
            loanProcessingCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            insuranceType?: {
              type?: string | null;
              amount?: any | null;
              rate?: number | null;
            } | null;
            ledgerMapping?: {
              principal?: string | null;
              interestAccuredDaily?: string | null;
              interestIncome?: string | null;
            } | null;
            collateralValue?: Array<{
              type?: string | null;
              minFMV?: number | null;
              maxFMV?: number | null;
              minDV?: number | null;
              maxDV?: number | null;
              minValue?: number | null;
              maxValue?: number | null;
            } | null> | null;
            prematurePenaltySetup?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductDetailQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getProductDetail?: {
          data?: {
            id: string;
            noOfaccount?: number | null;
            noOfInactiveAccounts?: number | null;
            noOfMember?: number | null;
            objState: ObjState;
            createdAt: string;
            modifiedAt: string;
            productName: string;
            productType: string;
            productSubType: string;
            productNature: NatureOfLoanProduct;
            description?: string | null;
            typeOfMember: Array<KymMemberTypesEnum | null>;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            minimumLoanAmount?: any | null;
            maxLoanAmount?: any | null;
            repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
            allowPartialInstallment?: boolean | null;
            isMonthlyInstallmentCompulsory?: boolean | null;
            interestMethod?: LoanInterestMethod | null;
            isPenaltyApplicable?: boolean | null;
            isRebateApplicable?: boolean | null;
            principalMaxGraceNumber?: number | null;
            interestMaxGraceNumber?: number | null;
            updateInterest?: boolean | null;
            waiveInterest?: boolean | null;
            isInsuranceApplicable?: boolean | null;
            isStaffProduct?: boolean | null;
            supportMultipleAccounts?: boolean | null;
            loanScheduleChangeOverride?: boolean | null;
            requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
            isCollateralRequired?: boolean | null;
            allowGurantee?: boolean | null;
            maxPercentOfGurantee?: number | null;
            collateralTypes?: Array<string | null> | null;
            isPrematurePenaltyApplicable?: boolean | null;
            loanType: TypeOfLoan;
            productPremiumInterest?: number | null;
            productCode?: { prefix: string; initialNo: string; noOfDigits?: number | null } | null;
            penalty?: {
              penaltyType?: PenaltyType | null;
              penaltyDayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
            } | null;
            rebate?: {
              dayBeforeInstallmentDate?: number | null;
              rebateRate?: number | null;
              rebateAmount?: any | null;
              rebateLedgerMapping?: string | null;
              noOfInstallment?: number | null;
            } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate: number;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              changeMin?: number | null;
              changeMax?: number | null;
            } | null;
            loanProcessingCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            insuranceType?: {
              type?: string | null;
              amount?: any | null;
              rate?: number | null;
            } | null;
            ledgerMapping?: {
              principal?: string | null;
              interestAccuredDaily?: string | null;
              interestIncome?: string | null;
            } | null;
            collateralValue?: Array<{
              type?: string | null;
              minFMV?: number | null;
              maxFMV?: number | null;
              minDV?: number | null;
              maxDV?: number | null;
              minValue?: number | null;
              maxValue?: number | null;
            } | null> | null;
            prematurePenaltySetup?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanAccountListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetLoanAccountListQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getLoanAccountlist?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            node?: {
              id: string;
              objState: LoanObjState;
              approvedDate?: Record<'local' | 'en' | 'np', string> | null;
              productType: string;
              LoanAccountName?: string | null;
              appliedLoanAmount: string;
              member: { code: string; name?: Record<'local' | 'en' | 'np', string> | null };
              productSubType: {
                id?: string | null;
                productSubType?: string | null;
                productTypeID?: string | null;
              };
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetLoanProductCriteriaQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getProductCriteria?: {
          data?: {
            gender?: Array<string | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            ethnicity?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            maritalStatus?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            occupation?: Array<string | null> | null;
            institutionType?: Array<string | null> | null;
            cooperativeUnion?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductInterestRateListQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetLoanProductInterestRateListQuery = {
  settings: {
    general?: {
      loanProducts?: {
        listProductInterestRates: {
          data?: Array<{
            id: string;
            rate: number;
            effectiveDate: Record<'local' | 'en' | 'np', string>;
            createdAt: Record<'local' | 'en' | 'np', string>;
          } | null> | null;
        };
      } | null;
    } | null;
  };
};

export type GetLoanProductInterestRateDetailQueryVariables = Exact<{
  id: Scalars['ID'];
  productId: Scalars['ID'];
}>;

export type GetLoanProductInterestRateDetailQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getProductInterestRate: {
          data?: {
            id: string;
            rate: number;
            effectiveDate: Record<'local' | 'en' | 'np', string>;
            note?: string | null;
            createdAt: Record<'local' | 'en' | 'np', string>;
            fileUploads?: Array<{ identifier: string; url: string } | null> | null;
          } | null;
        };
      } | null;
    } | null;
  };
};

export type GetLoanProductPenaltyUpdateListQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetLoanProductPenaltyUpdateListQuery = {
  settings: {
    general?: {
      loanProducts?: {
        listPenaltyCharge: {
          data?: Array<{
            payload?: {
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              dayAfterInstallmentDate?: number | null;
            } | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
            } | null;
          } | null> | null;
        };
      } | null;
    } | null;
  };
};

export type GetLoanProductPenaltyChargeDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductPenaltyChargeDetailQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getPenaltyCharge: {
          data?: {
            payload?: {
              penaltyType?: PenaltyType | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              dayAfterInstallmentDate?: number | null;
            } | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
              notes?: string | null;
              fileUploads?: Array<{ identifier: string; url: string } | null> | null;
            } | null;
          } | null;
        };
      } | null;
    } | null;
  };
};

export type GetLoanProductProcessingChargesListQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetLoanProductProcessingChargesListQuery = {
  settings: {
    general?: {
      loanProducts?: {
        listProcessingCharge: {
          data?: Array<{
            payload?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
              percentage?: number | null;
            } | null> | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
              notes?: string | null;
              fileUploads?: Array<{ identifier: string; url: string } | null> | null;
            } | null;
          } | null> | null;
        };
      } | null;
    } | null;
  };
};

export type GetLoanProductProcessingChargeDetailQueryVariables = Exact<{
  chargeId: Scalars['ID'];
}>;

export type GetLoanProductProcessingChargeDetailQuery = {
  settings: {
    general?: {
      loanProducts?: {
        getProcessingCharge: {
          data?: {
            payload?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
              percentage?: number | null;
            } | null> | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
              notes?: string | null;
              fileUploads?: Array<{ identifier: string; url: string } | null> | null;
            } | null;
          } | null;
        };
      } | null;
    } | null;
  };
};

export type GetLoanGeneralSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanGeneralSettingsQuery = {
  settings: {
    general?: {
      loan?: {
        general?: {
          emi?: boolean | null;
          epi?: boolean | null;
          flat?: boolean | null;
          collateralList?: Array<{
            id?: string | null;
            name?: string | null;
            enabled?: boolean | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductSettingsQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductSubTypeQueryVariables = Exact<{
  productTypeId?: InputMaybe<Scalars['String']>;
}>;

export type GetLoanProductSubTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
            productTypeID?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanInsuranceSchemeQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanInsuranceSchemeQuery = {
  settings: {
    general?: {
      loan?: {
        insuranceSchemes?: Array<{
          id: string;
          insuranceCompany?: string | null;
          insurancePremiumPercent?: number | null;
          maxAmount?: string | null;
          maxPercent?: number | null;
          minAmount?: string | null;
          paymentFrequency?: Frequency | null;
          minPercent?: number | null;
          paymentType?: LoanInsurancePaymentType | null;
          schemeName?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductTypeQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
            productTypeID?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanOrganizationRateListQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanOrganizationRateListQuery = {
  settings: {
    general?: {
      loan?: {
        listOrganizationRate: {
          data?: Array<{
            id: string;
            rate: number;
            effectiveDate: Record<'local' | 'en' | 'np', string>;
          } | null> | null;
        };
      } | null;
    } | null;
  };
};

export type GetLoanOrganizationRateDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanOrganizationRateDetailQuery = {
  settings: {
    general?: {
      loan?: {
        getOrganizationRate: {
          data?: {
            id: string;
            rate: number;
            effectiveDate: Record<'local' | 'en' | 'np', string>;
            note?: string | null;
            createdAt: Record<'local' | 'en' | 'np', string>;
            fileUploads?: Array<{ identifier: string; url: string } | null> | null;
          } | null;
        };
      } | null;
    } | null;
  };
};

export type GetLoanCurrentOrganizationRateQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanCurrentOrganizationRateQuery = {
  settings: { general?: { loan?: { getCurrentOrganizationRate?: number | null } | null } | null };
};

export type GetGeneralMemberSettingsDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetGeneralMemberSettingsDataQuery = {
  settings: {
    general?: {
      KYM?: {
        general?: {
          generalMember?: {
            record?: {
              isCodeSetup?: boolean | null;
              memberType?: {
                individual?: boolean | null;
                institution?: boolean | null;
                cooperative?: boolean | null;
                cooperativeUnion?: boolean | null;
              } | null;
              risk?: {
                generalRisk?: number | null;
                mediumRisk?: number | null;
                highRisk?: number | null;
              } | null;
              charge?: Array<{
                memberType: KymMemberTypesEnum;
                ledgerId: string;
                charge: number;
              } | null> | null;
              memberCode?: {
                prefix?: string | null;
                noOfDigits?: number | null;
                initialNo?: string | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreDefinedFieldsQueryVariables = Exact<{
  filter: PredefinedElementFilter;
}>;

export type GetPreDefinedFieldsQuery = {
  settings: {
    form?: {
      predefined: {
        details: {
          data?:
            | {
                __typename: 'FormField';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                fieldType: FormFieldType;
                hasOtherField: boolean;
                order: number;
                dependsOn?: Array<string | null> | null;
                isDefault: boolean;
                options?: Array<{
                  order: number;
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  isDefault: boolean;
                }> | null;
              }
            | {
                __typename: 'FormSection';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                isDefault: boolean;
                sectionType: FormSectionType;
                maxSize?: number | null;
                fields?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  fieldType: FormFieldType;
                  isDefault: boolean;
                }> | null;
                subSections?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  search_term?: FormSectionSearchTerm | null;
                }> | null;
              }
            | null;
        };
      };
    } | null;
  };
};

export type GetCustomFieldsQueryVariables = Exact<{
  kymType: FormCategory;
}>;

export type GetCustomFieldsQuery = {
  settings: {
    form?: {
      custom: {
        list: {
          data?: Array<
            | {
                __typename: 'FormField';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                fieldType: FormFieldType;
                hasOtherField: boolean;
                order: number;
                dependsOn?: Array<string | null> | null;
                isDefault: boolean;
                options?: Array<{
                  order: number;
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  isDefault: boolean;
                }> | null;
              }
            | {
                __typename: 'FormSection';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                isDefault: boolean;
                sectionType: FormSectionType;
                maxSize?: number | null;
                fields?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  fieldType: FormFieldType;
                  isDefault: boolean;
                }> | null;
                subSections?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  search_term?: FormSectionSearchTerm | null;
                }> | null;
              }
            | null
          > | null;
        };
      };
    } | null;
  };
};

export type GetDeclarationQueryVariables = Exact<{
  kymType: DeclarationFor;
}>;

export type GetDeclarationQuery = {
  settings: {
    declaration: {
      get?: { data?: { content: Record<'local' | 'en' | 'np', string> } | null } | null;
    };
  };
};

export type GetAccessLogListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetAccessLogListQuery = {
  accessLog: {
    raw: {
      data?: Array<{
        id?: string | null;
        createdAt?: string | null;
        requestBody?: unknown | null;
        responseBody?: unknown | null;
        elapsedTime?: string | null;
        statusCode?: number | null;
        ip?: string | null;
        header?: unknown | null;
        bytesReceived?: number | null;
        bytesSent?: number | null;
        userId?: string | null;
        User?: {
          id: string;
          name?: string | null;
          email?: string | null;
          profilePicUrl?: string | null;
        } | null;
        AuditLog?: Array<{
          timestamp?: string | null;
          narration?: string | null;
          extraData?: Array<string | null> | null;
        } | null> | null;
      } | null> | null;
    };
  };
};

export type GetOrganizationDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetOrganizationDataQuery = {
  settings: {
    general?: {
      organization?: {
        mine?: {
          data?: {
            id: string;
            documents?: Array<string | null> | null;
            basicDetails?: {
              name?: string | null;
              logo?: string | null;
              typeOfOrganization?: TypeOfOrganization | null;
            } | null;
            contactDetails?: {
              phoneNumber?: string | null;
              email?: string | null;
              website?: string | null;
            } | null;
            mainContactPerson?: {
              contactPersonName?: string | null;
              contactPersonContactNumber?: string | null;
              title?: string | null;
            } | null;
            address?: AddressFragment | null;
            registrationDetails?: {
              regdNo?: string | null;
              regdOffice?: string | null;
              regdAddress?: string | null;
              panOrVat?: string | null;
            } | null;
            statistics?: { totalMembers: number; totalCapital: number } | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetOrganizationEditDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetOrganizationEditDataQuery = {
  settings: {
    general?: {
      organization?: {
        formState?: {
          data?: {
            id?: string | null;
            documents?: Array<string | null> | null;
            basicDetails?: {
              name?: string | null;
              logo?: string | null;
              typeOfOrganization?: TypeOfOrganization | null;
            } | null;
            contactDetails?: {
              phoneNumber?: string | null;
              email?: string | null;
              website?: string | null;
            } | null;
            mainContactPerson?: {
              contactPersonName?: string | null;
              contactPersonContactNumber?: string | null;
              title?: string | null;
            } | null;
            address?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            registrationDetails?: {
              regdNo?: string | null;
              regdOffice?: string | null;
              regdAddress?: string | null;
              panOrVat?: string | null;
            } | null;
            statistics?: { totalMembers: number; totalCapital: number } | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPearlsReportsFormulaQueryVariables = Exact<{ [key: string]: never }>;

export type GetPearlsReportsFormulaQuery = {
  settings: {
    general?: {
      reports?: {
        pearls?: {
          list?: Array<{
            header: string;
            description: string;
            numerator: string;
            numeratorVariables: Record<string, string>;
            denominator: string;
            denominatorVariables: Record<string, string>;
            goal: string;
            indicatorId: string;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCopomisReportSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type GetCopomisReportSettingsQuery = {
  settings: {
    general?: {
      reports?: {
        copomis?: {
          list?: Array<{
            expression: string;
            id: string;
            indicatorName: string;
            values: Record<string, string>;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositSettingsIroQueryVariables = Exact<{ [key: string]: never }>;

export type GetDepositSettingsIroQuery = {
  settings: {
    general?: {
      deposit?: {
        iroFormState?: {
          data?: {
            iroName?: string | null;
            iroAddress?: string | null;
            iroCode?: string | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositSettingsTdsQueryVariables = Exact<{ [key: string]: never }>;

export type GetDepositSettingsTdsQuery = {
  settings: {
    general?: {
      deposit?: {
        tdsFormState?: {
          data?: {
            individual?: number | null;
            institution?: number | null;
            cooperative?: number | null;
            coopUnion?: number | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingsOrganizationRateListQueryVariables = Exact<{ [key: string]: never }>;

export type GetSavingsOrganizationRateListQuery = {
  settings: {
    general?: {
      deposit?: {
        listOrganizationRate: {
          data?: Array<{
            id: string;
            rate: number;
            effectiveDate: Record<'local' | 'en' | 'np', string>;
          } | null> | null;
        };
      } | null;
    } | null;
  };
};

export type GetSavingsOrganizationRateDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSavingsOrganizationRateDetailQuery = {
  settings: {
    general?: {
      deposit?: {
        getOrganizationRate: {
          data?: {
            id: string;
            rate: number;
            effectiveDate: Record<'local' | 'en' | 'np', string>;
            note?: string | null;
            createdAt: Record<'local' | 'en' | 'np', string>;
            fileUploads?: Array<{ identifier: string; url: string } | null> | null;
          } | null;
        };
      } | null;
    } | null;
  };
};

export type GetCurrentOrganizationRateQueryVariables = Exact<{ [key: string]: never }>;

export type GetCurrentOrganizationRateQuery = {
  settings: {
    general?: { deposit?: { getCurrentOrganizationRate?: number | null } | null } | null;
  };
};

export type GetDepositProductSettingsListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<DepositProductSearchFilter>;
}>;

export type GetDepositProductSettingsListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        list?: {
          totalCount: number;
          pageInfo: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          };
          edges: Array<{
            node: {
              id: string;
              objState: ObjState;
              productCode: string;
              productName: string;
              nature: NatureOfDepositProduct;
              interest?: number | null;
              createdDate?: string | null;
              typeOfMember?: Array<KymMemberTypesEnum | null> | null;
              createdAt: Record<'local' | 'en' | 'np', string>;
              modifiedAt: string;
              createdBy: { id: string; name: string; username: string; userType: UserType };
              modifiedBy: { id: string; name: string; username: string; userType: UserType };
            };
          }>;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositProductSettingsEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetDepositProductSettingsEditDataQuery = {
  settings: {
    general?: {
      depositProduct?: {
        formState?: {
          data?: {
            productName?: string | null;
            nature?: NatureOfDepositProduct | null;
            description?: string | null;
            typeOfMember?: Array<KymMemberTypesEnum | null> | null;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            transactionAllowed?: DepositFrequency | null;
            noOftransactionAllowed?: number | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isForMinors?: boolean | null;
            depositFrequency?: Frequency | null;
            penalty?: boolean | null;
            rebate?: boolean | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            ladderRate?: boolean | null;
            postingFrequency?: DepositFrequency | null;
            maxPostingFreqDifference?: number | null;
            accountType?: DefaultAccountType | null;
            isMandatorySaving?: boolean | null;
            autoOpen?: boolean | null;
            allowLoan?: boolean | null;
            percentageOfDeposit?: number | null;
            alternativeChannels?: boolean | null;
            atmFacility?: boolean | null;
            chequeIssue?: boolean | null;
            supportMultiple?: boolean | null;
            staffProduct?: boolean | null;
            withdrawRestricted?: boolean | null;
            specifyWithdrawRestriction?: string | null;
            wealthBuildingProduct?: boolean | null;
            individualDocuments?: Array<IndividualRequiredDocument | null> | null;
            institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
            isPrematurePenaltyApplicable?: boolean | null;
            productCode: { prefix: string; initialNo: string; noOfDigits?: number | null };
            depositAmount?: { minAmount?: any | null; maxAmount?: any | null } | null;
            withdrawAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            fixedDepositAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            penaltyData?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebateData?: {
              dayBeforeInstallmentDate?: number | null;
              noOfInstallment?: number | null;
              rebateAmount?: any | null;
              rebateRate?: number | null;
              rebateLedgerMapping?: string | null;
            } | null;
            balanceLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate?: number | null;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              additionalRate?: number | null;
            } | null;
            ladderRateData?: Array<{ type: string; amount: any; rate: number } | null> | null;
            serviceCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            accountCloseCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            chequeCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            atmCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            alternativeChannelCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            dormantSetup?: Array<{
              duration?: DormantDuration | null;
              condition?: DormantCondition | null;
            } | null> | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingsProductDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSavingsProductDetailQuery = {
  settings: {
    general?: {
      depositProduct?: {
        depositProductDetail?: {
          data?: {
            id?: string | null;
            noOfAccounts?: number | null;
            noOfDormantAccounts?: number | null;
            noOfInactiveAccounts?: number | null;
            noOfMembers?: number | null;
            objState?: ObjState | null;
            supportMultiple?: boolean | null;
            productName?: string | null;
            nature?: NatureOfDepositProduct | null;
            description?: string | null;
            typeOfMember?: Array<KymMemberTypesEnum | null> | null;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            transactionAllowed?: DepositFrequency | null;
            noOftransactionAllowed?: number | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isForMinors?: boolean | null;
            depositFrequency?: Frequency | null;
            penalty?: boolean | null;
            rebate?: boolean | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            ladderRate?: boolean | null;
            postingFrequency?: DepositFrequency | null;
            maxPostingFreqDifference?: number | null;
            accountType?: DefaultAccountType | null;
            isMandatorySaving?: boolean | null;
            autoOpen?: boolean | null;
            allowLoan?: boolean | null;
            percentageOfDeposit?: number | null;
            alternativeChannels?: boolean | null;
            atmFacility?: boolean | null;
            chequeIssue?: boolean | null;
            staffProduct?: boolean | null;
            withdrawRestricted?: boolean | null;
            specifyWithdrawRestriction?: string | null;
            wealthBuildingProduct?: boolean | null;
            individualDocuments?: Array<IndividualRequiredDocument | null> | null;
            institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
            isPrematurePenaltyApplicable?: boolean | null;
            productPremiumInterest?: number | null;
            productCode: { prefix: string; initialNo: string; noOfDigits?: number | null };
            depositAmount?: { minAmount?: any | null; maxAmount?: any | null } | null;
            withdrawAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            fixedDepositAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            penaltyData?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebateData?: {
              dayBeforeInstallmentDate?: number | null;
              noOfInstallment?: number | null;
              rebateAmount?: any | null;
              rebateRate?: number | null;
              rebateLedgerMapping?: string | null;
            } | null;
            balanceLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate?: number | null;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              additionalRate?: number | null;
              changeMin?: number | null;
              changeMax?: number | null;
            } | null;
            ladderRateData?: Array<{ type: string; amount: any; rate: number } | null> | null;
            serviceCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            accountCloseCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            chequeCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            atmCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            alternativeChannelCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            dormantSetup?: Array<{
              duration?: DormantDuration | null;
              condition?: DormantCondition | null;
            } | null> | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            savingCharges?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingsProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetSavingsProductCriteriaQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductCriteria?: {
          data?: {
            gender?: Array<string | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            ethnicity?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            maritalStatus?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            occupation?: Array<string | null> | null;
            institutionType?: Array<string | null> | null;
            cooperativeUnion?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingsAccountListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetSavingsAccountListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getAccountlist?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            node?: {
              id: string;
              objState: ObjState;
              closedAt?: string | null;
              accountName?: string | null;
              balance?: string | null;
              interestAccured?: string | null;
              interestTax?: string | null;
              prematurePenalty?: string | null;
              lastTransactionDate?: Record<'local' | 'en' | 'np', string> | null;
              accountOpenedDate?: Record<'local' | 'en' | 'np', string> | null;
              installmentAmount?: string | null;
              accountExpiryDate?: Record<'local' | 'en' | 'np', string> | null;
              overDrawnBalance?: string | null;
              guaranteedAmount?: string | null;
              member?: {
                code: string;
                type: KymMemberTypesEnum;
                name?: Record<'local' | 'en' | 'np', string> | null;
                profilePicUrl?: string | null;
              } | null;
              product: { productCode: string; productName: string; nature: NatureOfDepositProduct };
              dues?: {
                fine?: string | null;
                totalDue?: string | null;
                dueInstallments?: number | null;
              } | null;
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingProductInterestRateListQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetSavingProductInterestRateListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        listProductInterestRates: {
          data?: Array<{
            id: string;
            rate: number;
            effectiveDate: Record<'local' | 'en' | 'np', string>;
            createdAt: Record<'local' | 'en' | 'np', string>;
          } | null> | null;
        };
      } | null;
    } | null;
  };
};

export type GetSavingProductInterestRateDetailQueryVariables = Exact<{
  id: Scalars['ID'];
  productId: Scalars['ID'];
}>;

export type GetSavingProductInterestRateDetailQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductInterestRate: {
          data?: {
            id: string;
            rate: number;
            effectiveDate: Record<'local' | 'en' | 'np', string>;
            note?: string | null;
            createdAt: Record<'local' | 'en' | 'np', string>;
            fileUploads?: Array<{ identifier: string; url: string } | null> | null;
          } | null;
        };
      } | null;
    } | null;
  };
};

export type GetSavingProductPenaltyUpdateListQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetSavingProductPenaltyUpdateListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        listPenaltyCharge: {
          data?: Array<{
            payload?: { penaltyRate?: number | null; penaltyAmount?: any | null } | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
            } | null;
          } | null> | null;
        };
      } | null;
    } | null;
  };
};

export type GetSavingProductPenaltyChargeDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSavingProductPenaltyChargeDetailQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getPenaltyCharge: {
          data?: {
            payload?: {
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              dayAfterInstallmentDate?: number | null;
            } | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
              notes?: string | null;
              fileUploads?: Array<{ identifier: string; url: string } | null> | null;
            } | null;
          } | null;
        };
      } | null;
    } | null;
  };
};

export type GetOpenChargeListQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetOpenChargeListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        listOpenCharge: {
          data?: Array<{
            payload?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
              percentage?: number | null;
            } | null> | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
              notes?: string | null;
              fileUploads?: Array<{ identifier: string; url: string } | null> | null;
            } | null;
          } | null> | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type GetCloseChargeListQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetCloseChargeListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        listCloseCharge: {
          data?: Array<{
            payload?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
              percentage?: number | null;
            } | null> | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
              notes?: string | null;
              fileUploads?: Array<{ identifier: string; url: string } | null> | null;
            } | null;
          } | null> | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type GetOpenChargeQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetOpenChargeQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getOpenCharge: {
          data?: {
            payload?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
              percentage?: number | null;
            } | null> | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
              notes?: string | null;
              fileUploads?: Array<{ identifier: string; url: string } | null> | null;
            } | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type GetCloseChargeQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetCloseChargeQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getCloseCharge: {
          data?: {
            payload?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
              percentage?: number | null;
            } | null> | null;
            additionalData?: {
              id?: string | null;
              createdAt?: Record<'local' | 'en' | 'np', string> | null;
              effectiveDate: Record<'local' | 'en' | 'np', string>;
              notes?: string | null;
              fileUploads?: Array<{ identifier: string; url: string } | null> | null;
            } | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type GetSettingsOptionsFieldsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
  category: FormCategory;
}>;

export type GetSettingsOptionsFieldsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetSettingsShareBonusDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareBonusDataQuery = {
  settings: {
    general?: {
      share?: {
        bonus?: {
          taxPayer?: TaxPayerOptions | null;
          taxRate?: number | null;
          accountMapping?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareDividendDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareDividendDataQuery = {
  settings: {
    general?: {
      share?: {
        dividend?: {
          distributionCondition?: DividendDistributionCondition | null;
          dividendTransferTreatment?: DividendTransferTreatment | null;
          accountForFractionalDividends?: string | null;
          accountForShareDividends?: string | null;
          organizationFundForDividends?: string | null;
          dividendRate?: {
            quarterly?: {
              firstQuarter?: number | null;
              secondQuarter?: number | null;
              thirdQuarter?: number | null;
              fourthQuarter?: number | null;
            } | null;
            monthly?: {
              firstMonth?: number | null;
              secondMonth?: number | null;
              thirdMonth?: number | null;
              fourthMonth?: number | null;
              fifthMonth?: number | null;
              sixthMonth?: number | null;
              seventhMonth?: number | null;
              eightMonth?: number | null;
              ninthMonth?: number | null;
              tenthMonth?: number | null;
              eleventhMonth?: number | null;
              twelfthMonth?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareIssueChargesDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareIssueChargesDataQuery = {
  settings: {
    general?: {
      share?: {
        shareIssueCharges?: {
          shareCertificate?: Array<{
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
          other?: Array<{
            name?: string | null;
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLedgerMapingShareQueryVariables = Exact<{ [key: string]: never }>;

export type GetLedgerMapingShareQuery = {
  settings: {
    general?: {
      chartsOfAccount?: {
        accountsUnder?: {
          data?: Array<{
            id: string;
            accountCode: string;
            name: Record<'local' | 'en' | 'np', string>;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareReturnChargesDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareReturnChargesDataQuery = {
  settings: {
    general?: {
      share?: {
        shareReturnCharges?: {
          other?: Array<{
            name?: string | null;
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareGeneralDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareGeneralDataQuery = {
  settings: {
    general?: {
      share?: {
        general?: {
          typeOfShare?: TypeOfShare | null;
          multiplicityFactor?: number | null;
          minimumQuantityOfShare?: number | null;
          maximumQuantityOfShare?: number | null;
          paidUpShareRate?: number | null;
          shareIssueAuthority?: Array<BranchCategory | null> | null;
          typeOfShareKitta?: TypeOfShare | null;
          noOfAuthorisedPaidUpShare?: number | null;
          noOfIssuedShare?: number | null;
          startNumber?: number | null;
          endNumber?: number | null;
          incrementor?: number | null;
          noOfDigits?: number | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareTransferDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareTransferDataQuery = {
  settings: {
    general?: {
      share?: {
        transfer?: {
          type?: ShareTransferType | null;
          accountForShareFund?: string | null;
          mappedShareLedger?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsUserListDataQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetSettingsUserListDataQuery = {
  settings: {
    myraUser?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            objState: ObjState;
            createdAt: Record<'local' | 'en' | 'np', string>;
            modifiedAt: Record<'local' | 'en' | 'np', string>;
            name?: string | null;
            email?: string | null;
            contactNo?: string | null;
            gender?: UserGender | null;
            dob?: string | null;
            empCode?: string | null;
            profilePicUrl?: string | null;
            lastActiveDate?: Record<'local' | 'en' | 'np', string> | null;
            linkedBranches?: Array<{
              id: string;
              branchCode?: string | null;
              name: string;
            } | null> | null;
            role?: Array<{ id: string; name: string } | null> | null;
            branch?: { id: string; name?: string | null } | null;
          } | null;
        }> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    } | null;
  };
};

export type GetSettingsUserEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSettingsUserEditDataQuery = {
  settings: {
    myraUser?: {
      formState?: {
        data?: {
          name?: string | null;
          email?: string | null;
          contactNo?: string | null;
          gender?: UserGender | null;
          dob?: Record<'local' | 'en' | 'np', string> | null;
          empCode?: string | null;
          isCoreEmployee?: boolean | null;
          role?: Array<string | null> | null;
          branch?: Array<string | null> | null;
          identificationSelection?: Array<string | null> | null;
          isTempAsPermanentAddressSame?: boolean | null;
          landlordName?: string | null;
          landlordContact?: string | null;
          identificationDetails?: Array<{
            id?: string | null;
            idNo?: string | null;
            idType?: string | null;
            place?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          profilePicture?: Array<{ identifier?: string | null; url?: string | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetUserRolesQueryVariables = Exact<{ [key: string]: never }>;

export type GetUserRolesQuery = {
  settings: { allRoles?: Array<{ id: string; name: string } | null> | null };
};

export type GetTellerListQueryVariables = Exact<{ [key: string]: never }>;

export type GetTellerListQuery = {
  settings: {
    myraUser?: {
      tellers?: Array<{ id?: string | null; name?: string | null } | null> | null;
    } | null;
  };
};

export type GetSettingsUserDetailsDataQueryVariables = Exact<{
  userID: Scalars['ID'];
}>;

export type GetSettingsUserDetailsDataQuery = {
  settings: {
    myraUser?: {
      userDetail?: {
        basicInfo?: {
          name: Record<'local' | 'en' | 'np', string>;
          profilePicUrl?: string | null;
          userId: string;
        } | null;
        userOverview?: {
          rolesCount?: number | null;
          serviceCenterCount?: number | null;
          lastActiveDate?: Record<'local' | 'en' | 'np', string> | null;
          name?: Record<'local' | 'en' | 'np', string> | null;
          isCoreEmployee?: boolean | null;
          empCode?: string | null;
          gender?: UserGender | null;
          contactNo?: string | null;
          email?: string | null;
          dateJoined?: Record<'local' | 'en' | 'np', string> | null;
          role?: Array<{ id: string; name: string } | null> | null;
          branches?: Array<{ branchCode?: string | null; id: string; name: string } | null> | null;
        } | null;
        userBio?: {
          isTemporarySameAsPermanent?: boolean | null;
          landlordName?: string | null;
          landlordContact?: string | null;
          permanentAddress?: AddressFragment | null;
          temporaryAddress?: AddressFragment | null;
          identificationDetail?: Array<{
            id?: string | null;
            idNo?: string | null;
            idType?: string | null;
            place?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
          documents?: Array<{ identifier?: string | null; url?: string | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetValuatorQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetValuatorQuery = {
  settings: {
    general?: {
      valuator?: {
        formState?: {
          data?: {
            valuatorName?: string | null;
            valuatorType?: ValuatorType | null;
            valuatorId?: string | null;
            academicQualification?: string | null;
            valuationLicenseNo?: string | null;
            renewalDate?: Record<'local' | 'en' | 'np', string> | null;
            contractDate?: Record<'local' | 'en' | 'np', string> | null;
            insurancePremium?: number | null;
            mobileNo?: string | null;
            phoneNo?: string | null;
            email?: string | null;
            documents?: Array<string | null> | null;
            address?: {
              localGovernmentId?: number | null;
              districtId?: number | null;
              provinceId?: number | null;
              houseNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: number | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetValuatorListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
}>;

export type GetValuatorListQuery = {
  settings: {
    general?: {
      valuator?: {
        list?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            cursor: string;
            node?: {
              id: string;
              valuatorName?: string | null;
              valuatorType?: ValuatorType | null;
              phoneNo?: string | null;
              contractDate?: string | null;
              address?: {
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                state?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
              } | null;
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetChartOfAccountsQueryVariables = Exact<{ [key: string]: never }>;

export type GetChartOfAccountsQuery = {
  settings: {
    general?: {
      chartsOfAccount?: { class?: { data: Array<{ id: string; name: string }> } | null } | null;
    } | null;
  };
};

export type GetShareBalanceListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetShareBalanceListQuery = {
  share: {
    balance?: {
      totalCount: number;
      pageInfo: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      };
      edges: Array<{
        node: {
          count: number;
          amount: number;
          member: {
            id: string;
            code: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePic?: string | null;
            profilePicUrl?: string | null;
          };
        };
      }>;
    } | null;
  };
};

export type GetShareRegisterListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetShareRegisterListQuery = {
  share: {
    register?: {
      totalCount: number;
      edges: Array<{
        cursor: string;
        node: {
          id?: string | null;
          transactionDate?: Record<'local' | 'en' | 'np', string> | null;
          transactionDirection: Share_Transaction_Direction;
          balance?: number | null;
          startNumber: number;
          shareAmount?: string | null;
          endNumber: number;
          credit?: number | null;
          debit?: number | null;
          member?: {
            id: string;
            code: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePic?: string | null;
            profilePicUrl?: string | null;
          } | null;
        };
      }>;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetShareHistoryQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetShareHistoryQuery = {
  share: {
    history?: {
      history?: Array<{
        id?: string | null;
        status?: Share_Status | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        transactionDirection: Share_Transaction_Direction;
        credit?: number | null;
        debit?: number | null;
        startNumber: number;
        endNumber: number;
        balance?: number | null;
        shareAmount?: string | null;
        totalAmount?: number | null;
        paymentMode?: SharePaymentMode | null;
        bankId?: string | null;
        voucherNumber?: string | null;
        accountId?: string | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
        } | null;
        extraFee?: Array<{ name: string; value: number } | null> | null;
      } | null> | null;
      balance?: {
        count: number;
        amount: number;
        member: { id: string; name?: Record<'local' | 'en' | 'np', string> | null };
      } | null;
    } | null;
  };
};

export type GetShareChargesQueryVariables = Exact<{
  transactionType: Share_Transaction_Direction;
  shareCount: Scalars['Int'];
}>;

export type GetShareChargesQuery = {
  share: {
    charges?: Array<{
      id?: string | null;
      name?: string | null;
      charge?: string | null;
    } | null> | null;
  };
};

export type GetShareDetailQueryVariables = Exact<{
  transactionID: Scalars['ID'];
}>;

export type GetShareDetailQuery = {
  share: {
    shareDetail?: {
      data?: {
        id: string;
        totalShareCount?: number | null;
        totalShareAmount?: string | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        type?: string | null;
        noOfShare?: number | null;
        amount?: string | null;
        total?: string | null;
        status?: string | null;
        transactionCode?: string | null;
        paymentFile?: string | null;
        transactionBranch?: string | null;
        teller?: string | null;
        totalCredit?: string | null;
        totalDebit?: string | null;
        note?: string | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          type: KymMemberTypesEnum;
          profilePicUrl?: string | null;
        } | null;
        fromTo?: { start?: number | null; end?: number | null } | null;
        charges?: Array<{ name?: string | null; value?: string | null } | null> | null;
        paymentDetail?: {
          paymentMode?: SharePaymentMode | null;
          amount?: string | null;
          sourceOfFund?: string | null;
          depositedDate?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        glTransactions?: Array<{
          ledgerId?: string | null;
          account: string;
          serviceCentreId?: string | null;
          serviceCenter?: string | null;
          debit?: string | null;
          credit?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetShareFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetShareFilterMappingQuery = {
  share: {
    filterMapping?: {
      status?: Array<{ label?: string | null; value?: unknown | null }> | null;
      transactionDirection?: Array<{ label?: string | null; value?: unknown | null }> | null;
    } | null;
  };
};

export type GetDepositListDataQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetDepositListDataQuery = {
  transaction: {
    listDeposit: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          transactionCode?: string | null;
          name?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          state: TransactionState;
          paymentMode?: string | null;
          processedBy?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          agentName?: string | null;
          agentId?: string | null;
          profilePicUrl?: string | null;
          agentPicUrl?: string | null;
          branchName: string;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetWithdrawListDataQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetWithdrawListDataQuery = {
  transaction: {
    listWithdraw: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          transactionCode?: string | null;
          name?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          state: TransactionState;
          paymentMode?: string | null;
          processedBy?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          profilePicUrl?: string | null;
          branchName: string;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAccountTransferListDataQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountTransferListDataQuery = {
  transaction: {
    listTransfer: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          transactionCode?: string | null;
          amount?: string | null;
          state: TransactionState;
          transferType: TransferType;
          date?: Record<'local' | 'en' | 'np', string> | null;
          branchName: string;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetEndOfDayDateDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetEndOfDayDateDataQuery = {
  transaction: {
    endOfDayDate: {
      value: Record<'local' | 'en' | 'np', string>;
      isYearEnd: boolean;
      hasErrors: boolean;
      isInitialized: boolean;
      headOfficeReady?: boolean | null;
    };
  };
};

export type GetTellerTransactionListDataQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetTellerTransactionListDataQuery = {
  transaction: {
    listTellerTransaction: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          transferCode?: string | null;
          transferType: TellerTransferType;
          transferState: TellerActivityState;
          srcTeller?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          destTeller?: Record<'local' | 'en' | 'np', string> | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          srcProfilePic?: string | null;
          destProfilePic?: string | null;
          srcProfilePicUrl?: string | null;
          destProfilePicUrl?: string | null;
          destBranch?: Record<'local' | 'en' | 'np', string> | null;
          srcBranch?: Record<'local' | 'en' | 'np', string> | null;
          transactionBranchName?: string | null;
          denomination?: Array<{
            value: CashValue;
            quantity: number;
            amount?: string | null;
          } | null> | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type TransactionDepositDetailQueryVariables = Exact<{
  transactionId: Scalars['ID'];
}>;

export type TransactionDepositDetailQuery = {
  transaction: {
    viewDeposit?: {
      data?: {
        id: string;
        transactionCode?: string | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        accountId?: string | null;
        accountName?: string | null;
        voucherId?: string | null;
        amount?: string | null;
        fine?: string | null;
        rebate?: string | null;
        totalDepositedAmount?: string | null;
        status?: ObjState | null;
        paymentMode?: DepositPaymentType | null;
        sourceOfFund?: string | null;
        depositedBy?: DepositedBy | null;
        depositedDate?: Record<'local' | 'en' | 'np', string> | null;
        paymentFile?: Array<string | null> | null;
        transactionBranch?: string | null;
        teller?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        note?: string | null;
        txnUserName?: string | null;
        member?: {
          id: string;
          code: string;
          objState: ObjState;
          type: KymMemberTypesEnum;
          name?: Record<'local' | 'en' | 'np', string> | null;
          contact?: string | null;
          profilePic?: string | null;
          profilePicUrl?: string | null;
        } | null;
        glTransaction?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
          serviceCenter?: string | null;
          ledgerId?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type TransactionWithdrawDetailQueryVariables = Exact<{
  transactionId: Scalars['ID'];
}>;

export type TransactionWithdrawDetailQuery = {
  transaction: {
    viewWithdraw?: {
      data?: {
        id: string;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        transactionCode?: string | null;
        accountId?: string | null;
        accountName?: string | null;
        chequeNo?: string | null;
        withdrawAmount?: string | null;
        withdrawWith?: WithdrawWith | null;
        fine?: string | null;
        totalWithdrawnAmount?: string | null;
        status?: ObjState | null;
        paymentMode?: WithdrawPaymentType | null;
        paymentFile?: Array<string | null> | null;
        withdrawnBy?: WithdrawBy | null;
        marketRepId?: string | null;
        marketRepName?: string | null;
        transactionBranch?: string | null;
        teller?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        note?: string | null;
        txnUserName?: string | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          profilePic?: string | null;
          profilePicUrl?: string | null;
        } | null;
        glTransaction?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
          serviceCenter?: string | null;
          ledgerId?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type TransactionAccountTransferDetailQueryVariables = Exact<{
  transactionId: Scalars['ID'];
}>;

export type TransactionAccountTransferDetailQuery = {
  transaction: {
    viewAccountTransfer?: {
      data?: {
        id: string;
        transactionCode?: string | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        transferAmount?: string | null;
        transferType?: TransferType | null;
        withdrawnBy?: string | null;
        withdrawnSlipNo?: string | null;
        transactionBranch?: string | null;
        objState?: ObjState | null;
        teller?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        note?: string | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          profilePic?: string | null;
          profilePicUrl?: string | null;
        } | null;
        sourceAccount?: { id: string; accountName?: string | null } | null;
        destinationAccount?: { id: string; accountName?: string | null } | null;
        recipientMember?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        glTransaction?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
          serviceCenter?: string | null;
          ledgerId?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type LoanRepaymentDetailQueryVariables = Exact<{
  paymentId: Scalars['ID'];
}>;

export type LoanRepaymentDetailQuery = {
  transaction: {
    viewLoanRepayment?: {
      data?: {
        repaymentId: string;
        transactionCode?: string | null;
        loanSubType?: string | null;
        loanAccountId?: string | null;
        loanAccountName?: string | null;
        repaymentDate?: Record<'local' | 'en' | 'np', string> | null;
        installmentNo?: string | null;
        installmentAmount?: string | null;
        fine?: string | null;
        rebate?: string | null;
        totalRepaymentAmount?: string | null;
        objState: string;
        paymentMode?: string | null;
        depositedBy?: string | null;
        depositedDate?: Record<'local' | 'en' | 'np', string> | null;
        transactionBranch?: string | null;
        teller?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        note?: string | null;
        discount?: string | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          profilePicUrl?: string | null;
        } | null;
        installmentDetails?: Array<{
          installmentNo?: number | null;
          payment?: string | null;
          principalAmount?: string | null;
          interestAmount?: string | null;
        } | null> | null;
        glTransaction?: Array<{
          account: string;
          debit?: string | null;
          credit?: string | null;
          serviceCenter?: string | null;
          ledgerId?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
        discountDocs?: Array<{ id: string; url: string } | null> | null;
      } | null;
    } | null;
  };
};

export type GetEodStatusQueryVariables = Exact<{ [key: string]: never }>;

export type GetEodStatusQuery = {
  transaction: {
    eodStatus?: {
      stage?: EodStage | null;
      overAllStatus?: EodState | null;
      eodDate?: Record<'local' | 'en' | 'np', string> | null;
      states?: {
        currentBranchesReady?: EodState | null;
        interestBooking?: EodState | null;
        interestPosting?: EodState | null;
        transactionDate?: EodState | null;
        maturity?: EodState | null;
        dormancy?: EodState | null;
        cashInHand?: EodState | null;
        cashInVault?: EodState | null;
        loanInterestBooking?: EodState | null;
        loanRepayment?: EodState | null;
      } | null;
      errors?: {
        readiness?: Array<string | null> | null;
        interestBooking?: Array<string | null> | null;
        interestPosting?: Array<string | null> | null;
        maturity?: Array<string | null> | null;
        dormancy?: Array<string | null> | null;
        cashInHand?: Array<string | null> | null;
        cashInVault?: Array<string | null> | null;
        loanInterestBooking?: Array<string | null> | null;
        loanRepayment?: Array<string | null> | null;
      } | null;
    } | null;
  };
};

export type GetAllTransactionsListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAllTransactionsListQuery = {
  transaction: {
    listAllTransactions?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          transactionType: AllTransactionType;
          narration: string;
          amount: string;
          date: Record<'local' | 'en' | 'np', string>;
          branchName: string;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetAllTransactionsDetailQueryVariables = Exact<{
  id: Scalars['ID'];
  txnType?: InputMaybe<AllTransactionType>;
}>;

export type GetAllTransactionsDetailQuery = {
  transaction: {
    viewTransactionDetail?: {
      data?: {
        id: string;
        user?: string | null;
        transactionDate?: Record<'local' | 'en' | 'np', string> | null;
        txnType?: AllTransactionType | null;
        transactionMode?: string | null;
        amount?: string | null;
        branch?: string | null;
        note?: string | null;
        status?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        member?: {
          id: string;
          code: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          profilePicUrl?: string | null;
        } | null;
        glTransaction?: Array<{
          account: string;
          serviceCenter?: string | null;
          debit?: string | null;
          credit?: string | null;
          ledgerId?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetStrTransactionDetailQueryVariables = Exact<{
  transactionId: Scalars['ID'];
}>;

export type GetStrTransactionDetailQuery = {
  transaction: {
    strTransactionDetail?: {
      data?: {
        memberType?: KymMemberTypesEnum | null;
        strStatus?: boolean | null;
        strReason?: string | null;
        strTopology?: string | null;
        bio?: {
          memberName?: string | null;
          profilePic?: string | null;
          memberCode?: string | null;
          memberJoined?: Record<'local' | 'en' | 'np', string> | null;
          dob?: Record<'local' | 'en' | 'np', string> | null;
          gender?: Record<'local' | 'en' | 'np', string> | null;
          mobile?: string | null;
          email?: string | null;
          currentAddress?: Record<'local' | 'en' | 'np', string> | null;
          permanentAddress?: Record<'local' | 'en' | 'np', string> | null;
          maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
          profession?: string | null;
          nationality?: string | null;
          familyMembers?: Array<{
            relationship?: string | null;
            fullName?: string | null;
            dob?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
          identificationDetail?: Array<{
            id?: string | null;
            identificationNo?: string | null;
            idType: string;
            place?: string | null;
            date?: Record<'local' | 'en' | 'np', string> | null;
            additionalFields?: Array<{
              id?: string | null;
              fieldId?: string | null;
              value?: Record<'local' | 'en' | 'np', string> | null;
            } | null> | null;
          } | null> | null;
          docs?: Array<{ key?: string | null; value?: string | null } | null> | null;
        } | null;
        strAccountDetails?: {
          id?: string | null;
          natureOfAccount?: string | null;
          natureOfOwnership?: string | null;
          nameOfDirector?: string | null;
          accountOpenDate?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        savingAccounts?: Array<{
          id: string;
          accountName?: string | null;
          balance?: string | null;
          product: { nature: NatureOfDepositProduct };
        } | null> | null;
        transactionDetails?: Array<{
          accountNo?: string | null;
          year?: string | null;
          drTransactionNo?: string | null;
          drTransactionAmount?: string | null;
          crTransactionNo?: string | null;
          crTransactionAmount?: string | null;
          closingBalance?: string | null;
        } | null> | null;
        deposits?: Array<{
          id?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          transactionCode?: string | null;
          depositer?: string | null;
          amount?: string | null;
          remarks?: string | null;
        } | null> | null;
        withdraw?: Array<{
          id?: string | null;
          date?: Record<'local' | 'en' | 'np', string> | null;
          transactionCode?: string | null;
          depositer?: string | null;
          amount?: string | null;
          remarks?: string | null;
        } | null> | null;
        loanAccount?: Array<{
          id: string;
          LoanAccountName?: string | null;
          totalSanctionedAmount?: string | null;
          remainingBalance?: string | null;
          remainingInterestTillDate?: string | null;
          product: { id: string; productName: string };
        } | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type EodHistoryQueryVariables = Exact<{
  transactionDate?: InputMaybe<Scalars['Localized']>;
}>;

export type EodHistoryQuery = {
  endOfDay: {
    history?: Array<{
      eodDate: string;
      status: EodState;
      completedTime?: string | null;
      errorCount?: number | null;
      completedBy?: string | null;
    } | null> | null;
  };
};

export type EodHistoryDetailsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter: EodDetailsFilter;
}>;

export type EodHistoryDetailsQuery = {
  endOfDay: {
    details?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          jobType: EodJob;
          success: boolean;
          accountNumber: string;
          narration: string;
          payload?: Record<string, string> | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type OptionTypeFragment = { label?: string | null; value?: unknown | null };

export type GetDepositFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetDepositFilterMappingQuery = {
  transaction: {
    filterMapping?: {
      deposit?: {
        depositedBy?: Array<OptionTypeFragment> | null;
        paymentMode: Array<OptionTypeFragment>;
      } | null;
    } | null;
  };
};

export type GetWithdrawFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetWithdrawFilterMappingQuery = {
  transaction: {
    filterMapping?: { withdraw?: { paymentMode: Array<OptionTypeFragment> } | null } | null;
  };
};

export type GetAccountTransferFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetAccountTransferFilterMappingQuery = {
  transaction: { filterMapping?: { transfer?: { type: Array<OptionTypeFragment> } | null } | null };
};

export type GetAgentFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetAgentFilterMappingQuery = {
  transaction: {
    filterMapping?: { agent?: { branchId: Array<OptionTypeFragment> } | null } | null;
  };
};

export type GetAllTransactionFilterMappingQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllTransactionFilterMappingQuery = {
  transaction: {
    filterMapping?: {
      allTransaction?: {
        branchId: Array<OptionTypeFragment>;
        txnType: Array<OptionTypeFragment>;
      } | null;
    } | null;
  };
};

export type BulkTransfersListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type BulkTransfersListQuery = {
  transaction: {
    listBulkTransfers?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id?: string | null;
          transferType?: BulkTransferType | null;
          transferDate?: Record<'local' | 'en' | 'np', string> | null;
          transferAmount?: string | null;
          totalTransferAmount?: string | null;
          sourceId?: string | null;
          sourceName?: string | null;
          destinationId?: string | null;
          destinationName?: string | null;
          transactionId?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetTagKhataReportQueryVariables = Exact<{
  data: TagKhataReportFilter;
}>;

export type GetTagKhataReportQuery = {
  report: {
    transactionReport: {
      financial: {
        tagKhataReport: {
          data?: Array<{
            tagId?: string | null;
            tagName?: string | null;
            openingBalance?: unknown | null;
            drAmount?: string | null;
            crAmount?: string | null;
            netBalance?: unknown | null;
            closingBalance?: unknown | null;
            ledgers?: Array<{
              ledgerId?: string | null;
              ledgerName?: string | null;
              openingBalance?: unknown | null;
              drAmount?: string | null;
              crAmount?: string | null;
              netBalance?: unknown | null;
              closingBalance?: unknown | null;
            } | null> | null;
          } | null> | null;
        };
      };
    };
  };
};

export type YearEndLedgerAccountListQueryVariables = Exact<{ [key: string]: never }>;

export type YearEndLedgerAccountListQuery = {
  transaction: {
    yearEnd?: {
      getCurrentState?: {
        data?: {
          expenseEntries?: Array<{
            ledgerId?: string | null;
            ledgerName?: string | null;
            branchId?: string | null;
            branchName?: string | null;
            balance?: { amount?: string | null; amountType?: BalanceType | null } | null;
          } | null> | null;
          totalExpense?: { amount?: string | null; amountType?: BalanceType | null } | null;
          incomeEntries?: Array<{
            ledgerId?: string | null;
            ledgerName?: string | null;
            branchId?: string | null;
            branchName?: string | null;
            balance?: { amount?: string | null; amountType?: BalanceType | null } | null;
          } | null> | null;
          totalIncome?: { amount?: string | null; amountType?: BalanceType | null } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetTransferDetailQueryVariables = Exact<{
  transferID: Scalars['ID'];
}>;

export type GetTransferDetailQuery = {
  transaction: {
    transferDetail?: {
      data?: {
        ID: string;
        transferCode?: string | null;
        transferType: TellerTransferType;
        transferState?: TellerActivityState | null;
        srcTeller?: Record<'local' | 'en' | 'np', string> | null;
        amount?: string | null;
        totalBalance?: string | null;
        destTeller?: Record<'local' | 'en' | 'np', string> | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        srcBranch?: Record<'local' | 'en' | 'np', string> | null;
        destBranch?: Record<'local' | 'en' | 'np', string> | null;
        srcProfilePic?: string | null;
        srcProfilePicUrl?: string | null;
        note?: string | null;
        totalCredit?: string | null;
        totalDebit?: string | null;
        glTransaction?: Array<{
          ledgerId?: string | null;
          account: string;
          serviceCentreId?: string | null;
          serviceCenter?: string | null;
          debit?: string | null;
          credit?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCashInTransitListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetCashInTransitListQuery = {
  transaction: {
    cashInTransit: {
      totalCount?: number | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
      edges?: Array<{
        cursor?: string | null;
        node?: {
          id: string;
          transactionCode: string;
          senderServiceCentreId: string;
          senderServiceCentreName: string;
          receiverServiceCentreId: string;
          receiverServiceCentreName: string;
          senderTellerName: string;
          senderTellerId: string;
          approvalStatus: RequestStatus;
          cashAmount: string;
          transferDate: Record<'local' | 'en' | 'np', string>;
          denomination?: Array<{
            value: CashValue;
            quantity: number;
            amount?: string | null;
          } | null> | null;
        } | null;
      } | null> | null;
    };
  };
};

export type GetCashInTransitDetailQueryVariables = Exact<{
  transitID: Scalars['ID'];
}>;

export type GetCashInTransitDetailQuery = {
  transaction: {
    cashInTransitDetail?: {
      data?: {
        ID: string;
        note?: string | null;
        transitStatus?: RequestStatus | null;
        srcTeller?: Record<'local' | 'en' | 'np', string> | null;
        amount?: string | null;
        totalBalance?: string | null;
        transferMode?: CashTransferMode | null;
        collectorName?: string | null;
        destTeller?: Record<'local' | 'en' | 'np', string> | null;
        date?: Record<'local' | 'en' | 'np', string> | null;
        srcBranch?: string | null;
        destBranch?: string | null;
        srcProfilePic?: string | null;
        srcProfilePicUrl?: string | null;
        totalCredit?: string | null;
        totalDebit?: string | null;
        glTransaction?: Array<{
          account: string;
          serviceCenter?: string | null;
          debit?: string | null;
          credit?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetServiceCenterTransferListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetServiceCenterTransferListQuery = {
  transaction: {
    listServiceCenterCashTransfer?: {
      totalCount: number;
      pageInfo?: {
        startCursor?: string | null;
        endCursor?: string | null;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
      } | null;
      edges?: Array<{
        cursor: string;
        node?: {
          id?: string | null;
          journalId?: string | null;
          sender?: string | null;
          senderId?: string | null;
          receiver?: string | null;
          amount?: string | null;
          transactionDate?: Record<'local' | 'en' | 'np', string> | null;
          ibtAccount?: string | null;
          ibtCr?: string | null;
          ibtDr?: string | null;
          ibtAccountName?: string | null;
          status?: IbtStatus | null;
        } | null;
      } | null> | null;
    } | null;
  };
};

export type GetBankTransferListQueryVariables = Exact<{
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetBankTransferListQuery = {
  transaction: {
    tellerBankTransfer?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            transactionId?: string | null;
            transactionDate?: Record<'local' | 'en' | 'np', string> | null;
            tellerName?: string | null;
            transferType?: TellerBankTransferType | null;
            amount?: string | null;
            transactionBranchName?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: {
          startCursor?: string | null;
          endCursor?: string | null;
          hasNextPage: boolean;
          hasPreviousPage: boolean;
        } | null;
      } | null;
    } | null;
  };
};

export type GetTellerBankDetailsQueryVariables = Exact<{
  transactionId: Scalars['ID'];
}>;

export type GetTellerBankDetailsQuery = {
  transaction: {
    tellerBankTransfer?: {
      viewDetail?: {
        data?: {
          id?: string | null;
          transactionId?: string | null;
          transactionDate?: Record<'local' | 'en' | 'np', string> | null;
          transferType?: string | null;
          profilePic?: string | null;
          amount?: string | null;
          tellerName?: string | null;
          bankName?: string | null;
          bankTransferType?: TellerBankTransferType | null;
          status?: string | null;
          totalDebit?: string | null;
          totalCredit?: string | null;
          note?: string | null;
          glTransaction?: Array<{
            ledgerId?: string | null;
            account: string;
            serviceCentreId?: string | null;
            serviceCenter?: string | null;
            debit?: string | null;
            credit?: string | null;
            balance?: string | null;
            balanceType?: BalanceType | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetInterServiceCenterTransferDetailQueryVariables = Exact<{
  entryID: Scalars['ID'];
}>;

export type GetInterServiceCenterTransferDetailQuery = {
  transaction: {
    viewServiceCenterCashTransfer?: {
      data?: {
        id?: string | null;
        transactionID?: string | null;
        userName?: string | null;
        userProfileUrl?: string | null;
        senderServiceCenter?: string | null;
        reveiverServiceCenter?: string | null;
        transferDate?: Record<'local' | 'en' | 'np', string> | null;
        amount?: string | null;
        status?: IbtStatus | null;
        totalSenderCr?: string | null;
        totalSenderDr?: string | null;
        totalServiceCenterCr?: string | null;
        totalServiceCenterDr?: string | null;
        totalDebit?: string | null;
        totalCredit?: string | null;
        note?: string | null;
        srcLedgerInfo?: Array<{
          ledgerId?: string | null;
          ledgerName?: string | null;
          dr?: string | null;
          cr?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
        destinationBranchInfo?: Array<{
          branchId?: string | null;
          branchName?: string | null;
          dr?: string | null;
          cr?: string | null;
        } | null> | null;
        glTransaction?: Array<{
          ledgerId?: string | null;
          account: string;
          serviceCentreId?: string | null;
          serviceCenter?: string | null;
          debit?: string | null;
          credit?: string | null;
          balance?: string | null;
          balanceType?: BalanceType | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetPastSlipsListQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type GetPastSlipsListQuery = {
  withdrawSlip: {
    listPastSlips?: {
      data?: Array<{
        slipNumber: string;
        state: SlipState;
        date?: Record<'local' | 'en' | 'np', string> | null;
      } | null> | null;
    } | null;
  };
};

export type GetAvailableSlipsListQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type GetAvailableSlipsListQuery = {
  withdrawSlip: {
    listAvailableSlips?: {
      data?: Array<{
        slipNumber: string;
        state: SlipState;
        date?: Record<'local' | 'en' | 'np', string> | null;
      } | null> | null;
    } | null;
  };
};

export type GetAvailableSlipBookRangesQueryVariables = Exact<{
  accountId: Scalars['ID'];
}>;

export type GetAvailableSlipBookRangesQuery = {
  withdrawSlip: {
    listAvailableSlips?: {
      slipBookRanges?: Array<{ from: string; to: string } | null> | null;
    } | null;
  };
};

export type GetAvailableRangeQueryVariables = Exact<{
  count: Scalars['Int'];
}>;

export type GetAvailableRangeQuery = {
  withdrawSlip: { getAvailableRange?: { range?: { from: string; to: string } | null } | null };
};

export type GetWithdrawSlipDataQueryVariables = Exact<{
  requestID: Scalars['ID'];
}>;

export type GetWithdrawSlipDataQuery = {
  withdrawSlip: {
    getWithdrawSlipData?: {
      data?: {
        id?: string | null;
        noOfLeaves?: number | null;
        member?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
        } | null;
        account?: { id: string; accountName?: string | null; productName?: string | null } | null;
        availableRange?: { from: string; to: string } | null;
      } | null;
    } | null;
  };
};

export const UserFragmentDoc = `
    fragment User on User {
  id
  username
  email
  firstName
  lastName
  profilePic
  userBalance {
    amount
    amountType
  }
  userLedger
  currentRole {
    id
    name
  }
  currentBranch {
    id
    name
    category
    branchBalance {
      amount
      amountType
    }
    branchCode
    branchStatus
  }
  organization {
    id
    basicDetails {
      name
      logo
    }
    contactDetails {
      website
      phoneNumber
      email
    }
    address {
      district
      wardNo
      state
      locality
      localGovernment
      houseNo
    }
    registrationDetails {
      regdNo
      panOrVat
    }
  }
}
    `;
export const MutationErrorFragmentDoc = `
    fragment MutationError on MutationError {
  ... on BadRequestError {
    __typename
    badRequestErrorMessage: message
    code
  }
  ... on ServerError {
    __typename
    serverErrorMessage: message
    code
  }
  ... on AuthorizationError {
    __typename
    authorizationErrorMsg: message
    code
  }
  ... on ValidationError {
    __typename
    validationErrorMsg: message
    code
  }
  ... on NotFoundError {
    __typename
    notFoundErrorMsg: message
    code
  }
}
    `;
export const QueryErrorFragmentDoc = `
    fragment QueryError on QueryError {
  ... on BadRequestError {
    __typename
    badRequestErrorMessage: message
    code
  }
  ... on ServerError {
    __typename
    serverErrorMessage: message
    code
  }
  ... on AuthorizationError {
    __typename
    authorizationErrorMsg: message
    code
  }
  ... on NotFoundError {
    __typename
    notFoundErrorMsg: message
    code
  }
}
    `;
export const PaginationFragmentDoc = `
    fragment Pagination on PageInfo {
  startCursor
  endCursor
  hasNextPage
  hasPreviousPage
}
    `;
export const AddressFragmentDoc = `
    fragment Address on Address {
  houseNo
  coordinates {
    latitude
    longitude
  }
  district
  localGovernment
  locality
  state
  wardNo
}
    `;
export const LoanProductFragmentDoc = `
    fragment LoanProduct on LoanProduct {
  id
  objState
  createdAt
  modifiedAt
  createdDate
  productName
  productType
  loanType
  productSubType
  productNature
  description
  productCode {
    prefix
    initialNo
  }
  productCodeString
  typeOfMember
  criteria
  minAge
  maxAge
  genderId
  maritalStatusId
  educationQualification
  ethnicity
  occupation
  foreignEmployment
  natureOfBusinessInstitution
  natureOFBusinessCoop
  cooperativeType
  tenureUnit
  isTenureApplicable
  minTenureUnitNumber
  maxTenureUnitNumber
  minimumLoanAmount
  maxLoanAmount
  interestMethod
  repaymentScheme
  allowPartialInstallment
  isMonthlyInstallmentCompulsory
  isPenaltyApplicable
  penaltyDayAfterInstallmentDate
  penaltyType
  penaltyRate
  penaltyAmount
  principalMaxGraceNumber
  interestMaxGraceNumber
  isRebateApplicable
  rebate {
    dayBeforeInstallmentDate
    rebateRate
    rebateAmount
    rebateLedgerMapping
  }
  interest {
    minRate
    maxRate
    defaultRate
    ceoAuthority
    boardAuthority
  }
  updateInterest
  waiveInterest
  loanProcessingCharge {
    serviceName
    ledgerName
    percentage
    amount
  }
  isInsuranceApplicable
  insuranceType {
    type
    amount
    rate
  }
  ledgerMapping {
    principal
    interestAccuredDaily
    interestIncome
  }
  isStaffProduct
  supportMultipleAccounts
  loanScheduleChangeOverride
  allowGurantee
  maxPercentOfGurantee
  isCollateralRequired
  collateralTypes
  collateralValue {
    type
    name
    minFMV
    maxFMV
    minDV
    maxDV
    minValue
    maxValue
  }
  prematurePenaltySetup {
    penaltyDateType
    noOfDays
    penaltyLedgerMapping
    penaltyAmount
    penaltyRate
  }
  requiredDocuments
  productPremiumInterest
}
    `;
export const OptionTypeFragmentDoc = `
    fragment OptionType on LabelValueArray {
  label
  value
}
    `;
export const SetBankAccountsDocument = `
    mutation setBankAccounts($data: NewBankAccountInput) {
  accounting {
    bankAccounts {
      new(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBankAccountsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetBankAccountsMutation,
    TError,
    SetBankAccountsMutationVariables,
    TContext
  >
) =>
  useMutation<SetBankAccountsMutation, TError, SetBankAccountsMutationVariables, TContext>(
    ['setBankAccounts'],
    useAxios<SetBankAccountsMutation, SetBankAccountsMutationVariables>(SetBankAccountsDocument),
    options
  );
export const SetJournalVoucherDataDocument = `
    mutation setJournalVoucherData($data: JournalVoucherInput) {
  accounting {
    journalVoucher {
      new(data: $data) {
        recordId
        record {
          transactionId
          creatorId
          creatorName
          reference
          date
          note
          entries {
            name
            value
          }
          paymentMode
          totalAmount
          createdAt
          glTransaction {
            ledgerId
            account
            serviceCentreId
            serviceCenter
            debit
            credit
          }
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetJournalVoucherDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetJournalVoucherDataMutation,
    TError,
    SetJournalVoucherDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetJournalVoucherDataMutation,
    TError,
    SetJournalVoucherDataMutationVariables,
    TContext
  >(
    ['setJournalVoucherData'],
    useAxios<SetJournalVoucherDataMutation, SetJournalVoucherDataMutationVariables>(
      SetJournalVoucherDataDocument
    ),
    options
  );
export const UpdateBankAccountsDocument = `
    mutation updateBankAccounts($data: UpdateBankAccountInput) {
  accounting {
    bankAccounts {
      update(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateBankAccountsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateBankAccountsMutation,
    TError,
    UpdateBankAccountsMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateBankAccountsMutation, TError, UpdateBankAccountsMutationVariables, TContext>(
    ['updateBankAccounts'],
    useAxios<UpdateBankAccountsMutation, UpdateBankAccountsMutationVariables>(
      UpdateBankAccountsDocument
    ),
    options
  );
export const InitiateLedgerBalanceTransferDocument = `
    mutation initiateLedgerBalanceTransfer($input: LedgerBalanceTransferRequestInput!) {
  accounting {
    ledgerBalanceTransfer {
      initiateTransferRequest(input: $input) {
        recordId
        data {
          transactionId
          totalLedgerAccounts
          totalTransferBalance {
            amount
            amountType
          }
          destinationLedgerName
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useInitiateLedgerBalanceTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    InitiateLedgerBalanceTransferMutation,
    TError,
    InitiateLedgerBalanceTransferMutationVariables,
    TContext
  >
) =>
  useMutation<
    InitiateLedgerBalanceTransferMutation,
    TError,
    InitiateLedgerBalanceTransferMutationVariables,
    TContext
  >(
    ['initiateLedgerBalanceTransfer'],
    useAxios<InitiateLedgerBalanceTransferMutation, InitiateLedgerBalanceTransferMutationVariables>(
      InitiateLedgerBalanceTransferDocument
    ),
    options
  );
export const SetExternalLoanDocument = `
    mutation setExternalLoan($id: String, $data: ExternalLoanApplicationInput) {
  accounting {
    externalLoan {
      loan {
        new(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetExternalLoanMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetExternalLoanMutation,
    TError,
    SetExternalLoanMutationVariables,
    TContext
  >
) =>
  useMutation<SetExternalLoanMutation, TError, SetExternalLoanMutationVariables, TContext>(
    ['setExternalLoan'],
    useAxios<SetExternalLoanMutation, SetExternalLoanMutationVariables>(SetExternalLoanDocument),
    options
  );
export const SetExternalPaymentDocument = `
    mutation setExternalPayment($data: ExternalLoanPaymentInput) {
  accounting {
    externalLoan {
      payment {
        new(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetExternalPaymentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetExternalPaymentMutation,
    TError,
    SetExternalPaymentMutationVariables,
    TContext
  >
) =>
  useMutation<SetExternalPaymentMutation, TError, SetExternalPaymentMutationVariables, TContext>(
    ['setExternalPayment'],
    useAxios<SetExternalPaymentMutation, SetExternalPaymentMutationVariables>(
      SetExternalPaymentDocument
    ),
    options
  );
export const SetInvestmentEntryDataDocument = `
    mutation setInvestmentEntryData($id: ID, $data: InvestmentEntryInput!) {
  accounting {
    investment {
      upsertEntry(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetInvestmentEntryDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetInvestmentEntryDataMutation,
    TError,
    SetInvestmentEntryDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetInvestmentEntryDataMutation,
    TError,
    SetInvestmentEntryDataMutationVariables,
    TContext
  >(
    ['setInvestmentEntryData'],
    useAxios<SetInvestmentEntryDataMutation, SetInvestmentEntryDataMutationVariables>(
      SetInvestmentEntryDataDocument
    ),
    options
  );
export const SetInvestmentTransactionDataDocument = `
    mutation setInvestmentTransactionData($data: InvestmentTransactionInput!) {
  accounting {
    investment {
      addTransaction(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetInvestmentTransactionDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetInvestmentTransactionDataMutation,
    TError,
    SetInvestmentTransactionDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetInvestmentTransactionDataMutation,
    TError,
    SetInvestmentTransactionDataMutationVariables,
    TContext
  >(
    ['setInvestmentTransactionData'],
    useAxios<SetInvestmentTransactionDataMutation, SetInvestmentTransactionDataMutationVariables>(
      SetInvestmentTransactionDataDocument
    ),
    options
  );
export const SetAccountingOrganizationDataDocument = `
    mutation setAccountingOrganizationData($id: ID!, $data: InvestmentAccountInput!) {
  accounting {
    organization {
      upsert(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountingOrganizationDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountingOrganizationDataMutation,
    TError,
    SetAccountingOrganizationDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountingOrganizationDataMutation,
    TError,
    SetAccountingOrganizationDataMutationVariables,
    TContext
  >(
    ['setAccountingOrganizationData'],
    useAxios<SetAccountingOrganizationDataMutation, SetAccountingOrganizationDataMutationVariables>(
      SetAccountingOrganizationDataDocument
    ),
    options
  );
export const SetPurchaseEntryDocument = `
    mutation setPurchaseEntry($data: PurchaseEntryInput!) {
  accounting {
    purchase {
      purchaseEntry(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetPurchaseEntryMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetPurchaseEntryMutation,
    TError,
    SetPurchaseEntryMutationVariables,
    TContext
  >
) =>
  useMutation<SetPurchaseEntryMutation, TError, SetPurchaseEntryMutationVariables, TContext>(
    ['setPurchaseEntry'],
    useAxios<SetPurchaseEntryMutation, SetPurchaseEntryMutationVariables>(SetPurchaseEntryDocument),
    options
  );
export const AddNewExpenseDocument = `
    mutation addNewExpense($data: AccountingExpenseInput) {
  accounting {
    purchase {
      expense(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddNewExpenseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddNewExpenseMutation,
    TError,
    AddNewExpenseMutationVariables,
    TContext
  >
) =>
  useMutation<AddNewExpenseMutation, TError, AddNewExpenseMutationVariables, TContext>(
    ['addNewExpense'],
    useAxios<AddNewExpenseMutation, AddNewExpenseMutationVariables>(AddNewExpenseDocument),
    options
  );
export const AddNewDebitNoteDocument = `
    mutation addNewDebitNote($data: PurchaseDebitNoteInput!) {
  accounting {
    purchase {
      debitNote(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddNewDebitNoteMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddNewDebitNoteMutation,
    TError,
    AddNewDebitNoteMutationVariables,
    TContext
  >
) =>
  useMutation<AddNewDebitNoteMutation, TError, AddNewDebitNoteMutationVariables, TContext>(
    ['addNewDebitNote'],
    useAxios<AddNewDebitNoteMutation, AddNewDebitNoteMutationVariables>(AddNewDebitNoteDocument),
    options
  );
export const SetSalesCustomerDataDocument = `
    mutation setSalesCustomerData($id: ID!, $data: SalesCustomerInput!) {
  accounting {
    sales {
      upsertCustomer(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSalesCustomerDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSalesCustomerDataMutation,
    TError,
    SetSalesCustomerDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSalesCustomerDataMutation,
    TError,
    SetSalesCustomerDataMutationVariables,
    TContext
  >(
    ['setSalesCustomerData'],
    useAxios<SetSalesCustomerDataMutation, SetSalesCustomerDataMutationVariables>(
      SetSalesCustomerDataDocument
    ),
    options
  );
export const SetSalesSaleEntryDataDocument = `
    mutation setSalesSaleEntryData($id: ID!, $data: SalesSaleEntryInput!) {
  accounting {
    sales {
      upsertSaleEntry(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSalesSaleEntryDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSalesSaleEntryDataMutation,
    TError,
    SetSalesSaleEntryDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSalesSaleEntryDataMutation,
    TError,
    SetSalesSaleEntryDataMutationVariables,
    TContext
  >(
    ['setSalesSaleEntryData'],
    useAxios<SetSalesSaleEntryDataMutation, SetSalesSaleEntryDataMutationVariables>(
      SetSalesSaleEntryDataDocument
    ),
    options
  );
export const SetSalesCreditNoteDataDocument = `
    mutation setSalesCreditNoteData($data: SalesCreditNoteInput!) {
  accounting {
    sales {
      creditNote(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSalesCreditNoteDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSalesCreditNoteDataMutation,
    TError,
    SetSalesCreditNoteDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSalesCreditNoteDataMutation,
    TError,
    SetSalesCreditNoteDataMutationVariables,
    TContext
  >(
    ['setSalesCreditNoteData'],
    useAxios<SetSalesCreditNoteDataMutation, SetSalesCreditNoteDataMutationVariables>(
      SetSalesCreditNoteDataDocument
    ),
    options
  );
export const SetSalesCustomerPaymentDataDocument = `
    mutation setSalesCustomerPaymentData($id: ID!, $data: SalesCustomerPaymentInput!) {
  accounting {
    sales {
      upsertCustomerPayment(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSalesCustomerPaymentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSalesCustomerPaymentDataMutation,
    TError,
    SetSalesCustomerPaymentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSalesCustomerPaymentDataMutation,
    TError,
    SetSalesCustomerPaymentDataMutationVariables,
    TContext
  >(
    ['setSalesCustomerPaymentData'],
    useAxios<SetSalesCustomerPaymentDataMutation, SetSalesCustomerPaymentDataMutationVariables>(
      SetSalesCustomerPaymentDataDocument
    ),
    options
  );
export const SetAccountCloseDataDocument = `
    mutation setAccountCloseData($data: DepositAccountClose) {
  account {
    close(data: $data) {
      recordId
      calculatedAmount
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountCloseDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountCloseDataMutation,
    TError,
    SetAccountCloseDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetAccountCloseDataMutation, TError, SetAccountCloseDataMutationVariables, TContext>(
    ['setAccountCloseData'],
    useAxios<SetAccountCloseDataMutation, SetAccountCloseDataMutationVariables>(
      SetAccountCloseDataDocument
    ),
    options
  );
export const SetAccountOpenDataDocument = `
    mutation setAccountOpenData($id: ID!, $data: DepositLoanAccountInput!) {
  account {
    add(id: $id, data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountOpenDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountOpenDataMutation,
    TError,
    SetAccountOpenDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetAccountOpenDataMutation, TError, SetAccountOpenDataMutationVariables, TContext>(
    ['setAccountOpenData'],
    useAxios<SetAccountOpenDataMutation, SetAccountOpenDataMutationVariables>(
      SetAccountOpenDataDocument
    ),
    options
  );
export const SetAccountDocumentDataDocument = `
    mutation setAccountDocumentData($subscriptionId: String!, $fieldId: String!, $identifiers: [String!]!) {
  document {
    Subscription(subscriptionId: $subscriptionId) {
      Upsert(fieldId: $fieldId, identifiers: $identifiers) {
        recordId
      }
    }
  }
}
    `;
export const useSetAccountDocumentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountDocumentDataMutation,
    TError,
    SetAccountDocumentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountDocumentDataMutation,
    TError,
    SetAccountDocumentDataMutationVariables,
    TContext
  >(
    ['setAccountDocumentData'],
    useAxios<SetAccountDocumentDataMutation, SetAccountDocumentDataMutationVariables>(
      SetAccountDocumentDataDocument
    ),
    options
  );
export const SetMakeDormantAccountActiveDocument = `
    mutation setMakeDormantAccountActive($accountId: ID!) {
  account {
    makeActive(accountID: $accountId)
  }
}
    `;
export const useSetMakeDormantAccountActiveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMakeDormantAccountActiveMutation,
    TError,
    SetMakeDormantAccountActiveMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetMakeDormantAccountActiveMutation,
    TError,
    SetMakeDormantAccountActiveMutationVariables,
    TContext
  >(
    ['setMakeDormantAccountActive'],
    useAxios<SetMakeDormantAccountActiveMutation, SetMakeDormantAccountActiveMutationVariables>(
      SetMakeDormantAccountActiveDocument
    ),
    options
  );
export const SetupdateSavingsNomineeAccountDocument = `
    mutation setupdateSavingsNomineeAccount($NomineeAccountUpdateInput: NomineeAccountUpdateInput!) {
  account {
    updateNomineeAccount(data: $NomineeAccountUpdateInput) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetupdateSavingsNomineeAccountMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetupdateSavingsNomineeAccountMutation,
    TError,
    SetupdateSavingsNomineeAccountMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetupdateSavingsNomineeAccountMutation,
    TError,
    SetupdateSavingsNomineeAccountMutationVariables,
    TContext
  >(
    ['setupdateSavingsNomineeAccount'],
    useAxios<
      SetupdateSavingsNomineeAccountMutation,
      SetupdateSavingsNomineeAccountMutationVariables
    >(SetupdateSavingsNomineeAccountDocument),
    options
  );
export const SetupdateSavingTenureDocument = `
    mutation setupdateSavingTenure($SavingsTenureUpdateInput: SavingsTenureUpdateInput!) {
  account {
    updateTenure(data: $SavingsTenureUpdateInput) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetupdateSavingTenureMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetupdateSavingTenureMutation,
    TError,
    SetupdateSavingTenureMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetupdateSavingTenureMutation,
    TError,
    SetupdateSavingTenureMutationVariables,
    TContext
  >(
    ['setupdateSavingTenure'],
    useAxios<SetupdateSavingTenureMutation, SetupdateSavingTenureMutationVariables>(
      SetupdateSavingTenureDocument
    ),
    options
  );
export const SetupdateSignatureDocument = `
    mutation setupdateSignature($accountID: ID!, $data: [String!]!) {
  account {
    updateSignature(accountID: $accountID, data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetupdateSignatureMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetupdateSignatureMutation,
    TError,
    SetupdateSignatureMutationVariables,
    TContext
  >
) =>
  useMutation<SetupdateSignatureMutation, TError, SetupdateSignatureMutationVariables, TContext>(
    ['setupdateSignature'],
    useAxios<SetupdateSignatureMutation, SetupdateSignatureMutationVariables>(
      SetupdateSignatureDocument
    ),
    options
  );
export const SetupdateInstallmentAmountDocument = `
    mutation setupdateInstallmentAmount($accountId: ID!, $newInstallmentAmount: String!, $effectiveDate: Localized!) {
  account {
    updateInstallmentAmount(
      accountId: $accountId
      newInstallmentAmount: $newInstallmentAmount
      effectiveDate: $effectiveDate
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetupdateInstallmentAmountMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetupdateInstallmentAmountMutation,
    TError,
    SetupdateInstallmentAmountMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetupdateInstallmentAmountMutation,
    TError,
    SetupdateInstallmentAmountMutationVariables,
    TContext
  >(
    ['setupdateInstallmentAmount'],
    useAxios<SetupdateInstallmentAmountMutation, SetupdateInstallmentAmountMutationVariables>(
      SetupdateInstallmentAmountDocument
    ),
    options
  );
export const IssueFdCertificateDocument = `
    mutation issueFDCertificate($accountId: ID!) {
  account {
    issueFDCertificate(accountId: $accountId)
  }
}
    `;
export const useIssueFdCertificateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    IssueFdCertificateMutation,
    TError,
    IssueFdCertificateMutationVariables,
    TContext
  >
) =>
  useMutation<IssueFdCertificateMutation, TError, IssueFdCertificateMutationVariables, TContext>(
    ['issueFDCertificate'],
    useAxios<IssueFdCertificateMutation, IssueFdCertificateMutationVariables>(
      IssueFdCertificateDocument
    ),
    options
  );
export const UpdateSavingsLoanAccountNameDocument = `
    mutation updateSavingsLoanAccountName($accountId: ID!, $name: String!, $accountType: AccountTypeFilter!) {
  account {
    updateAccountName(accountID: $accountId, name: $name, accountType: $accountType) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateSavingsLoanAccountNameMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateSavingsLoanAccountNameMutation,
    TError,
    UpdateSavingsLoanAccountNameMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateSavingsLoanAccountNameMutation,
    TError,
    UpdateSavingsLoanAccountNameMutationVariables,
    TContext
  >(
    ['updateSavingsLoanAccountName'],
    useAxios<UpdateSavingsLoanAccountNameMutation, UpdateSavingsLoanAccountNameMutationVariables>(
      UpdateSavingsLoanAccountNameDocument
    ),
    options
  );
export const UpdateAccountInterestDocument = `
    mutation updateAccountInterest($accountId: ID!, $data: InterestRateSetupInput!) {
  account {
    updateAccountInterest(accountId: $accountId, data: $data) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateAccountInterestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateAccountInterestMutation,
    TError,
    UpdateAccountInterestMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateAccountInterestMutation,
    TError,
    UpdateAccountInterestMutationVariables,
    TContext
  >(
    ['updateAccountInterest'],
    useAxios<UpdateAccountInterestMutation, UpdateAccountInterestMutationVariables>(
      UpdateAccountInterestDocument
    ),
    options
  );
export const EditAccountInterestDocument = `
    mutation editAccountInterest($id: ID!, $accountId: ID!, $data: InterestRateSetupInput!) {
  account {
    editAccountInterest(id: $id, accountId: $accountId, data: $data) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useEditAccountInterestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditAccountInterestMutation,
    TError,
    EditAccountInterestMutationVariables,
    TContext
  >
) =>
  useMutation<EditAccountInterestMutation, TError, EditAccountInterestMutationVariables, TContext>(
    ['editAccountInterest'],
    useAxios<EditAccountInterestMutation, EditAccountInterestMutationVariables>(
      EditAccountInterestDocument
    ),
    options
  );
export const SetIssueNewSlipDocument = `
    mutation setIssueNewSlip($data: WithdrawSlipIssueInput!) {
  withdrawSlip {
    issueNew(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetIssueNewSlipMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetIssueNewSlipMutation,
    TError,
    SetIssueNewSlipMutationVariables,
    TContext
  >
) =>
  useMutation<SetIssueNewSlipMutation, TError, SetIssueNewSlipMutationVariables, TContext>(
    ['setIssueNewSlip'],
    useAxios<SetIssueNewSlipMutation, SetIssueNewSlipMutationVariables>(SetIssueNewSlipDocument),
    options
  );
export const PrintSlipDocument = `
    mutation printSlip($data: WithdrawSlipPrintInput) {
  withdrawSlip {
    printSlip(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const usePrintSlipMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<PrintSlipMutation, TError, PrintSlipMutationVariables, TContext>
) =>
  useMutation<PrintSlipMutation, TError, PrintSlipMutationVariables, TContext>(
    ['printSlip'],
    useAxios<PrintSlipMutation, PrintSlipMutationVariables>(PrintSlipDocument),
    options
  );
export const SetAddMemberToAgentDataDocument = `
    mutation setAddMemberToAgentData($agentId: String!, $data: AssignMembersInput, $override: Boolean) {
  agent {
    addMemberToAgent(agentId: $agentId, data: $data, override: $override) {
      data {
        id
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAddMemberToAgentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAddMemberToAgentDataMutation,
    TError,
    SetAddMemberToAgentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAddMemberToAgentDataMutation,
    TError,
    SetAddMemberToAgentDataMutationVariables,
    TContext
  >(
    ['setAddMemberToAgentData'],
    useAxios<SetAddMemberToAgentDataMutation, SetAddMemberToAgentDataMutationVariables>(
      SetAddMemberToAgentDataDocument
    ),
    options
  );
export const SetAgentTodayListDataDocument = `
    mutation setAgentTodayListData($id: ID!, $data: [AgentTodayListInput]) {
  agent {
    agentTodayList(id: $id, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAgentTodayListDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAgentTodayListDataMutation,
    TError,
    SetAgentTodayListDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAgentTodayListDataMutation,
    TError,
    SetAgentTodayListDataMutationVariables,
    TContext
  >(
    ['setAgentTodayListData'],
    useAxios<SetAgentTodayListDataMutation, SetAgentTodayListDataMutationVariables>(
      SetAgentTodayListDataDocument
    ),
    options
  );
export const SetAgentTodayDepositDataDocument = `
    mutation setAgentTodayDepositData($id: ID!, $data: [AgentTodayListInput]) {
  agent {
    agentTodayDeposit(agentID: $id, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAgentTodayDepositDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAgentTodayDepositDataMutation,
    TError,
    SetAgentTodayDepositDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAgentTodayDepositDataMutation,
    TError,
    SetAgentTodayDepositDataMutationVariables,
    TContext
  >(
    ['setAgentTodayDepositData'],
    useAxios<SetAgentTodayDepositDataMutation, SetAgentTodayDepositDataMutationVariables>(
      SetAgentTodayDepositDataDocument
    ),
    options
  );
export const RemoveMemberAccountAgentDocument = `
    mutation removeMemberAccountAgent($accountId: ID!, $agentID: ID!) {
  agent {
    removeMemberAccountAgent(accountId: $accountId, agentID: $agentID) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useRemoveMemberAccountAgentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    RemoveMemberAccountAgentMutation,
    TError,
    RemoveMemberAccountAgentMutationVariables,
    TContext
  >
) =>
  useMutation<
    RemoveMemberAccountAgentMutation,
    TError,
    RemoveMemberAccountAgentMutationVariables,
    TContext
  >(
    ['removeMemberAccountAgent'],
    useAxios<RemoveMemberAccountAgentMutation, RemoveMemberAccountAgentMutationVariables>(
      RemoveMemberAccountAgentDocument
    ),
    options
  );
export const AgentTodayCollectionDocument = `
    mutation agentTodayCollection($agentId: ID!, $data: [AgentTodayListInput]) {
  agent {
    agentTodayCollection(agentId: $agentId, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAgentTodayCollectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AgentTodayCollectionMutation,
    TError,
    AgentTodayCollectionMutationVariables,
    TContext
  >
) =>
  useMutation<
    AgentTodayCollectionMutation,
    TError,
    AgentTodayCollectionMutationVariables,
    TContext
  >(
    ['agentTodayCollection'],
    useAxios<AgentTodayCollectionMutation, AgentTodayCollectionMutationVariables>(
      AgentTodayCollectionDocument
    ),
    options
  );
export const SetAgentTemplateDocument = `
    mutation setAgentTemplate($agentId: ID!, $data: [AgentTemplateInput]) {
  agent {
    agentTemplate(agentId: $agentId, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAgentTemplateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAgentTemplateMutation,
    TError,
    SetAgentTemplateMutationVariables,
    TContext
  >
) =>
  useMutation<SetAgentTemplateMutation, TError, SetAgentTemplateMutationVariables, TContext>(
    ['setAgentTemplate'],
    useAxios<SetAgentTemplateMutation, SetAgentTemplateMutationVariables>(SetAgentTemplateDocument),
    options
  );
export const ResetPasswordDocument = `
    mutation resetPassword($userId: String!, $newPassword: String!, $oldPassword: String!) {
  user {
    resetPassword(
      data: {userId: $userId, newPassword: $newPassword, oldPassword: $oldPassword}
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useResetPasswordMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ResetPasswordMutation,
    TError,
    ResetPasswordMutationVariables,
    TContext
  >
) =>
  useMutation<ResetPasswordMutation, TError, ResetPasswordMutationVariables, TContext>(
    ['resetPassword'],
    useAxios<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument),
    options
  );
export const SetRecoveryPasswordDocument = `
    mutation setRecoveryPassword($email: String!, $url: String!) {
  user {
    passwordRecovery {
      sendRecoveryEmail(data: {email: $email, url: $url}) {
        recordID
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetRecoveryPasswordMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetRecoveryPasswordMutation,
    TError,
    SetRecoveryPasswordMutationVariables,
    TContext
  >
) =>
  useMutation<SetRecoveryPasswordMutation, TError, SetRecoveryPasswordMutationVariables, TContext>(
    ['setRecoveryPassword'],
    useAxios<SetRecoveryPasswordMutation, SetRecoveryPasswordMutationVariables>(
      SetRecoveryPasswordDocument
    ),
    options
  );
export const SetNewPasswordDocument = `
    mutation setNewPassword($token: String!, $newPassword: String!) {
  user {
    passwordRecovery {
      setNewPassword(data: {token: $token, newPassword: $newPassword}) {
        recordID
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetNewPasswordMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetNewPasswordMutation,
    TError,
    SetNewPasswordMutationVariables,
    TContext
  >
) =>
  useMutation<SetNewPasswordMutation, TError, SetNewPasswordMutationVariables, TContext>(
    ['setNewPassword'],
    useAxios<SetNewPasswordMutation, SetNewPasswordMutationVariables>(SetNewPasswordDocument),
    options
  );
export const SwitchRoleDocument = `
    mutation switchRole($role: String, $branch: String) {
  auth {
    switchRole(role: $role, branchId: $branch) {
      data {
        token {
          access
          refresh
        }
        me {
          branches {
            id
            name
          }
          rolesList {
            id
            name
          }
          permission {
            myPermission
          }
          preference {
            language
            languageCode
            date
          }
          user {
            ...User
          }
        }
      }
    }
  }
}
    ${UserFragmentDoc}`;
export const useSwitchRoleMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SwitchRoleMutation, TError, SwitchRoleMutationVariables, TContext>
) =>
  useMutation<SwitchRoleMutation, TError, SwitchRoleMutationVariables, TContext>(
    ['switchRole'],
    useAxios<SwitchRoleMutation, SwitchRoleMutationVariables>(SwitchRoleDocument),
    options
  );
export const ChangeUserStateDocument = `
    mutation changeUserState($userID: ID!, $state: ObjState!) {
  auth {
    changeState(userID: $userID, state: $state)
  }
}
    `;
export const useChangeUserStateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ChangeUserStateMutation,
    TError,
    ChangeUserStateMutationVariables,
    TContext
  >
) =>
  useMutation<ChangeUserStateMutation, TError, ChangeUserStateMutationVariables, TContext>(
    ['changeUserState'],
    useAxios<ChangeUserStateMutation, ChangeUserStateMutationVariables>(ChangeUserStateDocument),
    options
  );
export const AddNewAccountInCoaDocument = `
    mutation addNewAccountInCOA($data: AddCOAAccountInput!) {
  settings {
    chartsOfAccount {
      account {
        add(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddNewAccountInCoaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddNewAccountInCoaMutation,
    TError,
    AddNewAccountInCoaMutationVariables,
    TContext
  >
) =>
  useMutation<AddNewAccountInCoaMutation, TError, AddNewAccountInCoaMutationVariables, TContext>(
    ['addNewAccountInCOA'],
    useAxios<AddNewAccountInCoaMutation, AddNewAccountInCoaMutationVariables>(
      AddNewAccountInCoaDocument
    ),
    options
  );
export const DeleteCoaDocument = `
    mutation deleteCOA($id: ID!) {
  settings {
    chartsOfAccount {
      account {
        delete(id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteCoaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<DeleteCoaMutation, TError, DeleteCoaMutationVariables, TContext>
) =>
  useMutation<DeleteCoaMutation, TError, DeleteCoaMutationVariables, TContext>(
    ['deleteCOA'],
    useAxios<DeleteCoaMutation, DeleteCoaMutationVariables>(DeleteCoaDocument),
    options
  );
export const AddGroupDocument = `
    mutation AddGroup($data: NewCoaGroupInput!) {
  settings {
    chartsOfAccount {
      account {
        newGroup(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddGroupMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<AddGroupMutation, TError, AddGroupMutationVariables, TContext>
) =>
  useMutation<AddGroupMutation, TError, AddGroupMutationVariables, TContext>(
    ['AddGroup'],
    useAxios<AddGroupMutation, AddGroupMutationVariables>(AddGroupDocument),
    options
  );
export const AddAccountInCoaDocument = `
    mutation addAccountInCOA($accountSetup: COAAccountSetup!, $parentAccountCode: String!, $openForBranches: [ID], $ledgerName: String, $tagIds: [ID]) {
  settings {
    chartsOfAccount {
      account {
        addAccount(
          accountSetup: $accountSetup
          parentAccountCode: $parentAccountCode
          openForBranches: $openForBranches
          ledgerName: $ledgerName
          tagIds: $tagIds
        ) {
          success
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddAccountInCoaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddAccountInCoaMutation,
    TError,
    AddAccountInCoaMutationVariables,
    TContext
  >
) =>
  useMutation<AddAccountInCoaMutation, TError, AddAccountInCoaMutationVariables, TContext>(
    ['addAccountInCOA'],
    useAxios<AddAccountInCoaMutation, AddAccountInCoaMutationVariables>(AddAccountInCoaDocument),
    options
  );
export const UpdateLedgerStatusDocument = `
    mutation updateLedgerStatus($id: ID!, $status: Boolean!) {
  settings {
    general {
      chartsOfAccount {
        account {
          updateMoneyLedger(id: $id, status: $status) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateLedgerStatusMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateLedgerStatusMutation,
    TError,
    UpdateLedgerStatusMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateLedgerStatusMutation, TError, UpdateLedgerStatusMutationVariables, TContext>(
    ['updateLedgerStatus'],
    useAxios<UpdateLedgerStatusMutation, UpdateLedgerStatusMutationVariables>(
      UpdateLedgerStatusDocument
    ),
    options
  );
export const UpdateLedgerNameDocument = `
    mutation updateLedgerName($ledgerId: ID!, $newName: String!) {
  settings {
    general {
      chartsOfAccount {
        account {
          updateLedgerName(ledgerId: $ledgerId, newName: $newName) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateLedgerNameMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateLedgerNameMutation,
    TError,
    UpdateLedgerNameMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateLedgerNameMutation, TError, UpdateLedgerNameMutationVariables, TContext>(
    ['updateLedgerName'],
    useAxios<UpdateLedgerNameMutation, UpdateLedgerNameMutationVariables>(UpdateLedgerNameDocument),
    options
  );
export const AddProfitToFundManagementDataDocument = `
    mutation addProfitToFundManagementData($data: FundManagementInput!) {
  profitToFundManagement {
    new(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddProfitToFundManagementDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddProfitToFundManagementDataMutation,
    TError,
    AddProfitToFundManagementDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    AddProfitToFundManagementDataMutation,
    TError,
    AddProfitToFundManagementDataMutationVariables,
    TContext
  >(
    ['addProfitToFundManagementData'],
    useAxios<AddProfitToFundManagementDataMutation, AddProfitToFundManagementDataMutationVariables>(
      AddProfitToFundManagementDataDocument
    ),
    options
  );
export const SetNewEmployeeDocument = `
    mutation setNewEmployee($id: String, $input: EmployeeInput!) {
  hr {
    employee {
      employee {
        upsertEmployee(id: $id, input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetNewEmployeeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetNewEmployeeMutation,
    TError,
    SetNewEmployeeMutationVariables,
    TContext
  >
) =>
  useMutation<SetNewEmployeeMutation, TError, SetNewEmployeeMutationVariables, TContext>(
    ['setNewEmployee'],
    useAxios<SetNewEmployeeMutation, SetNewEmployeeMutationVariables>(SetNewEmployeeDocument),
    options
  );
export const SetNewLeaveDocument = `
    mutation setNewLeave($id: String, $input: LeaveInput!) {
  hr {
    employee {
      leave {
        upsertLeave(id: $id, input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetNewLeaveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetNewLeaveMutation, TError, SetNewLeaveMutationVariables, TContext>
) =>
  useMutation<SetNewLeaveMutation, TError, SetNewLeaveMutationVariables, TContext>(
    ['setNewLeave'],
    useAxios<SetNewLeaveMutation, SetNewLeaveMutationVariables>(SetNewLeaveDocument),
    options
  );
export const SetEmployeeOnboardingUpsertDocument = `
    mutation setEmployeeOnboardingUpsert($id: ID, $input: EmployeeOnboardingInput!) {
  hr {
    employeelifecycle {
      employeeOnboarding {
        upsertEmployeeOnboarding(id: $id, input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeOnboardingUpsertMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeOnboardingUpsertMutation,
    TError,
    SetEmployeeOnboardingUpsertMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEmployeeOnboardingUpsertMutation,
    TError,
    SetEmployeeOnboardingUpsertMutationVariables,
    TContext
  >(
    ['setEmployeeOnboardingUpsert'],
    useAxios<SetEmployeeOnboardingUpsertMutation, SetEmployeeOnboardingUpsertMutationVariables>(
      SetEmployeeOnboardingUpsertDocument
    ),
    options
  );
export const SetEmployeeTransferUpsertDocument = `
    mutation setEmployeeTransferUpsert($input: EmployeeTransferInput!) {
  hr {
    employeelifecycle {
      employeeTransfer {
        insertEmployeeTransfer(input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeTransferUpsertMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeTransferUpsertMutation,
    TError,
    SetEmployeeTransferUpsertMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEmployeeTransferUpsertMutation,
    TError,
    SetEmployeeTransferUpsertMutationVariables,
    TContext
  >(
    ['setEmployeeTransferUpsert'],
    useAxios<SetEmployeeTransferUpsertMutation, SetEmployeeTransferUpsertMutationVariables>(
      SetEmployeeTransferUpsertDocument
    ),
    options
  );
export const SetEmployeeSeerationUpsertDocument = `
    mutation setEmployeeSeerationUpsert($input: EmployeeSeparationInput!) {
  hr {
    employeelifecycle {
      employeeSeparation {
        addEmployeeSeparation(input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeSeerationUpsertMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeSeerationUpsertMutation,
    TError,
    SetEmployeeSeerationUpsertMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEmployeeSeerationUpsertMutation,
    TError,
    SetEmployeeSeerationUpsertMutationVariables,
    TContext
  >(
    ['setEmployeeSeerationUpsert'],
    useAxios<SetEmployeeSeerationUpsertMutation, SetEmployeeSeerationUpsertMutationVariables>(
      SetEmployeeSeerationUpsertDocument
    ),
    options
  );
export const SetEmployeePromotionUpsertDocument = `
    mutation setEmployeePromotionUpsert($input: EmployeePromotionInput!) {
  hr {
    employeelifecycle {
      employeePromotion {
        addEmployeePromotion(input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeePromotionUpsertMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeePromotionUpsertMutation,
    TError,
    SetEmployeePromotionUpsertMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEmployeePromotionUpsertMutation,
    TError,
    SetEmployeePromotionUpsertMutationVariables,
    TContext
  >(
    ['setEmployeePromotionUpsert'],
    useAxios<SetEmployeePromotionUpsertMutation, SetEmployeePromotionUpsertMutationVariables>(
      SetEmployeePromotionUpsertDocument
    ),
    options
  );
export const SetEmployeeExitUpsertDocument = `
    mutation setEmployeeExitUpsert($id: ID, $input: EmployeeExitInput!) {
  hr {
    employeelifecycle {
      employeeExit {
        upsertEmployeeExit(input: $input, id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeExitUpsertMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeExitUpsertMutation,
    TError,
    SetEmployeeExitUpsertMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEmployeeExitUpsertMutation,
    TError,
    SetEmployeeExitUpsertMutationVariables,
    TContext
  >(
    ['setEmployeeExitUpsert'],
    useAxios<SetEmployeeExitUpsertMutation, SetEmployeeExitUpsertMutationVariables>(
      SetEmployeeExitUpsertDocument
    ),
    options
  );
export const SetStaffPlanningDocument = `
    mutation setStaffPlanning($id: ID, $input: StaffPlanInput!) {
  hr {
    recruitment {
      recruitment {
        upsertStaffPlan(id: $id, input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetStaffPlanningMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetStaffPlanningMutation,
    TError,
    SetStaffPlanningMutationVariables,
    TContext
  >
) =>
  useMutation<SetStaffPlanningMutation, TError, SetStaffPlanningMutationVariables, TContext>(
    ['setStaffPlanning'],
    useAxios<SetStaffPlanningMutation, SetStaffPlanningMutationVariables>(SetStaffPlanningDocument),
    options
  );
export const SetJobOpeningDocument = `
    mutation setJobOpening($id: ID, $input: JobOpeningInput!) {
  hr {
    recruitment {
      recruitmentJobOpening {
        upsertJobOpening(id: $id, input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetJobOpeningMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetJobOpeningMutation,
    TError,
    SetJobOpeningMutationVariables,
    TContext
  >
) =>
  useMutation<SetJobOpeningMutation, TError, SetJobOpeningMutationVariables, TContext>(
    ['setJobOpening'],
    useAxios<SetJobOpeningMutation, SetJobOpeningMutationVariables>(SetJobOpeningDocument),
    options
  );
export const SetJobOfferDocument = `
    mutation setJobOffer($id: ID, $input: JobOfferInput!) {
  hr {
    recruitment {
      recruitmentJobOffer {
        upsertJobOffer(id: $id, input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetJobOfferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetJobOfferMutation, TError, SetJobOfferMutationVariables, TContext>
) =>
  useMutation<SetJobOfferMutation, TError, SetJobOfferMutationVariables, TContext>(
    ['setJobOffer'],
    useAxios<SetJobOfferMutation, SetJobOfferMutationVariables>(SetJobOfferDocument),
    options
  );
export const SetAppointmentLetterDocument = `
    mutation setAppointmentLetter($id: ID, $input: AppointmentLetterInput!) {
  hr {
    recruitment {
      recruitmentAppointmentLetter {
        upsertAppointmentLetter(id: $id, input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAppointmentLetterMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAppointmentLetterMutation,
    TError,
    SetAppointmentLetterMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAppointmentLetterMutation,
    TError,
    SetAppointmentLetterMutationVariables,
    TContext
  >(
    ['setAppointmentLetter'],
    useAxios<SetAppointmentLetterMutation, SetAppointmentLetterMutationVariables>(
      SetAppointmentLetterDocument
    ),
    options
  );
export const SetJobApplicationDocument = `
    mutation setJobApplication($id: ID, $input: JobApplicationInput!) {
  hr {
    recruitment {
      recruitmentJobApplication {
        upsertJobApplication(id: $id, input: $input) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetJobApplicationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetJobApplicationMutation,
    TError,
    SetJobApplicationMutationVariables,
    TContext
  >
) =>
  useMutation<SetJobApplicationMutation, TError, SetJobApplicationMutationVariables, TContext>(
    ['setJobApplication'],
    useAxios<SetJobApplicationMutation, SetJobApplicationMutationVariables>(
      SetJobApplicationDocument
    ),
    options
  );
export const SearchIndexingDocument = `
    mutation searchIndexing {
  search {
    indexData(tableName: ["all"])
  }
}
    `;
export const useSearchIndexingMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SearchIndexingMutation,
    TError,
    SearchIndexingMutationVariables,
    TContext
  >
) =>
  useMutation<SearchIndexingMutation, TError, SearchIndexingMutationVariables, TContext>(
    ['searchIndexing'],
    useAxios<SearchIndexingMutation, SearchIndexingMutationVariables>(SearchIndexingDocument),
    options
  );
export const SearchInternalIndexingDocument = `
    mutation searchInternalIndexing {
  search {
    indexData(tableName: ["internal"])
  }
}
    `;
export const useSearchInternalIndexingMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SearchInternalIndexingMutation,
    TError,
    SearchInternalIndexingMutationVariables,
    TContext
  >
) =>
  useMutation<
    SearchInternalIndexingMutation,
    TError,
    SearchInternalIndexingMutationVariables,
    TContext
  >(
    ['searchInternalIndexing'],
    useAxios<SearchInternalIndexingMutation, SearchInternalIndexingMutationVariables>(
      SearchInternalIndexingDocument
    ),
    options
  );
export const ResetTrialBalanceCacheDocument = `
    mutation resetTrialBalanceCache {
  settings {
    report {
      resetTrialCache
    }
  }
}
    `;
export const useResetTrialBalanceCacheMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ResetTrialBalanceCacheMutation,
    TError,
    ResetTrialBalanceCacheMutationVariables,
    TContext
  >
) =>
  useMutation<
    ResetTrialBalanceCacheMutation,
    TError,
    ResetTrialBalanceCacheMutationVariables,
    TContext
  >(
    ['resetTrialBalanceCache'],
    useAxios<ResetTrialBalanceCacheMutation, ResetTrialBalanceCacheMutationVariables>(
      ResetTrialBalanceCacheDocument
    ),
    options
  );
export const SetItemCategoryDocument = `
    mutation setItemCategory($data: InvItemsGroupInput!) {
  inventory {
    itemsGroup {
      add(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetItemCategoryMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetItemCategoryMutation,
    TError,
    SetItemCategoryMutationVariables,
    TContext
  >
) =>
  useMutation<SetItemCategoryMutation, TError, SetItemCategoryMutationVariables, TContext>(
    ['setItemCategory'],
    useAxios<SetItemCategoryMutation, SetItemCategoryMutationVariables>(SetItemCategoryDocument),
    options
  );
export const SetUnitsDocument = `
    mutation setUnits($id: ID, $data: InvUnitOfMeasureInput!) {
  inventory {
    unitOfMeasure {
      add(data: $data, id: $id) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetUnitsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetUnitsMutation, TError, SetUnitsMutationVariables, TContext>
) =>
  useMutation<SetUnitsMutation, TError, SetUnitsMutationVariables, TContext>(
    ['setUnits'],
    useAxios<SetUnitsMutation, SetUnitsMutationVariables>(SetUnitsDocument),
    options
  );
export const SetWareHouseDocument = `
    mutation setWareHouse($id: ID, $data: AddWarehouseInput) {
  inventory {
    warehouse {
      add(data: $data, id: $id) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetWareHouseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetWareHouseMutation,
    TError,
    SetWareHouseMutationVariables,
    TContext
  >
) =>
  useMutation<SetWareHouseMutation, TError, SetWareHouseMutationVariables, TContext>(
    ['setWareHouse'],
    useAxios<SetWareHouseMutation, SetWareHouseMutationVariables>(SetWareHouseDocument),
    options
  );
export const SetSuppliersDocument = `
    mutation setSuppliers($data: InvSupplierInput) {
  inventory {
    suppliers {
      add(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSuppliersMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSuppliersMutation,
    TError,
    SetSuppliersMutationVariables,
    TContext
  >
) =>
  useMutation<SetSuppliersMutation, TError, SetSuppliersMutationVariables, TContext>(
    ['setSuppliers'],
    useAxios<SetSuppliersMutation, SetSuppliersMutationVariables>(SetSuppliersDocument),
    options
  );
export const SetItemsDocument = `
    mutation setItems($id: ID, $data: InvItemsInput!) {
  inventory {
    items {
      add(data: $data, id: $id) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetItemsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetItemsMutation, TError, SetItemsMutationVariables, TContext>
) =>
  useMutation<SetItemsMutation, TError, SetItemsMutationVariables, TContext>(
    ['setItems'],
    useAxios<SetItemsMutation, SetItemsMutationVariables>(SetItemsDocument),
    options
  );
export const SetSuppliersAddDocument = `
    mutation setSuppliersAdd($id: ID, $data: InvSupplierInput) {
  inventory {
    suppliers {
      add(data: $data, id: $id) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSuppliersAddMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSuppliersAddMutation,
    TError,
    SetSuppliersAddMutationVariables,
    TContext
  >
) =>
  useMutation<SetSuppliersAddMutation, TError, SetSuppliersAddMutationVariables, TContext>(
    ['setSuppliersAdd'],
    useAxios<SetSuppliersAddMutation, SetSuppliersAddMutationVariables>(SetSuppliersAddDocument),
    options
  );
export const SetWareHouseTransferDocument = `
    mutation setWareHouseTransfer($data: WarehouseTransferInput) {
  inventory {
    warehouse {
      transfer(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetWareHouseTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetWareHouseTransferMutation,
    TError,
    SetWareHouseTransferMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetWareHouseTransferMutation,
    TError,
    SetWareHouseTransferMutationVariables,
    TContext
  >(
    ['setWareHouseTransfer'],
    useAxios<SetWareHouseTransferMutation, SetWareHouseTransferMutationVariables>(
      SetWareHouseTransferDocument
    ),
    options
  );
export const SetInventoryAdjustmentDocument = `
    mutation setInventoryAdjustment($data: InventoryAdjustmentInput) {
  inventory {
    adjustment {
      new(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetInventoryAdjustmentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetInventoryAdjustmentMutation,
    TError,
    SetInventoryAdjustmentMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetInventoryAdjustmentMutation,
    TError,
    SetInventoryAdjustmentMutationVariables,
    TContext
  >(
    ['setInventoryAdjustment'],
    useAxios<SetInventoryAdjustmentMutation, SetInventoryAdjustmentMutationVariables>(
      SetInventoryAdjustmentDocument
    ),
    options
  );
export const SetInventoryWarehouseRequestAcceptHandlerDocument = `
    mutation setInventoryWarehouseRequestAcceptHandler($data: TransferRequestInput!) {
  inventory {
    warehouse {
      acceptTransferRequest(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetInventoryWarehouseRequestAcceptHandlerMutation = <
  TError = unknown,
  TContext = unknown
>(
  options?: UseMutationOptions<
    SetInventoryWarehouseRequestAcceptHandlerMutation,
    TError,
    SetInventoryWarehouseRequestAcceptHandlerMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetInventoryWarehouseRequestAcceptHandlerMutation,
    TError,
    SetInventoryWarehouseRequestAcceptHandlerMutationVariables,
    TContext
  >(
    ['setInventoryWarehouseRequestAcceptHandler'],
    useAxios<
      SetInventoryWarehouseRequestAcceptHandlerMutation,
      SetInventoryWarehouseRequestAcceptHandlerMutationVariables
    >(SetInventoryWarehouseRequestAcceptHandlerDocument),
    options
  );
export const SetKymCooperativeDataDocument = `
    mutation setKYMCooperativeData($id: ID, $data: KymCooperativeFormInput!, $forDraft: Boolean) {
  members {
    cooperative {
      add(data: $data, id: $id, forDraft: $forDraft) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetKymCooperativeDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymCooperativeDataMutation,
    TError,
    SetKymCooperativeDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetKymCooperativeDataMutation,
    TError,
    SetKymCooperativeDataMutationVariables,
    TContext
  >(
    ['setKYMCooperativeData'],
    useAxios<SetKymCooperativeDataMutation, SetKymCooperativeDataMutationVariables>(
      SetKymCooperativeDataDocument
    ),
    options
  );
export const SetCooperativeUnionDataDocument = `
    mutation setCooperativeUnionData($id: ID, $data: CoopUnionInstitutionInformationInput!, $forDraft: Boolean) {
  members {
    cooperativeUnion {
      add(data: $data, id: $id, forDraft: $forDraft) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetCooperativeUnionDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCooperativeUnionDataMutation,
    TError,
    SetCooperativeUnionDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetCooperativeUnionDataMutation,
    TError,
    SetCooperativeUnionDataMutationVariables,
    TContext
  >(
    ['setCooperativeUnionData'],
    useAxios<SetCooperativeUnionDataMutation, SetCooperativeUnionDataMutationVariables>(
      SetCooperativeUnionDataDocument
    ),
    options
  );
export const SetKymIndividualDataDocument = `
    mutation setKYMIndividualData($id: ID, $data: KymIndMemberInput!, $forDraft: Boolean) {
  members {
    individual {
      add(data: $data, id: $id, forDraft: $forDraft) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetKymIndividualDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymIndividualDataMutation,
    TError,
    SetKymIndividualDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetKymIndividualDataMutation,
    TError,
    SetKymIndividualDataMutationVariables,
    TContext
  >(
    ['setKYMIndividualData'],
    useAxios<SetKymIndividualDataMutation, SetKymIndividualDataMutationVariables>(
      SetKymIndividualDataDocument
    ),
    options
  );
export const AddFamilyMemberDocument = `
    mutation addFamilyMember($id: ID!, $data: KYMIndFamilyMemberInput!) {
  members {
    individual {
      addMinorFamliyMember(memberId: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddFamilyMemberMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddFamilyMemberMutation,
    TError,
    AddFamilyMemberMutationVariables,
    TContext
  >
) =>
  useMutation<AddFamilyMemberMutation, TError, AddFamilyMemberMutationVariables, TContext>(
    ['addFamilyMember'],
    useAxios<AddFamilyMemberMutation, AddFamilyMemberMutationVariables>(AddFamilyMemberDocument),
    options
  );
export const SetKymInstitutionDataDocument = `
    mutation setKYMInstitutionData($id: ID, $data: KymInsInput!, $forDraft: Boolean) {
  members {
    institution {
      add(data: $data, id: $id, forDraft: $forDraft) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetKymInstitutionDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymInstitutionDataMutation,
    TError,
    SetKymInstitutionDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetKymInstitutionDataMutation,
    TError,
    SetKymInstitutionDataMutationVariables,
    TContext
  >(
    ['setKYMInstitutionData'],
    useAxios<SetKymInstitutionDataMutation, SetKymInstitutionDataMutationVariables>(
      SetKymInstitutionDataDocument
    ),
    options
  );
export const SendLoanApplicationForApprovalDocument = `
    mutation sendLoanApplicationForApproval($id: ID!, $data: LoanAccountInput!) {
  loanAccount {
    add(id: $id, data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSendLoanApplicationForApprovalMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SendLoanApplicationForApprovalMutation,
    TError,
    SendLoanApplicationForApprovalMutationVariables,
    TContext
  >
) =>
  useMutation<
    SendLoanApplicationForApprovalMutation,
    TError,
    SendLoanApplicationForApprovalMutationVariables,
    TContext
  >(
    ['sendLoanApplicationForApproval'],
    useAxios<
      SendLoanApplicationForApprovalMutation,
      SendLoanApplicationForApprovalMutationVariables
    >(SendLoanApplicationForApprovalDocument),
    options
  );
export const SetDisburseLoanDocument = `
    mutation setDisburseLoan($loanAccountId: ID!, $data: LoanDisbursementInput!) {
  loanAccount {
    disburse(loanAccount: $loanAccountId, data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDisburseLoanMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDisburseLoanMutation,
    TError,
    SetDisburseLoanMutationVariables,
    TContext
  >
) =>
  useMutation<SetDisburseLoanMutation, TError, SetDisburseLoanMutationVariables, TContext>(
    ['setDisburseLoan'],
    useAxios<SetDisburseLoanMutation, SetDisburseLoanMutationVariables>(SetDisburseLoanDocument),
    options
  );
export const ApproveLoanAccountDocument = `
    mutation approveLoanAccount($id: String!, $action: LoanApproveOrCancel!, $remarks: String) {
  loanAccount {
    approveOrCancel(loanAccountId: $id, action: $action, remarks: $remarks) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveLoanAccountMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApproveLoanAccountMutation,
    TError,
    ApproveLoanAccountMutationVariables,
    TContext
  >
) =>
  useMutation<ApproveLoanAccountMutation, TError, ApproveLoanAccountMutationVariables, TContext>(
    ['approveLoanAccount'],
    useAxios<ApproveLoanAccountMutation, ApproveLoanAccountMutationVariables>(
      ApproveLoanAccountDocument
    ),
    options
  );
export const SetLoanRepaymentDocument = `
    mutation setLoanRepayment($data: LoanRepaymentInput) {
  loanAccount {
    repayment(data: $data) {
      error {
        ...MutationError
      }
      record {
        transactionId
        accountId
        accountName
        memberId
        memberName
        date
        createdAt
        installmentNo
        principalAmount
        interestAmount
        penaltyAmount
        discountAmount
        rebateAmount
        totalAmount
        paymentMethod
        nextInstallment {
          installmentNo
          installmentDate
          currentRemainingPrincipal
          remainingInterest
        }
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanRepaymentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanRepaymentMutation,
    TError,
    SetLoanRepaymentMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanRepaymentMutation, TError, SetLoanRepaymentMutationVariables, TContext>(
    ['setLoanRepayment'],
    useAxios<SetLoanRepaymentMutation, SetLoanRepaymentMutationVariables>(SetLoanRepaymentDocument),
    options
  );
export const ChangeLocDocument = `
    mutation changeLOC($accountId: ID!, $newAmount: String!) {
  loanAccount {
    changeLOC(accountId: $accountId, newAmount: $newAmount)
  }
}
    `;
export const useChangeLocMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<ChangeLocMutation, TError, ChangeLocMutationVariables, TContext>
) =>
  useMutation<ChangeLocMutation, TError, ChangeLocMutationVariables, TContext>(
    ['changeLOC'],
    useAxios<ChangeLocMutation, ChangeLocMutationVariables>(ChangeLocDocument),
    options
  );
export const UpdateLinkedAccountDocument = `
    mutation updateLinkedAccount($loanAccountId: ID!, $newLinkedAccountId: ID!) {
  loanAccount {
    updateLinkedAccount(
      loanAccountId: $loanAccountId
      newLinkedAccountId: $newLinkedAccountId
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateLinkedAccountMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateLinkedAccountMutation,
    TError,
    UpdateLinkedAccountMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateLinkedAccountMutation, TError, UpdateLinkedAccountMutationVariables, TContext>(
    ['updateLinkedAccount'],
    useAxios<UpdateLinkedAccountMutation, UpdateLinkedAccountMutationVariables>(
      UpdateLinkedAccountDocument
    ),
    options
  );
export const ReleaseCollateralDocument = `
    mutation releaseCollateral($data: LoanCollateralReleaseInput!) {
  loanAccount {
    loanCollateralActions {
      releaseCollateral(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useReleaseCollateralMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ReleaseCollateralMutation,
    TError,
    ReleaseCollateralMutationVariables,
    TContext
  >
) =>
  useMutation<ReleaseCollateralMutation, TError, ReleaseCollateralMutationVariables, TContext>(
    ['releaseCollateral'],
    useAxios<ReleaseCollateralMutation, ReleaseCollateralMutationVariables>(
      ReleaseCollateralDocument
    ),
    options
  );
export const SwitchCollateralDocument = `
    mutation switchCollateral($data: LoanCollateralSwitchInput, $input: LoanAccountCollateralData) {
  loanAccount {
    loanCollateralActions {
      switchCollateral(data: $data, input: $input) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSwitchCollateralMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SwitchCollateralMutation,
    TError,
    SwitchCollateralMutationVariables,
    TContext
  >
) =>
  useMutation<SwitchCollateralMutation, TError, SwitchCollateralMutationVariables, TContext>(
    ['switchCollateral'],
    useAxios<SwitchCollateralMutation, SwitchCollateralMutationVariables>(SwitchCollateralDocument),
    options
  );
export const LoanAccountGuaranteeActionsDocument = `
    mutation loanAccountGuaranteeActions($actionType: GuaranteeActions!, $data: LoanGuaranteeActionsInput!) {
  loanAccount {
    loanGuaranteeActions {
      guaranteeActions(actionType: $actionType, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useLoanAccountGuaranteeActionsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    LoanAccountGuaranteeActionsMutation,
    TError,
    LoanAccountGuaranteeActionsMutationVariables,
    TContext
  >
) =>
  useMutation<
    LoanAccountGuaranteeActionsMutation,
    TError,
    LoanAccountGuaranteeActionsMutationVariables,
    TContext
  >(
    ['loanAccountGuaranteeActions'],
    useAxios<LoanAccountGuaranteeActionsMutation, LoanAccountGuaranteeActionsMutationVariables>(
      LoanAccountGuaranteeActionsDocument
    ),
    options
  );
export const SetLoanCloseDocument = `
    mutation setLoanClose($data: LoanRepaymentInput) {
  loanAccount {
    close(data: $data) {
      error {
        ...MutationError
      }
      record {
        accountID
        closedDate
        accountName
        totalPrincipal
        totalInterest
        totalFine
        paymentMode
        totalAmount
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanCloseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanCloseMutation,
    TError,
    SetLoanCloseMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanCloseMutation, TError, SetLoanCloseMutationVariables, TContext>(
    ['setLoanClose'],
    useAxios<SetLoanCloseMutation, SetLoanCloseMutationVariables>(SetLoanCloseDocument),
    options
  );
export const UpdateLoanAccountInterestDocument = `
    mutation updateLoanAccountInterest($accountId: ID!, $data: InterestRateSetupInput!) {
  loanAccount {
    updateAccountInterest(accountId: $accountId, data: $data) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateLoanAccountInterestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateLoanAccountInterestMutation,
    TError,
    UpdateLoanAccountInterestMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateLoanAccountInterestMutation,
    TError,
    UpdateLoanAccountInterestMutationVariables,
    TContext
  >(
    ['updateLoanAccountInterest'],
    useAxios<UpdateLoanAccountInterestMutation, UpdateLoanAccountInterestMutationVariables>(
      UpdateLoanAccountInterestDocument
    ),
    options
  );
export const EditLoanAccountInterestDocument = `
    mutation editLoanAccountInterest($id: ID!, $accountId: ID!, $data: InterestRateSetupInput!) {
  loanAccount {
    editAccountInterest(id: $id, accountId: $accountId, data: $data) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useEditLoanAccountInterestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditLoanAccountInterestMutation,
    TError,
    EditLoanAccountInterestMutationVariables,
    TContext
  >
) =>
  useMutation<
    EditLoanAccountInterestMutation,
    TError,
    EditLoanAccountInterestMutationVariables,
    TContext
  >(
    ['editLoanAccountInterest'],
    useAxios<EditLoanAccountInterestMutation, EditLoanAccountInterestMutationVariables>(
      EditLoanAccountInterestDocument
    ),
    options
  );
export const SetLoanCollateralDocument = `
    mutation setLoanCollateral($loanAccountID: ID!, $data: LoanAccountCollateralData) {
  loanAccount {
    loanCollateralActions {
      addCollateral(loanAccountID: $loanAccountID, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanCollateralMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanCollateralMutation,
    TError,
    SetLoanCollateralMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanCollateralMutation, TError, SetLoanCollateralMutationVariables, TContext>(
    ['setLoanCollateral'],
    useAxios<SetLoanCollateralMutation, SetLoanCollateralMutationVariables>(
      SetLoanCollateralDocument
    ),
    options
  );
export const SetLoanGuaranteeDocument = `
    mutation setLoanGuarantee($loanAccountID: ID!, $data: LoanAccountGuranteeInput!) {
  loanAccount {
    loanGuaranteeActions {
      addGuarantee(loanAccountID: $loanAccountID, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanGuaranteeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanGuaranteeMutation,
    TError,
    SetLoanGuaranteeMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanGuaranteeMutation, TError, SetLoanGuaranteeMutationVariables, TContext>(
    ['setLoanGuarantee'],
    useAxios<SetLoanGuaranteeMutation, SetLoanGuaranteeMutationVariables>(SetLoanGuaranteeDocument),
    options
  );
export const LoanLossProvisionDocument = `
    mutation loanLossProvision($data: LoanLossProvisionInput) {
  loanAccount {
    loanProvision(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useLoanLossProvisionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    LoanLossProvisionMutation,
    TError,
    LoanLossProvisionMutationVariables,
    TContext
  >
) =>
  useMutation<LoanLossProvisionMutation, TError, LoanLossProvisionMutationVariables, TContext>(
    ['loanLossProvision'],
    useAxios<LoanLossProvisionMutation, LoanLossProvisionMutationVariables>(
      LoanLossProvisionDocument
    ),
    options
  );
export const GetNewIdDocument = `
    mutation getNewId($idType: ID_TYPE) {
  newId(idType: $idType)
}
    `;
export const useGetNewIdMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>
) =>
  useMutation<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>(
    ['getNewId'],
    useAxios<GetNewIdMutation, GetNewIdMutationVariables>(GetNewIdDocument),
    options
  );
export const SetOfficialUseDocument = `
    mutation setOfficialUse($id: ID!, $isStaff: Boolean, $checkSanction: Boolean, $checkNegative: Boolean, $riskCategory: OfficialUseRiskCategory, $docCollectedAndVerified: Boolean, $acceptableAddressDoc: Boolean) {
  members {
    officialUse(
      data: {id: $id, isStaff: $isStaff, checkSanction: $checkSanction, checkNegative: $checkNegative, riskCategory: $riskCategory, docCollectedAndVerified: $docCollectedAndVerified, acceptableAddressDoc: $acceptableAddressDoc}
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetOfficialUseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetOfficialUseMutation,
    TError,
    SetOfficialUseMutationVariables,
    TContext
  >
) =>
  useMutation<SetOfficialUseMutation, TError, SetOfficialUseMutationVariables, TContext>(
    ['setOfficialUse'],
    useAxios<SetOfficialUseMutation, SetOfficialUseMutationVariables>(SetOfficialUseDocument),
    options
  );
export const DeleteDraftDocument = `
    mutation deleteDraft($memberId: ID!) {
  members {
    deleteDraft(memberId: $memberId) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteDraftMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<DeleteDraftMutation, TError, DeleteDraftMutationVariables, TContext>
) =>
  useMutation<DeleteDraftMutation, TError, DeleteDraftMutationVariables, TContext>(
    ['deleteDraft'],
    useAxios<DeleteDraftMutation, DeleteDraftMutationVariables>(DeleteDraftDocument),
    options
  );
export const IssueCertificateDocument = `
    mutation issueCertificate($id: ID!) {
  members {
    issueCertificate(id: $id)
  }
}
    `;
export const useIssueCertificateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    IssueCertificateMutation,
    TError,
    IssueCertificateMutationVariables,
    TContext
  >
) =>
  useMutation<IssueCertificateMutation, TError, IssueCertificateMutationVariables, TContext>(
    ['issueCertificate'],
    useAxios<IssueCertificateMutation, IssueCertificateMutationVariables>(IssueCertificateDocument),
    options
  );
export const UpdateKymDocument = `
    mutation updateKym($date: Localized!, $id: ID!) {
  members {
    updateKym(date: $date, id: $id) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateKymMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<UpdateKymMutation, TError, UpdateKymMutationVariables, TContext>
) =>
  useMutation<UpdateKymMutation, TError, UpdateKymMutationVariables, TContext>(
    ['updateKym'],
    useAxios<UpdateKymMutation, UpdateKymMutationVariables>(UpdateKymDocument),
    options
  );
export const MakeMemberDormantDocument = `
    mutation makeMemberDormant($memberId: ID!, $data: MemberDormancyInput!) {
  members {
    makeDormant(memberId: $memberId, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMakeMemberDormantMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    MakeMemberDormantMutation,
    TError,
    MakeMemberDormantMutationVariables,
    TContext
  >
) =>
  useMutation<MakeMemberDormantMutation, TError, MakeMemberDormantMutationVariables, TContext>(
    ['makeMemberDormant'],
    useAxios<MakeMemberDormantMutation, MakeMemberDormantMutationVariables>(
      MakeMemberDormantDocument
    ),
    options
  );
export const RevokeMemberDormancyDocument = `
    mutation revokeMemberDormancy($memberId: ID!, $data: RevokeDormancyInput!) {
  members {
    revokeDormancy(memberId: $memberId, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useRevokeMemberDormancyMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    RevokeMemberDormancyMutation,
    TError,
    RevokeMemberDormancyMutationVariables,
    TContext
  >
) =>
  useMutation<
    RevokeMemberDormancyMutation,
    TError,
    RevokeMemberDormancyMutationVariables,
    TContext
  >(
    ['revokeMemberDormancy'],
    useAxios<RevokeMemberDormancyMutation, RevokeMemberDormancyMutationVariables>(
      RevokeMemberDormancyDocument
    ),
    options
  );
export const UpdateMemberDormancyDocument = `
    mutation updateMemberDormancy($memberId: ID!, $data: UpdateDormancyInput!) {
  members {
    updateDormancy(memberId: $memberId, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateMemberDormancyMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateMemberDormancyMutation,
    TError,
    UpdateMemberDormancyMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateMemberDormancyMutation,
    TError,
    UpdateMemberDormancyMutationVariables,
    TContext
  >(
    ['updateMemberDormancy'],
    useAxios<UpdateMemberDormancyMutation, UpdateMemberDormancyMutationVariables>(
      UpdateMemberDormancyDocument
    ),
    options
  );
export const MemberTransferInitiateDocument = `
    mutation memberTransferInitiate($memberId: ID!, $data: MemberTransferInput!) {
  members {
    transfer {
      initiate(memberId: $memberId, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMemberTransferInitiateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    MemberTransferInitiateMutation,
    TError,
    MemberTransferInitiateMutationVariables,
    TContext
  >
) =>
  useMutation<
    MemberTransferInitiateMutation,
    TError,
    MemberTransferInitiateMutationVariables,
    TContext
  >(
    ['memberTransferInitiate'],
    useAxios<MemberTransferInitiateMutation, MemberTransferInitiateMutationVariables>(
      MemberTransferInitiateDocument
    ),
    options
  );
export const MemberTransferActionDocument = `
    mutation memberTransferAction($requestId: ID!, $state: MemberTransferState!, $notes: String) {
  members {
    transfer {
      action(requestId: $requestId, state: $state, notes: $notes) {
        record {
          recordId
          memberName
          valueDate
          oldBranch
          newBranch
          state
          savingAccountList
          loanAccountList
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMemberTransferActionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    MemberTransferActionMutation,
    TError,
    MemberTransferActionMutationVariables,
    TContext
  >
) =>
  useMutation<
    MemberTransferActionMutation,
    TError,
    MemberTransferActionMutationVariables,
    TContext
  >(
    ['memberTransferAction'],
    useAxios<MemberTransferActionMutation, MemberTransferActionMutationVariables>(
      MemberTransferActionDocument
    ),
    options
  );
export const PayMembershipDocument = `
    mutation payMembership($data: MembershipPaymentInput, $memberId: ID!) {
  members {
    activateMember {
      membershipPayment(data: $data, memberId: $memberId) {
        error {
          ...MutationError
        }
        recordId
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const usePayMembershipMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    PayMembershipMutation,
    TError,
    PayMembershipMutationVariables,
    TContext
  >
) =>
  useMutation<PayMembershipMutation, TError, PayMembershipMutationVariables, TContext>(
    ['payMembership'],
    useAxios<PayMembershipMutation, PayMembershipMutationVariables>(PayMembershipDocument),
    options
  );
export const InactivateMemberDocument = `
    mutation inactivateMember($memberId: ID!) {
  members {
    makeInactive(memberId: $memberId) {
      recordId
    }
  }
}
    `;
export const useInactivateMemberMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    InactivateMemberMutation,
    TError,
    InactivateMemberMutationVariables,
    TContext
  >
) =>
  useMutation<InactivateMemberMutation, TError, InactivateMemberMutationVariables, TContext>(
    ['inactivateMember'],
    useAxios<InactivateMemberMutation, InactivateMemberMutationVariables>(InactivateMemberDocument),
    options
  );
export const SetOrganizationDataDocument = `
    mutation setOrganizationData($data: OrganizationInput!) {
  settings {
    general {
      organization {
        initialSetup(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetOrganizationDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetOrganizationDataMutation,
    TError,
    SetOrganizationDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetOrganizationDataMutation, TError, SetOrganizationDataMutationVariables, TContext>(
    ['setOrganizationData'],
    useAxios<SetOrganizationDataMutation, SetOrganizationDataMutationVariables>(
      SetOrganizationDataDocument
    ),
    options
  );
export const GetPreSignedUrlDocument = `
    mutation getPreSignedUrl($contentType: String) {
  presignedUrl {
    upload(contentType: $contentType) {
      filename
      getUrl
      putUrl
    }
  }
}
    `;
export const useGetPreSignedUrlMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    GetPreSignedUrlMutation,
    TError,
    GetPreSignedUrlMutationVariables,
    TContext
  >
) =>
  useMutation<GetPreSignedUrlMutation, TError, GetPreSignedUrlMutationVariables, TContext>(
    ['getPreSignedUrl'],
    useAxios<GetPreSignedUrlMutation, GetPreSignedUrlMutationVariables>(GetPreSignedUrlDocument),
    options
  );
export const SaveNewReportDocument = `
    mutation saveNewReport($data: StatementReportInput!) {
  report {
    statementReport(data: $data) {
      member {
        id
        name
        address {
          state
          district
          locality
          localGovernment
        }
      }
      statement {
        ... on ShareStatementReport {
          shareStatement {
            date
            particular
            noOfShares
            returnAmountDr
            purchaseAmountCr
            balanceSheet
          }
          totals {
            totalShares
            totalDr
            totalCr
            totalBalanceSheet
          }
        }
      }
    }
  }
}
    `;
export const useSaveNewReportMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SaveNewReportMutation,
    TError,
    SaveNewReportMutationVariables,
    TContext
  >
) =>
  useMutation<SaveNewReportMutation, TError, SaveNewReportMutationVariables, TContext>(
    ['saveNewReport'],
    useAxios<SaveNewReportMutation, SaveNewReportMutationVariables>(SaveNewReportDocument),
    options
  );
export const ApproveOrDeclineRequestDocument = `
    mutation approveOrDeclineRequest($data: RequestApproveOrDeclineInput, $requestType: RequestType!) {
  requests {
    requestApproveOrDecline(data: $data, requestType: $requestType) {
      error {
        ...MutationError
      }
      requestId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveOrDeclineRequestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApproveOrDeclineRequestMutation,
    TError,
    ApproveOrDeclineRequestMutationVariables,
    TContext
  >
) =>
  useMutation<
    ApproveOrDeclineRequestMutation,
    TError,
    ApproveOrDeclineRequestMutationVariables,
    TContext
  >(
    ['approveOrDeclineRequest'],
    useAxios<ApproveOrDeclineRequestMutation, ApproveOrDeclineRequestMutationVariables>(
      ApproveOrDeclineRequestDocument
    ),
    options
  );
export const CancelWithdrawSlipRequestDocument = `
    mutation cancelWithdrawSlipRequest($accountId: ID!, $slipNumber: Int, $slipRange: SlipRangeInput, $reason: String) {
  withdrawSlip {
    cancelSlip(
      accountId: $accountId
      slipNumber: $slipNumber
      slipRange: $slipRange
      reason: $reason
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useCancelWithdrawSlipRequestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    CancelWithdrawSlipRequestMutation,
    TError,
    CancelWithdrawSlipRequestMutationVariables,
    TContext
  >
) =>
  useMutation<
    CancelWithdrawSlipRequestMutation,
    TError,
    CancelWithdrawSlipRequestMutationVariables,
    TContext
  >(
    ['cancelWithdrawSlipRequest'],
    useAxios<CancelWithdrawSlipRequestMutation, CancelWithdrawSlipRequestMutationVariables>(
      CancelWithdrawSlipRequestDocument
    ),
    options
  );
export const ApproveOrDeclineMemberRequestDocument = `
    mutation approveOrDeclineMemberRequest($data: RequestApproveOrDeclineInput) {
  requests {
    approveOrDecline {
      membershipRequest(data: $data) {
        error {
          ...MutationError
        }
        requestId
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveOrDeclineMemberRequestMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApproveOrDeclineMemberRequestMutation,
    TError,
    ApproveOrDeclineMemberRequestMutationVariables,
    TContext
  >
) =>
  useMutation<
    ApproveOrDeclineMemberRequestMutation,
    TError,
    ApproveOrDeclineMemberRequestMutationVariables,
    TContext
  >(
    ['approveOrDeclineMemberRequest'],
    useAxios<ApproveOrDeclineMemberRequestMutation, ApproveOrDeclineMemberRequestMutationVariables>(
      ApproveOrDeclineMemberRequestDocument
    ),
    options
  );
export const SetAccountingNewTaxDocument = `
    mutation setAccountingNewTax($data: NewTaxInput, $id: String) {
  settings {
    general {
      accounting {
        newTax(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountingNewTaxMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountingNewTaxMutation,
    TError,
    SetAccountingNewTaxMutationVariables,
    TContext
  >
) =>
  useMutation<SetAccountingNewTaxMutation, TError, SetAccountingNewTaxMutationVariables, TContext>(
    ['setAccountingNewTax'],
    useAxios<SetAccountingNewTaxMutation, SetAccountingNewTaxMutationVariables>(
      SetAccountingNewTaxDocument
    ),
    options
  );
export const SaveAlternativeChargesDocument = `
    mutation saveAlternativeCharges($data: [AlternativeChannelChargesInput]) {
  settings {
    general {
      alternativeChannel {
        feesAndCharges(data: $data) {
          error {
            ...MutationError
          }
          record {
            id
            amount
            ledgerId
            serviceType
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSaveAlternativeChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SaveAlternativeChargesMutation,
    TError,
    SaveAlternativeChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SaveAlternativeChargesMutation,
    TError,
    SaveAlternativeChargesMutationVariables,
    TContext
  >(
    ['saveAlternativeCharges'],
    useAxios<SaveAlternativeChargesMutation, SaveAlternativeChargesMutationVariables>(
      SaveAlternativeChargesDocument
    ),
    options
  );
export const ActivateServiceDocument = `
    mutation activateService($data: AlternativeChannelServiceActivationInput) {
  alternativeChannel {
    serviceActivation(data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useActivateServiceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ActivateServiceMutation,
    TError,
    ActivateServiceMutationVariables,
    TContext
  >
) =>
  useMutation<ActivateServiceMutation, TError, ActivateServiceMutationVariables, TContext>(
    ['activateService'],
    useAxios<ActivateServiceMutation, ActivateServiceMutationVariables>(ActivateServiceDocument),
    options
  );
export const SetBankListDocument = `
    mutation setBankList($data: [BankInput]) {
  bank {
    bank {
      add(data: $data) {
        record {
          id
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBankListMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetBankListMutation, TError, SetBankListMutationVariables, TContext>
) =>
  useMutation<SetBankListMutation, TError, SetBankListMutationVariables, TContext>(
    ['setBankList'],
    useAxios<SetBankListMutation, SetBankListMutationVariables>(SetBankListDocument),
    options
  );
export const SetBranchDataDocument = `
    mutation setBranchData($id: ID!, $data: BranchInput!) {
  settings {
    general {
      branch {
        add(id: $id, data: $data) {
          record {
            id
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBranchDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetBranchDataMutation,
    TError,
    SetBranchDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetBranchDataMutation, TError, SetBranchDataMutationVariables, TContext>(
    ['setBranchData'],
    useAxios<SetBranchDataMutation, SetBranchDataMutationVariables>(SetBranchDataDocument),
    options
  );
export const SetCbsCodeDocument = `
    mutation setCBSCode($data: CodeManagementInput) {
  settings {
    general {
      codes {
        cbs {
          add(data: $data) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetCbsCodeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetCbsCodeMutation, TError, SetCbsCodeMutationVariables, TContext>
) =>
  useMutation<SetCbsCodeMutation, TError, SetCbsCodeMutationVariables, TContext>(
    ['setCBSCode'],
    useAxios<SetCbsCodeMutation, SetCbsCodeMutationVariables>(SetCbsCodeDocument),
    options
  );
export const SetCommitteeAddDocument = `
    mutation setCommitteeAdd($data: CommitteeInput!, $id: ID) {
  settings {
    general {
      organization {
        upsertCommittee(data: $data, id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetCommitteeAddMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCommitteeAddMutation,
    TError,
    SetCommitteeAddMutationVariables,
    TContext
  >
) =>
  useMutation<SetCommitteeAddMutation, TError, SetCommitteeAddMutationVariables, TContext>(
    ['setCommitteeAdd'],
    useAxios<SetCommitteeAddMutation, SetCommitteeAddMutationVariables>(SetCommitteeAddDocument),
    options
  );
export const SetCommitteeMemberAddDocument = `
    mutation setCommitteeMemberAdd($data: [CommitteeMemberInput!]!) {
  settings {
    general {
      organization {
        upsertCommitteeMember(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetCommitteeMemberAddMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCommitteeMemberAddMutation,
    TError,
    SetCommitteeMemberAddMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetCommitteeMemberAddMutation,
    TError,
    SetCommitteeMemberAddMutationVariables,
    TContext
  >(
    ['setCommitteeMemberAdd'],
    useAxios<SetCommitteeMemberAddMutation, SetCommitteeMemberAddMutationVariables>(
      SetCommitteeMemberAddDocument
    ),
    options
  );
export const SetDepositProductDocument = `
    mutation setDepositProduct($id: ID!, $data: DepositProductInput, $edit: Boolean) {
  settings {
    general {
      depositProduct {
        add(id: $id, data: $data, edit: $edit) {
          recordId
          record {
            id
            productCode
            productName
            createdDate
            interest
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDepositProductMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositProductMutation,
    TError,
    SetDepositProductMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositProductMutation, TError, SetDepositProductMutationVariables, TContext>(
    ['setDepositProduct'],
    useAxios<SetDepositProductMutation, SetDepositProductMutationVariables>(
      SetDepositProductDocument
    ),
    options
  );
export const SetDepositProductInactiveDocument = `
    mutation setDepositProductInactive($data: DepositProductInactiveData) {
  settings {
    general {
      depositProduct {
        makeInactive(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetDepositProductInactiveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositProductInactiveMutation,
    TError,
    SetDepositProductInactiveMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetDepositProductInactiveMutation,
    TError,
    SetDepositProductInactiveMutationVariables,
    TContext
  >(
    ['setDepositProductInactive'],
    useAxios<SetDepositProductInactiveMutation, SetDepositProductInactiveMutationVariables>(
      SetDepositProductInactiveDocument
    ),
    options
  );
export const ActivateSavingsProductDocument = `
    mutation activateSavingsProduct($productId: ID!, $productType: AccountTypeFilter!, $remarks: String!) {
  settings {
    general {
      depositProduct {
        activateProduct(
          productId: $productId
          productType: $productType
          remarks: $remarks
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useActivateSavingsProductMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ActivateSavingsProductMutation,
    TError,
    ActivateSavingsProductMutationVariables,
    TContext
  >
) =>
  useMutation<
    ActivateSavingsProductMutation,
    TError,
    ActivateSavingsProductMutationVariables,
    TContext
  >(
    ['activateSavingsProduct'],
    useAxios<ActivateSavingsProductMutation, ActivateSavingsProductMutationVariables>(
      ActivateSavingsProductDocument
    ),
    options
  );
export const UpdateSavingProductInterestRateDocument = `
    mutation updateSavingProductInterestRate($productId: ID!, $data: InterestRateSetupInput!) {
  settings {
    general {
      depositProduct {
        updateProductInterest(productId: $productId, data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateSavingProductInterestRateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateSavingProductInterestRateMutation,
    TError,
    UpdateSavingProductInterestRateMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateSavingProductInterestRateMutation,
    TError,
    UpdateSavingProductInterestRateMutationVariables,
    TContext
  >(
    ['updateSavingProductInterestRate'],
    useAxios<
      UpdateSavingProductInterestRateMutation,
      UpdateSavingProductInterestRateMutationVariables
    >(UpdateSavingProductInterestRateDocument),
    options
  );
export const EditSavingProductInterestRateDocument = `
    mutation editSavingProductInterestRate($id: ID!, $productId: ID!, $data: InterestRateSetupInput!) {
  settings {
    general {
      depositProduct {
        editProductInterest(id: $id, productId: $productId, data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useEditSavingProductInterestRateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditSavingProductInterestRateMutation,
    TError,
    EditSavingProductInterestRateMutationVariables,
    TContext
  >
) =>
  useMutation<
    EditSavingProductInterestRateMutation,
    TError,
    EditSavingProductInterestRateMutationVariables,
    TContext
  >(
    ['editSavingProductInterestRate'],
    useAxios<EditSavingProductInterestRateMutation, EditSavingProductInterestRateMutationVariables>(
      EditSavingProductInterestRateDocument
    ),
    options
  );
export const EditSavingProductBalanceLimitDocument = `
    mutation editSavingProductBalanceLimit($productId: ID!, $productType: AccountTypeFilter!, $data: AmountLimit!) {
  settings {
    general {
      depositProduct {
        editBalanceLimit(productId: $productId, productType: $productType, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useEditSavingProductBalanceLimitMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditSavingProductBalanceLimitMutation,
    TError,
    EditSavingProductBalanceLimitMutationVariables,
    TContext
  >
) =>
  useMutation<
    EditSavingProductBalanceLimitMutation,
    TError,
    EditSavingProductBalanceLimitMutationVariables,
    TContext
  >(
    ['editSavingProductBalanceLimit'],
    useAxios<EditSavingProductBalanceLimitMutation, EditSavingProductBalanceLimitMutationVariables>(
      EditSavingProductBalanceLimitDocument
    ),
    options
  );
export const UpdateSavingProductPenaltyDocument = `
    mutation updateSavingProductPenalty($id: ID, $productId: ID!, $payload: PenaltyTypeInput!, $additionalData: ProductChargeAdditionalDataInput!) {
  settings {
    general {
      depositProduct {
        updatePenaltyCharge(
          id: $id
          productId: $productId
          payload: $payload
          additionalData: $additionalData
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateSavingProductPenaltyMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateSavingProductPenaltyMutation,
    TError,
    UpdateSavingProductPenaltyMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateSavingProductPenaltyMutation,
    TError,
    UpdateSavingProductPenaltyMutationVariables,
    TContext
  >(
    ['updateSavingProductPenalty'],
    useAxios<UpdateSavingProductPenaltyMutation, UpdateSavingProductPenaltyMutationVariables>(
      UpdateSavingProductPenaltyDocument
    ),
    options
  );
export const UpdateOpenChargeDocument = `
    mutation updateOpenCharge($id: ID, $productId: ID!, $payload: [ServiceType!]!, $additionalData: ProductChargeAdditionalDataInput!) {
  settings {
    general {
      depositProduct {
        updateOpenCharge(
          id: $id
          productId: $productId
          payload: $payload
          additionalData: $additionalData
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateOpenChargeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateOpenChargeMutation,
    TError,
    UpdateOpenChargeMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateOpenChargeMutation, TError, UpdateOpenChargeMutationVariables, TContext>(
    ['updateOpenCharge'],
    useAxios<UpdateOpenChargeMutation, UpdateOpenChargeMutationVariables>(UpdateOpenChargeDocument),
    options
  );
export const UpdateCloseChargeDocument = `
    mutation updateCloseCharge($id: ID, $productId: ID!, $payload: [ServiceType!]!, $additionalData: ProductChargeAdditionalDataInput!) {
  settings {
    general {
      depositProduct {
        updateCloseCharge(
          id: $id
          productId: $productId
          payload: $payload
          additionalData: $additionalData
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateCloseChargeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateCloseChargeMutation,
    TError,
    UpdateCloseChargeMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateCloseChargeMutation, TError, UpdateCloseChargeMutationVariables, TContext>(
    ['updateCloseCharge'],
    useAxios<UpdateCloseChargeMutation, UpdateCloseChargeMutationVariables>(
      UpdateCloseChargeDocument
    ),
    options
  );
export const EditChequeSettingsDocument = `
    mutation editChequeSettings($productId: ID!, $isChequeIssueAllowed: Boolean!, $chequeCharge: [ServiceType]) {
  settings {
    general {
      depositProduct {
        editChequeSettings(
          productId: $productId
          ischequeIssueAllowed: $isChequeIssueAllowed
          chequeCharge: $chequeCharge
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useEditChequeSettingsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditChequeSettingsMutation,
    TError,
    EditChequeSettingsMutationVariables,
    TContext
  >
) =>
  useMutation<EditChequeSettingsMutation, TError, EditChequeSettingsMutationVariables, TContext>(
    ['editChequeSettings'],
    useAxios<EditChequeSettingsMutation, EditChequeSettingsMutationVariables>(
      EditChequeSettingsDocument
    ),
    options
  );
export const UpdateSavingLoanProductAccountPremiumDocument = `
    mutation updateSavingLoanProductAccountPremium($productId: ID!, $payload: AccountPremium!, $productType: AccountTypeFilter!) {
  settings {
    general {
      depositProduct {
        updateAccountPremium(
          productId: $productId
          payload: $payload
          productType: $productType
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateSavingLoanProductAccountPremiumMutation = <
  TError = unknown,
  TContext = unknown
>(
  options?: UseMutationOptions<
    UpdateSavingLoanProductAccountPremiumMutation,
    TError,
    UpdateSavingLoanProductAccountPremiumMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateSavingLoanProductAccountPremiumMutation,
    TError,
    UpdateSavingLoanProductAccountPremiumMutationVariables,
    TContext
  >(
    ['updateSavingLoanProductAccountPremium'],
    useAxios<
      UpdateSavingLoanProductAccountPremiumMutation,
      UpdateSavingLoanProductAccountPremiumMutationVariables
    >(UpdateSavingLoanProductAccountPremiumDocument),
    options
  );
export const UpdateSavingLoanProductTenureDocument = `
    mutation updateSavingLoanProductTenure($productId: ID!, $payload: TenureUpdateData!, $productType: AccountTypeFilter!) {
  settings {
    general {
      depositProduct {
        updateProductTenure(
          productId: $productId
          payload: $payload
          productType: $productType
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateSavingLoanProductTenureMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateSavingLoanProductTenureMutation,
    TError,
    UpdateSavingLoanProductTenureMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateSavingLoanProductTenureMutation,
    TError,
    UpdateSavingLoanProductTenureMutationVariables,
    TContext
  >(
    ['updateSavingLoanProductTenure'],
    useAxios<UpdateSavingLoanProductTenureMutation, UpdateSavingLoanProductTenureMutationVariables>(
      UpdateSavingLoanProductTenureDocument
    ),
    options
  );
export const UpdateSavingProductPrematurePenaltyDocument = `
    mutation updateSavingProductPrematurePenalty($productId: ID!, $allowPenalty: Boolean!, $payload: PrematurePenalty!) {
  settings {
    general {
      depositProduct {
        updatePrematurePenalty(
          productId: $productId
          allowPenalty: $allowPenalty
          payload: $payload
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateSavingProductPrematurePenaltyMutation = <
  TError = unknown,
  TContext = unknown
>(
  options?: UseMutationOptions<
    UpdateSavingProductPrematurePenaltyMutation,
    TError,
    UpdateSavingProductPrematurePenaltyMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateSavingProductPrematurePenaltyMutation,
    TError,
    UpdateSavingProductPrematurePenaltyMutationVariables,
    TContext
  >(
    ['updateSavingProductPrematurePenalty'],
    useAxios<
      UpdateSavingProductPrematurePenaltyMutation,
      UpdateSavingProductPrematurePenaltyMutationVariables
    >(UpdateSavingProductPrematurePenaltyDocument),
    options
  );
export const UpdateWithdrawPenaltyDocument = `
    mutation updateWithdrawPenalty($productId: ID!, $payload: WithdrawPenalty!) {
  settings {
    general {
      depositProduct {
        updateWithdrawPenalty(productId: $productId, payload: $payload) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateWithdrawPenaltyMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateWithdrawPenaltyMutation,
    TError,
    UpdateWithdrawPenaltyMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateWithdrawPenaltyMutation,
    TError,
    UpdateWithdrawPenaltyMutationVariables,
    TContext
  >(
    ['updateWithdrawPenalty'],
    useAxios<UpdateWithdrawPenaltyMutation, UpdateWithdrawPenaltyMutationVariables>(
      UpdateWithdrawPenaltyDocument
    ),
    options
  );
export const UpdateSavingProductRebateDocument = `
    mutation updateSavingProductRebate($productId: ID!, $isRebateAllowed: Boolean!, $payload: RebateTypeInput!) {
  settings {
    general {
      depositProduct {
        updateRebate(
          productId: $productId
          isRebateAllowed: $isRebateAllowed
          payload: $payload
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateSavingProductRebateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateSavingProductRebateMutation,
    TError,
    UpdateSavingProductRebateMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateSavingProductRebateMutation,
    TError,
    UpdateSavingProductRebateMutationVariables,
    TContext
  >(
    ['updateSavingProductRebate'],
    useAxios<UpdateSavingProductRebateMutation, UpdateSavingProductRebateMutationVariables>(
      UpdateSavingProductRebateDocument
    ),
    options
  );
export const SetDepositIroDocument = `
    mutation setDepositIro($data: DepositIroInput) {
  settings {
    general {
      deposit {
        ... on DepositSettingsMutation {
          iroSetup(data: $data) {
            recordId
            record {
              id
              iroName
              iroAddress
              iroCode
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetDepositIroMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositIroMutation,
    TError,
    SetDepositIroMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositIroMutation, TError, SetDepositIroMutationVariables, TContext>(
    ['setDepositIro'],
    useAxios<SetDepositIroMutation, SetDepositIroMutationVariables>(SetDepositIroDocument),
    options
  );
export const SetDepositTdsDocument = `
    mutation setDepositTds($data: DepositTdsInput) {
  settings {
    general {
      deposit {
        ... on DepositSettingsMutation {
          tdsSetup(data: $data) {
            recordId
            record {
              id
              individual
              institution
              cooperative
              coopUnion
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetDepositTdsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositTdsMutation,
    TError,
    SetDepositTdsMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositTdsMutation, TError, SetDepositTdsMutationVariables, TContext>(
    ['setDepositTds'],
    useAxios<SetDepositTdsMutation, SetDepositTdsMutationVariables>(SetDepositTdsDocument),
    options
  );
export const SetSavingsOrganizationRateDocument = `
    mutation setSavingsOrganizationRate($data: InterestRateSetupInput!) {
  settings {
    general {
      deposit {
        setOrganizationRate(data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSavingsOrganizationRateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSavingsOrganizationRateMutation,
    TError,
    SetSavingsOrganizationRateMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSavingsOrganizationRateMutation,
    TError,
    SetSavingsOrganizationRateMutationVariables,
    TContext
  >(
    ['setSavingsOrganizationRate'],
    useAxios<SetSavingsOrganizationRateMutation, SetSavingsOrganizationRateMutationVariables>(
      SetSavingsOrganizationRateDocument
    ),
    options
  );
export const EditSavingsOrganizationRateDocument = `
    mutation editSavingsOrganizationRate($id: ID!, $data: InterestRateSetupInput!) {
  settings {
    general {
      deposit {
        editOrganizationRate(id: $id, data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useEditSavingsOrganizationRateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditSavingsOrganizationRateMutation,
    TError,
    EditSavingsOrganizationRateMutationVariables,
    TContext
  >
) =>
  useMutation<
    EditSavingsOrganizationRateMutation,
    TError,
    EditSavingsOrganizationRateMutationVariables,
    TContext
  >(
    ['editSavingsOrganizationRate'],
    useAxios<EditSavingsOrganizationRateMutation, EditSavingsOrganizationRateMutationVariables>(
      EditSavingsOrganizationRateDocument
    ),
    options
  );
export const EodDateSetupDocument = `
    mutation eodDateSetup($date: Localized!) {
  settings {
    general {
      setup {
        eodSeed(date: $date)
      }
    }
  }
}
    `;
export const useEodDateSetupMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EodDateSetupMutation,
    TError,
    EodDateSetupMutationVariables,
    TContext
  >
) =>
  useMutation<EodDateSetupMutation, TError, EodDateSetupMutationVariables, TContext>(
    ['eodDateSetup'],
    useAxios<EodDateSetupMutation, EodDateSetupMutationVariables>(EodDateSetupDocument),
    options
  );
export const EodExceptionSetupDocument = `
    mutation eodExceptionSetup($value: EODExceptionInput!) {
  settings {
    general {
      setup {
        eodException(value: $value)
      }
    }
  }
}
    `;
export const useEodExceptionSetupMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EodExceptionSetupMutation,
    TError,
    EodExceptionSetupMutationVariables,
    TContext
  >
) =>
  useMutation<EodExceptionSetupMutation, TError, EodExceptionSetupMutationVariables, TContext>(
    ['eodExceptionSetup'],
    useAxios<EodExceptionSetupMutation, EodExceptionSetupMutationVariables>(
      EodExceptionSetupDocument
    ),
    options
  );
export const EodActivitiesSetupDocument = `
    mutation eodActivitiesSetup($value: EODActionInput!) {
  settings {
    general {
      setup {
        eodAction(value: $value)
      }
    }
  }
}
    `;
export const useEodActivitiesSetupMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EodActivitiesSetupMutation,
    TError,
    EodActivitiesSetupMutationVariables,
    TContext
  >
) =>
  useMutation<EodActivitiesSetupMutation, TError, EodActivitiesSetupMutationVariables, TContext>(
    ['eodActivitiesSetup'],
    useAxios<EodActivitiesSetupMutation, EodActivitiesSetupMutationVariables>(
      EodActivitiesSetupDocument
    ),
    options
  );
export const SetEmployeeLevelDocument = `
    mutation setEmployeeLevel($id: String, $input: NewEmployeeLevel!) {
  settings {
    general {
      HCM {
        employee {
          employee {
            upsertEmployeeLevel(id: $id, input: $input) {
              recordId
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeLevelMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeLevelMutation,
    TError,
    SetEmployeeLevelMutationVariables,
    TContext
  >
) =>
  useMutation<SetEmployeeLevelMutation, TError, SetEmployeeLevelMutationVariables, TContext>(
    ['setEmployeeLevel'],
    useAxios<SetEmployeeLevelMutation, SetEmployeeLevelMutationVariables>(SetEmployeeLevelDocument),
    options
  );
export const SetDepartmentDocument = `
    mutation setDepartment($id: String, $input: NewDepartment!) {
  settings {
    general {
      HCM {
        employee {
          employee {
            upsertDepartment(id: $id, input: $input) {
              recordId
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDepartmentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepartmentMutation,
    TError,
    SetDepartmentMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepartmentMutation, TError, SetDepartmentMutationVariables, TContext>(
    ['setDepartment'],
    useAxios<SetDepartmentMutation, SetDepartmentMutationVariables>(SetDepartmentDocument),
    options
  );
export const SetDesignationDocument = `
    mutation setDesignation($id: String, $input: NewDesignation!) {
  settings {
    general {
      HCM {
        employee {
          employee {
            upsertDesignation(id: $id, input: $input) {
              recordId
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDesignationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDesignationMutation,
    TError,
    SetDesignationMutationVariables,
    TContext
  >
) =>
  useMutation<SetDesignationMutation, TError, SetDesignationMutationVariables, TContext>(
    ['setDesignation'],
    useAxios<SetDesignationMutation, SetDesignationMutationVariables>(SetDesignationDocument),
    options
  );
export const SetEmployeeTypeDocument = `
    mutation setEmployeeType($id: String, $input: NewEmployeeType!) {
  settings {
    general {
      HCM {
        employee {
          employee {
            upsertEmployeeType(id: $id, input: $input) {
              recordId
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeTypeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeTypeMutation,
    TError,
    SetEmployeeTypeMutationVariables,
    TContext
  >
) =>
  useMutation<SetEmployeeTypeMutation, TError, SetEmployeeTypeMutationVariables, TContext>(
    ['setEmployeeType'],
    useAxios<SetEmployeeTypeMutation, SetEmployeeTypeMutationVariables>(SetEmployeeTypeDocument),
    options
  );
export const SetEmployeeHealthInsuranceDocument = `
    mutation setEmployeeHealthInsurance($id: String, $input: NewEmployeeHealthInsurance!) {
  settings {
    general {
      HCM {
        employee {
          employee {
            upsertEmployeeHealthInsurance(id: $id, input: $input) {
              recordId
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeHealthInsuranceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeHealthInsuranceMutation,
    TError,
    SetEmployeeHealthInsuranceMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEmployeeHealthInsuranceMutation,
    TError,
    SetEmployeeHealthInsuranceMutationVariables,
    TContext
  >(
    ['setEmployeeHealthInsurance'],
    useAxios<SetEmployeeHealthInsuranceMutation, SetEmployeeHealthInsuranceMutationVariables>(
      SetEmployeeHealthInsuranceDocument
    ),
    options
  );
export const DeleteHcmEmployeeGeneralDocument = `
    mutation deleteHcmEmployeeGeneral($id: String!) {
  settings {
    general {
      HCM {
        employee {
          employee {
            deleteHcmEmployeeGeneral(id: $id) {
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteHcmEmployeeGeneralMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteHcmEmployeeGeneralMutation,
    TError,
    DeleteHcmEmployeeGeneralMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteHcmEmployeeGeneralMutation,
    TError,
    DeleteHcmEmployeeGeneralMutationVariables,
    TContext
  >(
    ['deleteHcmEmployeeGeneral'],
    useAxios<DeleteHcmEmployeeGeneralMutation, DeleteHcmEmployeeGeneralMutationVariables>(
      DeleteHcmEmployeeGeneralDocument
    ),
    options
  );
export const SetEmployeeLeaveTypeDocument = `
    mutation setEmployeeLeaveType($id: String, $input: LeaveTypeInput!) {
  settings {
    general {
      HCM {
        employee {
          leave {
            upsertLeaveType(id: $id, input: $input) {
              recordId
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeLeaveTypeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeLeaveTypeMutation,
    TError,
    SetEmployeeLeaveTypeMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEmployeeLeaveTypeMutation,
    TError,
    SetEmployeeLeaveTypeMutationVariables,
    TContext
  >(
    ['setEmployeeLeaveType'],
    useAxios<SetEmployeeLeaveTypeMutation, SetEmployeeLeaveTypeMutationVariables>(
      SetEmployeeLeaveTypeDocument
    ),
    options
  );
export const SetEmployeeLeavePolicyDocument = `
    mutation setEmployeeLeavePolicy($id: String, $input: LeavePolicyInput!) {
  settings {
    general {
      HCM {
        employee {
          leavePolicy {
            upsertLeavePolicy(id: $id, input: $input) {
              recordId
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEmployeeLeavePolicyMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEmployeeLeavePolicyMutation,
    TError,
    SetEmployeeLeavePolicyMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEmployeeLeavePolicyMutation,
    TError,
    SetEmployeeLeavePolicyMutationVariables,
    TContext
  >(
    ['setEmployeeLeavePolicy'],
    useAxios<SetEmployeeLeavePolicyMutation, SetEmployeeLeavePolicyMutationVariables>(
      SetEmployeeLeavePolicyDocument
    ),
    options
  );
export const UpsertLedgerTagDocument = `
    mutation upsertLedgerTag($id: ID, $data: LedgerTagInput!) {
  settings {
    chartsOfAccount {
      tag {
        upsert(id: $id, data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertLedgerTagMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertLedgerTagMutation,
    TError,
    UpsertLedgerTagMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertLedgerTagMutation, TError, UpsertLedgerTagMutationVariables, TContext>(
    ['upsertLedgerTag'],
    useAxios<UpsertLedgerTagMutation, UpsertLedgerTagMutationVariables>(UpsertLedgerTagDocument),
    options
  );
export const AddTagToLedgerDocument = `
    mutation addTagToLedger($ledgerId: ID!, $tagId: [ID!]!) {
  settings {
    chartsOfAccount {
      tag {
        addTagToLedger(ledgerId: $ledgerId, tagId: $tagId) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddTagToLedgerMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddTagToLedgerMutation,
    TError,
    AddTagToLedgerMutationVariables,
    TContext
  >
) =>
  useMutation<AddTagToLedgerMutation, TError, AddTagToLedgerMutationVariables, TContext>(
    ['addTagToLedger'],
    useAxios<AddTagToLedgerMutation, AddTagToLedgerMutationVariables>(AddTagToLedgerDocument),
    options
  );
export const SetLoanProductDocument = `
    mutation setLoanProduct($id: ID!, $data: LoanProductInput, $edit: Boolean) {
  settings {
    general {
      loanProducts {
        upsert(id: $id, data: $data, edit: $edit) {
          recordId
          record {
            id
            objState
            productName
            productType
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanProductMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanProductMutation,
    TError,
    SetLoanProductMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanProductMutation, TError, SetLoanProductMutationVariables, TContext>(
    ['setLoanProduct'],
    useAxios<SetLoanProductMutation, SetLoanProductMutationVariables>(SetLoanProductDocument),
    options
  );
export const SetLoanProductInactiveDocument = `
    mutation setLoanProductInactive($data: LoanProductInactiveData) {
  settings {
    general {
      loanProducts {
        makeInactive(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetLoanProductInactiveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanProductInactiveMutation,
    TError,
    SetLoanProductInactiveMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanProductInactiveMutation,
    TError,
    SetLoanProductInactiveMutationVariables,
    TContext
  >(
    ['setLoanProductInactive'],
    useAxios<SetLoanProductInactiveMutation, SetLoanProductInactiveMutationVariables>(
      SetLoanProductInactiveDocument
    ),
    options
  );
export const SetProductActiveDocument = `
    mutation setProductActive($productId: ID!, $productType: AccountTypeFilter!, $remarks: String!) {
  settings {
    general {
      depositProduct {
        activateProduct(
          productId: $productId
          productType: $productType
          remarks: $remarks
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetProductActiveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetProductActiveMutation,
    TError,
    SetProductActiveMutationVariables,
    TContext
  >
) =>
  useMutation<SetProductActiveMutation, TError, SetProductActiveMutationVariables, TContext>(
    ['setProductActive'],
    useAxios<SetProductActiveMutation, SetProductActiveMutationVariables>(SetProductActiveDocument),
    options
  );
export const UpdateLoanProductInterestRateDocument = `
    mutation updateLoanProductInterestRate($productId: ID!, $data: InterestRateSetupInput!) {
  settings {
    general {
      loanProducts {
        updateProductInterest(productId: $productId, data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateLoanProductInterestRateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateLoanProductInterestRateMutation,
    TError,
    UpdateLoanProductInterestRateMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateLoanProductInterestRateMutation,
    TError,
    UpdateLoanProductInterestRateMutationVariables,
    TContext
  >(
    ['updateLoanProductInterestRate'],
    useAxios<UpdateLoanProductInterestRateMutation, UpdateLoanProductInterestRateMutationVariables>(
      UpdateLoanProductInterestRateDocument
    ),
    options
  );
export const EditLoanProductInterestRateDocument = `
    mutation editLoanProductInterestRate($id: ID!, $productId: ID!, $data: InterestRateSetupInput!) {
  settings {
    general {
      loanProducts {
        editProductInterest(id: $id, productId: $productId, data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useEditLoanProductInterestRateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditLoanProductInterestRateMutation,
    TError,
    EditLoanProductInterestRateMutationVariables,
    TContext
  >
) =>
  useMutation<
    EditLoanProductInterestRateMutation,
    TError,
    EditLoanProductInterestRateMutationVariables,
    TContext
  >(
    ['editLoanProductInterestRate'],
    useAxios<EditLoanProductInterestRateMutation, EditLoanProductInterestRateMutationVariables>(
      EditLoanProductInterestRateDocument
    ),
    options
  );
export const UpdateLoanProductPenaltyDocument = `
    mutation updateLoanProductPenalty($id: ID, $productId: ID!, $payload: PenaltyTypeInput!, $additionalData: ProductChargeAdditionalDataInput!) {
  settings {
    general {
      loanProducts {
        updatePenaltyCharge(
          id: $id
          productId: $productId
          payload: $payload
          additionalData: $additionalData
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateLoanProductPenaltyMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateLoanProductPenaltyMutation,
    TError,
    UpdateLoanProductPenaltyMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateLoanProductPenaltyMutation,
    TError,
    UpdateLoanProductPenaltyMutationVariables,
    TContext
  >(
    ['updateLoanProductPenalty'],
    useAxios<UpdateLoanProductPenaltyMutation, UpdateLoanProductPenaltyMutationVariables>(
      UpdateLoanProductPenaltyDocument
    ),
    options
  );
export const UpdateLoanProductProcessingChargeDocument = `
    mutation updateLoanProductProcessingCharge($id: ID, $productId: ID!, $payload: [ServiceType!]!, $additionalData: ProductChargeAdditionalDataInput!) {
  settings {
    general {
      loanProducts {
        updateProcessingCharge(
          id: $id
          productId: $productId
          payload: $payload
          additionalData: $additionalData
        ) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateLoanProductProcessingChargeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateLoanProductProcessingChargeMutation,
    TError,
    UpdateLoanProductProcessingChargeMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateLoanProductProcessingChargeMutation,
    TError,
    UpdateLoanProductProcessingChargeMutationVariables,
    TContext
  >(
    ['updateLoanProductProcessingCharge'],
    useAxios<
      UpdateLoanProductProcessingChargeMutation,
      UpdateLoanProductProcessingChargeMutationVariables
    >(UpdateLoanProductProcessingChargeDocument),
    options
  );
export const SetLoanGeneralSettingsDocument = `
    mutation setLoanGeneralSettings($emi: Boolean, $epi: Boolean, $flat: Boolean, $collateralList: [CollateralListInputData]) {
  settings {
    general {
      loan {
        general(
          data: {emi: $emi, epi: $epi, flat: $flat, collateralList: $collateralList}
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanGeneralSettingsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanGeneralSettingsMutation,
    TError,
    SetLoanGeneralSettingsMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanGeneralSettingsMutation,
    TError,
    SetLoanGeneralSettingsMutationVariables,
    TContext
  >(
    ['setLoanGeneralSettings'],
    useAxios<SetLoanGeneralSettingsMutation, SetLoanGeneralSettingsMutationVariables>(
      SetLoanGeneralSettingsDocument
    ),
    options
  );
export const SetLoanInsuranceSchemeDocument = `
    mutation setLoanInsuranceScheme($data: [LoanInsuranceSchemeInput]) {
  settings {
    general {
      loan {
        insuranceScheme(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanInsuranceSchemeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanInsuranceSchemeMutation,
    TError,
    SetLoanInsuranceSchemeMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanInsuranceSchemeMutation,
    TError,
    SetLoanInsuranceSchemeMutationVariables,
    TContext
  >(
    ['setLoanInsuranceScheme'],
    useAxios<SetLoanInsuranceSchemeMutation, SetLoanInsuranceSchemeMutationVariables>(
      SetLoanInsuranceSchemeDocument
    ),
    options
  );
export const SetProductTypeDocument = `
    mutation setProductType($productType: [LoanProductTypeInput], $productSubType: [LoanProductSubTypeInput]) {
  settings {
    general {
      loan {
        productType(
          data: {productTypes: $productType, productSubTypes: $productSubType}
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetProductTypeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetProductTypeMutation,
    TError,
    SetProductTypeMutationVariables,
    TContext
  >
) =>
  useMutation<SetProductTypeMutation, TError, SetProductTypeMutationVariables, TContext>(
    ['setProductType'],
    useAxios<SetProductTypeMutation, SetProductTypeMutationVariables>(SetProductTypeDocument),
    options
  );
export const SetLoanOrganizationRateDocument = `
    mutation setLoanOrganizationRate($data: InterestRateSetupInput!) {
  settings {
    general {
      loan {
        setOrganizationRate(data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanOrganizationRateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanOrganizationRateMutation,
    TError,
    SetLoanOrganizationRateMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanOrganizationRateMutation,
    TError,
    SetLoanOrganizationRateMutationVariables,
    TContext
  >(
    ['setLoanOrganizationRate'],
    useAxios<SetLoanOrganizationRateMutation, SetLoanOrganizationRateMutationVariables>(
      SetLoanOrganizationRateDocument
    ),
    options
  );
export const EditLoanOrganizationRateDocument = `
    mutation editLoanOrganizationRate($id: ID!, $data: InterestRateSetupInput!) {
  settings {
    general {
      loan {
        editOrganizationRate(id: $id, data: $data) {
          record
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useEditLoanOrganizationRateMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditLoanOrganizationRateMutation,
    TError,
    EditLoanOrganizationRateMutationVariables,
    TContext
  >
) =>
  useMutation<
    EditLoanOrganizationRateMutation,
    TError,
    EditLoanOrganizationRateMutationVariables,
    TContext
  >(
    ['editLoanOrganizationRate'],
    useAxios<EditLoanOrganizationRateMutation, EditLoanOrganizationRateMutationVariables>(
      EditLoanOrganizationRateDocument
    ),
    options
  );
export const AddGeneralMemberDocument = `
    mutation addGeneralMember($data: GeneralMemberInput!) {
  settings {
    general {
      KYM {
        general {
          generalMember(data: $data) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddGeneralMemberMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddGeneralMemberMutation,
    TError,
    AddGeneralMemberMutationVariables,
    TContext
  >
) =>
  useMutation<AddGeneralMemberMutation, TError, AddGeneralMemberMutationVariables, TContext>(
    ['addGeneralMember'],
    useAxios<AddGeneralMemberMutation, AddGeneralMemberMutationVariables>(AddGeneralMemberDocument),
    options
  );
export const UpsertNewOptionDocument = `
    mutation upsertNewOption($fieldId: ID!, $data: FormOptionUpsertInput!) {
  settings {
    form {
      option {
        upsert(fieldId: $fieldId, data: $data) {
          recordId
          record {
            id
            name
            enabled
            order
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertNewOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertNewOptionMutation,
    TError,
    UpsertNewOptionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertNewOptionMutation, TError, UpsertNewOptionMutationVariables, TContext>(
    ['upsertNewOption'],
    useAxios<UpsertNewOptionMutation, UpsertNewOptionMutationVariables>(UpsertNewOptionDocument),
    options
  );
export const DeleteOptionDocument = `
    mutation deleteOption($optionId: ID!) {
  settings {
    form {
      option {
        delete(id: $optionId) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteOptionMutation,
    TError,
    DeleteOptionMutationVariables,
    TContext
  >
) =>
  useMutation<DeleteOptionMutation, TError, DeleteOptionMutationVariables, TContext>(
    ['deleteOption'],
    useAxios<DeleteOptionMutation, DeleteOptionMutationVariables>(DeleteOptionDocument),
    options
  );
export const MoveOptionDocument = `
    mutation moveOption($optionId: ID!, $to: Int!) {
  settings {
    form {
      option {
        move(id: $optionId, to: $to) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMoveOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<MoveOptionMutation, TError, MoveOptionMutationVariables, TContext>
) =>
  useMutation<MoveOptionMutation, TError, MoveOptionMutationVariables, TContext>(
    ['moveOption'],
    useAxios<MoveOptionMutation, MoveOptionMutationVariables>(MoveOptionDocument),
    options
  );
export const ToggleFieldOtherOptionDocument = `
    mutation toggleFieldOtherOption($fieldId: ID!, $hasOtherField: Boolean) {
  settings {
    form {
      field {
        update(id: $fieldId, data: {hasOtherField: $hasOtherField}) {
          record {
            name
            hasOtherField
          }
        }
      }
    }
  }
}
    `;
export const useToggleFieldOtherOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ToggleFieldOtherOptionMutation,
    TError,
    ToggleFieldOtherOptionMutationVariables,
    TContext
  >
) =>
  useMutation<
    ToggleFieldOtherOptionMutation,
    TError,
    ToggleFieldOtherOptionMutationVariables,
    TContext
  >(
    ['toggleFieldOtherOption'],
    useAxios<ToggleFieldOtherOptionMutation, ToggleFieldOtherOptionMutationVariables>(
      ToggleFieldOtherOptionDocument
    ),
    options
  );
export const UpsertSectionOptionDocument = `
    mutation upsertSectionOption($sectionId: ID!, $data: FormFieldUpsertInput!) {
  settings {
    form {
      field {
        upsert(sectionId: $sectionId, data: $data) {
          recordId
          record {
            id
            name
            enabled
            fieldType
            order
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertSectionOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertSectionOptionMutation,
    TError,
    UpsertSectionOptionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertSectionOptionMutation, TError, UpsertSectionOptionMutationVariables, TContext>(
    ['upsertSectionOption'],
    useAxios<UpsertSectionOptionMutation, UpsertSectionOptionMutationVariables>(
      UpsertSectionOptionDocument
    ),
    options
  );
export const DeleteFieldDocument = `
    mutation deleteField($fieldId: ID!) {
  settings {
    form {
      field {
        delete(id: $fieldId) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<DeleteFieldMutation, TError, DeleteFieldMutationVariables, TContext>
) =>
  useMutation<DeleteFieldMutation, TError, DeleteFieldMutationVariables, TContext>(
    ['deleteField'],
    useAxios<DeleteFieldMutation, DeleteFieldMutationVariables>(DeleteFieldDocument),
    options
  );
export const MoveFieldDocument = `
    mutation moveField($fieldId: ID!, $to: Int!) {
  settings {
    form {
      field {
        move(id: $fieldId, to: $to) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMoveFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<MoveFieldMutation, TError, MoveFieldMutationVariables, TContext>
) =>
  useMutation<MoveFieldMutation, TError, MoveFieldMutationVariables, TContext>(
    ['moveField'],
    useAxios<MoveFieldMutation, MoveFieldMutationVariables>(MoveFieldDocument),
    options
  );
export const AddConditionOptionDocument = `
    mutation addConditionOption($fieldId: ID!, $dependsOn: [ID]!) {
  settings {
    form {
      field {
        condition(fieldId: $fieldId, dependsOn: $dependsOn) {
          recordId
          record {
            id
            dependsOn
            name
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddConditionOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddConditionOptionMutation,
    TError,
    AddConditionOptionMutationVariables,
    TContext
  >
) =>
  useMutation<AddConditionOptionMutation, TError, AddConditionOptionMutationVariables, TContext>(
    ['addConditionOption'],
    useAxios<AddConditionOptionMutation, AddConditionOptionMutationVariables>(
      AddConditionOptionDocument
    ),
    options
  );
export const AddFileSizeToSectionDocument = `
    mutation addFileSizeToSection($sectionId: ID!, $maxSize: Int!) {
  settings {
    form {
      maxSize(id: $sectionId, maxSize: $maxSize) {
        error {
          ...MutationError
        }
        record {
          ... on FormSection {
            id
            name
            maxSize
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddFileSizeToSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddFileSizeToSectionMutation,
    TError,
    AddFileSizeToSectionMutationVariables,
    TContext
  >
) =>
  useMutation<
    AddFileSizeToSectionMutation,
    TError,
    AddFileSizeToSectionMutationVariables,
    TContext
  >(
    ['addFileSizeToSection'],
    useAxios<AddFileSizeToSectionMutation, AddFileSizeToSectionMutationVariables>(
      AddFileSizeToSectionDocument
    ),
    options
  );
export const UpsertCustomSectionDocument = `
    mutation upsertCustomSection($data: FormSectionUpsertInput!) {
  settings {
    form {
      section {
        upsert(data: $data) {
          recordId
          error {
            ...MutationError
          }
          record {
            id
            name
            isCustom
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertCustomSectionMutation,
    TError,
    UpsertCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertCustomSectionMutation, TError, UpsertCustomSectionMutationVariables, TContext>(
    ['upsertCustomSection'],
    useAxios<UpsertCustomSectionMutation, UpsertCustomSectionMutationVariables>(
      UpsertCustomSectionDocument
    ),
    options
  );
export const UpsertCustomFieldDocument = `
    mutation upsertCustomField($data: FormFieldUpsertInput!) {
  settings {
    form {
      field {
        upsert(data: $data) {
          record {
            id
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertCustomFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertCustomFieldMutation,
    TError,
    UpsertCustomFieldMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertCustomFieldMutation, TError, UpsertCustomFieldMutationVariables, TContext>(
    ['upsertCustomField'],
    useAxios<UpsertCustomFieldMutation, UpsertCustomFieldMutationVariables>(
      UpsertCustomFieldDocument
    ),
    options
  );
export const DeleteCustomSectionDocument = `
    mutation deleteCustomSection($id: ID!) {
  settings {
    form {
      section {
        delete(id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCustomSectionMutation,
    TError,
    DeleteCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<DeleteCustomSectionMutation, TError, DeleteCustomSectionMutationVariables, TContext>(
    ['deleteCustomSection'],
    useAxios<DeleteCustomSectionMutation, DeleteCustomSectionMutationVariables>(
      DeleteCustomSectionDocument
    ),
    options
  );
export const DeleteCustomSectionFieldDocument = `
    mutation deleteCustomSectionField($id: ID!) {
  settings {
    form {
      field {
        delete(id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteCustomSectionFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCustomSectionFieldMutation,
    TError,
    DeleteCustomSectionFieldMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteCustomSectionFieldMutation,
    TError,
    DeleteCustomSectionFieldMutationVariables,
    TContext
  >(
    ['deleteCustomSectionField'],
    useAxios<DeleteCustomSectionFieldMutation, DeleteCustomSectionFieldMutationVariables>(
      DeleteCustomSectionFieldDocument
    ),
    options
  );
export const UpdateCustomSectionDocument = `
    mutation updateCustomSection($id: ID!, $data: FormSectionUpdateInput!) {
  settings {
    form {
      section {
        update(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
          record {
            id
            name
            isCustom
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateCustomSectionMutation,
    TError,
    UpdateCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateCustomSectionMutation, TError, UpdateCustomSectionMutationVariables, TContext>(
    ['updateCustomSection'],
    useAxios<UpdateCustomSectionMutation, UpdateCustomSectionMutationVariables>(
      UpdateCustomSectionDocument
    ),
    options
  );
export const UpdateCustomSectionFieldDocument = `
    mutation updateCustomSectionField($id: ID!, $data: FormFieldUpdateInput!) {
  settings {
    form {
      field {
        update(id: $id, data: $data) {
          record {
            id
          }
        }
      }
    }
  }
}
    `;
export const useUpdateCustomSectionFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateCustomSectionFieldMutation,
    TError,
    UpdateCustomSectionFieldMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateCustomSectionFieldMutation,
    TError,
    UpdateCustomSectionFieldMutationVariables,
    TContext
  >(
    ['updateCustomSectionField'],
    useAxios<UpdateCustomSectionFieldMutation, UpdateCustomSectionFieldMutationVariables>(
      UpdateCustomSectionFieldDocument
    ),
    options
  );
export const UpdateDeclarationDocument = `
    mutation updateDeclaration($data: DeclarationInput!) {
  settings {
    declaration {
      update(data: $data) {
        record {
          content
        }
      }
    }
  }
}
    `;
export const useUpdateDeclarationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateDeclarationMutation,
    TError,
    UpdateDeclarationMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateDeclarationMutation, TError, UpdateDeclarationMutationVariables, TContext>(
    ['updateDeclaration'],
    useAxios<UpdateDeclarationMutation, UpdateDeclarationMutationVariables>(
      UpdateDeclarationDocument
    ),
    options
  );
export const SetOrganizationInitialSetupDocument = `
    mutation setOrganizationInitialSetup($data: OrganizationInput!) {
  settings {
    general {
      organization {
        initialSetup(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetOrganizationInitialSetupMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetOrganizationInitialSetupMutation,
    TError,
    SetOrganizationInitialSetupMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetOrganizationInitialSetupMutation,
    TError,
    SetOrganizationInitialSetupMutationVariables,
    TContext
  >(
    ['setOrganizationInitialSetup'],
    useAxios<SetOrganizationInitialSetupMutation, SetOrganizationInitialSetupMutationVariables>(
      SetOrganizationInitialSetupDocument
    ),
    options
  );
export const SetWithdrawSlipPrintPreferenceDocument = `
    mutation setWithdrawSlipPrintPreference($data: PrintPreferenceInput) {
  settings {
    general {
      printPreference {
        add(data: $data) {
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetWithdrawSlipPrintPreferenceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetWithdrawSlipPrintPreferenceMutation,
    TError,
    SetWithdrawSlipPrintPreferenceMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetWithdrawSlipPrintPreferenceMutation,
    TError,
    SetWithdrawSlipPrintPreferenceMutationVariables,
    TContext
  >(
    ['setWithdrawSlipPrintPreference'],
    useAxios<
      SetWithdrawSlipPrintPreferenceMutation,
      SetWithdrawSlipPrintPreferenceMutationVariables
    >(SetWithdrawSlipPrintPreferenceDocument),
    options
  );
export const GetWithdrawSlipPrintPreferenceDocument = `
    query getWithdrawSlipPrintPreference {
  settings {
    general {
      printPreference {
        get {
          data {
            isSlipStandardActive
            slipSizeStandard
            slipSizeCustom {
              height
              width
            }
            blockOne {
              top
              left
            }
            blockTwo {
              top
              left
            }
            blockThree {
              top
              left
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetWithdrawSlipPrintPreferenceQuery = <
  TData = GetWithdrawSlipPrintPreferenceQuery,
  TError = unknown
>(
  variables?: GetWithdrawSlipPrintPreferenceQueryVariables,
  options?: UseQueryOptions<GetWithdrawSlipPrintPreferenceQuery, TError, TData>
) =>
  useQuery<GetWithdrawSlipPrintPreferenceQuery, TError, TData>(
    variables === undefined
      ? ['getWithdrawSlipPrintPreference']
      : ['getWithdrawSlipPrintPreference', variables],
    useAxios<GetWithdrawSlipPrintPreferenceQuery, GetWithdrawSlipPrintPreferenceQueryVariables>(
      GetWithdrawSlipPrintPreferenceDocument
    ).bind(null, variables),
    options
  );
export const UpdatePearlsReportFormulaDocument = `
    mutation updatePearlsReportFormula($indicatorId: String!, $data: PearlsConfigurationInput) {
  settings {
    general {
      reports {
        pearls {
          update(indicatorId: $indicatorId, data: $data) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdatePearlsReportFormulaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdatePearlsReportFormulaMutation,
    TError,
    UpdatePearlsReportFormulaMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdatePearlsReportFormulaMutation,
    TError,
    UpdatePearlsReportFormulaMutationVariables,
    TContext
  >(
    ['updatePearlsReportFormula'],
    useAxios<UpdatePearlsReportFormulaMutation, UpdatePearlsReportFormulaMutationVariables>(
      UpdatePearlsReportFormulaDocument
    ),
    options
  );
export const UpdateCopomisReportFormulaDocument = `
    mutation updateCOPOMISReportFormula($indicatorId: String!, $data: CopomisConfigurationInput) {
  settings {
    general {
      reports {
        copomis {
          update(data: $data, indicatorId: $indicatorId) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateCopomisReportFormulaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateCopomisReportFormulaMutation,
    TError,
    UpdateCopomisReportFormulaMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateCopomisReportFormulaMutation,
    TError,
    UpdateCopomisReportFormulaMutationVariables,
    TContext
  >(
    ['updateCOPOMISReportFormula'],
    useAxios<UpdateCopomisReportFormulaMutation, UpdateCopomisReportFormulaMutationVariables>(
      UpdateCopomisReportFormulaDocument
    ),
    options
  );
export const SetSettingsShareBonusDocument = `
    mutation setSettingsShareBonus($data: ShareBonusSettingsInput) {
  settings {
    general {
      share {
        add {
          bonus(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareBonusMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareBonusMutation,
    TError,
    SetSettingsShareBonusMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareBonusMutation,
    TError,
    SetSettingsShareBonusMutationVariables,
    TContext
  >(
    ['setSettingsShareBonus'],
    useAxios<SetSettingsShareBonusMutation, SetSettingsShareBonusMutationVariables>(
      SetSettingsShareBonusDocument
    ),
    options
  );
export const SetSettingsShareDividendDocument = `
    mutation setSettingsShareDividend($data: ShareDividendSettingsInput) {
  settings {
    general {
      share {
        add {
          dividend(data: $data) {
            dividend {
              distributionCondition
              dividendTransferTreatment
              accountForFractionalDividends
              accountForShareDividends
              organizationFundForDividends
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareDividendMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareDividendMutation,
    TError,
    SetSettingsShareDividendMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareDividendMutation,
    TError,
    SetSettingsShareDividendMutationVariables,
    TContext
  >(
    ['setSettingsShareDividend'],
    useAxios<SetSettingsShareDividendMutation, SetSettingsShareDividendMutationVariables>(
      SetSettingsShareDividendDocument
    ),
    options
  );
export const SetSettingsShareIssueChargesDocument = `
    mutation setSettingsShareIssueCharges($data: ShareIssueChargesInput) {
  settings {
    general {
      share {
        add {
          shareIssueCharges(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareIssueChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareIssueChargesMutation,
    TError,
    SetSettingsShareIssueChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareIssueChargesMutation,
    TError,
    SetSettingsShareIssueChargesMutationVariables,
    TContext
  >(
    ['setSettingsShareIssueCharges'],
    useAxios<SetSettingsShareIssueChargesMutation, SetSettingsShareIssueChargesMutationVariables>(
      SetSettingsShareIssueChargesDocument
    ),
    options
  );
export const SetSettingsShareReturnChargesDocument = `
    mutation setSettingsShareReturnCharges($data: ShareReturnChargesInput) {
  settings {
    general {
      share {
        add {
          shareReturnCharges(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareReturnChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareReturnChargesMutation,
    TError,
    SetSettingsShareReturnChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareReturnChargesMutation,
    TError,
    SetSettingsShareReturnChargesMutationVariables,
    TContext
  >(
    ['setSettingsShareReturnCharges'],
    useAxios<SetSettingsShareReturnChargesMutation, SetSettingsShareReturnChargesMutationVariables>(
      SetSettingsShareReturnChargesDocument
    ),
    options
  );
export const SetSettingsShareGeneralDocument = `
    mutation setSettingsShareGeneral($data: ShareSettingsGeneralInput) {
  settings {
    general {
      share {
        add {
          general(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareGeneralMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareGeneralMutation,
    TError,
    SetSettingsShareGeneralMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareGeneralMutation,
    TError,
    SetSettingsShareGeneralMutationVariables,
    TContext
  >(
    ['setSettingsShareGeneral'],
    useAxios<SetSettingsShareGeneralMutation, SetSettingsShareGeneralMutationVariables>(
      SetSettingsShareGeneralDocument
    ),
    options
  );
export const SetSettingsShareTransferDocument = `
    mutation setSettingsShareTransfer($data: ShareTransferSettingsInput) {
  settings {
    general {
      share {
        add {
          transfer(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareTransferMutation,
    TError,
    SetSettingsShareTransferMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareTransferMutation,
    TError,
    SetSettingsShareTransferMutationVariables,
    TContext
  >(
    ['setSettingsShareTransfer'],
    useAxios<SetSettingsShareTransferMutation, SetSettingsShareTransferMutationVariables>(
      SetSettingsShareTransferDocument
    ),
    options
  );
export const SetServiceCenterCashTransferDocument = `
    mutation setServiceCenterCashTransfer($data: ServiceCentreCashTransferInput!) {
  transaction {
    serviceCentreCashTransfer(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetServiceCenterCashTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetServiceCenterCashTransferMutation,
    TError,
    SetServiceCenterCashTransferMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetServiceCenterCashTransferMutation,
    TError,
    SetServiceCenterCashTransferMutationVariables,
    TContext
  >(
    ['setServiceCenterCashTransfer'],
    useAxios<SetServiceCenterCashTransferMutation, SetServiceCenterCashTransferMutationVariables>(
      SetServiceCenterCashTransferDocument
    ),
    options
  );
export const SetCashInTransitTransferDocument = `
    mutation setCashInTransitTransfer($data: CashInTransitInput!) {
  transaction {
    cashInTransit {
      new(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetCashInTransitTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCashInTransitTransferMutation,
    TError,
    SetCashInTransitTransferMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetCashInTransitTransferMutation,
    TError,
    SetCashInTransitTransferMutationVariables,
    TContext
  >(
    ['setCashInTransitTransfer'],
    useAxios<SetCashInTransitTransferMutation, SetCashInTransitTransferMutationVariables>(
      SetCashInTransitTransferDocument
    ),
    options
  );
export const ApproveCashInTransitTransferDocument = `
    mutation approveCashInTransitTransfer($requestId: String!) {
  transaction {
    cashInTransit {
      approve(requestId: $requestId) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveCashInTransitTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApproveCashInTransitTransferMutation,
    TError,
    ApproveCashInTransitTransferMutationVariables,
    TContext
  >
) =>
  useMutation<
    ApproveCashInTransitTransferMutation,
    TError,
    ApproveCashInTransitTransferMutationVariables,
    TContext
  >(
    ['approveCashInTransitTransfer'],
    useAxios<ApproveCashInTransitTransferMutation, ApproveCashInTransitTransferMutationVariables>(
      ApproveCashInTransitTransferDocument
    ),
    options
  );
export const SetBankTransferDocument = `
    mutation setBankTransfer($data: TellerBankTransferInput) {
  transaction {
    tellerBankTransfer {
      new(data: $data) {
        recordId
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBankTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetBankTransferMutation,
    TError,
    SetBankTransferMutationVariables,
    TContext
  >
) =>
  useMutation<SetBankTransferMutation, TError, SetBankTransferMutationVariables, TContext>(
    ['setBankTransfer'],
    useAxios<SetBankTransferMutation, SetBankTransferMutationVariables>(SetBankTransferDocument),
    options
  );
export const SetSettingsUserDataDocument = `
    mutation setSettingsUserData($id: ID!, $data: MyraUserInput) {
  settings {
    myraUser {
      add(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetSettingsUserDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsUserDataMutation,
    TError,
    SetSettingsUserDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetSettingsUserDataMutation, TError, SetSettingsUserDataMutationVariables, TContext>(
    ['setSettingsUserData'],
    useAxios<SetSettingsUserDataMutation, SetSettingsUserDataMutationVariables>(
      SetSettingsUserDataDocument
    ),
    options
  );
export const SetPreferenceDocument = `
    mutation setPreference($id: ID!, $data: UserPreferenceInput!) {
  user {
    preference {
      update(id: $id, data: $data) {
        recordId
        record {
          language
          languageCode
          date
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetPreferenceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetPreferenceMutation,
    TError,
    SetPreferenceMutationVariables,
    TContext
  >
) =>
  useMutation<SetPreferenceMutation, TError, SetPreferenceMutationVariables, TContext>(
    ['setPreference'],
    useAxios<SetPreferenceMutation, SetPreferenceMutationVariables>(SetPreferenceDocument),
    options
  );
export const SetValuatorDocument = `
    mutation setValuator($id: ID!, $data: ValuatorInput) {
  settings {
    general {
      valuator {
        add(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetValuatorMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetValuatorMutation, TError, SetValuatorMutationVariables, TContext>
) =>
  useMutation<SetValuatorMutation, TError, SetValuatorMutationVariables, TContext>(
    ['setValuator'],
    useAxios<SetValuatorMutation, SetValuatorMutationVariables>(SetValuatorDocument),
    options
  );
export const AddSharePurchaseDocument = `
    mutation addSharePurchase($data: SharePurchaseInput!) {
  share {
    purchase(data: $data) {
      recordId
      record {
        id
        transactionId
        createdAt
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        noOfShare
        balance
        shareAmount
        shareCertificateCharge
        otherCharge
        extraFee {
          name
          value
        }
        totalAmount
        paymentMode
        bankId
        voucherNumber
        accountId
        memberId
        member {
          code
          name
        }
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddSharePurchaseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddSharePurchaseMutation,
    TError,
    AddSharePurchaseMutationVariables,
    TContext
  >
) =>
  useMutation<AddSharePurchaseMutation, TError, AddSharePurchaseMutationVariables, TContext>(
    ['addSharePurchase'],
    useAxios<AddSharePurchaseMutation, AddSharePurchaseMutationVariables>(AddSharePurchaseDocument),
    options
  );
export const AddShareReturnDocument = `
    mutation addShareReturn($data: ShareReturnInput!) {
  share {
    return(data: $data) {
      recordId
      record {
        id
        transactionId
        createdAt
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        noOfShare
        balance
        shareAmount
        shareCertificateCharge
        otherCharge
        extraFee {
          name
          value
        }
        totalAmount
        paymentMode
        bankId
        voucherNumber
        accountId
        memberId
        member {
          code
          name
        }
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddShareReturnMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddShareReturnMutation,
    TError,
    AddShareReturnMutationVariables,
    TContext
  >
) =>
  useMutation<AddShareReturnMutation, TError, AddShareReturnMutationVariables, TContext>(
    ['addShareReturn'],
    useAxios<AddShareReturnMutation, AddShareReturnMutationVariables>(AddShareReturnDocument),
    options
  );
export const SetDepositDataDocument = `
    mutation setDepositData($data: DepositInput!) {
  transaction {
    deposit(data: $data) {
      recordId
      record {
        transactionID
        date
        amount
        fine
        rebate
        discount
        paymentMode
        depositedBy
        createdAt
        memberName
        memberId
        accountId
        accountName
        depositedOther
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDepositDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositDataMutation,
    TError,
    SetDepositDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositDataMutation, TError, SetDepositDataMutationVariables, TContext>(
    ['setDepositData'],
    useAxios<SetDepositDataMutation, SetDepositDataMutationVariables>(SetDepositDataDocument),
    options
  );
export const SetBulkDepositDataDocument = `
    mutation setBulkDepositData($data: BulkDepositInput) {
  transaction {
    bulkDeposit(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBulkDepositDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetBulkDepositDataMutation,
    TError,
    SetBulkDepositDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetBulkDepositDataMutation, TError, SetBulkDepositDataMutationVariables, TContext>(
    ['setBulkDepositData'],
    useAxios<SetBulkDepositDataMutation, SetBulkDepositDataMutationVariables>(
      SetBulkDepositDataDocument
    ),
    options
  );
export const SetWithdrawDataDocument = `
    mutation setWithdrawData($data: WithdrawInput!) {
  transaction {
    withdraw(data: $data) {
      recordId
      record {
        transactionID
        date
        accountId
        accountName
        memberId
        memberName
        createdAt
        amount
        fine
        totalAmount
        withdrawnBy
        withdrawOther
        withdrawWith
        paymentMode
        slipNo
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetWithdrawDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetWithdrawDataMutation,
    TError,
    SetWithdrawDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetWithdrawDataMutation, TError, SetWithdrawDataMutationVariables, TContext>(
    ['setWithdrawData'],
    useAxios<SetWithdrawDataMutation, SetWithdrawDataMutationVariables>(SetWithdrawDataDocument),
    options
  );
export const SetAccountTransferDataDocument = `
    mutation setAccountTransferData($data: TransferInput!) {
  transaction {
    transfer(data: $data) {
      recordId
      record {
        totalAmount
        amount
        createdAt
        date
        id
        remarks
        fine
        payeeNumber
        receiverAccountId
        receiverAccountName
        receiverMemberId
        receiverMemberName
        senderAccountId
        senderAccountName
        senderMemberId
        senderMemberName
        transactionMode
        withdrawWith
        transferType
        slipNo
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountTransferDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountTransferDataMutation,
    TError,
    SetAccountTransferDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountTransferDataMutation,
    TError,
    SetAccountTransferDataMutationVariables,
    TContext
  >(
    ['setAccountTransferData'],
    useAxios<SetAccountTransferDataMutation, SetAccountTransferDataMutationVariables>(
      SetAccountTransferDataDocument
    ),
    options
  );
export const SetAccountForgiveInstallmentDataDocument = `
    mutation setAccountForgiveInstallmentData($id: ID!, $installmentDates: [String!]!) {
  account {
    forgiveInstallment(id: $id, installmentDate: $installmentDates) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountForgiveInstallmentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountForgiveInstallmentDataMutation,
    TError,
    SetAccountForgiveInstallmentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountForgiveInstallmentDataMutation,
    TError,
    SetAccountForgiveInstallmentDataMutationVariables,
    TContext
  >(
    ['setAccountForgiveInstallmentData'],
    useAxios<
      SetAccountForgiveInstallmentDataMutation,
      SetAccountForgiveInstallmentDataMutationVariables
    >(SetAccountForgiveInstallmentDataDocument),
    options
  );
export const SetEndOfDayDataDocument = `
    mutation setEndOfDayData($option: EODOption) {
  transaction {
    endOfDay(option: $option) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEndOfDayDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEndOfDayDataMutation,
    TError,
    SetEndOfDayDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetEndOfDayDataMutation, TError, SetEndOfDayDataMutationVariables, TContext>(
    ['setEndOfDayData'],
    useAxios<SetEndOfDayDataMutation, SetEndOfDayDataMutationVariables>(SetEndOfDayDataDocument),
    options
  );
export const SetTellerTransferDataDocument = `
    mutation setTellerTransferData($data: TellerTransferInput!) {
  transaction {
    tellerTransfer(data: $data) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetTellerTransferDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetTellerTransferDataMutation,
    TError,
    SetTellerTransferDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetTellerTransferDataMutation,
    TError,
    SetTellerTransferDataMutationVariables,
    TContext
  >(
    ['setTellerTransferData'],
    useAxios<SetTellerTransferDataMutation, SetTellerTransferDataMutationVariables>(
      SetTellerTransferDataDocument
    ),
    options
  );
export const SetTellerTransferActionDocument = `
    mutation setTellerTransferAction($requestId: ID!, $action: TransferRequestAction!, $declineReason: String) {
  transaction {
    tellerTransferAction(
      requestId: $requestId
      action: $action
      declineReason: $declineReason
    ) {
      record
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetTellerTransferActionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetTellerTransferActionMutation,
    TError,
    SetTellerTransferActionMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetTellerTransferActionMutation,
    TError,
    SetTellerTransferActionMutationVariables,
    TContext
  >(
    ['setTellerTransferAction'],
    useAxios<SetTellerTransferActionMutation, SetTellerTransferActionMutationVariables>(
      SetTellerTransferActionDocument
    ),
    options
  );
export const ReadyBranchEodDocument = `
    mutation readyBranchEOD($revertBranchId: ID) {
  transaction {
    readyBranchEOD(revertBranchId: $revertBranchId)
  }
}
    `;
export const useReadyBranchEodMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ReadyBranchEodMutation,
    TError,
    ReadyBranchEodMutationVariables,
    TContext
  >
) =>
  useMutation<ReadyBranchEodMutation, TError, ReadyBranchEodMutationVariables, TContext>(
    ['readyBranchEOD'],
    useAxios<ReadyBranchEodMutation, ReadyBranchEodMutationVariables>(ReadyBranchEodDocument),
    options
  );
export const SetStrTransactionActionDocument = `
    mutation setSTRTransactionAction($data: StrTransactionActionInput!) {
  transaction {
    strTransactionAction(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetStrTransactionActionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetStrTransactionActionMutation,
    TError,
    SetStrTransactionActionMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetStrTransactionActionMutation,
    TError,
    SetStrTransactionActionMutationVariables,
    TContext
  >(
    ['setSTRTransactionAction'],
    useAxios<SetStrTransactionActionMutation, SetStrTransactionActionMutationVariables>(
      SetStrTransactionActionDocument
    ),
    options
  );
export const ApproveIbtDocument = `
    mutation approveIBT($requestId: ID!, $data: JournalVoucherInput!) {
  transaction {
    approveIBT(requestId: $requestId, data: $data) {
      recordId
      record {
        transactionId
        creatorId
        creatorName
        reference
        date
        note
        entries {
          name
          value
        }
        paymentMode
        totalAmount
        createdAt
        glTransaction {
          ledgerId
          account
          serviceCentreId
          serviceCenter
          debit
          credit
        }
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveIbtMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<ApproveIbtMutation, TError, ApproveIbtMutationVariables, TContext>
) =>
  useMutation<ApproveIbtMutation, TError, ApproveIbtMutationVariables, TContext>(
    ['approveIBT'],
    useAxios<ApproveIbtMutation, ApproveIbtMutationVariables>(ApproveIbtDocument),
    options
  );
export const RevertTransactionDocument = `
    mutation revertTransaction($journalId: ID!) {
  transaction {
    revertTransaction(journalId: $journalId) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useRevertTransactionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    RevertTransactionMutation,
    TError,
    RevertTransactionMutationVariables,
    TContext
  >
) =>
  useMutation<RevertTransactionMutation, TError, RevertTransactionMutationVariables, TContext>(
    ['revertTransaction'],
    useAxios<RevertTransactionMutation, RevertTransactionMutationVariables>(
      RevertTransactionDocument
    ),
    options
  );
export const BulkTransferDocument = `
    mutation bulkTransfer($data: BulkTransferInput!) {
  transaction {
    bulkTransfer(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useBulkTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    BulkTransferMutation,
    TError,
    BulkTransferMutationVariables,
    TContext
  >
) =>
  useMutation<BulkTransferMutation, TError, BulkTransferMutationVariables, TContext>(
    ['bulkTransfer'],
    useAxios<BulkTransferMutation, BulkTransferMutationVariables>(BulkTransferDocument),
    options
  );
export const RestrictAccountingTransactionDocument = `
    mutation restrictAccountingTransaction($id: ID, $data: RestrictTransactionInput!) {
  transaction {
    restrictAccounting {
      restrict(id: $id, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useRestrictAccountingTransactionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    RestrictAccountingTransactionMutation,
    TError,
    RestrictAccountingTransactionMutationVariables,
    TContext
  >
) =>
  useMutation<
    RestrictAccountingTransactionMutation,
    TError,
    RestrictAccountingTransactionMutationVariables,
    TContext
  >(
    ['restrictAccountingTransaction'],
    useAxios<RestrictAccountingTransactionMutation, RestrictAccountingTransactionMutationVariables>(
      RestrictAccountingTransactionDocument
    ),
    options
  );
export const DisableAccountingTransactionRestrictDocument = `
    mutation disableAccountingTransactionRestrict($id: ID!) {
  transaction {
    restrictAccounting {
      disable(id: $id) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDisableAccountingTransactionRestrictMutation = <
  TError = unknown,
  TContext = unknown
>(
  options?: UseMutationOptions<
    DisableAccountingTransactionRestrictMutation,
    TError,
    DisableAccountingTransactionRestrictMutationVariables,
    TContext
  >
) =>
  useMutation<
    DisableAccountingTransactionRestrictMutation,
    TError,
    DisableAccountingTransactionRestrictMutationVariables,
    TContext
  >(
    ['disableAccountingTransactionRestrict'],
    useAxios<
      DisableAccountingTransactionRestrictMutation,
      DisableAccountingTransactionRestrictMutationVariables
    >(DisableAccountingTransactionRestrictDocument),
    options
  );
export const YearEndSettlementDocument = `
    mutation yearEndSettlement($destinationCOALeaf: ID!) {
  transaction {
    yearEndSettlement(destinationCOALeaf: $destinationCOALeaf) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useYearEndSettlementMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    YearEndSettlementMutation,
    TError,
    YearEndSettlementMutationVariables,
    TContext
  >
) =>
  useMutation<YearEndSettlementMutation, TError, YearEndSettlementMutationVariables, TContext>(
    ['yearEndSettlement'],
    useAxios<YearEndSettlementMutation, YearEndSettlementMutationVariables>(
      YearEndSettlementDocument
    ),
    options
  );
export const GetAccountMemberListDocument = `
    query getAccountMemberList($filter: Filter, $pagination: Pagination) {
  members {
    list(pagination: $pagination, filter: $filter) {
      totalCount
      edges {
        node {
          id
          name
          code
          type
          address {
            state
            district
            localGovernment
            wardNo
            locality
          }
          contact
          createdAt
          dateJoined
        }
        cursor
      }
      pageInfo {
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAccountMemberListQuery = <TData = GetAccountMemberListQuery, TError = unknown>(
  variables?: GetAccountMemberListQueryVariables,
  options?: UseQueryOptions<GetAccountMemberListQuery, TError, TData>
) =>
  useQuery<GetAccountMemberListQuery, TError, TData>(
    variables === undefined ? ['getAccountMemberList'] : ['getAccountMemberList', variables],
    useAxios<GetAccountMemberListQuery, GetAccountMemberListQueryVariables>(
      GetAccountMemberListDocument
    ).bind(null, variables),
    options
  );
export const GetProductListDocument = `
    query getProductList($memberId: ID!) {
  settings {
    general {
      depositProduct {
        getProductList(memberId: $memberId) {
          allowed {
            id
            productName
            nature
          }
          notAllowed {
            data {
              id
              productName
              nature
            }
            error
          }
        }
      }
    }
  }
}
    `;
export const useGetProductListQuery = <TData = GetProductListQuery, TError = unknown>(
  variables: GetProductListQueryVariables,
  options?: UseQueryOptions<GetProductListQuery, TError, TData>
) =>
  useQuery<GetProductListQuery, TError, TData>(
    ['getProductList', variables],
    useAxios<GetProductListQuery, GetProductListQueryVariables>(GetProductListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAccountOpenProductDetailsDocument = `
    query getAccountOpenProductDetails($id: ID!) {
  settings {
    general {
      depositProduct {
        formState(id: $id) {
          data {
            productName
            nature
            productCode {
              prefix
              initialNo
            }
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            ethnicity
            occupation
            isMandatorySaving
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            depositAmount {
              minAmount
              maxAmount
            }
            depositFrequency
            penalty
            penaltyData {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate
            rebateData {
              dayBeforeInstallmentDate
              noOfInstallment
              rebateAmount
              rebateRate
              rebateLedgerMapping
            }
            tenureUnit
            isTenureApplicable
            minTenureUnitNumber
            maxTenureUnitNumber
            balanceLimit {
              minAmount
              maxAmount
              avgAmount
            }
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              additionalRate
            }
            ladderRate
            ladderRateData {
              type
              amount
              rate
            }
            postingFrequency
            maxPostingFreqDifference
            noOftransactionAllowed
            accountType
            serviceCharge {
              serviceName
              ledgerName
              amount
            }
            accountCloseCharge {
              serviceName
              ledgerName
              amount
            }
            alternativeChannelCharge {
              serviceName
              ledgerName
              amount
            }
            atmCharge {
              serviceName
              ledgerName
              amount
            }
            dormantSetup {
              duration
              condition
            }
            withdrawAmountLimit {
              minAmount
              maxAmount
              avgAmount
            }
            autoOpen
            allowLoan
            chequeIssue
            chequeCharge {
              serviceName
              ledgerName
              amount
            }
            percentageOfDeposit
            alternativeChannels
            atmFacility
            isForMinors
            supportMultiple
            staffProduct
            withdrawRestricted
            specifyWithdrawRestriction
            wealthBuildingProduct
            individualDocuments
            institutionDocuments
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            productPremiumInterest
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductDetailsQuery = <
  TData = GetAccountOpenProductDetailsQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductDetailsQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductDetailsQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductDetailsQuery, TError, TData>(
    ['getAccountOpenProductDetails', variables],
    useAxios<GetAccountOpenProductDetailsQuery, GetAccountOpenProductDetailsQueryVariables>(
      GetAccountOpenProductDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenEditDataDocument = `
    query getAccountOpenEditData($id: ID!) {
  account {
    formState(id: $id) {
      data {
        memberId
        productId
        accountName
        minor
        tenure
        interestDoc {
          identifier
          url
        }
        tenureNumber
        initialDepositAmount
        defaultAmountDepositAccountName
        interestRate
        interestAuthority
        installmentAmount
        depositFrequencyWeekly
        depositFrequencyMonthly
        depositFrequencyDay
        depositFrequencyFrequencyDay
        depositFrequencyDayOfWeek
        serviceCharge {
          name
          amount
        }
        depositFrequencyYearlyMonth
        depositFrequencyYearlyDay
        mobileBanking
        eBanking
        atmFacility
        smsBanking
        chequeFacility
        agentId
      }
    }
  }
}
    `;
export const useGetAccountOpenEditDataQuery = <
  TData = GetAccountOpenEditDataQuery,
  TError = unknown
>(
  variables: GetAccountOpenEditDataQueryVariables,
  options?: UseQueryOptions<GetAccountOpenEditDataQuery, TError, TData>
) =>
  useQuery<GetAccountOpenEditDataQuery, TError, TData>(
    ['getAccountOpenEditData', variables],
    useAxios<GetAccountOpenEditDataQuery, GetAccountOpenEditDataQueryVariables>(
      GetAccountOpenEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTableListDocument = `
    query getAccountTableList($paginate: Pagination, $filter: Filter) {
  account {
    list(paginate: $paginate, filter: $filter) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      edges {
        node {
          id
          objState
          createdAt
          accountName
          createdBy {
            id
          }
          modifiedAt
          modifiedBy {
            id
          }
          installmentAmount
          balance
          availableBalance
          accountOpenedDate
          lastTransactionDate
          accountExpiryDate
          closedAt
          member {
            id
            name
            profilePicUrl
            profilePic
            signaturePicUrl
            address {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            contact
            dateJoined
          }
          overDrawnBalance
          guaranteedAmount
          interestAccured
          interestTax
          product {
            id
            productCode
            productName
            nature
            minimumBalance
            isMandatorySaving
            withdrawRestricted
            accountClosingCharge {
              serviceName
              ledgerName
              amount
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            interest
          }
          dues {
            fine
            totalDue
            dueInstallments
          }
          prematurePenalty
          installmentAmount
        }
      }
    }
  }
}
    `;
export const useGetAccountTableListQuery = <TData = GetAccountTableListQuery, TError = unknown>(
  variables?: GetAccountTableListQueryVariables,
  options?: UseQueryOptions<GetAccountTableListQuery, TError, TData>
) =>
  useQuery<GetAccountTableListQuery, TError, TData>(
    variables === undefined ? ['getAccountTableList'] : ['getAccountTableList', variables],
    useAxios<GetAccountTableListQuery, GetAccountTableListQueryVariables>(
      GetAccountTableListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTableListMinimalDocument = `
    query getAccountTableListMinimal($paginate: Pagination, $filter: Filter) {
  account {
    list(paginate: $paginate, filter: $filter) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      edges {
        node {
          id
          objState
          createdAt
          accountName
          balance
          accountOpenedDate
          accountExpiryDate
          closedAt
          member {
            id
            name
            code
            profilePicUrl
          }
          product {
            id
            productCode
            productName
            nature
            interest
            isMandatorySaving
          }
          installmentAmount
        }
      }
    }
  }
}
    `;
export const useGetAccountTableListMinimalQuery = <
  TData = GetAccountTableListMinimalQuery,
  TError = unknown
>(
  variables?: GetAccountTableListMinimalQueryVariables,
  options?: UseQueryOptions<GetAccountTableListMinimalQuery, TError, TData>
) =>
  useQuery<GetAccountTableListMinimalQuery, TError, TData>(
    variables === undefined
      ? ['getAccountTableListMinimal']
      : ['getAccountTableListMinimal', variables],
    useAxios<GetAccountTableListMinimalQuery, GetAccountTableListMinimalQueryVariables>(
      GetAccountTableListMinimalDocument
    ).bind(null, variables),
    options
  );
export const GetAccountDocumentsListDocument = `
    query getAccountDocumentsList($subscriptionId: String!) {
  document {
    listSubscriptionDocuments(subscriptionId: $subscriptionId) {
      data {
        fieldId
        docData {
          identifier
          url
        }
      }
    }
  }
}
    `;
export const useGetAccountDocumentsListQuery = <
  TData = GetAccountDocumentsListQuery,
  TError = unknown
>(
  variables: GetAccountDocumentsListQueryVariables,
  options?: UseQueryOptions<GetAccountDocumentsListQuery, TError, TData>
) =>
  useQuery<GetAccountDocumentsListQuery, TError, TData>(
    ['getAccountDocumentsList', variables],
    useAxios<GetAccountDocumentsListQuery, GetAccountDocumentsListQueryVariables>(
      GetAccountDocumentsListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenProductCriteriaDocument = `
    query getAccountOpenProductCriteria($productId: ID!) {
  settings {
    general {
      depositProduct {
        getProductCriteria(productId: $productId) {
          data {
            gender
            minAge
            maxAge
            ethnicity
            educationQualification
            maritalStatus
            foreignEmployment
            occupation
            institutionType
            cooperativeUnion
            cooperativeType
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductCriteriaQuery = <
  TData = GetAccountOpenProductCriteriaQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductCriteriaQuery, TError, TData>(
    ['getAccountOpenProductCriteria', variables],
    useAxios<GetAccountOpenProductCriteriaQuery, GetAccountOpenProductCriteriaQueryVariables>(
      GetAccountOpenProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenProductPenaltyDocument = `
    query getAccountOpenProductPenalty($productId: ID!) {
  settings {
    general {
      depositProduct {
        getPenaltyRebateInfo(productId: $productId) {
          data {
            penalty {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate {
              dayBeforeInstallmentDate
              rebateRate
              rebateAmount
              rebateLedgerMapping
              noOfInstallment
            }
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductPenaltyQuery = <
  TData = GetAccountOpenProductPenaltyQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductPenaltyQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductPenaltyQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductPenaltyQuery, TError, TData>(
    ['getAccountOpenProductPenalty', variables],
    useAxios<GetAccountOpenProductPenaltyQuery, GetAccountOpenProductPenaltyQueryVariables>(
      GetAccountOpenProductPenaltyDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenMinorListDocument = `
    query getAccountOpenMinorList($memberId: ID!) {
  account {
    listMinors(memberId: $memberId) {
      data {
        id
        fullName
        familyMemberId
      }
    }
  }
}
    `;
export const useGetAccountOpenMinorListQuery = <
  TData = GetAccountOpenMinorListQuery,
  TError = unknown
>(
  variables: GetAccountOpenMinorListQueryVariables,
  options?: UseQueryOptions<GetAccountOpenMinorListQuery, TError, TData>
) =>
  useQuery<GetAccountOpenMinorListQuery, TError, TData>(
    ['getAccountOpenMinorList', variables],
    useAxios<GetAccountOpenMinorListQuery, GetAccountOpenMinorListQueryVariables>(
      GetAccountOpenMinorListDocument
    ).bind(null, variables),
    options
  );
export const GetInstallmentsListDataDocument = `
    query getInstallmentsListData($id: ID!, $from: String, $to: String, $fromN: Int, $toN: Int) {
  account {
    getInstallments(id: $id, from: $from, to: $to, fromN: $fromN, toN: $toN) {
      data {
        number
        dueDate
        status
        monthName
        fine
        rebate
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInstallmentsListDataQuery = <
  TData = GetInstallmentsListDataQuery,
  TError = unknown
>(
  variables: GetInstallmentsListDataQueryVariables,
  options?: UseQueryOptions<GetInstallmentsListDataQuery, TError, TData>
) =>
  useQuery<GetInstallmentsListDataQuery, TError, TData>(
    ['getInstallmentsListData', variables],
    useAxios<GetInstallmentsListDataQuery, GetInstallmentsListDataQueryVariables>(
      GetInstallmentsListDataDocument
    ).bind(null, variables),
    options
  );
export const GetBulkInstallmentsDataDocument = `
    query getBulkInstallmentsData($ids: [ID]!) {
  account {
    getBulkInstallments(ids: $ids) {
      accountId
      value {
        data {
          dueDate
          status
          monthName
          fine
          rebate
        }
      }
    }
  }
}
    `;
export const useGetBulkInstallmentsDataQuery = <
  TData = GetBulkInstallmentsDataQuery,
  TError = unknown
>(
  variables: GetBulkInstallmentsDataQueryVariables,
  options?: UseQueryOptions<GetBulkInstallmentsDataQuery, TError, TData>
) =>
  useQuery<GetBulkInstallmentsDataQuery, TError, TData>(
    ['getBulkInstallmentsData', variables],
    useAxios<GetBulkInstallmentsDataQuery, GetBulkInstallmentsDataQueryVariables>(
      GetBulkInstallmentsDataDocument
    ).bind(null, variables),
    options
  );
export const GetDefaultAccountListDocument = `
    query getDefaultAccountList($productId: ID!, $memberId: ID!) {
  account {
    listDefaultAccounts(memberId: $memberId, productId: $productId) {
      data {
        id
        accountName
        productId
      }
    }
  }
}
    `;
export const useGetDefaultAccountListQuery = <TData = GetDefaultAccountListQuery, TError = unknown>(
  variables: GetDefaultAccountListQueryVariables,
  options?: UseQueryOptions<GetDefaultAccountListQuery, TError, TData>
) =>
  useQuery<GetDefaultAccountListQuery, TError, TData>(
    ['getDefaultAccountList', variables],
    useAxios<GetDefaultAccountListQuery, GetDefaultAccountListQueryVariables>(
      GetDefaultAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountDetailsDataDocument = `
    query getAccountDetailsData($id: ID!) {
  account {
    accountDetails(id: $id) {
      data {
        accountId
        objState
        member {
          id
          name
          code
          profilePicUrl
          profilePic
          signaturePicUrl
          address {
            state
            district
            localGovernment
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          contact
          dateJoined
        }
        nomineeAccountNumber
        nomineeAccountName
        productId
        installmentAmount
        accountName
        availableBalance
        accountTenure
        productName
        accountOpenDate
        accountType
        defaultAccountType
        accountBalance
        totalDepositBalance
        interestAccrued
        interestEarned
        guaranteedAmount
        accountBranch
        alternativeChannel
        allowLoan
        withdrawRestricted
        supportMultiple
        staffProduct
        atmFacility
        chequeIssue
        allowPartialInstallment
        monthlyInterestCompulsory
        isForMinors
        autoOpen
        isMandatory
        interestRate
        product {
          id
          productCode
          productName
          nature
          minimumBalance
          isMandatorySaving
          withdrawRestricted
          accountClosingCharge {
            serviceName
            ledgerName
            amount
          }
          withdrawPenalty {
            penaltyLedgerMapping
            penaltyAmount
            penaltyRate
          }
          interest
          depositFrequency
        }
        dues {
          fine
          totalDue
          dueInstallments
        }
        prematurePenalty
        interestTax
        overDrawnBalance
        lastTransactionDate
        accountExpiryDate
        closedAt
        transactionConstraints {
          blockId
          transactionType
          effectiveSince
          effectiveTill
        }
        lastInstallmentUpdatedDate
      }
    }
  }
}
    `;
export const useGetAccountDetailsDataQuery = <TData = GetAccountDetailsDataQuery, TError = unknown>(
  variables: GetAccountDetailsDataQueryVariables,
  options?: UseQueryOptions<GetAccountDetailsDataQuery, TError, TData>
) =>
  useQuery<GetAccountDetailsDataQuery, TError, TData>(
    ['getAccountDetailsData', variables],
    useAxios<GetAccountDetailsDataQuery, GetAccountDetailsDataQueryVariables>(
      GetAccountDetailsDataDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTransactionListsDocument = `
    query getAccountTransactionLists($filter: AccountsTransactionFilter!, $pagination: Pagination!) {
  account {
    listTransactions(filter: $filter, paginate: $pagination) {
      edges {
        node {
          id
          transactionId
          accountId
          name
          date
          month
          transactionDirection
          transactionType
          amount
          currentBalance
          debit
          credit
          balanceType
        }
      }
      totalCount
      pageInfo {
        endCursor
        startCursor
        hasNextPage
        hasPreviousPage
      }
      summary {
        totalDeposit
        totalWithdraw
        averageBalance
      }
    }
  }
}
    `;
export const useGetAccountTransactionListsQuery = <
  TData = GetAccountTransactionListsQuery,
  TError = unknown
>(
  variables: GetAccountTransactionListsQueryVariables,
  options?: UseQueryOptions<GetAccountTransactionListsQuery, TError, TData>
) =>
  useQuery<GetAccountTransactionListsQuery, TError, TData>(
    ['getAccountTransactionLists', variables],
    useAxios<GetAccountTransactionListsQuery, GetAccountTransactionListsQueryVariables>(
      GetAccountTransactionListsDocument
    ).bind(null, variables),
    options
  );
export const GetAccountLedgersListDocument = `
    query getAccountLedgersList($accountId: ID!) {
  account {
    listAccountLedgers(id: $accountId) {
      data {
        ledgerId
        ledgerName
        accountType
        balance
        balanceType
      }
    }
  }
}
    `;
export const useGetAccountLedgersListQuery = <TData = GetAccountLedgersListQuery, TError = unknown>(
  variables: GetAccountLedgersListQueryVariables,
  options?: UseQueryOptions<GetAccountLedgersListQuery, TError, TData>
) =>
  useQuery<GetAccountLedgersListQuery, TError, TData>(
    ['getAccountLedgersList', variables],
    useAxios<GetAccountLedgersListQuery, GetAccountLedgersListQueryVariables>(
      GetAccountLedgersListDocument
    ).bind(null, variables),
    options
  );
export const GetAllAccountsDocument = `
    query getAllAccounts($paginate: Pagination, $filter: Filter, $isHoldings: Boolean) {
  allAccounts {
    list(paginate: $paginate, filter: $filter, isHoldings: $isHoldings) {
      totalCount
      edges {
        node {
          ID
          member {
            name
          }
          accountName
          productName
          accountType
          accountOpenDate
          ledgerId
          serviceCenter
          ledgerBalance
        }
        cursor
      }
      pageInfo {
        ...Pagination
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAllAccountsQuery = <TData = GetAllAccountsQuery, TError = unknown>(
  variables?: GetAllAccountsQueryVariables,
  options?: UseQueryOptions<GetAllAccountsQuery, TError, TData>
) =>
  useQuery<GetAllAccountsQuery, TError, TData>(
    variables === undefined ? ['getAllAccounts'] : ['getAllAccounts', variables],
    useAxios<GetAllAccountsQuery, GetAllAccountsQueryVariables>(GetAllAccountsDocument).bind(
      null,
      variables
    ),
    options
  );
export const ListAssociatedGuaranteeAccountsDocument = `
    query listAssociatedGuaranteeAccounts($accountId: ID!) {
  account {
    listAssociatedGuaranteeAccounts(id: $accountId) {
      data {
        memberName
        memberId
        accountName
        loanAccountId
        amount
      }
      total
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useListAssociatedGuaranteeAccountsQuery = <
  TData = ListAssociatedGuaranteeAccountsQuery,
  TError = unknown
>(
  variables: ListAssociatedGuaranteeAccountsQueryVariables,
  options?: UseQueryOptions<ListAssociatedGuaranteeAccountsQuery, TError, TData>
) =>
  useQuery<ListAssociatedGuaranteeAccountsQuery, TError, TData>(
    ['listAssociatedGuaranteeAccounts', variables],
    useAxios<ListAssociatedGuaranteeAccountsQuery, ListAssociatedGuaranteeAccountsQueryVariables>(
      ListAssociatedGuaranteeAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetSavingFilterMappingDocument = `
    query getSavingFilterMapping {
  account {
    filterMapping {
      productID {
        label
        value
      }
    }
  }
}
    `;
export const useGetSavingFilterMappingQuery = <
  TData = GetSavingFilterMappingQuery,
  TError = unknown
>(
  variables?: GetSavingFilterMappingQueryVariables,
  options?: UseQueryOptions<GetSavingFilterMappingQuery, TError, TData>
) =>
  useQuery<GetSavingFilterMappingQuery, TError, TData>(
    variables === undefined ? ['getSavingFilterMapping'] : ['getSavingFilterMapping', variables],
    useAxios<GetSavingFilterMappingQuery, GetSavingFilterMappingQueryVariables>(
      GetSavingFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const ListAccountInterestRateListDocument = `
    query listAccountInterestRateList($accountId: ID!) {
  account {
    listAccountInterestRates(accountId: $accountId) {
      data {
        id
        rate
        createdAt
        effectiveDate
      }
    }
  }
}
    `;
export const useListAccountInterestRateListQuery = <
  TData = ListAccountInterestRateListQuery,
  TError = unknown
>(
  variables: ListAccountInterestRateListQueryVariables,
  options?: UseQueryOptions<ListAccountInterestRateListQuery, TError, TData>
) =>
  useQuery<ListAccountInterestRateListQuery, TError, TData>(
    ['listAccountInterestRateList', variables],
    useAxios<ListAccountInterestRateListQuery, ListAccountInterestRateListQueryVariables>(
      ListAccountInterestRateListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountInterestRateDetailDocument = `
    query getAccountInterestRateDetail($id: ID!, $accountId: String!) {
  account {
    getAccountInterestRate(id: $id, accountID: $accountId) {
      data {
        id
        rate
        createdAt
        effectiveDate
        fileUploads {
          identifier
          url
        }
        note
      }
    }
  }
}
    `;
export const useGetAccountInterestRateDetailQuery = <
  TData = GetAccountInterestRateDetailQuery,
  TError = unknown
>(
  variables: GetAccountInterestRateDetailQueryVariables,
  options?: UseQueryOptions<GetAccountInterestRateDetailQuery, TError, TData>
) =>
  useQuery<GetAccountInterestRateDetailQuery, TError, TData>(
    ['getAccountInterestRateDetail', variables],
    useAxios<GetAccountInterestRateDetailQuery, GetAccountInterestRateDetailQueryVariables>(
      GetAccountInterestRateDetailDocument
    ).bind(null, variables),
    options
  );
export const GetAllAccountsFilterMappingDocument = `
    query getAllAccountsFilterMapping {
  allAccounts {
    filterMapping {
      accountType {
        ...OptionType
      }
      productName {
        ...OptionType
      }
    }
  }
}
    ${OptionTypeFragmentDoc}`;
export const useGetAllAccountsFilterMappingQuery = <
  TData = GetAllAccountsFilterMappingQuery,
  TError = unknown
>(
  variables?: GetAllAccountsFilterMappingQueryVariables,
  options?: UseQueryOptions<GetAllAccountsFilterMappingQuery, TError, TData>
) =>
  useQuery<GetAllAccountsFilterMappingQuery, TError, TData>(
    variables === undefined
      ? ['getAllAccountsFilterMapping']
      : ['getAllAccountsFilterMapping', variables],
    useAxios<GetAllAccountsFilterMappingQuery, GetAllAccountsFilterMappingQueryVariables>(
      GetAllAccountsFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const GetBankAccountListDocument = `
    query getBankAccountList($filter: Filter, $currentBranchOnly: Boolean, $pagination: Pagination) {
  accounting {
    bankAccounts {
      list(
        filter: $filter
        currentBranchOnly: $currentBranchOnly
        pagination: $pagination
      ) {
        edges {
          node {
            id
            bankId
            bankName
            displayName
            accountType
            accountNo
            balance
            balanceType
            branchName
          }
        }
        totalCount
        pageInfo {
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
        }
      }
    }
  }
}
    `;
export const useGetBankAccountListQuery = <TData = GetBankAccountListQuery, TError = unknown>(
  variables?: GetBankAccountListQueryVariables,
  options?: UseQueryOptions<GetBankAccountListQuery, TError, TData>
) =>
  useQuery<GetBankAccountListQuery, TError, TData>(
    variables === undefined ? ['getBankAccountList'] : ['getBankAccountList', variables],
    useAxios<GetBankAccountListQuery, GetBankAccountListQueryVariables>(
      GetBankAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetBankAccountDetailsDocument = `
    query getBankAccountDetails($id: ID!) {
  accounting {
    bankAccounts {
      details(id: $id) {
        data {
          id
          bankId
          displayName
          accountName
          accountNumber
          accountType
          description
        }
      }
    }
  }
}
    `;
export const useGetBankAccountDetailsQuery = <TData = GetBankAccountDetailsQuery, TError = unknown>(
  variables: GetBankAccountDetailsQueryVariables,
  options?: UseQueryOptions<GetBankAccountDetailsQuery, TError, TData>
) =>
  useQuery<GetBankAccountDetailsQuery, TError, TData>(
    ['getBankAccountDetails', variables],
    useAxios<GetBankAccountDetailsQuery, GetBankAccountDetailsQueryVariables>(
      GetBankAccountDetailsDocument
    ).bind(null, variables),
    options
  );
export const ExternalLoanListDocument = `
    query externalLoanList($filter: Filter, $pagination: Pagination) {
  accounting {
    externalLoan {
      loan {
        list(filter: $filter, pagination: $pagination) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              loanName
              organizationId
              organizationName
              createdBy
              appliedDate
              loanType
              amount
            }
            cursor
          }
        }
      }
    }
  }
}
    `;
export const useExternalLoanListQuery = <TData = ExternalLoanListQuery, TError = unknown>(
  variables?: ExternalLoanListQueryVariables,
  options?: UseQueryOptions<ExternalLoanListQuery, TError, TData>
) =>
  useQuery<ExternalLoanListQuery, TError, TData>(
    variables === undefined ? ['externalLoanList'] : ['externalLoanList', variables],
    useAxios<ExternalLoanListQuery, ExternalLoanListQueryVariables>(ExternalLoanListDocument).bind(
      null,
      variables
    ),
    options
  );
export const ExternalLoanPaymentListDocument = `
    query externalLoanPaymentList($filter: Filter, $pagination: Pagination) {
  accounting {
    externalLoan {
      payment {
        list(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            cursor
            node {
              id
              loanId
              loanName
              createdBy
              createdDate
              amount
            }
          }
        }
      }
    }
  }
}
    `;
export const useExternalLoanPaymentListQuery = <
  TData = ExternalLoanPaymentListQuery,
  TError = unknown
>(
  variables?: ExternalLoanPaymentListQueryVariables,
  options?: UseQueryOptions<ExternalLoanPaymentListQuery, TError, TData>
) =>
  useQuery<ExternalLoanPaymentListQuery, TError, TData>(
    variables === undefined ? ['externalLoanPaymentList'] : ['externalLoanPaymentList', variables],
    useAxios<ExternalLoanPaymentListQuery, ExternalLoanPaymentListQueryVariables>(
      ExternalLoanPaymentListDocument
    ).bind(null, variables),
    options
  );
export const GetExternalLoanFormStateDocument = `
    query getExternalLoanFormState($id: ID!) {
  accounting {
    externalLoan {
      loan {
        formState(id: $id) {
          data {
            loanName
            organizationId
            loanType
            mortageType
            loanAppliedDate
            loanApprovedDate
            appliedAmount
            sanctionedAmount
            disbursedAmount
            loanAccountNumber
            tenure
            tenureUnit
            repaymentStartDate
            maturityDate
            interestRate
            installmentType
            installmentFrequency
            collateral {
              typeOfCollateral
              valuationAmount
              details
            }
            fixDeposit
            nameOfRepresentative
            position
            loanCharges {
              serviceName
              serviceId
              serviceCharge
            }
            insurance
            insuranceCompany
            insurancePremiumAmount
            insuranceStartDate
            insuranceValidUpto
            bankId
            documents {
              fieldId
              docData {
                identifier
                url
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetExternalLoanFormStateQuery = <
  TData = GetExternalLoanFormStateQuery,
  TError = unknown
>(
  variables: GetExternalLoanFormStateQueryVariables,
  options?: UseQueryOptions<GetExternalLoanFormStateQuery, TError, TData>
) =>
  useQuery<GetExternalLoanFormStateQuery, TError, TData>(
    ['getExternalLoanFormState', variables],
    useAxios<GetExternalLoanFormStateQuery, GetExternalLoanFormStateQueryVariables>(
      GetExternalLoanFormStateDocument
    ).bind(null, variables),
    options
  );
export const GetInvestmentEntriesListDataDocument = `
    query getInvestmentEntriesListData($pagination: Pagination, $filter: Filter) {
  accounting {
    investment {
      listEntry(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            type
            amount
            date
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetInvestmentEntriesListDataQuery = <
  TData = GetInvestmentEntriesListDataQuery,
  TError = unknown
>(
  variables?: GetInvestmentEntriesListDataQueryVariables,
  options?: UseQueryOptions<GetInvestmentEntriesListDataQuery, TError, TData>
) =>
  useQuery<GetInvestmentEntriesListDataQuery, TError, TData>(
    variables === undefined
      ? ['getInvestmentEntriesListData']
      : ['getInvestmentEntriesListData', variables],
    useAxios<GetInvestmentEntriesListDataQuery, GetInvestmentEntriesListDataQueryVariables>(
      GetInvestmentEntriesListDataDocument
    ).bind(null, variables),
    options
  );
export const GetInvestmentEntryFormStateDataDocument = `
    query getInvestmentEntryFormStateData($id: ID!) {
  accounting {
    investment {
      entryFormState(id: $id) {
        data {
          organizationID
          investmentType
          investmentName
          share {
            count
            rate
            purchaseAmount
            certificateNo
            date
            notes
          }
          saving {
            type
            installmentAmount
            frequency
            rate
            openDate
            notes
          }
          fd {
            type
            fdAmount
            rate
            certificateNo
            startDate
            maturityDate
            nomineeBankACNo
            notes
          }
        }
      }
    }
  }
}
    `;
export const useGetInvestmentEntryFormStateDataQuery = <
  TData = GetInvestmentEntryFormStateDataQuery,
  TError = unknown
>(
  variables: GetInvestmentEntryFormStateDataQueryVariables,
  options?: UseQueryOptions<GetInvestmentEntryFormStateDataQuery, TError, TData>
) =>
  useQuery<GetInvestmentEntryFormStateDataQuery, TError, TData>(
    ['getInvestmentEntryFormStateData', variables],
    useAxios<GetInvestmentEntryFormStateDataQuery, GetInvestmentEntryFormStateDataQueryVariables>(
      GetInvestmentEntryFormStateDataDocument
    ).bind(null, variables),
    options
  );
export const GetInvestmentTransactionsListDataDocument = `
    query getInvestmentTransactionsListData($pagination: Pagination, $filter: Filter) {
  accounting {
    investment {
      listTransaction(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            type
            amount
            date
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetInvestmentTransactionsListDataQuery = <
  TData = GetInvestmentTransactionsListDataQuery,
  TError = unknown
>(
  variables?: GetInvestmentTransactionsListDataQueryVariables,
  options?: UseQueryOptions<GetInvestmentTransactionsListDataQuery, TError, TData>
) =>
  useQuery<GetInvestmentTransactionsListDataQuery, TError, TData>(
    variables === undefined
      ? ['getInvestmentTransactionsListData']
      : ['getInvestmentTransactionsListData', variables],
    useAxios<
      GetInvestmentTransactionsListDataQuery,
      GetInvestmentTransactionsListDataQueryVariables
    >(GetInvestmentTransactionsListDataDocument).bind(null, variables),
    options
  );
export const GetJournalVoucherListDocument = `
    query getJournalVoucherList($pagination: Pagination, $filter: Filter) {
  accounting {
    journalVoucher {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            transactionDate
            transactionCode
            reference
            amount
            note
            branchName
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetJournalVoucherListQuery = <TData = GetJournalVoucherListQuery, TError = unknown>(
  variables?: GetJournalVoucherListQueryVariables,
  options?: UseQueryOptions<GetJournalVoucherListQuery, TError, TData>
) =>
  useQuery<GetJournalVoucherListQuery, TError, TData>(
    variables === undefined ? ['getJournalVoucherList'] : ['getJournalVoucherList', variables],
    useAxios<GetJournalVoucherListQuery, GetJournalVoucherListQueryVariables>(
      GetJournalVoucherListDocument
    ).bind(null, variables),
    options
  );
export const GetJournalVoucherDetailDocument = `
    query getJournalVoucherDetail($entryId: ID!) {
  accounting {
    journalVoucher {
      viewJournalVoucherDetail(entryId: $entryId) {
        data {
          id
          date
          amount
          status
          reference
          note
          transactionCode
          branchName
          glTransaction {
            ledgerId
            account
            serviceCentreId
            serviceCenter
            debit
            credit
            balance
            balanceType
          }
          totalDebit
          totalCredit
          creatorName
        }
      }
    }
  }
}
    `;
export const useGetJournalVoucherDetailQuery = <
  TData = GetJournalVoucherDetailQuery,
  TError = unknown
>(
  variables: GetJournalVoucherDetailQueryVariables,
  options?: UseQueryOptions<GetJournalVoucherDetailQuery, TError, TData>
) =>
  useQuery<GetJournalVoucherDetailQuery, TError, TData>(
    ['getJournalVoucherDetail', variables],
    useAxios<GetJournalVoucherDetailQuery, GetJournalVoucherDetailQueryVariables>(
      GetJournalVoucherDetailDocument
    ).bind(null, variables),
    options
  );
export const GetLedgerAccountsForTransferDocument = `
    query getLedgerAccountsForTransfer($input: LedgerBalanceTransferRequestInput!) {
  accounting {
    ledgerBalanceTransfer {
      getLedgerAccounts(input: $input) {
        totalLedgerAccounts
        totalTransferBalance {
          amount
          amountType
        }
        data {
          ledgerId
          ledgerName
          currentBalance {
            amount
            amountType
          }
          transferBalance
          newBalance {
            amount
            amountType
          }
        }
      }
    }
  }
}
    `;
export const useGetLedgerAccountsForTransferQuery = <
  TData = GetLedgerAccountsForTransferQuery,
  TError = unknown
>(
  variables: GetLedgerAccountsForTransferQueryVariables,
  options?: UseQueryOptions<GetLedgerAccountsForTransferQuery, TError, TData>
) =>
  useQuery<GetLedgerAccountsForTransferQuery, TError, TData>(
    ['getLedgerAccountsForTransfer', variables],
    useAxios<GetLedgerAccountsForTransferQuery, GetLedgerAccountsForTransferQueryVariables>(
      GetLedgerAccountsForTransferDocument
    ).bind(null, variables),
    options
  );
export const GetAccountingOrganiztionListDocument = `
    query getAccountingOrganiztionList($pagination: Pagination, $filter: OrganizationEntryFilter) {
  accounting {
    organization {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            name
            address {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            note
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetAccountingOrganiztionListQuery = <
  TData = GetAccountingOrganiztionListQuery,
  TError = unknown
>(
  variables?: GetAccountingOrganiztionListQueryVariables,
  options?: UseQueryOptions<GetAccountingOrganiztionListQuery, TError, TData>
) =>
  useQuery<GetAccountingOrganiztionListQuery, TError, TData>(
    variables === undefined
      ? ['getAccountingOrganiztionList']
      : ['getAccountingOrganiztionList', variables],
    useAxios<GetAccountingOrganiztionListQuery, GetAccountingOrganiztionListQueryVariables>(
      GetAccountingOrganiztionListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountingOrganizationFormStateDataDocument = `
    query getAccountingOrganizationFormStateData($id: ID!) {
  accounting {
    organization {
      formState(id: $id) {
        data {
          name
          address {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          note
        }
      }
    }
  }
}
    `;
export const useGetAccountingOrganizationFormStateDataQuery = <
  TData = GetAccountingOrganizationFormStateDataQuery,
  TError = unknown
>(
  variables: GetAccountingOrganizationFormStateDataQueryVariables,
  options?: UseQueryOptions<GetAccountingOrganizationFormStateDataQuery, TError, TData>
) =>
  useQuery<GetAccountingOrganizationFormStateDataQuery, TError, TData>(
    ['getAccountingOrganizationFormStateData', variables],
    useAxios<
      GetAccountingOrganizationFormStateDataQuery,
      GetAccountingOrganizationFormStateDataQueryVariables
    >(GetAccountingOrganizationFormStateDataDocument).bind(null, variables),
    options
  );
export const GetAccountingPurchaseEntryListDocument = `
    query getAccountingPurchaseEntryList($filter: AccountingPurchaseFilter, $pagination: Pagination) {
  accounting {
    purchase {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            date
            entryNo
            supplierId
            supplierName
            totalAmount
            referenceId
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAccountingPurchaseEntryListQuery = <
  TData = GetAccountingPurchaseEntryListQuery,
  TError = unknown
>(
  variables?: GetAccountingPurchaseEntryListQueryVariables,
  options?: UseQueryOptions<GetAccountingPurchaseEntryListQuery, TError, TData>
) =>
  useQuery<GetAccountingPurchaseEntryListQuery, TError, TData>(
    variables === undefined
      ? ['getAccountingPurchaseEntryList']
      : ['getAccountingPurchaseEntryList', variables],
    useAxios<GetAccountingPurchaseEntryListQuery, GetAccountingPurchaseEntryListQueryVariables>(
      GetAccountingPurchaseEntryListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountingPurchaseSalesListDocument = `
    query getAccountingPurchaseSalesList($filter: AccountingPurchaseFilter, $pagination: Pagination) {
  accounting {
    purchase {
      listExpense(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          cursor
          node {
            id
            reference
            date
            entryNo
            reference
            supplierId
            supplierName
            totalAmount
          }
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAccountingPurchaseSalesListQuery = <
  TData = GetAccountingPurchaseSalesListQuery,
  TError = unknown
>(
  variables?: GetAccountingPurchaseSalesListQueryVariables,
  options?: UseQueryOptions<GetAccountingPurchaseSalesListQuery, TError, TData>
) =>
  useQuery<GetAccountingPurchaseSalesListQuery, TError, TData>(
    variables === undefined
      ? ['getAccountingPurchaseSalesList']
      : ['getAccountingPurchaseSalesList', variables],
    useAxios<GetAccountingPurchaseSalesListQuery, GetAccountingPurchaseSalesListQueryVariables>(
      GetAccountingPurchaseSalesListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountingDebitNoteListDocument = `
    query getAccountingDebitNoteList($filter: AccountingPurchaseFilter, $pagination: Pagination) {
  accounting {
    purchase {
      listDebitNote(filter: $filter, pagination: $pagination) {
        totalCount
        pageInfo {
          endCursor
          startCursor
          hasNextPage
          hasPreviousPage
        }
        edges {
          node {
            id
            totalAmount
            supplierName
            supplierId
            date
            noteNo
            referenceNo
          }
          cursor
        }
      }
    }
  }
}
    `;
export const useGetAccountingDebitNoteListQuery = <
  TData = GetAccountingDebitNoteListQuery,
  TError = unknown
>(
  variables?: GetAccountingDebitNoteListQueryVariables,
  options?: UseQueryOptions<GetAccountingDebitNoteListQuery, TError, TData>
) =>
  useQuery<GetAccountingDebitNoteListQuery, TError, TData>(
    variables === undefined
      ? ['getAccountingDebitNoteList']
      : ['getAccountingDebitNoteList', variables],
    useAxios<GetAccountingDebitNoteListQuery, GetAccountingDebitNoteListQueryVariables>(
      GetAccountingDebitNoteListDocument
    ).bind(null, variables),
    options
  );
export const GetPurchaseEntryDetailsDocument = `
    query getPurchaseEntryDetails($id: ID!) {
  accounting {
    purchase {
      detailPurchaseEntry(id: $id) {
        data {
          billNo
          supplierName
          invoiceReference
          invoiceDate
          dueDate
          productDetails {
            itemId
            itemName
            quantity
            rate
            tax
            taxValue
            amount
            description
            warehouse
            warehouseName
          }
          paymentDetail {
            subTotal
            nonTaxableTotal
            taxableTotal
            vat
            grandTotal
            discount
          }
          glTransaction {
            ledgerId
            account
            serviceCentreId
            serviceCenter
            debit
            credit
            balance
            balanceType
          }
          totalDebit
          totalCredit
          notes
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetPurchaseEntryDetailsQuery = <
  TData = GetPurchaseEntryDetailsQuery,
  TError = unknown
>(
  variables: GetPurchaseEntryDetailsQueryVariables,
  options?: UseQueryOptions<GetPurchaseEntryDetailsQuery, TError, TData>
) =>
  useQuery<GetPurchaseEntryDetailsQuery, TError, TData>(
    ['getPurchaseEntryDetails', variables],
    useAxios<GetPurchaseEntryDetailsQuery, GetPurchaseEntryDetailsQueryVariables>(
      GetPurchaseEntryDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetPurchaseDebitNoteDetailsDocument = `
    query getPurchaseDebitNoteDetails($id: ID!) {
  accounting {
    purchase {
      detailDebitNote(id: $id) {
        data {
          supplierName
          supplierId
          invoiceReference
          date
          products {
            itemId
            itemName
            quantity
            rate
            tax
            taxValue
            amount
            description
            warehouse
            warehouseName
          }
          notes
          paymentDetail {
            subTotal
            nonTaxableTotal
            taxableTotal
            vat
            grandTotal
            discount
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetPurchaseDebitNoteDetailsQuery = <
  TData = GetPurchaseDebitNoteDetailsQuery,
  TError = unknown
>(
  variables: GetPurchaseDebitNoteDetailsQueryVariables,
  options?: UseQueryOptions<GetPurchaseDebitNoteDetailsQuery, TError, TData>
) =>
  useQuery<GetPurchaseDebitNoteDetailsQuery, TError, TData>(
    ['getPurchaseDebitNoteDetails', variables],
    useAxios<GetPurchaseDebitNoteDetailsQuery, GetPurchaseDebitNoteDetailsQueryVariables>(
      GetPurchaseDebitNoteDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetPurchaseExpenseDetailsDocument = `
    query getPurchaseExpenseDetails($id: ID!) {
  accounting {
    purchase {
      detailExpenses(id: $id) {
        data {
          billNo
          supplierName
          invoiceReference
          invoiceDate
          dueDate
          ledgerDetails {
            accountId
            amount
            tax
            taxAmount
          }
          paymentDetail {
            subTotal
            nonTaxableTotal
            taxableTotal
            vat
            grandTotal
            discount
          }
          glTransaction {
            ledgerId
            account
            serviceCentreId
            serviceCenter
            debit
            credit
            balance
            balanceType
          }
          totalDebit
          totalCredit
          notes
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetPurchaseExpenseDetailsQuery = <
  TData = GetPurchaseExpenseDetailsQuery,
  TError = unknown
>(
  variables: GetPurchaseExpenseDetailsQueryVariables,
  options?: UseQueryOptions<GetPurchaseExpenseDetailsQuery, TError, TData>
) =>
  useQuery<GetPurchaseExpenseDetailsQuery, TError, TData>(
    ['getPurchaseExpenseDetails', variables],
    useAxios<GetPurchaseExpenseDetailsQuery, GetPurchaseExpenseDetailsQueryVariables>(
      GetPurchaseExpenseDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCustomerListDataDocument = `
    query getSalesCustomerListData($pagination: Pagination, $filter: SalesCustomerFilter) {
  accounting {
    sales {
      listCustomer(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            phoneNumber
            email
            address {
              state
              district
              localGovernment
              wardNo
              locality
            }
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetSalesCustomerListDataQuery = <
  TData = GetSalesCustomerListDataQuery,
  TError = unknown
>(
  variables?: GetSalesCustomerListDataQueryVariables,
  options?: UseQueryOptions<GetSalesCustomerListDataQuery, TError, TData>
) =>
  useQuery<GetSalesCustomerListDataQuery, TError, TData>(
    variables === undefined
      ? ['getSalesCustomerListData']
      : ['getSalesCustomerListData', variables],
    useAxios<GetSalesCustomerListDataQuery, GetSalesCustomerListDataQueryVariables>(
      GetSalesCustomerListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCustomerFormStateDataDocument = `
    query getSalesCustomerFormStateData($id: ID!) {
  accounting {
    sales {
      customerFormState(id: $id) {
        data {
          name
          code
          phoneNumber
          pan
          address {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          email
          creditTerms
          creditLimit
          openingBalance
        }
      }
    }
  }
}
    `;
export const useGetSalesCustomerFormStateDataQuery = <
  TData = GetSalesCustomerFormStateDataQuery,
  TError = unknown
>(
  variables: GetSalesCustomerFormStateDataQueryVariables,
  options?: UseQueryOptions<GetSalesCustomerFormStateDataQuery, TError, TData>
) =>
  useQuery<GetSalesCustomerFormStateDataQuery, TError, TData>(
    ['getSalesCustomerFormStateData', variables],
    useAxios<GetSalesCustomerFormStateDataQuery, GetSalesCustomerFormStateDataQueryVariables>(
      GetSalesCustomerFormStateDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesSaleEntryListDataDocument = `
    query getSalesSaleEntryListData($pagination: Pagination, $filter: SalesSaleEntryFilter) {
  accounting {
    sales {
      listSaleEntry(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            customerName
            totalAmount
            date
            invoiceNo
            itemDetails {
              itemId
              quantity
              rate
              tax
              amount
              description
              warehouse
            }
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetSalesSaleEntryListDataQuery = <
  TData = GetSalesSaleEntryListDataQuery,
  TError = unknown
>(
  variables?: GetSalesSaleEntryListDataQueryVariables,
  options?: UseQueryOptions<GetSalesSaleEntryListDataQuery, TError, TData>
) =>
  useQuery<GetSalesSaleEntryListDataQuery, TError, TData>(
    variables === undefined
      ? ['getSalesSaleEntryListData']
      : ['getSalesSaleEntryListData', variables],
    useAxios<GetSalesSaleEntryListDataQuery, GetSalesSaleEntryListDataQueryVariables>(
      GetSalesSaleEntryListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCreditNoteListDataDocument = `
    query getSalesCreditNoteListData($pagination: Pagination, $filter: SalesCreditNoteFilter) {
  accounting {
    sales {
      listCreditNote(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            customerName
            amount
            date
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetSalesCreditNoteListDataQuery = <
  TData = GetSalesCreditNoteListDataQuery,
  TError = unknown
>(
  variables?: GetSalesCreditNoteListDataQueryVariables,
  options?: UseQueryOptions<GetSalesCreditNoteListDataQuery, TError, TData>
) =>
  useQuery<GetSalesCreditNoteListDataQuery, TError, TData>(
    variables === undefined
      ? ['getSalesCreditNoteListData']
      : ['getSalesCreditNoteListData', variables],
    useAxios<GetSalesCreditNoteListDataQuery, GetSalesCreditNoteListDataQueryVariables>(
      GetSalesCreditNoteListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCustomerPaymentListDataDocument = `
    query getSalesCustomerPaymentListData($pagination: Pagination, $filter: SalesCustomerPaymentFilter) {
  accounting {
    sales {
      listCustomerPayment(pagination: $pagination, filter: $filter) {
        totalCount
        edges {
          node {
            id
            receivedFrom
            totalAmount
            date
            paymentMode
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetSalesCustomerPaymentListDataQuery = <
  TData = GetSalesCustomerPaymentListDataQuery,
  TError = unknown
>(
  variables?: GetSalesCustomerPaymentListDataQueryVariables,
  options?: UseQueryOptions<GetSalesCustomerPaymentListDataQuery, TError, TData>
) =>
  useQuery<GetSalesCustomerPaymentListDataQuery, TError, TData>(
    variables === undefined
      ? ['getSalesCustomerPaymentListData']
      : ['getSalesCustomerPaymentListData', variables],
    useAxios<GetSalesCustomerPaymentListDataQuery, GetSalesCustomerPaymentListDataQueryVariables>(
      GetSalesCustomerPaymentListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSalesCustomerPaymentFormStateDataDocument = `
    query getSalesCustomerPaymentFormStateData($id: ID!) {
  accounting {
    sales {
      customerPaymentFormState(id: $id) {
        data {
          receivedFrom
          receivedAccount
          receivedAmount
          receivedDate
          paymentMethod
          paymentReferenceNo
          tds
          tdsAccount
          tdsType
          tdsAmount
          paymentAllocation {
            type
            date
            amount
            leftToAllocate
            thisAllocation
          }
          notes
        }
      }
    }
  }
}
    `;
export const useGetSalesCustomerPaymentFormStateDataQuery = <
  TData = GetSalesCustomerPaymentFormStateDataQuery,
  TError = unknown
>(
  variables: GetSalesCustomerPaymentFormStateDataQueryVariables,
  options?: UseQueryOptions<GetSalesCustomerPaymentFormStateDataQuery, TError, TData>
) =>
  useQuery<GetSalesCustomerPaymentFormStateDataQuery, TError, TData>(
    ['getSalesCustomerPaymentFormStateData', variables],
    useAxios<
      GetSalesCustomerPaymentFormStateDataQuery,
      GetSalesCustomerPaymentFormStateDataQueryVariables
    >(GetSalesCustomerPaymentFormStateDataDocument).bind(null, variables),
    options
  );
export const GetSalesEntryDetailsDocument = `
    query getSalesEntryDetails($id: ID!) {
  accounting {
    sales {
      detailSaleEntry(id: $id) {
        data {
          customerID
          reference
          invoiceNo
          customerName
          invoiceDate
          dueDate
          products {
            itemId
            itemName
            quantity
            rate
            tax
            taxValue
            amount
            description
            warehouse
            warehouseName
          }
          paymentDetail {
            subTotal
            nonTaxableTotal
            taxableTotal
            vat
            grandTotal
            discount
          }
          glTransaction {
            ledgerId
            account
            serviceCentreId
            serviceCenter
            debit
            credit
            balance
            balanceType
          }
          totalDebit
          totalCredit
          notes
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetSalesEntryDetailsQuery = <TData = GetSalesEntryDetailsQuery, TError = unknown>(
  variables: GetSalesEntryDetailsQueryVariables,
  options?: UseQueryOptions<GetSalesEntryDetailsQuery, TError, TData>
) =>
  useQuery<GetSalesEntryDetailsQuery, TError, TData>(
    ['getSalesEntryDetails', variables],
    useAxios<GetSalesEntryDetailsQuery, GetSalesEntryDetailsQueryVariables>(
      GetSalesEntryDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetCreditNoteDetailsDocument = `
    query getCreditNoteDetails($id: ID!) {
  accounting {
    sales {
      detailCreditNote(id: $id) {
        data {
          customerID
          customerName
          invoiceReference
          date
          products {
            itemId
            itemName
            quantity
            rate
            tax
            taxValue
            amount
            description
            warehouse
            warehouseName
          }
          notes
          paymentDetail {
            subTotal
            nonTaxableTotal
            taxableTotal
            vat
            grandTotal
            discount
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetCreditNoteDetailsQuery = <TData = GetCreditNoteDetailsQuery, TError = unknown>(
  variables: GetCreditNoteDetailsQueryVariables,
  options?: UseQueryOptions<GetCreditNoteDetailsQuery, TError, TData>
) =>
  useQuery<GetCreditNoteDetailsQuery, TError, TData>(
    ['getCreditNoteDetails', variables],
    useAxios<GetCreditNoteDetailsQuery, GetCreditNoteDetailsQueryVariables>(
      GetCreditNoteDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetCustomerDetailsDocument = `
    query getCustomerDetails($id: ID!) {
  accounting {
    sales {
      detailCustomer(id: $id) {
        data {
          id
          name
          code
          phoneNumber
          panNo
          address {
            ...Address
          }
          email
          creditTerms
          creditLimit
          openingBalance
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetCustomerDetailsQuery = <TData = GetCustomerDetailsQuery, TError = unknown>(
  variables: GetCustomerDetailsQueryVariables,
  options?: UseQueryOptions<GetCustomerDetailsQuery, TError, TData>
) =>
  useQuery<GetCustomerDetailsQuery, TError, TData>(
    ['getCustomerDetails', variables],
    useAxios<GetCustomerDetailsQuery, GetCustomerDetailsQueryVariables>(
      GetCustomerDetailsDocument
    ).bind(null, variables),
    options
  );
export const AllAdministrationDocument = `
    query allAdministration {
  administration {
    all {
      id
      name
      districts {
        id
        name
        municipalities {
          id
          name
          wards
        }
      }
    }
  }
}
    `;
export const useAllAdministrationQuery = <TData = AllAdministrationQuery, TError = unknown>(
  variables?: AllAdministrationQueryVariables,
  options?: UseQueryOptions<AllAdministrationQuery, TError, TData>
) =>
  useQuery<AllAdministrationQuery, TError, TData>(
    variables === undefined ? ['allAdministration'] : ['allAdministration', variables],
    useAxios<AllAdministrationQuery, AllAdministrationQueryVariables>(
      AllAdministrationDocument
    ).bind(null, variables),
    options
  );
export const GetAllProvinceDocument = `
    query getAllProvince {
  administration {
    provinces {
      id
      name
    }
  }
}
    `;
export const useGetAllProvinceQuery = <TData = GetAllProvinceQuery, TError = unknown>(
  variables?: GetAllProvinceQueryVariables,
  options?: UseQueryOptions<GetAllProvinceQuery, TError, TData>
) =>
  useQuery<GetAllProvinceQuery, TError, TData>(
    variables === undefined ? ['getAllProvince'] : ['getAllProvince', variables],
    useAxios<GetAllProvinceQuery, GetAllProvinceQueryVariables>(GetAllProvinceDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllDistrictsDocument = `
    query getAllDistricts {
  administration {
    districts {
      id
      name
    }
  }
}
    `;
export const useGetAllDistrictsQuery = <TData = GetAllDistrictsQuery, TError = unknown>(
  variables?: GetAllDistrictsQueryVariables,
  options?: UseQueryOptions<GetAllDistrictsQuery, TError, TData>
) =>
  useQuery<GetAllDistrictsQuery, TError, TData>(
    variables === undefined ? ['getAllDistricts'] : ['getAllDistricts', variables],
    useAxios<GetAllDistrictsQuery, GetAllDistrictsQueryVariables>(GetAllDistrictsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllLocalGovernmentDocument = `
    query getAllLocalGovernment {
  administration {
    municipalities {
      id
      name
    }
  }
}
    `;
export const useGetAllLocalGovernmentQuery = <TData = GetAllLocalGovernmentQuery, TError = unknown>(
  variables?: GetAllLocalGovernmentQueryVariables,
  options?: UseQueryOptions<GetAllLocalGovernmentQuery, TError, TData>
) =>
  useQuery<GetAllLocalGovernmentQuery, TError, TData>(
    variables === undefined ? ['getAllLocalGovernment'] : ['getAllLocalGovernment', variables],
    useAxios<GetAllLocalGovernmentQuery, GetAllLocalGovernmentQueryVariables>(
      GetAllLocalGovernmentDocument
    ).bind(null, variables),
    options
  );
export const GetAgentListDataDocument = `
    query getAgentListData($filter: Filter, $currentBranchOnly: Boolean, $pagination: Pagination) {
  agent {
    listAgent(
      filter: $filter
      currentBranchOnly: $currentBranchOnly
      pagination: $pagination
    ) {
      totalCount
      edges {
        node {
          id
          agentName
          phoneNo
          assignedMember
          profilePicUrl
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAgentListDataQuery = <TData = GetAgentListDataQuery, TError = unknown>(
  variables?: GetAgentListDataQueryVariables,
  options?: UseQueryOptions<GetAgentListDataQuery, TError, TData>
) =>
  useQuery<GetAgentListDataQuery, TError, TData>(
    variables === undefined ? ['getAgentListData'] : ['getAgentListData', variables],
    useAxios<GetAgentListDataQuery, GetAgentListDataQueryVariables>(GetAgentListDataDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAgentDetailDataDocument = `
    query getAgentDetailData($id: ID!) {
  agent {
    agentDetail(id: $id) {
      data {
        id
        name
        branch
        totalMembers
        profilePicUrl
      }
    }
  }
}
    `;
export const useGetAgentDetailDataQuery = <TData = GetAgentDetailDataQuery, TError = unknown>(
  variables: GetAgentDetailDataQueryVariables,
  options?: UseQueryOptions<GetAgentDetailDataQuery, TError, TData>
) =>
  useQuery<GetAgentDetailDataQuery, TError, TData>(
    ['getAgentDetailData', variables],
    useAxios<GetAgentDetailDataQuery, GetAgentDetailDataQueryVariables>(
      GetAgentDetailDataDocument
    ).bind(null, variables),
    options
  );
export const GetAgentAssignedMemberListDataDocument = `
    query getAgentAssignedMemberListData($filter: Filter, $pagination: Pagination) {
  agent {
    assignedMemberList(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          member {
            id
            name
            code
          }
          account {
            id
            accountName
            dues {
              totalDue
              fine
            }
            installmentAmount
          }
          product {
            productName
          }
          assignedDate
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAgentAssignedMemberListDataQuery = <
  TData = GetAgentAssignedMemberListDataQuery,
  TError = unknown
>(
  variables?: GetAgentAssignedMemberListDataQueryVariables,
  options?: UseQueryOptions<GetAgentAssignedMemberListDataQuery, TError, TData>
) =>
  useQuery<GetAgentAssignedMemberListDataQuery, TError, TData>(
    variables === undefined
      ? ['getAgentAssignedMemberListData']
      : ['getAgentAssignedMemberListData', variables],
    useAxios<GetAgentAssignedMemberListDataQuery, GetAgentAssignedMemberListDataQueryVariables>(
      GetAgentAssignedMemberListDataDocument
    ).bind(null, variables),
    options
  );
export const GetAgentTodayListDataDocument = `
    query getAgentTodayListData($id: ID!) {
  agent {
    listAgentTask(id: $id) {
      record {
        id
        member {
          id
          code
          name
        }
        account {
          id
          installmentAmount
        }
        amount
        fine
        amountToBeCollected
        fineToBeCollected
        paid
        status
      }
    }
  }
}
    `;
export const useGetAgentTodayListDataQuery = <TData = GetAgentTodayListDataQuery, TError = unknown>(
  variables: GetAgentTodayListDataQueryVariables,
  options?: UseQueryOptions<GetAgentTodayListDataQuery, TError, TData>
) =>
  useQuery<GetAgentTodayListDataQuery, TError, TData>(
    ['getAgentTodayListData', variables],
    useAxios<GetAgentTodayListDataQuery, GetAgentTodayListDataQueryVariables>(
      GetAgentTodayListDataDocument
    ).bind(null, variables),
    options
  );
export const AgentTransactionDetailDocument = `
    query agentTransactionDetail($agentId: ID!, $date: String!) {
  agent {
    viewAgentList(agentId: $agentId, date: $date) {
      data {
        transactionId
        transactionDate
        status
        totalAmount
        assignedMember {
          transactionId
          member
          account
          amount
        }
      }
    }
  }
}
    `;
export const useAgentTransactionDetailQuery = <
  TData = AgentTransactionDetailQuery,
  TError = unknown
>(
  variables: AgentTransactionDetailQueryVariables,
  options?: UseQueryOptions<AgentTransactionDetailQuery, TError, TData>
) =>
  useQuery<AgentTransactionDetailQuery, TError, TData>(
    ['agentTransactionDetail', variables],
    useAxios<AgentTransactionDetailQuery, AgentTransactionDetailQueryVariables>(
      AgentTransactionDetailDocument
    ).bind(null, variables),
    options
  );
export const GetAgentDetailDocument = `
    query getAgentDetail($id: ID!) {
  agent {
    agentDetail(id: $id) {
      data {
        id
        name
        branch
        totalMembers
        profilePicUrl
      }
    }
  }
}
    `;
export const useGetAgentDetailQuery = <TData = GetAgentDetailQuery, TError = unknown>(
  variables: GetAgentDetailQueryVariables,
  options?: UseQueryOptions<GetAgentDetailQuery, TError, TData>
) =>
  useQuery<GetAgentDetailQuery, TError, TData>(
    ['getAgentDetail', variables],
    useAxios<GetAgentDetailQuery, GetAgentDetailQueryVariables>(GetAgentDetailDocument).bind(
      null,
      variables
    ),
    options
  );
export const ListAgentCollectionDocument = `
    query listAgentCollection($filter: Filter, $pagination: Pagination) {
  agent {
    listAgentCollection(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          mrId
          mrName
          date
          amount
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useListAgentCollectionQuery = <TData = ListAgentCollectionQuery, TError = unknown>(
  variables?: ListAgentCollectionQueryVariables,
  options?: UseQueryOptions<ListAgentCollectionQuery, TError, TData>
) =>
  useQuery<ListAgentCollectionQuery, TError, TData>(
    variables === undefined ? ['listAgentCollection'] : ['listAgentCollection', variables],
    useAxios<ListAgentCollectionQuery, ListAgentCollectionQueryVariables>(
      ListAgentCollectionDocument
    ).bind(null, variables),
    options
  );
export const ListAgentTemplateDocument = `
    query listAgentTemplate($agentId: ID!) {
  agent {
    listAgentTemplate(agentId: $agentId) {
      record {
        member {
          id
          code
          name
        }
        account {
          id
          installmentAmount
        }
        amount
      }
    }
  }
}
    `;
export const useListAgentTemplateQuery = <TData = ListAgentTemplateQuery, TError = unknown>(
  variables: ListAgentTemplateQueryVariables,
  options?: UseQueryOptions<ListAgentTemplateQuery, TError, TData>
) =>
  useQuery<ListAgentTemplateQuery, TError, TData>(
    ['listAgentTemplate', variables],
    useAxios<ListAgentTemplateQuery, ListAgentTemplateQueryVariables>(
      ListAgentTemplateDocument
    ).bind(null, variables),
    options
  );
export const GetMeDocument = `
    query getMe {
  auth {
    me {
      data {
        branches {
          id
          name
        }
        rolesList {
          id
          name
        }
        permission {
          myPermission
        }
        preference {
          language
          languageCode
          date
        }
        user {
          ...User
        }
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${UserFragmentDoc}
${MutationErrorFragmentDoc}`;
export const useGetMeQuery = <TData = GetMeQuery, TError = unknown>(
  variables?: GetMeQueryVariables,
  options?: UseQueryOptions<GetMeQuery, TError, TData>
) =>
  useQuery<GetMeQuery, TError, TData>(
    variables === undefined ? ['getMe'] : ['getMe', variables],
    useAxios<GetMeQuery, GetMeQueryVariables>(GetMeDocument).bind(null, variables),
    options
  );
export const GetUserAndBranchBalanceDocument = `
    query getUserAndBranchBalance {
  auth {
    me {
      data {
        user {
          userBalance {
            amount
            amountType
          }
          currentBranch {
            branchBalance {
              amount
              amountType
            }
          }
        }
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetUserAndBranchBalanceQuery = <
  TData = GetUserAndBranchBalanceQuery,
  TError = unknown
>(
  variables?: GetUserAndBranchBalanceQueryVariables,
  options?: UseQueryOptions<GetUserAndBranchBalanceQuery, TError, TData>
) =>
  useQuery<GetUserAndBranchBalanceQuery, TError, TData>(
    variables === undefined ? ['getUserAndBranchBalance'] : ['getUserAndBranchBalance', variables],
    useAxios<GetUserAndBranchBalanceQuery, GetUserAndBranchBalanceQueryVariables>(
      GetUserAndBranchBalanceDocument
    ).bind(null, variables),
    options
  );
export const GetBankListDocument = `
    query getBankList {
  bank {
    bank {
      list {
        id
        name
      }
    }
  }
}
    `;
export const useGetBankListQuery = <TData = GetBankListQuery, TError = unknown>(
  variables?: GetBankListQueryVariables,
  options?: UseQueryOptions<GetBankListQuery, TError, TData>
) =>
  useQuery<GetBankListQuery, TError, TData>(
    variables === undefined ? ['getBankList'] : ['getBankList', variables],
    useAxios<GetBankListQuery, GetBankListQueryVariables>(GetBankListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetUserBranchListDocument = `
    query getUserBranchList {
  bank {
    branch {
      list {
        id
        name
      }
    }
  }
}
    `;
export const useGetUserBranchListQuery = <TData = GetUserBranchListQuery, TError = unknown>(
  variables?: GetUserBranchListQueryVariables,
  options?: UseQueryOptions<GetUserBranchListQuery, TError, TData>
) =>
  useQuery<GetUserBranchListQuery, TError, TData>(
    variables === undefined ? ['getUserBranchList'] : ['getUserBranchList', variables],
    useAxios<GetUserBranchListQuery, GetUserBranchListQueryVariables>(
      GetUserBranchListDocument
    ).bind(null, variables),
    options
  );
export const GetConfigDocument = `
    query getConfig {
  config {
    countries {
      name
      code
    }
  }
}
    `;
export const useGetConfigQuery = <TData = GetConfigQuery, TError = unknown>(
  variables?: GetConfigQueryVariables,
  options?: UseQueryOptions<GetConfigQuery, TError, TData>
) =>
  useQuery<GetConfigQuery, TError, TData>(
    variables === undefined ? ['getConfig'] : ['getConfig', variables],
    useAxios<GetConfigQuery, GetConfigQueryVariables>(GetConfigDocument).bind(null, variables),
    options
  );
export const GetCooperativeUnionKymEditDataDocument = `
    query getCooperativeUnionKymEditData($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        data {
          nameOfInstitutionEn
          nameOfInstitutionNp
          institutionType
          natureOfBusinessEn
          natureOfBusinessNp
          regdDate
          vatOrPan
          noOfBranches
          regdNo
          issuingOffice
          regdAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          operatingOfficeAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          branchOfficeAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          phone
          fax
          contactEmail
          website
          postBoxNo
          noOfEmployee
          lastAgmDate
          nameOfBank
          accountNumber
          accountName
          applicantName
          applicantNameNp
          applicantDesignationEn
          applicantDesignationNp
          applicantEmail
          applicantContactNo
          applicantPanNo
          applicantDateOfMembership
          applicantHighestQualification
          applicantPermanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          applicantIsPermanentAndTemporaryAddrSame
          applicantTemporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          noOfMaleMemberCurrent
          noOfMaleMemberTarget
          noOfFemaleMemberCurrent
          noOfFemaleMemberTarget
          noOfInstitutionalMemberCurrent
          noOfInstitutionalMemberTarget
          cashAndCashEquivalentCurrent
          cashAndCashEquivalentTarget
          bankCurrent
          bankTarget
          investmentsCurrent
          investmentsTarget
          loanCurrent
          loanTarget
          nonCurrentAssetsCurrent
          nonCurrentAssetsTarget
          otherNonCurrentAssetsCurrent
          otherNonCurrentAssetsTarget
          shareCapitalCurrent
          shareCapitalTarget
          reserveAndSurplusCurrent
          reserveAndSurplusTarget
          savingDepositCurrent
          savingDepositTarget
          loanAccountCurrent
          loanAccountTarget
          capitalGrantCurrent
          capitalGrantTarget
          currentLiabilitiesCurrent
          currentLiabilitiesTarget
          nonCurrentLiabilitiesCurrent
          nonCurrentLiabilitiesTarget
          incomeFromFinancialInvestment
          incomeFromNonFinancialInvestment
          incomeFromInvestment
          incomeFromServiceOperation
          incomeFromSales
          otherIncome
          miscellaneousIncome
          purchase
          directExpense
          administrativeExpense
          financialCost
          riskManagementCost
          deferredTaxExpense
          directors {
            id
            fullName
            fullNameNp
            designationEn
            designationNp
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            isPermanentAndTemporaryAddressSame
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            dateOfMembership
            highestQualification
            mobileNumber
            email
            citizenshipNo
            trainingAttended {
              subjectOfTraining
              dateOfTraining
              trainingOrganization
            }
            panNo
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
          }
          accountOperators {
            id
            fullName
            fullNameNp
            designationEn
            designationNp
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            isPermanentAndTemporaryAddressSame
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            dateOfMembership
            highestQualification
            mobileNumber
            email
            citizenshipNo
            trainingAttended {
              subjectOfTraining
              dateOfTraining
              trainingOrganization
            }
            panNo
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
          }
          centralRepresentative {
            id
            fullName
            fullNameNp
            designationEn
            designationNp
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            isPermanentAndTemporaryAddressSame
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            dateOfMembership
            highestQualification
            mobileNumber
            email
            citizenshipNo
            trainingAttended {
              subjectOfTraining
              dateOfTraining
              trainingOrganization
            }
            panNo
            centralRepID
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
          }
          documents {
            fieldId
            identifiers: docData {
              identifier
              url
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCooperativeUnionKymEditDataQuery = <
  TData = GetCooperativeUnionKymEditDataQuery,
  TError = unknown
>(
  variables: GetCooperativeUnionKymEditDataQueryVariables,
  options?: UseQueryOptions<GetCooperativeUnionKymEditDataQuery, TError, TData>
) =>
  useQuery<GetCooperativeUnionKymEditDataQuery, TError, TData>(
    ['getCooperativeUnionKymEditData', variables],
    useAxios<GetCooperativeUnionKymEditDataQuery, GetCooperativeUnionKymEditDataQueryVariables>(
      GetCooperativeUnionKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetDashboardDayInfoDocument = `
    query getDashboardDayInfo {
  dashboard {
    myDayInfo {
      data {
        deposit {
          todayValue
          percent
          noOfTransaction
        }
        withdraw {
          todayValue
          percent
          noOfTransaction
        }
        cashInHand {
          todayValue
          percent
          fromVault
        }
      }
    }
  }
}
    `;
export const useGetDashboardDayInfoQuery = <TData = GetDashboardDayInfoQuery, TError = unknown>(
  variables?: GetDashboardDayInfoQueryVariables,
  options?: UseQueryOptions<GetDashboardDayInfoQuery, TError, TData>
) =>
  useQuery<GetDashboardDayInfoQuery, TError, TData>(
    variables === undefined ? ['getDashboardDayInfo'] : ['getDashboardDayInfo', variables],
    useAxios<GetDashboardDayInfoQuery, GetDashboardDayInfoQueryVariables>(
      GetDashboardDayInfoDocument
    ).bind(null, variables),
    options
  );
export const GetDashboardInfoDocument = `
    query getDashboardInfo {
  dashboard {
    dashboardInfo {
      data {
        pendingRequest {
          memberRequestCount
          withdrawSlipCount
          loanApplicationRequest
          loanDisbursementRequest
        }
        branchInfo {
          membersToApprove
          totalMembers
          percentofMemberRequest
          totalAccounts
          percentOfAccounts
        }
        coopInfo {
          totalMembers
          totalShareIssued
          totalBranch
        }
      }
    }
  }
}
    `;
export const useGetDashboardInfoQuery = <TData = GetDashboardInfoQuery, TError = unknown>(
  variables?: GetDashboardInfoQueryVariables,
  options?: UseQueryOptions<GetDashboardInfoQuery, TError, TData>
) =>
  useQuery<GetDashboardInfoQuery, TError, TData>(
    variables === undefined ? ['getDashboardInfo'] : ['getDashboardInfo', variables],
    useAxios<GetDashboardInfoQuery, GetDashboardInfoQueryVariables>(GetDashboardInfoDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetPreviousYearFundManagementDocument = `
    query getPreviousYearFundManagement {
  profitToFundManagement {
    previousYear {
      accountCode
      amount
      percent
    }
  }
}
    `;
export const useGetPreviousYearFundManagementQuery = <
  TData = GetPreviousYearFundManagementQuery,
  TError = unknown
>(
  variables?: GetPreviousYearFundManagementQueryVariables,
  options?: UseQueryOptions<GetPreviousYearFundManagementQuery, TError, TData>
) =>
  useQuery<GetPreviousYearFundManagementQuery, TError, TData>(
    variables === undefined
      ? ['getPreviousYearFundManagement']
      : ['getPreviousYearFundManagement', variables],
    useAxios<GetPreviousYearFundManagementQuery, GetPreviousYearFundManagementQueryVariables>(
      GetPreviousYearFundManagementDocument
    ).bind(null, variables),
    options
  );
export const GetEmployeeListDocument = `
    query getEmployeeList($filter: Filter, $pagination: Pagination) {
  hr {
    employee {
      employee {
        listEmployee(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              id
              employeeName
              employeeDepartment
              employeeContact
              employeeAddress {
                ...Address
              }
              employeeEmail
              employeeDateOfJoining
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${PaginationFragmentDoc}`;
export const useGetEmployeeListQuery = <TData = GetEmployeeListQuery, TError = unknown>(
  variables?: GetEmployeeListQueryVariables,
  options?: UseQueryOptions<GetEmployeeListQuery, TError, TData>
) =>
  useQuery<GetEmployeeListQuery, TError, TData>(
    variables === undefined ? ['getEmployeeList'] : ['getEmployeeList', variables],
    useAxios<GetEmployeeListQuery, GetEmployeeListQueryVariables>(GetEmployeeListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLeaveListDocument = `
    query getLeaveList($filter: Filter, $pagination: Pagination) {
  hr {
    employee {
      leave {
        listLeave(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              id
              employeeId
              employeeName
              reason
              leaveType
              leaveFrom
              leaveTo
              approver
              status
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetLeaveListQuery = <TData = GetLeaveListQuery, TError = unknown>(
  variables?: GetLeaveListQueryVariables,
  options?: UseQueryOptions<GetLeaveListQuery, TError, TData>
) =>
  useQuery<GetLeaveListQuery, TError, TData>(
    variables === undefined ? ['getLeaveList'] : ['getLeaveList', variables],
    useAxios<GetLeaveListQuery, GetLeaveListQueryVariables>(GetLeaveListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetSingleEmployeeDetailsDocument = `
    query getSingleEmployeeDetails($id: String!) {
  hr {
    employee {
      employee {
        getEmployee(id: $id) {
          record {
            id
            firstName
            middleName
            lastName
            dateOfBirth
            age
            gender
            maritalStatus
            workPhoneNumber
            workEmailAddress
            personalPhoneNumber
            personalEmailAddress
            educationDetails {
              instituteName
              degree_diploma
              specialization
              dateOfCompletion
            }
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            isTemporarySameAsPermanent
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            employeeLevelId
            departmentId
            designationId
            serviceCenter
            employmentType
            employeeStatus
            sourceOfHire
            workExperience {
              companyName
              designation
              salary
              address
            }
            salaryPaymentMode
            panNumber
            providentFundAccount
            salaryStructureAssignment
            jobApplicationId
            jobOffer
            appointmentLetter
            dateOfJoining
            reportsToId
            leaveApproverId
            expenseApproverId
            healthInsuranceProviderId
            healthInsuranceNumberId
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetSingleEmployeeDetailsQuery = <
  TData = GetSingleEmployeeDetailsQuery,
  TError = unknown
>(
  variables: GetSingleEmployeeDetailsQueryVariables,
  options?: UseQueryOptions<GetSingleEmployeeDetailsQuery, TError, TData>
) =>
  useQuery<GetSingleEmployeeDetailsQuery, TError, TData>(
    ['getSingleEmployeeDetails', variables],
    useAxios<GetSingleEmployeeDetailsQuery, GetSingleEmployeeDetailsQueryVariables>(
      GetSingleEmployeeDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetHrEmployeeOnboardingListDocument = `
    query getHREmployeeOnboardingList($filter: Filter, $pagination: Pagination) {
  hr {
    employeelifecycle {
      employeeOnboarding {
        listEmployeeOnboarding(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              activity
              email
              id
              name
              onboarding_status
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetHrEmployeeOnboardingListQuery = <
  TData = GetHrEmployeeOnboardingListQuery,
  TError = unknown
>(
  variables?: GetHrEmployeeOnboardingListQueryVariables,
  options?: UseQueryOptions<GetHrEmployeeOnboardingListQuery, TError, TData>
) =>
  useQuery<GetHrEmployeeOnboardingListQuery, TError, TData>(
    variables === undefined
      ? ['getHREmployeeOnboardingList']
      : ['getHREmployeeOnboardingList', variables],
    useAxios<GetHrEmployeeOnboardingListQuery, GetHrEmployeeOnboardingListQueryVariables>(
      GetHrEmployeeOnboardingListDocument
    ).bind(null, variables),
    options
  );
export const GetHrOnboardingFormStateDocument = `
    query getHROnboardingFormState($id: ID!) {
  hr {
    employeelifecycle {
      employeeOnboarding {
        getEmployeeOnboarding(id: $id) {
          data {
            applicantId
            serviceCenter
            dateOfJoining
            designation
            onboarding_status
            activity_details {
              isDone
              name
              userName
              role
              beginsOn
              duration
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetHrOnboardingFormStateQuery = <
  TData = GetHrOnboardingFormStateQuery,
  TError = unknown
>(
  variables: GetHrOnboardingFormStateQueryVariables,
  options?: UseQueryOptions<GetHrOnboardingFormStateQuery, TError, TData>
) =>
  useQuery<GetHrOnboardingFormStateQuery, TError, TData>(
    ['getHROnboardingFormState', variables],
    useAxios<GetHrOnboardingFormStateQuery, GetHrOnboardingFormStateQueryVariables>(
      GetHrOnboardingFormStateDocument
    ).bind(null, variables),
    options
  );
export const GetHrEmployeeTransferHistoryDocument = `
    query getHREmployeeTransferHistory($employeeId: ID!) {
  hr {
    employeelifecycle {
      employeeTransfer {
        queryEmployeeTransfer(employeeId: $employeeId) {
          branchArray {
            transferredFrom
            transferredTo
            transferDate
          }
          departArray {
            transferredFrom
            transferredTo
            transferredDate
          }
        }
      }
    }
  }
}
    `;
export const useGetHrEmployeeTransferHistoryQuery = <
  TData = GetHrEmployeeTransferHistoryQuery,
  TError = unknown
>(
  variables: GetHrEmployeeTransferHistoryQueryVariables,
  options?: UseQueryOptions<GetHrEmployeeTransferHistoryQuery, TError, TData>
) =>
  useQuery<GetHrEmployeeTransferHistoryQuery, TError, TData>(
    ['getHREmployeeTransferHistory', variables],
    useAxios<GetHrEmployeeTransferHistoryQuery, GetHrEmployeeTransferHistoryQueryVariables>(
      GetHrEmployeeTransferHistoryDocument
    ).bind(null, variables),
    options
  );
export const GetHrTransferListDocument = `
    query getHRTransferList($filter: Filter, $pagination: Pagination) {
  hr {
    employeelifecycle {
      employeeTransfer {
        listEmployeeTransfer(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              employeeId
              id
              name
              transferDate
              transferType
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetHrTransferListQuery = <TData = GetHrTransferListQuery, TError = unknown>(
  variables?: GetHrTransferListQueryVariables,
  options?: UseQueryOptions<GetHrTransferListQuery, TError, TData>
) =>
  useQuery<GetHrTransferListQuery, TError, TData>(
    variables === undefined ? ['getHRTransferList'] : ['getHRTransferList', variables],
    useAxios<GetHrTransferListQuery, GetHrTransferListQueryVariables>(
      GetHrTransferListDocument
    ).bind(null, variables),
    options
  );
export const GetHrSeperationListDocument = `
    query getHRSeperationList($filter: Filter, $pagination: Pagination) {
  hr {
    employeelifecycle {
      employeeSeparation {
        listEmployeeSeparation(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              employeeId
              id
              designation
              employeeId
              employeeName
              resignationLetterDate
            }
            cursor
          }
          PageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetHrSeperationListQuery = <TData = GetHrSeperationListQuery, TError = unknown>(
  variables?: GetHrSeperationListQueryVariables,
  options?: UseQueryOptions<GetHrSeperationListQuery, TError, TData>
) =>
  useQuery<GetHrSeperationListQuery, TError, TData>(
    variables === undefined ? ['getHRSeperationList'] : ['getHRSeperationList', variables],
    useAxios<GetHrSeperationListQuery, GetHrSeperationListQueryVariables>(
      GetHrSeperationListDocument
    ).bind(null, variables),
    options
  );
export const GetHrPromotionListDocument = `
    query getHRPromotionList($filter: Filter, $pagination: Pagination) {
  hr {
    employeelifecycle {
      employeePromotion {
        listEmployeePromotion(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              employeeId
              id
              newPromotion
              promotionDate
              promotionType
              employeeId
              employeeName
            }
            cursor
          }
          PageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetHrPromotionListQuery = <TData = GetHrPromotionListQuery, TError = unknown>(
  variables?: GetHrPromotionListQueryVariables,
  options?: UseQueryOptions<GetHrPromotionListQuery, TError, TData>
) =>
  useQuery<GetHrPromotionListQuery, TError, TData>(
    variables === undefined ? ['getHRPromotionList'] : ['getHRPromotionList', variables],
    useAxios<GetHrPromotionListQuery, GetHrPromotionListQueryVariables>(
      GetHrPromotionListDocument
    ).bind(null, variables),
    options
  );
export const GetHrExitListDocument = `
    query getHRExitList($filter: Filter, $pagination: Pagination) {
  hr {
    employeelifecycle {
      employeeExit {
        listEmployeeExit(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              employeeId
              id
              interviewer
              lastModifiedDate
              separationDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetHrExitListQuery = <TData = GetHrExitListQuery, TError = unknown>(
  variables?: GetHrExitListQueryVariables,
  options?: UseQueryOptions<GetHrExitListQuery, TError, TData>
) =>
  useQuery<GetHrExitListQuery, TError, TData>(
    variables === undefined ? ['getHRExitList'] : ['getHRExitList', variables],
    useAxios<GetHrExitListQuery, GetHrExitListQueryVariables>(GetHrExitListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetHrExistFormStateDocument = `
    query getHRExistFormState($id: ID!) {
  hr {
    employeelifecycle {
      employeeExit {
        getEmployeeExit(id: $id) {
          data {
            exitDate
            exitStatus
            futureIntentions
            interviewer
            others
            overallExp
            separationId
            suggestions
            checklists {
              activityName
              beginsOn
              done
              duration
              role
              user
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetHrExistFormStateQuery = <TData = GetHrExistFormStateQuery, TError = unknown>(
  variables: GetHrExistFormStateQueryVariables,
  options?: UseQueryOptions<GetHrExistFormStateQuery, TError, TData>
) =>
  useQuery<GetHrExistFormStateQuery, TError, TData>(
    ['getHRExistFormState', variables],
    useAxios<GetHrExistFormStateQuery, GetHrExistFormStateQueryVariables>(
      GetHrExistFormStateDocument
    ).bind(null, variables),
    options
  );
export const GetHrLifecycleEmployeeViewDocument = `
    query getHrLifecycleEmployeeView($id: String!) {
  hr {
    employee {
      employee {
        getEmployeeLifecycleView(id: $id) {
          data {
            age
            status
            branch
            companyName
            contactNumber
            department
            email
            gender
            id
            joiningDate
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetHrLifecycleEmployeeViewQuery = <
  TData = GetHrLifecycleEmployeeViewQuery,
  TError = unknown
>(
  variables: GetHrLifecycleEmployeeViewQueryVariables,
  options?: UseQueryOptions<GetHrLifecycleEmployeeViewQuery, TError, TData>
) =>
  useQuery<GetHrLifecycleEmployeeViewQuery, TError, TData>(
    ['getHrLifecycleEmployeeView', variables],
    useAxios<GetHrLifecycleEmployeeViewQuery, GetHrLifecycleEmployeeViewQueryVariables>(
      GetHrLifecycleEmployeeViewDocument
    ).bind(null, variables),
    options
  );
export const GetStaffPlanningListDocument = `
    query getStaffPlanningList($filter: Filter, $pagination: Pagination) {
  hr {
    recruitment {
      recruitment {
        listStaffPlanning(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              id
              staffPlanTitle
              vacancies
              open_position
              date {
                from
                to
              }
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetStaffPlanningListQuery = <TData = GetStaffPlanningListQuery, TError = unknown>(
  variables?: GetStaffPlanningListQueryVariables,
  options?: UseQueryOptions<GetStaffPlanningListQuery, TError, TData>
) =>
  useQuery<GetStaffPlanningListQuery, TError, TData>(
    variables === undefined ? ['getStaffPlanningList'] : ['getStaffPlanningList', variables],
    useAxios<GetStaffPlanningListQuery, GetStaffPlanningListQueryVariables>(
      GetStaffPlanningListDocument
    ).bind(null, variables),
    options
  );
export const GetJobOpeningListDocument = `
    query getJobOpeningList($filter: Filter, $pagination: Pagination) {
  hr {
    recruitment {
      recruitmentJobOpening {
        listJobOpening(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              id
              title
              status
              staffPlan
              designation
              department
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetJobOpeningListQuery = <TData = GetJobOpeningListQuery, TError = unknown>(
  variables?: GetJobOpeningListQueryVariables,
  options?: UseQueryOptions<GetJobOpeningListQuery, TError, TData>
) =>
  useQuery<GetJobOpeningListQuery, TError, TData>(
    variables === undefined ? ['getJobOpeningList'] : ['getJobOpeningList', variables],
    useAxios<GetJobOpeningListQuery, GetJobOpeningListQueryVariables>(
      GetJobOpeningListDocument
    ).bind(null, variables),
    options
  );
export const GetJobOfferListDocument = `
    query getJobOfferList($filter: Filter, $pagination: Pagination) {
  hr {
    recruitment {
      recruitmentJobOffer {
        listJobOffer(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              id
              name
              status
              offerDate
              email
              designation
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetJobOfferListQuery = <TData = GetJobOfferListQuery, TError = unknown>(
  variables?: GetJobOfferListQueryVariables,
  options?: UseQueryOptions<GetJobOfferListQuery, TError, TData>
) =>
  useQuery<GetJobOfferListQuery, TError, TData>(
    variables === undefined ? ['getJobOfferList'] : ['getJobOfferList', variables],
    useAxios<GetJobOfferListQuery, GetJobOfferListQueryVariables>(GetJobOfferListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAppointmentLetterListDocument = `
    query getAppointmentLetterList($filter: Filter, $pagination: Pagination) {
  hr {
    recruitment {
      recruitmentAppointmentLetter {
        listAppointmentLetter(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              id
              name
              probationPeriod
              offerDate
              email
              designation
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAppointmentLetterListQuery = <
  TData = GetAppointmentLetterListQuery,
  TError = unknown
>(
  variables?: GetAppointmentLetterListQueryVariables,
  options?: UseQueryOptions<GetAppointmentLetterListQuery, TError, TData>
) =>
  useQuery<GetAppointmentLetterListQuery, TError, TData>(
    variables === undefined
      ? ['getAppointmentLetterList']
      : ['getAppointmentLetterList', variables],
    useAxios<GetAppointmentLetterListQuery, GetAppointmentLetterListQueryVariables>(
      GetAppointmentLetterListDocument
    ).bind(null, variables),
    options
  );
export const GetJobApplicationListDocument = `
    query getJobApplicationList($filter: Filter, $pagination: Pagination) {
  hr {
    recruitment {
      recruitmentJobApplication {
        listJobApplication(filter: $filter, pagination: $pagination) {
          totalCount
          edges {
            node {
              id
              name
              jobPosting
              applicantStatus
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetJobApplicationListQuery = <TData = GetJobApplicationListQuery, TError = unknown>(
  variables?: GetJobApplicationListQueryVariables,
  options?: UseQueryOptions<GetJobApplicationListQuery, TError, TData>
) =>
  useQuery<GetJobApplicationListQuery, TError, TData>(
    variables === undefined ? ['getJobApplicationList'] : ['getJobApplicationList', variables],
    useAxios<GetJobApplicationListQuery, GetJobApplicationListQueryVariables>(
      GetJobApplicationListDocument
    ).bind(null, variables),
    options
  );
export const GetStaffPlanDocument = `
    query getStaffPlan($id: ID!) {
  hr {
    recruitment {
      recruitment {
        getStaffPlan(id: $id) {
          data {
            id
            branchId
            title
            date {
              from
              to
            }
            staffPlans {
              designation
              vacancies
              estimated_cost_per_employee
              estimated_cost
            }
            note
            total_vacancies
            total_cost_estimation
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetStaffPlanQuery = <TData = GetStaffPlanQuery, TError = unknown>(
  variables: GetStaffPlanQueryVariables,
  options?: UseQueryOptions<GetStaffPlanQuery, TError, TData>
) =>
  useQuery<GetStaffPlanQuery, TError, TData>(
    ['getStaffPlan', variables],
    useAxios<GetStaffPlanQuery, GetStaffPlanQueryVariables>(GetStaffPlanDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetJobOpeningDocument = `
    query getJobOpening($id: ID!) {
  hr {
    recruitment {
      recruitmentJobOpening {
        getJobOpening(id: $id) {
          data {
            id
            branchId
            title
            staffPlan
            department
            designation
            experienceLevel
            description
            salaryRange {
              min
              max
              default
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetJobOpeningQuery = <TData = GetJobOpeningQuery, TError = unknown>(
  variables: GetJobOpeningQueryVariables,
  options?: UseQueryOptions<GetJobOpeningQuery, TError, TData>
) =>
  useQuery<GetJobOpeningQuery, TError, TData>(
    ['getJobOpening', variables],
    useAxios<GetJobOpeningQuery, GetJobOpeningQueryVariables>(GetJobOpeningDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetJobOfferDocument = `
    query getJobOffer($id: ID!) {
  hr {
    recruitment {
      recruitmentJobOffer {
        getJobOffer(id: $id) {
          data {
            id
            jobApplicant
            jobStatus
            jobDesignation
            jobDepartment
            jobOfferDate
            jobOfferTerms {
              offerTerm
              value
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetJobOfferQuery = <TData = GetJobOfferQuery, TError = unknown>(
  variables: GetJobOfferQueryVariables,
  options?: UseQueryOptions<GetJobOfferQuery, TError, TData>
) =>
  useQuery<GetJobOfferQuery, TError, TData>(
    ['getJobOffer', variables],
    useAxios<GetJobOfferQuery, GetJobOfferQueryVariables>(GetJobOfferDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetJobApplicationDocument = `
    query getJobApplication($id: ID!) {
  hr {
    recruitment {
      recruitmentJobApplication {
        getJobApplication(id: $id) {
          data {
            id
            applicantName
            jobOpening
            personalEmailAddress
            personalPhoneNumber
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            tempSameAsPerm
            educationalDetails {
              instituteName
              degree_diploma
              specialization
              dateOfCompletion
            }
            experienceDetails {
              occupationName
              company
              fromDate
              toDate
              duration
              summary
            }
            applicationStatus
            applicationRating
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetJobApplicationQuery = <TData = GetJobApplicationQuery, TError = unknown>(
  variables: GetJobApplicationQueryVariables,
  options?: UseQueryOptions<GetJobApplicationQuery, TError, TData>
) =>
  useQuery<GetJobApplicationQuery, TError, TData>(
    ['getJobApplication', variables],
    useAxios<GetJobApplicationQuery, GetJobApplicationQueryVariables>(
      GetJobApplicationDocument
    ).bind(null, variables),
    options
  );
export const GetAppointmentLetterDocument = `
    query getAppointmentLetter($id: ID!) {
  hr {
    recruitment {
      recruitmentAppointmentLetter {
        getAppointmentLetter(id: $id) {
          data {
            appointmentLetterID
            jobApplication
            appointmentDate
            body
            appointmentTerms {
              title
              description
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetAppointmentLetterQuery = <TData = GetAppointmentLetterQuery, TError = unknown>(
  variables: GetAppointmentLetterQueryVariables,
  options?: UseQueryOptions<GetAppointmentLetterQuery, TError, TData>
) =>
  useQuery<GetAppointmentLetterQuery, TError, TData>(
    ['getAppointmentLetter', variables],
    useAxios<GetAppointmentLetterQuery, GetAppointmentLetterQueryVariables>(
      GetAppointmentLetterDocument
    ).bind(null, variables),
    options
  );
export const GetKymOverallFormStatusDocument = `
    query getKYMOverallFormStatus($id: ID!, $hasPressedNext: Boolean) {
  members {
    institution(includeRequiredErrors: $hasPressedNext) {
      overallFormStatus(id: $id) {
        accountOperatorDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        directorDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        institutionDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        sisterConcernDetails {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
      }
    }
  }
}
    `;
export const useGetKymOverallFormStatusQuery = <
  TData = GetKymOverallFormStatusQuery,
  TError = unknown
>(
  variables: GetKymOverallFormStatusQueryVariables,
  options?: UseQueryOptions<GetKymOverallFormStatusQuery, TError, TData>
) =>
  useQuery<GetKymOverallFormStatusQuery, TError, TData>(
    ['getKYMOverallFormStatus', variables],
    useAxios<GetKymOverallFormStatusQuery, GetKymOverallFormStatusQueryVariables>(
      GetKymOverallFormStatusDocument
    ).bind(null, variables),
    options
  );
export const GetInstitutionKymEditDataDocument = `
    query getInstitutionKymEditData($id: ID!, $hasPressedNext: Boolean) {
  members {
    institution(includeRequiredErrors: $hasPressedNext) {
      formState(id: $id) {
        data {
          institutionName
          institutionTypeId
          natureOfBusiness
          registrationDate
          vatOrPanNo
          operatingOfficeAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          noOfBranches
          branchOfficeAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          registeredAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          registeredNumber
          issuingOffice
          phone
          fax
          email
          website
          postBoxNo
          numberOfEmployee
          dateOfLastAGM
          bank
          accountNumber
          accountName
          natureOfTransaction
          annualTurnover
          initialDepositAmount
          expectedMonthlyTurnover
          expectedMonthlyTransaction
          accountType
          isCompanyStampCompulsory
          specialInstruction
          companyStamp
          accountHolderName
          accountHolderPhone
          accountHolderEmail
          accountHolderAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          accountHolderSignature
          accountHolderStamp
          sisterConcern {
            id
            name
            natureOfBusiness
            address
            phone
          }
          director {
            id
            name
            designation
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            isTemporaryAndPermanentAddressSame
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            dateOfMembership
            highestQualification
            mobileNo
            email
            citizenshipNo
            panNo
            isHeadOfOrganization
            isAffiliatedWithOtherFirms
            firmDetails {
              directorName
              institutionName
              address
              designation
              yearlyIncome
            }
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
          }
          accountOperator {
            id
            name
            contact
            email
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            isTemporaryAndPermanentAddressSame
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            designation
            panNo
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
          }
          documents {
            fieldId
            identifiers: docData {
              identifier
              url
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetInstitutionKymEditDataQuery = <
  TData = GetInstitutionKymEditDataQuery,
  TError = unknown
>(
  variables: GetInstitutionKymEditDataQueryVariables,
  options?: UseQueryOptions<GetInstitutionKymEditDataQuery, TError, TData>
) =>
  useQuery<GetInstitutionKymEditDataQuery, TError, TData>(
    ['getInstitutionKymEditData', variables],
    useAxios<GetInstitutionKymEditDataQuery, GetInstitutionKymEditDataQueryVariables>(
      GetInstitutionKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetSuppliersListDocument = `
    query getSuppliersList($filter: InvSupplierFilter, $pagination: Pagination) {
  inventory {
    suppliers {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            name
            location {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            phoneNo
            email
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetSuppliersListQuery = <TData = GetSuppliersListQuery, TError = unknown>(
  variables?: GetSuppliersListQueryVariables,
  options?: UseQueryOptions<GetSuppliersListQuery, TError, TData>
) =>
  useQuery<GetSuppliersListQuery, TError, TData>(
    variables === undefined ? ['getSuppliersList'] : ['getSuppliersList', variables],
    useAxios<GetSuppliersListQuery, GetSuppliersListQueryVariables>(GetSuppliersListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetInventoryRegisterListDocument = `
    query getInventoryRegisterList($filter: InventoryRegisterFilter, $pagination: Pagination) {
  inventory {
    register(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          itemId
          itemCode
          itemName
          transaction_type
          unitPrice
          totalCost
          quantity
        }
        cursor
      }
      pageInfo {
        ...Pagination
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetInventoryRegisterListQuery = <
  TData = GetInventoryRegisterListQuery,
  TError = unknown
>(
  variables?: GetInventoryRegisterListQueryVariables,
  options?: UseQueryOptions<GetInventoryRegisterListQuery, TError, TData>
) =>
  useQuery<GetInventoryRegisterListQuery, TError, TData>(
    variables === undefined
      ? ['getInventoryRegisterList']
      : ['getInventoryRegisterList', variables],
    useAxios<GetInventoryRegisterListQuery, GetInventoryRegisterListQueryVariables>(
      GetInventoryRegisterListDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryAdjustmentListDocument = `
    query getInventoryAdjustmentList($filter: InventoryAdjustmentFilter, $pagination: Pagination) {
  inventory {
    adjustment {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            date
            entryNo
            reference
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetInventoryAdjustmentListQuery = <
  TData = GetInventoryAdjustmentListQuery,
  TError = unknown
>(
  variables?: GetInventoryAdjustmentListQueryVariables,
  options?: UseQueryOptions<GetInventoryAdjustmentListQuery, TError, TData>
) =>
  useQuery<GetInventoryAdjustmentListQuery, TError, TData>(
    variables === undefined
      ? ['getInventoryAdjustmentList']
      : ['getInventoryAdjustmentList', variables],
    useAxios<GetInventoryAdjustmentListQuery, GetInventoryAdjustmentListQueryVariables>(
      GetInventoryAdjustmentListDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryAdjustmentTableDocument = `
    query getInventoryAdjustmentTable($filter: InventoryAdjustmentFilter, $pagination: Pagination) {
  inventory {
    adjustment {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            date
            entryNo
            reference
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetInventoryAdjustmentTableQuery = <
  TData = GetInventoryAdjustmentTableQuery,
  TError = unknown
>(
  variables?: GetInventoryAdjustmentTableQueryVariables,
  options?: UseQueryOptions<GetInventoryAdjustmentTableQuery, TError, TData>
) =>
  useQuery<GetInventoryAdjustmentTableQuery, TError, TData>(
    variables === undefined
      ? ['getInventoryAdjustmentTable']
      : ['getInventoryAdjustmentTable', variables],
    useAxios<GetInventoryAdjustmentTableQuery, GetInventoryAdjustmentTableQueryVariables>(
      GetInventoryAdjustmentTableDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryAdjustmentDetailsDocument = `
    query getInventoryAdjustmentDetails($id: ID!) {
  inventory {
    adjustment {
      detailAdjustment(id: $id) {
        data {
          referenceNo
          code
          date
          notes
          modeOfAdjustment
          itemDetails {
            itemId
            warehouseId
            itemName
            warehouseName
            newQuantity
            quantityAdjusted
            quantityAdjustedUnit
            newValue
            valueAdjusted
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryAdjustmentDetailsQuery = <
  TData = GetInventoryAdjustmentDetailsQuery,
  TError = unknown
>(
  variables: GetInventoryAdjustmentDetailsQueryVariables,
  options?: UseQueryOptions<GetInventoryAdjustmentDetailsQuery, TError, TData>
) =>
  useQuery<GetInventoryAdjustmentDetailsQuery, TError, TData>(
    ['getInventoryAdjustmentDetails', variables],
    useAxios<GetInventoryAdjustmentDetailsQuery, GetInventoryAdjustmentDetailsQueryVariables>(
      GetInventoryAdjustmentDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryItemsListDocument = `
    query getInventoryItemsList($filter: InvItemsDataFilter, $pagination: Pagination) {
  inventory {
    items {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            itemCode
            name
            isVariantItem
            type
            costPrice
            sellingPrice
            itemQuantity
            taxId
            itemsInWarehouses
            taxValue
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetInventoryItemsListQuery = <TData = GetInventoryItemsListQuery, TError = unknown>(
  variables?: GetInventoryItemsListQueryVariables,
  options?: UseQueryOptions<GetInventoryItemsListQuery, TError, TData>
) =>
  useQuery<GetInventoryItemsListQuery, TError, TData>(
    variables === undefined ? ['getInventoryItemsList'] : ['getInventoryItemsList', variables],
    useAxios<GetInventoryItemsListQuery, GetInventoryItemsListQueryVariables>(
      GetInventoryItemsListDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryUnitOfMeasureDocument = `
    query getInventoryUnitOfMeasure {
  inventory {
    unitOfMeasure {
      list {
        edges {
          node {
            name
            shortName
            acceptFraction
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryUnitOfMeasureQuery = <
  TData = GetInventoryUnitOfMeasureQuery,
  TError = unknown
>(
  variables?: GetInventoryUnitOfMeasureQueryVariables,
  options?: UseQueryOptions<GetInventoryUnitOfMeasureQuery, TError, TData>
) =>
  useQuery<GetInventoryUnitOfMeasureQuery, TError, TData>(
    variables === undefined
      ? ['getInventoryUnitOfMeasure']
      : ['getInventoryUnitOfMeasure', variables],
    useAxios<GetInventoryUnitOfMeasureQuery, GetInventoryUnitOfMeasureQueryVariables>(
      GetInventoryUnitOfMeasureDocument
    ).bind(null, variables),
    options
  );
export const GetItemCategoryListDocument = `
    query getItemCategoryList($filter: InvItemsGroupDataFilter, $pagination: Pagination) {
  inventory {
    itemsGroup {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            name
            parentCategory
            description
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetItemCategoryListQuery = <TData = GetItemCategoryListQuery, TError = unknown>(
  variables?: GetItemCategoryListQueryVariables,
  options?: UseQueryOptions<GetItemCategoryListQuery, TError, TData>
) =>
  useQuery<GetItemCategoryListQuery, TError, TData>(
    variables === undefined ? ['getItemCategoryList'] : ['getItemCategoryList', variables],
    useAxios<GetItemCategoryListQuery, GetItemCategoryListQueryVariables>(
      GetItemCategoryListDocument
    ).bind(null, variables),
    options
  );
export const GetUnitsListDocument = `
    query getUnitsList($filter: InvUnitOfMeasureDataFilter, $pagination: Pagination) {
  inventory {
    unitOfMeasure {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            name
            shortName
            description
            acceptFraction
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetUnitsListQuery = <TData = GetUnitsListQuery, TError = unknown>(
  variables?: GetUnitsListQueryVariables,
  options?: UseQueryOptions<GetUnitsListQuery, TError, TData>
) =>
  useQuery<GetUnitsListQuery, TError, TData>(
    variables === undefined ? ['getUnitsList'] : ['getUnitsList', variables],
    useAxios<GetUnitsListQuery, GetUnitsListQueryVariables>(GetUnitsListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetInventoryItemGroupsDetailsDocument = `
    query getInventoryItemGroupsDetails($id: ID!) {
  inventory {
    itemsGroup {
      getGroupdetails(id: $id) {
        data {
          groupId
          groupName
          underGroup
          description
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryItemGroupsDetailsQuery = <
  TData = GetInventoryItemGroupsDetailsQuery,
  TError = unknown
>(
  variables: GetInventoryItemGroupsDetailsQueryVariables,
  options?: UseQueryOptions<GetInventoryItemGroupsDetailsQuery, TError, TData>
) =>
  useQuery<GetInventoryItemGroupsDetailsQuery, TError, TData>(
    ['getInventoryItemGroupsDetails', variables],
    useAxios<GetInventoryItemGroupsDetailsQuery, GetInventoryItemGroupsDetailsQueryVariables>(
      GetInventoryItemGroupsDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryUnitsDetailsDocument = `
    query getInventoryUnitsDetails($id: ID!) {
  inventory {
    unitOfMeasure {
      getUnitDetails(id: $id) {
        data {
          description
          shortName
          unitName
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryUnitsDetailsQuery = <
  TData = GetInventoryUnitsDetailsQuery,
  TError = unknown
>(
  variables: GetInventoryUnitsDetailsQueryVariables,
  options?: UseQueryOptions<GetInventoryUnitsDetailsQuery, TError, TData>
) =>
  useQuery<GetInventoryUnitsDetailsQuery, TError, TData>(
    ['getInventoryUnitsDetails', variables],
    useAxios<GetInventoryUnitsDetailsQuery, GetInventoryUnitsDetailsQueryVariables>(
      GetInventoryUnitsDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryItemsDetailsDocument = `
    query getInventoryItemsDetails($id: ID!) {
  inventory {
    items {
      getItemDetails(id: $id) {
        data {
          itemName
          itemCode
          itemGroup
          unit
          tax
          variants {
            costPrice
            itemName
            sellingPrice
            sku
          }
          ledgerDetail {
            purchaseLedger
            purchaseReturnLedger
            salesLedger
            salesReturnLedger
          }
          reorderLevel
          valuationMethod
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryItemsDetailsQuery = <
  TData = GetInventoryItemsDetailsQuery,
  TError = unknown
>(
  variables: GetInventoryItemsDetailsQueryVariables,
  options?: UseQueryOptions<GetInventoryItemsDetailsQuery, TError, TData>
) =>
  useQuery<GetInventoryItemsDetailsQuery, TError, TData>(
    ['getInventoryItemsDetails', variables],
    useAxios<GetInventoryItemsDetailsQuery, GetInventoryItemsDetailsQueryVariables>(
      GetInventoryItemsDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetItemsFormStateDocument = `
    query getItemsFormState($id: ID!) {
  inventory {
    items {
      getItem(id: $id) {
        data {
          itemName
          itemCode
          itemGroup
          primaryUnit
          sellingPrice
          costPrice
          tax
          ledgers {
            salesLedger
            purchaseLedger
            salesReturnLedger
            purchaseReturnLedger
          }
          isVariantItem
          variants {
            variantName
            options
          }
          variantList {
            id
            sku
            itemName
            sellingPrice
            costPrice
          }
          reorderLevel
          valuationMethod
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetItemsFormStateQuery = <TData = GetItemsFormStateQuery, TError = unknown>(
  variables: GetItemsFormStateQueryVariables,
  options?: UseQueryOptions<GetItemsFormStateQuery, TError, TData>
) =>
  useQuery<GetItemsFormStateQuery, TError, TData>(
    ['getItemsFormState', variables],
    useAxios<GetItemsFormStateQuery, GetItemsFormStateQueryVariables>(
      GetItemsFormStateDocument
    ).bind(null, variables),
    options
  );
export const GetUnitsFormStateDetailsDocument = `
    query getUnitsFormStateDetails($id: ID!) {
  inventory {
    unitOfMeasure {
      getUnitDetails(id: $id) {
        data {
          unitName
          shortName
          description
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetUnitsFormStateDetailsQuery = <
  TData = GetUnitsFormStateDetailsQuery,
  TError = unknown
>(
  variables: GetUnitsFormStateDetailsQueryVariables,
  options?: UseQueryOptions<GetUnitsFormStateDetailsQuery, TError, TData>
) =>
  useQuery<GetUnitsFormStateDetailsQuery, TError, TData>(
    ['getUnitsFormStateDetails', variables],
    useAxios<GetUnitsFormStateDetailsQuery, GetUnitsFormStateDetailsQueryVariables>(
      GetUnitsFormStateDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryItemsFormStateDetailsDocument = `
    query getInventoryItemsFormStateDetails($id: ID!) {
  inventory {
    items {
      getItemDetails(id: $id) {
        data {
          itemName
          itemCode
          itemGroup
          unit
          tax
          variants {
            sku
            itemName
            sellingPrice
            costPrice
          }
          ledgerDetail {
            salesLedger
            purchaseLedger
            salesReturnLedger
            purchaseReturnLedger
          }
          reorderLevel
          valuationMethod
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryItemsFormStateDetailsQuery = <
  TData = GetInventoryItemsFormStateDetailsQuery,
  TError = unknown
>(
  variables: GetInventoryItemsFormStateDetailsQueryVariables,
  options?: UseQueryOptions<GetInventoryItemsFormStateDetailsQuery, TError, TData>
) =>
  useQuery<GetInventoryItemsFormStateDetailsQuery, TError, TData>(
    ['getInventoryItemsFormStateDetails', variables],
    useAxios<
      GetInventoryItemsFormStateDetailsQuery,
      GetInventoryItemsFormStateDetailsQueryVariables
    >(GetInventoryItemsFormStateDetailsDocument).bind(null, variables),
    options
  );
export const GetInventorySuppliersDetailsDocument = `
    query getInventorySuppliersDetails($id: ID!) {
  inventory {
    suppliers {
      supplierDetail(id: $id) {
        data {
          supplierName
          supplierCode
          panNo
          contactNo
          email
          location {
            ...Address
          }
          contactPersonName
          contactPersonPhoneNo
          openingBalance
          creditTerms
          creditLimit
          registrationDoc {
            identifier
            url
          }
          applicationDoc {
            identifier
            url
          }
          legalStatusDoc {
            identifier
            url
          }
          othersDoc {
            identifier
            url
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetInventorySuppliersDetailsQuery = <
  TData = GetInventorySuppliersDetailsQuery,
  TError = unknown
>(
  variables: GetInventorySuppliersDetailsQueryVariables,
  options?: UseQueryOptions<GetInventorySuppliersDetailsQuery, TError, TData>
) =>
  useQuery<GetInventorySuppliersDetailsQuery, TError, TData>(
    ['getInventorySuppliersDetails', variables],
    useAxios<GetInventorySuppliersDetailsQuery, GetInventorySuppliersDetailsQueryVariables>(
      GetInventorySuppliersDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetInventorySuppliersFormstateDetailsDocument = `
    query getInventorySuppliersFormstateDetails($id: ID!) {
  inventory {
    suppliers {
      getSupplier(id: $id) {
        data {
          name
          supplierCode
          panNo
          contactNo
          email
          address {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          contactPersonName
          contactPersonPhoneNo
          openingBalance
          creditTerms
          creditLimit
          registrationDoc {
            identifier
            url
          }
          applicationDoc {
            identifier
            url
          }
          legalStatusDoc {
            identifier
            url
          }
          othersDoc {
            identifier
            url
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventorySuppliersFormstateDetailsQuery = <
  TData = GetInventorySuppliersFormstateDetailsQuery,
  TError = unknown
>(
  variables: GetInventorySuppliersFormstateDetailsQueryVariables,
  options?: UseQueryOptions<GetInventorySuppliersFormstateDetailsQuery, TError, TData>
) =>
  useQuery<GetInventorySuppliersFormstateDetailsQuery, TError, TData>(
    ['getInventorySuppliersFormstateDetails', variables],
    useAxios<
      GetInventorySuppliersFormstateDetailsQuery,
      GetInventorySuppliersFormstateDetailsQueryVariables
    >(GetInventorySuppliersFormstateDetailsDocument).bind(null, variables),
    options
  );
export const GetInventoryWarehouseDetailsDocument = `
    query getInventoryWarehouseDetails($id: ID!) {
  inventory {
    warehouse {
      getWarehouseDetails(id: $id) {
        data {
          id
          name
          phoneNumber
          address
          branchId
          branchName
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryWarehouseDetailsQuery = <
  TData = GetInventoryWarehouseDetailsQuery,
  TError = unknown
>(
  variables: GetInventoryWarehouseDetailsQueryVariables,
  options?: UseQueryOptions<GetInventoryWarehouseDetailsQuery, TError, TData>
) =>
  useQuery<GetInventoryWarehouseDetailsQuery, TError, TData>(
    ['getInventoryWarehouseDetails', variables],
    useAxios<GetInventoryWarehouseDetailsQuery, GetInventoryWarehouseDetailsQueryVariables>(
      GetInventoryWarehouseDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetWarehouseListDocument = `
    query getWarehouseList($paginate: Pagination!, $filter: Filter) {
  inventory {
    warehouse {
      listWarehouses(paginate: $paginate, filter: $filter) {
        totalCount
        edges {
          node {
            id
            name
            phoneNumber
            address
            branchId
            branchName
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetWarehouseListQuery = <TData = GetWarehouseListQuery, TError = unknown>(
  variables: GetWarehouseListQueryVariables,
  options?: UseQueryOptions<GetWarehouseListQuery, TError, TData>
) =>
  useQuery<GetWarehouseListQuery, TError, TData>(
    ['getWarehouseList', variables],
    useAxios<GetWarehouseListQuery, GetWarehouseListQueryVariables>(GetWarehouseListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetInventoryWarehouseTransferDocument = `
    query getInventoryWarehouseTransfer($filter: WarehouseTransferFilter, $pagination: Pagination!) {
  inventory {
    warehouse {
      listTransfers(filter: $filter, paginate: $pagination) {
        totalCount
        edges {
          node {
            id
            date
            entryNo
            reference
            sourceWarehouseId
            sourceWarehouseName
            destinationWarehouseId
            destinationWarehouseName
            status
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetInventoryWarehouseTransferQuery = <
  TData = GetInventoryWarehouseTransferQuery,
  TError = unknown
>(
  variables: GetInventoryWarehouseTransferQueryVariables,
  options?: UseQueryOptions<GetInventoryWarehouseTransferQuery, TError, TData>
) =>
  useQuery<GetInventoryWarehouseTransferQuery, TError, TData>(
    ['getInventoryWarehouseTransfer', variables],
    useAxios<GetInventoryWarehouseTransferQuery, GetInventoryWarehouseTransferQueryVariables>(
      GetInventoryWarehouseTransferDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryWarehouseRequestTransferDetailsDocument = `
    query getInventoryWarehouseRequestTransferDetails($id: ID!) {
  inventory {
    warehouse {
      getWarehouseTransferDetail(id: $id) {
        data {
          transferEntry {
            id
            date
            entryNo
            reference
            sourceWarehouseId
            sourceWarehouseName
            destinationWarehouseId
            destinationWarehouseName
            status
          }
          branchName
          authorizedReceiver
          authorizedSender
          description
          itemDetails {
            itemName
            quantity
            rate
            amount
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryWarehouseRequestTransferDetailsQuery = <
  TData = GetInventoryWarehouseRequestTransferDetailsQuery,
  TError = unknown
>(
  variables: GetInventoryWarehouseRequestTransferDetailsQueryVariables,
  options?: UseQueryOptions<GetInventoryWarehouseRequestTransferDetailsQuery, TError, TData>
) =>
  useQuery<GetInventoryWarehouseRequestTransferDetailsQuery, TError, TData>(
    ['getInventoryWarehouseRequestTransferDetails', variables],
    useAxios<
      GetInventoryWarehouseRequestTransferDetailsQuery,
      GetInventoryWarehouseRequestTransferDetailsQueryVariables
    >(GetInventoryWarehouseRequestTransferDetailsDocument).bind(null, variables),
    options
  );
export const GetWarehouseFormStateDetailsDocument = `
    query getWarehouseFormStateDetails($id: ID!) {
  inventory {
    warehouse {
      getWarehouse(id: $id) {
        data {
          name
          phoneNumber
          address
          branchId
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetWarehouseFormStateDetailsQuery = <
  TData = GetWarehouseFormStateDetailsQuery,
  TError = unknown
>(
  variables: GetWarehouseFormStateDetailsQueryVariables,
  options?: UseQueryOptions<GetWarehouseFormStateDetailsQuery, TError, TData>
) =>
  useQuery<GetWarehouseFormStateDetailsQuery, TError, TData>(
    ['getWarehouseFormStateDetails', variables],
    useAxios<GetWarehouseFormStateDetailsQuery, GetWarehouseFormStateDetailsQueryVariables>(
      GetWarehouseFormStateDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymOptionsDocument = `
    query getIndividualKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_INDIVIDUAL}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymOptionsQuery = <
  TData = GetIndividualKymOptionsQuery,
  TError = unknown
>(
  variables: GetIndividualKymOptionsQueryVariables,
  options?: UseQueryOptions<GetIndividualKymOptionsQuery, TError, TData>
) =>
  useQuery<GetIndividualKymOptionsQuery, TError, TData>(
    ['getIndividualKYMOptions', variables],
    useAxios<GetIndividualKymOptionsQuery, GetIndividualKymOptionsQueryVariables>(
      GetIndividualKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetInstitutionKymOptionsDocument = `
    query getInstitutionKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_INSTITUTION}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetInstitutionKymOptionsQuery = <
  TData = GetInstitutionKymOptionsQuery,
  TError = unknown
>(
  variables: GetInstitutionKymOptionsQueryVariables,
  options?: UseQueryOptions<GetInstitutionKymOptionsQuery, TError, TData>
) =>
  useQuery<GetInstitutionKymOptionsQuery, TError, TData>(
    ['getInstitutionKYMOptions', variables],
    useAxios<GetInstitutionKymOptionsQuery, GetInstitutionKymOptionsQueryVariables>(
      GetInstitutionKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetCooperativeKymOptionsDocument = `
    query getCooperativeKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_COOP}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetCooperativeKymOptionsQuery = <
  TData = GetCooperativeKymOptionsQuery,
  TError = unknown
>(
  variables: GetCooperativeKymOptionsQueryVariables,
  options?: UseQueryOptions<GetCooperativeKymOptionsQuery, TError, TData>
) =>
  useQuery<GetCooperativeKymOptionsQuery, TError, TData>(
    ['getCooperativeKYMOptions', variables],
    useAxios<GetCooperativeKymOptionsQuery, GetCooperativeKymOptionsQueryVariables>(
      GetCooperativeKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetCoopUnionKymOptionsDocument = `
    query getCoopUnionKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_COOP_UNION}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetCoopUnionKymOptionsQuery = <
  TData = GetCoopUnionKymOptionsQuery,
  TError = unknown
>(
  variables: GetCoopUnionKymOptionsQueryVariables,
  options?: UseQueryOptions<GetCoopUnionKymOptionsQuery, TError, TData>
) =>
  useQuery<GetCoopUnionKymOptionsQuery, TError, TData>(
    ['getCoopUnionKYMOptions', variables],
    useAxios<GetCoopUnionKymOptionsQuery, GetCoopUnionKymOptionsQueryVariables>(
      GetCoopUnionKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetKymCooperativeFormDataDocument = `
    query getKYMCooperativeFormData($id: ID!) {
  members {
    cooperative {
      formState(id: $id) {
        data {
          documents {
            identifiers: docData {
              identifier
              url
            }
            fieldId
          }
          nameOfOrganization
          regdNumber
          regdDate
          regdOffice
          registeredAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          operatingAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          email
          website
          contactNumber
          noOfMaleMembers
          noOfFemaleMembers
          noOfOtherMembers
          lastAuditDate
          lastAgmDate
          representativeFullName
          representativeDesignatiton
          representativeEmail
          representativeContactNumber
          representativePanNo
          permanentRepresentativeAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isPermanentAndTemporaryAddressSame
          temporaryRepresentativeAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          cooperativeTypeId
          mainServiceProduct
          noOfMaleEmployee
          noOfFemaleEmployee
          totalEmployee
          shareCapital
          reserveAndSurplus
          savingDeposit
          loanAccount
          capitalGrant
          currentLiabilities
          nonCurrentLiabilities
          cashAndCashEquivalent
          bank
          investments
          loan
          nonCurrentAssets
          otherNonCurrentAssets
          totalAssets
          accountHoldersName
          hasTCAccepted
          vatNo
          directorDetails {
            id
            nameEn: fullName
            designation
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
            isPermanentAndTemporaryAddressSame
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            dateOfMembership
            highestQualification
            contactNumber
            email
            citizenshipNo
            panNo
            documents {
              fieldId
            }
          }
          accountOperator {
            id
            nameEn: fullName
            designation
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            documents {
              fieldId
              identifiers: docData {
                identifier
                url
              }
            }
            isPermanentAndTemporaryAddressSame
            temporaryAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            dateOfMembership
            highestQualification
            contactNumber
            email
            citizenshipNo
            panNo
            coopRelatedTraining {
              subjectOfTraining
              dateOfTraining
              trainingOrganization
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetKymCooperativeFormDataQuery = <
  TData = GetKymCooperativeFormDataQuery,
  TError = unknown
>(
  variables: GetKymCooperativeFormDataQueryVariables,
  options?: UseQueryOptions<GetKymCooperativeFormDataQuery, TError, TData>
) =>
  useQuery<GetKymCooperativeFormDataQuery, TError, TData>(
    ['getKYMCooperativeFormData', variables],
    useAxios<GetKymCooperativeFormDataQuery, GetKymCooperativeFormDataQueryVariables>(
      GetKymCooperativeFormDataDocument
    ).bind(null, variables),
    options
  );
export const GetKymIndividualFormDataDocument = `
    query getKYMIndividualFormData($id: String!) {
  members {
    individual(id: $id) {
      formState {
        data {
          firstName
          middleName
          lastName
          genderId
          dateOfBirth
          ethnicityId
          nationalityId
          educationQualificationId
          religionId
          educationQualificationId
          religionId
          panNo
          mobileNumber
          phoneNumber
          email
          landlordName
          landlordContact
          maritalStatusId
          professionId
          otherProfession
          isForeignEmployment
          foreignEmpCountryId
          typeOfVisaId
          foreignEstimatedAnnualIncome
          annualIncomeSourceId
          purposeId
          isMemberOfAnotherCooperative
          otherCoopName
          otherCoopBranchId
          otherCoopMemberId
          firstIntroducerId
          secondIntroducerId
          isFamilyAMember
          initialShare
          initialSaving
          initialLoan
          otherFinancialAmount
          estimatedAnnualTransactionAmount
          estimatedAnnualLoanAmount
          estimatedAnnualTransactionFrequencyId
          estimatedAnnualDepositAmount
          isPoliticallyExposed
          politicallyExposedDetails
          hasBeneficialOwner
          beneficialRelationshipId
          beneficialFullName
          isConvicted
          convictedDetails
          hasForeignResidentialPermit
          foreignResidentialPermitTypeId
          declarationAgreement
          mainOccupation {
            registrationNo
            address
            contact
            establishedDate
            estimatedAnnualIncome
            id
            isOwner
            occupationId
            orgName
            panVatNo
          }
          incomeSource {
            amount
            id
            incomeSource
          }
          spouseOccupation {
            registrationNo
            address
            contact
            establishedDate
            estimatedAnnualIncome
            id
            isOwner
            occupationId
            orgName
            panVatNo
          }
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          sameTempAsPermanentAddress
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          identificationSelection
          identification {
            date
            id
            identificationNo
            idType
            place
          }
          familyCoopMembers {
            dateOfBirth
            familyMemberId
            fullName
            id
            relationshipId
          }
          familyMembers {
            dateOfBirth
            documents {
              identifiers: docData {
                identifier
                url
              }
              fieldId
            }
            familyMemberId
            fullName
            id
            relationshipId
          }
          documents {
            identifiers: docData {
              identifier
              url
            }
            fieldId
          }
        }
      }
    }
  }
}
    `;
export const useGetKymIndividualFormDataQuery = <
  TData = GetKymIndividualFormDataQuery,
  TError = unknown
>(
  variables: GetKymIndividualFormDataQueryVariables,
  options?: UseQueryOptions<GetKymIndividualFormDataQuery, TError, TData>
) =>
  useQuery<GetKymIndividualFormDataQuery, TError, TData>(
    ['getKYMIndividualFormData', variables],
    useAxios<GetKymIndividualFormDataQuery, GetKymIndividualFormDataQueryVariables>(
      GetKymIndividualFormDataDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductDetailsDataDocument = `
    query getLoanProductDetailsData($id: ID!) {
  settings {
    general {
      loanProducts {
        formState(id: $id) {
          data {
            ...LoanProduct
          }
          error {
            ...QueryError
          }
        }
      }
    }
  }
}
    ${LoanProductFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetLoanProductDetailsDataQuery = <
  TData = GetLoanProductDetailsDataQuery,
  TError = unknown
>(
  variables: GetLoanProductDetailsDataQueryVariables,
  options?: UseQueryOptions<GetLoanProductDetailsDataQuery, TError, TData>
) =>
  useQuery<GetLoanProductDetailsDataQuery, TError, TData>(
    ['getLoanProductDetailsData', variables],
    useAxios<GetLoanProductDetailsDataQuery, GetLoanProductDetailsDataQueryVariables>(
      GetLoanProductDetailsDataDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductsListDocument = `
    query getLoanProductsList($memberId: ID!, $productTypeId: ID!, $productSubTypeId: ID!) {
  loanAccount {
    getProductList(
      memberId: $memberId
      productSubTypeId: $productSubTypeId
      productType: $productTypeId
    ) {
      allowed {
        id
        productName
      }
      notAllowed {
        data {
          id
          productName
        }
        error
      }
    }
  }
}
    `;
export const useGetLoanProductsListQuery = <TData = GetLoanProductsListQuery, TError = unknown>(
  variables: GetLoanProductsListQueryVariables,
  options?: UseQueryOptions<GetLoanProductsListQuery, TError, TData>
) =>
  useQuery<GetLoanProductsListQuery, TError, TData>(
    ['getLoanProductsList', variables],
    useAxios<GetLoanProductsListQuery, GetLoanProductsListQueryVariables>(
      GetLoanProductsListDocument
    ).bind(null, variables),
    options
  );
export const GetProductCriteriaDocument = `
    query getProductCriteria($productId: ID!) {
  loanAccount {
    getProductCriteria(productId: $productId) {
      data {
        gender
        minAge
        maxAge
        ethnicity
        educationQualification
        occupation
        foreignEmployment
        institutionType
        cooperativeUnion
        cooperativeType
        maritalStatus
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetProductCriteriaQuery = <TData = GetProductCriteriaQuery, TError = unknown>(
  variables: GetProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetProductCriteriaQuery, TError, TData>(
    ['getProductCriteria', variables],
    useAxios<GetProductCriteriaQuery, GetProductCriteriaQueryVariables>(
      GetProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountTypeDocument = `
    query getLoanAccountType($productTypeId: String) {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
          }
          productSubTypes(productTypeID: $productTypeId) {
            id
            productSubType
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanAccountTypeQuery = <TData = GetLoanAccountTypeQuery, TError = unknown>(
  variables?: GetLoanAccountTypeQueryVariables,
  options?: UseQueryOptions<GetLoanAccountTypeQuery, TError, TData>
) =>
  useQuery<GetLoanAccountTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanAccountType'] : ['getLoanAccountType', variables],
    useAxios<GetLoanAccountTypeQuery, GetLoanAccountTypeQueryVariables>(
      GetLoanAccountTypeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductTypesDocument = `
    query getLoanProductTypes {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductTypesQuery = <TData = GetLoanProductTypesQuery, TError = unknown>(
  variables?: GetLoanProductTypesQueryVariables,
  options?: UseQueryOptions<GetLoanProductTypesQuery, TError, TData>
) =>
  useQuery<GetLoanProductTypesQuery, TError, TData>(
    variables === undefined ? ['getLoanProductTypes'] : ['getLoanProductTypes', variables],
    useAxios<GetLoanProductTypesQuery, GetLoanProductTypesQueryVariables>(
      GetLoanProductTypesDocument
    ).bind(null, variables),
    options
  );
export const GetCollateralListDocument = `
    query getCollateralList {
  settings {
    general {
      loan {
        general {
          collateralList {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetCollateralListQuery = <TData = GetCollateralListQuery, TError = unknown>(
  variables?: GetCollateralListQueryVariables,
  options?: UseQueryOptions<GetCollateralListQuery, TError, TData>
) =>
  useQuery<GetCollateralListQuery, TError, TData>(
    variables === undefined ? ['getCollateralList'] : ['getCollateralList', variables],
    useAxios<GetCollateralListQuery, GetCollateralListQueryVariables>(
      GetCollateralListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanListDocument = `
    query getLoanList($paginate: Pagination, $filter: Filter) {
  loanAccount {
    list(paginate: $paginate, filter: $filter) {
      totalCount
      edges {
        cursor
        node {
          id
          appliedLoanAmount
          totalSanctionedAmount
          member {
            id
            name
            code
            profilePicUrl
          }
          product {
            productName
          }
          LoanAccountName
          createdAt
          closedDate
          appliedDate
          approvedDate
        }
      }
      pageInfo {
        endCursor
        startCursor
        hasNextPage
        hasPreviousPage
      }
    }
  }
}
    `;
export const useGetLoanListQuery = <TData = GetLoanListQuery, TError = unknown>(
  variables?: GetLoanListQueryVariables,
  options?: UseQueryOptions<GetLoanListQuery, TError, TData>
) =>
  useQuery<GetLoanListQuery, TError, TData>(
    variables === undefined ? ['getLoanList'] : ['getLoanList', variables],
    useAxios<GetLoanListQuery, GetLoanListQueryVariables>(GetLoanListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanInstallmentsDocument = `
    query getLoanInstallments($productId: ID!, $gracePeriod: LoanAccountGraceInput, $sanctionAmount: Int!, $tenure: Int!, $interest: Float!, $repaymentScheme: LoanRepaymentScheme!, $installmentFrequency: InstallmentFrequency, $disburseDate: Localized, $installmentBeginDate: Localized) {
  loanAccount {
    getLoanInstallments(
      interest: $interest
      gracePeriod: $gracePeriod
      productId: $productId
      repaymentScheme: $repaymentScheme
      sanctionAmount: $sanctionAmount
      tenure: $tenure
      installmentFrequency: $installmentFrequency
      disburseDate: $disburseDate
      installmentBeginDate: $installmentBeginDate
    ) {
      data {
        total
        totalInterest
        totalPrincipal
        installments {
          interest
          installmentDate
          installmentNo
          payment
          principal
          remainingPrincipal
          interest
        }
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanInstallmentsQuery = <TData = GetLoanInstallmentsQuery, TError = unknown>(
  variables: GetLoanInstallmentsQueryVariables,
  options?: UseQueryOptions<GetLoanInstallmentsQuery, TError, TData>
) =>
  useQuery<GetLoanInstallmentsQuery, TError, TData>(
    ['getLoanInstallments', variables],
    useAxios<GetLoanInstallmentsQuery, GetLoanInstallmentsQueryVariables>(
      GetLoanInstallmentsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanApplicationDetailsDocument = `
    query getLoanApplicationDetails($id: ID!) {
  loanAccount {
    formState(id: $id) {
      data {
        memberId
        productType
        productSubType
        productId
        loanAccountName
        appliedLoanAmount
        installmentFrequency
        collateralData {
          collateralType
          ownerName
          relation
          sheetNo
          plotNo
          kittaNo
          area
          buildingType
          constructionType
          valuatorId
          noOfStorey
          fmvMaxAmount
          dvMinAmount
          valuationMethod
          valuationPercent
          collaterallValuation
          collateralDescription
          collateralFiles
          valuationFiles
          vehicleName
          vehicleModelNo
          vehicleRegistrationNo
          vehicleNo
          vehicleSeatCapacity
          vehicleCapacity
          vehicleType
          vehicleFuelType
          documentName
          valuationAmount
          description
        }
        gurantee_details {
          accountId
          guranteeAmount
          maxGuranteeAmountLimit
          memberId
          totalAmount
          accountName
        }
        gracePeriod {
          principalGracePeriod
          interestGracePeriod
        }
        disbursementDate
        installmentBeginDate
        linkedAccountId
        totalValuation
        totalSanctionedAmount
        justifySanction
        interestAuthority
        interestDoc {
          identifier
          url
        }
        intrestRate
        tenure
        tenureType
        repaymentScheme
        loanProcessingCharge {
          amount
          ledgerName
          serviceName
        }
        note
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanApplicationDetailsQuery = <
  TData = GetLoanApplicationDetailsQuery,
  TError = unknown
>(
  variables: GetLoanApplicationDetailsQueryVariables,
  options?: UseQueryOptions<GetLoanApplicationDetailsQuery, TError, TData>
) =>
  useQuery<GetLoanApplicationDetailsQuery, TError, TData>(
    ['getLoanApplicationDetails', variables],
    useAxios<GetLoanApplicationDetailsQuery, GetLoanApplicationDetailsQueryVariables>(
      GetLoanApplicationDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberLoanAccountsDocument = `
    query getMemberLoanAccounts($memberId: ID!) {
  loanAccount {
    memberDisbursedLoanAccounts(memberId: $memberId) {
      id
      name
    }
  }
}
    `;
export const useGetMemberLoanAccountsQuery = <TData = GetMemberLoanAccountsQuery, TError = unknown>(
  variables: GetMemberLoanAccountsQueryVariables,
  options?: UseQueryOptions<GetMemberLoanAccountsQuery, TError, TData>
) =>
  useQuery<GetMemberLoanAccountsQuery, TError, TData>(
    ['getMemberLoanAccounts', variables],
    useAxios<GetMemberLoanAccountsQuery, GetMemberLoanAccountsQueryVariables>(
      GetMemberLoanAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberLoanAccountSearchDocument = `
    query getMemberLoanAccountSearch($filter: Filter, $pagination: Pagination) {
  loanAccount {
    list(filter: $filter, paginate: $pagination) {
      edges {
        node {
          id
          LoanAccountName
        }
      }
    }
  }
}
    `;
export const useGetMemberLoanAccountSearchQuery = <
  TData = GetMemberLoanAccountSearchQuery,
  TError = unknown
>(
  variables?: GetMemberLoanAccountSearchQueryVariables,
  options?: UseQueryOptions<GetMemberLoanAccountSearchQuery, TError, TData>
) =>
  useQuery<GetMemberLoanAccountSearchQuery, TError, TData>(
    variables === undefined
      ? ['getMemberLoanAccountSearch']
      : ['getMemberLoanAccountSearch', variables],
    useAxios<GetMemberLoanAccountSearchQuery, GetMemberLoanAccountSearchQueryVariables>(
      GetMemberLoanAccountSearchDocument
    ).bind(null, variables),
    options
  );
export const GetLoanPreviewDocument = `
    query getLoanPreview($id: String!) {
  loanAccount {
    loanPreview(loanAccountId: $id) {
      data {
        productId
        additionalFeatures {
          allowPartialInstallment
          collateral
          insurance
          isMonthlyInterestCompulsory
          loanScheduleChangeOverride
          overrideInterest
          staffProduct
          supportMultipleAccount
        }
        criteria {
          gender
          minAge
          maxAge
          ethnicity
          educationQualification
          maritalStatus
          foreignEmployment
          occupation
          institutionType
          cooperativeUnion
          cooperativeType
        }
        collateralAndGuarantees {
          name
          valuation
        }
        generalInformation {
          loanProduct
          loanSubType
          loanType
          natureOfLoanProduct
          loanName
          productCode
          penalty {
            penaltyType
            penaltyDayAfterInstallmentDate
            penaltyRate
            penaltyAmount
          }
        }
        loanDetails {
          appliedLoanAmount
          interestMethod
          interestRate
          loanRepaymentScheme
          tenure
          tenureUnit
          totalCollateralValuation
          totalGuaranteeValuation
          totalProcessingChargesValuation
          totalSanctionedAmount
          totalDisbursedAmount
          principalGracePeriod
          interestGracePeriod
          interestAmount
          disburseDate
          expiryDate
          paymentFrequency
          processingCharges {
            name
            amount
          }
        }
        repaymentDetails {
          lastPaymentDate
          nextInstallmentNo
        }
        member {
          name
          id
          code
          profilePicUrl
        }
        memberId
        productId
        paymentSchedule {
          total
          totalInterest
          totalPrincipal
          installments {
            installmentDate
            installmentNo
            interest
            payment
            principal
            remainingPrincipal
            currentRemainingPrincipal
            paidDate
            remainingInterest
            status
            overDueDays
            penalty
            isPartial
            overdueAmount
            fullPrincipal
          }
          totalRemainingPayable
          duesSince
          totalPayablePrincipal
          totalPayableInterest
          totalOverduePayable
          totalOverduePrincipal
        }
        statistics {
          remainingPayableAmount
          totalPaidAmount
          totalPayableAmount
        }
        idealSchedule {
          total
          totalInterest
          totalPrincipal
          installments {
            installmentDate
            installmentNo
            interest
            payment
            principal
            remainingPrincipal
            currentRemainingPrincipal
            paidDate
            remainingInterest
            status
            overDueDays
            penalty
            isPartial
            overdueAmount
            fullPrincipal
          }
          totalRemainingPayable
        }
      }
    }
  }
}
    `;
export const useGetLoanPreviewQuery = <TData = GetLoanPreviewQuery, TError = unknown>(
  variables: GetLoanPreviewQueryVariables,
  options?: UseQueryOptions<GetLoanPreviewQuery, TError, TData>
) =>
  useQuery<GetLoanPreviewQuery, TError, TData>(
    ['getLoanPreview', variables],
    useAxios<GetLoanPreviewQuery, GetLoanPreviewQueryVariables>(GetLoanPreviewDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanRepaymentListDocument = `
    query getLoanRepaymentList($paginate: Pagination, $filter: Filter) {
  loanAccount {
    repaymentList(paginate: $paginate, filter: $filter) {
      totalCount
      edges {
        node {
          id
          loanAccountId
          memberId
          memberName
          memberCode
          memberProfilePicId
          memberProfilePicUrl
          loanAccountName
          loanProductId
          loanProductName
          amount
          paymentDate
          branchName
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetLoanRepaymentListQuery = <TData = GetLoanRepaymentListQuery, TError = unknown>(
  variables?: GetLoanRepaymentListQueryVariables,
  options?: UseQueryOptions<GetLoanRepaymentListQuery, TError, TData>
) =>
  useQuery<GetLoanRepaymentListQuery, TError, TData>(
    variables === undefined ? ['getLoanRepaymentList'] : ['getLoanRepaymentList', variables],
    useAxios<GetLoanRepaymentListQuery, GetLoanRepaymentListQueryVariables>(
      GetLoanRepaymentListDocument
    ).bind(null, variables),
    options
  );
export const GetMemberLinkedAccountsDocument = `
    query getMemberLinkedAccounts($memberId: ID!, $filter: [NatureOfDepositProduct], $objState: AccountObjState, $includeLoc: Boolean) {
  members {
    getAllAccounts(memberId: $memberId) {
      data {
        depositAccount(filter: $filter, objState: $objState, includeLoc: $includeLoc) {
          id
          accountName
          member {
            name
          }
          balance
          availableBalance
          interestAccured
          interestTax
          prematurePenalty
          lastTransactionDate
          accountOpenedDate
          installmentAmount
          product {
            productName
            nature
          }
          accountExpiryDate
          overDrawnBalance
          guaranteedAmount
          dues {
            fine
            totalDue
            dueInstallments
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberLinkedAccountsQuery = <
  TData = GetMemberLinkedAccountsQuery,
  TError = unknown
>(
  variables: GetMemberLinkedAccountsQueryVariables,
  options?: UseQueryOptions<GetMemberLinkedAccountsQuery, TError, TData>
) =>
  useQuery<GetMemberLinkedAccountsQuery, TError, TData>(
    ['getMemberLinkedAccounts', variables],
    useAxios<GetMemberLinkedAccountsQuery, GetMemberLinkedAccountsQueryVariables>(
      GetMemberLinkedAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetMultipleSubProductsDocument = `
    query getMultipleSubProducts($productTypeIds: [String]) {
  settings {
    general {
      loan {
        productType {
          multipleProductSubTypes(productTypeIds: $productTypeIds) {
            id
            productSubType
          }
        }
      }
    }
  }
}
    `;
export const useGetMultipleSubProductsQuery = <
  TData = GetMultipleSubProductsQuery,
  TError = unknown
>(
  variables?: GetMultipleSubProductsQueryVariables,
  options?: UseQueryOptions<GetMultipleSubProductsQuery, TError, TData>
) =>
  useQuery<GetMultipleSubProductsQuery, TError, TData>(
    variables === undefined ? ['getMultipleSubProducts'] : ['getMultipleSubProducts', variables],
    useAxios<GetMultipleSubProductsQuery, GetMultipleSubProductsQueryVariables>(
      GetMultipleSubProductsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductsFromSubTypeDocument = `
    query getLoanProductsFromSubType($subTypeIds: [String]) {
  settings {
    general {
      loan {
        productType {
          loanProducts(subTypeIds: $subTypeIds) {
            id
            productName
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductsFromSubTypeQuery = <
  TData = GetLoanProductsFromSubTypeQuery,
  TError = unknown
>(
  variables?: GetLoanProductsFromSubTypeQueryVariables,
  options?: UseQueryOptions<GetLoanProductsFromSubTypeQuery, TError, TData>
) =>
  useQuery<GetLoanProductsFromSubTypeQuery, TError, TData>(
    variables === undefined
      ? ['getLoanProductsFromSubType']
      : ['getLoanProductsFromSubType', variables],
    useAxios<GetLoanProductsFromSubTypeQuery, GetLoanProductsFromSubTypeQueryVariables>(
      GetLoanProductsFromSubTypeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountDetailsDocument = `
    query getLoanAccountDetails($loanAccountId: ID!, $paginate: Pagination, $filter: EbankingTransactionFilter) {
  loanAccount {
    loanAccountDetails(loanAccountId: $loanAccountId) {
      overView {
        isClosed
        totalPrincipalPaid
        totalInterestPaid
        totalRemainingPrincipal
        generalInformation {
          accountId
          accountName
          productId
          productName
          accountOpenDate
          loanAccountOpenBranchId
          loanAccountOpenBranchName
          repaymentScheme
          interestRate
          interestAccrued
          interestEarned
          sanctionedAmount
          principalGracePeriod
          interestGracePeriod
          tenure
          tenureUnit
          linkedAccountId
          linkedAccountName
          installmentFrequency
          disbursedAmount
        }
        loanSchedule {
          installments {
            paidDate
            installmentNo
            installmentDate
            principal
            interest
            payment
            remainingPrincipal
            remainingInterest
            currentRemainingPrincipal
            status
            overDueDays
          }
          total
          totalInterest
          totalPrincipal
        }
        transactions(filter: $filter, paginate: $paginate) {
          edges {
            node {
              id
              transactionId
              accountId
              name
              date
              month
              transactionDirection
              transactionType
              amount
              currentBalance
              credit
              debit
              balanceType
            }
          }
          totalCount
          pageInfo {
            startCursor
            endCursor
          }
        }
        additionalFeatures {
          allowPartialInstallment
          insurance
          staffProduct
          loanScheduleChangeOverride
          isMonthlyInterestCompulsory
          collateral
          supportMultipleAccount
          overrideInterest
        }
      }
    }
  }
}
    `;
export const useGetLoanAccountDetailsQuery = <TData = GetLoanAccountDetailsQuery, TError = unknown>(
  variables: GetLoanAccountDetailsQueryVariables,
  options?: UseQueryOptions<GetLoanAccountDetailsQuery, TError, TData>
) =>
  useQuery<GetLoanAccountDetailsQuery, TError, TData>(
    ['getLoanAccountDetails', variables],
    useAxios<GetLoanAccountDetailsQuery, GetLoanAccountDetailsQueryVariables>(
      GetLoanAccountDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountGuaranteeDetailsDocument = `
    query getLoanAccountGuaranteeDetails($loanAccountId: ID!) {
  loanAccount {
    loanAccountDetails(loanAccountId: $loanAccountId) {
      guarantee {
        noOfGuarantee
        totalGuaranteeValuation
        totalGuaranteeRelease
        guaranteeList {
          guaranteeStatus
          memberId
          memberName
          accountId
          accountName
          productId
          productName
          maxGuranteeAmountLimit
          guranteeAmount
          totalAmount
          guaranteeId
        }
      }
    }
  }
}
    `;
export const useGetLoanAccountGuaranteeDetailsQuery = <
  TData = GetLoanAccountGuaranteeDetailsQuery,
  TError = unknown
>(
  variables: GetLoanAccountGuaranteeDetailsQueryVariables,
  options?: UseQueryOptions<GetLoanAccountGuaranteeDetailsQuery, TError, TData>
) =>
  useQuery<GetLoanAccountGuaranteeDetailsQuery, TError, TData>(
    ['getLoanAccountGuaranteeDetails', variables],
    useAxios<GetLoanAccountGuaranteeDetailsQuery, GetLoanAccountGuaranteeDetailsQueryVariables>(
      GetLoanAccountGuaranteeDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountCollateralDetailsDocument = `
    query getLoanAccountCollateralDetails($loanAccountId: ID!) {
  loanAccount {
    loanAccountDetails(loanAccountId: $loanAccountId) {
      collateral {
        noOfCollateral
        totalCollateralValuation
        totalCollateralRelease
        collateralList {
          collateralID
          collateralType
          ownerName
          relation
          sheetNo
          plotNo
          kittaNo
          area
          buildingType
          constructionType
          valuatorId
          noOfStorey
          fmvMaxAmount
          dvMinAmount
          valuationMethod
          valuationPercent
          collaterallValuation
          collateralDescription
          collateralFiles
          valuationFiles
          vehicleName
          vehicleModelNo
          vehicleRegistrationNo
          vehicleNo
          vehicleSeatCapacity
          vehicleCapacity
          vehicleType
          vehicleFuelType
          documentName
          valuationAmount
          description
          allDocuments
          documents {
            id
            url
          }
          status
        }
      }
    }
  }
}
    `;
export const useGetLoanAccountCollateralDetailsQuery = <
  TData = GetLoanAccountCollateralDetailsQuery,
  TError = unknown
>(
  variables: GetLoanAccountCollateralDetailsQueryVariables,
  options?: UseQueryOptions<GetLoanAccountCollateralDetailsQuery, TError, TData>
) =>
  useQuery<GetLoanAccountCollateralDetailsQuery, TError, TData>(
    ['getLoanAccountCollateralDetails', variables],
    useAxios<GetLoanAccountCollateralDetailsQuery, GetLoanAccountCollateralDetailsQueryVariables>(
      GetLoanAccountCollateralDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountMemberDetailsDocument = `
    query getLoanAccountMemberDetails($loanAccountId: ID!) {
  loanAccount {
    loanAccountDetails(loanAccountId: $loanAccountId) {
      memberInfo {
        memberId
        memberCode
        memberName
        memberPhoneNo
        profilePicId
        profilePicUrl
      }
    }
  }
}
    `;
export const useGetLoanAccountMemberDetailsQuery = <
  TData = GetLoanAccountMemberDetailsQuery,
  TError = unknown
>(
  variables: GetLoanAccountMemberDetailsQueryVariables,
  options?: UseQueryOptions<GetLoanAccountMemberDetailsQuery, TError, TData>
) =>
  useQuery<GetLoanAccountMemberDetailsQuery, TError, TData>(
    ['getLoanAccountMemberDetails', variables],
    useAxios<GetLoanAccountMemberDetailsQuery, GetLoanAccountMemberDetailsQueryVariables>(
      GetLoanAccountMemberDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountLedgersListDocument = `
    query getLoanAccountLedgersList($id: ID!) {
  account {
    listAccountLedgers(id: $id) {
      data {
        ledgerId
        ledgerName
        accountType
        balance
        balanceType
      }
    }
  }
}
    `;
export const useGetLoanAccountLedgersListQuery = <
  TData = GetLoanAccountLedgersListQuery,
  TError = unknown
>(
  variables: GetLoanAccountLedgersListQueryVariables,
  options?: UseQueryOptions<GetLoanAccountLedgersListQuery, TError, TData>
) =>
  useQuery<GetLoanAccountLedgersListQuery, TError, TData>(
    ['getLoanAccountLedgersList', variables],
    useAxios<GetLoanAccountLedgersListQuery, GetLoanAccountLedgersListQueryVariables>(
      GetLoanAccountLedgersListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanFilterMappingDocument = `
    query getLoanFilterMapping {
  loanAccount {
    filterMapping {
      productName {
        label
        value
      }
    }
  }
}
    `;
export const useGetLoanFilterMappingQuery = <TData = GetLoanFilterMappingQuery, TError = unknown>(
  variables?: GetLoanFilterMappingQueryVariables,
  options?: UseQueryOptions<GetLoanFilterMappingQuery, TError, TData>
) =>
  useQuery<GetLoanFilterMappingQuery, TError, TData>(
    variables === undefined ? ['getLoanFilterMapping'] : ['getLoanFilterMapping', variables],
    useAxios<GetLoanFilterMappingQuery, GetLoanFilterMappingQueryVariables>(
      GetLoanFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const GetLoanCloseDataDocument = `
    query getLoanCloseData($loanAccountId: ID!) {
  loanAccount {
    remainingPayments(loanAccountId: $loanAccountId) {
      data {
        totalInterest
        totalPayableAmount
        totalPenalty
        totalPrincipal
      }
    }
  }
}
    `;
export const useGetLoanCloseDataQuery = <TData = GetLoanCloseDataQuery, TError = unknown>(
  variables: GetLoanCloseDataQueryVariables,
  options?: UseQueryOptions<GetLoanCloseDataQuery, TError, TData>
) =>
  useQuery<GetLoanCloseDataQuery, TError, TData>(
    ['getLoanCloseData', variables],
    useAxios<GetLoanCloseDataQuery, GetLoanCloseDataQueryVariables>(GetLoanCloseDataDocument).bind(
      null,
      variables
    ),
    options
  );
export const ListLoanAccountInterestRateListDocument = `
    query listLoanAccountInterestRateList($accountId: ID!) {
  loanAccount {
    listAccountInterestRates(accountId: $accountId) {
      data {
        id
        rate
        createdAt
        effectiveDate
      }
    }
  }
}
    `;
export const useListLoanAccountInterestRateListQuery = <
  TData = ListLoanAccountInterestRateListQuery,
  TError = unknown
>(
  variables: ListLoanAccountInterestRateListQueryVariables,
  options?: UseQueryOptions<ListLoanAccountInterestRateListQuery, TError, TData>
) =>
  useQuery<ListLoanAccountInterestRateListQuery, TError, TData>(
    ['listLoanAccountInterestRateList', variables],
    useAxios<ListLoanAccountInterestRateListQuery, ListLoanAccountInterestRateListQueryVariables>(
      ListLoanAccountInterestRateListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountInterestRateDetailDocument = `
    query getLoanAccountInterestRateDetail($id: ID!, $accountId: String!) {
  loanAccount {
    getAccountInterestRate(id: $id, accountID: $accountId) {
      data {
        id
        rate
        createdAt
        effectiveDate
        fileUploads {
          identifier
          url
        }
        note
      }
    }
  }
}
    `;
export const useGetLoanAccountInterestRateDetailQuery = <
  TData = GetLoanAccountInterestRateDetailQuery,
  TError = unknown
>(
  variables: GetLoanAccountInterestRateDetailQueryVariables,
  options?: UseQueryOptions<GetLoanAccountInterestRateDetailQuery, TError, TData>
) =>
  useQuery<GetLoanAccountInterestRateDetailQuery, TError, TData>(
    ['getLoanAccountInterestRateDetail', variables],
    useAxios<GetLoanAccountInterestRateDetailQuery, GetLoanAccountInterestRateDetailQueryVariables>(
      GetLoanAccountInterestRateDetailDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProvisionAccountsDocument = `
    query getLoanProvisionAccounts {
  loanAccount {
    loanProvisionAccounts {
      goodLoan {
        id
        name
        amount
      }
      oneTo30Days {
        id
        name
        amount
      }
      oneTo12Months {
        id
        name
        amount
      }
      above12Months {
        id
        name
        amount
      }
    }
  }
}
    `;
export const useGetLoanProvisionAccountsQuery = <
  TData = GetLoanProvisionAccountsQuery,
  TError = unknown
>(
  variables?: GetLoanProvisionAccountsQueryVariables,
  options?: UseQueryOptions<GetLoanProvisionAccountsQuery, TError, TData>
) =>
  useQuery<GetLoanProvisionAccountsQuery, TError, TData>(
    variables === undefined
      ? ['getLoanProvisionAccounts']
      : ['getLoanProvisionAccounts', variables],
    useAxios<GetLoanProvisionAccountsQuery, GetLoanProvisionAccountsQueryVariables>(
      GetLoanProvisionAccountsDocument
    ).bind(null, variables),
    options
  );
export const LoanProvisionListDocument = `
    query loanProvisionList($paginate: Pagination, $filter: Filter) {
  loanAccount {
    loanProvisionList(paginate: $paginate, filter: $filter) {
      totalCount
      edges {
        node {
          id
          date
          conditions
          provisionCount
          amount
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useLoanProvisionListQuery = <TData = LoanProvisionListQuery, TError = unknown>(
  variables?: LoanProvisionListQueryVariables,
  options?: UseQueryOptions<LoanProvisionListQuery, TError, TData>
) =>
  useQuery<LoanProvisionListQuery, TError, TData>(
    variables === undefined ? ['loanProvisionList'] : ['loanProvisionList', variables],
    useAxios<LoanProvisionListQuery, LoanProvisionListQueryVariables>(
      LoanProvisionListDocument
    ).bind(null, variables),
    options
  );
export const GetMemberListDocument = `
    query getMemberList($pagination: Pagination!, $filter: Filter) {
  members {
    list(pagination: $pagination, filter: $filter) {
      totalCount
      edges {
        node {
          id
          name
          code
          type
          branch
          address {
            state
            district
            localGovernment
            wardNo
            locality
          }
          profilePicUrl
          signaturePicUrl
          contact
          createdAt
          dateJoined
          activeDate
          inactiveDate
          gender
          age
          maritalStatus
        }
        cursor
      }
      pageInfo {
        ...Pagination
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetMemberListQuery = <TData = GetMemberListQuery, TError = unknown>(
  variables: GetMemberListQueryVariables,
  options?: UseQueryOptions<GetMemberListQuery, TError, TData>
) =>
  useQuery<GetMemberListQuery, TError, TData>(
    ['getMemberList', variables],
    useAxios<GetMemberListQuery, GetMemberListQueryVariables>(GetMemberListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberTypesDocument = `
    query getMemberTypes {
  members {
    memberTypes {
      data {
        id
        type
      }
    }
  }
}
    `;
export const useGetMemberTypesQuery = <TData = GetMemberTypesQuery, TError = unknown>(
  variables?: GetMemberTypesQueryVariables,
  options?: UseQueryOptions<GetMemberTypesQuery, TError, TData>
) =>
  useQuery<GetMemberTypesQuery, TError, TData>(
    variables === undefined ? ['getMemberTypes'] : ['getMemberTypes', variables],
    useAxios<GetMemberTypesQuery, GetMemberTypesQueryVariables>(GetMemberTypesDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberTranslationDocument = `
    query getMemberTranslation($id: ID!) {
  members {
    translate(id: $id) {
      data {
        id
        data
        translatedValue
      }
    }
  }
}
    `;
export const useGetMemberTranslationQuery = <TData = GetMemberTranslationQuery, TError = unknown>(
  variables: GetMemberTranslationQueryVariables,
  options?: UseQueryOptions<GetMemberTranslationQuery, TError, TData>
) =>
  useQuery<GetMemberTranslationQuery, TError, TData>(
    ['getMemberTranslation', variables],
    useAxios<GetMemberTranslationQuery, GetMemberTranslationQueryVariables>(
      GetMemberTranslationDocument
    ).bind(null, variables),
    options
  );
export const GetMemberIndividualDataDocument = `
    query getMemberIndividualData($id: ID!) {
  members {
    details(id: $id) {
      data {
        id
        code
        type
        name
        profilePicUrl
        profilePic
        address {
          state
          district
          localGovernment
          wardNo
          locality
        }
        contact
        dateJoined
        signaturePicUrl
        citizenshipPicUrl
        citizenship {
          date
          id
          idType
          identificationNo
          place
        }
        gender
        age
      }
    }
  }
}
    `;
export const useGetMemberIndividualDataQuery = <
  TData = GetMemberIndividualDataQuery,
  TError = unknown
>(
  variables: GetMemberIndividualDataQueryVariables,
  options?: UseQueryOptions<GetMemberIndividualDataQuery, TError, TData>
) =>
  useQuery<GetMemberIndividualDataQuery, TError, TData>(
    ['getMemberIndividualData', variables],
    useAxios<GetMemberIndividualDataQuery, GetMemberIndividualDataQueryVariables>(
      GetMemberIndividualDataDocument
    ).bind(null, variables),
    options
  );
export const GetMemberDetailsDocument = `
    query getMemberDetails($id: ID!) {
  members {
    details(id: $id) {
      data {
        id
        name
        code
        address {
          state
          district
          localGovernment
          wardNo
          locality
          houseNo
        }
        contact
        share {
          summary {
            memberId
            member {
              id
              name
              code
            }
            count
            amount
          }
        }
        profilePicUrl
        signaturePicUrl
      }
    }
  }
}
    `;
export const useGetMemberDetailsQuery = <TData = GetMemberDetailsQuery, TError = unknown>(
  variables: GetMemberDetailsQueryVariables,
  options?: UseQueryOptions<GetMemberDetailsQuery, TError, TData>
) =>
  useQuery<GetMemberDetailsQuery, TError, TData>(
    ['getMemberDetails', variables],
    useAxios<GetMemberDetailsQuery, GetMemberDetailsQueryVariables>(GetMemberDetailsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetOfficialUseDocument = `
    query getOfficialUse($id: ID!) {
  members {
    officialUse(id: $id) {
      recordId
      record {
        id
        isStaff
        checkSanction
        checkNegative
        riskCategory
        docCollectedAndVerified
        acceptableAddressDoc
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetOfficialUseQuery = <TData = GetOfficialUseQuery, TError = unknown>(
  variables: GetOfficialUseQueryVariables,
  options?: UseQueryOptions<GetOfficialUseQuery, TError, TData>
) =>
  useQuery<GetOfficialUseQuery, TError, TData>(
    ['getOfficialUse', variables],
    useAxios<GetOfficialUseQuery, GetOfficialUseQueryVariables>(GetOfficialUseDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberFilterMappingDocument = `
    query getMemberFilterMapping {
  members {
    filterMapping {
      serviceCenter {
        label
        value
      }
      objState
    }
  }
}
    `;
export const useGetMemberFilterMappingQuery = <
  TData = GetMemberFilterMappingQuery,
  TError = unknown
>(
  variables?: GetMemberFilterMappingQueryVariables,
  options?: UseQueryOptions<GetMemberFilterMappingQuery, TError, TData>
) =>
  useQuery<GetMemberFilterMappingQuery, TError, TData>(
    variables === undefined ? ['getMemberFilterMapping'] : ['getMemberFilterMapping', variables],
    useAxios<GetMemberFilterMappingQuery, GetMemberFilterMappingQueryVariables>(
      GetMemberFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const GetMinorListDocument = `
    query getMinorList($filter: MinorFilter, $pagination: Pagination) {
  members {
    listMinor(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          memberId
          memberCode
          memberName
          serviceCentreId
          serviceCentreName
          minorName
          relationshipId
          relationshipName
          dateOfBirth
        }
        cursor
      }
      pageInfo {
        ...Pagination
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetMinorListQuery = <TData = GetMinorListQuery, TError = unknown>(
  variables?: GetMinorListQueryVariables,
  options?: UseQueryOptions<GetMinorListQuery, TError, TData>
) =>
  useQuery<GetMinorListQuery, TError, TData>(
    variables === undefined ? ['getMinorList'] : ['getMinorList', variables],
    useAxios<GetMinorListQuery, GetMinorListQueryVariables>(GetMinorListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMinorProfileDocument = `
    query getMinorProfile($minorId: String!) {
  members {
    minorProfile(minorId: $minorId) {
      minorId
      fullName
      dateOfBirth
      gender
      parentName
      address {
        state
        district
        localGovernment
        wardNo
        locality
        houseNo
        coordinates {
          longitude
          latitude
        }
      }
      memberId
      memberCode
      serviceCentreId
      serviceCentreName
      savingAccounts {
        accountName
        interestRate
        balance
      }
    }
  }
}
    `;
export const useGetMinorProfileQuery = <TData = GetMinorProfileQuery, TError = unknown>(
  variables: GetMinorProfileQueryVariables,
  options?: UseQueryOptions<GetMinorProfileQuery, TError, TData>
) =>
  useQuery<GetMinorProfileQuery, TError, TData>(
    ['getMinorProfile', variables],
    useAxios<GetMinorProfileQuery, GetMinorProfileQueryVariables>(GetMinorProfileDocument).bind(
      null,
      variables
    ),
    options
  );
export const MemberDormancyDetailsDocument = `
    query memberDormancyDetails($memberId: ID!) {
  members {
    dormancyDetails(memberId: $memberId) {
      data {
        blockSavingTransaction
        blockLoanTransaction
        blockShareTransaction
      }
    }
  }
}
    `;
export const useMemberDormancyDetailsQuery = <TData = MemberDormancyDetailsQuery, TError = unknown>(
  variables: MemberDormancyDetailsQueryVariables,
  options?: UseQueryOptions<MemberDormancyDetailsQuery, TError, TData>
) =>
  useQuery<MemberDormancyDetailsQuery, TError, TData>(
    ['memberDormancyDetails', variables],
    useAxios<MemberDormancyDetailsQuery, MemberDormancyDetailsQueryVariables>(
      MemberDormancyDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberTransferListDocument = `
    query getMemberTransferList($filter: Filter, $pagination: Pagination) {
  members {
    transfer {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            memberId
            memberName
            prevBranchId
            prevBranchName
            newBranchId
            newBranchName
            state
            approverId
            approverName
            reason
            postNotes
            requestDate
            approvedDate
            docs {
              identifier
              url
            }
          }
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetMemberTransferListQuery = <TData = GetMemberTransferListQuery, TError = unknown>(
  variables?: GetMemberTransferListQueryVariables,
  options?: UseQueryOptions<GetMemberTransferListQuery, TError, TData>
) =>
  useQuery<GetMemberTransferListQuery, TError, TData>(
    variables === undefined ? ['getMemberTransferList'] : ['getMemberTransferList', variables],
    useAxios<GetMemberTransferListQuery, GetMemberTransferListQueryVariables>(
      GetMemberTransferListDocument
    ).bind(null, variables),
    options
  );
export const GetMemberTransferDocument = `
    query getMemberTransfer($requestId: ID!) {
  members {
    transfer {
      get(requestId: $requestId) {
        data {
          id
          memberId
          memberName
          prevBranchId
          prevBranchName
          newBranchId
          newBranchName
          state
          approverId
          approverName
          reason
          postNotes
          requestDate
          approvedDate
          docs {
            identifier
            url
          }
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetMemberTransferQuery = <TData = GetMemberTransferQuery, TError = unknown>(
  variables: GetMemberTransferQueryVariables,
  options?: UseQueryOptions<GetMemberTransferQuery, TError, TData>
) =>
  useQuery<GetMemberTransferQuery, TError, TData>(
    ['getMemberTransfer', variables],
    useAxios<GetMemberTransferQuery, GetMemberTransferQueryVariables>(
      GetMemberTransferDocument
    ).bind(null, variables),
    options
  );
export const GetMembershipFeeDocument = `
    query getMembershipFee($memberID: ID!) {
  members {
    activateMember {
      getMembershipFee(memberID: $memberID) {
        error {
          ...QueryError
        }
        data {
          charge
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetMembershipFeeQuery = <TData = GetMembershipFeeQuery, TError = unknown>(
  variables: GetMembershipFeeQueryVariables,
  options?: UseQueryOptions<GetMembershipFeeQuery, TError, TData>
) =>
  useQuery<GetMembershipFeeQuery, TError, TData>(
    ['getMembershipFee', variables],
    useAxios<GetMembershipFeeQuery, GetMembershipFeeQueryVariables>(GetMembershipFeeDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberCheckDocument = `
    query getMemberCheck($memberID: ID!) {
  members {
    activateMember {
      memberActivateChecks(memberId: $memberID) {
        isFeePaid
        isShareIssued
        isAccountUpdated
      }
    }
  }
}
    `;
export const useGetMemberCheckQuery = <TData = GetMemberCheckQuery, TError = unknown>(
  variables: GetMemberCheckQueryVariables,
  options?: UseQueryOptions<GetMemberCheckQuery, TError, TData>
) =>
  useQuery<GetMemberCheckQuery, TError, TData>(
    ['getMemberCheck', variables],
    useAxios<GetMemberCheckQuery, GetMemberCheckQueryVariables>(GetMemberCheckDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAccountCheckDocument = `
    query getAccountCheck($memberId: ID!, $accountId: ID!) {
  members {
    activateMember {
      accountUpdateCheck(memberId: $memberId, accountId: $accountId)
    }
  }
}
    `;
export const useGetAccountCheckQuery = <TData = GetAccountCheckQuery, TError = unknown>(
  variables: GetAccountCheckQueryVariables,
  options?: UseQueryOptions<GetAccountCheckQuery, TError, TData>
) =>
  useQuery<GetAccountCheckQuery, TError, TData>(
    ['getAccountCheck', variables],
    useAxios<GetAccountCheckQuery, GetAccountCheckQueryVariables>(GetAccountCheckDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberAccountsDocument = `
    query getMemberAccounts($memberId: ID!) {
  members {
    getAllAccounts(memberId: $memberId) {
      data {
        depositAccount {
          id
          accountName
          product {
            nature
            isMandatorySaving
            productName
          }
        }
        loanAccount {
          id
          accountName: LoanAccountName
          product {
            productName
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberAccountsQuery = <TData = GetMemberAccountsQuery, TError = unknown>(
  variables: GetMemberAccountsQueryVariables,
  options?: UseQueryOptions<GetMemberAccountsQuery, TError, TData>
) =>
  useQuery<GetMemberAccountsQuery, TError, TData>(
    ['getMemberAccounts', variables],
    useAxios<GetMemberAccountsQuery, GetMemberAccountsQueryVariables>(
      GetMemberAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetAccountInactiveCheckDocument = `
    query getAccountInactiveCheck($memberId: ID!, $accountId: ID!, $accountType: AccountTypeFilter!) {
  members {
    inactivateMember {
      accountCloseCheck(
        memberId: $memberId
        accountId: $accountId
        accounttype: $accountType
      )
    }
  }
}
    `;
export const useGetAccountInactiveCheckQuery = <
  TData = GetAccountInactiveCheckQuery,
  TError = unknown
>(
  variables: GetAccountInactiveCheckQueryVariables,
  options?: UseQueryOptions<GetAccountInactiveCheckQuery, TError, TData>
) =>
  useQuery<GetAccountInactiveCheckQuery, TError, TData>(
    ['getAccountInactiveCheck', variables],
    useAxios<GetAccountInactiveCheckQuery, GetAccountInactiveCheckQueryVariables>(
      GetAccountInactiveCheckDocument
    ).bind(null, variables),
    options
  );
export const GetMemberInactiveCheckDocument = `
    query getMemberInactiveCheck($memberId: ID!) {
  members {
    inactivateMember {
      inactivateCheck(memberId: $memberId) {
        isAccountClosed
        isShareReturned
      }
    }
  }
}
    `;
export const useGetMemberInactiveCheckQuery = <
  TData = GetMemberInactiveCheckQuery,
  TError = unknown
>(
  variables: GetMemberInactiveCheckQueryVariables,
  options?: UseQueryOptions<GetMemberInactiveCheckQuery, TError, TData>
) =>
  useQuery<GetMemberInactiveCheckQuery, TError, TData>(
    ['getMemberInactiveCheck', variables],
    useAxios<GetMemberInactiveCheckQuery, GetMemberInactiveCheckQueryVariables>(
      GetMemberInactiveCheckDocument
    ).bind(null, variables),
    options
  );
export const GetMemberDetailsShareBalanceDocument = `
    query getMemberDetailsShareBalance($id: ID!) {
  share {
    history(memberId: $id) {
      history {
        id
        memberId
        member {
          id
          objState
          createdAt
        }
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        balance
        shareAmount
        extraFee {
          name
          value
        }
        totalAmount
        paymentMode
        bankId
        voucherNumber
        accountId
        noOfShare
      }
    }
  }
}
    `;
export const useGetMemberDetailsShareBalanceQuery = <
  TData = GetMemberDetailsShareBalanceQuery,
  TError = unknown
>(
  variables: GetMemberDetailsShareBalanceQueryVariables,
  options?: UseQueryOptions<GetMemberDetailsShareBalanceQuery, TError, TData>
) =>
  useQuery<GetMemberDetailsShareBalanceQuery, TError, TData>(
    ['getMemberDetailsShareBalance', variables],
    useAxios<GetMemberDetailsShareBalanceQuery, GetMemberDetailsShareBalanceQueryVariables>(
      GetMemberDetailsShareBalanceDocument
    ).bind(null, variables),
    options
  );
export const GetMemberKymDetailsOverviewDocument = `
    query getMemberKYMDetailsOverview($id: ID!) {
  members {
    memberOverviewV2 {
      overview(memberId: $id) {
        data {
          basicInformation {
            __typename
            ... on IndividualBasicMinInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              genderId
              gender
              maritalStatus
              maritalStatusId
              fathersName
              branchId
              branchName
              mothersName
              grandFathersName
              familyMembers {
                fullName
                relationship
                dob
              }
              isStaff
            }
            ... on InstitutionBasicMinInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              type
              nature
              registrationDate
              vatPanNo
              branchId
              branchName
              noOfServiceCenters
            }
            ... on CooperativeBasicMinInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              registrationNo
              registrationOffice
              registrationDate
              branchId
              branchName
            }
            ... on CooperativeUnionBasicMinInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              type
              nature
              branchId
              branchName
              registrationDate
              vatPanNo
              noOfServiceCenters
            }
          }
          memberGraphs {
            deposit {
              data {
                time
                amount
              }
              periodType
            }
            withdraw {
              data {
                time
                amount
              }
              periodType
            }
          }
          statistics {
            totalShareValue
            accountBalance
            loanBalance
            totalSavingInterestAccured
            totalSavingInterestPosted
            totalLoanInterest
            totalLoanRemainingPrincipal
          }
          payments {
            date
            accountName
            accountId
            paymentType
            amount
            installmentNo
            interestRate
          }
          recentTransactions {
            date
            title
            txnType
            amount
            noOfShares
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberKymDetailsOverviewQuery = <
  TData = GetMemberKymDetailsOverviewQuery,
  TError = unknown
>(
  variables: GetMemberKymDetailsOverviewQueryVariables,
  options?: UseQueryOptions<GetMemberKymDetailsOverviewQuery, TError, TData>
) =>
  useQuery<GetMemberKymDetailsOverviewQuery, TError, TData>(
    ['getMemberKYMDetailsOverview', variables],
    useAxios<GetMemberKymDetailsOverviewQuery, GetMemberKymDetailsOverviewQueryVariables>(
      GetMemberKymDetailsOverviewDocument
    ).bind(null, variables),
    options
  );
export const GetMemberKymDetailsAccountsDocument = `
    query getMemberKYMDetailsAccounts($id: ID!) {
  members {
    memberOverviewV2 {
      accounts(memberId: $id) {
        data {
          accounts {
            accountName
            accountNumber
            totalBalance
            productName
            productType
            interestRate
            interestEarned
            interestBooked
            guaranteeAccounts {
              loanId
              loanAccountName
            }
          }
          payments {
            date
            accountId
            accountName
            paymentType
            amount
            installmentNo
            interestRate
          }
          closedAccounts {
            accountName
            accountNumber
            totalBalance
            productName
            productType
            interestRate
            interestEarned
            interestBooked
            guaranteeAccounts {
              loanId
              loanAccountName
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberKymDetailsAccountsQuery = <
  TData = GetMemberKymDetailsAccountsQuery,
  TError = unknown
>(
  variables: GetMemberKymDetailsAccountsQueryVariables,
  options?: UseQueryOptions<GetMemberKymDetailsAccountsQuery, TError, TData>
) =>
  useQuery<GetMemberKymDetailsAccountsQuery, TError, TData>(
    ['getMemberKYMDetailsAccounts', variables],
    useAxios<GetMemberKymDetailsAccountsQuery, GetMemberKymDetailsAccountsQueryVariables>(
      GetMemberKymDetailsAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberKymDetailsLoanDocument = `
    query getMemberKYMDetailsLoan($id: ID!) {
  members {
    memberOverviewV2 {
      loan(memberId: $id) {
        data {
          accounts {
            accountName
            accountNumber
            totalBalance
            productName
            productType
            interestRate
            subscriptionDate
            interestEarned
            interestBooked
            remainingPrincipal
          }
          payments {
            date
            accountName
            accountId
            paymentType
            amount
            installmentNo
            interestRate
          }
          closedAccounts {
            accountName
            accountNumber
            totalBalance
            balanceType
            productName
            productType
            interestRate
            subscriptionDate
            closedDate
            interestEarned
            interestBooked
            objState
            guaranteeAccounts {
              loanId
              loanAccountName
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberKymDetailsLoanQuery = <
  TData = GetMemberKymDetailsLoanQuery,
  TError = unknown
>(
  variables: GetMemberKymDetailsLoanQueryVariables,
  options?: UseQueryOptions<GetMemberKymDetailsLoanQuery, TError, TData>
) =>
  useQuery<GetMemberKymDetailsLoanQuery, TError, TData>(
    ['getMemberKYMDetailsLoan', variables],
    useAxios<GetMemberKymDetailsLoanQuery, GetMemberKymDetailsLoanQueryVariables>(
      GetMemberKymDetailsLoanDocument
    ).bind(null, variables),
    options
  );
export const GetMemberKymDetailsSharesDocument = `
    query getMemberKYMDetailsShares($id: ID!) {
  members {
    memberOverviewV2 {
      share(memberId: $id) {
        data {
          shareInfo {
            totalCount
            issuedCount
            returnedCount
            totalBalance
          }
          registerDetails {
            date
            title
            txnAmount
            txnType
            noOfShares
          }
          balanceDetails {
            totalCount
            edges {
              node {
                id
                memberId
                member {
                  id
                  objState
                  createdAt
                  modifiedAt
                  code
                  type
                  name
                  contact
                  dateJoined
                  profilePic
                  signaturepic
                  profilePicUrl
                  signaturePicUrl
                }
                status
                transactionDate
                transactionDirection
                credit
                debit
                startNumber
                endNumber
                balance
                shareAmount
                extraFee {
                  name
                  value
                }
                totalAmount
                paymentMode
                bankId
                voucherNumber
                accountId
              }
              cursor
            }
            pageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberKymDetailsSharesQuery = <
  TData = GetMemberKymDetailsSharesQuery,
  TError = unknown
>(
  variables: GetMemberKymDetailsSharesQueryVariables,
  options?: UseQueryOptions<GetMemberKymDetailsSharesQuery, TError, TData>
) =>
  useQuery<GetMemberKymDetailsSharesQuery, TError, TData>(
    ['getMemberKYMDetailsShares', variables],
    useAxios<GetMemberKymDetailsSharesQuery, GetMemberKymDetailsSharesQueryVariables>(
      GetMemberKymDetailsSharesDocument
    ).bind(null, variables),
    options
  );
export const GetMemberKymDetailsBioDocument = `
    query getMemberKYMDetailsBio($id: ID!) {
  members {
    memberOverviewV2 {
      bio(memberId: $id) {
        data {
          __typename
          ... on IndividualBio {
            memberName
            profilePic
            memberCode
            memberJoined
            dob
            gender
            mobile
            email
            currentAddress
            permanentAddress
            maritalStatus
            familyMembers {
              relationship
              fullName
              dob
            }
            docs {
              key
              value
            }
          }
          ... on InstitutionBio {
            basicInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              type
              nature
              registrationDate
              vatPanNo
              noOfServiceCenters
            }
            addressDetails {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
            }
            registrationDetails {
              registeredNumber
              issuingOffice
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
            }
            operatingOfficeAddress {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
            }
            serviceCenterOfficeAddress {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
            }
            contactDetails {
              phoneNumber
              fax
              email
              website
              poBoxNo
              noOfEmployees
              agmDetails
            }
            bankAcDetails {
              bank
              accountNumber
              accountName
            }
            partnerDirectorDetails {
              name
              permAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              dateOfMembership
              highestQualification
              mobileNo
              email
              citizenshipNo
              panNo
              docs {
                key
                value
              }
            }
            operatorDetails {
              name
              contactNo
              email
              panNo
              pemAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            transactionProfileDetails {
              nature
              annualTurnover
              initialDepositAmount
              expectedMonthlyTurnover
              expectedMonthlyTransaction
            }
            sisterConcernDetails {
              name
              address
              phone
              natureOfBusiness
            }
            operatorInstructionDetails {
              accountType
              stampCompulsory
              specialInstruction
            }
            declaration {
              name
              phoneNo
              email
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
            }
            docs {
              key
              value
            }
          }
          ... on CoopBio {
            basicInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              registrationNo
              registrationOffice
              registrationDate
            }
            registeredAddress {
              ...Address
            }
            operatingAddress {
              ...Address
            }
            contactDetails {
              email
              website
              phone
            }
            currentMemberDetails {
              noOfMaleMembers
              noOfFemaleMembers
              noOfOtherMembers
              lastAuditDate
            }
            representativeDetails {
              name
              designation
              contactNumber
              email
              panVatNo
              address {
                ...Address
              }
              docs {
                key
                value
              }
            }
            additionalCoopDetails {
              coopType
              mainServiceProduct
            }
            employeeDetails {
              male
              female
              other
              total
            }
            equityLiabilities {
              shareCapital
              reserveAndSurplus
              savingDeposit
              loanAccount
              capitalGrant
              total
            }
            assetDetails {
              cashAndEquivalents
              bank
              investments
              loan
              nonCurrentAssets
              otherNonCurrentAssets
              other
            }
            partnerDirectorDetails {
              name
              designation
              permAddress {
                ...Address
              }
              tempAddress {
                ...Address
              }
              dateOfMembership
              highestQualification
              mobileNo
              email
              citizenshipNo
              panNo
              docs {
                key
                value
              }
            }
            operatorDetails {
              name
              contactNo
              email
              panNo
              pemAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            docs {
              key
              value
            }
          }
          ... on CoopUnionBio {
            basicInfo {
              memberName
              profilePic
              memberCode
              memberJoined
              type
              nature
              registrationDate
              vatPanNo
              noOfServiceCenters
            }
            address {
              ...Address
            }
            registrationDetails {
              registeredNo
              issuingOffice
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
            }
            operatingAddress {
              ...Address
            }
            serviceCenterAddress {
              ...Address
            }
            contactDetails {
              phoneNo
              fax
              email
              website
              poBoxNo
              noOfEmployees
              agmDetails
            }
            bankAccDetails {
              bank
              accountNumber
              accountName
            }
            applicantDetails {
              name
              designation
              contactNo
              email
              panNo
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            memberInfo {
              noOfMaleCurrent
              noOfFemaleCurrent
              noOfInstitutionalCurrent
              noOfMaleTarget
              noOfFemaleTarget
              noOfInstitutionalTarget
              totalCurrent
              totalTarget
            }
            partnerDirectorDetails {
              name
              designation
              email
              panNo
              mobileNo
              permAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            operatorDetails {
              name
              designation
              contactNo
              email
              panNo
              pemAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              tempAddress {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              docs {
                key
                value
              }
            }
            equityLiabilities {
              shareCapitalCurrent
              reserveAndSurplusCurrent
              savingDepositCurrent
              loanAccountCurrent
              capitalGrantCurrent
              liabilitiesPayableCurrent
              nonCurrentLiabilitiesCurrent
              totalCurrent
              shareCapitalTarget
              reserveAndSurplusTarget
              savingDepositTarget
              loanAccountTarget
              capitalGrantTarget
              liabilitiesPayableTarget
              nonCurrentLiabilitiesTarget
              totalTarget
            }
            assetDetails {
              cashAndEquivalentsCurrent
              bankCurrent
              investmentsCurrent
              loanCurrent
              nonCurrentAssetsCurrent
              otherNonCurrentAssetsCurrent
              totalCurrent
              cashAndEquivalentsTarget
              bankTarget
              investmentsTarget
              loanTarget
              nonCurrentAssetsTarget
              otherNonCurrentAssetsTarget
              totalTarget
            }
            incomeDetails {
              financialInvestment
              nonFinancialInvestment
              investment
              serviceOperations
              sales
              otherIncome
              miscIncome
              total
            }
            expenseDetails {
              purchase
              directExpense
              adminExpense
              financialCost
              riskManagement
              deferredTax
              total
            }
            docs {
              key
              value
            }
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetMemberKymDetailsBioQuery = <
  TData = GetMemberKymDetailsBioQuery,
  TError = unknown
>(
  variables: GetMemberKymDetailsBioQueryVariables,
  options?: UseQueryOptions<GetMemberKymDetailsBioQuery, TError, TData>
) =>
  useQuery<GetMemberKymDetailsBioQuery, TError, TData>(
    ['getMemberKYMDetailsBio', variables],
    useAxios<GetMemberKymDetailsBioQuery, GetMemberKymDetailsBioQueryVariables>(
      GetMemberKymDetailsBioDocument
    ).bind(null, variables),
    options
  );
export const GetMemberKymDetailsWithdrawSlipsDocument = `
    query getMemberKYMDetailsWithdrawSlips($id: ID!) {
  members {
    memberOverviewV2 {
      cheques(memberId: $id) {
        data {
          accountId
          accountName
          issued
          used
          left
          cancelled
        }
      }
    }
  }
}
    `;
export const useGetMemberKymDetailsWithdrawSlipsQuery = <
  TData = GetMemberKymDetailsWithdrawSlipsQuery,
  TError = unknown
>(
  variables: GetMemberKymDetailsWithdrawSlipsQueryVariables,
  options?: UseQueryOptions<GetMemberKymDetailsWithdrawSlipsQuery, TError, TData>
) =>
  useQuery<GetMemberKymDetailsWithdrawSlipsQuery, TError, TData>(
    ['getMemberKYMDetailsWithdrawSlips', variables],
    useAxios<GetMemberKymDetailsWithdrawSlipsQuery, GetMemberKymDetailsWithdrawSlipsQueryVariables>(
      GetMemberKymDetailsWithdrawSlipsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberKymDetailsReportDocument = `
    query getMemberKYMDetailsReport($id: ID!) {
  members {
    memberOverviewV2 {
      reports(memberId: $id) {
        data {
          list {
            code
            reportName
            category
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberKymDetailsReportQuery = <
  TData = GetMemberKymDetailsReportQuery,
  TError = unknown
>(
  variables: GetMemberKymDetailsReportQueryVariables,
  options?: UseQueryOptions<GetMemberKymDetailsReportQuery, TError, TData>
) =>
  useQuery<GetMemberKymDetailsReportQuery, TError, TData>(
    ['getMemberKYMDetailsReport', variables],
    useAxios<GetMemberKymDetailsReportQuery, GetMemberKymDetailsReportQueryVariables>(
      GetMemberKymDetailsReportDocument
    ).bind(null, variables),
    options
  );
export const GetMemberPdfDocument = `
    query getMemberPDF($id: ID!) {
  members {
    memberPDF(id: $id)
  }
}
    `;
export const useGetMemberPdfQuery = <TData = GetMemberPdfQuery, TError = unknown>(
  variables: GetMemberPdfQueryVariables,
  options?: UseQueryOptions<GetMemberPdfQuery, TError, TData>
) =>
  useQuery<GetMemberPdfQuery, TError, TData>(
    ['getMemberPDF', variables],
    useAxios<GetMemberPdfQuery, GetMemberPdfQueryVariables>(GetMemberPdfDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAccountingExternalLoanStatementReportDocument = `
    query getAccountingExternalLoanStatementReport($data: ExternalLoanStatementReportFilter!) {
  report {
    accountingReport {
      externalLoanStatementReport(data: $data) {
        data {
          date
          particulars
          transactionId
          receivedPrincipal
          paidPrincipal
          paidInterest
          paidFine
          discount
          remainingPrincipal
        }
        summary {
          paidPrincipalTotal
          paidInterestTotal
          paidFineTotal
          discountTotal
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetAccountingExternalLoanStatementReportQuery = <
  TData = GetAccountingExternalLoanStatementReportQuery,
  TError = unknown
>(
  variables: GetAccountingExternalLoanStatementReportQueryVariables,
  options?: UseQueryOptions<GetAccountingExternalLoanStatementReportQuery, TError, TData>
) =>
  useQuery<GetAccountingExternalLoanStatementReportQuery, TError, TData>(
    ['getAccountingExternalLoanStatementReport', variables],
    useAxios<
      GetAccountingExternalLoanStatementReportQuery,
      GetAccountingExternalLoanStatementReportQueryVariables
    >(GetAccountingExternalLoanStatementReportDocument).bind(null, variables),
    options
  );
export const GetAccountingExternalLoanReportDocument = `
    query getAccountingExternalLoanReport($data: ExternalLoanReportFilter!) {
  report {
    accountingReport {
      externalLoanReport(data: $data) {
        data {
          date
          organizationName
          organizationBranch
          loanNumber
          loanId
          mortgage
          loanApprovedDate
          interestRate
          maturityDate
          principalPaidAmount
          interestPaidAmount
          outstandingLoanAmount
          rebate
          finePaid
          totalPaid
          installmentType
          installmentFrequency
          tenure
          remainingTenure
          loanClosedDate
          relatedBranch
          loanAmount
        }
        error {
          ...QueryError
        }
        summary {
          totalFinePaid
          totalInterestAmount
          totalLoanAmount
          totalOfTotalPaid
          totalOutstandingLoanAmount
          totalPrincipalAmount
          totalRebate
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetAccountingExternalLoanReportQuery = <
  TData = GetAccountingExternalLoanReportQuery,
  TError = unknown
>(
  variables: GetAccountingExternalLoanReportQueryVariables,
  options?: UseQueryOptions<GetAccountingExternalLoanReportQuery, TError, TData>
) =>
  useQuery<GetAccountingExternalLoanReportQuery, TError, TData>(
    ['getAccountingExternalLoanReport', variables],
    useAxios<GetAccountingExternalLoanReportQuery, GetAccountingExternalLoanReportQueryVariables>(
      GetAccountingExternalLoanReportDocument
    ).bind(null, variables),
    options
  );
export const GetFdInvestmentStatementReportDocument = `
    query getFDInvestmentStatementReport($data: FDInvestmentStatementReportFilter!) {
  report {
    accountingReport {
      fdInvestmentStatementReport(data: $data) {
        data {
          date
          chequeNo
          transactionAmount
          transactionType
          particulars
        }
        summary {
          fdAmountTotal
          openingBalance
        }
      }
    }
  }
}
    `;
export const useGetFdInvestmentStatementReportQuery = <
  TData = GetFdInvestmentStatementReportQuery,
  TError = unknown
>(
  variables: GetFdInvestmentStatementReportQueryVariables,
  options?: UseQueryOptions<GetFdInvestmentStatementReportQuery, TError, TData>
) =>
  useQuery<GetFdInvestmentStatementReportQuery, TError, TData>(
    ['getFDInvestmentStatementReport', variables],
    useAxios<GetFdInvestmentStatementReportQuery, GetFdInvestmentStatementReportQueryVariables>(
      GetFdInvestmentStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetFdInvestmentReportDocument = `
    query getFDInvestmentReport($data: FDInvestmentReportFilter!) {
  report {
    accountingReport {
      fdInvestmentReport(data: $data) {
        data {
          organizationName
          organizationBranch
          fdAmount
          fdAccountName
          fdOpeningDate
          fdType
          interestRate
          maturityDate
          nomineeBankAccountNo
          remainingTenure
          tenure
        }
      }
    }
  }
}
    `;
export const useGetFdInvestmentReportQuery = <TData = GetFdInvestmentReportQuery, TError = unknown>(
  variables: GetFdInvestmentReportQueryVariables,
  options?: UseQueryOptions<GetFdInvestmentReportQuery, TError, TData>
) =>
  useQuery<GetFdInvestmentReportQuery, TError, TData>(
    ['getFDInvestmentReport', variables],
    useAxios<GetFdInvestmentReportQuery, GetFdInvestmentReportQueryVariables>(
      GetFdInvestmentReportDocument
    ).bind(null, variables),
    options
  );
export const GetBranchReportDocument = `
    query getBranchReport($data: BranchReportFilter) {
  report {
    branchReport {
      branchReport(data: $data) {
        data {
          id
          serviceCenterCode
          name
          contactNumber
          email
          address {
            ...Address
          }
          managerName
          managerContact
          isExtensionCounter
          estDate
          branchStatus
          remarks
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetBranchReportQuery = <TData = GetBranchReportQuery, TError = unknown>(
  variables?: GetBranchReportQueryVariables,
  options?: UseQueryOptions<GetBranchReportQuery, TError, TData>
) =>
  useQuery<GetBranchReportQuery, TError, TData>(
    variables === undefined ? ['getBranchReport'] : ['getBranchReport', variables],
    useAxios<GetBranchReportQuery, GetBranchReportQueryVariables>(GetBranchReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetServiceCenterCoaBalanceReportDocument = `
    query getServiceCenterCOABalanceReport($data: ServiceCenterCOAWiseBalanceFilter!) {
  report {
    branchReport {
      serviceCenterCOAWiseBalanceReport(data: $data) {
        data {
          entries {
            ServiceCenterName
            balanceMap
            serviceCenterId
            serviceCenterCode
          }
          total
        }
      }
    }
  }
}
    `;
export const useGetServiceCenterCoaBalanceReportQuery = <
  TData = GetServiceCenterCoaBalanceReportQuery,
  TError = unknown
>(
  variables: GetServiceCenterCoaBalanceReportQueryVariables,
  options?: UseQueryOptions<GetServiceCenterCoaBalanceReportQuery, TError, TData>
) =>
  useQuery<GetServiceCenterCoaBalanceReportQuery, TError, TData>(
    ['getServiceCenterCOABalanceReport', variables],
    useAxios<GetServiceCenterCoaBalanceReportQuery, GetServiceCenterCoaBalanceReportQueryVariables>(
      GetServiceCenterCoaBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetBranchReadinessReportDocument = `
    query getBranchReadinessReport {
  report {
    branchReport {
      branchReadinessReport {
        data {
          branchName
          branchCode
          status
        }
      }
    }
  }
}
    `;
export const useGetBranchReadinessReportQuery = <
  TData = GetBranchReadinessReportQuery,
  TError = unknown
>(
  variables?: GetBranchReadinessReportQueryVariables,
  options?: UseQueryOptions<GetBranchReadinessReportQuery, TError, TData>
) =>
  useQuery<GetBranchReadinessReportQuery, TError, TData>(
    variables === undefined
      ? ['getBranchReadinessReport']
      : ['getBranchReadinessReport', variables],
    useAxios<GetBranchReadinessReportQuery, GetBranchReadinessReportQueryVariables>(
      GetBranchReadinessReportDocument
    ).bind(null, variables),
    options
  );
export const GetCashLedgerReportDocument = `
    query getCashLedgerReport($data: CashLedgerReportFilterData) {
  report {
    cashReport {
      cashLedgerReport(data: $data) {
        openingBalance
        closingBalance
        summary {
          date
          ledgerCode
          particular
          voucherNo
          cashDr
          cashCr
          balance
        }
        details {
          date
          ledgerCode
          particular
          voucherNo
          cashDr
          cashCr
          balance
        }
      }
    }
  }
}
    `;
export const useGetCashLedgerReportQuery = <TData = GetCashLedgerReportQuery, TError = unknown>(
  variables?: GetCashLedgerReportQueryVariables,
  options?: UseQueryOptions<GetCashLedgerReportQuery, TError, TData>
) =>
  useQuery<GetCashLedgerReportQuery, TError, TData>(
    variables === undefined ? ['getCashLedgerReport'] : ['getCashLedgerReport', variables],
    useAxios<GetCashLedgerReportQuery, GetCashLedgerReportQueryVariables>(
      GetCashLedgerReportDocument
    ).bind(null, variables),
    options
  );
export const GetCopomisImportMemberReportDocument = `
    query getCopomisImportMemberReport($data: CopomisReportFilter) {
  report {
    memberReport {
      copomisReport(data: $data) {
        data {
          address
          memberNameEn
          memberNameNp
          memberId
          memberRegistrationDate
          membershipNo
          shareCertificateNo
          totalShare
          castRecordId
          citizenshipIssuedDate
          citizenshipIssuedDistrictId
          citizenshipNo
          dateOfBirth
          fatherHusbandName
          genderRecordId
          grandfatherName
          maritalStatusId
          castRecordId
        }
      }
    }
  }
}
    `;
export const useGetCopomisImportMemberReportQuery = <
  TData = GetCopomisImportMemberReportQuery,
  TError = unknown
>(
  variables?: GetCopomisImportMemberReportQueryVariables,
  options?: UseQueryOptions<GetCopomisImportMemberReportQuery, TError, TData>
) =>
  useQuery<GetCopomisImportMemberReportQuery, TError, TData>(
    variables === undefined
      ? ['getCopomisImportMemberReport']
      : ['getCopomisImportMemberReport', variables],
    useAxios<GetCopomisImportMemberReportQuery, GetCopomisImportMemberReportQueryVariables>(
      GetCopomisImportMemberReportDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpeningReportDocument = `
    query getAccountOpeningReport($data: AccountOpeningReportInput) {
  report {
    depositReport {
      accountOpeningReport(data: $data) {
        data {
          accountName
          accountNumber
          memberCode
          memberId
          openedBy
          openingDate
          branchId
          branchName
          nature
        }
      }
    }
  }
}
    `;
export const useGetAccountOpeningReportQuery = <
  TData = GetAccountOpeningReportQuery,
  TError = unknown
>(
  variables?: GetAccountOpeningReportQueryVariables,
  options?: UseQueryOptions<GetAccountOpeningReportQuery, TError, TData>
) =>
  useQuery<GetAccountOpeningReportQuery, TError, TData>(
    variables === undefined ? ['getAccountOpeningReport'] : ['getAccountOpeningReport', variables],
    useAxios<GetAccountOpeningReportQuery, GetAccountOpeningReportQueryVariables>(
      GetAccountOpeningReportDocument
    ).bind(null, variables),
    options
  );
export const GetDepositAccountClosingReportDocument = `
    query getDepositAccountClosingReport($data: AccountClosingReportInput) {
  report {
    depositReport {
      accountClosingReport(data: $data) {
        data {
          memberId
          memberCode
          accountNumber
          accountName
          openingDate
          closingDate
          closedBalance
          closedBy
          branchId
          branchName
        }
      }
    }
  }
}
    `;
export const useGetDepositAccountClosingReportQuery = <
  TData = GetDepositAccountClosingReportQuery,
  TError = unknown
>(
  variables?: GetDepositAccountClosingReportQueryVariables,
  options?: UseQueryOptions<GetDepositAccountClosingReportQuery, TError, TData>
) =>
  useQuery<GetDepositAccountClosingReportQuery, TError, TData>(
    variables === undefined
      ? ['getDepositAccountClosingReport']
      : ['getDepositAccountClosingReport', variables],
    useAxios<GetDepositAccountClosingReportQuery, GetDepositAccountClosingReportQueryVariables>(
      GetDepositAccountClosingReportDocument
    ).bind(null, variables),
    options
  );
export const GetAccountClosingReportDocument = `
    query getAccountClosingReport($data: AccountClosingReportInput) {
  report {
    depositReport {
      accountClosingReport(data: $data) {
        data {
          memberId
          memberCode
          accountNumber
          accountName
          openingDate
          closingDate
          closedBalance
          branchName
          branchId
          closedBy
        }
      }
    }
  }
}
    `;
export const useGetAccountClosingReportQuery = <
  TData = GetAccountClosingReportQuery,
  TError = unknown
>(
  variables?: GetAccountClosingReportQueryVariables,
  options?: UseQueryOptions<GetAccountClosingReportQuery, TError, TData>
) =>
  useQuery<GetAccountClosingReportQuery, TError, TData>(
    variables === undefined ? ['getAccountClosingReport'] : ['getAccountClosingReport', variables],
    useAxios<GetAccountClosingReportQuery, GetAccountClosingReportQueryVariables>(
      GetAccountClosingReportDocument
    ).bind(null, variables),
    options
  );
export const GetInterestTaxReportDocument = `
    query getInterestTaxReport($data: InterestTaxReportFilter!) {
  report {
    depositReport {
      interestTaxReport(data: $data) {
        data {
          memberId
          memberCode
          name
          address {
            ...Address
          }
          panNo
          accountNo
          date
          interest
          tax
          savingBalance
          closingBalance
          remarks
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetInterestTaxReportQuery = <TData = GetInterestTaxReportQuery, TError = unknown>(
  variables: GetInterestTaxReportQueryVariables,
  options?: UseQueryOptions<GetInterestTaxReportQuery, TError, TData>
) =>
  useQuery<GetInterestTaxReportQuery, TError, TData>(
    ['getInterestTaxReport', variables],
    useAxios<GetInterestTaxReportQuery, GetInterestTaxReportQueryVariables>(
      GetInterestTaxReportDocument
    ).bind(null, variables),
    options
  );
export const GetTtrReportDocument = `
    query getTtrReport($data: TTRReportFilter!) {
  report {
    depositReport {
      thresholdTransactionReport(data: $data) {
        data {
          yearly {
            name
            memberId
            address {
              ...Address
            }
            branch
            date
            nature
            accountNo
            amount
            sourceOfFund
            remarks
          }
          perTranx {
            name
            memberId
            address {
              ...Address
            }
            branch
            date
            nature
            accountNo
            amount
            sourceOfFund
            remarks
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetTtrReportQuery = <TData = GetTtrReportQuery, TError = unknown>(
  variables: GetTtrReportQueryVariables,
  options?: UseQueryOptions<GetTtrReportQuery, TError, TData>
) =>
  useQuery<GetTtrReportQuery, TError, TData>(
    ['getTtrReport', variables],
    useAxios<GetTtrReportQuery, GetTtrReportQueryVariables>(GetTtrReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetSavingStatementDocument = `
    query getSavingStatement($data: SavingStatementReportSettings!) {
  report {
    depositReport {
      savingStatementReport(data: $data) {
        memberId
        member {
          id
          code
          name
          address {
            wardNo
            state
            district
            houseNo
            localGovernment
          }
          dateJoined
          activeDate
          branch
        }
        statement {
          ... on SavingStatementReport {
            savingStatement {
              date
              balanceAmount
              depositCr
              chequeOrVoucherNo
              particular
              withdrawDr
            }
            totals {
              totalBalance
              totalWithdraw
              totalDeposit
            }
            meta {
              currentInterestRate
              accountNo
              savingType
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingStatementQuery = <TData = GetSavingStatementQuery, TError = unknown>(
  variables: GetSavingStatementQueryVariables,
  options?: UseQueryOptions<GetSavingStatementQuery, TError, TData>
) =>
  useQuery<GetSavingStatementQuery, TError, TData>(
    ['getSavingStatement', variables],
    useAxios<GetSavingStatementQuery, GetSavingStatementQueryVariables>(
      GetSavingStatementDocument
    ).bind(null, variables),
    options
  );
export const GetInterestStatementReportDocument = `
    query getInterestStatementReport($data: InterestStatementFilter!) {
  report {
    depositReport {
      interestStatementReport(data: $data) {
        data {
          entries {
            date
            amount
            balance
            days
            rate
            remarks
            tds
          }
          memberId
          accountNo
          accountType
          currentInterestRate
          memberName
          address {
            wardNo
            state
            locality
            localGovernment
            district
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetInterestStatementReportQuery = <
  TData = GetInterestStatementReportQuery,
  TError = unknown
>(
  variables: GetInterestStatementReportQueryVariables,
  options?: UseQueryOptions<GetInterestStatementReportQuery, TError, TData>
) =>
  useQuery<GetInterestStatementReportQuery, TError, TData>(
    ['getInterestStatementReport', variables],
    useAxios<GetInterestStatementReportQuery, GetInterestStatementReportQueryVariables>(
      GetInterestStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetSuspiciousTransactionReportDocument = `
    query getSuspiciousTransactionReport($data: SuspiciousTransactionReportInput!) {
  report {
    depositReport {
      suspiciousTransctionReport(data: $data) {
        data {
          id
          date
          memberId
          memberName
          amount
          product_name
          tranxType
          status
          branchId
          branchName
        }
      }
    }
  }
}
    `;
export const useGetSuspiciousTransactionReportQuery = <
  TData = GetSuspiciousTransactionReportQuery,
  TError = unknown
>(
  variables: GetSuspiciousTransactionReportQueryVariables,
  options?: UseQueryOptions<GetSuspiciousTransactionReportQuery, TError, TData>
) =>
  useQuery<GetSuspiciousTransactionReportQuery, TError, TData>(
    ['getSuspiciousTransactionReport', variables],
    useAxios<GetSuspiciousTransactionReportQuery, GetSuspiciousTransactionReportQueryVariables>(
      GetSuspiciousTransactionReportDocument
    ).bind(null, variables),
    options
  );
export const GetFixedDepositReportDocument = `
    query getFixedDepositReport($data: FixedDepositReportInput!) {
  report {
    depositReport {
      fixedDepositReport(data: $data) {
        data {
          memberID
          memberCode
          memberName
          accountOpenDate
          serviceCenter
          mobileNo
          accountName
          accountNo
          expiryDate
          nomineeAccountNo
          fdAmount
          interestAmount
        }
      }
    }
  }
}
    `;
export const useGetFixedDepositReportQuery = <TData = GetFixedDepositReportQuery, TError = unknown>(
  variables: GetFixedDepositReportQueryVariables,
  options?: UseQueryOptions<GetFixedDepositReportQuery, TError, TData>
) =>
  useQuery<GetFixedDepositReportQuery, TError, TData>(
    ['getFixedDepositReport', variables],
    useAxios<GetFixedDepositReportQuery, GetFixedDepositReportQueryVariables>(
      GetFixedDepositReportDocument
    ).bind(null, variables),
    options
  );
export const GetClosedSavingAccountStatementDocument = `
    query getClosedSavingAccountStatement($data: ClosedSavingAccountInput!) {
  report {
    depositReport {
      closedSavingAccountReport(data: $data) {
        data {
          address {
            ...Address
          }
          memberName
          memberShipCode
          membershipDate
          serviceCenterName
          accountNo
          savingType
          closedDate
          entries {
            balanceAmount
            balanceType
            date
            transactionID
            withdrawAmount
            depositAmount
            withdrawAmount
            particular
          }
          totalWithdraw
          totalDeposit
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetClosedSavingAccountStatementQuery = <
  TData = GetClosedSavingAccountStatementQuery,
  TError = unknown
>(
  variables: GetClosedSavingAccountStatementQueryVariables,
  options?: UseQueryOptions<GetClosedSavingAccountStatementQuery, TError, TData>
) =>
  useQuery<GetClosedSavingAccountStatementQuery, TError, TData>(
    ['getClosedSavingAccountStatement', variables],
    useAxios<GetClosedSavingAccountStatementQuery, GetClosedSavingAccountStatementQueryVariables>(
      GetClosedSavingAccountStatementDocument
    ).bind(null, variables),
    options
  );
export const GetSavingProductBalanceDocument = `
    query getSavingProductBalance($data: SavingProductBalanceFilter!) {
  report {
    depositReport {
      savingProductBalanceReport(data: $data) {
        data {
          accountTotal
          balanceTotal
          entries {
            balanceMap
            code
            id
            name
            nature
            noOfAccountsMap
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingProductBalanceQuery = <
  TData = GetSavingProductBalanceQuery,
  TError = unknown
>(
  variables: GetSavingProductBalanceQueryVariables,
  options?: UseQueryOptions<GetSavingProductBalanceQuery, TError, TData>
) =>
  useQuery<GetSavingProductBalanceQuery, TError, TData>(
    ['getSavingProductBalance', variables],
    useAxios<GetSavingProductBalanceQuery, GetSavingProductBalanceQueryVariables>(
      GetSavingProductBalanceDocument
    ).bind(null, variables),
    options
  );
export const GetDormantAccountReportDocument = `
    query getDormantAccountReport($data: DormantAccountReportInput) {
  report {
    depositReport {
      dormantAccountReport(data: $data) {
        data {
          memberID
          memberCode
          memberName
          serviceCenter
          memberRegistrationDate
          mobileNo
          productName
          accountName
          accountNo
          accountOpenDate
          balance
          reason
          remarks
        }
      }
    }
  }
}
    `;
export const useGetDormantAccountReportQuery = <
  TData = GetDormantAccountReportQuery,
  TError = unknown
>(
  variables?: GetDormantAccountReportQueryVariables,
  options?: UseQueryOptions<GetDormantAccountReportQuery, TError, TData>
) =>
  useQuery<GetDormantAccountReportQuery, TError, TData>(
    variables === undefined ? ['getDormantAccountReport'] : ['getDormantAccountReport', variables],
    useAxios<GetDormantAccountReportQuery, GetDormantAccountReportQueryVariables>(
      GetDormantAccountReportDocument
    ).bind(null, variables),
    options
  );
export const GetSavingAccountAccruedInterestReportDocument = `
    query getSavingAccountAccruedInterestReport($data: AccruedInterestFilter!) {
  report {
    depositReport {
      savingAccruedInterestReport(data: $data) {
        data {
          balance
          date
          interestAccrued
          interestRate
          transactionId
        }
        basicInfo {
          memberName
          accountId
          accountName
          accountType
          address {
            ...Address
          }
          currentInterestRate
          memberCode
          memberId
          membershipDate
          serviceCentreId
          serviceCentreName
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetSavingAccountAccruedInterestReportQuery = <
  TData = GetSavingAccountAccruedInterestReportQuery,
  TError = unknown
>(
  variables: GetSavingAccountAccruedInterestReportQueryVariables,
  options?: UseQueryOptions<GetSavingAccountAccruedInterestReportQuery, TError, TData>
) =>
  useQuery<GetSavingAccountAccruedInterestReportQuery, TError, TData>(
    ['getSavingAccountAccruedInterestReport', variables],
    useAxios<
      GetSavingAccountAccruedInterestReportQuery,
      GetSavingAccountAccruedInterestReportQueryVariables
    >(GetSavingAccountAccruedInterestReportDocument).bind(null, variables),
    options
  );
export const GetEtdsStatementDocument = `
    query getETDSStatement($data: ETDSReportFilter!) {
  report {
    depositReport {
      ETDSReport(data: $data) {
        data {
          date
          branchId
          interest
          memberName
          panNo
          tax
          tdsType
        }
      }
    }
  }
}
    `;
export const useGetEtdsStatementQuery = <TData = GetEtdsStatementQuery, TError = unknown>(
  variables: GetEtdsStatementQueryVariables,
  options?: UseQueryOptions<GetEtdsStatementQuery, TError, TData>
) =>
  useQuery<GetEtdsStatementQuery, TError, TData>(
    ['getETDSStatement', variables],
    useAxios<GetEtdsStatementQuery, GetEtdsStatementQueryVariables>(GetEtdsStatementDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetUserReportDocument = `
    query getUserReport($data: UserReportFilter) {
  report {
    employeeReport {
      userReport(data: $data) {
        data {
          isCoreEmployee
          employeeName
          empCode
          username
          usernameCode
          accessForBranch
          accessForGroup
          role
          createdDate
          createdBy
          status
          remarks
        }
      }
    }
  }
}
    `;
export const useGetUserReportQuery = <TData = GetUserReportQuery, TError = unknown>(
  variables?: GetUserReportQueryVariables,
  options?: UseQueryOptions<GetUserReportQuery, TError, TData>
) =>
  useQuery<GetUserReportQuery, TError, TData>(
    variables === undefined ? ['getUserReport'] : ['getUserReport', variables],
    useAxios<GetUserReportQuery, GetUserReportQueryVariables>(GetUserReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetExceptionSavingsBalanceReportDocument = `
    query getExceptionSavingsBalanceReport($data: SavingsBalanceFilterData!) {
  report {
    exceptionReport {
      savingsBalanceReport(data: $data) {
        data {
          accountId
          memberId
          memberCode
          memberName
          productId
          productName
          productCode
          accountOpeningDate
          memberType
          drBalance
          crBalance
          currentInterestType
          currentInterestRate
          currentInterest
          endDate
          branchId
          branchName
          isInactive
          isClosed
        }
        summary {
          totalIndividualAccount
          totalMinorAccount
          totalOtherAccount
        }
        totalDrBalance
        totalCrBalance
        interestType
        totalInterest
      }
    }
  }
}
    `;
export const useGetExceptionSavingsBalanceReportQuery = <
  TData = GetExceptionSavingsBalanceReportQuery,
  TError = unknown
>(
  variables: GetExceptionSavingsBalanceReportQueryVariables,
  options?: UseQueryOptions<GetExceptionSavingsBalanceReportQuery, TError, TData>
) =>
  useQuery<GetExceptionSavingsBalanceReportQuery, TError, TData>(
    ['getExceptionSavingsBalanceReport', variables],
    useAxios<GetExceptionSavingsBalanceReportQuery, GetExceptionSavingsBalanceReportQueryVariables>(
      GetExceptionSavingsBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetExceptionLoanBalanceReportDocument = `
    query getExceptionLoanBalanceReport($data: LoanBalanceFilterData!) {
  report {
    exceptionReport {
      loanBalanceReport(data: $data) {
        data {
          memberId
          memberCode
          loanAccountId
          memberName
          productName
          productId
          productCode
          disbursedBalance
          remainingCrBalance
          remainingDrBalance
          remainingInterest
          lastPaymentDate
          branchId
          branchName
          loanEndDate
          interestRate
          loanType
          isInactive
          isClosed
          remainingInterestType
        }
        totalOutstandingBalance
        totalRemainingDrBalance
        totalRemainingCrBalance
        totalRemainingInterest
        totalRemainingInterestType
      }
    }
  }
}
    `;
export const useGetExceptionLoanBalanceReportQuery = <
  TData = GetExceptionLoanBalanceReportQuery,
  TError = unknown
>(
  variables: GetExceptionLoanBalanceReportQueryVariables,
  options?: UseQueryOptions<GetExceptionLoanBalanceReportQuery, TError, TData>
) =>
  useQuery<GetExceptionLoanBalanceReportQuery, TError, TData>(
    ['getExceptionLoanBalanceReport', variables],
    useAxios<GetExceptionLoanBalanceReportQuery, GetExceptionLoanBalanceReportQueryVariables>(
      GetExceptionLoanBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetExceptionShareBalanceReportDocument = `
    query getExceptionShareBalanceReport($data: ShareBalanceReportFilter!) {
  report {
    exceptionReport {
      shareBalanceReport(data: $data) {
        data {
          shareType
          shareCertificateNo
          memberId
          isInactive
          memberCode
          memberName
          address {
            ...Address
          }
          contactNo
          membershipDate
          noOfKitta
          balance
          branchId
          branchName
        }
        totalBalance
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetExceptionShareBalanceReportQuery = <
  TData = GetExceptionShareBalanceReportQuery,
  TError = unknown
>(
  variables: GetExceptionShareBalanceReportQueryVariables,
  options?: UseQueryOptions<GetExceptionShareBalanceReportQuery, TError, TData>
) =>
  useQuery<GetExceptionShareBalanceReportQuery, TError, TData>(
    ['getExceptionShareBalanceReport', variables],
    useAxios<GetExceptionShareBalanceReportQuery, GetExceptionShareBalanceReportQueryVariables>(
      GetExceptionShareBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryRegisterReportDocument = `
    query getInventoryRegisterReport($data: InventoryRegistrationFilter) {
  report {
    inventoryReport {
      inventoryRegistrationReport(data: $data) {
        data {
          itemId
          itemName
          quantityPurchased
          quantitySoled
          quantityInStock
          pricePerUnit
          stockValue
          vatPercent
          vatAmount
          stockValueVat
          reorderQuantityLevel
        }
        total {
          totalQuantityPurchased
          totalQuantitySoled
          totalQuantityInStock
          totalStockValue
          totalVatAmount
          totalStockValueVat
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryRegisterReportQuery = <
  TData = GetInventoryRegisterReportQuery,
  TError = unknown
>(
  variables?: GetInventoryRegisterReportQueryVariables,
  options?: UseQueryOptions<GetInventoryRegisterReportQuery, TError, TData>
) =>
  useQuery<GetInventoryRegisterReportQuery, TError, TData>(
    variables === undefined
      ? ['getInventoryRegisterReport']
      : ['getInventoryRegisterReport', variables],
    useAxios<GetInventoryRegisterReportQuery, GetInventoryRegisterReportQueryVariables>(
      GetInventoryRegisterReportDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryStockStatusReportDocument = `
    query getInventoryStockStatusReport($data: InventoryStockStatusFilter) {
  report {
    inventoryReport {
      newinventoryStockStatusreport(data: $data) {
        data {
          upper {
            itemCode
            itemName
            warehouseId
            warehouseName
            totalPurchased
            totalSoled
            totalNet
            totalTransferIn
            totalTransferOut
          }
          lower {
            purchasedQuantity
            soldQuantity
            purchasedDate
            soldDate
            transferAcceptQuantity
            transferAcceptDate
            transferSentQuantity
            transferSentDate
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventoryStockStatusReportQuery = <
  TData = GetInventoryStockStatusReportQuery,
  TError = unknown
>(
  variables?: GetInventoryStockStatusReportQueryVariables,
  options?: UseQueryOptions<GetInventoryStockStatusReportQuery, TError, TData>
) =>
  useQuery<GetInventoryStockStatusReportQuery, TError, TData>(
    variables === undefined
      ? ['getInventoryStockStatusReport']
      : ['getInventoryStockStatusReport', variables],
    useAxios<GetInventoryStockStatusReportQuery, GetInventoryStockStatusReportQueryVariables>(
      GetInventoryStockStatusReportDocument
    ).bind(null, variables),
    options
  );
export const GetInventorySalesReportDocument = `
    query getInventorySalesReport($data: SalesReportFilter!) {
  report {
    accountingReport {
      salesReport(data: $data) {
        summationData {
          totalPerQuantityPrice
          totalPrice
          totalPriceWithVat
          totalQuantitySold
          totalVatAmount
        }
        data {
          itemId
          itemName
          unitName
          selligPrice
          soldQuantity
          totalPrice
          vatAmount
          netAmountWithVat
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInventorySalesReportQuery = <
  TData = GetInventorySalesReportQuery,
  TError = unknown
>(
  variables: GetInventorySalesReportQueryVariables,
  options?: UseQueryOptions<GetInventorySalesReportQuery, TError, TData>
) =>
  useQuery<GetInventorySalesReportQuery, TError, TData>(
    ['getInventorySalesReport', variables],
    useAxios<GetInventorySalesReportQuery, GetInventorySalesReportQueryVariables>(
      GetInventorySalesReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanBalanceReportDocument = `
    query getLoanBalanceReport($data: LoanBalanceFilterData!) {
  report {
    loanReport {
      loanBalanceReport(data: $data) {
        data {
          memberId
          memberCode
          loanAccountId
          memberName
          productName
          productId
          productCode
          disbursedBalance
          remainingCrBalance
          remainingDrBalance
          remainingInterest
          lastPaymentDate
          branchId
          branchName
          loanEndDate
          interestRate
          loanType
          remainingInterestType
        }
        totalOutstandingBalance
        totalRemainingDrBalance
        totalRemainingCrBalance
        totalRemainingInterest
        totalRemainingInterestType
      }
    }
  }
}
    `;
export const useGetLoanBalanceReportQuery = <TData = GetLoanBalanceReportQuery, TError = unknown>(
  variables: GetLoanBalanceReportQueryVariables,
  options?: UseQueryOptions<GetLoanBalanceReportQuery, TError, TData>
) =>
  useQuery<GetLoanBalanceReportQuery, TError, TData>(
    ['getLoanBalanceReport', variables],
    useAxios<GetLoanBalanceReportQuery, GetLoanBalanceReportQueryVariables>(
      GetLoanBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAgingStatementReportDocument = `
    query getLoanAgingStatementReport($data: LoanAgingStatementInput!) {
  report {
    loanReport {
      loanAgingStatementReport(data: $data) {
        data {
          report {
            memberNo
            memberName
            loanNo
            name
            address
            phoneNo
            loanType
            paymentMode
            issueDate
            loanMaturityDate
            disbursePrincipal
            remainingPrincipal
            installmentAmount
            remainingInstallmentAmount
            remainingInterest
            remainingPenalty
            totalDueAmount
            goodAmount
            matured1To30Days
            matured1To12Months
            maturedAbove12Months
            lastPrincipalPaidDate
            lastInterestPaidDate
            installmentLateDays
            nextPaymentDate
            tenure
            branchId
            branchName
          }
          summary {
            disbursePrincipalTotal
            remainingPrincipalTotal
            installmentAmountTotal
            remainingInstallmentAmountTotal
            remainingInterestTotal
            remainingPenaltyTotal
            dueAmountTotal
            goodAmountTotal
            matured1To30DaysTotal
            matured1To12MonthsTotal
            maturedAbove12MonthsTotal
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanAgingStatementReportQuery = <
  TData = GetLoanAgingStatementReportQuery,
  TError = unknown
>(
  variables: GetLoanAgingStatementReportQueryVariables,
  options?: UseQueryOptions<GetLoanAgingStatementReportQuery, TError, TData>
) =>
  useQuery<GetLoanAgingStatementReportQuery, TError, TData>(
    ['getLoanAgingStatementReport', variables],
    useAxios<GetLoanAgingStatementReportQuery, GetLoanAgingStatementReportQueryVariables>(
      GetLoanAgingStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanStatementReportDocument = `
    query getLoanStatementReport($data: LoanStatementReportSettings!) {
  report {
    loanReport {
      loanStatementReport(data: $data) {
        memberId
        member {
          name
          code
          branch
          address {
            state
            district
            localGovernment
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
        }
        statement {
          ... on LoanStatementReport {
            meta {
              accountNo
              approvedAmount
              interestRate
              loanType
              loanSubtype
              issuedDate
              installment
              charge
              openingBalance
              disbursedAmount
            }
            loanStatement {
              date
              particular
              txnId
              disbursePrinciple
              paidPrinciple
              interestPaid
              finePaid
              discount
              remainingPrinciple
            }
            footer {
              openingBalance {
                amount
                amountType
              }
              disbursePrincipleTotal
              paidPrincipleTotal
              interestPaidTotal
              penaltyPaidTotal
              discountTotal
              remainingPrincipleTotal
              closingBalance {
                amount
                amountType
              }
            }
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanStatementReportQuery = <
  TData = GetLoanStatementReportQuery,
  TError = unknown
>(
  variables: GetLoanStatementReportQueryVariables,
  options?: UseQueryOptions<GetLoanStatementReportQuery, TError, TData>
) =>
  useQuery<GetLoanStatementReportQuery, TError, TData>(
    ['getLoanStatementReport', variables],
    useAxios<GetLoanStatementReportQuery, GetLoanStatementReportQueryVariables>(
      GetLoanStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetClosedLoanAccountReportDocument = `
    query getClosedLoanAccountReport($data: ClosedLoanAccountFilter) {
  report {
    loanReport {
      closedLoanAccountStatementReport(data: $data) {
        data {
          date
          disbursedPrincipal
          discount
          finePaid
          interestPaid
          particular
          principalPaid
          remainingPrincipal
          transactionId
        }
        meta {
          address
          memberCode
          memberId
          memberName
          noOfInstallments
          approvedAmount
          branchName
          interestRate
          loanAccountNo
          loanAccountNo
          loanClosedDate
          loanIssuedDate
          loanProcessingCharge
          loanSubtype
          loanType
        }
        summary {
          remainingPrincipal
          totalDisbursedPrincipal
          totalDiscount
          totalFinePaid
          totalInterestPaid
          totalPrincipalPaid
        }
      }
    }
  }
}
    `;
export const useGetClosedLoanAccountReportQuery = <
  TData = GetClosedLoanAccountReportQuery,
  TError = unknown
>(
  variables?: GetClosedLoanAccountReportQueryVariables,
  options?: UseQueryOptions<GetClosedLoanAccountReportQuery, TError, TData>
) =>
  useQuery<GetClosedLoanAccountReportQuery, TError, TData>(
    variables === undefined
      ? ['getClosedLoanAccountReport']
      : ['getClosedLoanAccountReport', variables],
    useAxios<GetClosedLoanAccountReportQuery, GetClosedLoanAccountReportQueryVariables>(
      GetClosedLoanAccountReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanCollateralReportDocument = `
    query getLoanCollateralReport($data: LoanCollateralFilter!) {
  report {
    loanReport {
      loanCollateralReport(data: $data) {
        data {
          collateralInformation {
            collateralDescription
            collateralType
            dvMinAmount
            fmvMaxAmount
            ownerName
            valuationMethod
            valuationAmount
            valuatorName
            status
          }
          loanAccountNo
          loanAccountType
          loanDisbursedAmount
          memberId
          memberCode
          memberName
          remainingPrincipal
        }
      }
    }
  }
}
    `;
export const useGetLoanCollateralReportQuery = <
  TData = GetLoanCollateralReportQuery,
  TError = unknown
>(
  variables: GetLoanCollateralReportQueryVariables,
  options?: UseQueryOptions<GetLoanCollateralReportQuery, TError, TData>
) =>
  useQuery<GetLoanCollateralReportQuery, TError, TData>(
    ['getLoanCollateralReport', variables],
    useAxios<GetLoanCollateralReportQuery, GetLoanCollateralReportQueryVariables>(
      GetLoanCollateralReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanPersonalGuranteeReportDocument = `
    query getLoanPersonalGuranteeReport($data: LoanAccountGuaranteeReportInput) {
  report {
    loanReport {
      personalGuaranteeReport(data: $data) {
        data {
          disbursedAmount
          guarantorInformantion {
            date
            depositAccountNo
            guaranteeAmount
            memCode
            memId
            memName
            guaranteeStatus
          }
          loanAccountNo
          memberCode
          memberId
          memberName
          totalGuaranteeAmount
        }
      }
    }
  }
}
    `;
export const useGetLoanPersonalGuranteeReportQuery = <
  TData = GetLoanPersonalGuranteeReportQuery,
  TError = unknown
>(
  variables?: GetLoanPersonalGuranteeReportQueryVariables,
  options?: UseQueryOptions<GetLoanPersonalGuranteeReportQuery, TError, TData>
) =>
  useQuery<GetLoanPersonalGuranteeReportQuery, TError, TData>(
    variables === undefined
      ? ['getLoanPersonalGuranteeReport']
      : ['getLoanPersonalGuranteeReport', variables],
    useAxios<GetLoanPersonalGuranteeReportQuery, GetLoanPersonalGuranteeReportQueryVariables>(
      GetLoanPersonalGuranteeReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductBalanceReportDocument = `
    query getLoanProductBalanceReport($data: LoanProductBalanceReportFilter) {
  report {
    loanReport {
      loanProductBalance(data: $data) {
        data {
          productCode
          productId
          productType
          productName
          noOfOpeningAccounts
          noOfTotalAccounts
          openingLoanBalance
          totalLoanBalance
        }
        summary {
          noOfOpeningAccounts
          noOfTotalAccounts
          totalLoanBalance
          totalOpeningLoanBalance
        }
      }
    }
  }
}
    `;
export const useGetLoanProductBalanceReportQuery = <
  TData = GetLoanProductBalanceReportQuery,
  TError = unknown
>(
  variables?: GetLoanProductBalanceReportQueryVariables,
  options?: UseQueryOptions<GetLoanProductBalanceReportQuery, TError, TData>
) =>
  useQuery<GetLoanProductBalanceReportQuery, TError, TData>(
    variables === undefined
      ? ['getLoanProductBalanceReport']
      : ['getLoanProductBalanceReport', variables],
    useAxios<GetLoanProductBalanceReportQuery, GetLoanProductBalanceReportQueryVariables>(
      GetLoanProductBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanCallSheetReportDocument = `
    query getLoanCallSheetReport($data: LoanCallReportFilter) {
  report {
    loanReport {
      loanCallReport(data: $data) {
        data {
          memberId
          memberCode
          memberName
          loanAccountNo
          loanType
          serviceCenter
          installmentDate
          installmentAmount
          installmentDueAmount
          installmentDueDays
          totalInstallment
        }
      }
    }
  }
}
    `;
export const useGetLoanCallSheetReportQuery = <
  TData = GetLoanCallSheetReportQuery,
  TError = unknown
>(
  variables?: GetLoanCallSheetReportQueryVariables,
  options?: UseQueryOptions<GetLoanCallSheetReportQuery, TError, TData>
) =>
  useQuery<GetLoanCallSheetReportQuery, TError, TData>(
    variables === undefined ? ['getLoanCallSheetReport'] : ['getLoanCallSheetReport', variables],
    useAxios<GetLoanCallSheetReportQuery, GetLoanCallSheetReportQueryVariables>(
      GetLoanCallSheetReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccruedInterestReportDocument = `
    query getLoanAccruedInterestReport($data: AccruedInterestFilter!) {
  report {
    loanReport {
      loanAccruedInterestReport(data: $data) {
        data {
          transactionId
          interestRate
          interestAccrued
          date
          balance
        }
        basicInfo {
          serviceCentreName
          serviceCentreId
          membershipDate
          memberName
          memberId
          memberCode
          currentInterestRate
          accountType
          accountName
          accountId
          accountSubType
          address {
            ...Address
          }
          approvedAmount
          disbursedAmount
          loanIssueDate
          noOfInstallment
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetLoanAccruedInterestReportQuery = <
  TData = GetLoanAccruedInterestReportQuery,
  TError = unknown
>(
  variables: GetLoanAccruedInterestReportQueryVariables,
  options?: UseQueryOptions<GetLoanAccruedInterestReportQuery, TError, TData>
) =>
  useQuery<GetLoanAccruedInterestReportQuery, TError, TData>(
    ['getLoanAccruedInterestReport', variables],
    useAxios<GetLoanAccruedInterestReportQuery, GetLoanAccruedInterestReportQueryVariables>(
      GetLoanAccruedInterestReportDocument
    ).bind(null, variables),
    options
  );
export const GetDosariReportDocument = `
    query getDosariReport($data: DosariReportInput!) {
  report {
    loanReport {
      dosariLoanReport(data: $data) {
        error {
          ...QueryError
        }
        summary {
          disbursePrincipalTotal
          remainingPrincipalTotal
          installmentAmountTotal
          remainingInstallmentAmountTotal
          remainingInterestTotal
          remainingPenaltyTotal
          dueAmountTotal
          goodAmountTotal
          matured1To30DaysTotal
          matured1To12MonthsTotal
          maturedAbove12MonthsTotal
        }
        data {
          designation
          fullName
          phoneNumber
          type
          loanAgingStatementData {
            report {
              memberNo
              loanNo
              name
              address
              phoneNo
              loanType
              paymentMode
              issueDate
              loanMaturityDate
              disbursePrincipal
              remainingPrincipal
              installmentAmount
              remainingInstallmentAmount
              remainingInterest
              remainingPenalty
              totalDueAmount
              goodAmount
              matured1To30Days
              matured1To12Months
              maturedAbove12Months
              lastPrincipalPaidDate
              lastInterestPaidDate
              installmentLateDays
              nextPaymentDate
              tenure
              branchId
              branchName
            }
          }
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetDosariReportQuery = <TData = GetDosariReportQuery, TError = unknown>(
  variables: GetDosariReportQueryVariables,
  options?: UseQueryOptions<GetDosariReportQuery, TError, TData>
) =>
  useQuery<GetDosariReportQuery, TError, TData>(
    ['getDosariReport', variables],
    useAxios<GetDosariReportQuery, GetDosariReportQueryVariables>(GetDosariReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanWriteOffReportDocument = `
    query getLoanWriteOffReport($data: LoanWriteOffReportFilter!) {
  report {
    loanReport {
      loanWriteOffReport(data: $data) {
        data {
          memberNo
          memberId
          loanNo
          loanId
          name
          loanType
          loanIssueDate
          loanMaturityDate
          disbursedPrincipal
          remainingPrincipal
          writeOffPrincipalAmount
          writeOffInterestAmount
          writeOffFine
          remainingPrincipalAmount
          remainingInterestAmount
          remainingFineAmount
          writeOffDate
          writeOffReason
          overdueDays
        }
        summary {
          totalDisbursedPrincipal
          totalWriteOffFine
          totalWriteOffInterestAmount
          totalWriteOffPrincipalAmount
          totalRemainingPrincipal
          totalRemainingPrincipalAmount
          totalRemainingInterestAmount
          totalRemainingFine
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanWriteOffReportQuery = <TData = GetLoanWriteOffReportQuery, TError = unknown>(
  variables: GetLoanWriteOffReportQueryVariables,
  options?: UseQueryOptions<GetLoanWriteOffReportQuery, TError, TData>
) =>
  useQuery<GetLoanWriteOffReportQuery, TError, TData>(
    ['getLoanWriteOffReport', variables],
    useAxios<GetLoanWriteOffReportQuery, GetLoanWriteOffReportQueryVariables>(
      GetLoanWriteOffReportDocument
    ).bind(null, variables),
    options
  );
export const GetLoanTransactionReportDocument = `
    query getLoanTransactionReport($data: LoanStatementReportSettings!) {
  report {
    loanReport {
      loanTransactionStatementReport(data: $data) {
        memberId
        member {
          name
          code
          branch
          address {
            state
            district
            localGovernment
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
        }
        statement {
          ... on LoanStatementReport {
            meta {
              accountNo
              approvedAmount
              interestRate
              loanType
              loanSubtype
              issuedDate
              installment
              charge
              openingBalance
              disbursedAmount
            }
            loanStatement {
              date
              particular
              txnId
              disbursePrinciple
              withdrawPrincipal
              paidPrinciple
              interestPaid
              finePaid
              discount
              remainingPrinciple
              ledgerBalance {
                amount
                amountType
              }
            }
            footer {
              openingBalance {
                amount
                amountType
              }
              disbursePrincipleTotal
              paidPrincipleTotal
              interestPaidTotal
              penaltyPaidTotal
              discountTotal
              remainingPrincipleTotal
              closingBalance {
                amount
                amountType
              }
            }
          }
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanTransactionReportQuery = <
  TData = GetLoanTransactionReportQuery,
  TError = unknown
>(
  variables: GetLoanTransactionReportQueryVariables,
  options?: UseQueryOptions<GetLoanTransactionReportQuery, TError, TData>
) =>
  useQuery<GetLoanTransactionReportQuery, TError, TData>(
    ['getLoanTransactionReport', variables],
    useAxios<GetLoanTransactionReportQuery, GetLoanTransactionReportQueryVariables>(
      GetLoanTransactionReportDocument
    ).bind(null, variables),
    options
  );
export const GetMemberClassificationReportDocument = `
    query getMemberClassificationReport($data: MemberClassificationFilter!) {
  report {
    memberReport {
      memberClassificationReport(data: $data) {
        data {
          gender {
            entryName
            inNumber
            inPercent
          }
          age {
            entryName
            inNumber
            inPercent
          }
          occupation {
            entryName
            inNumber
            inPercent
          }
          education {
            entryName
            inNumber
            inPercent
          }
          memberCategory {
            entryName
            inNumber
            inPercent
          }
          income {
            entryName
            inNumber
            inPercent
          }
          address {
            province {
              entryName
              inNumber
              inPercent
            }
            district {
              entryName
              inNumber
              inPercent
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberClassificationReportQuery = <
  TData = GetMemberClassificationReportQuery,
  TError = unknown
>(
  variables: GetMemberClassificationReportQueryVariables,
  options?: UseQueryOptions<GetMemberClassificationReportQuery, TError, TData>
) =>
  useQuery<GetMemberClassificationReportQuery, TError, TData>(
    ['getMemberClassificationReport', variables],
    useAxios<GetMemberClassificationReportQuery, GetMemberClassificationReportQueryVariables>(
      GetMemberClassificationReportDocument
    ).bind(null, variables),
    options
  );
export const GetActiveInactiveMemberReportDocument = `
    query getActiveInactiveMemberReport($data: ActiveInactiveMemberReportData) {
  report {
    memberReport {
      activeInactiveMemberReport(data: $data) {
        statement {
          ... on ActiveInactiveMemberReport {
            summary {
              activeTotal
              inactiveTotal
              totalMember
            }
            reportStatement {
              memberId
              memberCode
              memberName
              district
              wardNo
              address
              dob
              age
              contactNo
              gender
              pan
              occupation
              memberRegistrationDate
              status
              memberType
              branchId
              branchName
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetActiveInactiveMemberReportQuery = <
  TData = GetActiveInactiveMemberReportQuery,
  TError = unknown
>(
  variables?: GetActiveInactiveMemberReportQueryVariables,
  options?: UseQueryOptions<GetActiveInactiveMemberReportQuery, TError, TData>
) =>
  useQuery<GetActiveInactiveMemberReportQuery, TError, TData>(
    variables === undefined
      ? ['getActiveInactiveMemberReport']
      : ['getActiveInactiveMemberReport', variables],
    useAxios<GetActiveInactiveMemberReportQuery, GetActiveInactiveMemberReportQueryVariables>(
      GetActiveInactiveMemberReportDocument
    ).bind(null, variables),
    options
  );
export const GetKymStatusReportDocument = `
    query getKymStatusReport($data: KymStatusReportFilter) {
  report {
    memberReport {
      kymStatusReport(data: $data) {
        Summary
        data {
          address {
            ...Address
          }
          memberName
          memberId
          memberCode
          contact
          regDate
          riskCategory
          lastKymUpdatedDate
          kymExpireDays
          kymStatus
          branchId
          branchName
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetKymStatusReportQuery = <TData = GetKymStatusReportQuery, TError = unknown>(
  variables?: GetKymStatusReportQueryVariables,
  options?: UseQueryOptions<GetKymStatusReportQuery, TError, TData>
) =>
  useQuery<GetKymStatusReportQuery, TError, TData>(
    variables === undefined ? ['getKymStatusReport'] : ['getKymStatusReport', variables],
    useAxios<GetKymStatusReportQuery, GetKymStatusReportQueryVariables>(
      GetKymStatusReportDocument
    ).bind(null, variables),
    options
  );
export const GetMemberRegistrationReportDocument = `
    query getMemberRegistrationReport($data: MemberRegistrationReportData) {
  report {
    memberReport {
      memberRegistrationReport(data: $data) {
        data {
          individual {
            memberId
            memberCode
            name
            address {
              ...Address
            }
            dob
            grandFatherName
            fatherName
            SpouseName
            profession
            shareInfo {
              perShareAmount
              kitta
              amount
            }
            fingerPrint
            photo
            contactNo
            email
            other
          }
          other {
            memberId
            memberCode
            name
            address {
              ...Address
            }
            doe
            typeOfInstitution
            workingArea
            totalMember
            balanceSheet
            shareInfo {
              perShareAmount
              kitta
              amount
            }
            post
            authPersonName
            logo
            stamp
            contactNo
            email
            other
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetMemberRegistrationReportQuery = <
  TData = GetMemberRegistrationReportQuery,
  TError = unknown
>(
  variables?: GetMemberRegistrationReportQueryVariables,
  options?: UseQueryOptions<GetMemberRegistrationReportQuery, TError, TData>
) =>
  useQuery<GetMemberRegistrationReportQuery, TError, TData>(
    variables === undefined
      ? ['getMemberRegistrationReport']
      : ['getMemberRegistrationReport', variables],
    useAxios<GetMemberRegistrationReportQuery, GetMemberRegistrationReportQueryVariables>(
      GetMemberRegistrationReportDocument
    ).bind(null, variables),
    options
  );
export const GetMemberWiseBalanceReportDocument = `
    query getMemberWiseBalanceReport($data: MemberBalanceFilter) {
  report {
    memberReport {
      memberBalanceReport(data: $data) {
        data {
          memberCode
          memberId
          memberName
          memberType
          membershipDate
          totalSavingDrBalance
          totalSavingCrBalance
          totalLoanDrBalance
          totalLoanCrBalance
          totalShareDrBalance
          totalShareCrBalance
          branchName
        }
        summary {
          totalSavingDrBalance
          totalSavingCrBalance
          totalLoanDrBalance
          totalLoanCrBalance
          totalShareDrBalance
          totalShareCrBalance
        }
        error {
          ...QueryError
        }
      }
      __typename
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetMemberWiseBalanceReportQuery = <
  TData = GetMemberWiseBalanceReportQuery,
  TError = unknown
>(
  variables?: GetMemberWiseBalanceReportQueryVariables,
  options?: UseQueryOptions<GetMemberWiseBalanceReportQuery, TError, TData>
) =>
  useQuery<GetMemberWiseBalanceReportQuery, TError, TData>(
    variables === undefined
      ? ['getMemberWiseBalanceReport']
      : ['getMemberWiseBalanceReport', variables],
    useAxios<GetMemberWiseBalanceReportQuery, GetMemberWiseBalanceReportQueryVariables>(
      GetMemberWiseBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualMemberReportDocument = `
    query getIndividualMemberReport($memberId: ID!) {
  report {
    memberReport {
      individualMemberReport(memberId: $memberId) {
        data {
          header {
            memberId
            memberCode
            name
            profilePic
            address {
              ...Address
            }
            contactNo
            panNo
            membershipDate
            shareCertificateNo
            totalShareCount
            riskCategory
            kymStatus
            kymExpiryDate
          }
          closedAccountDetail {
            accountName
            accountNo
            closedDate
            accountType
          }
          shareDetail {
            shareKitta
            count
            shareBalance
          }
          loanDetail {
            loanAccountNo
            loanAccountName
            issuedDate
            approvedAmount
            remainingAmount
            lastPaymentDate
          }
          recentTransactions {
            transactionId
            transactionDate
            transactionType
            transactionAmount
          }
          totalTransactionAmount
          savingDetail {
            accountNo
            accountName
            balance
            balanceType
            totalGuaranteeAmount
            transactionCount
            guaranteeLoanDetail {
              loanAccountNo
              amount
            }
          }
          totalGuaranteeBalance
          totalSavingBalance
          totalApprovedAmount
          totalRemainingAmount
          totalTransactionAmount
          totalShareBalance
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetIndividualMemberReportQuery = <
  TData = GetIndividualMemberReportQuery,
  TError = unknown
>(
  variables: GetIndividualMemberReportQueryVariables,
  options?: UseQueryOptions<GetIndividualMemberReportQuery, TError, TData>
) =>
  useQuery<GetIndividualMemberReportQuery, TError, TData>(
    ['getIndividualMemberReport', variables],
    useAxios<GetIndividualMemberReportQuery, GetIndividualMemberReportQueryVariables>(
      GetIndividualMemberReportDocument
    ).bind(null, variables),
    options
  );
export const GetMinorListReportDocument = `
    query getMinorListReport($data: MinorFilter) {
  report {
    memberReport {
      minorReport(data: $data) {
        data {
          id
          memberName
          dateOfBirth
          memberId
          relationshipName
          serviceCentreId
          serviceCentreName
          minorName
          relationshipId
        }
      }
    }
  }
}
    `;
export const useGetMinorListReportQuery = <TData = GetMinorListReportQuery, TError = unknown>(
  variables?: GetMinorListReportQueryVariables,
  options?: UseQueryOptions<GetMinorListReportQuery, TError, TData>
) =>
  useQuery<GetMinorListReportQuery, TError, TData>(
    variables === undefined ? ['getMinorListReport'] : ['getMinorListReport', variables],
    useAxios<GetMinorListReportQuery, GetMinorListReportQueryVariables>(
      GetMinorListReportDocument
    ).bind(null, variables),
    options
  );
export const GetMBankingRegistrationReportDocument = `
    query getMBankingRegistrationReport($data: EbankingReportFilter) {
  report {
    mobileBankingReport {
      mbankingRegistrationReport(data: $data) {
        data {
          memberId
          memberCode
          memberName
          mobileNo
          branchCode
          regDate
          expDate
          status
          registeredBy
        }
      }
    }
  }
}
    `;
export const useGetMBankingRegistrationReportQuery = <
  TData = GetMBankingRegistrationReportQuery,
  TError = unknown
>(
  variables?: GetMBankingRegistrationReportQueryVariables,
  options?: UseQueryOptions<GetMBankingRegistrationReportQuery, TError, TData>
) =>
  useQuery<GetMBankingRegistrationReportQuery, TError, TData>(
    variables === undefined
      ? ['getMBankingRegistrationReport']
      : ['getMBankingRegistrationReport', variables],
    useAxios<GetMBankingRegistrationReportQuery, GetMBankingRegistrationReportQueryVariables>(
      GetMBankingRegistrationReportDocument
    ).bind(null, variables),
    options
  );
export const GetMBankingExpiryReportDocument = `
    query getMBankingExpiryReport($data: EbankingReportFilter) {
  report {
    mobileBankingReport {
      mbankingRegistrationReport(data: $data) {
        data {
          memberId
          memberCode
          memberName
          mobileNo
          branchCode
          regDate
          expDate
          status
          registeredBy
        }
      }
    }
  }
}
    `;
export const useGetMBankingExpiryReportQuery = <
  TData = GetMBankingExpiryReportQuery,
  TError = unknown
>(
  variables?: GetMBankingExpiryReportQueryVariables,
  options?: UseQueryOptions<GetMBankingExpiryReportQuery, TError, TData>
) =>
  useQuery<GetMBankingExpiryReportQuery, TError, TData>(
    variables === undefined ? ['getMBankingExpiryReport'] : ['getMBankingExpiryReport', variables],
    useAxios<GetMBankingExpiryReportQuery, GetMBankingExpiryReportQueryVariables>(
      GetMBankingExpiryReportDocument
    ).bind(null, variables),
    options
  );
export const GetMbTransactionReportDocument = `
    query getMBTransactionReport($data: MBankingTransactionFilter) {
  report {
    mobileBankingReport {
      mBankingTransactionReport(data: $data) {
        data {
          initiatorName
          phoneNo
          srcAccount
          destAccount
          amount
          transactionType
          transThrough
          transDate
          narration
          status
        }
      }
    }
  }
}
    `;
export const useGetMbTransactionReportQuery = <
  TData = GetMbTransactionReportQuery,
  TError = unknown
>(
  variables?: GetMbTransactionReportQueryVariables,
  options?: UseQueryOptions<GetMbTransactionReportQuery, TError, TData>
) =>
  useQuery<GetMbTransactionReportQuery, TError, TData>(
    variables === undefined ? ['getMBTransactionReport'] : ['getMBTransactionReport', variables],
    useAxios<GetMbTransactionReportQuery, GetMbTransactionReportQueryVariables>(
      GetMbTransactionReportDocument
    ).bind(null, variables),
    options
  );
export const GetLedgerReportDocument = `
    query getLedgerReport($data: GeneralLedgerFilter!) {
  report {
    otherReport {
      generalLedgerReport(data: $data) {
        ledgerName
        data {
          id
          date
          account
          balance
          credit
          debit
        }
        summary {
          openingBalance
          openingBalanceType
          closingBalance
          closingBalanceType
        }
      }
    }
  }
}
    `;
export const useGetLedgerReportQuery = <TData = GetLedgerReportQuery, TError = unknown>(
  variables: GetLedgerReportQueryVariables,
  options?: UseQueryOptions<GetLedgerReportQuery, TError, TData>
) =>
  useQuery<GetLedgerReportQuery, TError, TData>(
    ['getLedgerReport', variables],
    useAxios<GetLedgerReportQuery, GetLedgerReportQueryVariables>(GetLedgerReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetSavingsBalanceReportDocument = `
    query getSavingsBalanceReport($data: SavingsBalanceFilterData!) {
  report {
    otherReport {
      savingsBalanceReport(data: $data) {
        data {
          accountId
          memberId
          memberCode
          memberName
          productId
          productName
          productCode
          accountOpeningDate
          memberType
          drBalance
          crBalance
          currentInterestType
          currentInterestRate
          currentInterest
          endDate
          branchId
          branchName
        }
        summary {
          totalIndividualAccount
          totalMinorAccount
          totalOtherAccount
        }
        totalDrBalance
        totalCrBalance
        interestType
        totalInterest
      }
    }
  }
}
    `;
export const useGetSavingsBalanceReportQuery = <
  TData = GetSavingsBalanceReportQuery,
  TError = unknown
>(
  variables: GetSavingsBalanceReportQueryVariables,
  options?: UseQueryOptions<GetSavingsBalanceReportQuery, TError, TData>
) =>
  useQuery<GetSavingsBalanceReportQuery, TError, TData>(
    ['getSavingsBalanceReport', variables],
    useAxios<GetSavingsBalanceReportQuery, GetSavingsBalanceReportQueryVariables>(
      GetSavingsBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetPearlsReportDocument = `
    query getPearlsReport($data: PearlsReportInput!) {
  report {
    pearlsReport(data: $data) {
      typeP {
        pearl
        description
        numerator
        denominator
        goal
        thisMonth
        lastMonth
      }
      typeE {
        pearl
        description
        numerator
        denominator
        goal
        thisMonth
        lastMonth
      }
      typeA {
        pearl
        description
        numerator
        denominator
        goal
        thisMonth
        lastMonth
      }
      typeR {
        pearl
        description
        numerator
        denominator
        goal
        thisMonth
        lastMonth
      }
      typeL {
        pearl
        description
        numerator
        denominator
        goal
        thisMonth
        lastMonth
      }
      typeS {
        pearl
        description
        numerator
        denominator
        goal
        thisMonth
        lastMonth
      }
    }
  }
}
    `;
export const useGetPearlsReportQuery = <TData = GetPearlsReportQuery, TError = unknown>(
  variables: GetPearlsReportQueryVariables,
  options?: UseQueryOptions<GetPearlsReportQuery, TError, TData>
) =>
  useQuery<GetPearlsReportQuery, TError, TData>(
    ['getPearlsReport', variables],
    useAxios<GetPearlsReportQuery, GetPearlsReportQueryVariables>(GetPearlsReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBodRegisterReportDocument = `
    query getBODRegisterReport($data: CommitteeRegisterReportFilterData!) {
  report {
    committeeQuery {
      committeeRegisterReport(data: $data) {
        committee {
          code
          memberCount
          name
          tenure
          createdAt
          description
          file {
            identifier
            url
          }
          member {
            familyMember {
              fatherName
              grandFatherName
              grandMotherName
              inNepali {
                fatherName
                grandFatherName
                grandMotherName
                motherName
                spouseName
              }
              motherName
              spouseName
            }
            id
            joinedAt
            validUpto
            member {
              id
              code
              name
              address {
                ...Address
              }
              contact
            }
            joinedAt
            occupation {
              id
              occupationId
              orgName
              panVatNo
              address
              estimatedAnnualIncome
              establishedDate
              registrationNo
              contact
              isOwner
            }
            position
          }
          id
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetBodRegisterReportQuery = <TData = GetBodRegisterReportQuery, TError = unknown>(
  variables: GetBodRegisterReportQueryVariables,
  options?: UseQueryOptions<GetBodRegisterReportQuery, TError, TData>
) =>
  useQuery<GetBodRegisterReportQuery, TError, TData>(
    ['getBODRegisterReport', variables],
    useAxios<GetBodRegisterReportQuery, GetBodRegisterReportQueryVariables>(
      GetBodRegisterReportDocument
    ).bind(null, variables),
    options
  );
export const GetOrganizationalProfileReportDocument = `
    query getOrganizationalProfileReport {
  report {
    committeeQuery {
      organizationProfileReport {
        organization {
          id
          basicDetails {
            logo
            name
            typeOfOrganization
          }
          contactDetails {
            email
            phoneNumber
            website
          }
          mainContactPerson {
            contactPersonContactNumber
            contactPersonName
            title
          }
          address {
            ...Address
          }
          registrationDetails {
            regdNo
            regdOffice
            regdAddress
            panOrVat
          }
        }
        committee {
          code
          memberCount
          name
          tenure
          createdAt
          description
          file {
            identifier
            url
          }
          member {
            id
            member {
              id
              code
              name
              address {
                ...Address
              }
              contact
            }
            occupation {
              id
              occupationId
              orgName
              panVatNo
              address
              estimatedAnnualIncome
              establishedDate
              registrationNo
              contact
              isOwner
            }
            position
          }
          id
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetOrganizationalProfileReportQuery = <
  TData = GetOrganizationalProfileReportQuery,
  TError = unknown
>(
  variables?: GetOrganizationalProfileReportQueryVariables,
  options?: UseQueryOptions<GetOrganizationalProfileReportQuery, TError, TData>
) =>
  useQuery<GetOrganizationalProfileReportQuery, TError, TData>(
    variables === undefined
      ? ['getOrganizationalProfileReport']
      : ['getOrganizationalProfileReport', variables],
    useAxios<GetOrganizationalProfileReportQuery, GetOrganizationalProfileReportQueryVariables>(
      GetOrganizationalProfileReportDocument
    ).bind(null, variables),
    options
  );
export const GetShaareCertificatePrintReportDocument = `
    query getShaareCertificatePrintReport($data: CertificatePrintFilter!) {
  report {
    printReport {
      issueCertificateReport(data: $data) {
        data {
          Id
          memberId
          memberCode
          accountName
          accountNumber
          printedDate
          printCount
          issueServiceCenter
          printedServiceCenter
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetShaareCertificatePrintReportQuery = <
  TData = GetShaareCertificatePrintReportQuery,
  TError = unknown
>(
  variables: GetShaareCertificatePrintReportQueryVariables,
  options?: UseQueryOptions<GetShaareCertificatePrintReportQuery, TError, TData>
) =>
  useQuery<GetShaareCertificatePrintReportQuery, TError, TData>(
    ['getShaareCertificatePrintReport', variables],
    useAxios<GetShaareCertificatePrintReportQuery, GetShaareCertificatePrintReportQueryVariables>(
      GetShaareCertificatePrintReportDocument
    ).bind(null, variables),
    options
  );
export const GetFdCertificatePrintReportDocument = `
    query getFDCertificatePrintReport($data: CertificatePrintFilter!) {
  report {
    printReport {
      fbCertificateReport(data: $data) {
        data {
          Id
          memberId
          accountNumber
          memberCode
          accountName
          printedDate
          printCount
          issueServiceCenter
          printedServiceCenter
        }
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetFdCertificatePrintReportQuery = <
  TData = GetFdCertificatePrintReportQuery,
  TError = unknown
>(
  variables: GetFdCertificatePrintReportQueryVariables,
  options?: UseQueryOptions<GetFdCertificatePrintReportQuery, TError, TData>
) =>
  useQuery<GetFdCertificatePrintReportQuery, TError, TData>(
    ['getFDCertificatePrintReport', variables],
    useAxios<GetFdCertificatePrintReportQuery, GetFdCertificatePrintReportQueryVariables>(
      GetFdCertificatePrintReportDocument
    ).bind(null, variables),
    options
  );
export const GetCopomisFinancialReportDocument = `
    query getCopomisFinancialReport($data: CopomisFinancialInput!) {
  report {
    copomisFinancialReport(data: $data) {
      data {
        id
        indicatorName
        dr
        cr
      }
    }
  }
}
    `;
export const useGetCopomisFinancialReportQuery = <
  TData = GetCopomisFinancialReportQuery,
  TError = unknown
>(
  variables: GetCopomisFinancialReportQueryVariables,
  options?: UseQueryOptions<GetCopomisFinancialReportQuery, TError, TData>
) =>
  useQuery<GetCopomisFinancialReportQuery, TError, TData>(
    ['getCopomisFinancialReport', variables],
    useAxios<GetCopomisFinancialReportQuery, GetCopomisFinancialReportQueryVariables>(
      GetCopomisFinancialReportDocument
    ).bind(null, variables),
    options
  );
export const GetAllSavedReportsDocument = `
    query getAllSavedReports($pagination: Pagination) {
  report {
    listReports(pagination: $pagination) {
      totalCount
      pageInfo {
        ...Pagination
      }
      edges {
        cursor
        node {
          id
          lastModifiedDate
          name
          reportType
          savedBy
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAllSavedReportsQuery = <TData = GetAllSavedReportsQuery, TError = unknown>(
  variables?: GetAllSavedReportsQueryVariables,
  options?: UseQueryOptions<GetAllSavedReportsQuery, TError, TData>
) =>
  useQuery<GetAllSavedReportsQuery, TError, TData>(
    variables === undefined ? ['getAllSavedReports'] : ['getAllSavedReports', variables],
    useAxios<GetAllSavedReportsQuery, GetAllSavedReportsQueryVariables>(
      GetAllSavedReportsDocument
    ).bind(null, variables),
    options
  );
export const GetSavedReportDocument = `
    query getSavedReport($reportId: ID!) {
  report {
    getReport(reportId: $reportId) {
      name
      settings {
        ... on ShareStatementReportSettingsType {
          filter
          memberId
        }
      }
    }
  }
}
    `;
export const useGetSavedReportQuery = <TData = GetSavedReportQuery, TError = unknown>(
  variables: GetSavedReportQueryVariables,
  options?: UseQueryOptions<GetSavedReportQuery, TError, TData>
) =>
  useQuery<GetSavedReportQuery, TError, TData>(
    ['getSavedReport', variables],
    useAxios<GetSavedReportQuery, GetSavedReportQueryVariables>(GetSavedReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareStatementDocument = `
    query getShareStatement($data: ShareStatementReportSettings!) {
  report {
    shareReport {
      shareStatementReport(data: $data) {
        member {
          id
          code
          name
          activeDate
          address {
            wardNo
            state
            district
            houseNo
            localGovernment
          }
          dateJoined
          branch
        }
        statement {
          ... on ShareStatementReport {
            openingBalance
            shareStatement {
              date
              particular
              noOfShares
              returnAmountDr
              purchaseAmountCr
              balanceSheet
            }
            totals {
              totalShares
              totalDr
              totalCr
              totalBalanceSheet
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetShareStatementQuery = <TData = GetShareStatementQuery, TError = unknown>(
  variables: GetShareStatementQueryVariables,
  options?: UseQueryOptions<GetShareStatementQuery, TError, TData>
) =>
  useQuery<GetShareStatementQuery, TError, TData>(
    ['getShareStatement', variables],
    useAxios<GetShareStatementQuery, GetShareStatementQueryVariables>(
      GetShareStatementDocument
    ).bind(null, variables),
    options
  );
export const GetShareRegisterReportDocument = `
    query getShareRegisterReport($data: SharePurchaseRegisterReportFilter!) {
  report {
    shareReport {
      sharePurchaseRegisterReport(data: $data) {
        data {
          memberId
          memberCode
          name
          particular
          perShareAmount
          kittaNumFrom
          kittaNumTo
          totalKitta
          totalAmount
          branchId
          branchName
        }
      }
    }
  }
}
    `;
export const useGetShareRegisterReportQuery = <
  TData = GetShareRegisterReportQuery,
  TError = unknown
>(
  variables: GetShareRegisterReportQueryVariables,
  options?: UseQueryOptions<GetShareRegisterReportQuery, TError, TData>
) =>
  useQuery<GetShareRegisterReportQuery, TError, TData>(
    ['getShareRegisterReport', variables],
    useAxios<GetShareRegisterReportQuery, GetShareRegisterReportQueryVariables>(
      GetShareRegisterReportDocument
    ).bind(null, variables),
    options
  );
export const GetShareTransactionReportDocument = `
    query getShareTransactionReport($data: ShareTransactionReportFilter) {
  report {
    shareReport {
      shareTransactionReport(data: $data) {
        data {
          transactionDate
          memberId
          memberCode
          name
          particular
          shareReturnDr
          shareIssueCr
          balance
          branchId
          branchName
        }
        footer {
          totalCr
          totalDr
          totalBalance
        }
        totalShareIssued
        avgSharePerMember
      }
    }
  }
}
    `;
export const useGetShareTransactionReportQuery = <
  TData = GetShareTransactionReportQuery,
  TError = unknown
>(
  variables?: GetShareTransactionReportQueryVariables,
  options?: UseQueryOptions<GetShareTransactionReportQuery, TError, TData>
) =>
  useQuery<GetShareTransactionReportQuery, TError, TData>(
    variables === undefined
      ? ['getShareTransactionReport']
      : ['getShareTransactionReport', variables],
    useAxios<GetShareTransactionReportQuery, GetShareTransactionReportQueryVariables>(
      GetShareTransactionReportDocument
    ).bind(null, variables),
    options
  );
export const GetShareBalanceReportDocument = `
    query getShareBalanceReport($data: ShareBalanceReportFilter!) {
  report {
    shareReport {
      shareBalanceReport(data: $data) {
        data {
          shareType
          shareCertificateNo
          memberId
          memberCode
          memberName
          address {
            ...Address
          }
          contactNo
          membershipDate
          noOfKitta
          balance
          branchId
          branchName
        }
        totalBalance
        error {
          ...QueryError
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetShareBalanceReportQuery = <TData = GetShareBalanceReportQuery, TError = unknown>(
  variables: GetShareBalanceReportQueryVariables,
  options?: UseQueryOptions<GetShareBalanceReportQuery, TError, TData>
) =>
  useQuery<GetShareBalanceReportQuery, TError, TData>(
    ['getShareBalanceReport', variables],
    useAxios<GetShareBalanceReportQuery, GetShareBalanceReportQueryVariables>(
      GetShareBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetTrialSheetReportDocument = `
    query getTrialSheetReport($data: TrialSheetReportFilter!) {
  report {
    transactionReport {
      financial {
        trialSheetReport(data: $data) {
          data {
            equityAndLiablities {
              balance
              ledgerId
              ledgerName
              under
            }
            expenses {
              balance
              ledgerId
              ledgerName
              under
            }
            income {
              balance
              ledgerId
              ledgerName
              under
            }
            assets {
              balance
              ledgerId
              ledgerName
              under
            }
            offBalance {
              balance
              ledgerId
              ledgerName
              under
            }
            orphanEntries {
              balance
              ledgerId
              ledgerName
              under
            }
            equityAndLiablitiesTotal
            assetsTotal
            expenseTotal
            incomeTotal
            offBalanceTotal
            orphanTotal
            totalAssetExpense
            totalLiablitiesIncome
            totalProfitLoss
          }
        }
      }
    }
  }
}
    `;
export const useGetTrialSheetReportQuery = <TData = GetTrialSheetReportQuery, TError = unknown>(
  variables: GetTrialSheetReportQueryVariables,
  options?: UseQueryOptions<GetTrialSheetReportQuery, TError, TData>
) =>
  useQuery<GetTrialSheetReportQuery, TError, TData>(
    ['getTrialSheetReport', variables],
    useAxios<GetTrialSheetReportQuery, GetTrialSheetReportQueryVariables>(
      GetTrialSheetReportDocument
    ).bind(null, variables),
    options
  );
export const GetTransactionTellerReportDocument = `
    query getTransactionTellerReport($data: TellerReportFilter!) {
  report {
    transactionReport {
      financial {
        tellerReport(data: $data) {
          data {
            headTeller {
              entries {
                tellerId
                name
                inTransit
                stack
                inAmount
                outAmount
                balance
              }
              inTransitTotal
              stackTotal
              inAmountTotal
              outAmountTotal
              balanceTotal
            }
            teller {
              entries {
                tellerId
                name
                inTransit
                stack
                inAmount
                outAmount
                balance
              }
              inTransitTotal
              stackTotal
              inAmountTotal
              outAmountTotal
              balanceTotal
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetTransactionTellerReportQuery = <
  TData = GetTransactionTellerReportQuery,
  TError = unknown
>(
  variables: GetTransactionTellerReportQueryVariables,
  options?: UseQueryOptions<GetTransactionTellerReportQuery, TError, TData>
) =>
  useQuery<GetTransactionTellerReportQuery, TError, TData>(
    ['getTransactionTellerReport', variables],
    useAxios<GetTransactionTellerReportQuery, GetTransactionTellerReportQueryVariables>(
      GetTransactionTellerReportDocument
    ).bind(null, variables),
    options
  );
export const GetVaultBalanceReportDocument = `
    query getVaultBalanceReport($data: VaultBalanceReportFilter!) {
  report {
    transactionReport {
      financial {
        vaultBalanceReport(data: $data) {
          data {
            opening {
              denomination {
                value
                quantity
                amount
              }
              noneAmount
              noteTotal
              amountTotal
            }
            vaultIn {
              denomination {
                value
                quantity
                amount
              }
              noneAmount
              noteTotal
              amountTotal
            }
            vaultOut {
              denomination {
                value
                quantity
                amount
              }
              noneAmount
              noteTotal
              amountTotal
            }
            closing {
              denomination {
                value
                quantity
                amount
              }
              noneAmount
              noteTotal
              amountTotal
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetVaultBalanceReportQuery = <TData = GetVaultBalanceReportQuery, TError = unknown>(
  variables: GetVaultBalanceReportQueryVariables,
  options?: UseQueryOptions<GetVaultBalanceReportQuery, TError, TData>
) =>
  useQuery<GetVaultBalanceReportQuery, TError, TData>(
    ['getVaultBalanceReport', variables],
    useAxios<GetVaultBalanceReportQuery, GetVaultBalanceReportQueryVariables>(
      GetVaultBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetBankGlStatementReportDocument = `
    query getBankGLStatementReport($data: BankGLStatementFilter!) {
  report {
    transactionReport {
      financial {
        bankGLStatementReport(data: $data) {
          data {
            date
            name
            particular
            chequeNo
            depositAmount
            withdrawAmount
            balance
            remarks
            branchId
            branchName
          }
        }
      }
    }
  }
}
    `;
export const useGetBankGlStatementReportQuery = <
  TData = GetBankGlStatementReportQuery,
  TError = unknown
>(
  variables: GetBankGlStatementReportQueryVariables,
  options?: UseQueryOptions<GetBankGlStatementReportQuery, TError, TData>
) =>
  useQuery<GetBankGlStatementReportQuery, TError, TData>(
    ['getBankGLStatementReport', variables],
    useAxios<GetBankGlStatementReportQuery, GetBankGlStatementReportQueryVariables>(
      GetBankGlStatementReportDocument
    ).bind(null, variables),
    options
  );
export const GetDayBookReportDocument = `
    query getDayBookReport($data: DayBookReportFilter!) {
  report {
    transactionReport {
      financial {
        dayBookReport(data: $data) {
          data {
            closingAmount
            openingBalance
            payments {
              accountHead
              amount
              entries {
                particular
                ledger
                voucherNo
                amount
              }
            }
            receipts {
              accountHead
              amount
              entries {
                particular
                ledger
                voucherNo
                amount
              }
            }
            totalAmount
            totalPayment
            totalReceipts
          }
        }
      }
    }
  }
}
    `;
export const useGetDayBookReportQuery = <TData = GetDayBookReportQuery, TError = unknown>(
  variables: GetDayBookReportQueryVariables,
  options?: UseQueryOptions<GetDayBookReportQuery, TError, TData>
) =>
  useQuery<GetDayBookReportQuery, TError, TData>(
    ['getDayBookReport', variables],
    useAxios<GetDayBookReportQuery, GetDayBookReportQueryVariables>(GetDayBookReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetServiceCenterBalanceReportDocument = `
    query getServiceCenterBalanceReport($data: ServiceCenterBalanceFilter!) {
  report {
    transactionReport {
      financial {
        serviceCenterBalanceReport(data: $data) {
          data {
            serviceCenterId
            ServiceCenterName
            todayCashBalance
            todayBankBalance
            todaySavingBalance
            todayTotalBalance
            totalCashBalance
            totalBankBalance
            totalTotalBalance
            totalSavingBalance
            depositToLiquidityRatio
          }
        }
      }
    }
  }
}
    `;
export const useGetServiceCenterBalanceReportQuery = <
  TData = GetServiceCenterBalanceReportQuery,
  TError = unknown
>(
  variables: GetServiceCenterBalanceReportQueryVariables,
  options?: UseQueryOptions<GetServiceCenterBalanceReportQuery, TError, TData>
) =>
  useQuery<GetServiceCenterBalanceReportQuery, TError, TData>(
    ['getServiceCenterBalanceReport', variables],
    useAxios<GetServiceCenterBalanceReportQuery, GetServiceCenterBalanceReportQueryVariables>(
      GetServiceCenterBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetAbbsStatusReportDocument = `
    query getABBSStatusReport($data: ABBSReportFilter!) {
  report {
    branchReport {
      abbsStatusReport(data: $data) {
        data {
          serviceCenterId
          ServiceCenterName
          serviceCenterActive
          abbsActive
        }
      }
    }
  }
}
    `;
export const useGetAbbsStatusReportQuery = <TData = GetAbbsStatusReportQuery, TError = unknown>(
  variables: GetAbbsStatusReportQueryVariables,
  options?: UseQueryOptions<GetAbbsStatusReportQuery, TError, TData>
) =>
  useQuery<GetAbbsStatusReportQuery, TError, TData>(
    ['getABBSStatusReport', variables],
    useAxios<GetAbbsStatusReportQuery, GetAbbsStatusReportQueryVariables>(
      GetAbbsStatusReportDocument
    ).bind(null, variables),
    options
  );
export const GetBankGlBalanceReportDocument = `
    query getBankGLBalanceReport($data: BankGLBalanceFilter!) {
  report {
    transactionReport {
      financial {
        bankGLBalanceReport(data: $data) {
          data {
            bankId
            bankName
            bankDisplayName
            bankAccountName
            accountNo
            closingBalance
            balanceType
          }
          total
        }
      }
    }
  }
}
    `;
export const useGetBankGlBalanceReportQuery = <
  TData = GetBankGlBalanceReportQuery,
  TError = unknown
>(
  variables: GetBankGlBalanceReportQueryVariables,
  options?: UseQueryOptions<GetBankGlBalanceReportQuery, TError, TData>
) =>
  useQuery<GetBankGlBalanceReportQuery, TError, TData>(
    ['getBankGLBalanceReport', variables],
    useAxios<GetBankGlBalanceReportQuery, GetBankGlBalanceReportQueryVariables>(
      GetBankGlBalanceReportDocument
    ).bind(null, variables),
    options
  );
export const GetCharKhataReportDocument = `
    query getCharKhataReport($data: CharKhataReportFilter!) {
  report {
    transactionReport {
      financial {
        charKhataReport(data: $data) {
          data {
            equityAndLiablities {
              ledgerId
              ledgerName
              balance
              under
            }
            equityAndLiablitiesTotal
            assets {
              ledgerId
              ledgerName
              balance
              under
            }
            assetsTotal
            expenses {
              ledgerId
              ledgerName
              balance
              under
            }
            expenseTotal
            income {
              ledgerId
              ledgerName
              balance
              under
            }
            incomeTotal
            offBalance {
              ledgerId
              ledgerName
              balance
              under
            }
            offBalanceTotal
            orphanEntries {
              ledgerId
              ledgerName
              balance
              under
            }
            orphanTotal
            totalProfitLoss
            totalAssetExpense
            totalLiablitiesIncome
          }
        }
      }
    }
  }
}
    `;
export const useGetCharKhataReportQuery = <TData = GetCharKhataReportQuery, TError = unknown>(
  variables: GetCharKhataReportQueryVariables,
  options?: UseQueryOptions<GetCharKhataReportQuery, TError, TData>
) =>
  useQuery<GetCharKhataReportQuery, TError, TData>(
    ['getCharKhataReport', variables],
    useAxios<GetCharKhataReportQuery, GetCharKhataReportQueryVariables>(
      GetCharKhataReportDocument
    ).bind(null, variables),
    options
  );
export const GetAbbsTransactionReportDocument = `
    query getABBSTransactionReport($data: AbbsTransactionReportFilter!) {
  report {
    transactionReport {
      financial {
        abbsTransactionReport(data: $data) {
          data {
            date
            memberId
            memberCode
            memberName
            accountNo
            typeOfTransaction
            transactionId
            memberBranch
            transactionBranch
            paymentPayable
            paymentReceivable
          }
        }
      }
    }
  }
}
    `;
export const useGetAbbsTransactionReportQuery = <
  TData = GetAbbsTransactionReportQuery,
  TError = unknown
>(
  variables: GetAbbsTransactionReportQueryVariables,
  options?: UseQueryOptions<GetAbbsTransactionReportQuery, TError, TData>
) =>
  useQuery<GetAbbsTransactionReportQuery, TError, TData>(
    ['getABBSTransactionReport', variables],
    useAxios<GetAbbsTransactionReportQuery, GetAbbsTransactionReportQueryVariables>(
      GetAbbsTransactionReportDocument
    ).bind(null, variables),
    options
  );
export const GetMrTransactionReportDocument = `
    query getMrTransactionReport($data: MRTransactionReportFilter!) {
  report {
    transactionReport {
      financial {
        mrTransactionReport(data: $data) {
          data {
            memberId
            memberCode
            memberName
            mrId
            mrName
            transactionId
            accountNo
            accountName
            typeOfTransaction
            amount
          }
          error {
            ...QueryError
          }
        }
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetMrTransactionReportQuery = <
  TData = GetMrTransactionReportQuery,
  TError = unknown
>(
  variables: GetMrTransactionReportQueryVariables,
  options?: UseQueryOptions<GetMrTransactionReportQuery, TError, TData>
) =>
  useQuery<GetMrTransactionReportQuery, TError, TData>(
    ['getMrTransactionReport', variables],
    useAxios<GetMrTransactionReportQuery, GetMrTransactionReportQueryVariables>(
      GetMrTransactionReportDocument
    ).bind(null, variables),
    options
  );
export const GetChequeBookRequestsDocument = `
    query getChequeBookRequests($pagination: Pagination, $filter: Filter) {
  requests {
    list {
      chequeBookRequest(paginate: $pagination, filter: $filter) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            memberId
            memberCode
            memberName
            memberPhoneNumber
            memberAge
            memberGender
            memberProfilePicUrl
            accountNumber
            accountType
            approvalStatus
            requestedDate
            branchId
            branchName
            numberOfLeaves
            pickUpMethod
            agentName
            remarks
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetChequeBookRequestsQuery = <TData = GetChequeBookRequestsQuery, TError = unknown>(
  variables?: GetChequeBookRequestsQueryVariables,
  options?: UseQueryOptions<GetChequeBookRequestsQuery, TError, TData>
) =>
  useQuery<GetChequeBookRequestsQuery, TError, TData>(
    variables === undefined ? ['getChequeBookRequests'] : ['getChequeBookRequests', variables],
    useAxios<GetChequeBookRequestsQuery, GetChequeBookRequestsQueryVariables>(
      GetChequeBookRequestsDocument
    ).bind(null, variables),
    options
  );
export const GetWithdrawViaCollectorDocument = `
    query getWithdrawViaCollector($pagination: Pagination, $filter: Filter) {
  requests {
    list {
      withdrawViaCollector(paginate: $pagination, filter: $filter) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            memberId
            memberCode
            memberName
            memberPhoneNumber
            accountNumber
            accountType
            approvalStatus
            requestedDate
            collectorName
            amount
            remarks
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetWithdrawViaCollectorQuery = <
  TData = GetWithdrawViaCollectorQuery,
  TError = unknown
>(
  variables?: GetWithdrawViaCollectorQueryVariables,
  options?: UseQueryOptions<GetWithdrawViaCollectorQuery, TError, TData>
) =>
  useQuery<GetWithdrawViaCollectorQuery, TError, TData>(
    variables === undefined ? ['getWithdrawViaCollector'] : ['getWithdrawViaCollector', variables],
    useAxios<GetWithdrawViaCollectorQuery, GetWithdrawViaCollectorQueryVariables>(
      GetWithdrawViaCollectorDocument
    ).bind(null, variables),
    options
  );
export const GetLoanRequestsDocument = `
    query getLoanRequests($pagination: Pagination, $filter: Filter) {
  requests {
    list {
      loanRequest(filter: $filter, paginate: $pagination) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            memberId
            memberCode
            memberName
            memberPhoneNumber
            approvalStatus
            loanAmount
            lastModifiedDate
            purpose
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetLoanRequestsQuery = <TData = GetLoanRequestsQuery, TError = unknown>(
  variables?: GetLoanRequestsQueryVariables,
  options?: UseQueryOptions<GetLoanRequestsQuery, TError, TData>
) =>
  useQuery<GetLoanRequestsQuery, TError, TData>(
    variables === undefined ? ['getLoanRequests'] : ['getLoanRequests', variables],
    useAxios<GetLoanRequestsQuery, GetLoanRequestsQueryVariables>(GetLoanRequestsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBlockChequeListDocument = `
    query getBlockChequeList($pagination: Pagination, $filter: Filter) {
  requests {
    list {
      blockCheque(filter: $filter, paginate: $pagination) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            memberId
            memberCode
            memberName
            memberPhoneNumber
            accountNumber
            accountType
            approvalStatus
            requestedDate
            reason
            chequeNumber
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetBlockChequeListQuery = <TData = GetBlockChequeListQuery, TError = unknown>(
  variables?: GetBlockChequeListQueryVariables,
  options?: UseQueryOptions<GetBlockChequeListQuery, TError, TData>
) =>
  useQuery<GetBlockChequeListQuery, TError, TData>(
    variables === undefined ? ['getBlockChequeList'] : ['getBlockChequeList', variables],
    useAxios<GetBlockChequeListQuery, GetBlockChequeListQueryVariables>(
      GetBlockChequeListDocument
    ).bind(null, variables),
    options
  );
export const GetMemberRequestListDocument = `
    query getMemberRequestList($pagination: Pagination, $filter: Filter) {
  requests {
    list {
      membershipRequest(filter: $filter, paginate: $pagination) {
        totalCount
        pageInfo {
          ...Pagination
        }
        edges {
          node {
            id
            dateOfBirth
            email
            firstName
            gender
            lastName
            middleName
            mobileNumber
            permanentAddress {
              ...Address
            }
            phoneNumber
            requestedDate
            status
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}
${AddressFragmentDoc}`;
export const useGetMemberRequestListQuery = <TData = GetMemberRequestListQuery, TError = unknown>(
  variables?: GetMemberRequestListQueryVariables,
  options?: UseQueryOptions<GetMemberRequestListQuery, TError, TData>
) =>
  useQuery<GetMemberRequestListQuery, TError, TData>(
    variables === undefined ? ['getMemberRequestList'] : ['getMemberRequestList', variables],
    useAxios<GetMemberRequestListQuery, GetMemberRequestListQueryVariables>(
      GetMemberRequestListDocument
    ).bind(null, variables),
    options
  );
export const GetGlobalSearchDocument = `
    query getGlobalSearch($filter: SearchFilterData, $pagination: Pagination) {
  search {
    globalPages(filter: $filter, pagination: $pagination) {
      data {
        edges {
          cursor
          node {
            ... on GlobalPagesResultNode {
              id
              fullCode
              hasParam
              iconType
              page
              url
            }
          }
        }
        totalCount
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetGlobalSearchQuery = <TData = GetGlobalSearchQuery, TError = unknown>(
  variables?: GetGlobalSearchQueryVariables,
  options?: UseQueryOptions<GetGlobalSearchQuery, TError, TData>
) =>
  useQuery<GetGlobalSearchQuery, TError, TData>(
    variables === undefined ? ['getGlobalSearch'] : ['getGlobalSearch', variables],
    useAxios<GetGlobalSearchQuery, GetGlobalSearchQueryVariables>(GetGlobalSearchDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllAccountingTaxesDocument = `
    query getAllAccountingTaxes {
  settings {
    general {
      accounting {
        taxRates {
          default
          id
          name
          rate
        }
      }
    }
  }
}
    `;
export const useGetAllAccountingTaxesQuery = <TData = GetAllAccountingTaxesQuery, TError = unknown>(
  variables?: GetAllAccountingTaxesQueryVariables,
  options?: UseQueryOptions<GetAllAccountingTaxesQuery, TError, TData>
) =>
  useQuery<GetAllAccountingTaxesQuery, TError, TData>(
    variables === undefined ? ['getAllAccountingTaxes'] : ['getAllAccountingTaxes', variables],
    useAxios<GetAllAccountingTaxesQuery, GetAllAccountingTaxesQueryVariables>(
      GetAllAccountingTaxesDocument
    ).bind(null, variables),
    options
  );
export const GetAlternativeFeeAndChargesDocument = `
    query getAlternativeFeeAndCharges {
  settings {
    general {
      alternativeChannel {
        feesAndCharges {
          data {
            id
            serviceType
            ledgerId
            amount
          }
        }
      }
    }
  }
}
    `;
export const useGetAlternativeFeeAndChargesQuery = <
  TData = GetAlternativeFeeAndChargesQuery,
  TError = unknown
>(
  variables?: GetAlternativeFeeAndChargesQueryVariables,
  options?: UseQueryOptions<GetAlternativeFeeAndChargesQuery, TError, TData>
) =>
  useQuery<GetAlternativeFeeAndChargesQuery, TError, TData>(
    variables === undefined
      ? ['getAlternativeFeeAndCharges']
      : ['getAlternativeFeeAndCharges', variables],
    useAxios<GetAlternativeFeeAndChargesQuery, GetAlternativeFeeAndChargesQueryVariables>(
      GetAlternativeFeeAndChargesDocument
    ).bind(null, variables),
    options
  );
export const GetActivatedServiceDocument = `
    query getActivatedService($memberId: String!) {
  alternativeChannel {
    memberActivations(memberId: $memberId) {
      eBanking
      mobileBanking
      smsBanking
    }
  }
}
    `;
export const useGetActivatedServiceQuery = <TData = GetActivatedServiceQuery, TError = unknown>(
  variables: GetActivatedServiceQueryVariables,
  options?: UseQueryOptions<GetActivatedServiceQuery, TError, TData>
) =>
  useQuery<GetActivatedServiceQuery, TError, TData>(
    ['getActivatedService', variables],
    useAxios<GetActivatedServiceQuery, GetActivatedServiceQueryVariables>(
      GetActivatedServiceDocument
    ).bind(null, variables),
    options
  );
export const GetAlternativeChannelListDocument = `
    query getAlternativeChannelList($filter: AlternativeChannelFilter, $paginate: Pagination) {
  alternativeChannel {
    list(filter: $filter, paginate: $paginate) {
      totalCount
      pageInfo {
        ...Pagination
      }
      edges {
        cursor
        data {
          id
          name
          memberId
          coopConnection
          lastActive
          phoneNumber
          serviceStatus
          serviceType
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAlternativeChannelListQuery = <
  TData = GetAlternativeChannelListQuery,
  TError = unknown
>(
  variables?: GetAlternativeChannelListQueryVariables,
  options?: UseQueryOptions<GetAlternativeChannelListQuery, TError, TData>
) =>
  useQuery<GetAlternativeChannelListQuery, TError, TData>(
    variables === undefined
      ? ['getAlternativeChannelList']
      : ['getAlternativeChannelList', variables],
    useAxios<GetAlternativeChannelListQuery, GetAlternativeChannelListQueryVariables>(
      GetAlternativeChannelListDocument
    ).bind(null, variables),
    options
  );
export const GetAcFeeCoaDocument = `
    query getACFeeCOA {
  settings {
    chartsOfAccount {
      accountsUnder(accountCode: ["160.6", "160.8"]) {
        data {
          id
          accountCode
          name
        }
      }
    }
  }
}
    `;
export const useGetAcFeeCoaQuery = <TData = GetAcFeeCoaQuery, TError = unknown>(
  variables?: GetAcFeeCoaQueryVariables,
  options?: UseQueryOptions<GetAcFeeCoaQuery, TError, TData>
) =>
  useQuery<GetAcFeeCoaQuery, TError, TData>(
    variables === undefined ? ['getACFeeCOA'] : ['getACFeeCOA', variables],
    useAxios<GetAcFeeCoaQuery, GetAcFeeCoaQueryVariables>(GetAcFeeCoaDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAuditLogListDocument = `
    query getAuditLogList($filter: AuditLogFilters) {
  auditLog {
    humanize(filter: $filter) {
      __typename
      ... on AuditLogHumanizeResult {
        data {
          timestamp
          narration
          extraData
        }
      }
    }
  }
}
    `;
export const useGetAuditLogListQuery = <TData = GetAuditLogListQuery, TError = unknown>(
  variables?: GetAuditLogListQueryVariables,
  options?: UseQueryOptions<GetAuditLogListQuery, TError, TData>
) =>
  useQuery<GetAuditLogListQuery, TError, TData>(
    variables === undefined ? ['getAuditLogList'] : ['getAuditLogList', variables],
    useAxios<GetAuditLogListQuery, GetAuditLogListQueryVariables>(GetAuditLogListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBankTableListDocument = `
    query getBankTableList($filter: BankSearchFilter) {
  bank {
    bank {
      list(filter: $filter) {
        id
        objState
        name
        date
        logo
      }
    }
  }
}
    `;
export const useGetBankTableListQuery = <TData = GetBankTableListQuery, TError = unknown>(
  variables?: GetBankTableListQueryVariables,
  options?: UseQueryOptions<GetBankTableListQuery, TError, TData>
) =>
  useQuery<GetBankTableListQuery, TError, TData>(
    variables === undefined ? ['getBankTableList'] : ['getBankTableList', variables],
    useAxios<GetBankTableListQuery, GetBankTableListQueryVariables>(GetBankTableListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBranchListDocument = `
    query getBranchList($paginate: Pagination, $filter: BranchSearchFilter) {
  settings {
    general {
      branch {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              branchCode
              name
              category
              estDate
              managerName
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              location {
                longitude
                latitude
              }
              contactNumber
              email
              abbsTransaction {
                abbsStatus
                receivableAccountId
                payableAccountId
              }
              plTransferId
              tdsTransaferId
              branchStatus
              eodReady
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetBranchListQuery = <TData = GetBranchListQuery, TError = unknown>(
  variables?: GetBranchListQueryVariables,
  options?: UseQueryOptions<GetBranchListQuery, TError, TData>
) =>
  useQuery<GetBranchListQuery, TError, TData>(
    variables === undefined ? ['getBranchList'] : ['getBranchList', variables],
    useAxios<GetBranchListQuery, GetBranchListQueryVariables>(GetBranchListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBranchEditDataDocument = `
    query getBranchEditData($id: ID!) {
  settings {
    general {
      branch {
        formState(id: $id) {
          data {
            branchCode
            name
            serviceCenterPhone
            category
            estDate
            managerName
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            location {
              longitude
              latitude
            }
            phoneNumber
            email
            abbsStatus
            receivableAccountId
            payableAccountId
            plTransferId
            tdsTransaferId
            branchStatus
          }
          error {
            __typename
          }
        }
      }
    }
  }
}
    `;
export const useGetBranchEditDataQuery = <TData = GetBranchEditDataQuery, TError = unknown>(
  variables: GetBranchEditDataQueryVariables,
  options?: UseQueryOptions<GetBranchEditDataQuery, TError, TData>
) =>
  useQuery<GetBranchEditDataQuery, TError, TData>(
    ['getBranchEditData', variables],
    useAxios<GetBranchEditDataQuery, GetBranchEditDataQueryVariables>(
      GetBranchEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetCoaListDocument = `
    query getCOAList($filter: ChartsOfAccountFilter!) {
  settings {
    general {
      chartsOfAccount {
        accounts(filter: $filter) {
          data {
            id
            name
            under
            accountClass
            accountCode
            currency
            accountType
            openingBalance
          }
        }
      }
    }
  }
}
    `;
export const useGetCoaListQuery = <TData = GetCoaListQuery, TError = unknown>(
  variables: GetCoaListQueryVariables,
  options?: UseQueryOptions<GetCoaListQuery, TError, TData>
) =>
  useQuery<GetCoaListQuery, TError, TData>(
    ['getCOAList', variables],
    useAxios<GetCoaListQuery, GetCoaListQueryVariables>(GetCoaListDocument).bind(null, variables),
    options
  );
export const GetCoaFullViewDocument = `
    query getCoaFullView {
  settings {
    chartsOfAccount {
      fullView {
        data {
          id
          name
          under
          accountType
          accountClass
          accountCode
          category
          allowedBalance
          transactionAllowed
          allowDirectPostingFromJV
          allowMultipleLedger
        }
      }
    }
  }
}
    `;
export const useGetCoaFullViewQuery = <TData = GetCoaFullViewQuery, TError = unknown>(
  variables?: GetCoaFullViewQueryVariables,
  options?: UseQueryOptions<GetCoaFullViewQuery, TError, TData>
) =>
  useQuery<GetCoaFullViewQuery, TError, TData>(
    variables === undefined ? ['getCoaFullView'] : ['getCoaFullView', variables],
    useAxios<GetCoaFullViewQuery, GetCoaFullViewQueryVariables>(GetCoaFullViewDocument).bind(
      null,
      variables
    ),
    options
  );
export const SearchCoaDocument = `
    query searchCOA($coaName: String!) {
  settings {
    general {
      chartsOfAccount {
        search(name: $coaName) {
          data {
            id
            name
            accountCode
          }
        }
      }
    }
  }
}
    `;
export const useSearchCoaQuery = <TData = SearchCoaQuery, TError = unknown>(
  variables: SearchCoaQueryVariables,
  options?: UseQueryOptions<SearchCoaQuery, TError, TData>
) =>
  useQuery<SearchCoaQuery, TError, TData>(
    ['searchCOA', variables],
    useAxios<SearchCoaQuery, SearchCoaQueryVariables>(SearchCoaDocument).bind(null, variables),
    options
  );
export const GetCoaAccountsUnderListDocument = `
    query getCOAAccountsUnderList($accountCode: [String]) {
  settings {
    chartsOfAccount {
      accountsUnder(accountCode: $accountCode) {
        data {
          id
          accountCode
          name
        }
      }
    }
  }
}
    `;
export const useGetCoaAccountsUnderListQuery = <
  TData = GetCoaAccountsUnderListQuery,
  TError = unknown
>(
  variables?: GetCoaAccountsUnderListQueryVariables,
  options?: UseQueryOptions<GetCoaAccountsUnderListQuery, TError, TData>
) =>
  useQuery<GetCoaAccountsUnderListQuery, TError, TData>(
    variables === undefined ? ['getCOAAccountsUnderList'] : ['getCOAAccountsUnderList', variables],
    useAxios<GetCoaAccountsUnderListQuery, GetCoaAccountsUnderListQueryVariables>(
      GetCoaAccountsUnderListDocument
    ).bind(null, variables),
    options
  );
export const GetCoaAccountsUnderLeafListDocument = `
    query getCOAAccountsUnderLeafList($parentId: [String]!, $currentBranch: Boolean) {
  settings {
    chartsOfAccount {
      accountsUnderLeaf(parentId: $parentId, currentBranch: $currentBranch) {
        accountId
        name
      }
    }
  }
}
    `;
export const useGetCoaAccountsUnderLeafListQuery = <
  TData = GetCoaAccountsUnderLeafListQuery,
  TError = unknown
>(
  variables: GetCoaAccountsUnderLeafListQueryVariables,
  options?: UseQueryOptions<GetCoaAccountsUnderLeafListQuery, TError, TData>
) =>
  useQuery<GetCoaAccountsUnderLeafListQuery, TError, TData>(
    ['getCOAAccountsUnderLeafList', variables],
    useAxios<GetCoaAccountsUnderLeafListQuery, GetCoaAccountsUnderLeafListQueryVariables>(
      GetCoaAccountsUnderLeafListDocument
    ).bind(null, variables),
    options
  );
export const GetCoaAccountListDocument = `
    query getCoaAccountList($pagination: Pagination, $filter: Filter, $flag: COAListFlag) {
  settings {
    chartsOfAccount {
      coaAccountList(pagination: $pagination, filter: $filter, flag: $flag) {
        edges {
          node {
            accountCode
            accountName
            accountClass
            parentGroup
            branch
            balance
          }
        }
        totalCount
        pageInfo {
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
        }
      }
    }
  }
}
    `;
export const useGetCoaAccountListQuery = <TData = GetCoaAccountListQuery, TError = unknown>(
  variables?: GetCoaAccountListQueryVariables,
  options?: UseQueryOptions<GetCoaAccountListQuery, TError, TData>
) =>
  useQuery<GetCoaAccountListQuery, TError, TData>(
    variables === undefined ? ['getCoaAccountList'] : ['getCoaAccountList', variables],
    useAxios<GetCoaAccountListQuery, GetCoaAccountListQueryVariables>(
      GetCoaAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetLedgerForJvPostingDocument = `
    query getLedgerForJVPosting($pagination: Pagination, $filter: COAListFilter) {
  settings {
    chartsOfAccount {
      ledgersForJVPosting(pagination: $pagination, filter: $filter) {
        edges {
          node {
            id
            accountCode
            accountName
            accountClass
            parentGroup
            branch
          }
        }
        totalCount
        pageInfo {
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetLedgerForJvPostingQuery = <TData = GetLedgerForJvPostingQuery, TError = unknown>(
  variables?: GetLedgerForJvPostingQueryVariables,
  options?: UseQueryOptions<GetLedgerForJvPostingQuery, TError, TData>
) =>
  useQuery<GetLedgerForJvPostingQuery, TError, TData>(
    variables === undefined ? ['getLedgerForJVPosting'] : ['getLedgerForJVPosting', variables],
    useAxios<GetLedgerForJvPostingQuery, GetLedgerForJvPostingQueryVariables>(
      GetLedgerForJvPostingDocument
    ).bind(null, variables),
    options
  );
export const GetCoaAccountDetailsDocument = `
    query getCOAAccountDetails($id: String!, $branch: String) {
  settings {
    chartsOfAccount {
      coaAccountDetails(id: $id, branchId: $branch) {
        data {
          meta {
            accountName
            accountId
            accountType
            createdDate
            isLoanAccount
            isSavingAccount
            parentId
          }
          overview {
            openingBalance
            dr
            cr
            closingBalance
            balanceType
          }
          totalNoOfTxns
          recentTxns {
            date
            txnId
            txnType
            debit
            credit
            balanceType
            particulars
            total
          }
        }
      }
    }
  }
}
    `;
export const useGetCoaAccountDetailsQuery = <TData = GetCoaAccountDetailsQuery, TError = unknown>(
  variables: GetCoaAccountDetailsQueryVariables,
  options?: UseQueryOptions<GetCoaAccountDetailsQuery, TError, TData>
) =>
  useQuery<GetCoaAccountDetailsQuery, TError, TData>(
    ['getCOAAccountDetails', variables],
    useAxios<GetCoaAccountDetailsQuery, GetCoaAccountDetailsQueryVariables>(
      GetCoaAccountDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetCoaLeafNodeDetailsDocument = `
    query getCOALeafNodeDetails($id: ID!, $branch: [String], $snapshot: String) {
  settings {
    chartsOfAccount {
      coaLeafNodeDetails(id: $id, branch: $branch, snapshot: $snapshot) {
        data {
          id
          accountName
          accountType
          date
          noOfAccounts
          drAmount
          crAmount
          closingBalance
          balanceType
          ledgers {
            accountCode
            date
            ledgerName
            serviceCenter
            balance
            balanceType
            status
          }
        }
      }
    }
  }
}
    `;
export const useGetCoaLeafNodeDetailsQuery = <TData = GetCoaLeafNodeDetailsQuery, TError = unknown>(
  variables: GetCoaLeafNodeDetailsQueryVariables,
  options?: UseQueryOptions<GetCoaLeafNodeDetailsQuery, TError, TData>
) =>
  useQuery<GetCoaLeafNodeDetailsQuery, TError, TData>(
    ['getCOALeafNodeDetails', variables],
    useAxios<GetCoaLeafNodeDetailsQuery, GetCoaLeafNodeDetailsQueryVariables>(
      GetCoaLeafNodeDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetLedgerListDocument = `
    query getLedgerList($id: ID!, $pagination: Pagination, $filter: Filter, $branchId: [String!], $snapshot: String) {
  settings {
    chartsOfAccount {
      coaLedgerList(
        id: $id
        pagination: $pagination
        filter: $filter
        branchId: $branchId
        snapshot: $snapshot
      ) {
        totalCount
        pageInfo {
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
        }
        edges {
          node {
            id
            accountCode
            date
            ledgerName
            serviceCenter
            balance
            balanceType
            status
            tags {
              id
              name
            }
          }
          cursor
        }
      }
    }
  }
}
    `;
export const useGetLedgerListQuery = <TData = GetLedgerListQuery, TError = unknown>(
  variables: GetLedgerListQueryVariables,
  options?: UseQueryOptions<GetLedgerListQuery, TError, TData>
) =>
  useQuery<GetLedgerListQuery, TError, TData>(
    ['getLedgerList', variables],
    useAxios<GetLedgerListQuery, GetLedgerListQueryVariables>(GetLedgerListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetCoaAccountsAllTransactionListDocument = `
    query getCOAAccountsAllTransactionList($id: ID!, $pagination: Pagination) {
  settings {
    chartsOfAccount {
      ledgerAllTransactionsList(ledgerId: $id, pagination: $pagination) {
        totalCount
        pageInfo {
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
        }
        edges {
          node {
            date
            txnId
            txnType
            particulars
            debit
            credit
            total
            balanceType
          }
          cursor
        }
      }
    }
  }
}
    `;
export const useGetCoaAccountsAllTransactionListQuery = <
  TData = GetCoaAccountsAllTransactionListQuery,
  TError = unknown
>(
  variables: GetCoaAccountsAllTransactionListQueryVariables,
  options?: UseQueryOptions<GetCoaAccountsAllTransactionListQuery, TError, TData>
) =>
  useQuery<GetCoaAccountsAllTransactionListQuery, TError, TData>(
    ['getCOAAccountsAllTransactionList', variables],
    useAxios<GetCoaAccountsAllTransactionListQuery, GetCoaAccountsAllTransactionListQueryVariables>(
      GetCoaAccountsAllTransactionListDocument
    ).bind(null, variables),
    options
  );
export const GetTagListForReportDocument = `
    query getTagListForReport {
  settings {
    chartsOfAccount {
      tag {
        list(pagination: {after: "", first: -1}) {
          edges {
            node {
              id
              name
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetTagListForReportQuery = <TData = GetTagListForReportQuery, TError = unknown>(
  variables?: GetTagListForReportQueryVariables,
  options?: UseQueryOptions<GetTagListForReportQuery, TError, TData>
) =>
  useQuery<GetTagListForReportQuery, TError, TData>(
    variables === undefined ? ['getTagListForReport'] : ['getTagListForReport', variables],
    useAxios<GetTagListForReportQuery, GetTagListForReportQueryVariables>(
      GetTagListForReportDocument
    ).bind(null, variables),
    options
  );
export const ListLeafCoaHeadsDocument = `
    query listLeafCoaHeads($pagination: Pagination, $filter: Filter) {
  settings {
    chartsOfAccount {
      listLeafCoaHeads(pagination: $pagination, filter: $filter) {
        edges {
          node {
            accountCode
            Name
          }
        }
      }
    }
  }
}
    `;
export const useListLeafCoaHeadsQuery = <TData = ListLeafCoaHeadsQuery, TError = unknown>(
  variables?: ListLeafCoaHeadsQueryVariables,
  options?: UseQueryOptions<ListLeafCoaHeadsQuery, TError, TData>
) =>
  useQuery<ListLeafCoaHeadsQuery, TError, TData>(
    variables === undefined ? ['listLeafCoaHeads'] : ['listLeafCoaHeads', variables],
    useAxios<ListLeafCoaHeadsQuery, ListLeafCoaHeadsQueryVariables>(ListLeafCoaHeadsDocument).bind(
      null,
      variables
    ),
    options
  );
export const ListCbsShareCodesDocument = `
    query listCBSShareCodes {
  settings {
    general {
      codes {
        cbs {
          allCbsCodes {
            data {
              share {
                id
                codeType
                prefix
                noOfDigit
                initialNo
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useListCbsShareCodesQuery = <TData = ListCbsShareCodesQuery, TError = unknown>(
  variables?: ListCbsShareCodesQueryVariables,
  options?: UseQueryOptions<ListCbsShareCodesQuery, TError, TData>
) =>
  useQuery<ListCbsShareCodesQuery, TError, TData>(
    variables === undefined ? ['listCBSShareCodes'] : ['listCBSShareCodes', variables],
    useAxios<ListCbsShareCodesQuery, ListCbsShareCodesQueryVariables>(
      ListCbsShareCodesDocument
    ).bind(null, variables),
    options
  );
export const ListCbsTransfersCodesDocument = `
    query listCBSTransfersCodes {
  settings {
    general {
      codes {
        cbs {
          allCbsCodes {
            data {
              transfers {
                id
                codeType
                prefix
                noOfDigit
                initialNo
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useListCbsTransfersCodesQuery = <TData = ListCbsTransfersCodesQuery, TError = unknown>(
  variables?: ListCbsTransfersCodesQueryVariables,
  options?: UseQueryOptions<ListCbsTransfersCodesQuery, TError, TData>
) =>
  useQuery<ListCbsTransfersCodesQuery, TError, TData>(
    variables === undefined ? ['listCBSTransfersCodes'] : ['listCBSTransfersCodes', variables],
    useAxios<ListCbsTransfersCodesQuery, ListCbsTransfersCodesQueryVariables>(
      ListCbsTransfersCodesDocument
    ).bind(null, variables),
    options
  );
export const ListCbsWithdrawSlipCodesDocument = `
    query listCBSWithdrawSlipCodes {
  settings {
    general {
      codes {
        cbs {
          allCbsCodes {
            data {
              withdrawSlip {
                id
                codeType
                prefix
                noOfDigit
                initialNo
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useListCbsWithdrawSlipCodesQuery = <
  TData = ListCbsWithdrawSlipCodesQuery,
  TError = unknown
>(
  variables?: ListCbsWithdrawSlipCodesQueryVariables,
  options?: UseQueryOptions<ListCbsWithdrawSlipCodesQuery, TError, TData>
) =>
  useQuery<ListCbsWithdrawSlipCodesQuery, TError, TData>(
    variables === undefined
      ? ['listCBSWithdrawSlipCodes']
      : ['listCBSWithdrawSlipCodes', variables],
    useAxios<ListCbsWithdrawSlipCodesQuery, ListCbsWithdrawSlipCodesQueryVariables>(
      ListCbsWithdrawSlipCodesDocument
    ).bind(null, variables),
    options
  );
export const GetCommitteeListDocument = `
    query getCommitteeList {
  settings {
    general {
      organization {
        committee {
          code
          description
          file {
            identifier
            url
          }
          id
          memberCount
          name
          tenure
        }
      }
    }
  }
}
    `;
export const useGetCommitteeListQuery = <TData = GetCommitteeListQuery, TError = unknown>(
  variables?: GetCommitteeListQueryVariables,
  options?: UseQueryOptions<GetCommitteeListQuery, TError, TData>
) =>
  useQuery<GetCommitteeListQuery, TError, TData>(
    variables === undefined ? ['getCommitteeList'] : ['getCommitteeList', variables],
    useAxios<GetCommitteeListQuery, GetCommitteeListQueryVariables>(GetCommitteeListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetCommitteeMemberListDocument = `
    query getCommitteeMemberList($committeeID: ID) {
  settings {
    general {
      organization {
        committeeMembers(committeeId: $committeeID) {
          id
          position
          member {
            name
            contact
            dateJoined
          }
        }
      }
    }
  }
}
    `;
export const useGetCommitteeMemberListQuery = <
  TData = GetCommitteeMemberListQuery,
  TError = unknown
>(
  variables?: GetCommitteeMemberListQueryVariables,
  options?: UseQueryOptions<GetCommitteeMemberListQuery, TError, TData>
) =>
  useQuery<GetCommitteeMemberListQuery, TError, TData>(
    variables === undefined ? ['getCommitteeMemberList'] : ['getCommitteeMemberList', variables],
    useAxios<GetCommitteeMemberListQuery, GetCommitteeMemberListQueryVariables>(
      GetCommitteeMemberListDocument
    ).bind(null, variables),
    options
  );
export const GetPrintCountDocument = `
    query getPrintCount($type: PrintType!, $objectId: ID!) {
  settings {
    getPrintCount(type: $type, objectId: $objectId)
  }
}
    `;
export const useGetPrintCountQuery = <TData = GetPrintCountQuery, TError = unknown>(
  variables: GetPrintCountQueryVariables,
  options?: UseQueryOptions<GetPrintCountQuery, TError, TData>
) =>
  useQuery<GetPrintCountQuery, TError, TData>(
    ['getPrintCount', variables],
    useAxios<GetPrintCountQuery, GetPrintCountQueryVariables>(GetPrintCountDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetEodExceptionsDocument = `
    query getEodExceptions {
  settings {
    general {
      setup {
        eodSeed
        eodException {
          branchReadiness
          dormantCheck
          maturityCheck
          cashInHand
          loanRepayment
        }
        eodAction {
          dormantCheck
          maturityCheck
          loanRepayment
        }
      }
    }
  }
}
    `;
export const useGetEodExceptionsQuery = <TData = GetEodExceptionsQuery, TError = unknown>(
  variables?: GetEodExceptionsQueryVariables,
  options?: UseQueryOptions<GetEodExceptionsQuery, TError, TData>
) =>
  useQuery<GetEodExceptionsQuery, TError, TData>(
    variables === undefined ? ['getEodExceptions'] : ['getEodExceptions', variables],
    useAxios<GetEodExceptionsQuery, GetEodExceptionsQueryVariables>(GetEodExceptionsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetEmployeeLevelListDocument = `
    query getEmployeeLevelList($filter: Filter, $pagination: Pagination) {
  settings {
    general {
      HCM {
        employee {
          employee {
            listEmployeeLevel(filter: $filter, pagination: $pagination) {
              totalCount
              edges {
                node {
                  id
                  name
                  description
                }
                cursor
              }
              pageInfo {
                ...Pagination
              }
            }
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetEmployeeLevelListQuery = <TData = GetEmployeeLevelListQuery, TError = unknown>(
  variables?: GetEmployeeLevelListQueryVariables,
  options?: UseQueryOptions<GetEmployeeLevelListQuery, TError, TData>
) =>
  useQuery<GetEmployeeLevelListQuery, TError, TData>(
    variables === undefined ? ['getEmployeeLevelList'] : ['getEmployeeLevelList', variables],
    useAxios<GetEmployeeLevelListQuery, GetEmployeeLevelListQueryVariables>(
      GetEmployeeLevelListDocument
    ).bind(null, variables),
    options
  );
export const GetDepartmentListDocument = `
    query getDepartmentList($filter: Filter, $pagination: Pagination) {
  settings {
    general {
      HCM {
        employee {
          employee {
            listDepartment(filter: $filter, pagination: $pagination) {
              totalCount
              edges {
                node {
                  id
                  name
                  description
                }
                cursor
              }
              pageInfo {
                ...Pagination
              }
            }
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetDepartmentListQuery = <TData = GetDepartmentListQuery, TError = unknown>(
  variables?: GetDepartmentListQueryVariables,
  options?: UseQueryOptions<GetDepartmentListQuery, TError, TData>
) =>
  useQuery<GetDepartmentListQuery, TError, TData>(
    variables === undefined ? ['getDepartmentList'] : ['getDepartmentList', variables],
    useAxios<GetDepartmentListQuery, GetDepartmentListQueryVariables>(
      GetDepartmentListDocument
    ).bind(null, variables),
    options
  );
export const GetDesignationListDocument = `
    query getDesignationList($filter: Filter, $pagination: Pagination) {
  settings {
    general {
      HCM {
        employee {
          employee {
            listDesignation(filter: $filter, pagination: $pagination) {
              totalCount
              edges {
                node {
                  id
                  name
                  description
                }
                cursor
              }
              pageInfo {
                ...Pagination
              }
            }
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetDesignationListQuery = <TData = GetDesignationListQuery, TError = unknown>(
  variables?: GetDesignationListQueryVariables,
  options?: UseQueryOptions<GetDesignationListQuery, TError, TData>
) =>
  useQuery<GetDesignationListQuery, TError, TData>(
    variables === undefined ? ['getDesignationList'] : ['getDesignationList', variables],
    useAxios<GetDesignationListQuery, GetDesignationListQueryVariables>(
      GetDesignationListDocument
    ).bind(null, variables),
    options
  );
export const GetEmployeeTypeListDocument = `
    query getEmployeeTypeList($filter: Filter, $pagination: Pagination) {
  settings {
    general {
      HCM {
        employee {
          employee {
            listEmployeeType(filter: $filter, pagination: $pagination) {
              totalCount
              edges {
                node {
                  id
                  name
                  description
                }
                cursor
              }
              pageInfo {
                ...Pagination
              }
            }
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetEmployeeTypeListQuery = <TData = GetEmployeeTypeListQuery, TError = unknown>(
  variables?: GetEmployeeTypeListQueryVariables,
  options?: UseQueryOptions<GetEmployeeTypeListQuery, TError, TData>
) =>
  useQuery<GetEmployeeTypeListQuery, TError, TData>(
    variables === undefined ? ['getEmployeeTypeList'] : ['getEmployeeTypeList', variables],
    useAxios<GetEmployeeTypeListQuery, GetEmployeeTypeListQueryVariables>(
      GetEmployeeTypeListDocument
    ).bind(null, variables),
    options
  );
export const GetEmployeeHealthInsuranceListDocument = `
    query getEmployeeHealthInsuranceList($filter: Filter, $pagination: Pagination) {
  settings {
    general {
      HCM {
        employee {
          employee {
            listEmployeeHealthInsurance(filter: $filter, pagination: $pagination) {
              totalCount
              edges {
                node {
                  id
                  healthInsuranceProvider
                  healthInsuranceNumber
                }
                cursor
              }
              pageInfo {
                ...Pagination
              }
            }
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetEmployeeHealthInsuranceListQuery = <
  TData = GetEmployeeHealthInsuranceListQuery,
  TError = unknown
>(
  variables?: GetEmployeeHealthInsuranceListQueryVariables,
  options?: UseQueryOptions<GetEmployeeHealthInsuranceListQuery, TError, TData>
) =>
  useQuery<GetEmployeeHealthInsuranceListQuery, TError, TData>(
    variables === undefined
      ? ['getEmployeeHealthInsuranceList']
      : ['getEmployeeHealthInsuranceList', variables],
    useAxios<GetEmployeeHealthInsuranceListQuery, GetEmployeeHealthInsuranceListQueryVariables>(
      GetEmployeeHealthInsuranceListDocument
    ).bind(null, variables),
    options
  );
export const GetEmployeeLeaveTypeListDocument = `
    query getEmployeeLeaveTypeList($filter: Filter, $pagination: Pagination) {
  settings {
    general {
      HCM {
        employee {
          leave {
            listLeaveType(filter: $filter, pagination: $pagination) {
              totalCount
              edges {
                node {
                  id
                  name
                  description
                }
                cursor
              }
              pageInfo {
                ...Pagination
              }
            }
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetEmployeeLeaveTypeListQuery = <
  TData = GetEmployeeLeaveTypeListQuery,
  TError = unknown
>(
  variables?: GetEmployeeLeaveTypeListQueryVariables,
  options?: UseQueryOptions<GetEmployeeLeaveTypeListQuery, TError, TData>
) =>
  useQuery<GetEmployeeLeaveTypeListQuery, TError, TData>(
    variables === undefined
      ? ['getEmployeeLeaveTypeList']
      : ['getEmployeeLeaveTypeList', variables],
    useAxios<GetEmployeeLeaveTypeListQuery, GetEmployeeLeaveTypeListQueryVariables>(
      GetEmployeeLeaveTypeListDocument
    ).bind(null, variables),
    options
  );
export const GetEmployeeLeavePolicyListDocument = `
    query getEmployeeLeavePolicyList($filter: Filter, $pagination: Pagination) {
  settings {
    general {
      HCM {
        employee {
          leavePolicy {
            listLeavePolicy(filter: $filter, pagination: $pagination) {
              totalCount
              edges {
                node {
                  id
                  name
                  description
                }
                cursor
              }
              pageInfo {
                ...Pagination
              }
            }
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetEmployeeLeavePolicyListQuery = <
  TData = GetEmployeeLeavePolicyListQuery,
  TError = unknown
>(
  variables?: GetEmployeeLeavePolicyListQueryVariables,
  options?: UseQueryOptions<GetEmployeeLeavePolicyListQuery, TError, TData>
) =>
  useQuery<GetEmployeeLeavePolicyListQuery, TError, TData>(
    variables === undefined
      ? ['getEmployeeLeavePolicyList']
      : ['getEmployeeLeavePolicyList', variables],
    useAxios<GetEmployeeLeavePolicyListQuery, GetEmployeeLeavePolicyListQueryVariables>(
      GetEmployeeLeavePolicyListDocument
    ).bind(null, variables),
    options
  );
export const GetLeaveTypeDocument = `
    query getLeaveType($id: String!) {
  settings {
    general {
      HCM {
        employee {
          leave {
            getLeaveType(id: $id) {
              record {
                id
                name
                typeOfLeave
                description
                applicableAfter
                maximumLeaveAllowed
                maximumContinuousDaysApplicable
                isCarriedForward
                isPartiallyPaid
                fractionOfDailySalaryPerLeave
                isOptionalLeave
                includeHolidaysWithLeavesAsLeaves
                isCompensatory
              }
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetLeaveTypeQuery = <TData = GetLeaveTypeQuery, TError = unknown>(
  variables: GetLeaveTypeQueryVariables,
  options?: UseQueryOptions<GetLeaveTypeQuery, TError, TData>
) =>
  useQuery<GetLeaveTypeQuery, TError, TData>(
    ['getLeaveType', variables],
    useAxios<GetLeaveTypeQuery, GetLeaveTypeQueryVariables>(GetLeaveTypeDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLeavePolicyDocument = `
    query getLeavePolicy($id: String!) {
  settings {
    general {
      HCM {
        employee {
          leavePolicy {
            getLeavePolicy(id: $id) {
              record {
                name
                description
                employeeLevelId
                effectiveFrom
                leavePolicyDetails {
                  leaveTypeId
                  annualAllocation
                }
              }
              error {
                ...MutationError
              }
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetLeavePolicyQuery = <TData = GetLeavePolicyQuery, TError = unknown>(
  variables: GetLeavePolicyQueryVariables,
  options?: UseQueryOptions<GetLeavePolicyQuery, TError, TData>
) =>
  useQuery<GetLeavePolicyQuery, TError, TData>(
    ['getLeavePolicy', variables],
    useAxios<GetLeavePolicyQuery, GetLeavePolicyQueryVariables>(GetLeavePolicyDocument).bind(
      null,
      variables
    ),
    options
  );
export const LedgerTagsListDocument = `
    query ledgerTagsList($filter: Filter, $pagination: Pagination) {
  settings {
    chartsOfAccount {
      tag {
        list(filter: $filter, pagination: $pagination) {
          edges {
            node {
              id
              name
              description
              createdAt
              ledgerCount
            }
          }
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
        }
      }
    }
  }
}
    `;
export const useLedgerTagsListQuery = <TData = LedgerTagsListQuery, TError = unknown>(
  variables?: LedgerTagsListQueryVariables,
  options?: UseQueryOptions<LedgerTagsListQuery, TError, TData>
) =>
  useQuery<LedgerTagsListQuery, TError, TData>(
    variables === undefined ? ['ledgerTagsList'] : ['ledgerTagsList', variables],
    useAxios<LedgerTagsListQuery, LedgerTagsListQueryVariables>(LedgerTagsListDocument).bind(
      null,
      variables
    ),
    options
  );
export const ListTagLedgersDocument = `
    query listTagLedgers($filter: Filter, $pagination: Pagination) {
  settings {
    chartsOfAccount {
      tag {
        listTagLedgers(filter: $filter, pagination: $pagination) {
          edges {
            node {
              ledgerId
              name
              branchId
              branchName
              tagId
              tagName
            }
          }
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
        }
      }
    }
  }
}
    `;
export const useListTagLedgersQuery = <TData = ListTagLedgersQuery, TError = unknown>(
  variables?: ListTagLedgersQueryVariables,
  options?: UseQueryOptions<ListTagLedgersQuery, TError, TData>
) =>
  useQuery<ListTagLedgersQuery, TError, TData>(
    variables === undefined ? ['listTagLedgers'] : ['listTagLedgers', variables],
    useAxios<ListTagLedgersQuery, ListTagLedgersQueryVariables>(ListTagLedgersDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanProductListDocument = `
    query getLoanProductList($paginate: Pagination, $filter: LoanProductSearchFilter) {
  settings {
    general {
      loanProducts {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              createdBy {
                id
                name
                username
                userType
              }
              createdDate
              modifiedBy {
                id
                name
                username
                userType
              }
              productName
              productCodeString
              productCode {
                prefix
                initialNo
              }
              productType
              productSubType
              interest {
                minRate
                maxRate
                defaultRate
                ceoAuthority
                boardAuthority
              }
            }
          }
          totalCount
        }
      }
    }
  }
}
    `;
export const useGetLoanProductListQuery = <TData = GetLoanProductListQuery, TError = unknown>(
  variables?: GetLoanProductListQueryVariables,
  options?: UseQueryOptions<GetLoanProductListQuery, TError, TData>
) =>
  useQuery<GetLoanProductListQuery, TError, TData>(
    variables === undefined ? ['getLoanProductList'] : ['getLoanProductList', variables],
    useAxios<GetLoanProductListQuery, GetLoanProductListQueryVariables>(
      GetLoanProductListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductEditDataDocument = `
    query getLoanProductEditData($id: ID!) {
  settings {
    general {
      loanProducts {
        formState(id: $id) {
          data {
            id
            objState
            createdAt
            modifiedAt
            productName
            productType
            loanType
            productSubType
            productNature
            productCode {
              prefix
              initialNo
              noOfDigits
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            minimumLoanAmount
            maxLoanAmount
            repaymentScheme
            allowPartialInstallment
            isMonthlyInstallmentCompulsory
            interestMethod
            isPenaltyApplicable
            penaltyType
            penaltyDayAfterInstallmentDate
            penaltyRate
            penaltyAmount
            isRebateApplicable
            rebate {
              dayBeforeInstallmentDate
              rebateRate
              rebateAmount
              rebateLedgerMapping
            }
            principalMaxGraceNumber
            interestMaxGraceNumber
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
            }
            updateInterest
            waiveInterest
            loanProcessingCharge {
              serviceName
              ledgerName
              amount
            }
            isInsuranceApplicable
            insuranceType {
              type
              amount
              rate
            }
            ledgerMapping {
              principal
              interestAccuredDaily
              interestIncome
            }
            isStaffProduct
            supportMultipleAccounts
            loanScheduleChangeOverride
            requiredDocuments
            isCollateralRequired
            allowGurantee
            maxPercentOfGurantee
            collateralTypes
            collateralValue {
              type
              minFMV
              maxFMV
              minDV
              maxDV
              minValue
              maxValue
            }
            isPrematurePenaltyApplicable
            prematurePenaltySetup {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductEditDataQuery = <
  TData = GetLoanProductEditDataQuery,
  TError = unknown
>(
  variables: GetLoanProductEditDataQueryVariables,
  options?: UseQueryOptions<GetLoanProductEditDataQuery, TError, TData>
) =>
  useQuery<GetLoanProductEditDataQuery, TError, TData>(
    ['getLoanProductEditData', variables],
    useAxios<GetLoanProductEditDataQuery, GetLoanProductEditDataQueryVariables>(
      GetLoanProductEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductDetailDocument = `
    query getLoanProductDetail($id: ID!) {
  settings {
    general {
      loanProducts {
        getProductDetail(id: $id) {
          data {
            id
            noOfaccount
            noOfInactiveAccounts
            noOfMember
            objState
            createdAt
            modifiedAt
            productName
            productType
            productSubType
            productNature
            productCode {
              prefix
              initialNo
              noOfDigits
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            minimumLoanAmount
            maxLoanAmount
            repaymentScheme
            allowPartialInstallment
            isMonthlyInstallmentCompulsory
            interestMethod
            isPenaltyApplicable
            penalty {
              penaltyType
              penaltyDayAfterInstallmentDate
              penaltyRate
              penaltyAmount
            }
            isRebateApplicable
            rebate {
              dayBeforeInstallmentDate
              rebateRate
              rebateAmount
              rebateLedgerMapping
              noOfInstallment
            }
            principalMaxGraceNumber
            interestMaxGraceNumber
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              changeMin
              changeMax
            }
            updateInterest
            waiveInterest
            loanProcessingCharge {
              serviceName
              ledgerName
              amount
            }
            isInsuranceApplicable
            insuranceType {
              type
              amount
              rate
            }
            ledgerMapping {
              principal
              interestAccuredDaily
              interestIncome
            }
            isStaffProduct
            supportMultipleAccounts
            loanScheduleChangeOverride
            requiredDocuments
            isCollateralRequired
            allowGurantee
            maxPercentOfGurantee
            collateralTypes
            collateralValue {
              type
              minFMV
              maxFMV
              minDV
              maxDV
              minValue
              maxValue
            }
            isPrematurePenaltyApplicable
            prematurePenaltySetup {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            loanType
            productPremiumInterest
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductDetailQuery = <TData = GetLoanProductDetailQuery, TError = unknown>(
  variables: GetLoanProductDetailQueryVariables,
  options?: UseQueryOptions<GetLoanProductDetailQuery, TError, TData>
) =>
  useQuery<GetLoanProductDetailQuery, TError, TData>(
    ['getLoanProductDetail', variables],
    useAxios<GetLoanProductDetailQuery, GetLoanProductDetailQueryVariables>(
      GetLoanProductDetailDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountListDocument = `
    query getLoanAccountList($paginate: Pagination, $filter: Filter) {
  settings {
    general {
      loanProducts {
        getLoanAccountlist(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              approvedDate
              member {
                code
                name
              }
              productType
              productSubType {
                id
                productSubType
                productTypeID
              }
              LoanAccountName
              appliedLoanAmount
              approvedDate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanAccountListQuery = <TData = GetLoanAccountListQuery, TError = unknown>(
  variables?: GetLoanAccountListQueryVariables,
  options?: UseQueryOptions<GetLoanAccountListQuery, TError, TData>
) =>
  useQuery<GetLoanAccountListQuery, TError, TData>(
    variables === undefined ? ['getLoanAccountList'] : ['getLoanAccountList', variables],
    useAxios<GetLoanAccountListQuery, GetLoanAccountListQueryVariables>(
      GetLoanAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductCriteriaDocument = `
    query getLoanProductCriteria($productId: ID!) {
  settings {
    general {
      loanProducts {
        getProductCriteria(productId: $productId) {
          data {
            gender
            minAge
            maxAge
            ethnicity
            educationQualification
            maritalStatus
            foreignEmployment
            occupation
            institutionType
            cooperativeUnion
            cooperativeType
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductCriteriaQuery = <
  TData = GetLoanProductCriteriaQuery,
  TError = unknown
>(
  variables: GetLoanProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetLoanProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetLoanProductCriteriaQuery, TError, TData>(
    ['getLoanProductCriteria', variables],
    useAxios<GetLoanProductCriteriaQuery, GetLoanProductCriteriaQueryVariables>(
      GetLoanProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductInterestRateListDocument = `
    query getLoanProductInterestRateList($productId: ID!) {
  settings {
    general {
      loanProducts {
        listProductInterestRates(productId: $productId) {
          data {
            id
            rate
            effectiveDate
            createdAt
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductInterestRateListQuery = <
  TData = GetLoanProductInterestRateListQuery,
  TError = unknown
>(
  variables: GetLoanProductInterestRateListQueryVariables,
  options?: UseQueryOptions<GetLoanProductInterestRateListQuery, TError, TData>
) =>
  useQuery<GetLoanProductInterestRateListQuery, TError, TData>(
    ['getLoanProductInterestRateList', variables],
    useAxios<GetLoanProductInterestRateListQuery, GetLoanProductInterestRateListQueryVariables>(
      GetLoanProductInterestRateListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductInterestRateDetailDocument = `
    query getLoanProductInterestRateDetail($id: ID!, $productId: ID!) {
  settings {
    general {
      loanProducts {
        getProductInterestRate(id: $id, productId: $productId) {
          data {
            id
            rate
            effectiveDate
            fileUploads {
              identifier
              url
            }
            note
            createdAt
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductInterestRateDetailQuery = <
  TData = GetLoanProductInterestRateDetailQuery,
  TError = unknown
>(
  variables: GetLoanProductInterestRateDetailQueryVariables,
  options?: UseQueryOptions<GetLoanProductInterestRateDetailQuery, TError, TData>
) =>
  useQuery<GetLoanProductInterestRateDetailQuery, TError, TData>(
    ['getLoanProductInterestRateDetail', variables],
    useAxios<GetLoanProductInterestRateDetailQuery, GetLoanProductInterestRateDetailQueryVariables>(
      GetLoanProductInterestRateDetailDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductPenaltyUpdateListDocument = `
    query getLoanProductPenaltyUpdateList($productId: ID!) {
  settings {
    general {
      loanProducts {
        listPenaltyCharge(productId: $productId) {
          data {
            payload {
              penaltyRate
              penaltyAmount
              dayAfterInstallmentDate
            }
            additionalData {
              id
              createdAt
              effectiveDate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductPenaltyUpdateListQuery = <
  TData = GetLoanProductPenaltyUpdateListQuery,
  TError = unknown
>(
  variables: GetLoanProductPenaltyUpdateListQueryVariables,
  options?: UseQueryOptions<GetLoanProductPenaltyUpdateListQuery, TError, TData>
) =>
  useQuery<GetLoanProductPenaltyUpdateListQuery, TError, TData>(
    ['getLoanProductPenaltyUpdateList', variables],
    useAxios<GetLoanProductPenaltyUpdateListQuery, GetLoanProductPenaltyUpdateListQueryVariables>(
      GetLoanProductPenaltyUpdateListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductPenaltyChargeDetailDocument = `
    query getLoanProductPenaltyChargeDetail($id: ID!) {
  settings {
    general {
      loanProducts {
        getPenaltyCharge(id: $id) {
          data {
            payload {
              penaltyType
              penaltyRate
              penaltyAmount
              dayAfterInstallmentDate
            }
            additionalData {
              id
              createdAt
              effectiveDate
              fileUploads {
                identifier
                url
              }
              notes
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductPenaltyChargeDetailQuery = <
  TData = GetLoanProductPenaltyChargeDetailQuery,
  TError = unknown
>(
  variables: GetLoanProductPenaltyChargeDetailQueryVariables,
  options?: UseQueryOptions<GetLoanProductPenaltyChargeDetailQuery, TError, TData>
) =>
  useQuery<GetLoanProductPenaltyChargeDetailQuery, TError, TData>(
    ['getLoanProductPenaltyChargeDetail', variables],
    useAxios<
      GetLoanProductPenaltyChargeDetailQuery,
      GetLoanProductPenaltyChargeDetailQueryVariables
    >(GetLoanProductPenaltyChargeDetailDocument).bind(null, variables),
    options
  );
export const GetLoanProductProcessingChargesListDocument = `
    query getLoanProductProcessingChargesList($productId: ID!) {
  settings {
    general {
      loanProducts {
        listProcessingCharge(productId: $productId) {
          data {
            payload {
              serviceName
              ledgerName
              amount
              percentage
            }
            additionalData {
              id
              createdAt
              effectiveDate
              fileUploads {
                identifier
                url
              }
              notes
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductProcessingChargesListQuery = <
  TData = GetLoanProductProcessingChargesListQuery,
  TError = unknown
>(
  variables: GetLoanProductProcessingChargesListQueryVariables,
  options?: UseQueryOptions<GetLoanProductProcessingChargesListQuery, TError, TData>
) =>
  useQuery<GetLoanProductProcessingChargesListQuery, TError, TData>(
    ['getLoanProductProcessingChargesList', variables],
    useAxios<
      GetLoanProductProcessingChargesListQuery,
      GetLoanProductProcessingChargesListQueryVariables
    >(GetLoanProductProcessingChargesListDocument).bind(null, variables),
    options
  );
export const GetLoanProductProcessingChargeDetailDocument = `
    query getLoanProductProcessingChargeDetail($chargeId: ID!) {
  settings {
    general {
      loanProducts {
        getProcessingCharge(id: $chargeId) {
          data {
            payload {
              serviceName
              ledgerName
              amount
              percentage
            }
            additionalData {
              id
              createdAt
              effectiveDate
              fileUploads {
                identifier
                url
              }
              notes
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductProcessingChargeDetailQuery = <
  TData = GetLoanProductProcessingChargeDetailQuery,
  TError = unknown
>(
  variables: GetLoanProductProcessingChargeDetailQueryVariables,
  options?: UseQueryOptions<GetLoanProductProcessingChargeDetailQuery, TError, TData>
) =>
  useQuery<GetLoanProductProcessingChargeDetailQuery, TError, TData>(
    ['getLoanProductProcessingChargeDetail', variables],
    useAxios<
      GetLoanProductProcessingChargeDetailQuery,
      GetLoanProductProcessingChargeDetailQueryVariables
    >(GetLoanProductProcessingChargeDetailDocument).bind(null, variables),
    options
  );
export const GetLoanGeneralSettingsDocument = `
    query getLoanGeneralSettings {
  settings {
    general {
      loan {
        general {
          emi
          epi
          flat
          collateralList {
            id
            name
            enabled
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanGeneralSettingsQuery = <
  TData = GetLoanGeneralSettingsQuery,
  TError = unknown
>(
  variables?: GetLoanGeneralSettingsQueryVariables,
  options?: UseQueryOptions<GetLoanGeneralSettingsQuery, TError, TData>
) =>
  useQuery<GetLoanGeneralSettingsQuery, TError, TData>(
    variables === undefined ? ['getLoanGeneralSettings'] : ['getLoanGeneralSettings', variables],
    useAxios<GetLoanGeneralSettingsQuery, GetLoanGeneralSettingsQueryVariables>(
      GetLoanGeneralSettingsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductSettingsDocument = `
    query getLoanProductSettings {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductSettingsQuery = <
  TData = GetLoanProductSettingsQuery,
  TError = unknown
>(
  variables?: GetLoanProductSettingsQueryVariables,
  options?: UseQueryOptions<GetLoanProductSettingsQuery, TError, TData>
) =>
  useQuery<GetLoanProductSettingsQuery, TError, TData>(
    variables === undefined ? ['getLoanProductSettings'] : ['getLoanProductSettings', variables],
    useAxios<GetLoanProductSettingsQuery, GetLoanProductSettingsQueryVariables>(
      GetLoanProductSettingsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductSubTypeDocument = `
    query getLoanProductSubType($productTypeId: String) {
  settings {
    general {
      loan {
        productType {
          productSubTypes(productTypeID: $productTypeId) {
            id
            productSubType
            productTypeID
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductSubTypeQuery = <TData = GetLoanProductSubTypeQuery, TError = unknown>(
  variables?: GetLoanProductSubTypeQueryVariables,
  options?: UseQueryOptions<GetLoanProductSubTypeQuery, TError, TData>
) =>
  useQuery<GetLoanProductSubTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanProductSubType'] : ['getLoanProductSubType', variables],
    useAxios<GetLoanProductSubTypeQuery, GetLoanProductSubTypeQueryVariables>(
      GetLoanProductSubTypeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanInsuranceSchemeDocument = `
    query getLoanInsuranceScheme {
  settings {
    general {
      loan {
        insuranceSchemes {
          id
          insuranceCompany
          insurancePremiumPercent
          maxAmount
          maxPercent
          minAmount
          paymentFrequency
          minPercent
          paymentType
          schemeName
        }
      }
    }
  }
}
    `;
export const useGetLoanInsuranceSchemeQuery = <
  TData = GetLoanInsuranceSchemeQuery,
  TError = unknown
>(
  variables?: GetLoanInsuranceSchemeQueryVariables,
  options?: UseQueryOptions<GetLoanInsuranceSchemeQuery, TError, TData>
) =>
  useQuery<GetLoanInsuranceSchemeQuery, TError, TData>(
    variables === undefined ? ['getLoanInsuranceScheme'] : ['getLoanInsuranceScheme', variables],
    useAxios<GetLoanInsuranceSchemeQuery, GetLoanInsuranceSchemeQueryVariables>(
      GetLoanInsuranceSchemeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductTypeDocument = `
    query getLoanProductType {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
          productSubTypes {
            id
            productSubType
            productTypeID
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductTypeQuery = <TData = GetLoanProductTypeQuery, TError = unknown>(
  variables?: GetLoanProductTypeQueryVariables,
  options?: UseQueryOptions<GetLoanProductTypeQuery, TError, TData>
) =>
  useQuery<GetLoanProductTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanProductType'] : ['getLoanProductType', variables],
    useAxios<GetLoanProductTypeQuery, GetLoanProductTypeQueryVariables>(
      GetLoanProductTypeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanOrganizationRateListDocument = `
    query getLoanOrganizationRateList {
  settings {
    general {
      loan {
        listOrganizationRate {
          data {
            id
            rate
            effectiveDate
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanOrganizationRateListQuery = <
  TData = GetLoanOrganizationRateListQuery,
  TError = unknown
>(
  variables?: GetLoanOrganizationRateListQueryVariables,
  options?: UseQueryOptions<GetLoanOrganizationRateListQuery, TError, TData>
) =>
  useQuery<GetLoanOrganizationRateListQuery, TError, TData>(
    variables === undefined
      ? ['getLoanOrganizationRateList']
      : ['getLoanOrganizationRateList', variables],
    useAxios<GetLoanOrganizationRateListQuery, GetLoanOrganizationRateListQueryVariables>(
      GetLoanOrganizationRateListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanOrganizationRateDetailDocument = `
    query getLoanOrganizationRateDetail($id: ID!) {
  settings {
    general {
      loan {
        getOrganizationRate(id: $id) {
          data {
            id
            rate
            effectiveDate
            fileUploads {
              identifier
              url
            }
            note
            createdAt
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanOrganizationRateDetailQuery = <
  TData = GetLoanOrganizationRateDetailQuery,
  TError = unknown
>(
  variables: GetLoanOrganizationRateDetailQueryVariables,
  options?: UseQueryOptions<GetLoanOrganizationRateDetailQuery, TError, TData>
) =>
  useQuery<GetLoanOrganizationRateDetailQuery, TError, TData>(
    ['getLoanOrganizationRateDetail', variables],
    useAxios<GetLoanOrganizationRateDetailQuery, GetLoanOrganizationRateDetailQueryVariables>(
      GetLoanOrganizationRateDetailDocument
    ).bind(null, variables),
    options
  );
export const GetLoanCurrentOrganizationRateDocument = `
    query getLoanCurrentOrganizationRate {
  settings {
    general {
      loan {
        getCurrentOrganizationRate
      }
    }
  }
}
    `;
export const useGetLoanCurrentOrganizationRateQuery = <
  TData = GetLoanCurrentOrganizationRateQuery,
  TError = unknown
>(
  variables?: GetLoanCurrentOrganizationRateQueryVariables,
  options?: UseQueryOptions<GetLoanCurrentOrganizationRateQuery, TError, TData>
) =>
  useQuery<GetLoanCurrentOrganizationRateQuery, TError, TData>(
    variables === undefined
      ? ['getLoanCurrentOrganizationRate']
      : ['getLoanCurrentOrganizationRate', variables],
    useAxios<GetLoanCurrentOrganizationRateQuery, GetLoanCurrentOrganizationRateQueryVariables>(
      GetLoanCurrentOrganizationRateDocument
    ).bind(null, variables),
    options
  );
export const GetGeneralMemberSettingsDataDocument = `
    query getGeneralMemberSettingsData {
  settings {
    general {
      KYM {
        general {
          generalMember {
            record {
              isCodeSetup
              memberType {
                individual
                institution
                cooperative
                cooperativeUnion
              }
              risk {
                generalRisk
                mediumRisk
                highRisk
              }
              charge {
                memberType
                ledgerId
                charge
              }
              memberCode {
                prefix
                noOfDigits
                initialNo
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetGeneralMemberSettingsDataQuery = <
  TData = GetGeneralMemberSettingsDataQuery,
  TError = unknown
>(
  variables?: GetGeneralMemberSettingsDataQueryVariables,
  options?: UseQueryOptions<GetGeneralMemberSettingsDataQuery, TError, TData>
) =>
  useQuery<GetGeneralMemberSettingsDataQuery, TError, TData>(
    variables === undefined
      ? ['getGeneralMemberSettingsData']
      : ['getGeneralMemberSettingsData', variables],
    useAxios<GetGeneralMemberSettingsDataQuery, GetGeneralMemberSettingsDataQueryVariables>(
      GetGeneralMemberSettingsDataDocument
    ).bind(null, variables),
    options
  );
export const GetPreDefinedFieldsDocument = `
    query getPreDefinedFields($filter: PredefinedElementFilter!) {
  settings {
    form {
      predefined {
        details(filter: $filter) {
          data {
            ... on FormField {
              __typename
              id
              name
              fieldType
              hasOtherField
              order
              dependsOn
              isDefault
              options {
                order
                id
                name
                enabled
                isDefault
              }
            }
            ... on FormSection {
              __typename
              id
              name
              isDefault
              sectionType
              maxSize
              fields {
                id
                name
                enabled
                fieldType
                isDefault
              }
              subSections {
                id
                name
                search_term
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetPreDefinedFieldsQuery = <TData = GetPreDefinedFieldsQuery, TError = unknown>(
  variables: GetPreDefinedFieldsQueryVariables,
  options?: UseQueryOptions<GetPreDefinedFieldsQuery, TError, TData>
) =>
  useQuery<GetPreDefinedFieldsQuery, TError, TData>(
    ['getPreDefinedFields', variables],
    useAxios<GetPreDefinedFieldsQuery, GetPreDefinedFieldsQueryVariables>(
      GetPreDefinedFieldsDocument
    ).bind(null, variables),
    options
  );
export const GetCustomFieldsDocument = `
    query getCustomFields($kymType: FormCategory!) {
  settings {
    form {
      custom {
        list(filter: {category: $kymType}) {
          data {
            ... on FormField {
              __typename
              id
              name
              fieldType
              hasOtherField
              order
              dependsOn
              isDefault
              options {
                order
                id
                name
                enabled
                isDefault
              }
            }
            ... on FormSection {
              __typename
              id
              name
              isDefault
              sectionType
              maxSize
              fields {
                id
                name
                enabled
                fieldType
                isDefault
              }
              subSections {
                id
                name
                search_term
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCustomFieldsQuery = <TData = GetCustomFieldsQuery, TError = unknown>(
  variables: GetCustomFieldsQueryVariables,
  options?: UseQueryOptions<GetCustomFieldsQuery, TError, TData>
) =>
  useQuery<GetCustomFieldsQuery, TError, TData>(
    ['getCustomFields', variables],
    useAxios<GetCustomFieldsQuery, GetCustomFieldsQueryVariables>(GetCustomFieldsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetDeclarationDocument = `
    query getDeclaration($kymType: DeclarationFor!) {
  settings {
    declaration {
      get(for: $kymType) {
        data {
          content
        }
      }
    }
  }
}
    `;
export const useGetDeclarationQuery = <TData = GetDeclarationQuery, TError = unknown>(
  variables: GetDeclarationQueryVariables,
  options?: UseQueryOptions<GetDeclarationQuery, TError, TData>
) =>
  useQuery<GetDeclarationQuery, TError, TData>(
    ['getDeclaration', variables],
    useAxios<GetDeclarationQuery, GetDeclarationQueryVariables>(GetDeclarationDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAccessLogListDocument = `
    query getAccessLogList($pagination: Pagination, $filter: Filter) {
  accessLog {
    raw(pagination: $pagination, filter: $filter) {
      data {
        id
        createdAt
        requestBody
        responseBody
        elapsedTime
        statusCode
        ip
        header
        bytesReceived
        bytesSent
        userId
        User {
          id
          name
          email
          profilePicUrl
        }
        AuditLog {
          timestamp
          narration
          extraData
        }
      }
    }
  }
}
    `;
export const useGetAccessLogListQuery = <TData = GetAccessLogListQuery, TError = unknown>(
  variables?: GetAccessLogListQueryVariables,
  options?: UseQueryOptions<GetAccessLogListQuery, TError, TData>
) =>
  useQuery<GetAccessLogListQuery, TError, TData>(
    variables === undefined ? ['getAccessLogList'] : ['getAccessLogList', variables],
    useAxios<GetAccessLogListQuery, GetAccessLogListQueryVariables>(GetAccessLogListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetOrganizationDataDocument = `
    query getOrganizationData {
  settings {
    general {
      organization {
        mine {
          data {
            id
            basicDetails {
              name
              logo
              typeOfOrganization
            }
            contactDetails {
              phoneNumber
              email
              website
            }
            mainContactPerson {
              contactPersonName
              contactPersonContactNumber
              title
            }
            address {
              ...Address
            }
            registrationDetails {
              regdNo
              regdOffice
              regdAddress
              panOrVat
            }
            documents
            statistics {
              totalMembers
              totalCapital
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}
${MutationErrorFragmentDoc}`;
export const useGetOrganizationDataQuery = <TData = GetOrganizationDataQuery, TError = unknown>(
  variables?: GetOrganizationDataQueryVariables,
  options?: UseQueryOptions<GetOrganizationDataQuery, TError, TData>
) =>
  useQuery<GetOrganizationDataQuery, TError, TData>(
    variables === undefined ? ['getOrganizationData'] : ['getOrganizationData', variables],
    useAxios<GetOrganizationDataQuery, GetOrganizationDataQueryVariables>(
      GetOrganizationDataDocument
    ).bind(null, variables),
    options
  );
export const GetOrganizationEditDataDocument = `
    query getOrganizationEditData {
  settings {
    general {
      organization {
        formState {
          data {
            id
            basicDetails {
              name
              logo
              typeOfOrganization
            }
            contactDetails {
              phoneNumber
              email
              website
            }
            mainContactPerson {
              contactPersonName
              contactPersonContactNumber
              title
            }
            address {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            registrationDetails {
              regdNo
              regdOffice
              regdAddress
              panOrVat
            }
            documents
            statistics {
              totalMembers
              totalCapital
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetOrganizationEditDataQuery = <
  TData = GetOrganizationEditDataQuery,
  TError = unknown
>(
  variables?: GetOrganizationEditDataQueryVariables,
  options?: UseQueryOptions<GetOrganizationEditDataQuery, TError, TData>
) =>
  useQuery<GetOrganizationEditDataQuery, TError, TData>(
    variables === undefined ? ['getOrganizationEditData'] : ['getOrganizationEditData', variables],
    useAxios<GetOrganizationEditDataQuery, GetOrganizationEditDataQueryVariables>(
      GetOrganizationEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetPearlsReportsFormulaDocument = `
    query getPearlsReportsFormula {
  settings {
    general {
      reports {
        pearls {
          list {
            header
            description
            numerator
            numeratorVariables
            denominator
            denominatorVariables
            goal
            indicatorId
          }
        }
      }
    }
  }
}
    `;
export const useGetPearlsReportsFormulaQuery = <
  TData = GetPearlsReportsFormulaQuery,
  TError = unknown
>(
  variables?: GetPearlsReportsFormulaQueryVariables,
  options?: UseQueryOptions<GetPearlsReportsFormulaQuery, TError, TData>
) =>
  useQuery<GetPearlsReportsFormulaQuery, TError, TData>(
    variables === undefined ? ['getPearlsReportsFormula'] : ['getPearlsReportsFormula', variables],
    useAxios<GetPearlsReportsFormulaQuery, GetPearlsReportsFormulaQueryVariables>(
      GetPearlsReportsFormulaDocument
    ).bind(null, variables),
    options
  );
export const GetCopomisReportSettingsDocument = `
    query getCopomisReportSettings {
  settings {
    general {
      reports {
        copomis {
          list {
            expression
            id
            indicatorName
            values
          }
        }
      }
    }
  }
}
    `;
export const useGetCopomisReportSettingsQuery = <
  TData = GetCopomisReportSettingsQuery,
  TError = unknown
>(
  variables?: GetCopomisReportSettingsQueryVariables,
  options?: UseQueryOptions<GetCopomisReportSettingsQuery, TError, TData>
) =>
  useQuery<GetCopomisReportSettingsQuery, TError, TData>(
    variables === undefined
      ? ['getCopomisReportSettings']
      : ['getCopomisReportSettings', variables],
    useAxios<GetCopomisReportSettingsQuery, GetCopomisReportSettingsQueryVariables>(
      GetCopomisReportSettingsDocument
    ).bind(null, variables),
    options
  );
export const GetDepositSettingsIroDocument = `
    query getDepositSettingsIro {
  settings {
    general {
      deposit {
        ... on DepositSettingsQuery {
          iroFormState {
            data {
              iroName
              iroAddress
              iroCode
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositSettingsIroQuery = <TData = GetDepositSettingsIroQuery, TError = unknown>(
  variables?: GetDepositSettingsIroQueryVariables,
  options?: UseQueryOptions<GetDepositSettingsIroQuery, TError, TData>
) =>
  useQuery<GetDepositSettingsIroQuery, TError, TData>(
    variables === undefined ? ['getDepositSettingsIro'] : ['getDepositSettingsIro', variables],
    useAxios<GetDepositSettingsIroQuery, GetDepositSettingsIroQueryVariables>(
      GetDepositSettingsIroDocument
    ).bind(null, variables),
    options
  );
export const GetDepositSettingsTdsDocument = `
    query getDepositSettingsTds {
  settings {
    general {
      deposit {
        ... on DepositSettingsQuery {
          tdsFormState {
            data {
              individual
              institution
              cooperative
              coopUnion
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositSettingsTdsQuery = <TData = GetDepositSettingsTdsQuery, TError = unknown>(
  variables?: GetDepositSettingsTdsQueryVariables,
  options?: UseQueryOptions<GetDepositSettingsTdsQuery, TError, TData>
) =>
  useQuery<GetDepositSettingsTdsQuery, TError, TData>(
    variables === undefined ? ['getDepositSettingsTds'] : ['getDepositSettingsTds', variables],
    useAxios<GetDepositSettingsTdsQuery, GetDepositSettingsTdsQueryVariables>(
      GetDepositSettingsTdsDocument
    ).bind(null, variables),
    options
  );
export const GetSavingsOrganizationRateListDocument = `
    query getSavingsOrganizationRateList {
  settings {
    general {
      deposit {
        listOrganizationRate {
          data {
            id
            rate
            effectiveDate
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingsOrganizationRateListQuery = <
  TData = GetSavingsOrganizationRateListQuery,
  TError = unknown
>(
  variables?: GetSavingsOrganizationRateListQueryVariables,
  options?: UseQueryOptions<GetSavingsOrganizationRateListQuery, TError, TData>
) =>
  useQuery<GetSavingsOrganizationRateListQuery, TError, TData>(
    variables === undefined
      ? ['getSavingsOrganizationRateList']
      : ['getSavingsOrganizationRateList', variables],
    useAxios<GetSavingsOrganizationRateListQuery, GetSavingsOrganizationRateListQueryVariables>(
      GetSavingsOrganizationRateListDocument
    ).bind(null, variables),
    options
  );
export const GetSavingsOrganizationRateDetailDocument = `
    query getSavingsOrganizationRateDetail($id: ID!) {
  settings {
    general {
      deposit {
        getOrganizationRate(id: $id) {
          data {
            id
            rate
            effectiveDate
            fileUploads {
              identifier
              url
            }
            note
            createdAt
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingsOrganizationRateDetailQuery = <
  TData = GetSavingsOrganizationRateDetailQuery,
  TError = unknown
>(
  variables: GetSavingsOrganizationRateDetailQueryVariables,
  options?: UseQueryOptions<GetSavingsOrganizationRateDetailQuery, TError, TData>
) =>
  useQuery<GetSavingsOrganizationRateDetailQuery, TError, TData>(
    ['getSavingsOrganizationRateDetail', variables],
    useAxios<GetSavingsOrganizationRateDetailQuery, GetSavingsOrganizationRateDetailQueryVariables>(
      GetSavingsOrganizationRateDetailDocument
    ).bind(null, variables),
    options
  );
export const GetCurrentOrganizationRateDocument = `
    query getCurrentOrganizationRate {
  settings {
    general {
      deposit {
        getCurrentOrganizationRate
      }
    }
  }
}
    `;
export const useGetCurrentOrganizationRateQuery = <
  TData = GetCurrentOrganizationRateQuery,
  TError = unknown
>(
  variables?: GetCurrentOrganizationRateQueryVariables,
  options?: UseQueryOptions<GetCurrentOrganizationRateQuery, TError, TData>
) =>
  useQuery<GetCurrentOrganizationRateQuery, TError, TData>(
    variables === undefined
      ? ['getCurrentOrganizationRate']
      : ['getCurrentOrganizationRate', variables],
    useAxios<GetCurrentOrganizationRateQuery, GetCurrentOrganizationRateQueryVariables>(
      GetCurrentOrganizationRateDocument
    ).bind(null, variables),
    options
  );
export const GetDepositProductSettingsListDocument = `
    query getDepositProductSettingsList($paginate: Pagination, $filter: DepositProductSearchFilter) {
  settings {
    general {
      depositProduct {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              productCode
              productName
              nature
              interest
              interest
              createdDate
              typeOfMember
              createdAt
              createdBy {
                id
                name
                username
                userType
              }
              modifiedAt
              modifiedBy {
                id
                name
                username
                userType
              }
            }
          }
          totalCount
        }
      }
    }
  }
}
    `;
export const useGetDepositProductSettingsListQuery = <
  TData = GetDepositProductSettingsListQuery,
  TError = unknown
>(
  variables?: GetDepositProductSettingsListQueryVariables,
  options?: UseQueryOptions<GetDepositProductSettingsListQuery, TError, TData>
) =>
  useQuery<GetDepositProductSettingsListQuery, TError, TData>(
    variables === undefined
      ? ['getDepositProductSettingsList']
      : ['getDepositProductSettingsList', variables],
    useAxios<GetDepositProductSettingsListQuery, GetDepositProductSettingsListQueryVariables>(
      GetDepositProductSettingsListDocument
    ).bind(null, variables),
    options
  );
export const GetDepositProductSettingsEditDataDocument = `
    query getDepositProductSettingsEditData($id: ID!) {
  settings {
    general {
      depositProduct {
        formState(id: $id) {
          data {
            productName
            nature
            productCode {
              prefix
              initialNo
              noOfDigits
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            transactionAllowed
            noOftransactionAllowed
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isForMinors
            depositAmount {
              minAmount
              maxAmount
            }
            withdrawAmountLimit {
              minAmount
              maxAmount
            }
            fixedDepositAmountLimit {
              minAmount
              maxAmount
            }
            depositFrequency
            penalty
            penaltyData {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate
            rebateData {
              dayBeforeInstallmentDate
              noOfInstallment
              rebateAmount
              rebateRate
              rebateLedgerMapping
            }
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            balanceLimit {
              minAmount
              maxAmount
            }
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              additionalRate
            }
            ladderRate
            ladderRateData {
              type
              amount
              rate
            }
            postingFrequency
            maxPostingFreqDifference
            accountType
            serviceCharge {
              serviceName
              ledgerName
              amount
            }
            accountCloseCharge {
              serviceName
              ledgerName
              amount
            }
            chequeCharge {
              serviceName
              ledgerName
              amount
            }
            atmCharge {
              serviceName
              ledgerName
              amount
            }
            alternativeChannelCharge {
              serviceName
              ledgerName
              amount
            }
            dormantSetup {
              duration
              condition
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            isMandatorySaving
            autoOpen
            allowLoan
            percentageOfDeposit
            alternativeChannels
            atmFacility
            chequeIssue
            supportMultiple
            staffProduct
            withdrawRestricted
            specifyWithdrawRestriction
            wealthBuildingProduct
            individualDocuments
            institutionDocuments
            isPrematurePenaltyApplicable
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositProductSettingsEditDataQuery = <
  TData = GetDepositProductSettingsEditDataQuery,
  TError = unknown
>(
  variables: GetDepositProductSettingsEditDataQueryVariables,
  options?: UseQueryOptions<GetDepositProductSettingsEditDataQuery, TError, TData>
) =>
  useQuery<GetDepositProductSettingsEditDataQuery, TError, TData>(
    ['getDepositProductSettingsEditData', variables],
    useAxios<
      GetDepositProductSettingsEditDataQuery,
      GetDepositProductSettingsEditDataQueryVariables
    >(GetDepositProductSettingsEditDataDocument).bind(null, variables),
    options
  );
export const GetSavingsProductDetailDocument = `
    query getSavingsProductDetail($id: ID!) {
  settings {
    general {
      depositProduct {
        depositProductDetail(id: $id) {
          data {
            id
            noOfAccounts
            noOfDormantAccounts
            noOfInactiveAccounts
            noOfMembers
            objState
            supportMultiple
            productName
            nature
            productCode {
              prefix
              initialNo
              noOfDigits
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            transactionAllowed
            noOftransactionAllowed
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isForMinors
            depositAmount {
              minAmount
              maxAmount
            }
            withdrawAmountLimit {
              minAmount
              maxAmount
            }
            fixedDepositAmountLimit {
              minAmount
              maxAmount
            }
            depositFrequency
            penalty
            penaltyData {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate
            rebateData {
              dayBeforeInstallmentDate
              noOfInstallment
              rebateAmount
              rebateRate
              rebateLedgerMapping
            }
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            balanceLimit {
              minAmount
              maxAmount
            }
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              additionalRate
              changeMin
              changeMax
            }
            ladderRate
            ladderRateData {
              type
              amount
              rate
            }
            postingFrequency
            maxPostingFreqDifference
            accountType
            serviceCharge {
              serviceName
              ledgerName
              amount
            }
            accountCloseCharge {
              serviceName
              ledgerName
              amount
            }
            chequeCharge {
              serviceName
              ledgerName
              amount
            }
            atmCharge {
              serviceName
              ledgerName
              amount
            }
            alternativeChannelCharge {
              serviceName
              ledgerName
              amount
            }
            dormantSetup {
              duration
              condition
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            isMandatorySaving
            autoOpen
            allowLoan
            percentageOfDeposit
            alternativeChannels
            atmFacility
            chequeIssue
            supportMultiple
            staffProduct
            withdrawRestricted
            specifyWithdrawRestriction
            wealthBuildingProduct
            individualDocuments
            institutionDocuments
            isPrematurePenaltyApplicable
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            savingCharges {
              serviceName
              ledgerName
              amount
            }
            productPremiumInterest
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingsProductDetailQuery = <
  TData = GetSavingsProductDetailQuery,
  TError = unknown
>(
  variables: GetSavingsProductDetailQueryVariables,
  options?: UseQueryOptions<GetSavingsProductDetailQuery, TError, TData>
) =>
  useQuery<GetSavingsProductDetailQuery, TError, TData>(
    ['getSavingsProductDetail', variables],
    useAxios<GetSavingsProductDetailQuery, GetSavingsProductDetailQueryVariables>(
      GetSavingsProductDetailDocument
    ).bind(null, variables),
    options
  );
export const GetSavingsProductCriteriaDocument = `
    query getSavingsProductCriteria($productId: ID!) {
  settings {
    general {
      depositProduct {
        getProductCriteria(productId: $productId) {
          data {
            gender
            minAge
            maxAge
            ethnicity
            educationQualification
            maritalStatus
            foreignEmployment
            occupation
            institutionType
            cooperativeUnion
            cooperativeType
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingsProductCriteriaQuery = <
  TData = GetSavingsProductCriteriaQuery,
  TError = unknown
>(
  variables: GetSavingsProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetSavingsProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetSavingsProductCriteriaQuery, TError, TData>(
    ['getSavingsProductCriteria', variables],
    useAxios<GetSavingsProductCriteriaQuery, GetSavingsProductCriteriaQueryVariables>(
      GetSavingsProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetSavingsAccountListDocument = `
    query getSavingsAccountList($paginate: Pagination, $filter: Filter) {
  settings {
    general {
      depositProduct {
        getAccountlist(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              closedAt
              accountName
              member {
                code
                type
                name
                profilePicUrl
              }
              balance
              interestAccured
              interestTax
              prematurePenalty
              lastTransactionDate
              accountOpenedDate
              installmentAmount
              product {
                productCode
                productName
                nature
              }
              accountExpiryDate
              overDrawnBalance
              guaranteedAmount
              dues {
                fine
                totalDue
                dueInstallments
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingsAccountListQuery = <TData = GetSavingsAccountListQuery, TError = unknown>(
  variables?: GetSavingsAccountListQueryVariables,
  options?: UseQueryOptions<GetSavingsAccountListQuery, TError, TData>
) =>
  useQuery<GetSavingsAccountListQuery, TError, TData>(
    variables === undefined ? ['getSavingsAccountList'] : ['getSavingsAccountList', variables],
    useAxios<GetSavingsAccountListQuery, GetSavingsAccountListQueryVariables>(
      GetSavingsAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetSavingProductInterestRateListDocument = `
    query getSavingProductInterestRateList($productId: ID!) {
  settings {
    general {
      depositProduct {
        listProductInterestRates(productId: $productId) {
          data {
            id
            rate
            effectiveDate
            createdAt
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingProductInterestRateListQuery = <
  TData = GetSavingProductInterestRateListQuery,
  TError = unknown
>(
  variables: GetSavingProductInterestRateListQueryVariables,
  options?: UseQueryOptions<GetSavingProductInterestRateListQuery, TError, TData>
) =>
  useQuery<GetSavingProductInterestRateListQuery, TError, TData>(
    ['getSavingProductInterestRateList', variables],
    useAxios<GetSavingProductInterestRateListQuery, GetSavingProductInterestRateListQueryVariables>(
      GetSavingProductInterestRateListDocument
    ).bind(null, variables),
    options
  );
export const GetSavingProductInterestRateDetailDocument = `
    query getSavingProductInterestRateDetail($id: ID!, $productId: ID!) {
  settings {
    general {
      depositProduct {
        getProductInterestRate(id: $id, productId: $productId) {
          data {
            id
            rate
            effectiveDate
            fileUploads {
              identifier
              url
            }
            note
            createdAt
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingProductInterestRateDetailQuery = <
  TData = GetSavingProductInterestRateDetailQuery,
  TError = unknown
>(
  variables: GetSavingProductInterestRateDetailQueryVariables,
  options?: UseQueryOptions<GetSavingProductInterestRateDetailQuery, TError, TData>
) =>
  useQuery<GetSavingProductInterestRateDetailQuery, TError, TData>(
    ['getSavingProductInterestRateDetail', variables],
    useAxios<
      GetSavingProductInterestRateDetailQuery,
      GetSavingProductInterestRateDetailQueryVariables
    >(GetSavingProductInterestRateDetailDocument).bind(null, variables),
    options
  );
export const GetSavingProductPenaltyUpdateListDocument = `
    query getSavingProductPenaltyUpdateList($productId: ID!) {
  settings {
    general {
      depositProduct {
        listPenaltyCharge(productId: $productId) {
          data {
            payload {
              penaltyRate
              penaltyAmount
            }
            additionalData {
              id
              createdAt
              effectiveDate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingProductPenaltyUpdateListQuery = <
  TData = GetSavingProductPenaltyUpdateListQuery,
  TError = unknown
>(
  variables: GetSavingProductPenaltyUpdateListQueryVariables,
  options?: UseQueryOptions<GetSavingProductPenaltyUpdateListQuery, TError, TData>
) =>
  useQuery<GetSavingProductPenaltyUpdateListQuery, TError, TData>(
    ['getSavingProductPenaltyUpdateList', variables],
    useAxios<
      GetSavingProductPenaltyUpdateListQuery,
      GetSavingProductPenaltyUpdateListQueryVariables
    >(GetSavingProductPenaltyUpdateListDocument).bind(null, variables),
    options
  );
export const GetSavingProductPenaltyChargeDetailDocument = `
    query getSavingProductPenaltyChargeDetail($id: ID!) {
  settings {
    general {
      depositProduct {
        getPenaltyCharge(id: $id) {
          data {
            payload {
              penaltyRate
              penaltyAmount
              dayAfterInstallmentDate
            }
            additionalData {
              id
              createdAt
              effectiveDate
              fileUploads {
                identifier
                url
              }
              notes
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetSavingProductPenaltyChargeDetailQuery = <
  TData = GetSavingProductPenaltyChargeDetailQuery,
  TError = unknown
>(
  variables: GetSavingProductPenaltyChargeDetailQueryVariables,
  options?: UseQueryOptions<GetSavingProductPenaltyChargeDetailQuery, TError, TData>
) =>
  useQuery<GetSavingProductPenaltyChargeDetailQuery, TError, TData>(
    ['getSavingProductPenaltyChargeDetail', variables],
    useAxios<
      GetSavingProductPenaltyChargeDetailQuery,
      GetSavingProductPenaltyChargeDetailQueryVariables
    >(GetSavingProductPenaltyChargeDetailDocument).bind(null, variables),
    options
  );
export const GetOpenChargeListDocument = `
    query getOpenChargeList($productId: ID!) {
  settings {
    general {
      depositProduct {
        listOpenCharge(productId: $productId) {
          data {
            payload {
              serviceName
              ledgerName
              amount
              percentage
            }
            additionalData {
              id
              createdAt
              effectiveDate
              fileUploads {
                identifier
                url
              }
              notes
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetOpenChargeListQuery = <TData = GetOpenChargeListQuery, TError = unknown>(
  variables: GetOpenChargeListQueryVariables,
  options?: UseQueryOptions<GetOpenChargeListQuery, TError, TData>
) =>
  useQuery<GetOpenChargeListQuery, TError, TData>(
    ['getOpenChargeList', variables],
    useAxios<GetOpenChargeListQuery, GetOpenChargeListQueryVariables>(
      GetOpenChargeListDocument
    ).bind(null, variables),
    options
  );
export const GetCloseChargeListDocument = `
    query getCloseChargeList($productId: ID!) {
  settings {
    general {
      depositProduct {
        listCloseCharge(productId: $productId) {
          data {
            payload {
              serviceName
              ledgerName
              amount
              percentage
            }
            additionalData {
              id
              createdAt
              effectiveDate
              fileUploads {
                identifier
                url
              }
              notes
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetCloseChargeListQuery = <TData = GetCloseChargeListQuery, TError = unknown>(
  variables: GetCloseChargeListQueryVariables,
  options?: UseQueryOptions<GetCloseChargeListQuery, TError, TData>
) =>
  useQuery<GetCloseChargeListQuery, TError, TData>(
    ['getCloseChargeList', variables],
    useAxios<GetCloseChargeListQuery, GetCloseChargeListQueryVariables>(
      GetCloseChargeListDocument
    ).bind(null, variables),
    options
  );
export const GetOpenChargeDocument = `
    query getOpenCharge($id: ID!) {
  settings {
    general {
      depositProduct {
        getOpenCharge(id: $id) {
          data {
            payload {
              serviceName
              ledgerName
              amount
              percentage
            }
            additionalData {
              id
              createdAt
              effectiveDate
              fileUploads {
                identifier
                url
              }
              notes
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetOpenChargeQuery = <TData = GetOpenChargeQuery, TError = unknown>(
  variables: GetOpenChargeQueryVariables,
  options?: UseQueryOptions<GetOpenChargeQuery, TError, TData>
) =>
  useQuery<GetOpenChargeQuery, TError, TData>(
    ['getOpenCharge', variables],
    useAxios<GetOpenChargeQuery, GetOpenChargeQueryVariables>(GetOpenChargeDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetCloseChargeDocument = `
    query getCloseCharge($id: ID!) {
  settings {
    general {
      depositProduct {
        getCloseCharge(id: $id) {
          data {
            payload {
              serviceName
              ledgerName
              amount
              percentage
            }
            additionalData {
              id
              createdAt
              effectiveDate
              fileUploads {
                identifier
                url
              }
              notes
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetCloseChargeQuery = <TData = GetCloseChargeQuery, TError = unknown>(
  variables: GetCloseChargeQueryVariables,
  options?: UseQueryOptions<GetCloseChargeQuery, TError, TData>
) =>
  useQuery<GetCloseChargeQuery, TError, TData>(
    ['getCloseCharge', variables],
    useAxios<GetCloseChargeQuery, GetCloseChargeQueryVariables>(GetCloseChargeDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetSettingsOptionsFieldsDocument = `
    query getSettingsOptionsFields($searchTerm: FormFieldSearchTerm!, $category: FormCategory!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: $category}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetSettingsOptionsFieldsQuery = <
  TData = GetSettingsOptionsFieldsQuery,
  TError = unknown
>(
  variables: GetSettingsOptionsFieldsQueryVariables,
  options?: UseQueryOptions<GetSettingsOptionsFieldsQuery, TError, TData>
) =>
  useQuery<GetSettingsOptionsFieldsQuery, TError, TData>(
    ['getSettingsOptionsFields', variables],
    useAxios<GetSettingsOptionsFieldsQuery, GetSettingsOptionsFieldsQueryVariables>(
      GetSettingsOptionsFieldsDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareBonusDataDocument = `
    query getSettingsShareBonusData {
  settings {
    general {
      share {
        bonus {
          taxPayer
          taxRate
          accountMapping
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareBonusDataQuery = <
  TData = GetSettingsShareBonusDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareBonusDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareBonusDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareBonusDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareBonusData']
      : ['getSettingsShareBonusData', variables],
    useAxios<GetSettingsShareBonusDataQuery, GetSettingsShareBonusDataQueryVariables>(
      GetSettingsShareBonusDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareDividendDataDocument = `
    query getSettingsShareDividendData {
  settings {
    general {
      share {
        dividend {
          distributionCondition
          dividendRate {
            quarterly {
              firstQuarter
              secondQuarter
              thirdQuarter
              fourthQuarter
            }
            monthly {
              firstMonth
              secondMonth
              thirdMonth
              fourthMonth
              fifthMonth
              sixthMonth
              seventhMonth
              eightMonth
              ninthMonth
              tenthMonth
              eleventhMonth
              twelfthMonth
            }
          }
          dividendTransferTreatment
          accountForFractionalDividends
          accountForShareDividends
          organizationFundForDividends
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareDividendDataQuery = <
  TData = GetSettingsShareDividendDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareDividendDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareDividendDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareDividendDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareDividendData']
      : ['getSettingsShareDividendData', variables],
    useAxios<GetSettingsShareDividendDataQuery, GetSettingsShareDividendDataQueryVariables>(
      GetSettingsShareDividendDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareIssueChargesDataDocument = `
    query getSettingsShareIssueChargesData {
  settings {
    general {
      share {
        shareIssueCharges {
          shareCertificate {
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
          other {
            name
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareIssueChargesDataQuery = <
  TData = GetSettingsShareIssueChargesDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareIssueChargesDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareIssueChargesDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareIssueChargesDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareIssueChargesData']
      : ['getSettingsShareIssueChargesData', variables],
    useAxios<GetSettingsShareIssueChargesDataQuery, GetSettingsShareIssueChargesDataQueryVariables>(
      GetSettingsShareIssueChargesDataDocument
    ).bind(null, variables),
    options
  );
export const GetLedgerMapingShareDocument = `
    query getLedgerMapingShare {
  settings {
    general {
      chartsOfAccount {
        accountsUnder(accountCode: "160.8") {
          data {
            id
            accountCode
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetLedgerMapingShareQuery = <TData = GetLedgerMapingShareQuery, TError = unknown>(
  variables?: GetLedgerMapingShareQueryVariables,
  options?: UseQueryOptions<GetLedgerMapingShareQuery, TError, TData>
) =>
  useQuery<GetLedgerMapingShareQuery, TError, TData>(
    variables === undefined ? ['getLedgerMapingShare'] : ['getLedgerMapingShare', variables],
    useAxios<GetLedgerMapingShareQuery, GetLedgerMapingShareQueryVariables>(
      GetLedgerMapingShareDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareReturnChargesDataDocument = `
    query getSettingsShareReturnChargesData {
  settings {
    general {
      share {
        shareReturnCharges {
          other {
            name
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareReturnChargesDataQuery = <
  TData = GetSettingsShareReturnChargesDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareReturnChargesDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareReturnChargesDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareReturnChargesDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareReturnChargesData']
      : ['getSettingsShareReturnChargesData', variables],
    useAxios<
      GetSettingsShareReturnChargesDataQuery,
      GetSettingsShareReturnChargesDataQueryVariables
    >(GetSettingsShareReturnChargesDataDocument).bind(null, variables),
    options
  );
export const GetSettingsShareGeneralDataDocument = `
    query getSettingsShareGeneralData {
  settings {
    general {
      share {
        general {
          typeOfShare
          multiplicityFactor
          minimumQuantityOfShare
          maximumQuantityOfShare
          paidUpShareRate
          shareIssueAuthority
          typeOfShareKitta
          noOfAuthorisedPaidUpShare
          noOfIssuedShare
          startNumber
          endNumber
          incrementor
          noOfDigits
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareGeneralDataQuery = <
  TData = GetSettingsShareGeneralDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareGeneralDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareGeneralDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareGeneralDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareGeneralData']
      : ['getSettingsShareGeneralData', variables],
    useAxios<GetSettingsShareGeneralDataQuery, GetSettingsShareGeneralDataQueryVariables>(
      GetSettingsShareGeneralDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareTransferDataDocument = `
    query getSettingsShareTransferData {
  settings {
    general {
      share {
        transfer {
          type
          accountForShareFund
          mappedShareLedger
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareTransferDataQuery = <
  TData = GetSettingsShareTransferDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareTransferDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareTransferDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareTransferDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareTransferData']
      : ['getSettingsShareTransferData', variables],
    useAxios<GetSettingsShareTransferDataQuery, GetSettingsShareTransferDataQueryVariables>(
      GetSettingsShareTransferDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsUserListDataDocument = `
    query getSettingsUserListData($paginate: Pagination, $filter: Filter) {
  settings {
    myraUser {
      list(paginate: $paginate, filter: $filter) {
        totalCount
        edges {
          node {
            id
            objState
            createdAt
            modifiedAt
            name
            email
            contactNo
            gender
            dob
            empCode
            linkedBranches {
              id
              branchCode
              name
            }
            role {
              id
              name
            }
            branch {
              id
              name
            }
            profilePicUrl
            lastActiveDate
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetSettingsUserListDataQuery = <
  TData = GetSettingsUserListDataQuery,
  TError = unknown
>(
  variables?: GetSettingsUserListDataQueryVariables,
  options?: UseQueryOptions<GetSettingsUserListDataQuery, TError, TData>
) =>
  useQuery<GetSettingsUserListDataQuery, TError, TData>(
    variables === undefined ? ['getSettingsUserListData'] : ['getSettingsUserListData', variables],
    useAxios<GetSettingsUserListDataQuery, GetSettingsUserListDataQueryVariables>(
      GetSettingsUserListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsUserEditDataDocument = `
    query getSettingsUserEditData($id: ID!) {
  settings {
    myraUser {
      formState(id: $id) {
        data {
          name
          email
          contactNo
          gender
          dob
          empCode
          isCoreEmployee
          role
          branch
          identificationSelection
          identificationDetails {
            id
            idNo
            idType
            place
            date
          }
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isTempAsPermanentAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          landlordName
          landlordContact
          profilePicture {
            identifier
            url
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsUserEditDataQuery = <
  TData = GetSettingsUserEditDataQuery,
  TError = unknown
>(
  variables: GetSettingsUserEditDataQueryVariables,
  options?: UseQueryOptions<GetSettingsUserEditDataQuery, TError, TData>
) =>
  useQuery<GetSettingsUserEditDataQuery, TError, TData>(
    ['getSettingsUserEditData', variables],
    useAxios<GetSettingsUserEditDataQuery, GetSettingsUserEditDataQueryVariables>(
      GetSettingsUserEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetUserRolesDocument = `
    query getUserRoles {
  settings {
    allRoles {
      id
      name
    }
  }
}
    `;
export const useGetUserRolesQuery = <TData = GetUserRolesQuery, TError = unknown>(
  variables?: GetUserRolesQueryVariables,
  options?: UseQueryOptions<GetUserRolesQuery, TError, TData>
) =>
  useQuery<GetUserRolesQuery, TError, TData>(
    variables === undefined ? ['getUserRoles'] : ['getUserRoles', variables],
    useAxios<GetUserRolesQuery, GetUserRolesQueryVariables>(GetUserRolesDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetTellerListDocument = `
    query getTellerList {
  settings {
    myraUser {
      tellers {
        id
        name
      }
    }
  }
}
    `;
export const useGetTellerListQuery = <TData = GetTellerListQuery, TError = unknown>(
  variables?: GetTellerListQueryVariables,
  options?: UseQueryOptions<GetTellerListQuery, TError, TData>
) =>
  useQuery<GetTellerListQuery, TError, TData>(
    variables === undefined ? ['getTellerList'] : ['getTellerList', variables],
    useAxios<GetTellerListQuery, GetTellerListQueryVariables>(GetTellerListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetSettingsUserDetailsDataDocument = `
    query getSettingsUserDetailsData($userID: ID!) {
  settings {
    myraUser {
      userDetail(userID: $userID) {
        basicInfo {
          name
          profilePicUrl
          userId
        }
        userOverview {
          rolesCount
          serviceCenterCount
          lastActiveDate
          name
          isCoreEmployee
          empCode
          gender
          contactNo
          email
          dateJoined
          role {
            id
            name
          }
          branches {
            branchCode
            id
            name
          }
        }
        userBio {
          permanentAddress {
            ...Address
          }
          isTemporarySameAsPermanent
          temporaryAddress {
            ...Address
          }
          identificationDetail {
            id
            idNo
            idType
            place
            date
          }
          landlordName
          landlordContact
          documents {
            identifier
            url
          }
        }
      }
    }
  }
}
    ${AddressFragmentDoc}`;
export const useGetSettingsUserDetailsDataQuery = <
  TData = GetSettingsUserDetailsDataQuery,
  TError = unknown
>(
  variables: GetSettingsUserDetailsDataQueryVariables,
  options?: UseQueryOptions<GetSettingsUserDetailsDataQuery, TError, TData>
) =>
  useQuery<GetSettingsUserDetailsDataQuery, TError, TData>(
    ['getSettingsUserDetailsData', variables],
    useAxios<GetSettingsUserDetailsDataQuery, GetSettingsUserDetailsDataQueryVariables>(
      GetSettingsUserDetailsDataDocument
    ).bind(null, variables),
    options
  );
export const GetValuatorDocument = `
    query getValuator($id: ID!) {
  settings {
    general {
      valuator {
        formState(id: $id) {
          data {
            valuatorName
            valuatorType
            valuatorId
            academicQualification
            valuationLicenseNo
            renewalDate
            contractDate
            insurancePremium
            mobileNo
            phoneNo
            email
            documents
            address {
              localGovernmentId
              districtId
              provinceId
              houseNo
              locality
              wardNo
              coordinates {
                longitude
                latitude
              }
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetValuatorQuery = <TData = GetValuatorQuery, TError = unknown>(
  variables: GetValuatorQueryVariables,
  options?: UseQueryOptions<GetValuatorQuery, TError, TData>
) =>
  useQuery<GetValuatorQuery, TError, TData>(
    ['getValuator', variables],
    useAxios<GetValuatorQuery, GetValuatorQueryVariables>(GetValuatorDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetValuatorListDocument = `
    query getValuatorList($paginate: Pagination) {
  settings {
    general {
      valuator {
        list(paginate: $paginate) {
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          totalCount
          edges {
            node {
              id
              valuatorName
              valuatorType
              address {
                localGovernment
                district
                houseNo
                locality
                state
                wardNo
              }
              phoneNo
              contractDate
            }
            cursor
          }
        }
      }
    }
  }
}
    `;
export const useGetValuatorListQuery = <TData = GetValuatorListQuery, TError = unknown>(
  variables?: GetValuatorListQueryVariables,
  options?: UseQueryOptions<GetValuatorListQuery, TError, TData>
) =>
  useQuery<GetValuatorListQuery, TError, TData>(
    variables === undefined ? ['getValuatorList'] : ['getValuatorList', variables],
    useAxios<GetValuatorListQuery, GetValuatorListQueryVariables>(GetValuatorListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetChartOfAccountsDocument = `
    query getChartOfAccounts {
  settings {
    general {
      chartsOfAccount {
        class {
          data {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetChartOfAccountsQuery = <TData = GetChartOfAccountsQuery, TError = unknown>(
  variables?: GetChartOfAccountsQueryVariables,
  options?: UseQueryOptions<GetChartOfAccountsQuery, TError, TData>
) =>
  useQuery<GetChartOfAccountsQuery, TError, TData>(
    variables === undefined ? ['getChartOfAccounts'] : ['getChartOfAccounts', variables],
    useAxios<GetChartOfAccountsQuery, GetChartOfAccountsQueryVariables>(
      GetChartOfAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetShareBalanceListDocument = `
    query getShareBalanceList($pagination: Pagination, $filter: Filter) {
  share {
    balance(pagination: $pagination, filter: $filter) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      edges {
        node {
          member {
            id
            code
            name
            profilePic
            profilePicUrl
          }
          count
          amount
        }
      }
    }
  }
}
    `;
export const useGetShareBalanceListQuery = <TData = GetShareBalanceListQuery, TError = unknown>(
  variables?: GetShareBalanceListQueryVariables,
  options?: UseQueryOptions<GetShareBalanceListQuery, TError, TData>
) =>
  useQuery<GetShareBalanceListQuery, TError, TData>(
    variables === undefined ? ['getShareBalanceList'] : ['getShareBalanceList', variables],
    useAxios<GetShareBalanceListQuery, GetShareBalanceListQueryVariables>(
      GetShareBalanceListDocument
    ).bind(null, variables),
    options
  );
export const GetShareRegisterListDocument = `
    query getShareRegisterList($pagination: Pagination, $filter: Filter) {
  share {
    register(pagination: $pagination, filter: $filter) {
      edges {
        node {
          id
          transactionDate
          transactionDirection
          member {
            id
            code
            name
            profilePic
            profilePicUrl
          }
          balance
          startNumber
          shareAmount
          endNumber
          credit
          debit
        }
        cursor
      }
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetShareRegisterListQuery = <TData = GetShareRegisterListQuery, TError = unknown>(
  variables?: GetShareRegisterListQueryVariables,
  options?: UseQueryOptions<GetShareRegisterListQuery, TError, TData>
) =>
  useQuery<GetShareRegisterListQuery, TError, TData>(
    variables === undefined ? ['getShareRegisterList'] : ['getShareRegisterList', variables],
    useAxios<GetShareRegisterListQuery, GetShareRegisterListQueryVariables>(
      GetShareRegisterListDocument
    ).bind(null, variables),
    options
  );
export const GetShareHistoryDocument = `
    query getShareHistory($memberId: ID!) {
  share {
    history(memberId: $memberId) {
      history {
        id
        member {
          id
          name
          code
        }
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        balance
        shareAmount
        extraFee {
          name
          value
        }
        totalAmount
        paymentMode
        bankId
        voucherNumber
        accountId
      }
      balance {
        member {
          id
          name
        }
        count
        amount
      }
    }
  }
}
    `;
export const useGetShareHistoryQuery = <TData = GetShareHistoryQuery, TError = unknown>(
  variables: GetShareHistoryQueryVariables,
  options?: UseQueryOptions<GetShareHistoryQuery, TError, TData>
) =>
  useQuery<GetShareHistoryQuery, TError, TData>(
    ['getShareHistory', variables],
    useAxios<GetShareHistoryQuery, GetShareHistoryQueryVariables>(GetShareHistoryDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareChargesDocument = `
    query getShareCharges($transactionType: SHARE_TRANSACTION_DIRECTION!, $shareCount: Int!) {
  share {
    charges(transactionType: $transactionType, shareCount: $shareCount) {
      id
      name
      charge
    }
  }
}
    `;
export const useGetShareChargesQuery = <TData = GetShareChargesQuery, TError = unknown>(
  variables: GetShareChargesQueryVariables,
  options?: UseQueryOptions<GetShareChargesQuery, TError, TData>
) =>
  useQuery<GetShareChargesQuery, TError, TData>(
    ['getShareCharges', variables],
    useAxios<GetShareChargesQuery, GetShareChargesQueryVariables>(GetShareChargesDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareDetailDocument = `
    query getShareDetail($transactionID: ID!) {
  share {
    shareDetail(transactionID: $transactionID) {
      data {
        id
        member {
          id
          name
          code
          type
          profilePicUrl
        }
        totalShareCount
        totalShareAmount
        date
        type
        fromTo {
          start
          end
        }
        noOfShare
        amount
        total
        status
        charges {
          name
          value
        }
        paymentDetail {
          paymentMode
          amount
          sourceOfFund
          depositedDate
        }
        transactionCode
        paymentFile
        transactionBranch
        teller
        glTransactions {
          ledgerId
          account
          serviceCentreId
          serviceCenter
          debit
          credit
          balance
          balanceType
        }
        totalCredit
        totalDebit
        note
      }
    }
  }
}
    `;
export const useGetShareDetailQuery = <TData = GetShareDetailQuery, TError = unknown>(
  variables: GetShareDetailQueryVariables,
  options?: UseQueryOptions<GetShareDetailQuery, TError, TData>
) =>
  useQuery<GetShareDetailQuery, TError, TData>(
    ['getShareDetail', variables],
    useAxios<GetShareDetailQuery, GetShareDetailQueryVariables>(GetShareDetailDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareFilterMappingDocument = `
    query getShareFilterMapping {
  share {
    filterMapping {
      status {
        label
        value
      }
      transactionDirection {
        label
        value
      }
    }
  }
}
    `;
export const useGetShareFilterMappingQuery = <TData = GetShareFilterMappingQuery, TError = unknown>(
  variables?: GetShareFilterMappingQueryVariables,
  options?: UseQueryOptions<GetShareFilterMappingQuery, TError, TData>
) =>
  useQuery<GetShareFilterMappingQuery, TError, TData>(
    variables === undefined ? ['getShareFilterMapping'] : ['getShareFilterMapping', variables],
    useAxios<GetShareFilterMappingQuery, GetShareFilterMappingQueryVariables>(
      GetShareFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const GetDepositListDataDocument = `
    query getDepositListData($filter: Filter, $pagination: Pagination) {
  transaction {
    listDeposit(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          transactionCode
          name
          amount
          state
          paymentMode
          processedBy
          date
          agentName
          agentId
          profilePicUrl
          agentPicUrl
          branchName
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetDepositListDataQuery = <TData = GetDepositListDataQuery, TError = unknown>(
  variables?: GetDepositListDataQueryVariables,
  options?: UseQueryOptions<GetDepositListDataQuery, TError, TData>
) =>
  useQuery<GetDepositListDataQuery, TError, TData>(
    variables === undefined ? ['getDepositListData'] : ['getDepositListData', variables],
    useAxios<GetDepositListDataQuery, GetDepositListDataQueryVariables>(
      GetDepositListDataDocument
    ).bind(null, variables),
    options
  );
export const GetWithdrawListDataDocument = `
    query getWithdrawListData($filter: Filter, $pagination: Pagination) {
  transaction {
    listWithdraw(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          transactionCode
          name
          amount
          state
          paymentMode
          processedBy
          date
          profilePicUrl
          branchName
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetWithdrawListDataQuery = <TData = GetWithdrawListDataQuery, TError = unknown>(
  variables?: GetWithdrawListDataQueryVariables,
  options?: UseQueryOptions<GetWithdrawListDataQuery, TError, TData>
) =>
  useQuery<GetWithdrawListDataQuery, TError, TData>(
    variables === undefined ? ['getWithdrawListData'] : ['getWithdrawListData', variables],
    useAxios<GetWithdrawListDataQuery, GetWithdrawListDataQueryVariables>(
      GetWithdrawListDataDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTransferListDataDocument = `
    query getAccountTransferListData($filter: Filter, $pagination: Pagination) {
  transaction {
    listTransfer(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          transactionCode
          amount
          state
          transferType
          date
          branchName
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAccountTransferListDataQuery = <
  TData = GetAccountTransferListDataQuery,
  TError = unknown
>(
  variables?: GetAccountTransferListDataQueryVariables,
  options?: UseQueryOptions<GetAccountTransferListDataQuery, TError, TData>
) =>
  useQuery<GetAccountTransferListDataQuery, TError, TData>(
    variables === undefined
      ? ['getAccountTransferListData']
      : ['getAccountTransferListData', variables],
    useAxios<GetAccountTransferListDataQuery, GetAccountTransferListDataQueryVariables>(
      GetAccountTransferListDataDocument
    ).bind(null, variables),
    options
  );
export const GetEndOfDayDateDataDocument = `
    query getEndOfDayDateData {
  transaction {
    endOfDayDate {
      value
      isYearEnd
      hasErrors
      isInitialized
      headOfficeReady
    }
  }
}
    `;
export const useGetEndOfDayDateDataQuery = <TData = GetEndOfDayDateDataQuery, TError = unknown>(
  variables?: GetEndOfDayDateDataQueryVariables,
  options?: UseQueryOptions<GetEndOfDayDateDataQuery, TError, TData>
) =>
  useQuery<GetEndOfDayDateDataQuery, TError, TData>(
    variables === undefined ? ['getEndOfDayDateData'] : ['getEndOfDayDateData', variables],
    useAxios<GetEndOfDayDateDataQuery, GetEndOfDayDateDataQueryVariables>(
      GetEndOfDayDateDataDocument
    ).bind(null, variables),
    options
  );
export const GetTellerTransactionListDataDocument = `
    query getTellerTransactionListData($filter: Filter, $pagination: Pagination) {
  transaction {
    listTellerTransaction(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          transferCode
          transferType
          transferState
          srcTeller
          amount
          destTeller
          date
          srcProfilePic
          destProfilePic
          srcProfilePicUrl
          destProfilePicUrl
          destBranch
          srcBranch
          denomination {
            value
            quantity
            amount
          }
          transactionBranchName
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetTellerTransactionListDataQuery = <
  TData = GetTellerTransactionListDataQuery,
  TError = unknown
>(
  variables?: GetTellerTransactionListDataQueryVariables,
  options?: UseQueryOptions<GetTellerTransactionListDataQuery, TError, TData>
) =>
  useQuery<GetTellerTransactionListDataQuery, TError, TData>(
    variables === undefined
      ? ['getTellerTransactionListData']
      : ['getTellerTransactionListData', variables],
    useAxios<GetTellerTransactionListDataQuery, GetTellerTransactionListDataQueryVariables>(
      GetTellerTransactionListDataDocument
    ).bind(null, variables),
    options
  );
export const TransactionDepositDetailDocument = `
    query transactionDepositDetail($transactionId: ID!) {
  transaction {
    viewDeposit(transactionId: $transactionId) {
      data {
        id
        transactionCode
        member {
          id
          code
          objState
          code
          type
          name
          contact
          profilePic
          profilePicUrl
        }
        transactionDate
        accountId
        accountName
        voucherId
        amount
        fine
        rebate
        totalDepositedAmount
        status
        paymentMode
        sourceOfFund
        depositedBy
        depositedDate
        paymentFile
        transactionBranch
        teller
        glTransaction {
          account
          debit
          credit
          serviceCenter
          ledgerId
          balance
          balanceType
        }
        totalDebit
        totalCredit
        note
        txnUserName
      }
    }
  }
}
    `;
export const useTransactionDepositDetailQuery = <
  TData = TransactionDepositDetailQuery,
  TError = unknown
>(
  variables: TransactionDepositDetailQueryVariables,
  options?: UseQueryOptions<TransactionDepositDetailQuery, TError, TData>
) =>
  useQuery<TransactionDepositDetailQuery, TError, TData>(
    ['transactionDepositDetail', variables],
    useAxios<TransactionDepositDetailQuery, TransactionDepositDetailQueryVariables>(
      TransactionDepositDetailDocument
    ).bind(null, variables),
    options
  );
export const TransactionWithdrawDetailDocument = `
    query transactionWithdrawDetail($transactionId: ID!) {
  transaction {
    viewWithdraw(transactionId: $transactionId) {
      data {
        id
        member {
          id
          code
          name
          profilePic
          profilePicUrl
        }
        transactionDate
        transactionCode
        accountId
        accountName
        chequeNo
        withdrawAmount
        withdrawWith
        fine
        totalWithdrawnAmount
        status
        paymentMode
        paymentFile
        withdrawnBy
        marketRepId
        marketRepName
        transactionBranch
        teller
        glTransaction {
          account
          debit
          credit
          serviceCenter
          ledgerId
          balance
          balanceType
        }
        totalDebit
        totalCredit
        note
        txnUserName
      }
    }
  }
}
    `;
export const useTransactionWithdrawDetailQuery = <
  TData = TransactionWithdrawDetailQuery,
  TError = unknown
>(
  variables: TransactionWithdrawDetailQueryVariables,
  options?: UseQueryOptions<TransactionWithdrawDetailQuery, TError, TData>
) =>
  useQuery<TransactionWithdrawDetailQuery, TError, TData>(
    ['transactionWithdrawDetail', variables],
    useAxios<TransactionWithdrawDetailQuery, TransactionWithdrawDetailQueryVariables>(
      TransactionWithdrawDetailDocument
    ).bind(null, variables),
    options
  );
export const TransactionAccountTransferDetailDocument = `
    query transactionAccountTransferDetail($transactionId: ID!) {
  transaction {
    viewAccountTransfer(transactionId: $transactionId) {
      data {
        id
        member {
          id
          name
          code
          profilePic
          profilePicUrl
        }
        transactionCode
        transactionDate
        transferAmount
        sourceAccount {
          id
          accountName
        }
        destinationAccount {
          id
          accountName
        }
        transferType
        recipientMember {
          id
          name
        }
        withdrawnBy
        withdrawnSlipNo
        transactionBranch
        objState
        transactionBranch
        teller
        glTransaction {
          account
          debit
          credit
          serviceCenter
          ledgerId
          balance
          balanceType
        }
        totalDebit
        totalCredit
        note
      }
    }
  }
}
    `;
export const useTransactionAccountTransferDetailQuery = <
  TData = TransactionAccountTransferDetailQuery,
  TError = unknown
>(
  variables: TransactionAccountTransferDetailQueryVariables,
  options?: UseQueryOptions<TransactionAccountTransferDetailQuery, TError, TData>
) =>
  useQuery<TransactionAccountTransferDetailQuery, TError, TData>(
    ['transactionAccountTransferDetail', variables],
    useAxios<TransactionAccountTransferDetailQuery, TransactionAccountTransferDetailQueryVariables>(
      TransactionAccountTransferDetailDocument
    ).bind(null, variables),
    options
  );
export const LoanRepaymentDetailDocument = `
    query loanRepaymentDetail($paymentId: ID!) {
  transaction {
    viewLoanRepayment(paymentId: $paymentId) {
      data {
        repaymentId
        member {
          id
          code
          name
          profilePicUrl
        }
        transactionCode
        loanSubType
        loanAccountId
        loanAccountName
        repaymentDate
        installmentNo
        installmentAmount
        fine
        rebate
        totalRepaymentAmount
        objState
        installmentDetails {
          installmentNo
          payment
          principalAmount
          interestAmount
        }
        paymentMode
        depositedBy
        depositedDate
        transactionBranch
        teller
        glTransaction {
          account
          debit
          credit
          serviceCenter
          ledgerId
          balance
          balanceType
        }
        totalDebit
        totalCredit
        note
        discount
        discountDocs {
          id
          url
        }
      }
    }
  }
}
    `;
export const useLoanRepaymentDetailQuery = <TData = LoanRepaymentDetailQuery, TError = unknown>(
  variables: LoanRepaymentDetailQueryVariables,
  options?: UseQueryOptions<LoanRepaymentDetailQuery, TError, TData>
) =>
  useQuery<LoanRepaymentDetailQuery, TError, TData>(
    ['loanRepaymentDetail', variables],
    useAxios<LoanRepaymentDetailQuery, LoanRepaymentDetailQueryVariables>(
      LoanRepaymentDetailDocument
    ).bind(null, variables),
    options
  );
export const GetEodStatusDocument = `
    query getEODStatus {
  transaction {
    eodStatus {
      stage
      overAllStatus
      eodDate
      states {
        currentBranchesReady
        interestBooking
        interestPosting
        transactionDate
        maturity
        dormancy
        cashInHand
        cashInVault
        loanInterestBooking
        loanRepayment
      }
      errors {
        readiness
        interestBooking
        interestPosting
        maturity
        dormancy
        cashInHand
        cashInVault
        loanInterestBooking
        loanRepayment
      }
    }
  }
}
    `;
export const useGetEodStatusQuery = <TData = GetEodStatusQuery, TError = unknown>(
  variables?: GetEodStatusQueryVariables,
  options?: UseQueryOptions<GetEodStatusQuery, TError, TData>
) =>
  useQuery<GetEodStatusQuery, TError, TData>(
    variables === undefined ? ['getEODStatus'] : ['getEODStatus', variables],
    useAxios<GetEodStatusQuery, GetEodStatusQueryVariables>(GetEodStatusDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllTransactionsListDocument = `
    query getAllTransactionsList($filter: Filter, $pagination: Pagination) {
  transaction {
    listAllTransactions(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          transactionType
          narration
          amount
          date
          branchName
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAllTransactionsListQuery = <
  TData = GetAllTransactionsListQuery,
  TError = unknown
>(
  variables?: GetAllTransactionsListQueryVariables,
  options?: UseQueryOptions<GetAllTransactionsListQuery, TError, TData>
) =>
  useQuery<GetAllTransactionsListQuery, TError, TData>(
    variables === undefined ? ['getAllTransactionsList'] : ['getAllTransactionsList', variables],
    useAxios<GetAllTransactionsListQuery, GetAllTransactionsListQueryVariables>(
      GetAllTransactionsListDocument
    ).bind(null, variables),
    options
  );
export const GetAllTransactionsDetailDocument = `
    query getAllTransactionsDetail($id: ID!, $txnType: AllTransactionType) {
  transaction {
    viewTransactionDetail(transactionId: $id, txnType: $txnType) {
      data {
        id
        user
        member {
          id
          code
          name
          profilePicUrl
        }
        transactionDate
        txnType
        transactionMode
        amount
        branch
        note
        status
        glTransaction {
          account
          serviceCenter
          debit
          credit
          ledgerId
          balance
          balanceType
        }
        totalDebit
        totalCredit
      }
    }
  }
}
    `;
export const useGetAllTransactionsDetailQuery = <
  TData = GetAllTransactionsDetailQuery,
  TError = unknown
>(
  variables: GetAllTransactionsDetailQueryVariables,
  options?: UseQueryOptions<GetAllTransactionsDetailQuery, TError, TData>
) =>
  useQuery<GetAllTransactionsDetailQuery, TError, TData>(
    ['getAllTransactionsDetail', variables],
    useAxios<GetAllTransactionsDetailQuery, GetAllTransactionsDetailQueryVariables>(
      GetAllTransactionsDetailDocument
    ).bind(null, variables),
    options
  );
export const GetStrTransactionDetailDocument = `
    query getSTRTransactionDetail($transactionId: ID!) {
  transaction {
    strTransactionDetail(transactionId: $transactionId) {
      data {
        memberType
        strStatus
        bio {
          memberName
          profilePic
          memberCode
          memberJoined
          dob
          gender
          mobile
          email
          currentAddress
          permanentAddress
          maritalStatus
          profession
          nationality
          familyMembers {
            relationship
            fullName
            dob
          }
          identificationDetail {
            id
            identificationNo
            idType
            place
            date
            additionalFields {
              id
              fieldId
              value
            }
          }
          docs {
            key
            value
          }
        }
        strAccountDetails {
          id
          natureOfAccount
          natureOfOwnership
          nameOfDirector
          accountOpenDate
        }
        savingAccounts {
          id
          accountName
          product {
            nature
          }
          balance
        }
        transactionDetails {
          accountNo
          year
          drTransactionNo
          drTransactionAmount
          crTransactionNo
          crTransactionAmount
          closingBalance
        }
        deposits {
          id
          date
          transactionCode
          depositer
          amount
          remarks
        }
        withdraw {
          id
          date
          transactionCode
          depositer
          amount
          remarks
        }
        loanAccount {
          id
          LoanAccountName
          product {
            id
            productName
          }
          totalSanctionedAmount
          remainingBalance
          remainingInterestTillDate
        }
        strReason
        strTopology
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetStrTransactionDetailQuery = <
  TData = GetStrTransactionDetailQuery,
  TError = unknown
>(
  variables: GetStrTransactionDetailQueryVariables,
  options?: UseQueryOptions<GetStrTransactionDetailQuery, TError, TData>
) =>
  useQuery<GetStrTransactionDetailQuery, TError, TData>(
    ['getSTRTransactionDetail', variables],
    useAxios<GetStrTransactionDetailQuery, GetStrTransactionDetailQueryVariables>(
      GetStrTransactionDetailDocument
    ).bind(null, variables),
    options
  );
export const EodHistoryDocument = `
    query eodHistory($transactionDate: Localized) {
  endOfDay {
    history(transactionDate: $transactionDate) {
      eodDate
      status
      completedTime
      errorCount
      completedBy
    }
  }
}
    `;
export const useEodHistoryQuery = <TData = EodHistoryQuery, TError = unknown>(
  variables?: EodHistoryQueryVariables,
  options?: UseQueryOptions<EodHistoryQuery, TError, TData>
) =>
  useQuery<EodHistoryQuery, TError, TData>(
    variables === undefined ? ['eodHistory'] : ['eodHistory', variables],
    useAxios<EodHistoryQuery, EodHistoryQueryVariables>(EodHistoryDocument).bind(null, variables),
    options
  );
export const EodHistoryDetailsDocument = `
    query eodHistoryDetails($pagination: Pagination, $filter: EODDetailsFilter!) {
  endOfDay {
    details(pagination: $pagination, filter: $filter) {
      edges {
        node {
          id
          jobType
          success
          accountNumber
          narration
          payload
        }
        cursor
      }
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useEodHistoryDetailsQuery = <TData = EodHistoryDetailsQuery, TError = unknown>(
  variables: EodHistoryDetailsQueryVariables,
  options?: UseQueryOptions<EodHistoryDetailsQuery, TError, TData>
) =>
  useQuery<EodHistoryDetailsQuery, TError, TData>(
    ['eodHistoryDetails', variables],
    useAxios<EodHistoryDetailsQuery, EodHistoryDetailsQueryVariables>(
      EodHistoryDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetDepositFilterMappingDocument = `
    query getDepositFilterMapping {
  transaction {
    filterMapping {
      deposit {
        depositedBy {
          ...OptionType
        }
        paymentMode {
          ...OptionType
        }
      }
    }
  }
}
    ${OptionTypeFragmentDoc}`;
export const useGetDepositFilterMappingQuery = <
  TData = GetDepositFilterMappingQuery,
  TError = unknown
>(
  variables?: GetDepositFilterMappingQueryVariables,
  options?: UseQueryOptions<GetDepositFilterMappingQuery, TError, TData>
) =>
  useQuery<GetDepositFilterMappingQuery, TError, TData>(
    variables === undefined ? ['getDepositFilterMapping'] : ['getDepositFilterMapping', variables],
    useAxios<GetDepositFilterMappingQuery, GetDepositFilterMappingQueryVariables>(
      GetDepositFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const GetWithdrawFilterMappingDocument = `
    query getWithdrawFilterMapping {
  transaction {
    filterMapping {
      withdraw {
        paymentMode {
          ...OptionType
        }
      }
    }
  }
}
    ${OptionTypeFragmentDoc}`;
export const useGetWithdrawFilterMappingQuery = <
  TData = GetWithdrawFilterMappingQuery,
  TError = unknown
>(
  variables?: GetWithdrawFilterMappingQueryVariables,
  options?: UseQueryOptions<GetWithdrawFilterMappingQuery, TError, TData>
) =>
  useQuery<GetWithdrawFilterMappingQuery, TError, TData>(
    variables === undefined
      ? ['getWithdrawFilterMapping']
      : ['getWithdrawFilterMapping', variables],
    useAxios<GetWithdrawFilterMappingQuery, GetWithdrawFilterMappingQueryVariables>(
      GetWithdrawFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTransferFilterMappingDocument = `
    query getAccountTransferFilterMapping {
  transaction {
    filterMapping {
      transfer {
        type {
          ...OptionType
        }
      }
    }
  }
}
    ${OptionTypeFragmentDoc}`;
export const useGetAccountTransferFilterMappingQuery = <
  TData = GetAccountTransferFilterMappingQuery,
  TError = unknown
>(
  variables?: GetAccountTransferFilterMappingQueryVariables,
  options?: UseQueryOptions<GetAccountTransferFilterMappingQuery, TError, TData>
) =>
  useQuery<GetAccountTransferFilterMappingQuery, TError, TData>(
    variables === undefined
      ? ['getAccountTransferFilterMapping']
      : ['getAccountTransferFilterMapping', variables],
    useAxios<GetAccountTransferFilterMappingQuery, GetAccountTransferFilterMappingQueryVariables>(
      GetAccountTransferFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const GetAgentFilterMappingDocument = `
    query getAgentFilterMapping {
  transaction {
    filterMapping {
      agent {
        branchId {
          ...OptionType
        }
      }
    }
  }
}
    ${OptionTypeFragmentDoc}`;
export const useGetAgentFilterMappingQuery = <TData = GetAgentFilterMappingQuery, TError = unknown>(
  variables?: GetAgentFilterMappingQueryVariables,
  options?: UseQueryOptions<GetAgentFilterMappingQuery, TError, TData>
) =>
  useQuery<GetAgentFilterMappingQuery, TError, TData>(
    variables === undefined ? ['getAgentFilterMapping'] : ['getAgentFilterMapping', variables],
    useAxios<GetAgentFilterMappingQuery, GetAgentFilterMappingQueryVariables>(
      GetAgentFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const GetAllTransactionFilterMappingDocument = `
    query getAllTransactionFilterMapping {
  transaction {
    filterMapping {
      allTransaction {
        branchId {
          ...OptionType
        }
        txnType {
          ...OptionType
        }
      }
    }
  }
}
    ${OptionTypeFragmentDoc}`;
export const useGetAllTransactionFilterMappingQuery = <
  TData = GetAllTransactionFilterMappingQuery,
  TError = unknown
>(
  variables?: GetAllTransactionFilterMappingQueryVariables,
  options?: UseQueryOptions<GetAllTransactionFilterMappingQuery, TError, TData>
) =>
  useQuery<GetAllTransactionFilterMappingQuery, TError, TData>(
    variables === undefined
      ? ['getAllTransactionFilterMapping']
      : ['getAllTransactionFilterMapping', variables],
    useAxios<GetAllTransactionFilterMappingQuery, GetAllTransactionFilterMappingQueryVariables>(
      GetAllTransactionFilterMappingDocument
    ).bind(null, variables),
    options
  );
export const BulkTransfersListDocument = `
    query bulkTransfersList($filter: Filter, $pagination: Pagination) {
  transaction {
    listBulkTransfers(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          transferType
          transferDate
          transferAmount
          totalTransferAmount
          sourceId
          sourceName
          destinationId
          destinationName
          transactionId
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useBulkTransfersListQuery = <TData = BulkTransfersListQuery, TError = unknown>(
  variables?: BulkTransfersListQueryVariables,
  options?: UseQueryOptions<BulkTransfersListQuery, TError, TData>
) =>
  useQuery<BulkTransfersListQuery, TError, TData>(
    variables === undefined ? ['bulkTransfersList'] : ['bulkTransfersList', variables],
    useAxios<BulkTransfersListQuery, BulkTransfersListQueryVariables>(
      BulkTransfersListDocument
    ).bind(null, variables),
    options
  );
export const GetTagKhataReportDocument = `
    query getTagKhataReport($data: TagKhataReportFilter!) {
  report {
    transactionReport {
      financial {
        tagKhataReport(data: $data) {
          data {
            tagId
            tagName
            openingBalance
            drAmount
            crAmount
            netBalance
            closingBalance
            ledgers {
              ledgerId
              ledgerName
              openingBalance
              drAmount
              crAmount
              netBalance
              closingBalance
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetTagKhataReportQuery = <TData = GetTagKhataReportQuery, TError = unknown>(
  variables: GetTagKhataReportQueryVariables,
  options?: UseQueryOptions<GetTagKhataReportQuery, TError, TData>
) =>
  useQuery<GetTagKhataReportQuery, TError, TData>(
    ['getTagKhataReport', variables],
    useAxios<GetTagKhataReportQuery, GetTagKhataReportQueryVariables>(
      GetTagKhataReportDocument
    ).bind(null, variables),
    options
  );
export const YearEndLedgerAccountListDocument = `
    query yearEndLedgerAccountList {
  transaction {
    yearEnd {
      getCurrentState {
        data {
          expenseEntries {
            ledgerId
            ledgerName
            branchId
            branchName
            balance {
              amount
              amountType
            }
          }
          totalExpense {
            amount
            amountType
          }
          incomeEntries {
            ledgerId
            ledgerName
            branchId
            branchName
            balance {
              amount
              amountType
            }
          }
          totalIncome {
            amount
            amountType
          }
        }
      }
    }
  }
}
    `;
export const useYearEndLedgerAccountListQuery = <
  TData = YearEndLedgerAccountListQuery,
  TError = unknown
>(
  variables?: YearEndLedgerAccountListQueryVariables,
  options?: UseQueryOptions<YearEndLedgerAccountListQuery, TError, TData>
) =>
  useQuery<YearEndLedgerAccountListQuery, TError, TData>(
    variables === undefined
      ? ['yearEndLedgerAccountList']
      : ['yearEndLedgerAccountList', variables],
    useAxios<YearEndLedgerAccountListQuery, YearEndLedgerAccountListQueryVariables>(
      YearEndLedgerAccountListDocument
    ).bind(null, variables),
    options
  );
export const GetTransferDetailDocument = `
    query getTransferDetail($transferID: ID!) {
  transaction {
    transferDetail(transferID: $transferID) {
      data {
        ID
        transferCode
        transferType
        transferState
        srcTeller
        amount
        totalBalance
        destTeller
        date
        srcBranch
        destBranch
        srcProfilePic
        srcProfilePicUrl
        note
        glTransaction {
          ledgerId
          account
          serviceCentreId
          serviceCenter
          debit
          credit
          balance
          balanceType
        }
        totalCredit
        totalDebit
        note
      }
    }
  }
}
    `;
export const useGetTransferDetailQuery = <TData = GetTransferDetailQuery, TError = unknown>(
  variables: GetTransferDetailQueryVariables,
  options?: UseQueryOptions<GetTransferDetailQuery, TError, TData>
) =>
  useQuery<GetTransferDetailQuery, TError, TData>(
    ['getTransferDetail', variables],
    useAxios<GetTransferDetailQuery, GetTransferDetailQueryVariables>(
      GetTransferDetailDocument
    ).bind(null, variables),
    options
  );
export const GetCashInTransitListDocument = `
    query getCashInTransitList($filter: Filter, $pagination: Pagination) {
  transaction {
    cashInTransit(filter: $filter, pagination: $pagination) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      edges {
        cursor
        node {
          id
          transactionCode
          senderServiceCentreId
          senderServiceCentreName
          receiverServiceCentreId
          receiverServiceCentreName
          senderTellerName
          senderTellerId
          approvalStatus
          cashAmount
          transferDate
          denomination {
            value
            quantity
            amount
          }
        }
      }
    }
  }
}
    `;
export const useGetCashInTransitListQuery = <TData = GetCashInTransitListQuery, TError = unknown>(
  variables?: GetCashInTransitListQueryVariables,
  options?: UseQueryOptions<GetCashInTransitListQuery, TError, TData>
) =>
  useQuery<GetCashInTransitListQuery, TError, TData>(
    variables === undefined ? ['getCashInTransitList'] : ['getCashInTransitList', variables],
    useAxios<GetCashInTransitListQuery, GetCashInTransitListQueryVariables>(
      GetCashInTransitListDocument
    ).bind(null, variables),
    options
  );
export const GetCashInTransitDetailDocument = `
    query getCashInTransitDetail($transitID: ID!) {
  transaction {
    cashInTransitDetail(transitID: $transitID) {
      data {
        ID
        note
        transitStatus
        srcTeller
        amount
        totalBalance
        transferMode
        collectorName
        destTeller
        date
        srcBranch
        destBranch
        srcProfilePic
        srcProfilePicUrl
        glTransaction {
          account
          serviceCenter
          debit
          credit
          balance
          balanceType
        }
        totalCredit
        totalDebit
        note
      }
    }
  }
}
    `;
export const useGetCashInTransitDetailQuery = <
  TData = GetCashInTransitDetailQuery,
  TError = unknown
>(
  variables: GetCashInTransitDetailQueryVariables,
  options?: UseQueryOptions<GetCashInTransitDetailQuery, TError, TData>
) =>
  useQuery<GetCashInTransitDetailQuery, TError, TData>(
    ['getCashInTransitDetail', variables],
    useAxios<GetCashInTransitDetailQuery, GetCashInTransitDetailQueryVariables>(
      GetCashInTransitDetailDocument
    ).bind(null, variables),
    options
  );
export const GetServiceCenterTransferListDocument = `
    query getServiceCenterTransferList($filter: Filter, $pagination: Pagination) {
  transaction {
    listServiceCenterCashTransfer(filter: $filter, pagination: $pagination) {
      totalCount
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      edges {
        node {
          id
          journalId
          sender
          senderId
          receiver
          amount
          transactionDate
          ibtAccount
          ibtCr
          ibtDr
          ibtAccountName
          status
        }
        cursor
      }
    }
  }
}
    `;
export const useGetServiceCenterTransferListQuery = <
  TData = GetServiceCenterTransferListQuery,
  TError = unknown
>(
  variables?: GetServiceCenterTransferListQueryVariables,
  options?: UseQueryOptions<GetServiceCenterTransferListQuery, TError, TData>
) =>
  useQuery<GetServiceCenterTransferListQuery, TError, TData>(
    variables === undefined
      ? ['getServiceCenterTransferList']
      : ['getServiceCenterTransferList', variables],
    useAxios<GetServiceCenterTransferListQuery, GetServiceCenterTransferListQueryVariables>(
      GetServiceCenterTransferListDocument
    ).bind(null, variables),
    options
  );
export const GetBankTransferListDocument = `
    query getBankTransferList($filter: Filter, $pagination: Pagination) {
  transaction {
    tellerBankTransfer {
      list(filter: $filter, pagination: $pagination) {
        totalCount
        edges {
          node {
            id
            transactionId
            transactionDate
            tellerName
            transferType
            amount
            transactionBranchName
          }
          cursor
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
      }
    }
  }
}
    `;
export const useGetBankTransferListQuery = <TData = GetBankTransferListQuery, TError = unknown>(
  variables?: GetBankTransferListQueryVariables,
  options?: UseQueryOptions<GetBankTransferListQuery, TError, TData>
) =>
  useQuery<GetBankTransferListQuery, TError, TData>(
    variables === undefined ? ['getBankTransferList'] : ['getBankTransferList', variables],
    useAxios<GetBankTransferListQuery, GetBankTransferListQueryVariables>(
      GetBankTransferListDocument
    ).bind(null, variables),
    options
  );
export const GetTellerBankDetailsDocument = `
    query getTellerBankDetails($transactionId: ID!) {
  transaction {
    tellerBankTransfer {
      viewDetail(transactionId: $transactionId) {
        data {
          id
          transactionId
          transactionDate
          transferType
          profilePic
          amount
          tellerName
          bankName
          bankTransferType
          status
          glTransaction {
            ledgerId
            account
            serviceCentreId
            serviceCenter
            debit
            credit
            balance
            balanceType
          }
          totalDebit
          totalCredit
          note
        }
      }
    }
  }
}
    `;
export const useGetTellerBankDetailsQuery = <TData = GetTellerBankDetailsQuery, TError = unknown>(
  variables: GetTellerBankDetailsQueryVariables,
  options?: UseQueryOptions<GetTellerBankDetailsQuery, TError, TData>
) =>
  useQuery<GetTellerBankDetailsQuery, TError, TData>(
    ['getTellerBankDetails', variables],
    useAxios<GetTellerBankDetailsQuery, GetTellerBankDetailsQueryVariables>(
      GetTellerBankDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetInterServiceCenterTransferDetailDocument = `
    query getInterServiceCenterTransferDetail($entryID: ID!) {
  transaction {
    viewServiceCenterCashTransfer(entryID: $entryID) {
      data {
        id
        transactionID
        userName
        userProfileUrl
        senderServiceCenter
        reveiverServiceCenter
        transferDate
        amount
        status
        srcLedgerInfo {
          ledgerId
          ledgerName
          dr
          cr
          balance
          balanceType
        }
        totalSenderCr
        totalSenderDr
        destinationBranchInfo {
          branchId
          branchName
          dr
          cr
        }
        totalServiceCenterCr
        totalServiceCenterDr
        glTransaction {
          ledgerId
          account
          serviceCentreId
          serviceCenter
          debit
          credit
          balance
          balanceType
        }
        totalDebit
        totalCredit
        note
      }
    }
  }
}
    `;
export const useGetInterServiceCenterTransferDetailQuery = <
  TData = GetInterServiceCenterTransferDetailQuery,
  TError = unknown
>(
  variables: GetInterServiceCenterTransferDetailQueryVariables,
  options?: UseQueryOptions<GetInterServiceCenterTransferDetailQuery, TError, TData>
) =>
  useQuery<GetInterServiceCenterTransferDetailQuery, TError, TData>(
    ['getInterServiceCenterTransferDetail', variables],
    useAxios<
      GetInterServiceCenterTransferDetailQuery,
      GetInterServiceCenterTransferDetailQueryVariables
    >(GetInterServiceCenterTransferDetailDocument).bind(null, variables),
    options
  );
export const GetPastSlipsListDocument = `
    query getPastSlipsList($accountId: ID!) {
  withdrawSlip {
    listPastSlips(accountId: $accountId) {
      data {
        slipNumber
        state
        date
      }
    }
  }
}
    `;
export const useGetPastSlipsListQuery = <TData = GetPastSlipsListQuery, TError = unknown>(
  variables: GetPastSlipsListQueryVariables,
  options?: UseQueryOptions<GetPastSlipsListQuery, TError, TData>
) =>
  useQuery<GetPastSlipsListQuery, TError, TData>(
    ['getPastSlipsList', variables],
    useAxios<GetPastSlipsListQuery, GetPastSlipsListQueryVariables>(GetPastSlipsListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAvailableSlipsListDocument = `
    query getAvailableSlipsList($accountId: ID!) {
  withdrawSlip {
    listAvailableSlips(accountId: $accountId) {
      data {
        slipNumber
        state
        date
      }
    }
  }
}
    `;
export const useGetAvailableSlipsListQuery = <TData = GetAvailableSlipsListQuery, TError = unknown>(
  variables: GetAvailableSlipsListQueryVariables,
  options?: UseQueryOptions<GetAvailableSlipsListQuery, TError, TData>
) =>
  useQuery<GetAvailableSlipsListQuery, TError, TData>(
    ['getAvailableSlipsList', variables],
    useAxios<GetAvailableSlipsListQuery, GetAvailableSlipsListQueryVariables>(
      GetAvailableSlipsListDocument
    ).bind(null, variables),
    options
  );
export const GetAvailableSlipBookRangesDocument = `
    query getAvailableSlipBookRanges($accountId: ID!) {
  withdrawSlip {
    listAvailableSlips(accountId: $accountId) {
      slipBookRanges {
        from
        to
      }
    }
  }
}
    `;
export const useGetAvailableSlipBookRangesQuery = <
  TData = GetAvailableSlipBookRangesQuery,
  TError = unknown
>(
  variables: GetAvailableSlipBookRangesQueryVariables,
  options?: UseQueryOptions<GetAvailableSlipBookRangesQuery, TError, TData>
) =>
  useQuery<GetAvailableSlipBookRangesQuery, TError, TData>(
    ['getAvailableSlipBookRanges', variables],
    useAxios<GetAvailableSlipBookRangesQuery, GetAvailableSlipBookRangesQueryVariables>(
      GetAvailableSlipBookRangesDocument
    ).bind(null, variables),
    options
  );
export const GetAvailableRangeDocument = `
    query getAvailableRange($count: Int!) {
  withdrawSlip {
    getAvailableRange(count: $count) {
      range {
        from
        to
      }
    }
  }
}
    `;
export const useGetAvailableRangeQuery = <TData = GetAvailableRangeQuery, TError = unknown>(
  variables: GetAvailableRangeQueryVariables,
  options?: UseQueryOptions<GetAvailableRangeQuery, TError, TData>
) =>
  useQuery<GetAvailableRangeQuery, TError, TData>(
    ['getAvailableRange', variables],
    useAxios<GetAvailableRangeQuery, GetAvailableRangeQueryVariables>(
      GetAvailableRangeDocument
    ).bind(null, variables),
    options
  );
export const GetWithdrawSlipDataDocument = `
    query getWithdrawSlipData($requestID: ID!) {
  withdrawSlip {
    getWithdrawSlipData(requestID: $requestID) {
      data {
        id
        member {
          id
          name
          code
        }
        account {
          id
          accountName
          productName
        }
        noOfLeaves
        availableRange {
          from
          to
        }
      }
    }
  }
}
    `;
export const useGetWithdrawSlipDataQuery = <TData = GetWithdrawSlipDataQuery, TError = unknown>(
  variables: GetWithdrawSlipDataQueryVariables,
  options?: UseQueryOptions<GetWithdrawSlipDataQuery, TError, TData>
) =>
  useQuery<GetWithdrawSlipDataQuery, TError, TData>(
    ['getWithdrawSlipData', variables],
    useAxios<GetWithdrawSlipDataQuery, GetWithdrawSlipDataQueryVariables>(
      GetWithdrawSlipDataDocument
    ).bind(null, variables),
    options
  );
