/* eslint-disable */
//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from 'react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Amount: any;
  Any: unknown;
  Cursor: string;
  Date: string;
  Email: any;
  HTML: any;
  InvalidData: Record<string, Array<string>>;
  Localized: Record<'local' | 'en' | 'np', string>;
  Map: Record<string, string>;
  Time: string;
};

export enum Account_Type {
  Loan = 'LOAN',
  Saving = 'SAVING',
}

export type AbbsTransaction = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  payableAccountId?: Maybe<Scalars['String']>;
  receivableAccountId?: Maybe<Scalars['String']>;
};

export type Account = {
  accountNumber: Scalars['String'];
  accountType: Account_Type;
  amount: Scalars['Float'];
  history?: Maybe<Array<AccountHistory>>;
  id: Scalars['String'];
  interestBooked: Scalars['Float'];
  interestEarned: Scalars['Float'];
  interestRate: Scalars['Float'];
  isDefault: Scalars['Boolean'];
  name: Scalars['String'];
  subscribedDate: Scalars['String'];
  transactions?: Maybe<Array<Transactions>>;
};

export type AccountActivityEntry = {
  ID: Scalars['ID'];
  agentName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  paymentMode?: Maybe<Scalars['String']>;
  processedBy?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  state: TransactionState;
};

export type AccountActivityListConnection = {
  edges?: Maybe<Array<Maybe<AccountActivityListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountActivityListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountActivityEntry>;
};

export type AccountAgent = {
  agentName?: Maybe<Scalars['String']>;
  assignedMember?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  phoneNo?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
};

export type AccountAgentListConnection = {
  edges?: Maybe<Array<Maybe<AccountAgentListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountAgentListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountAgent>;
};

export enum AccountClosePaymentMode {
  AccountTransfer = 'ACCOUNT_TRANSFER',
  BankCheque = 'BANK_CHEQUE',
  Cash = 'CASH',
}

export enum AccountCloseReason {
  Death = 'DEATH',
  Migration = 'MIGRATION',
  Other = 'OTHER',
  PersonalReason = 'PERSONAL_REASON',
}

export type AccountConnection = {
  edges: Array<AccountEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type AccountEdge = {
  cursor: Scalars['Cursor'];
  node: Account;
};

export type AccountFilter = {
  id?: InputMaybe<Scalars['String']>;
};

export type AccountHistory = {
  balance: Scalars['Float'];
  date: Scalars['String'];
  id: Scalars['String'];
};

export enum AccountOperationType {
  Joint = 'JOINT',
  Single = 'SINGLE',
}

export type AccountOperatorDetailsFormState = {
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanenetAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type AccountOperatorDetailsType = {
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanenetAddress?: Maybe<KymAddress>;
  specimenSignature?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type AccountSummary = {
  totalLoan: Scalars['Float'];
  totalSaving: Scalars['Float'];
};

export type AccountTransactionFilter = {
  depositedBy?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['String']>;
};

export type AccountTransferEntry = {
  ID: Scalars['ID'];
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  state: TransactionState;
  transferType: TransferType;
};

export type AccountTransferListConnection = {
  edges?: Maybe<Array<Maybe<AccountTransferListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AccountTransferListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AccountTransferEntry>;
};

export type AccountTransferPaymentForAccountClose = {
  depositedBy: Scalars['String'];
  depositedDate: Scalars['String'];
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type AccountTransferPaymentForAlternativeChannel = {
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type AccountTypeDetailsUnion = BankChartsOfAccount | JournalChartsOfAccount;

export type AddCoaAccountInput = {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  bankAccountNumber?: InputMaybe<Scalars['String']>;
  bankGLCode?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['ID']>;
  currency: Scalars['String'];
  isAllowFreeEntry: Scalars['Boolean'];
  isAllowTransaction: Scalars['Boolean'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  journalCode?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  openingBalance: Scalars['Float'];
  under?: InputMaybe<Scalars['ID']>;
};

export type AddChartsOfAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ChartsOfAccountSettingsQuery>;
  record?: Maybe<ChartsOfAccount>;
  recordId: Scalars['ID'];
};

export type Address = {
  coordinates?: Maybe<Coordinate>;
  district?: Maybe<Scalars['Localized']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernment?: Maybe<Scalars['Localized']>;
  locality?: Maybe<Scalars['Localized']>;
  state?: Maybe<Scalars['Localized']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AddressType = {
  permanent?: Maybe<Address>;
  temporary?: Maybe<Address>;
};

export type AdministrationQuery = {
  all: Array<Province>;
  districts: Array<Result>;
  municipalities: Array<Result>;
  provinces: Array<Result>;
  wards: Array<Scalars['Int']>;
};

export type AdministrationQueryDistrictsArgs = {
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryMunicipalitiesArgs = {
  districtId?: InputMaybe<Scalars['Int']>;
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryWardsArgs = {
  districtId: Scalars['Int'];
  municipalityId: Scalars['Int'];
  provinceId: Scalars['Int'];
};

export type AdministrativeAddress = {
  district: District;
  locality?: Maybe<Scalars['String']>;
  municipality: Municipality;
  province: Province;
  wardNo: Scalars['Int'];
};

export type AffiliatedDirectorDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  directorName?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type AffiliatedDirectorDetailsType = {
  addressOfInstitution?: Maybe<KymAddress>;
  designation?: Maybe<Scalars['String']>;
  nameOfDirector?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type AgentDetails = {
  branch?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  totalMembers?: Maybe<Scalars['Int']>;
};

export type AgentRecord = {
  data?: Maybe<AgentDetails>;
  error?: Maybe<QueryError>;
};

export type AgentTodayList = {
  account?: Maybe<DepositLoanAccount>;
  amount?: Maybe<Scalars['Amount']>;
  member?: Maybe<Member>;
  paid?: Maybe<Scalars['Boolean']>;
};

export type AgentTodayListData = {
  error?: Maybe<QueryError>;
  record?: Maybe<Array<Maybe<AgentTodayList>>>;
};

export type AgentTodayListInput = {
  account?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['Amount']>;
  member?: InputMaybe<Scalars['String']>;
  paid?: InputMaybe<Scalars['Boolean']>;
};

export type AgentTodayListResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<Array<Maybe<AgentTodayList>>>;
};

export enum AllModules {
  AccountingSystem = 'ACCOUNTING_SYSTEM',
  AlternativeChannels = 'ALTERNATIVE_CHANNELS',
  BusinessIntelligenceAndReporting = 'BUSINESS_INTELLIGENCE_AND_REPORTING',
  BusinessProcessManagement = 'BUSINESS_PROCESS_MANAGEMENT',
  CapacityAndTrainingManagement = 'CAPACITY_AND_TRAINING_MANAGEMENT',
  ComplianceManagement = 'COMPLIANCE_MANAGEMENT',
  CoreBankingSystem = 'CORE_BANKING_SYSTEM',
  DocumentManagement = 'DOCUMENT_MANAGEMENT',
  FixedAssetManagement = 'FIXED_ASSET_MANAGEMENT',
  HrManagement = 'HR_MANAGEMENT',
  InventoryManagement = 'INVENTORY_MANAGEMENT',
  MemberAndShareManagement = 'MEMBER_AND_SHARE_MANAGEMENT',
  QualityAssuranceForNefscun = 'QUALITY_ASSURANCE_FOR_NEFSCUN',
}

export type AlternativeChannelActivation = {
  coopConnection?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  lastActive?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['Localized']>;
  phoneNumber?: Maybe<Scalars['String']>;
  serviceStatus?: Maybe<AlternativeChannelStatus>;
  serviceType?: Maybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelCharges = {
  amount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  ledgerId?: Maybe<Scalars['String']>;
  serviceType?: Maybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelChargesInput = {
  amount?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  ledgerId?: InputMaybe<Scalars['String']>;
  serviceType?: InputMaybe<AlternativeChannelServiceType>;
};

export type AlternativeChannelChargesRecord = {
  data?: Maybe<Array<Maybe<AlternativeChannelCharges>>>;
  error?: Maybe<QueryError>;
};

export type AlternativeChannelChargesResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Array<Maybe<AlternativeChannelCharges>>>;
};

export type AlternativeChannelConnection = {
  edges?: Maybe<Array<Maybe<AlternativeChannelEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export enum AlternativeChannelDepositedBy {
  Others = 'OTHERS',
  Self = 'SELF',
}

export type AlternativeChannelEdge = {
  cursor: Scalars['String'];
  data?: Maybe<AlternativeChannelActivation>;
};

export type AlternativeChannelFilter = {
  serviceType?: InputMaybe<AlternativeChannelServiceType>;
  status?: InputMaybe<AlternativeChannelStatus>;
};

export type AlternativeChannelMemberActivations = {
  eBanking?: Maybe<Scalars['Boolean']>;
  mobileBanking?: Maybe<Scalars['Boolean']>;
  smsBanking?: Maybe<Scalars['Boolean']>;
};

export type AlternativeChannelMutation = {
  serviceActivation?: Maybe<AlternativeChannelServiceActivationResult>;
};

export type AlternativeChannelMutationServiceActivationArgs = {
  data?: InputMaybe<AlternativeChannelServiceActivationInput>;
};

export enum AlternativeChannelPaymentMode {
  Account = 'ACCOUNT',
  BankVoucher = 'BANK_VOUCHER',
  Cash = 'CASH',
}

export type AlternativeChannelQuery = {
  list?: Maybe<AlternativeChannelConnection>;
  memberActivations?: Maybe<AlternativeChannelMemberActivations>;
};

export type AlternativeChannelQueryListArgs = {
  filter?: InputMaybe<AlternativeChannelFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type AlternativeChannelQueryMemberActivationsArgs = {
  memberId: Scalars['String'];
};

export type AlternativeChannelServiceActivationInput = {
  accountTransfer?: InputMaybe<AccountTransferPaymentForAlternativeChannel>;
  bankCheque?: InputMaybe<BankChequePaymentForAlternativeChannel>;
  cash?: InputMaybe<DepositCash>;
  email?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  paymentMode: AlternativeChannelPaymentMode;
  phoneNumber?: InputMaybe<Scalars['String']>;
  pin?: InputMaybe<Scalars['Int']>;
  service?: InputMaybe<Array<InputMaybe<AlternativeChannelServiceType>>>;
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type AlternativeChannelServiceActivationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<AlternativeChannelQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export enum AlternativeChannelServiceType {
  Ebanking = 'EBANKING',
  MobileBanking = 'MOBILE_BANKING',
  SmsBanking = 'SMS_BANKING',
}

export type AlternativeChannelSettingsMutation = {
  feesAndCharges?: Maybe<AlternativeChannelChargesResult>;
};

export type AlternativeChannelSettingsMutationFeesAndChargesArgs = {
  data?: InputMaybe<Array<InputMaybe<AlternativeChannelChargesInput>>>;
};

export type AlternativeChannelSettingsQuery = {
  feesAndCharges?: Maybe<AlternativeChannelChargesRecord>;
};

export enum AlternativeChannelStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
}

export type AmountLimit = {
  avgAmount?: InputMaybe<Scalars['Amount']>;
  maxAmount?: InputMaybe<Scalars['Amount']>;
  minAmount?: InputMaybe<Scalars['Amount']>;
};

export type AmountLimitFormState = {
  avgAmount?: Maybe<Scalars['Amount']>;
  maxAmount?: Maybe<Scalars['Amount']>;
  minAmount?: Maybe<Scalars['Amount']>;
};

export enum Arrange {
  Asc = 'ASC',
  Desc = 'DESC',
}

export type AssignMembersInput = {
  accountId: Scalars['String'];
  memberId: Scalars['String'];
};

export type AssignedMemberList = {
  account?: Maybe<DepositLoanAccount>;
  assignedDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  member?: Maybe<Member>;
  product?: Maybe<DepositProduct>;
};

export type AssignedMemberListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<AssignedMemberList>;
};

export type AssignedMemberListFiler = {
  agentId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type AssignedMembersListConnection = {
  edges?: Maybe<Array<Maybe<AssignedMemberListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type AuditLog = {
  action?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  metaData?: Maybe<Scalars['String']>;
  objectId?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type AuditLogHumanizeResult = {
  data?: Maybe<Array<Maybe<HumanizeAuditLog>>>;
  error?: Maybe<QueryError>;
};

export type AuditLogQuery = {
  humanize?: Maybe<AuditLogResult>;
  raw?: Maybe<AuditLogResult>;
};

export type AuditLogResult = AuditLogHumanizeResult | RawAuditLog;

export type AuthMutation = {
  login?: Maybe<LoginResult>;
  token?: Maybe<AuthTokenResult>;
};

export type AuthMutationLoginArgs = {
  data: LoginInput;
};

export type AuthMutationTokenArgs = {
  refreshToken: Scalars['String'];
};

export type AuthQuery = {
  me: MeResult;
};

export type AuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type AuthTokenResult = {
  error?: Maybe<MutationError>;
  token?: Maybe<AuthToken>;
};

export type AuthorizationError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type BadRequestError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type Bank = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  logo?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
};

export type BankAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankDataQuery>;
  record: Bank;
  recordId: Scalars['ID'];
};

export type BankBranch = Base & {
  address?: Maybe<Address>;
  bankId?: Maybe<Scalars['ID']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
};

export type BankBranchAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankBranchQuery>;
  record: BankBranch;
  recordId: Scalars['ID'];
};

export type BankBranchDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankBranchQuery>;
  recordId: Scalars['ID'];
};

export type BankBranchGetResult = {
  data?: Maybe<BankBranch>;
  error?: Maybe<QueryError>;
};

export type BankBranchInput = {
  bankId?: InputMaybe<Scalars['ID']>;
  districtId?: InputMaybe<Scalars['Int']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  name?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BankBranchMutation = {
  add: BankBranchAddResult;
  delete: BankBranchDeleteResult;
};

export type BankBranchMutationAddArgs = {
  data?: InputMaybe<BankBranchInput>;
  id: Scalars['ID'];
};

export type BankBranchMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type BankBranchQuery = {
  get?: Maybe<BankBranchGetResult>;
  /** This is to get all the branches of one Bank */
  getBranches?: Maybe<Array<Maybe<BankBranch>>>;
  list?: Maybe<Array<Maybe<BankBranch>>>;
};

export type BankBranchQueryGetArgs = {
  id: Scalars['ID'];
};

export type BankBranchQueryGetBranchesArgs = {
  bankId: Scalars['ID'];
};

export type BankBranchQueryListArgs = {
  filter?: InputMaybe<BankBranchSearchFilter>;
};

export type BankBranchSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type BankChartsOfAccount = {
  bankAccountNumber: Scalars['String'];
  bankGLCode: Scalars['String'];
  bankId: Scalars['ID'];
};

export type BankChequePaymentForAccountClose = {
  amount: Scalars['String'];
  bank: Scalars['ID'];
  cheque_no: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type BankChequePaymentForAlternativeChannel = {
  bank: Scalars['ID'];
  depositedBy?: InputMaybe<AlternativeChannelDepositedBy>;
  deposited_date?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  voucher_id: Scalars['String'];
};

export type BankDataMutation = {
  add: BankAddResult;
  delete: BankDeleteResult;
};

export type BankDataMutationAddArgs = {
  data?: InputMaybe<BankInput>;
  id: Scalars['ID'];
};

export type BankDataMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type BankDataQuery = {
  get?: Maybe<BankGetResult>;
  list?: Maybe<Array<Maybe<Bank>>>;
};

export type BankDataQueryGetArgs = {
  id: Scalars['ID'];
};

export type BankDataQueryListArgs = {
  filter?: InputMaybe<BankSearchFilter>;
};

export type BankDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<BankDataQuery>;
  recordId: Scalars['ID'];
};

export type BankGetResult = {
  data?: Maybe<Bank>;
  error?: Maybe<QueryError>;
};

export type BankInput = {
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type BankMutation = {
  bank?: Maybe<BankDataMutation>;
  branch?: Maybe<BankBranchMutation>;
};

export type BankQuery = {
  bank?: Maybe<BankDataQuery>;
  branch?: Maybe<BankBranchQuery>;
};

export type BankSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type Branch = {
  abbsTransaction?: Maybe<AbbsTransaction>;
  address?: Maybe<Address>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  contactNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
};

export type BranchAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<GeneralBranchSettingsQuery>;
  record?: Maybe<Branch>;
  recordId: Scalars['ID'];
};

export enum BranchCategory {
  BranchOffice = 'BRANCH_OFFICE',
  ContactOffice = 'CONTACT_OFFICE',
  HeadOffice = 'HEAD_OFFICE',
  RegionalOffice = 'REGIONAL_OFFICE',
  ServiceCenter = 'SERVICE_CENTER',
}

export type BranchConnection = {
  edges?: Maybe<Array<BranchEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type BranchEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Branch>;
};

export type BranchFormData = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  branchCode?: Maybe<Scalars['String']>;
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  districtId?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<LocationCoordinate>;
  managerName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  payableAccountId?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  receivableAccountId?: Maybe<Scalars['String']>;
  tdsTransaferId?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type BranchGetData = {
  data?: Maybe<Array<Maybe<BranchFormData>>>;
  error?: Maybe<QueryError>;
};

export type BranchGetResult = {
  data?: Maybe<BranchFormData>;
  error?: Maybe<QueryError>;
};

export type BranchInput = {
  abbsStatus?: InputMaybe<Scalars['Boolean']>;
  branchCode?: InputMaybe<Scalars['String']>;
  branchStatus?: InputMaybe<Scalars['Boolean']>;
  category?: InputMaybe<BranchCategory>;
  districtId?: InputMaybe<Scalars['Int']>;
  email?: InputMaybe<Scalars['String']>;
  estDate?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  managerName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  payableAccountId?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  plTransferId?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  receivableAccountId?: InputMaybe<Scalars['String']>;
  tdsTransaferId?: InputMaybe<Scalars['String']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type BranchSearchFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export enum BuildingType {
  Commercial = 'COMMERCIAL',
  Industrial = 'INDUSTRIAL',
  Institutional = 'INSTITUTIONAL',
  Residential = 'RESIDENTIAL',
}

export type BulkDepositInput = {
  agentId?: InputMaybe<Scalars['String']>;
  bankVoucher?: InputMaybe<DepositBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  cheque?: InputMaybe<DepositCheque>;
  depositedBy: DepositedBy;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  entries?: InputMaybe<Array<InputMaybe<BulkDepositInstanceInput>>>;
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  other_doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  other_name?: InputMaybe<Scalars['String']>;
  payment_type: DepositPaymentType;
  sourceOfFund?: InputMaybe<Scalars['String']>;
};

export type BulkDepositInstanceInput = {
  Amount: Scalars['String'];
  accountId: Scalars['String'];
  fine?: InputMaybe<Scalars['String']>;
  noOfInstallments: Scalars['Int'];
  rebate?: InputMaybe<Scalars['String']>;
};

export type BulkDepositResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type CoaFullView = {
  data?: Maybe<Array<Maybe<CoaView>>>;
  error?: Maybe<QueryError>;
};

export type CoaMinimal = {
  accountCode: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['Localized'];
};

export type CoaMinimalResult = {
  data?: Maybe<Array<Maybe<CoaMinimal>>>;
  error?: Maybe<QueryError>;
};

export enum CoaTypesOfAccount {
  Bank = 'BANK',
  Cash = 'CASH',
  Journal = 'JOURNAL',
}

export type CoaView = {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  accountTypeDetails?: Maybe<AccountTypeDetailsUnion>;
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  createdAt: Scalars['Time'];
  creatorId: Scalars['ID'];
  currency: Scalars['String'];
  id: Scalars['ID'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifierId: Scalars['ID'];
  name: Scalars['Localized'];
  objState: ObjState;
  openingBalance: Scalars['Float'];
  under?: Maybe<Scalars['ID']>;
};

export enum CashValue {
  Cash_1 = 'CASH_1',
  Cash_2 = 'CASH_2',
  Cash_5 = 'CASH_5',
  Cash_10 = 'CASH_10',
  Cash_20 = 'CASH_20',
  Cash_25 = 'CASH_25',
  Cash_50 = 'CASH_50',
  Cash_100 = 'CASH_100',
  Cash_500 = 'CASH_500',
  Cash_1000 = 'CASH_1000',
}

export type ChartsOfAccount = Base & {
  accountClass: Scalars['String'];
  accountCode: Scalars['String'];
  accountType: CoaTypesOfAccount;
  accountTypeDetails?: Maybe<AccountTypeDetailsUnion>;
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  currency: Scalars['String'];
  id: Scalars['ID'];
  isApplicableToAllBranches: Scalars['Boolean'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  /**  can be either account or a group */
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  openingBalance: Scalars['Float'];
  under?: Maybe<Scalars['ID']>;
};

export type ChartsOfAccountClass = {
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ChartsOfAccountClassResult = {
  data: Array<ChartsOfAccountClass>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountFilter = {
  active?: InputMaybe<Scalars['Boolean']>;
  classId?: InputMaybe<Scalars['ID']>;
  hasSubAccounts?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  isLedgerAccount?: InputMaybe<Scalars['Boolean']>;
  parentId?: InputMaybe<Scalars['ID']>;
};

export type ChartsOfAccountMutation = {
  add: AddChartsOfAccountResult;
  delete: AddChartsOfAccountResult;
};

export type ChartsOfAccountMutationAddArgs = {
  data: AddCoaAccountInput;
};

export type ChartsOfAccountMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type ChartsOfAccountResult = {
  data?: Maybe<Array<ChartsOfAccount>>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountSettingsMutation = {
  account?: Maybe<ChartsOfAccountMutation>;
};

export type ChartsOfAccountSettingsQuery = {
  accounts: ChartsOfAccountResult;
  accountsUnder?: Maybe<CoaMinimalResult>;
  class?: Maybe<ChartsOfAccountClassResult>;
  fullView: CoaFullView;
};

export type ChartsOfAccountSettingsQueryAccountsArgs = {
  filter: ChartsOfAccountFilter;
};

export type ChartsOfAccountSettingsQueryAccountsUnderArgs = {
  accountCode?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ChequePastRequest = {
  branch?: Maybe<Branch>;
  chequeBlockNumber?: Maybe<Scalars['String']>;
  chequeBlockReason?: Maybe<Scalars['String']>;
  chequeRequestType?: Maybe<EBankingChequeRequestType>;
  collector?: Maybe<MyraUser>;
  createdDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  serviceStatus: EBankingActiveLoanStatus;
  status: EBankingServiceStatus;
  typeOfRequest?: Maybe<EbankingServiceRequestType>;
  withdrawAmount?: Maybe<Scalars['Amount']>;
  withdrawDate?: Maybe<Scalars['String']>;
};

export type Citizenship = {
  inNepali?: Maybe<CitizenshipInNepali>;
  issueDate?: Maybe<Scalars['String']>;
  issuePlace?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type CitizenshipInNepali = {
  issuePlace?: Maybe<Scalars['String']>;
};

export enum Collateral {
  DepositOrSaving = 'DEPOSIT_OR_SAVING',
  Documents = 'DOCUMENTS',
  Land = 'LAND',
  LandAndBuilding = 'LAND_AND_BUILDING',
  Others = 'OTHERS',
  Vehicle = 'VEHICLE',
}

export type CollateralFormState = {
  maxDV?: Maybe<Scalars['Float']>;
  maxFMV?: Maybe<Scalars['Float']>;
  maxValue?: Maybe<Scalars['Float']>;
  minDV?: Maybe<Scalars['Float']>;
  minFMV?: Maybe<Scalars['Float']>;
  minValue?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type CollateralInput = {
  maxDV?: InputMaybe<Scalars['Float']>;
  maxFMV?: InputMaybe<Scalars['Float']>;
  maxValue?: InputMaybe<Scalars['Float']>;
  minDV?: InputMaybe<Scalars['Float']>;
  minFMV?: InputMaybe<Scalars['Float']>;
  minValue?: InputMaybe<Scalars['Float']>;
  type?: InputMaybe<Scalars['String']>;
};

export type CollateralListData = {
  enabled?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  isDeleted?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
};

export type CollateralListInputData = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isDeleted?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

export enum ComparatorType {
  EqualTo = 'EqualTo',
  GreaterThan = 'GreaterThan',
  LessThan = 'LessThan',
}

export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type ConfigQuery = {
  bank?: Maybe<Bank>;
  banks?: Maybe<Array<Maybe<Bank>>>;
  countries?: Maybe<Array<Maybe<Country>>>;
  country?: Maybe<Country>;
};

export type ConfigQueryBankArgs = {
  id: Scalars['ID'];
};

export type ConfigQueryCountryArgs = {
  code: Scalars['String'];
};

export enum ConstructionType {
  ConcreteFrame = 'CONCRETE_FRAME',
  JoistedOrLoadBearingMasonry = 'JOISTED_OR_LOAD_BEARING_MASONRY',
  LightGaugeSteelFrame = 'LIGHT_GAUGE_STEEL_FRAME',
  PreEngineered = 'PRE_ENGINEERED',
  SteelFrame = 'STEEL_FRAME',
  WoodFrame = 'WOOD_FRAME',
}

export type Contact = {
  mobile?: Maybe<Scalars['String']>;
  office?: Maybe<Scalars['String']>;
  residence?: Maybe<Scalars['String']>;
};

export type ContactPerson = {
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type ContactPersonInput = {
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
};

export type CoopRelatedTraining = {
  dateOfTraining?: InputMaybe<Scalars['String']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type CoopRelatedTrainingType = {
  dateOfTraining?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CoopUnionAccountOperatorDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<KymCoopUnionAccountOperatorDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCoopUnionAccountOperatorStatus>;
  bodDetails?: Maybe<KymCoopUnionBodDetailsStatus>;
  centralRepresentativeDetails?: Maybe<KymCoopUnionCentralRepresentativeStatus>;
  declaration?: Maybe<KymCoopUnionDeclarationStatus>;
  economicDetails?: Maybe<KymCoopUnionEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCoopUnionInstitutionalInformationStatus>;
};

export type CoopUnionBodDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<KymCoopUnionBodDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionCentralRepresentativeDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<CooperativeUnionCentralRepresentativeDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionDeclarationInput = {
  documents?: InputMaybe<Array<InputMaybe<KymCoopUnionDocumentsInput>>>;
};

export type CoopUnionDeclarationResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionDeclaration>;
  recordId: Scalars['ID'];
};

export type CoopUnionEconomicDetailsInput = {
  administrativeExpense?: InputMaybe<Scalars['Float']>;
  bankCurrent?: InputMaybe<Scalars['Float']>;
  bankTarget?: InputMaybe<Scalars['Float']>;
  capitalGrantCurrent?: InputMaybe<Scalars['Float']>;
  capitalGrantTarget?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  deferredTaxExpense?: InputMaybe<Scalars['Float']>;
  directExpense?: InputMaybe<Scalars['Float']>;
  financialCost?: InputMaybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromSales?: InputMaybe<Scalars['Float']>;
  incomeFromServiceOperation?: InputMaybe<Scalars['Float']>;
  investmentsCurrent?: InputMaybe<Scalars['Float']>;
  investmentsTarget?: InputMaybe<Scalars['Float']>;
  loanAccountCurrent?: InputMaybe<Scalars['Float']>;
  loanAccountTarget?: InputMaybe<Scalars['Float']>;
  loanCurrent?: InputMaybe<Scalars['Float']>;
  loanTarget?: InputMaybe<Scalars['Float']>;
  miscellaneousIncome?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  otherIncome?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  purchase?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusTarget?: InputMaybe<Scalars['Float']>;
  riskManagementCost?: InputMaybe<Scalars['Float']>;
  savingDepositCurrent?: InputMaybe<Scalars['Float']>;
  savingDepositTarget?: InputMaybe<Scalars['Float']>;
  shareCapitalCurrent?: InputMaybe<Scalars['Float']>;
  shareCapitalTarget?: InputMaybe<Scalars['Float']>;
};

export type CoopUnionEconomicDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<CooperativeUnionEconomicDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionInstitutionInformationInput = {
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  applicantContactNo?: InputMaybe<Scalars['String']>;
  applicantDateOfMembership?: InputMaybe<Scalars['String']>;
  applicantDesignationEn?: InputMaybe<Scalars['String']>;
  applicantDesignationNp?: InputMaybe<Scalars['String']>;
  applicantEmail?: InputMaybe<Scalars['String']>;
  applicantHighestQualification?: InputMaybe<Scalars['String']>;
  applicantIsPermanentAndTemporaryAddrSame?: InputMaybe<Scalars['Boolean']>;
  applicantName?: InputMaybe<Scalars['String']>;
  applicantNameNp?: InputMaybe<Scalars['String']>;
  applicantPanNo?: InputMaybe<Scalars['String']>;
  applicantPermanentAddress?: InputMaybe<KymAddressInput>;
  applicantTemporaryAddress?: InputMaybe<KymAddressInput>;
  branchOfficeAddress?: InputMaybe<KymAddressInput>;
  contactEmail?: InputMaybe<Scalars['String']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  fax?: InputMaybe<Scalars['String']>;
  institutionType?: InputMaybe<Scalars['ID']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  lastAgmDate?: InputMaybe<Scalars['String']>;
  nameOfBank?: InputMaybe<Scalars['ID']>;
  nameOfInstitutionEn?: InputMaybe<Scalars['String']>;
  nameOfInstitutionNp?: InputMaybe<Scalars['String']>;
  natureOfBusinessEn?: InputMaybe<Scalars['String']>;
  natureOfBusinessNp?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  noOfEmployee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfInstitutionalMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfInstitutionalMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberTarget?: InputMaybe<Scalars['Int']>;
  operatingOfficeAddress?: InputMaybe<KymAddressInput>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  regdAddress?: InputMaybe<KymAddressInput>;
  regdDate?: InputMaybe<Scalars['String']>;
  regdNo?: InputMaybe<Scalars['String']>;
  vatOrPan?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type CoopUnionInstitutionInformationResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<CooperativeUnionInstitutionInformation>;
  recordId: Scalars['ID'];
};

export type CoopUnionPersonnelDetails = {
  centralRepID?: Maybe<Scalars['ID']>;
  citizenshipNo?: Maybe<Scalars['String']>;
  cooperativeUnionId?: Maybe<Scalars['ID']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designationEn?: Maybe<Scalars['String']>;
  designationNp?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNumber?: Maybe<Scalars['String']>;
  notAmongDirectors?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type CoopUnionPersonnelDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<CooperativeUnionMember>;
  record?: Maybe<CoopUnionPersonnelDetails>;
  recordId?: Maybe<Scalars['String']>;
};

export type CoopUnionPersonnelDetailsResultType = {
  data?: Maybe<CoopUnionPersonnelDetails>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type CoopUnionPersonnelInput = {
  centralRepID?: InputMaybe<Scalars['ID']>;
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['String']>;
  designationEn?: InputMaybe<Scalars['String']>;
  designationNp?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  fullNameNp?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  /**  The two fields below are only applicable for Central representative section  */
  notAmongDirectors?: InputMaybe<Scalars['Boolean']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  trainingAttended?: InputMaybe<Array<InputMaybe<CoopRelatedTraining>>>;
};

export enum CoopUnionSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  Declaration = 'DECLARATION',
  EconomicDetails = 'ECONOMIC_DETAILS',
  InstitutionInformation = 'INSTITUTION_INFORMATION',
  MemberDetails = 'MEMBER_DETAILS',
}

export type CooperativeAccountOperatorDetails = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  dateofTrainig?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<Address>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CooperativeAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCooperativeAccountOperatorStatus>;
  bodDetails?: Maybe<KymCooperativeBodDetailsStatus>;
  declaration?: Maybe<KymCooperativeDeclarationStatus>;
  economicDetails?: Maybe<KymCooperativeEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCooperativeInstitutionalInformationStatus>;
};

export type CooperativeBodDetails = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<Address>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
};

export type CooperativeConnectInput = {
  cooperativeId?: InputMaybe<Scalars['ID']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  pinCode?: InputMaybe<Scalars['Int']>;
};

export type CooperativeDeclaration = {
  accountHolderdocuments?: Maybe<Array<Maybe<CooperativeDocuments>>>;
  accountHoldersName?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<CooperativeDocuments>>>;
};

export type CooperativeDocuments = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type CooperativeEconomicDetails = {
  bank?: Maybe<Scalars['Float']>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  investments?: Maybe<Scalars['Float']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
};

export type CooperativeInformation = {
  id: Scalars['ID'];
  logoId?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type CooperativeMember = {
  accountOperatorsDetails?: Maybe<CooperativeAccountOperatorDetails>;
  boardOfDirectorsDetails?: Maybe<CooperativeBodDetails>;
  declaration?: Maybe<CooperativeDeclaration>;
  economicDetails?: Maybe<CooperativeEconomicDetails>;
  organizationInformation?: Maybe<CooperativeOrganizationInformation>;
};

export type CooperativeOrganizationInformation = {
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeTypeId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['String']>;
  lastAuditDate?: Maybe<Scalars['String']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmloyee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  operatingAddress?: Maybe<Address>;
  oprLatitude?: Maybe<Scalars['String']>;
  oprLongitude?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Address>;
  regdDate?: Maybe<Scalars['String']>;
  regdLatitude?: Maybe<Scalars['String']>;
  regdLongitude?: Maybe<Scalars['String']>;
  regdNumber?: Maybe<Scalars['Int']>;
  regdOffice?: Maybe<Scalars['String']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export type CooperativeUnionAccountOperatorDetails = {
  accountOperatorsDetails?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorDetails>>>;
};

export type CooperativeUnionBodDetails = {
  boardOfDirectorsDetails?: Maybe<Array<Maybe<KymCoopUnionBodDetails>>>;
};

export type CooperativeUnionCentralRepresentativeDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  crDecisionDocument?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  notAmongDirectors?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type CooperativeUnionDeclaration = {
  documents?: Maybe<Array<Maybe<KymCoopUnionDocuments>>>;
};

export type CooperativeUnionEconomicDetails = {
  administrativeExpense?: Maybe<Scalars['Float']>;
  bankCurrent?: Maybe<Scalars['Float']>;
  bankTarget?: Maybe<Scalars['Float']>;
  capitalGrantCurrent?: Maybe<Scalars['Float']>;
  capitalGrantTarget?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: Maybe<Scalars['Float']>;
  currentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  currentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  deferredTaxExpense?: Maybe<Scalars['Float']>;
  directExpense?: Maybe<Scalars['Float']>;
  financialCost?: Maybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromInvestment?: Maybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromSales?: Maybe<Scalars['Float']>;
  incomeFromServiceOperation?: Maybe<Scalars['Float']>;
  investmentsCurrent?: Maybe<Scalars['Float']>;
  investmentsTarget?: Maybe<Scalars['Float']>;
  loanAccountCurrent?: Maybe<Scalars['Float']>;
  loanAccountTarget?: Maybe<Scalars['Float']>;
  loanCurrent?: Maybe<Scalars['Float']>;
  loanTarget?: Maybe<Scalars['Float']>;
  miscellaneousIncome?: Maybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  otherIncome?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  purchase?: Maybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: Maybe<Scalars['Float']>;
  reserveAndSurplusTarget?: Maybe<Scalars['Float']>;
  riskManagementCost?: Maybe<Scalars['Float']>;
  savingDepositCurrent?: Maybe<Scalars['Float']>;
  savingDepositTarget?: Maybe<Scalars['Float']>;
  shareCapitalCurrent?: Maybe<Scalars['Float']>;
  shareCapitalTarget?: Maybe<Scalars['Float']>;
};

export type CooperativeUnionEconomicDetailsResult = {
  data?: Maybe<CooperativeUnionEconomicDetails>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type CooperativeUnionInstitutionInformation = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  applicantContactNo?: Maybe<Scalars['String']>;
  applicantDateOfMembership?: Maybe<Scalars['String']>;
  applicantDesignationEn?: Maybe<Scalars['String']>;
  applicantDesignationNp?: Maybe<Scalars['String']>;
  applicantEmail?: Maybe<Scalars['String']>;
  applicantHighestQualification?: Maybe<Scalars['String']>;
  applicantIsPermanentAndTemporaryAddrSame?: Maybe<Scalars['Boolean']>;
  applicantName?: Maybe<Scalars['String']>;
  applicantNameNp?: Maybe<Scalars['String']>;
  applicantPanNo?: Maybe<Scalars['String']>;
  applicantPermanentAddress?: Maybe<KymAddress>;
  applicantTemporaryAddress?: Maybe<KymAddress>;
  branchOfficeAddress?: Maybe<KymAddress>;
  contactEmail?: Maybe<Scalars['String']>;
  declarationAgreement?: Maybe<Scalars['Boolean']>;
  fax?: Maybe<Scalars['String']>;
  institutionType?: Maybe<Scalars['ID']>;
  issuingOffice?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['String']>;
  nameOfBank?: Maybe<Scalars['ID']>;
  nameOfInstitutionEn?: Maybe<Scalars['String']>;
  nameOfInstitutionNp?: Maybe<Scalars['String']>;
  natureOfBusinessEn?: Maybe<Scalars['String']>;
  natureOfBusinessNp?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  noOfEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: Maybe<Scalars['Int']>;
  noOfInstitutionalMemberCurrent?: Maybe<Scalars['Int']>;
  noOfInstitutionalMemberTarget?: Maybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfMaleMemberTarget?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<KymAddress>;
  regdDate?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  vatOrPan?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type CooperativeUnionInstitutionInformationResult = {
  data?: Maybe<CooperativeUnionInstitutionInformation>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type CooperativeUnionMember = {
  accountOperatorsDetails?: Maybe<KymCooperativeUnionPersonnelDetailsResult>;
  boardOfDirectorsDetails?: Maybe<KymCooperativeUnionPersonnelDetailsResult>;
  centralRepresentativeDetails?: Maybe<CoopUnionPersonnelDetailsResultType>;
  declaration?: Maybe<CooperativeUnionDeclaration>;
  economicDetails?: Maybe<CooperativeUnionEconomicDetailsResult>;
  id?: Maybe<Scalars['ID']>;
  institutionInformation?: Maybe<CooperativeUnionInstitutionInformationResult>;
};

export enum CooperativeUnionPersonnelSection {
  AccountOperators = 'ACCOUNT_OPERATORS',
  CentralRepresentative = 'CENTRAL_REPRESENTATIVE',
  Directors = 'DIRECTORS',
}

export type Coordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type CoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type Country = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export enum CriteriaSection {
  Age = 'AGE',
  CooperativeType = 'COOPERATIVE_TYPE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  Ethnicity = 'ETHNICITY',
  ForeignEmployment = 'FOREIGN_EMPLOYMENT',
  Gender = 'GENDER',
  MaritalStatus = 'MARITAL_STATUS',
  NatureOfBusinessCoopunion = 'NATURE_OF_BUSINESS_COOPUNION',
  NatureOfBusinessInstitutions = 'NATURE_OF_BUSINESS_INSTITUTIONS',
  OccupationDetails = 'OCCUPATION_DETAILS',
}

export type CustomFormListQueryResult = {
  data?: Maybe<Array<Maybe<FormElement>>>;
  error?: Maybe<QueryError>;
};

export type CustomFormQuery = {
  list: CustomFormListQueryResult;
};

export type CustomFormQueryListArgs = {
  filter: CustomListFilter;
};

export type CustomListFilter = {
  category: FormCategory;
};

export type CustomPeriodInput = {
  from: Scalars['String'];
  to: Scalars['String'];
};

export type CustomPeriodType = {
  from: Scalars['String'];
  to: Scalars['String'];
};

export type DashboardData = {
  listDashboardTask?: Maybe<Array<Maybe<DashboardTask>>>;
  listTodayTrend?: Maybe<Array<Maybe<TodayTrend>>>;
};

export type DashboardEmployee = {
  id: Scalars['ID'];
  image: Scalars['String'];
  name?: Maybe<Scalars['String']>;
};

export type DashboardQuery = {
  dashboardData?: Maybe<DashboardData>;
};

export type DashboardTask = {
  createdBy?: Maybe<DashboardEmployee>;
  createdFor?: Maybe<DashboardEmployee>;
  description?: Maybe<Scalars['String']>;
  due?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  title?: Maybe<Scalars['String']>;
};

export enum DashboardTodayType {
  Deposits = 'DEPOSITS',
  Loan = 'LOAN',
  Transaction = 'TRANSACTION',
  Withdraws = 'WITHDRAWS',
}

export enum DateType {
  Ad = 'AD',
  Bs = 'BS',
}

export type Declaration = Base & {
  content: Scalars['Localized'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  for: DeclarationFor;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export enum DeclarationFor {
  KymCoop = 'KYM_COOP',
  KymCoopUnion = 'KYM_COOP_UNION',
  KymIndividual = 'KYM_INDIVIDUAL',
  KymInstitution = 'KYM_INSTITUTION',
}

export type DeclarationGetResult = {
  data?: Maybe<Declaration>;
  error?: Maybe<QueryError>;
};

export type DeclarationInput = {
  dataEn?: InputMaybe<Scalars['String']>;
  dataNp?: InputMaybe<Scalars['String']>;
  for: DeclarationFor;
};

export type DeclarationMutation = {
  update: DeclarationUpdateResult;
};

export type DeclarationMutationUpdateArgs = {
  data: DeclarationInput;
};

export type DeclarationQuery = {
  get?: Maybe<DeclarationGetResult>;
};

export type DeclarationQueryGetArgs = {
  for?: InputMaybe<DeclarationFor>;
};

export type DeclarationSettingMutation = {
  declaration: DeclarationMutation;
};

export type DeclarationSettingQuery = {
  declaration: DeclarationQuery;
};

export type DeclarationUpdateResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DeclarationQuery>;
  record?: Maybe<Declaration>;
};

export enum DefaultAccountType {
  Current = 'CURRENT',
  Saving = 'SAVING',
}

export type Denomination = {
  quantity: Scalars['Int'];
  value: CashValue;
};

export type DepositAccount = Base & {
  accountExpiryDate?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountOpenedDate?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dues?: Maybe<Dues>;
  guaranteedAmount?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  installmentAmount?: Maybe<Scalars['String']>;
  interestAccured?: Maybe<Scalars['String']>;
  lastTransactionDate?: Maybe<Scalars['String']>;
  member?: Maybe<Member>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  overDrawnBalance?: Maybe<Scalars['String']>;
  product: DepositProduct;
};

export type DepositAccountClose = {
  accountID: Scalars['ID'];
  accountTransfer?: InputMaybe<AccountTransferPaymentForAccountClose>;
  bankCheque?: InputMaybe<BankChequePaymentForAccountClose>;
  cash?: InputMaybe<DepositCash>;
  memberID: Scalars['ID'];
  notes?: InputMaybe<Scalars['String']>;
  otherReason?: InputMaybe<Scalars['String']>;
  paymentMode: AccountClosePaymentMode;
  reason: AccountCloseReason;
};

export type DepositAccountCloseResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<Scalars['Any']>;
  recordId: Scalars['ID'];
};

export type DepositAccountInstallmentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositLoanAccountQuery>;
  record?: Maybe<Installment>;
  recordId: Scalars['ID'];
};

export type DepositBankVoucher = {
  amount: Scalars['String'];
  bankId: Scalars['String'];
  depositedAt: Scalars['String'];
  depositedBy: Scalars['String'];
  voucherId: Scalars['String'];
};

export type DepositCash = {
  cashPaid: Scalars['String'];
  denominations?: InputMaybe<Array<Denomination>>;
  disableDenomination: Scalars['Boolean'];
  note?: InputMaybe<Scalars['String']>;
  returned_amount: Scalars['String'];
  total: Scalars['String'];
};

export type DepositCheque = {
  accId: Scalars['String'];
  amount: Scalars['String'];
  chequeNo: Scalars['String'];
  isDifferentMember?: InputMaybe<Scalars['Boolean']>;
  memberId?: InputMaybe<Scalars['String']>;
};

export enum DepositFrequency {
  HalfYearly = 'HALF_YEARLY',
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
  Yearly = 'YEARLY',
}

export type DepositInput = {
  accountId?: InputMaybe<Scalars['String']>;
  agentId?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['String']>;
  bankVoucher?: InputMaybe<DepositBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  cheque?: InputMaybe<DepositCheque>;
  depositedBy: DepositedBy;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  fine?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  noOfInstallments?: InputMaybe<Scalars['Int']>;
  notes?: InputMaybe<Scalars['String']>;
  other_doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  other_name?: InputMaybe<Scalars['String']>;
  payment_type: DepositPaymentType;
  rebate?: InputMaybe<Scalars['String']>;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  voucherId?: InputMaybe<Scalars['String']>;
};

export type DepositIro = {
  id: Scalars['ID'];
  iroAddress?: Maybe<Scalars['String']>;
  iroCode?: Maybe<Scalars['String']>;
  iroName?: Maybe<Scalars['String']>;
};

export type DepositIroFormStateData = {
  iroAddress?: Maybe<Scalars['String']>;
  iroCode?: Maybe<Scalars['String']>;
  iroName?: Maybe<Scalars['String']>;
};

export type DepositIroFormStateResult = {
  data?: Maybe<DepositIroFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositIroInput = {
  iroAddress?: InputMaybe<Scalars['String']>;
  iroCode?: InputMaybe<Scalars['String']>;
  iroName?: InputMaybe<Scalars['String']>;
};

export type DepositIroResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositSettingsQuery>;
  record?: Maybe<DepositIro>;
  recordId: Scalars['ID'];
};

export type DepositLoanAccount = Base & {
  accountName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['ID']>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  boardAuthority?: Maybe<Scalars['Boolean']>;
  ceoAuthority?: Maybe<Scalars['Boolean']>;
  chequeFacility?: Maybe<Scalars['Boolean']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  defaultAmountDepositAccountName?: Maybe<Scalars['String']>;
  depositFrequencyDay?: Maybe<Scalars['Int']>;
  depositFrequencyDayOfWeek?: Maybe<Week>;
  depositFrequencyFrequencyDay?: Maybe<FrequencyDay>;
  depositFrequencyMonthly?: Maybe<WeeklyFrequency>;
  depositFrequencyWeekly?: Maybe<Week>;
  depositFrequencyYearlyDay?: Maybe<Scalars['Int']>;
  depositFrequencyYearlyMonth?: Maybe<Months>;
  dues?: Maybe<Dues>;
  eBanking?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  initialDepositAmount?: Maybe<Scalars['Amount']>;
  installmentAmount?: Maybe<Scalars['String']>;
  interestRate?: Maybe<Scalars['Float']>;
  memberId: Scalars['ID'];
  minor?: Maybe<Scalars['String']>;
  mobileBanking?: Maybe<Scalars['Boolean']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  productId: Scalars['ID'];
  serviceCharge?: Maybe<Array<Maybe<ServiceCharge>>>;
  smsBanking?: Maybe<Scalars['Boolean']>;
  tenure?: Maybe<FrequencyTenure>;
  tenureNumber?: Maybe<Scalars['Int']>;
};

export type DepositLoanAccountConnection = {
  edges?: Maybe<Array<DepositLoanAccountEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type DepositLoanAccountData = {
  data?: Maybe<DepositLoanAccount>;
  error?: Maybe<MutationError>;
};

export type DepositLoanAccountEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<DepositAccount>;
};

export type DepositLoanAccountFormStateResult = {
  data?: Maybe<DepositLoanAccount>;
  error?: Maybe<QueryError>;
};

export type DepositLoanAccountInput = {
  accountName?: InputMaybe<Scalars['String']>;
  agentId?: InputMaybe<Scalars['ID']>;
  atmFacility?: InputMaybe<Scalars['Boolean']>;
  boardAuthority?: InputMaybe<Scalars['Boolean']>;
  ceoAuthority?: InputMaybe<Scalars['Boolean']>;
  chequeFacility?: InputMaybe<Scalars['Boolean']>;
  defaultAmountDepositAccountName?: InputMaybe<Scalars['String']>;
  depositFrequencyDay?: InputMaybe<Scalars['Int']>;
  depositFrequencyDayOfWeek?: InputMaybe<Week>;
  depositFrequencyFrequencyDay?: InputMaybe<FrequencyDay>;
  depositFrequencyMonthly?: InputMaybe<WeeklyFrequency>;
  depositFrequencyWeekly?: InputMaybe<Week>;
  depositFrequencyYearlyDay?: InputMaybe<Scalars['Int']>;
  depositFrequencyYearlyMonth?: InputMaybe<Months>;
  eBanking?: InputMaybe<Scalars['Boolean']>;
  initialDepositAmount?: InputMaybe<Scalars['Amount']>;
  installmentAmount?: InputMaybe<Scalars['String']>;
  interestRate?: InputMaybe<Scalars['Float']>;
  memberId: Scalars['ID'];
  minor?: InputMaybe<Scalars['String']>;
  mobileBanking?: InputMaybe<Scalars['Boolean']>;
  openingPayment?: InputMaybe<DepositInput>;
  productId: Scalars['ID'];
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceChargeInput>>>;
  smsBanking?: InputMaybe<Scalars['Boolean']>;
  tenure?: InputMaybe<FrequencyTenure>;
  tenureNumber?: InputMaybe<Scalars['Int']>;
};

export type DepositLoanAccountMutation = {
  add?: Maybe<DepositLoanAccountResult>;
  close?: Maybe<DepositAccountCloseResult>;
  forgiveInstallment?: Maybe<DepositAccountInstallmentResult>;
};

export type DepositLoanAccountMutationAddArgs = {
  data?: InputMaybe<DepositLoanAccountInput>;
  id: Scalars['ID'];
};

export type DepositLoanAccountMutationCloseArgs = {
  data?: InputMaybe<DepositAccountClose>;
};

export type DepositLoanAccountMutationForgiveInstallmentArgs = {
  id: Scalars['ID'];
  installmentDate: Array<Scalars['String']>;
};

export type DepositLoanAccountQuery = {
  formState?: Maybe<DepositLoanAccountFormStateResult>;
  get?: Maybe<DepositLoanAccount>;
  getInstallments?: Maybe<InstallmentResult>;
  list?: Maybe<DepositLoanAccountConnection>;
  listMinors?: Maybe<KymIndFamilyMemberQueryResult>;
};

export type DepositLoanAccountQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryGetArgs = {
  id: Scalars['ID'];
};

export type DepositLoanAccountQueryGetInstallmentsArgs = {
  from?: InputMaybe<Scalars['String']>;
  fromN?: InputMaybe<Scalars['Int']>;
  id: Scalars['ID'];
  to?: InputMaybe<Scalars['String']>;
  toN?: InputMaybe<Scalars['Int']>;
};

export type DepositLoanAccountQueryListArgs = {
  filter?: InputMaybe<DepositLoanAccountSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositLoanAccountQueryListMinorsArgs = {
  memberId: Scalars['ID'];
};

export type DepositLoanAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositLoanAccountQuery>;
  record?: Maybe<DepositLoanAccount>;
  recordId: Scalars['ID'];
};

export type DepositLoanAccountSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  memberId?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export enum DepositPaymentType {
  BankVoucher = 'BANK_VOUCHER',
  Cash = 'CASH',
  Cheque = 'CHEQUE',
}

export type DepositProduct = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  interest?: Maybe<Scalars['Float']>;
  isMandatorySaving?: Maybe<Scalars['Boolean']>;
  minimumBalance?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  nature: NatureOfDepositProduct;
  objState: ObjState;
  productCode: Scalars['String'];
  productName: Scalars['String'];
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductCategoryList = {
  data?: Maybe<Array<Maybe<DepositProductFormStateData>>>;
  error?: Maybe<QueryError>;
};

export type DepositProductConnection = {
  edges: Array<DepositProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type DepositProductCriteria = {
  cooperativeType?: Maybe<Array<Maybe<Scalars['String']>>>;
  cooperativeUnion?: Maybe<Array<Maybe<Scalars['String']>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['String']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['String']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionType?: Maybe<Array<Maybe<Scalars['String']>>>;
  maritalStatus?: Maybe<Array<Maybe<Scalars['String']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DepositProductCriteriaResult = {
  data?: Maybe<DepositProductCriteria>;
  error?: Maybe<QueryError>;
};

export type DepositProductEdge = {
  cursor: Scalars['Cursor'];
  node: DepositProduct;
};

export type DepositProductFormStateData = {
  accountCloseCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  accountType?: Maybe<DefaultAccountType>;
  allowLoan?: Maybe<Scalars['Boolean']>;
  alternativeChannelCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  alternativeChannels?: Maybe<Scalars['Boolean']>;
  atmCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  atmFacility?: Maybe<Scalars['Boolean']>;
  autoOpen?: Maybe<Scalars['Boolean']>;
  balanceLimit?: Maybe<AmountLimitFormState>;
  chequeCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  chequeIssue?: Maybe<Scalars['Boolean']>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  depositAmount?: Maybe<AmountLimitFormState>;
  depositFrequency?: Maybe<Frequency>;
  description?: Maybe<Scalars['String']>;
  dormantSetup?: Maybe<Array<Maybe<DormantSetupFormState>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  fixedDepositAmountLimit?: Maybe<AmountLimitFormState>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id?: Maybe<Scalars['ID']>;
  individualDocuments?: Maybe<Array<Maybe<IndividualRequiredDocument>>>;
  institutionDocuments?: Maybe<Array<Maybe<InstitutionRequiredDocument>>>;
  interest?: Maybe<InterestFormState>;
  isForMinors?: Maybe<Scalars['Boolean']>;
  isMandatorySaving?: Maybe<Scalars['Boolean']>;
  isTenureApplicable?: Maybe<Scalars['Boolean']>;
  ladderRate?: Maybe<Scalars['Boolean']>;
  ladderRateData?: Maybe<Array<Maybe<LadderRateFormState>>>;
  ledgerMapping?: Maybe<LedgerMappingFormState>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxPostingFreqDifference?: Maybe<Scalars['Int']>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  nature?: Maybe<NatureOfDepositProduct>;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  noOftransactionAllowed?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penalty?: Maybe<Scalars['Boolean']>;
  penaltyData?: Maybe<Penalty>;
  percentageOfDeposit?: Maybe<Scalars['Float']>;
  postingFrequency?: Maybe<DepositFrequency>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  productCode: ProductCodeFormState;
  productName?: Maybe<Scalars['String']>;
  rebate?: Maybe<Scalars['Boolean']>;
  rebateData?: Maybe<Rebate>;
  serviceCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  specifyWithdrawRestriction?: Maybe<Scalars['String']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultiple?: Maybe<Scalars['Boolean']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  transactionAllowed?: Maybe<DepositFrequency>;
  typeOfMember?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: Maybe<Scalars['Boolean']>;
  withdrawAmountLimit?: Maybe<AmountLimitFormState>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
  withdrawRestricted?: Maybe<Scalars['Boolean']>;
};

export type DepositProductFormStateResult = {
  data?: Maybe<DepositProductFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositProductInput = {
  accountCloseCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  accountType?: InputMaybe<DefaultAccountType>;
  allowLoan?: InputMaybe<Scalars['Boolean']>;
  alternativeChannelCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  alternativeChannels?: InputMaybe<Scalars['Boolean']>;
  atmCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  atmFacility?: InputMaybe<Scalars['Boolean']>;
  autoOpen?: InputMaybe<Scalars['Boolean']>;
  balanceLimit?: InputMaybe<AmountLimit>;
  chequeCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  chequeIssue?: InputMaybe<Scalars['Boolean']>;
  cooperativeType?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  criteria?: InputMaybe<Array<InputMaybe<CriteriaSection>>>;
  depositAmount?: InputMaybe<AmountLimit>;
  depositFrequency?: InputMaybe<Frequency>;
  description?: InputMaybe<Scalars['String']>;
  dormantSetup?: InputMaybe<Array<InputMaybe<DormantSetup>>>;
  educationQualification?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  ethnicity?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  fixedDepositAmountLimit?: InputMaybe<AmountLimit>;
  foreignEmployment?: InputMaybe<Scalars['Boolean']>;
  genderId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  individualDocuments?: InputMaybe<Array<InputMaybe<IndividualRequiredDocument>>>;
  institutionDocuments?: InputMaybe<Array<InputMaybe<InstitutionRequiredDocument>>>;
  interest?: InputMaybe<InterestRate>;
  isForMinors?: InputMaybe<Scalars['Boolean']>;
  isMandatorySaving?: InputMaybe<Scalars['Boolean']>;
  isTenureApplicable?: InputMaybe<Scalars['Boolean']>;
  ladderRate?: InputMaybe<Scalars['Boolean']>;
  ladderRateData?: InputMaybe<Array<InputMaybe<LadderRate>>>;
  ledgerMapping?: InputMaybe<LedgerMapping>;
  maritalStatusId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  maxAge?: InputMaybe<Scalars['Int']>;
  maxPostingFreqDifference?: InputMaybe<Scalars['Int']>;
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  nature?: InputMaybe<NatureOfDepositProduct>;
  natureOFBusinessCoop?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  noOftransactionAllowed?: InputMaybe<Scalars['Int']>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  penalty?: InputMaybe<Scalars['Boolean']>;
  penaltyData?: InputMaybe<PenaltyTypeInput>;
  percentageOfDeposit?: InputMaybe<Scalars['Float']>;
  postingFrequency?: InputMaybe<DepositFrequency>;
  prematurePenalty?: InputMaybe<PrematurePenalty>;
  productCode?: InputMaybe<ProductCode>;
  productName?: InputMaybe<Scalars['String']>;
  rebate?: InputMaybe<Scalars['Boolean']>;
  rebateData?: InputMaybe<RebateTypeInput>;
  serviceCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  specifyWithdrawRestriction?: InputMaybe<Scalars['String']>;
  staffProduct?: InputMaybe<Scalars['Boolean']>;
  supportMultiple?: InputMaybe<Scalars['Boolean']>;
  tenureUnit?: InputMaybe<FrequencyTenure>;
  transactionAllowed?: InputMaybe<DepositFrequency>;
  typeOfMember?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  wealthBuildingProduct?: InputMaybe<Scalars['Boolean']>;
  withdrawAmountLimit?: InputMaybe<AmountLimit>;
  withdrawPenalty?: InputMaybe<WithdrawPenalty>;
  withdrawRestricted?: InputMaybe<Scalars['Boolean']>;
};

export type DepositProductList = {
  allowed?: Maybe<Array<Maybe<DepositProduct>>>;
  error?: Maybe<QueryError>;
  notAllowed?: Maybe<Array<Maybe<DepositProductListData>>>;
};

export type DepositProductListData = {
  data?: Maybe<DepositProduct>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DepositProductResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositProductSettingsQuery>;
  record?: Maybe<DepositProduct>;
  recordId: Scalars['ID'];
};

export type DepositProductSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type DepositProductSettingsMutation = {
  add?: Maybe<DepositProductResult>;
};

export type DepositProductSettingsMutationAddArgs = {
  data?: InputMaybe<DepositProductInput>;
  id: Scalars['ID'];
};

export type DepositProductSettingsQuery = {
  formState?: Maybe<DepositProductFormStateResult>;
  get?: Maybe<DepositProduct>;
  getPenaltyRebateInfo?: Maybe<PenaltyRebateResult>;
  getProductCriteria?: Maybe<DepositProductCriteriaResult>;
  getProductList?: Maybe<DepositProductList>;
  list?: Maybe<DepositProductConnection>;
};

export type DepositProductSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetArgs = {
  id: Scalars['ID'];
};

export type DepositProductSettingsQueryGetPenaltyRebateInfoArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryGetProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type DepositProductSettingsQueryGetProductListArgs = {
  memberId: Scalars['ID'];
};

export type DepositProductSettingsQueryListArgs = {
  filter?: InputMaybe<DepositProductSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type DepositResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type DepositSettingsMutation = {
  iroSetup?: Maybe<DepositIroResult>;
  tdsSetup?: Maybe<DepositTdsResult>;
};

export type DepositSettingsMutationIroSetupArgs = {
  data?: InputMaybe<DepositIroInput>;
};

export type DepositSettingsMutationTdsSetupArgs = {
  data?: InputMaybe<DepositTdsInput>;
};

export type DepositSettingsQuery = {
  iroFormState?: Maybe<DepositIroFormStateResult>;
  tdsFormState?: Maybe<DepositTdsFormStateResult>;
};

export type DepositTds = {
  coopUnion?: Maybe<Scalars['Float']>;
  cooperative?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  individual?: Maybe<Scalars['Float']>;
  institution?: Maybe<Scalars['Float']>;
};

export type DepositTdsFormStateData = {
  coopUnion?: Maybe<Scalars['Float']>;
  cooperative?: Maybe<Scalars['Float']>;
  individual?: Maybe<Scalars['Float']>;
  institution?: Maybe<Scalars['Float']>;
};

export type DepositTdsFormStateResult = {
  data?: Maybe<DepositTdsFormStateData>;
  error?: Maybe<QueryError>;
};

export type DepositTdsInput = {
  coopUnion?: InputMaybe<Scalars['Float']>;
  cooperative?: InputMaybe<Scalars['Float']>;
  individual?: InputMaybe<Scalars['Float']>;
  institution?: InputMaybe<Scalars['Float']>;
};

export type DepositTdsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<DepositSettingsQuery>;
  record?: Maybe<DepositTds>;
  recordId: Scalars['ID'];
};

export enum DepositedBy {
  Agent = 'AGENT',
  Other = 'OTHER',
  Self = 'SELF',
}

export type DirectorAffiliatedFirms = {
  addressOfInstitution?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type DirectorDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  firmDetails?: Maybe<AffiliatedDirectorDetailsFormState>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isAffiliatedWithOtherFirms?: Maybe<Scalars['Boolean']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type DirectorDetailsType = {
  affiliatedFirms?: Maybe<Array<Maybe<DirectorAffiliatedFirms>>>;
  citizenshipNo?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  documentPhotograph?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  isAffiliatedWithOtherFirms?: Maybe<Scalars['Boolean']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panNo?: Maybe<Scalars['String']>;
  permanenetAddress?: Maybe<KymAddress>;
  photograph?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type District = {
  id: Scalars['Int'];
  municipalities: Array<Municipality>;
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export enum DividendDistributionCondition {
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
}

export type DividendRate = {
  monthly?: Maybe<MonthlyDividendRate>;
  quarterly?: Maybe<QuarterlyDividendRate>;
};

export type DividendRateInput = {
  monthly?: InputMaybe<MonthlyDividendRateInput>;
  quarterly?: InputMaybe<QuarterlyDividendRateInput>;
};

export enum DividendTransferTreatment {
  AccountTransfer = 'ACCOUNT_TRANSFER',
  BookPayable = 'BOOK_PAYABLE',
  ShareAndAccount = 'SHARE_AND_ACCOUNT',
}

export type Document = {
  photo?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
};

export type DocumentMutation = {
  KYMUpsert: DocumentMutationResult;
  Subscription: SubscriptionMutation;
};

export type DocumentMutationKymUpsertArgs = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
  memberId: Scalars['String'];
};

export type DocumentMutationSubscriptionArgs = {
  subscriptionId: Scalars['String'];
};

export type DocumentMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UploadedDocument>;
  recordId?: Maybe<Scalars['ID']>;
};

export type DocumentQuery = {
  listKYMDocuments: DocumentResult;
  listSubscriptionDocuments: DocumentResult;
};

export type DocumentQueryListKymDocumentsArgs = {
  memberId: Scalars['String'];
};

export type DocumentQueryListSubscriptionDocumentsArgs = {
  subscriptionId: Scalars['String'];
};

export type DocumentResult = {
  data?: Maybe<Array<Maybe<UploadedDocument>>>;
  error?: Maybe<QueryError>;
};

export type DormantSetup = {
  condition?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
};

export type DormantSetupFormState = {
  condition?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['String']>;
};

export type Dues = {
  dueInstallments?: Maybe<Scalars['Int']>;
  fine?: Maybe<Scalars['String']>;
  totalDue?: Maybe<Scalars['String']>;
};

export type EBankingAccountQuery = {
  get?: Maybe<Account>;
  list?: Maybe<AccountConnection>;
  summary?: Maybe<AccountSummary>;
};

export type EBankingAccountQueryGetArgs = {
  id: Scalars['ID'];
};

export type EBankingAccountQueryListArgs = {
  paginate?: InputMaybe<Pagination>;
};

export enum EBankingActiveLoanStatus {
  Pending = 'Pending',
  Processing = 'Processing',
  Scheduled = 'Scheduled',
}

export type EBankingAnnouncementQuery = {
  list: Array<Maybe<EBankingAppAnnouncement>>;
};

export type EBankingAnnouncementQueryListArgs = {
  filter?: InputMaybe<NotificationFilter>;
};

export type EBankingAppAnnouncement = {
  date: Scalars['String'];
  details: Scalars['HTML'];
  id: Scalars['ID'];
  summary: Scalars['String'];
  title: Scalars['String'];
};

export type EBankingAppNotification = {
  date: Scalars['String'];
  description: Scalars['String'];
  id: Scalars['ID'];
  parameters: Scalars['Map'];
  subject: Scalars['String'];
};

export type EBankingAppNotificationQuery = {
  list: Array<Maybe<EBankingAppNotification>>;
};

export type EBankingAppNotificationQueryListArgs = {
  filter?: InputMaybe<NotificationFilter>;
};

export type EBankingApplyLoanInput = {
  amount?: InputMaybe<Scalars['Amount']>;
  branch?: InputMaybe<Scalars['ID']>;
  purpose?: InputMaybe<Scalars['String']>;
};

export type EBankingApplyLoanResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<EBankingLoanHistory>;
  recordID: Scalars['ID'];
};

export type EBankingAuthMutation = {
  checkAccount?: Maybe<EbankingAccountExistsResult>;
  getNewToken?: Maybe<AuthTokenResult>;
  login?: Maybe<EbankingLoginResult>;
  loginToCooperative?: Maybe<EbankingCooperativeLoginResult>;
  requestSource?: Maybe<RequestSource>;
  resendOtp?: Maybe<EbankingOtpResult>;
  setNewPin?: Maybe<EbankingUserResult>;
  setPassword?: Maybe<EbankingPasswordResult>;
  signUp?: Maybe<EbankingSignUpResult>;
  verifyOtp?: Maybe<EbankingOtpResult>;
};

export type EBankingAuthMutationCheckAccountArgs = {
  coopId: Scalars['ID'];
  mobileNumber: Scalars['String'];
  pin: Scalars['Int'];
};

export type EBankingAuthMutationGetNewTokenArgs = {
  refreshToken: Scalars['String'];
  tokenFor: EBankingTokenType;
};

export type EBankingAuthMutationLoginArgs = {
  data: EbankingLoginInput;
};

export type EBankingAuthMutationLoginToCooperativeArgs = {
  cooperativeId: Scalars['ID'];
  mobileNumber: Scalars['String'];
  pinCode?: InputMaybe<Scalars['Int']>;
};

export type EBankingAuthMutationResendOtpArgs = {
  mobile: Scalars['String'];
};

export type EBankingAuthMutationSetNewPinArgs = {
  data?: InputMaybe<CooperativeConnectInput>;
};

export type EBankingAuthMutationSetPasswordArgs = {
  data: EbankingPasswordInput;
  userID: Scalars['ID'];
};

export type EBankingAuthMutationSignUpArgs = {
  mobileNo: Scalars['String'];
};

export type EBankingAuthMutationVerifyOtpArgs = {
  data: EbankingOtpInput;
};

export type EBankingChequeBlockInput = {
  chequeNumber?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<Scalars['String']>;
};

export type EBankingChequeMutation = {
  block?: Maybe<EBankingChequeResult>;
  request?: Maybe<EBankingChequeResult>;
  withdrawViaCollector?: Maybe<EBankingChequeResult>;
};

export type EBankingChequeMutationBlockArgs = {
  data?: InputMaybe<EBankingChequeBlockInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeMutationRequestArgs = {
  data?: InputMaybe<EBankingChequeRequestInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeMutationWithdrawViaCollectorArgs = {
  data?: InputMaybe<EBankingChequeWithdrawViaCollectorInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeQuery = {
  branchList?: Maybe<BranchGetData>;
  collectors?: Maybe<MyraUserData>;
  options: Array<EBankingCooperativeServiceOption>;
  pastRequests?: Maybe<Array<Maybe<ChequePastRequest>>>;
};

export type EBankingChequeQueryPastRequestsArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
  memberId: Scalars['ID'];
};

export type EBankingChequeRequestInput = {
  branch?: InputMaybe<Scalars['ID']>;
  collector?: InputMaybe<Scalars['ID']>;
  type: EBankingChequeRequestType;
};

export enum EBankingChequeRequestType {
  SelfPickup = 'Self_Pickup',
  ThroughAgent = 'Through_agent',
}

export type EBankingChequeResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<ChequePastRequest>;
  recordID: Scalars['ID'];
};

export type EBankingChequeWithdrawViaCollectorInput = {
  amount?: InputMaybe<Scalars['String']>;
  branch?: InputMaybe<Scalars['ID']>;
  collector?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
};

export type EBankingCombined = {
  accounts: Array<Maybe<Account>>;
  recentTransactions: Array<Maybe<Transactions>>;
  services: Array<Maybe<Services>>;
  share: EbankingShare;
  utilityPayments: Array<Maybe<UtilityPayments>>;
};

export type EBankingComplaintHistory = {
  applicationNumber: Scalars['Int'];
  complaintStatus: EBankingActiveLoanStatus;
  detailedAccount?: Maybe<Scalars['String']>;
  feedbackDate: Scalars['String'];
  id: Scalars['ID'];
  peopleInvolved?: Maybe<Scalars['String']>;
  proposedSolution?: Maybe<Scalars['String']>;
  status: EBankingServiceStatus;
  violatedPolicies?: Maybe<Scalars['String']>;
};

export type EBankingComplaintHistoryData = {
  data?: Maybe<Array<Maybe<EBankingComplaintHistory>>>;
  error?: Maybe<QueryError>;
};

export type EBankingComplaintMutation = {
  register?: Maybe<EBankingComplaintRegisterResult>;
};

export type EBankingComplaintMutationRegisterArgs = {
  data?: InputMaybe<EBankingRegisterComplaintInput>;
  memberID: Scalars['String'];
};

export type EBankingComplaintQuery = {
  history?: Maybe<EBankingComplaintHistoryData>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingComplaintQueryHistoryArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
  memberID: Scalars['ID'];
};

export type EBankingComplaintRegisterResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<EBankingComplaintHistory>;
  recordID: Scalars['ID'];
};

export type EBankingCooperativeServiceError = EBankingCooperativeServiceInvalidDataError;

export type EBankingCooperativeServiceFilter = {
  status?: InputMaybe<EBankingServiceStatus>;
};

export type EBankingCooperativeServiceInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type EBankingCooperativeServiceMutation = {
  cheque?: Maybe<EBankingChequeMutation>;
  complaint?: Maybe<EBankingComplaintMutation>;
  loan?: Maybe<EBankingLoanMutation>;
};

export type EBankingCooperativeServiceOption = {
  enabled: Scalars['Boolean'];
  name: Scalars['String'];
  requestType?: Maybe<Scalars['String']>;
};

export type EBankingCooperativeServiceQuery = {
  cheque?: Maybe<EBankingChequeQuery>;
  complaint?: Maybe<EBankingComplaintQuery>;
  downloads?: Maybe<EBankingDownloadsQuery>;
  loan?: Maybe<EBankingLoanQuery>;
  organizationInfo: Organization;
};

export type EBankingCooperativeServiceQueryOrganizationInfoArgs = {
  id: Scalars['ID'];
};

export type EBankingDownloadFile = {
  category: Scalars['String'];
  extension: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  size: Scalars['String'];
  url: Scalars['String'];
};

export type EBankingDownloadsFilter = {
  category?: InputMaybe<Scalars['String']>;
};

export type EBankingDownloadsQuery = {
  files: Array<EBankingDownloadFile>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingDownloadsQueryFilesArgs = {
  filter?: InputMaybe<EBankingDownloadsFilter>;
};

export type EBankingKymAddFormStatus = {
  lastUpdated: EBankingKymAddLus;
  sectionStatus?: Maybe<EBankingKymAddSectionStatus>;
};

export type EBankingKymAddLus =
  | EBankingKymCooperativeLus
  | EBankingKymDeclarationLus
  | EBankingKymPersonalLus
  | EBankingKymProfessionalLus;

export type EBankingKymAddLastUpdated = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMemberStatus>;
  declaration?: Maybe<EBankingKymDeclarationStatus>;
  personal?: Maybe<EBankingKymPersonalStatus>;
  professional?: Maybe<EBankingKymProfessionalStatus>;
};

export type EBankingKymAddSectionStatus = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMemberStatus>;
  declaration?: Maybe<EBankingKymDeclarationStatus>;
  personal?: Maybe<EBankingKymPersonalStatus>;
  professional?: Maybe<EBankingKymProfessionalStatus>;
};

export type EBankingKymCooperativeLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymCooperativeMemberSection {
  BackgroundInformation = 'BACKGROUND_INFORMATION',
  EstimatedTransactions = 'ESTIMATED_TRANSACTIONS',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
}

export type EBankingKymCooperativeMemberStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymCooperativeMemberSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymCooperativeMemberSection>>>;
};

export type EBankingKymCooperativeMembership = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['ID']>;
  familyMemberInThisCooperative?: Maybe<
    Array<Maybe<KymFamilyMemberDetailsInThisCooperativeFormState>>
  >;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  loan?: Maybe<Scalars['Float']>;
  memberNumberInAnotherCooperative?: Maybe<Scalars['String']>;
  nameAndAddressOfAnotherCooperative?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['Float']>;
  purposeId?: Maybe<Scalars['ID']>;
  savings?: Maybe<Scalars['Float']>;
  share?: Maybe<Scalars['Int']>;
};

export type EBankingKymCooperativeMembershipInput = {
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['ID']>;
  familyMemberInThisCooperative?: InputMaybe<
    Array<InputMaybe<KymFamilyMemberDetailsInThisCooperative>>
  >;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  loan?: InputMaybe<Scalars['Float']>;
  memberNumberInAnotherCooperative?: InputMaybe<Scalars['String']>;
  nameAndAddressOfAnotherCooperative?: InputMaybe<Scalars['String']>;
  other?: InputMaybe<Scalars['Float']>;
  purposeId?: InputMaybe<Scalars['ID']>;
  savings?: InputMaybe<Scalars['Float']>;
  share?: InputMaybe<Scalars['Int']>;
};

export type EBankingKymCooperativeMembershipResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymDeclaration = {
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['ID']>;
  convictionDetails?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<KymDocumentsFormState>>>;
  foreignResidencyType?: Maybe<Scalars['ID']>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  localKinAddress?: Maybe<Scalars['String']>;
  localKinContact?: Maybe<Scalars['String']>;
  localKinName?: Maybe<Scalars['String']>;
  localKinRelationshipId?: Maybe<Scalars['ID']>;
};

export type EBankingKymDeclarationInput = {
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['ID']>;
  convictionDetails?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<KymDocuments>>>;
  foreignResidencyType?: InputMaybe<Scalars['ID']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  localKinAddress?: InputMaybe<Scalars['String']>;
  localKinContact?: InputMaybe<Scalars['String']>;
  localKinName?: InputMaybe<Scalars['String']>;
  localKinRelationshipId?: InputMaybe<Scalars['ID']>;
};

export type EBankingKymDeclarationLus = {
  name: EBankingKymPersonalSection;
};

export type EBankingKymDeclarationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export enum EBankingKymDeclarationSection {
  DeclarationInformation = 'DECLARATION_INFORMATION',
}

export type EBankingKymDeclarationStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymDeclarationSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymDeclarationSection>>>;
};

export type EBankingKymFormData = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMembership>;
  declaration?: Maybe<EBankingKymDeclaration>;
  personalInformation?: Maybe<EBankingKymPersonalInformation>;
  professionalInformation?: Maybe<EBankingKymProfessionalInformation>;
};

export type EBankingKymFormState = {
  formData?: Maybe<EBankingKymFormData>;
  lastUpdated: EBankingKymAddLus;
  sectionStatus?: Maybe<EBankingKymAddSectionStatus>;
};

export type EBankingKymFormStateQuery = {
  data?: Maybe<EBankingKymFormState>;
};

export type EBankingKymIndAddError = EBankingKymInvalidDataError;

export type EBankingKymInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type EBankingKymMutation = {
  add?: Maybe<EBankingKymSectionMutation>;
  newKymId: Scalars['ID'];
};

export type EBankingKymMutationAddArgs = {
  id: Scalars['ID'];
};

export type EBankingKymMutationNewKymIdArgs = {
  cooperativeId: Scalars['ID'];
  memberId: Scalars['ID'];
};

export type EBankingKymPersonalInformation = {
  dateOfBirth?: Maybe<Scalars['String']>;
  educationQualificationId?: Maybe<Scalars['ID']>;
  email?: Maybe<Scalars['String']>;
  ethnicityId?: Maybe<Scalars['ID']>;
  familyDetails?: Maybe<Array<Maybe<KymFamilyDetailsFormState>>>;
  firstName?: Maybe<Scalars['String']>;
  genderId?: Maybe<Scalars['ID']>;
  identification?: Maybe<Array<Maybe<KymIdentificationFormState>>>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['String']>;
  livingInRentedHouse?: Maybe<Scalars['Boolean']>;
  longitude?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['ID']>;
  middleName?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['Int']>;
  nationalityId?: Maybe<Scalars['ID']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLocalityId?: Maybe<Scalars['ID']>;
  permanentMunicipalityId?: Maybe<Scalars['ID']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentTole?: Maybe<Scalars['String']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  phoneNumber?: Maybe<Scalars['Int']>;
  religionId?: Maybe<Scalars['ID']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLocalityId?: Maybe<Scalars['ID']>;
  temporaryMunicipalityId?: Maybe<Scalars['ID']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryTole?: Maybe<Scalars['String']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
};

export type EBankingKymPersonalInformationInput = {
  dateOfBirth?: InputMaybe<Scalars['String']>;
  educationQualificationId?: InputMaybe<Scalars['ID']>;
  email?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['ID']>;
  familyDetails?: InputMaybe<Array<InputMaybe<KymFamilyDetails>>>;
  firstName?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['ID']>;
  identification?: InputMaybe<Array<InputMaybe<KymIdentification>>>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  latitude?: InputMaybe<Scalars['String']>;
  livingInRentedHouse?: InputMaybe<Scalars['Boolean']>;
  longitude?: InputMaybe<Scalars['String']>;
  maritalStatusId?: InputMaybe<Scalars['ID']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['Int']>;
  nationalityId?: InputMaybe<Scalars['ID']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentMunicipalityId?: InputMaybe<Scalars['ID']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  phoneNumber?: InputMaybe<Scalars['Int']>;
  religionId?: InputMaybe<Scalars['ID']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryMunicipalityId?: InputMaybe<Scalars['ID']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
};

export type EBankingKymPersonalInformationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymPersonalLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymPersonalSection {
  Address = 'ADDRESS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  FamilyDetails = 'FAMILY_DETAILS',
  IdentificationDetails = 'IDENTIFICATION_DETAILS',
}

export type EBankingKymPersonalStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymPersonalSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymPersonalSection>>>;
};

export type EBankingKymProfessionalInformation = {
  annualIncomeSourceId?: Maybe<Scalars['ID']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymIncomeSourceDetailsFormState>>>;
  mainOccupation?: Maybe<Array<Maybe<KymOccupationDetailsFormState>>>;
  spouseOccupation?: Maybe<Array<Maybe<KymOccupationDetailsFormState>>>;
};

export type EBankingKymProfessionalInformationInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['ID']>;
  incomeSourceDetails?: InputMaybe<Array<InputMaybe<KymIncomeSourceDetails>>>;
  mainOccupation?: InputMaybe<Array<InputMaybe<KymOccupationDetails>>>;
  spouseOccupation?: InputMaybe<Array<InputMaybe<KymOccupationDetails>>>;
};

export type EBankingKymProfessionalInformationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymProfessionalLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymProfessionalSection {
  IncomeSource = 'INCOME_SOURCE',
  MainProfession = 'MAIN_PROFESSION',
  Profession = 'PROFESSION',
  SpouseOccupation = 'SPOUSE_OCCUPATION',
}

export type EBankingKymProfessionalStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymProfessionalSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymProfessionalSection>>>;
};

export type EBankingKymQuery = {
  formState: EBankingKymFormStateQuery;
};

export type EBankingKymQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type EBankingKymSectionMutation = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMembershipResult>;
  declaration?: Maybe<EBankingKymDeclarationResult>;
  personalInformation?: Maybe<EBankingKymPersonalInformationResult>;
  professionalInformation?: Maybe<EBankingKymProfessionalInformationResult>;
};

export type EBankingKymSectionMutationCooperativeMembershipArgs = {
  data?: InputMaybe<EBankingKymCooperativeMembershipInput>;
};

export type EBankingKymSectionMutationDeclarationArgs = {
  data?: InputMaybe<EBankingKymDeclarationInput>;
};

export type EBankingKymSectionMutationPersonalInformationArgs = {
  data?: InputMaybe<EBankingKymPersonalInformationInput>;
};

export type EBankingKymSectionMutationProfessionalInformationArgs = {
  data?: InputMaybe<EBankingKymProfessionalInformationInput>;
};

export type EBankingLoanHistory = {
  activeLoanStatus?: Maybe<EBankingActiveLoanStatus>;
  amount?: Maybe<Scalars['Amount']>;
  appliedDate?: Maybe<Scalars['String']>;
  branch?: Maybe<Branch>;
  id: Scalars['String'];
  loanStatus: EBankingActiveLoanStatus;
  scheduledDate?: Maybe<Scalars['String']>;
  status?: Maybe<EBankingServiceStatus>;
  type?: Maybe<Scalars['String']>;
};

export type EBankingLoanMutation = {
  apply?: Maybe<EBankingApplyLoanResult>;
};

export type EBankingLoanMutationApplyArgs = {
  data?: InputMaybe<EBankingApplyLoanInput>;
  memberID: Scalars['String'];
};

export type EBankingLoanQuery = {
  history?: Maybe<EbankingLoanHistoryData>;
  options: Array<EBankingCooperativeServiceOption>;
};

export type EBankingLoanQueryHistoryArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
  memberId: Scalars['ID'];
};

export type EBankingMutation = {
  auth?: Maybe<EBankingAuthMutation>;
  cooperativeServices?: Maybe<EBankingCooperativeServiceMutation>;
  kym?: Maybe<EBankingKymMutation>;
  utilityPayment: UtilityPayemntMutation;
};

export type EBankingMutationAuthArgs = {
  type?: InputMaybe<RequestSource>;
};

export type EBankingNotificationQuery = {
  announcements?: Maybe<EBankingAnnouncementQuery>;
  appNotifications?: Maybe<EBankingAppNotificationQuery>;
};

export type EBankingQuery = {
  account?: Maybe<EBankingAccountQuery>;
  auth?: Maybe<EbankingAuthQuery>;
  cooperativeServices?: Maybe<EBankingCooperativeServiceQuery>;
  home: EBankingCombined;
  kym?: Maybe<EBankingKymQuery>;
  me?: Maybe<Member>;
  neosysClientsList?: Maybe<Array<Maybe<NeosysClientMinimalInfo>>>;
  notification?: Maybe<EBankingNotificationQuery>;
  products?: Maybe<ProductsQuery>;
  services?: Maybe<Array<Maybe<Services>>>;
  share?: Maybe<EBankingShareQuery>;
  transaction?: Maybe<EBankingTransactionQuery>;
  utilityPayments?: Maybe<Array<Maybe<UtilityPayments>>>;
};

export type EBankingRegisterComplaintInput = {
  date?: InputMaybe<Scalars['String']>;
  detailedAccount?: InputMaybe<Scalars['String']>;
  peopleInvolved?: InputMaybe<Scalars['String']>;
  policiesViolated?: InputMaybe<Scalars['String']>;
  proposedSolution?: InputMaybe<Scalars['String']>;
};

export enum EBankingServiceStatus {
  Active = 'Active',
  Completed = 'Completed',
  Declined = 'Declined',
}

export type EBankingShareQuery = {
  history?: Maybe<Array<Maybe<EbankingShareHistory>>>;
  summary: EbankingShare;
};

export type EBankingShareQueryHistoryArgs = {
  filter?: InputMaybe<EbankingShareFilter>;
};

export enum EBankingTokenType {
  Cooperative = 'COOPERATIVE',
  Myra = 'MYRA',
}

export type EBankingTransactionQuery = {
  monthly: Array<Maybe<MonthlyTransactions>>;
  recent?: Maybe<Array<Maybe<Transactions>>>;
};

export type EBankingTransactionQueryMonthlyArgs = {
  filter?: InputMaybe<Filter>;
};

export type EBankingTransactionQueryRecentArgs = {
  filter?: InputMaybe<RecentTransactionFilter>;
};

export type EbankingAccountExistsResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingUser>;
  success?: Maybe<Scalars['Boolean']>;
};

export type EbankingAccountRecord = {
  fullName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
};

export type EbankingAuthQuery = {
  meCooperativeUser?: Maybe<MeCooperativeUserResult>;
  meMyraUser?: Maybe<MeMyraUserResult>;
};

export type EbankingCooperative = {
  cooperativeId?: Maybe<Scalars['ID']>;
  memberId?: Maybe<Scalars['String']>;
  memberMobileNo?: Maybe<Scalars['String']>;
  myraUserId: Scalars['ID'];
};

export type EbankingCooperativeLoginRecord = {
  data?: Maybe<EbankingCooperative>;
  token: AuthToken;
};

export type EbankingCooperativeLoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingCooperativeLoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type EbankingLoanHistoryData = {
  data?: Maybe<Array<Maybe<EBankingLoanHistory>>>;
  error?: Maybe<QueryError>;
};

export type EbankingLoginInput = {
  mobileNo: Scalars['String'];
  password: Scalars['String'];
};

export type EbankingLoginRecord = {
  data?: Maybe<EbankingUser>;
  token: AuthToken;
};

export type EbankingLoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingLoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type EbankingOtpInput = {
  mobile?: InputMaybe<Scalars['String']>;
  otp?: InputMaybe<Scalars['Int']>;
};

export type EbankingOtpResult = {
  error?: Maybe<MutationError>;
  success?: Maybe<Scalars['Boolean']>;
};

export type EbankingPasswordInput = {
  dob: Scalars['String'];
  name: Scalars['String'];
  password: Scalars['String'];
};

export type EbankingPasswordResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingUser>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum EbankingServiceRequestType {
  ChequeBlockRequest = 'CHEQUE_BLOCK_REQUEST',
  ChequeRequest = 'CHEQUE_REQUEST',
  WithdrawViaCollector = 'WITHDRAW_VIA_COLLECTOR',
}

export type EbankingShare = {
  totalShare: Scalars['Int'];
  value: Scalars['Float'];
};

export type EbankingShareFilter = {
  page: Scalars['String'];
};

export type EbankingShareHistory = {
  amount: Scalars['Float'];
  date: Scalars['String'];
  id: Scalars['String'];
  numberOfShares: Scalars['Int'];
  title: Scalars['String'];
  transactionDirection: Transaction_Direction;
};

export type EbankingSignUp = {
  id: Scalars['ID'];
  mobileNo: Scalars['String'];
};

export type EbankingSignUpResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingSignUp>;
  recordId?: Maybe<Scalars['ID']>;
};

export type EbankingUser = {
  cooperatives?: Maybe<Array<Maybe<CooperativeInformation>>>;
  dob?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  mobile?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type EbankingUserResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<EbankingUser>;
  recordId?: Maybe<Scalars['ID']>;
};

export type Example = {
  age: Scalars['Int'];
  enrolledAt: Scalars['Time'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ExampleInput = {
  age?: InputMaybe<Scalars['Int']>;
  enrolledAt?: InputMaybe<Scalars['Time']>;
  name: Scalars['String'];
};

export type ExampleMutation = {
  level1: Level1;
};

export type ExampleQuery = {
  localization: LocalizationExample;
  testDb: TestDbResult;
};

export enum File_Variant {
  Doc = 'DOC',
  Docx = 'DOCX',
  Jpeg = 'JPEG',
  Jpg = 'JPG',
  Other = 'OTHER',
  Pdf = 'PDF',
  Png = 'PNG',
}

export enum Filter_Mode {
  And = 'AND',
  Or = 'OR',
}

export type FamilyDetails = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  inNepali?: Maybe<FamilyDetailsInNepali>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FamilyDetailsInNepali = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FieldDetailsQueryResult = {
  data?: Maybe<FormField>;
  error?: Maybe<QueryError>;
};

export type Filter = {
  orConditions: Array<OrConditions>;
};

export enum FormCategory {
  KymCoop = 'KYM_COOP',
  KymCoopUnion = 'KYM_COOP_UNION',
  KymIndividual = 'KYM_INDIVIDUAL',
  KymInstitution = 'KYM_INSTITUTION',
}

export type FormDynamicFieldsFilter = {
  category: FormCategory;
  searchTerm: FormSectionSearchTerm;
};

export type FormElement = FormField | FormSection;

export type FormElementDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormElementResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormElement>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormField = Base & {
  category: FormCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dependsOn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: FormFieldType;
  hasOtherField: Scalars['Boolean'];
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  options?: Maybe<Array<FormOption>>;
  order: Scalars['Int'];
  search_term?: Maybe<FormFieldSearchTerm>;
  section?: Maybe<FormSection>;
};

export type FormFieldDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormFieldInput = {
  category: FormCategory;
  dependsOn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: FormFieldType;
  hasOtherField: Scalars['Boolean'];
  maxSize?: InputMaybe<Scalars['Int']>;
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Array<FormOptionInput>>;
};

export type FormFieldMutation = {
  /**  Condition of fields should always be depended on options only  */
  condition: FormFieldMutationResult;
  delete: FormFieldDeleteResult;
  move: FormFieldMutationResult;
  update: FormFieldMutationResult;
  /**
   *  If SectionId is given then the field is wrapped by a section and this field won't have any options.
   *    if sectionID isn't given then this field will have options so, its type will only be   SINGLE_SELECT & MULTIPLE_SELECT
   */
  upsert: FormFieldMutationResult;
};

export type FormFieldMutationConditionArgs = {
  dependsOn: Array<InputMaybe<Scalars['ID']>>;
  fieldId: Scalars['ID'];
};

export type FormFieldMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormFieldMutationMoveArgs = {
  id: Scalars['ID'];
  to: Scalars['Int'];
};

export type FormFieldMutationUpdateArgs = {
  data: FormFieldUpdateInput;
  id: Scalars['ID'];
};

export type FormFieldMutationUpsertArgs = {
  data: FormFieldUpsertInput;
  sectionId?: InputMaybe<Scalars['ID']>;
};

export type FormFieldMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormField>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormFieldQuery = {
  details: FieldDetailsQueryResult;
};

export type FormFieldQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type FormFieldQueryResult = {
  data?: Maybe<Array<Maybe<FormField>>>;
  error?: Maybe<QueryError>;
};

export enum FormFieldSearchTerm {
  /**  KYM_COOP  */
  CooperativeType = 'COOPERATIVE_TYPE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction = 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity = 'ETHNICITY',
  ExpectedMonthlyTransaction = 'EXPECTED_MONTHLY_TRANSACTION',
  ExpectedMonthlyTurnover = 'EXPECTED_MONTHLY_TURNOVER',
  FamilyIncomeSource = 'FAMILY_INCOME_SOURCE',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions = 'FOREIGN_EMPLOYMENT_OPTIONS',
  /** KYM_INDIVIDUAL */
  Gender = 'GENDER',
  MaritalStatus = 'MARITAL_STATUS',
  Nationality = 'NATIONALITY',
  Occupation = 'OCCUPATION',
  /**  KYM_INSTITUTION */
  OrganizationType = 'ORGANIZATION_TYPE',
  Purpose = 'PURPOSE',
  Relationship = 'RELATIONSHIP',
  Religion = 'RELIGION',
}

export enum FormFieldType {
  /**  For Custom Variant  */
  Address = 'ADDRESS',
  Amount = 'AMOUNT',
  Bank = 'BANK',
  Date = 'DATE',
  District = 'DISTRICT',
  Email = 'EMAIL',
  Fax = 'FAX',
  /**  These are for SEARCH fields  */
  LocalLevel = 'LOCAL_LEVEL',
  MultipleFile = 'MULTIPLE_FILE',
  MultipleSelect = 'MULTIPLE_SELECT',
  NumberInput = 'NUMBER_INPUT',
  Paragraph = 'PARAGRAPH',
  PhoneNumber = 'PHONE_NUMBER',
  PoBox = 'PO_BOX',
  Province = 'PROVINCE',
  /**  These are for file   */
  SingleFile = 'SINGLE_FILE',
  /**  These are for SINGLE_SELECT, MULTI_SELECT  */
  SingleSelect = 'SINGLE_SELECT',
  TextInput = 'TEXT_INPUT',
  Url = 'URL',
}

export type FormFieldUpdateInput = {
  dependsOn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  fieldType?: InputMaybe<FormFieldType>;
  hasOtherField?: InputMaybe<Scalars['Boolean']>;
  maxSize?: InputMaybe<Scalars['Int']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

/**  This option will be always be added in last order */
export type FormFieldUpsertInput = {
  data?: InputMaybe<FormFieldInput>;
  /**  If id is supplied then it will be update operation else it will be insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormOption = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  field: FormField;
  id: Scalars['ID'];
  isDefault: Scalars['Boolean'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  order: Scalars['Int'];
};

export type FormOptionDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormOptionInput = {
  enabled: Scalars['Boolean'];
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormOptionMutation = {
  delete: FormOptionDeleteResult;
  move: FormOptionResult;
  update: FormOptionResult;
  upsert: FormOptionResult;
};

export type FormOptionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormOptionMutationMoveArgs = {
  id: Scalars['ID'];
  to: Scalars['Int'];
};

export type FormOptionMutationUpdateArgs = {
  data: FormOptionUpdateInput;
  id: Scalars['ID'];
};

export type FormOptionMutationUpsertArgs = {
  data: FormOptionUpsertInput;
  fieldId: Scalars['ID'];
};

export type FormOptionResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormOption>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormOptionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

/**  This option will be always be added in last order */
export type FormOptionUpsertInput = {
  data?: InputMaybe<FormOptionInput>;
  /**  If Id is Present then this will be an update operation.. else it will be an insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormOptionsGetFilter = {
  fieldId: Scalars['ID'];
};

export type FormOptionsPredefinedFilter = {
  category: FormCategory;
  searchTerm: FormFieldSearchTerm;
};

export type FormOptionsQuery = {
  get?: Maybe<FormOptionsQueryResult>;
  predefined?: Maybe<FormOptionsQueryResult>;
};

export type FormOptionsQueryGetArgs = {
  filter: FormOptionsGetFilter;
};

export type FormOptionsQueryPredefinedArgs = {
  filter: FormOptionsPredefinedFilter;
};

export type FormOptionsQueryResult = {
  data?: Maybe<Array<Maybe<FormOption>>>;
  error?: Maybe<QueryError>;
};

export type FormQuery = {
  dynamicFields?: Maybe<FormFieldQueryResult>;
  options: FormOptionsQuery;
};

export type FormQueryDynamicFieldsArgs = {
  filter: FormOptionsPredefinedFilter;
};

export enum FormSearchTerm {
  AccountCoopTraining = 'ACCOUNT_COOP_TRAINING',
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  AccountHolderDetails = 'ACCOUNT_HOLDER_DETAILS',
  AccountHolderDocuments = 'ACCOUNT_HOLDER_DOCUMENTS',
  AccountOperator = 'ACCOUNT_OPERATOR',
  AccountOperatorDetails = 'ACCOUNT_OPERATOR_DETAILS',
  AccountOperatorDocument = 'ACCOUNT_OPERATOR_DOCUMENT',
  /**  KYM_COOP_UNION  */
  Applicant = 'APPLICANT',
  ApplicantDetails = 'APPLICANT_DETAILS',
  ApplicantDocument = 'APPLICANT_DOCUMENT',
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  CentralRepresentativeCoopTraining = 'CENTRAL_REPRESENTATIVE_COOP_TRAINING',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  CentralRepresentativeDocument = 'CENTRAL_REPRESENTATIVE_DOCUMENT',
  Citizenship = 'CITIZENSHIP',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION && KYM_COOP && KYM_COOP_UNION */
  ContactDetails = 'CONTACT_DETAILS',
  CooperativeType = 'COOPERATIVE_TYPE',
  /**  KYM_COOP && KYM_COOP_UNION  */
  CurrentMembers = 'CURRENT_MEMBERS',
  Director = 'DIRECTOR',
  DirectorsAffiliationDetails = 'DIRECTORS_AFFILIATION_DETAILS',
  DirectorCoopTraining = 'DIRECTOR_COOP_TRAINING',
  DirectorDetails = 'DIRECTOR_DETAILS',
  DirectorDocument = 'DIRECTOR_DOCUMENT',
  DrivingLicense = 'DRIVING_LICENSE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction = 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity = 'ETHNICITY',
  ExpectedMonthlyTransaction = 'EXPECTED_MONTHLY_TRANSACTION',
  ExpectedMonthlyTurnover = 'EXPECTED_MONTHLY_TURNOVER',
  FamilyIncomeSource = 'FAMILY_INCOME_SOURCE',
  FamilyInformation = 'FAMILY_INFORMATION',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION */
  FileUploads = 'FILE_UPLOADS',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions = 'FOREIGN_EMPLOYMENT_OPTIONS',
  /**  KYM_INDIVIDUAL  */
  Gender = 'GENDER',
  Identification = 'IDENTIFICATION',
  IncomeSourceDetails = 'INCOME_SOURCE_DETAILS',
  MaritalStatus = 'MARITAL_STATUS',
  Nationality = 'NATIONALITY',
  NationalIdentity = 'NATIONAL_IDENTITY',
  NextToKinInformation = 'NEXT_TO_KIN_INFORMATION',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  Occupation = 'OCCUPATION',
  /**  KYM_INDIVIDUAL && KYM_INSTITUTION */
  OccupationDetails = 'OCCUPATION_DETAILS',
  /** KYM_INSTITUTION  */
  OrganizationType = 'ORGANIZATION_TYPE',
  OtherCooperativeDetails = 'OTHER_COOPERATIVE_DETAILS',
  Passport = 'PASSPORT',
  Purpose = 'PURPOSE',
  RegisteredDetails = 'REGISTERED_DETAILS',
  Relationship = 'RELATIONSHIP',
  Religion = 'RELIGION',
  /**  KYM_COOP  */
  Representative = 'REPRESENTATIVE',
  SisterConcernDetails = 'SISTER_CONCERN_DETAILS',
  TransactionDetails = 'TRANSACTION_DETAILS',
  VoterId = 'VOTER_ID',
}

export type FormSection = Base & {
  category: FormCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  fields?: Maybe<Array<FormField>>;
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  parent?: Maybe<FormSection>;
  search_term?: Maybe<FormSectionSearchTerm>;
  sectionType: FormSectionType;
  subSections?: Maybe<Array<FormSection>>;
};

export type FormSectionDeleteResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormSectionInput = {
  category: FormCategory;
  enabled: Scalars['Boolean'];
  nameEn: Scalars['String'];
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormSectionMutation = {
  delete: FormSectionDeleteResult;
  /**  The new section will always be an INPUT section. UPLOAD and GROUP type aren't allowed to be created  */
  subSection: FormSectionMutationResult;
  update: FormSectionMutationResult;
  /**  The new section will always be an INPUT section. UPLOAD and GROUP type aren't allowed to be created  */
  upsert: FormSectionMutationResult;
};

export type FormSectionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormSectionMutationSubSectionArgs = {
  data?: InputMaybe<FormSectionInput>;
  sectionId: Scalars['ID'];
};

export type FormSectionMutationUpdateArgs = {
  data: FormSectionUpdateInput;
  id: Scalars['ID'];
};

export type FormSectionMutationUpsertArgs = {
  data: FormSectionUpsertInput;
};

export type FormSectionMutationResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<FormSection>;
  recordId?: Maybe<Scalars['ID']>;
};

export type FormSectionQuery = {
  details: SectionDetailsQueryResult;
};

export type FormSectionQueryDetailsArgs = {
  id: Scalars['ID'];
};

export enum FormSectionSearchTerm {
  AccountCoopTraining = 'ACCOUNT_COOP_TRAINING',
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  AccountHolderDetails = 'ACCOUNT_HOLDER_DETAILS',
  AccountHolderDocuments = 'ACCOUNT_HOLDER_DOCUMENTS',
  AccountOperator = 'ACCOUNT_OPERATOR',
  AccountOperatorDetails = 'ACCOUNT_OPERATOR_DETAILS',
  AccountOperatorDocument = 'ACCOUNT_OPERATOR_DOCUMENT',
  /**  KYM_COOP_UNION  */
  Applicant = 'APPLICANT',
  ApplicantDetails = 'APPLICANT_DETAILS',
  ApplicantDocument = 'APPLICANT_DOCUMENT',
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  CentralRepresentativeCoopTraining = 'CENTRAL_REPRESENTATIVE_COOP_TRAINING',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  CentralRepresentativeDocument = 'CENTRAL_REPRESENTATIVE_DOCUMENT',
  Citizenship = 'CITIZENSHIP',
  ContactDetails = 'CONTACT_DETAILS',
  /**  KYM_COOP  */
  CurrentMembers = 'CURRENT_MEMBERS',
  /**  KYM_INSTITUTION && KYM_COOP  */
  Director = 'DIRECTOR',
  DirectorsAffiliationDetails = 'DIRECTORS_AFFILIATION_DETAILS',
  DirectorCoopTraining = 'DIRECTOR_COOP_TRAINING',
  DirectorDetails = 'DIRECTOR_DETAILS',
  DirectorDocument = 'DIRECTOR_DOCUMENT',
  DrivingLicense = 'DRIVING_LICENSE',
  FamilyInformation = 'FAMILY_INFORMATION',
  /** KYM_INDIVIDUAL && KYM_INSTITUTION && KYM_COOP */
  FileUploads = 'FILE_UPLOADS',
  Identification = 'IDENTIFICATION',
  IncomeSourceDetails = 'INCOME_SOURCE_DETAILS',
  NationalIdentity = 'NATIONAL_IDENTITY',
  NextToKinInformation = 'NEXT_TO_KIN_INFORMATION',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  OccupationDetails = 'OCCUPATION_DETAILS',
  OtherCooperativeDetails = 'OTHER_COOPERATIVE_DETAILS',
  /** KYM_INDIVIDUAL */
  Passport = 'PASSPORT',
  /**  KYM_INSTITUTION */
  RegisteredDetails = 'REGISTERED_DETAILS',
  Representative = 'REPRESENTATIVE',
  SisterConcernDetails = 'SISTER_CONCERN_DETAILS',
  TransactionDetails = 'TRANSACTION_DETAILS',
  VoterId = 'VOTER_ID',
}

export enum FormSectionType {
  Group = 'GROUP',
  Input = 'INPUT',
  Upload = 'UPLOAD',
}

export type FormSectionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
};

export type FormSectionUpsertInput = {
  data?: InputMaybe<FormSectionInput>;
  /**  If id is supplied then it will be update operation else it will be insert operation  */
  id?: InputMaybe<Scalars['ID']>;
};

export type FormSettingMutation = {
  delete: FormElementDeleteResult;
  field: FormFieldMutation;
  maxSize: FormElementResult;
  option: FormOptionMutation;
  section: FormSectionMutation;
};

export type FormSettingMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type FormSettingMutationMaxSizeArgs = {
  id: Scalars['ID'];
  maxSize: Scalars['Int'];
};

export type FormSettingQuery = {
  custom: CustomFormQuery;
  field: FormFieldQuery;
  predefined: PredefinedFormQuery;
  section: FormSectionQuery;
};

export enum Frequency {
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY',
}

export enum FrequencyDay {
  First = 'FIRST',
  Last = 'LAST',
  Second = 'SECOND',
  Third = 'THIRD',
}

export enum FrequencyTenure {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR',
}

export type GeneralBranchSettingsMutation = {
  add: BranchAddResult;
};

export type GeneralBranchSettingsMutationAddArgs = {
  data?: InputMaybe<BranchInput>;
  id: Scalars['ID'];
};

export type GeneralBranchSettingsQuery = {
  formState?: Maybe<BranchGetResult>;
  list?: Maybe<BranchConnection>;
  mine?: Maybe<Branch>;
};

export type GeneralBranchSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type GeneralBranchSettingsQueryListArgs = {
  filter?: InputMaybe<BranchSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type GeneralMemberData = {
  charge?: Maybe<Array<Maybe<MemberChargeData>>>;
  memberType?: Maybe<MemberActiveData>;
  risk?: Maybe<MemberRiskData>;
};

export type GeneralMemberInput = {
  charge?: InputMaybe<Array<InputMaybe<MemberChargeInput>>>;
  memberType?: InputMaybe<MemberActiveInput>;
  risk?: InputMaybe<MemberRiskInput>;
};

export type GeneralMemberResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<GeneralMemberData>;
  recordId: Scalars['ID'];
};

export type GeneralSettingsMutation = {
  KYM?: Maybe<KymMutation>;
  alternativeChannel?: Maybe<AlternativeChannelSettingsMutation>;
  branch?: Maybe<GeneralBranchSettingsMutation>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  deposit?: Maybe<DepositSettingsMutation>;
  depositProduct?: Maybe<DepositProductSettingsMutation>;
  loan?: Maybe<LoanSettingsMutation>;
  loanProducts?: Maybe<LoanProductsMutation>;
  organization?: Maybe<OrganizationSettingsMutation>;
  share?: Maybe<ShareSettingsMutation>;
  valuator?: Maybe<ValuatorSettingsMutation>;
};

export type GeneralSettingsQuery = {
  KYM?: Maybe<KymQuery>;
  alternativeChannel?: Maybe<AlternativeChannelSettingsQuery>;
  branch?: Maybe<GeneralBranchSettingsQuery>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  deposit?: Maybe<DepositSettingsQuery>;
  depositProduct?: Maybe<DepositProductSettingsQuery>;
  loan?: Maybe<LoanSettingsQuery>;
  loanProducts?: Maybe<LoanProductsQuery>;
  organization?: Maybe<OrganizationSettingsQuery>;
  share?: Maybe<ShareSettingsQuery>;
  valuator?: Maybe<ValuatorSettingsQuery>;
};

export enum GlobalPageAppName {
  AccountingSystem = 'ACCOUNTING_SYSTEM',
  CoreBankingSystem = 'CORE_BANKING_SYSTEM',
  InventoryMgmt = 'INVENTORY_MGMT',
  Settings = 'SETTINGS',
}

export enum GlobalPageMenuName {
  Accounts = 'ACCOUNTS',
  Loan = 'LOAN',
  Member = 'MEMBER',
  Reports = 'REPORTS',
  Share = 'SHARE',
  Transactions = 'TRANSACTIONS',
}

export enum GlobalPagesIconType {
  Add = 'ADD',
  List = 'LIST',
  Profile = 'PROFILE',
  Reports = 'REPORTS',
  Settings = 'SETTINGS',
}

export type GlobalPagesResultNode = {
  appName?: Maybe<GlobalPageAppName>;
  fullCode?: Maybe<Scalars['String']>;
  hasParam?: Maybe<Scalars['Boolean']>;
  iconType?: Maybe<GlobalPagesIconType>;
  menuName?: Maybe<GlobalPageMenuName>;
  page?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export enum GracePeriod {
  Interest = 'INTEREST',
  Principal = 'PRINCIPAL',
}

export type HumanizeAuditLog = {
  extraData?: Maybe<Array<Maybe<Scalars['String']>>>;
  narration?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};

export enum Id_Type {
  Address = 'ADDRESS',
  Bank = 'BANK',
  Bankbranch = 'BANKBRANCH',
  Branch = 'BRANCH',
  Chartsofaccount = 'CHARTSOFACCOUNT',
  Customfield = 'CUSTOMFIELD',
  Declaration = 'DECLARATION',
  Depositiro = 'DEPOSITIRO',
  Depositproduct = 'DEPOSITPRODUCT',
  Depositproductcriteria = 'DEPOSITPRODUCTCRITERIA',
  Deposittds = 'DEPOSITTDS',
  Document = 'DOCUMENT',
  Documentreference = 'DOCUMENTREFERENCE',
  Dynamicentry = 'DYNAMICENTRY',
  Formfield = 'FORMFIELD',
  Formoption = 'FORMOPTION',
  Formsection = 'FORMSECTION',
  Kymaccountoperatordetails = 'KYMACCOUNTOPERATORDETAILS',
  Kymcoopaccountoperatordetails = 'KYMCOOPACCOUNTOPERATORDETAILS',
  Kymcoopdirectordetails = 'KYMCOOPDIRECTORDETAILS',
  Kymcooperative = 'KYMCOOPERATIVE',
  Kymcooperativeunion = 'KYMCOOPERATIVEUNION',
  Kymcooperativeunionpers = 'KYMCOOPERATIVEUNIONPERS',
  Kymdocument = 'KYMDOCUMENT',
  Kymfield = 'KYMFIELD',
  Kymfieldoption = 'KYMFIELDOPTION',
  Kymidentification = 'KYMIDENTIFICATION',
  Kymindividual = 'KYMINDIVIDUAL',
  Kymindividualfamilymembers = 'KYMINDIVIDUALFAMILYMEMBERS',
  Kymindividualincomesource = 'KYMINDIVIDUALINCOMESOURCE',
  Kymindividualoccupation = 'KYMINDIVIDUALOCCUPATION',
  Kyminstitutions = 'KYMINSTITUTIONS',
  Kymsisterconcerndetails = 'KYMSISTERCONCERNDETAILS',
  Loanproduct = 'LOANPRODUCT',
  Loanproductcriteria = 'LOANPRODUCTCRITERIA',
  Member = 'MEMBER',
  Myrauser = 'MYRAUSER',
  Myrauseridetification = 'MYRAUSERIDETIFICATION',
  Organization = 'ORGANIZATION',
  Productdocument = 'PRODUCTDOCUMENT',
  Sharebalance = 'SHAREBALANCE',
  Shareextracharges = 'SHAREEXTRACHARGES',
  Sharenumbers = 'SHARENUMBERS',
  Shareregister = 'SHAREREGISTER',
  User = 'USER',
  Userpreference = 'USERPREFERENCE',
}

export type Identity = {
  id: Scalars['ID'];
  name: Scalars['String'];
  userType: UserType;
  username: Scalars['String'];
};

export enum IdetificationType {
  Citizenship = 'CITIZENSHIP',
  DrivingLicense = 'DRIVING_LICENSE',
  NationalId = 'NATIONAL_ID',
  Passport = 'PASSPORT',
  VoterCard = 'VOTER_CARD',
}

export type IncompleteSection = {
  incomplete?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionName?: Maybe<Scalars['String']>;
};

export type IndividualMember = {
  cooperativeMembership?: Maybe<KymCoopMembershipDetails>;
  declaration?: Maybe<KymIndDeclarations>;
  personalInformation?: Maybe<KymIndPersonalInformation>;
  professionalInformation?: Maybe<KymIndProfessionalInformation>;
};

export enum IndividualRequiredDocument {
  Fingerprint = 'FINGERPRINT',
  Form = 'FORM',
  NomineeDocument = 'NOMINEE_DOCUMENT',
  Photo = 'PHOTO',
  Signature = 'SIGNATURE',
}

export type Installment = {
  dueDate: Scalars['String'];
  dueDateAD?: Maybe<Scalars['String']>;
  fine?: Maybe<Scalars['String']>;
  monthName?: Maybe<Scalars['String']>;
  rebate?: Maybe<Scalars['String']>;
  status: InstallmentState;
};

export type InstallmentResult = {
  data?: Maybe<Array<Maybe<Installment>>>;
  error?: Maybe<QueryError>;
};

export enum InstallmentState {
  Cancelled = 'CANCELLED',
  Overdue = 'OVERDUE',
  Paid = 'PAID',
  Pending = 'PENDING',
}

export type InstitutionAccountOperatoionsDetails = {
  accountOperatorsDetails?: Maybe<Array<Maybe<AccountOperatorDetailsType>>>;
  accountType?: Maybe<AccountOperationType>;
  companyStamp?: Maybe<Scalars['String']>;
  isCompanyStampCompulsory?: Maybe<Scalars['Boolean']>;
  specialInstruction?: Maybe<Scalars['String']>;
};

export type InstitutionDeclaration = {
  accountHolderAddress?: Maybe<KymAddress>;
  accountHolderEmail?: Maybe<Scalars['String']>;
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderPhone?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  institutionDocuments?: Maybe<Array<Maybe<KymInstitutionDocumentsType>>>;
};

export enum InstitutionExpectedMonthlyTransaction {
  Above_25Lakhs = 'ABOVE_25_LAKHS',
  LessThan_10Lakhs = 'LESS_THAN_10_LAKHS',
  LessThan_25Lakhs = 'LESS_THAN_25_LAKHS',
}

export type InstitutionMember = {
  accoountOperationsDetails?: Maybe<InstitutionAccountOperatoionsDetails>;
  declaration?: Maybe<InstitutionDeclaration>;
  organizationInformation?: Maybe<InstitutionOrganizationInformation>;
  proprietorAndDirectorDetails?: Maybe<InstitutionProprietorAndDirectorDetails>;
  transactionProfile?: Maybe<InstitutionTransactionProfile>;
};

export type InstitutionOrganizationInformation = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<KymAddress>;
  dateOfLastAGM?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionTypeId?: Maybe<Scalars['String']>;
  issuingOffice?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['String']>;
  sisterConcernDetails?: Maybe<Array<Maybe<SisterConcernDetailsType>>>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type InstitutionProprietorAndDirectorDetails = {
  detailsOfDirectors?: Maybe<Array<Maybe<DirectorDetailsType>>>;
  detailsOfDirectorsWithAffiliation?: Maybe<Array<Maybe<AffiliatedDirectorDetailsType>>>;
};

export enum InstitutionRequiredDocument {
  Decision = 'DECISION',
  Registered = 'REGISTERED',
  Signature = 'SIGNATURE',
  TaxClearance = 'TAX_CLEARANCE',
}

export type InstitutionTransactionProfile = {
  annualTurnover?: Maybe<Scalars['Float']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
};

export type Insurance = {
  amount?: Maybe<Scalars['Amount']>;
  rate?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['String']>;
};

export type InsuranceType = {
  amount?: InputMaybe<Scalars['Amount']>;
  rate?: InputMaybe<Scalars['Float']>;
  type?: InputMaybe<Scalars['String']>;
};

export type InterestFormState = {
  additionalRate?: Maybe<Scalars['Float']>;
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  defaultRate?: Maybe<Scalars['Float']>;
  interestMethod?: Maybe<InterestMethod>;
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export enum InterestMethod {
  Diminishing = 'DIMINISHING',
  Flat = 'FLAT',
}

export type InterestRate = {
  additionalRate?: InputMaybe<Scalars['Float']>;
  boardAuthority?: InputMaybe<Scalars['Float']>;
  ceoAuthority?: InputMaybe<Scalars['Float']>;
  defaultRate?: InputMaybe<Scalars['Float']>;
  interestMethod?: InputMaybe<InterestMethod>;
  maxRate?: InputMaybe<Scalars['Float']>;
  minRate?: InputMaybe<Scalars['Float']>;
};

export type InterestRateType = {
  boardAuthority?: Maybe<Scalars['Float']>;
  ceoAuthority?: Maybe<Scalars['Float']>;
  defaultRate: Scalars['Float'];
  maxRate?: Maybe<Scalars['Float']>;
  minRate?: Maybe<Scalars['Float']>;
};

export type InvItems = {
  id: Scalars['ID'];
  itemCode: Scalars['String'];
  itemQuantity: Scalars['Float'];
  name: Scalars['String'];
  type: Scalars['String'];
  unitPrice: Scalars['Float'];
};

export type InvItemsAddResult = {
  error?: Maybe<InvItemsError>;
  query?: Maybe<InvItemsQuery>;
  record?: Maybe<InvItems>;
  recordId: Scalars['ID'];
};

export type InvItemsConnection = {
  edges: Array<Maybe<InvItemsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvItemsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsEdge = {
  cursor: Scalars['Cursor'];
  node: InvItems;
};

export type InvItemsError = InvItemsInvalidDataError;

export type InvItemsGroup = {
  description: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupAddResult = {
  error?: Maybe<InvItemsGroupError>;
  query?: Maybe<InvItemsGroupQuery>;
  record?: Maybe<InvItemsGroup>;
  recordId: Scalars['ID'];
};

export type InvItemsGroupConnection = {
  edges: Array<Maybe<InvItemsGroupEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvItemsGroupDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsGroupEdge = {
  cursor: Scalars['Cursor'];
  node: InvItemsGroup;
};

export type InvItemsGroupError = InvItemsGroupInvalidDataError;

export type InvItemsGroupInput = {
  description: Scalars['String'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvItemsGroupMutation = {
  add: InvItemsGroupAddResult;
};

export type InvItemsGroupMutationAddArgs = {
  data: InvItemsGroupInput;
};

export type InvItemsGroupQuery = {
  get: InvItemsGroup;
  list?: Maybe<InvItemsGroupConnection>;
};

export type InvItemsGroupQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvItemsGroupQueryListArgs = {
  filter?: InputMaybe<InvItemsGroupDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvItemsInput = {
  itemCode: Scalars['String'];
  itemGroup: Scalars['String'];
  itemQuantity: Scalars['Float'];
  name: Scalars['String'];
  primaryUnit: Scalars['String'];
  tax: Scalars['String'];
  type: Scalars['String'];
  unitPrice: Scalars['Float'];
};

export type InvItemsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvItemsMutation = {
  add: InvItemsAddResult;
};

export type InvItemsMutationAddArgs = {
  data: InvItemsInput;
};

export type InvItemsQuery = {
  get: InvItems;
  getNewItemCode: Scalars['String'];
  list?: Maybe<InvItemsConnection>;
};

export type InvItemsQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvItemsQueryGetNewItemCodeArgs = {
  type?: InputMaybe<Scalars['String']>;
};

export type InvItemsQueryListArgs = {
  filter?: InputMaybe<InvItemsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvUnitOfMeasure = {
  acceptFraction: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureAddResult = {
  error?: Maybe<InvUnitOfMeasureError>;
  query?: Maybe<InvUnitOfMeasureQuery>;
  record?: Maybe<InvUnitOfMeasure>;
  recordId: Scalars['ID'];
};

export type InvUnitOfMeasureConnection = {
  edges: Array<Maybe<InvUnitOfMeasureEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvUnitOfMeasureDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvUnitOfMeasureEdge = {
  cursor: Scalars['Cursor'];
  node: InvUnitOfMeasure;
};

export type InvUnitOfMeasureError = InvUnitOfMeasureInvalidDataError;

export type InvUnitOfMeasureInput = {
  acceptFraction: Scalars['Boolean'];
  description: Scalars['String'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvUnitOfMeasureMutation = {
  add: InvUnitOfMeasureAddResult;
};

export type InvUnitOfMeasureMutationAddArgs = {
  data: InvUnitOfMeasureInput;
};

export type InvUnitOfMeasureQuery = {
  get: InvUnitOfMeasure;
  list?: Maybe<InvUnitOfMeasureConnection>;
};

export type InvUnitOfMeasureQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvUnitOfMeasureQueryListArgs = {
  filter?: InputMaybe<InvUnitOfMeasureDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvVendors = {
  email: Scalars['String'];
  id: Scalars['ID'];
  location: Scalars['String'];
  name: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type InvVendorsAddResult = {
  error?: Maybe<InvVendorsError>;
  query?: Maybe<InvVendorsQuery>;
  record?: Maybe<InvVendors>;
  recordId: Scalars['ID'];
};

export type InvVendorsConnection = {
  edges: Array<Maybe<InvVendorsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvVendorsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvVendorsEdge = {
  cursor: Scalars['Cursor'];
  node: InvVendors;
};

export type InvVendorsError = InvVendorsInvalidDataError;

export type InvVendorsInput = {
  contactName: Scalars['String'];
  contactPhoneNo: Scalars['String'];
  creditLimit?: InputMaybe<Scalars['Float']>;
  creditTerms?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  location: Scalars['String'];
  name: Scalars['String'];
  openingBalance?: InputMaybe<Scalars['Float']>;
  panNo: Scalars['String'];
  phoneNumber: Scalars['String'];
  vendorCode: Scalars['String'];
};

export type InvVendorsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvVendorsMutation = {
  add: InvVendorsAddResult;
};

export type InvVendorsMutationAddArgs = {
  data: InvVendorsInput;
};

export type InvVendorsQuery = {
  get: InvVendors;
  list?: Maybe<InvVendorsConnection>;
};

export type InvVendorsQueryGetArgs = {
  id: Scalars['ID'];
};

export type InvVendorsQueryListArgs = {
  filter?: InputMaybe<InvVendorsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InventoryMutation = {
  items?: Maybe<InvItemsMutation>;
  itemsGroup?: Maybe<InvItemsGroupMutation>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureMutation>;
  vendors?: Maybe<InvVendorsMutation>;
};

export type InventoryQuery = {
  items?: Maybe<InvItemsQuery>;
  itemsGroup?: Maybe<InvItemsGroupQuery>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureQuery>;
  vendors?: Maybe<InvVendorsQuery>;
};

export type JournalChartsOfAccount = {
  journalCode: Scalars['String'];
};

export type KymAddress = {
  coordinates?: Maybe<Coordinate>;
  districtId?: Maybe<Scalars['Int']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['Localized']>;
  provinceId?: Maybe<Scalars['Int']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type KymAddressInput = {
  coordinates?: InputMaybe<CoordinateInput>;
  districtId?: InputMaybe<Scalars['Int']>;
  houseNo?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type KymDeclaration = Base & {
  content: Scalars['Localized'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  for: DeclarationFor;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type KymDynamicEntry = {
  fieldId: Scalars['String'];
  id: Scalars['ID'];
  value: Scalars['Localized'];
};

export type KymDynamicEntryFilter = {
  fieldName?: InputMaybe<Scalars['String']>;
  foreignId: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  sectionId?: InputMaybe<Scalars['String']>;
};

export type KymDynamicEntryResult = {
  data?: Maybe<Array<Maybe<KymDynamicEntry>>>;
  error?: Maybe<QueryError>;
};

export type KymEntryInput = {
  fieldId: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  parentSectionId: Scalars['String'];
  value: Scalars['Localized'];
};

export type KymEntryMutation = {
  upsertDynamic: KymEntryMutationResult;
};

export type KymEntryMutationUpsertDynamicArgs = {
  data: KymEntryInput;
};

export type KymEntryMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymEntryQuery>;
  record?: Maybe<KymDynamicEntry>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymEntryQuery = {
  getDynamic?: Maybe<KymDynamicEntryResult>;
};

export type KymEntryQueryGetDynamicArgs = {
  filter: KymDynamicEntryFilter;
};

export type KymFieldData = {
  id?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
};

export type KymFieldInputData = {
  id?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
};

export type KymGeneralSettingsMutation = {
  generalMember?: Maybe<GeneralMemberResult>;
};

export type KymGeneralSettingsMutationGeneralMemberArgs = {
  data: GeneralMemberInput;
};

export type KymGeneralSettingsQuery = {
  generalMember?: Maybe<GeneralMemberResult>;
};

export type KymIndBasicInformation = {
  age?: Maybe<Scalars['Int']>;
  dateOfBirth?: Maybe<Scalars['String']>;
  educationQualificationId?: Maybe<Scalars['String']>;
  ethnicityId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['Localized']>;
  gender?: Maybe<Scalars['Localized']>;
  genderId?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['Localized']>;
  middleName?: Maybe<Scalars['Localized']>;
  nationalityId?: Maybe<Scalars['String']>;
  religionId?: Maybe<Scalars['String']>;
};

export type KymIndContactDetails = {
  email?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

export type KymIndDeclaration = {
  beneficialFullName?: Maybe<Scalars['Localized']>;
  beneficialRelationshipId?: Maybe<Scalars['String']>;
  convictedDetails?: Maybe<Scalars['String']>;
  declarationAgreement?: Maybe<Scalars['Boolean']>;
  foreignResidentialPermitTypeId?: Maybe<Scalars['String']>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  politicallyExposedDetails?: Maybe<Scalars['String']>;
};

export type KymIndEstimatedTransactions = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['String']>;
};

export type KymIndFamilyMember = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  dateOfBirth?: Maybe<Scalars['String']>;
  familyMemberId?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['Localized']>;
  id: Scalars['String'];
  relationshipId?: Maybe<Scalars['String']>;
};

export type KymIndFamilyMemberInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  dateOfBirth?: InputMaybe<Scalars['String']>;
  familyMemberId?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  relationshipId?: InputMaybe<Scalars['String']>;
};

export type KymIndFamilyMemberMutation = {
  delete: KymIndFamilyMemberResult;
  upsert: KymIndFamilyMemberResult;
};

export type KymIndFamilyMemberMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndFamilyMemberMutationUpsertArgs = {
  data: KymIndFamilyMemberInput;
};

export type KymIndFamilyMemberQueryResult = {
  data?: Maybe<Array<Maybe<KymIndFamilyMember>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndFamilyMemberResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndFamilyMember>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndForeignEmployment = {
  foreignEmpCountryId?: Maybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: Maybe<Scalars['String']>;
  isForeignEmployment?: Maybe<Scalars['Boolean']>;
  typeOfVisaId?: Maybe<Scalars['String']>;
};

export type KymIndIdentification = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  date?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  idNo?: Maybe<Scalars['String']>;
  idType: Scalars['String'];
  place?: Maybe<Scalars['Localized']>;
};

export type KymIndIdentificationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  date?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  idNo?: InputMaybe<Scalars['String']>;
  idType: Scalars['String'];
  place?: InputMaybe<Scalars['String']>;
};

export type KymIndIdentificationMutation = {
  delete: KymIndIdentificationResult;
  upsert: KymIndIdentificationResult;
};

export type KymIndIdentificationMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndIdentificationMutationUpsertArgs = {
  data: KymIndIdentificationInput;
};

export type KymIndIdentificationQueryResult = {
  data?: Maybe<Array<Maybe<KymIndIdentification>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndIdentificationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndIdentification>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndIncomeSource = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  amount?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  incomeSource?: Maybe<Scalars['Localized']>;
};

export type KymIndIncomeSourceInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  incomeSource?: InputMaybe<Scalars['String']>;
};

export type KymIndIncomeSourceMutation = {
  delete: KymIndIncomeSourceResult;
  upsert: KymIndIncomeSourceResult;
};

export type KymIndIncomeSourceMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndIncomeSourceMutationUpsertArgs = {
  data: KymIndIncomeSourceInput;
};

export type KymIndIncomeSourceQueryResult = {
  data?: Maybe<Array<Maybe<KymIndIncomeSource>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndIncomeSourceResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndIncomeSource>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndInitialTransactionDetails = {
  initialLoan?: Maybe<Scalars['String']>;
  initialSaving?: Maybe<Scalars['String']>;
  initialShare?: Maybe<Scalars['Int']>;
  otherFinancialAmount?: Maybe<Scalars['String']>;
};

export type KymIndIntroducers = {
  firstIntroducerId?: Maybe<Scalars['String']>;
  secondIntroducerId?: Maybe<Scalars['String']>;
};

export type KymIndMembershipDetails = {
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  otherCoopBranchId?: Maybe<Scalars['String']>;
  otherCoopMemberId?: Maybe<Scalars['String']>;
  otherCoopName?: Maybe<Scalars['Localized']>;
  purposeId?: Maybe<Scalars['String']>;
};

export type KymIndOccupation = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  address?: Maybe<Scalars['Localized']>;
  contact?: Maybe<Scalars['String']>;
  establishedDate?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  isOwner?: Maybe<Scalars['Boolean']>;
  occupationId?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['Localized']>;
  panVatNo?: Maybe<Scalars['String']>;
  registrationNo?: Maybe<Scalars['String']>;
};

export type KymIndOccupationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['String']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  isOwner?: InputMaybe<Scalars['Boolean']>;
  occupationId?: InputMaybe<Scalars['String']>;
  orgName?: InputMaybe<Scalars['String']>;
  panVatNo?: InputMaybe<Scalars['String']>;
  registrationNo?: InputMaybe<Scalars['String']>;
};

export type KymIndOccupationMutation = {
  delete: KymIndOccupationResult;
  upsert: KymIndOccupationResult;
};

export type KymIndOccupationMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymIndOccupationMutationUpsertArgs = {
  data: KymIndOccupationInput;
  isSpouse: Scalars['Boolean'];
};

export type KymIndOccupationQueryResult = {
  data?: Maybe<Array<Maybe<KymIndOccupation>>>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndOccupationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndOccupation>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymIndProfession = {
  otherProfession?: Maybe<Scalars['String']>;
  professionId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type KymIndRentedHouse = {
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['Localized']>;
};

export type KymIndTemporaryAddress = {
  address?: Maybe<KymAddress>;
  sameTempAsPermanentAddress?: Maybe<Scalars['Boolean']>;
};

export type KymMutation = {
  general?: Maybe<KymGeneralSettingsMutation>;
};

export type KymQuery = {
  general?: Maybe<KymGeneralSettingsQuery>;
};

export type KymAdditionalFields = {
  fieldId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type KymAdditionalFieldsFormState = {
  fieldId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Localized']>;
};

export type KymAdditionalFieldsType = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type KymCoopAccountOperatorDetails = {
  Delete?: Maybe<KymCooperativeAddResult>;
  Upsert?: Maybe<KymCooperativeAddResult>;
};

export type KymCoopAccountOperatorDetailsDeleteArgs = {
  accOperatorId: Scalars['ID'];
};

export type KymCoopAccountOperatorDetailsUpsertArgs = {
  accOperatorId: Scalars['ID'];
  data: KymCoopAccountOperatorDetailsFormInput;
};

export type KymCoopAccountOperatorDetailsFormInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  coopRelatedTraining?: InputMaybe<Array<InputMaybe<CoopRelatedTraining>>>;
  cooperativeId?: InputMaybe<Scalars['ID']>;
  dateOfMembership?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymCoopAccountOperatorQuery = {
  data?: Maybe<Array<Maybe<KymCooperativeAccountOperatorDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymCoopDirectorDetails = {
  Delete?: Maybe<KymCooperativeAddResult>;
  Upsert?: Maybe<KymCooperativeAddResult>;
};

export type KymCoopDirectorDetailsDeleteArgs = {
  dirId: Scalars['ID'];
};

export type KymCoopDirectorDetailsUpsertArgs = {
  data: KymCoopDirectorDetailsFormInput;
  dirId: Scalars['ID'];
};

export type KymCoopDirectorDetailsFormInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  cooperativeId?: InputMaybe<Scalars['ID']>;
  dateOfMembership?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  nameEn?: InputMaybe<Scalars['String']>;
  nameNp?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymCoopDirectorQuery = {
  data?: Maybe<Array<Maybe<KymCooperativeBodDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymCoopMembershipDetails = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['ID']>;
  familyMemberInThisCooperative?: Maybe<Array<Maybe<KymFamilyMemberDetailsInThisCooperativeType>>>;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  loan?: Maybe<Scalars['Float']>;
  memberIdentityLevel?: Maybe<MemberIdentityLevel>;
  other?: Maybe<Scalars['Float']>;
  purposeId?: Maybe<Scalars['ID']>;
  savings?: Maybe<Scalars['Float']>;
  share?: Maybe<Scalars['Int']>;
};

export type KymCoopUnionAccountOperatorDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type KymCoopUnionAccountOperatorLus = {
  name: KymCoopUnionAccountOperatorSection;
};

export enum KymCoopUnionAccountOperatorSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
}

export type KymCoopUnionAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorSection>>>;
};

export type KymCoopUnionAddError = KymCoopUnionAddInvalidDataError;

export type KymCoopUnionAddFormStatus = {
  formData?: Maybe<CooperativeUnionMember>;
  lastUpdated?: Maybe<KymCoopUnionAddLus>;
  sectionStatus?: Maybe<KymCoopUnionAddSectionStatus>;
};

export type KymCoopUnionAddInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymCoopUnionAddLus =
  | KymCoopUnionAccountOperatorLus
  | KymCoopUnionBodlus
  | KymCoopUnionCentralRepresentativeLus
  | KymCoopUnionDeclarationLus
  | KymCoopUnionEconomicDetailsLus
  | KymCoopUnionInstitutionInformationLus;

export type KymCoopUnionAddSectionStatus = {
  accountOperatorDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  bodDetails?: Maybe<Array<Maybe<KymFormStatus>>>;
  centralRepresentativeDetails?: Maybe<KymFormStatus>;
  declaration?: Maybe<KymFormStatus>;
  economicDetails?: Maybe<KymFormStatus>;
  institutionInformation?: Maybe<KymFormStatus>;
};

export type KymCoopUnionBodDetails = {
  citizenshipOrPassportOrLicenseNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullNameNp?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isCentralRepresentative?: Maybe<Scalars['Boolean']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['Int']>;
  permanentHouseNo?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalGovtId?: Maybe<Scalars['Int']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentProvinceId?: Maybe<Scalars['Int']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['Int']>;
  temporaryHouseNo?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalGovtId?: Maybe<Scalars['Int']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryProvinceId?: Maybe<Scalars['Int']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingAttended?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
};

export type KymCoopUnionBodlus = {
  name: KymCoopUnionBodSection;
};

export enum KymCoopUnionBodSection {
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
}

export type KymCoopUnionBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionBodSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionBodSection>>>;
};

export type KymCoopUnionCentralRepresentativeLus = {
  name: KymCoopUnionCentralRepresentativeSection;
};

export enum KymCoopUnionCentralRepresentativeSection {
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
}

export type KymCoopUnionCentralRepresentativeStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionCentralRepresentativeSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionCentralRepresentativeSection>>>;
};

export type KymCoopUnionDeclarationLus = {
  name: KymCoopUnionDeclarationSection;
};

export enum KymCoopUnionDeclarationSection {
  DocumentsDeclaration = 'DOCUMENTS_DECLARATION',
}

export type KymCoopUnionDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionDeclarationSection>>>;
};

export type KymCoopUnionDeletion = {
  recordId: Scalars['ID'];
};

export type KymCoopUnionDocuments = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionDocumentsInput = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionEconomicDetailsLus = {
  name: KymCoopUnionEconomicDetailsSection;
};

export enum KymCoopUnionEconomicDetailsSection {
  Assets = 'ASSETS',
  EquityAndLiabilities = 'EQUITY_AND_LIABILITIES',
  ExpenseDetails = 'EXPENSE_DETAILS',
  IncomeDetails = 'INCOME_DETAILS',
}

export type KymCoopUnionEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionEconomicDetailsSection>>>;
};

export type KymCoopUnionFormStateQuery = {
  data?: Maybe<KymCoopUnionAddFormStatus>;
};

export type KymCoopUnionInstitutionInformationLus = {
  name: KymCoopUnionInstitutionInformationSection;
};

export enum KymCoopUnionInstitutionInformationSection {
  Applicant = 'APPLICANT',
  BankDetails = 'BANK_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  CooperativeMemberInformation = 'COOPERATIVE_MEMBER_INFORMATION',
  RegisteredDetails = 'REGISTERED_DETAILS',
}

export type KymCoopUnionInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionInstitutionInformationSection>>>;
};

export type KymCoopUnionMutation = {
  add?: Maybe<KymCoopUnionSectionMutation>;
  delete?: Maybe<KymCoopUnionDeletion>;
  deletePersonnel?: Maybe<KymCoopUnionDeletion>;
};

export type KymCoopUnionMutationAddArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionMutationDeleteArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionMutationDeletePersonnelArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionQuery = {
  formState?: Maybe<KymCoopUnionAddFormStatus>;
};

export type KymCoopUnionQueryFormStateArgs = {
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
};

export type KymCoopUnionSectionMutation = {
  declaration?: Maybe<CoopUnionDeclarationResult>;
  economicDetails?: Maybe<CoopUnionEconomicDetailsResult>;
  institutionInformation?: Maybe<CoopUnionInstitutionInformationResult>;
  personnelDetails?: Maybe<CoopUnionPersonnelDetailsResult>;
};

export type KymCoopUnionSectionMutationDeclarationArgs = {
  data?: InputMaybe<CoopUnionDeclarationInput>;
};

export type KymCoopUnionSectionMutationEconomicDetailsArgs = {
  data?: InputMaybe<CoopUnionEconomicDetailsInput>;
};

export type KymCoopUnionSectionMutationInstitutionInformationArgs = {
  data?: InputMaybe<CoopUnionInstitutionInformationInput>;
};

export type KymCoopUnionSectionMutationPersonnelDetailsArgs = {
  data?: InputMaybe<CoopUnionPersonnelInput>;
  recordId?: InputMaybe<Scalars['String']>;
  sectionType: CooperativeUnionPersonnelSection;
};

export type KymCooperativeAccountOperatorDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  coopRelatedTraining?: Maybe<Array<Maybe<CoopRelatedTrainingType>>>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type KymCooperativeAccountOperatorDetailsInput = {
  citizenshipNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['String']>;
  dateofTrainig?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeAccountOperatorLus = {
  name: KymCooperativeAccountOperatorSection;
};

export enum KymCooperativeAccountOperatorSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
}

export type KymCooperativeAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
};

export type KymCooperativeAddFormStatus = {
  formData?: Maybe<KymCooperativeFormData>;
  lastUpdated: KymCooperativeAddLus;
  sectionStatus?: Maybe<KymCooperativeAddSectionStatus>;
};

export type KymCooperativeAddLus =
  | KymCooperativeAccountOperatorLus
  | KymCooperativeBodlus
  | KymCooperativeDeclarationLus
  | KymCooperativeEconomicDetailsLus
  | KymCooperativeInstitutionInformationLus;

export type KymCooperativeAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymCooperativeQuery>;
  record?: Maybe<KymCooperativeGetResult>;
  recordId: Scalars['ID'];
};

export type KymCooperativeAddSectionStatus = {
  accountOperatorDetails?: Maybe<KymCooperativeAccountOperatorStatus>;
  bodDetails?: Maybe<KymCooperativeBodDetailsStatus>;
  declaration?: Maybe<KymCooperativeDeclarationStatus>;
  economicDetails?: Maybe<KymCooperativeEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCooperativeInstitutionalInformationStatus>;
};

export type KymCooperativeBodDetailsFormState = {
  citizenshipNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  panNo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type KymCooperativeBodDetailsInput = {
  citizenshipNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
};

export type KymCooperativeBodlus = {
  name: KymCooperativeBodSection;
};

export enum KymCooperativeBodSection {
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
}

export type KymCooperativeBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
};

export type KymCooperativeDeclarationLus = {
  name: KymCooperativeDeclarationSection;
};

export enum KymCooperativeDeclarationSection {
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  DocumentDeclaration = 'DOCUMENT_DECLARATION',
}

export type KymCooperativeDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
};

export type KymCooperativeDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeDocumentsInput = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeEconomicDetailsLus = {
  name: KymCooperativeEconomicDetailsSection;
};

export enum KymCooperativeEconomicDetailsSection {
  Assets = 'ASSETS',
  EquityAndLiabilities = 'EQUITY_AND_LIABILITIES',
}

export type KymCooperativeEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
};

export type KymCooperativeFormData = {
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountHoldersName?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['Float']>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeTypeId?: Maybe<Scalars['String']>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  email?: Maybe<Scalars['String']>;
  hasTCAccepted?: Maybe<Scalars['Boolean']>;
  investments?: Maybe<Scalars['Float']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  lastAgmDate?: Maybe<Scalars['String']>;
  lastAuditDate?: Maybe<Scalars['String']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  operatingAddress?: Maybe<KymAddress>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  permanentRepresentativeAddress?: Maybe<KymAddress>;
  regdDate?: Maybe<Scalars['String']>;
  regdNumber?: Maybe<Scalars['Int']>;
  regdOffice?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  representativeContactNumber?: Maybe<Scalars['String']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeEmail?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  representativePanNo?: Maybe<Scalars['String']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
  temporaryRepresentativeAddress?: Maybe<KymAddress>;
  totalAssets?: Maybe<Scalars['Float']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  totalEquityAndLiabilities?: Maybe<Scalars['Float']>;
  website?: Maybe<Scalars['String']>;
};

export type KymCooperativeFormInput = {
  accountHoldersName?: InputMaybe<Scalars['String']>;
  bank?: InputMaybe<Scalars['Float']>;
  capitalGrant?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalent?: InputMaybe<Scalars['Float']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  cooperativeTypeId?: InputMaybe<Scalars['String']>;
  currentLiabilities?: InputMaybe<Scalars['Float']>;
  email?: InputMaybe<Scalars['String']>;
  hasTCAccepted?: InputMaybe<Scalars['Boolean']>;
  investments?: InputMaybe<Scalars['Float']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  lastAgmDate?: InputMaybe<Scalars['String']>;
  lastAuditDate?: InputMaybe<Scalars['String']>;
  loan?: InputMaybe<Scalars['Float']>;
  loanAccount?: InputMaybe<Scalars['Float']>;
  mainServiceProduct?: InputMaybe<Scalars['String']>;
  nameOfOrganization?: InputMaybe<Scalars['String']>;
  noOfFemaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMembers?: InputMaybe<Scalars['Int']>;
  noOfMaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfMaleMembers?: InputMaybe<Scalars['Int']>;
  noOfOtherMembers?: InputMaybe<Scalars['Int']>;
  nonCurrentAssets?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilities?: InputMaybe<Scalars['Float']>;
  operatingAddress?: InputMaybe<KymAddressInput>;
  otherNonCurrentAssets?: InputMaybe<Scalars['Float']>;
  permanentRepresentativeAddress?: InputMaybe<KymAddressInput>;
  regdDate?: InputMaybe<Scalars['String']>;
  regdNumber?: InputMaybe<Scalars['Int']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<KymAddressInput>;
  representativeContactNumber?: InputMaybe<Scalars['String']>;
  representativeDesignatiton?: InputMaybe<Scalars['String']>;
  representativeEmail?: InputMaybe<Scalars['String']>;
  representativeFullName?: InputMaybe<Scalars['String']>;
  representativePanNo?: InputMaybe<Scalars['String']>;
  reserveAndSurplus?: InputMaybe<Scalars['Float']>;
  savingDeposit?: InputMaybe<Scalars['Float']>;
  shareCapital?: InputMaybe<Scalars['Float']>;
  temporaryRepresentativeAddress?: InputMaybe<KymAddressInput>;
  totalAssets?: InputMaybe<Scalars['Float']>;
  totalEmployee?: InputMaybe<Scalars['Int']>;
  totalEquityLiabilities?: InputMaybe<Scalars['Float']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeFormStateQuery = {
  data?: Maybe<KymCooperativeAddFormStatus>;
  error?: Maybe<QueryError>;
};

export type KymCooperativeGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymCooperativeAddFormStatus>;
};

export type KymCooperativeInstitutionInformationLus = {
  name: KymCooperativeInstitutionInformationSection;
};

export enum KymCooperativeInstitutionInformationSection {
  AdditionalCooperativeDetails = 'ADDITIONAL_COOPERATIVE_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  CurrentMembers = 'CURRENT_MEMBERS',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  OperatingAddress = 'OPERATING_ADDRESS',
  RegisteredAddress = 'REGISTERED_ADDRESS',
  Representative = 'REPRESENTATIVE',
}

export type KymCooperativeInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
};

export type KymCooperativeMutation = {
  accountOperatorDetail?: Maybe<KymCoopAccountOperatorDetails>;
  add?: Maybe<KymCooperativeAddResult>;
  directorDetails?: Maybe<KymCoopDirectorDetails>;
};

export type KymCooperativeMutationAddArgs = {
  data: KymCooperativeFormInput;
};

export type KymCooperativeQuery = {
  formState?: Maybe<KymCooperativeFormStateQuery>;
  listAccountOperators?: Maybe<KymCoopAccountOperatorQuery>;
  listDirectors?: Maybe<KymCoopDirectorQuery>;
};

export type KymCooperativeQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeQueryListAccountOperatorsArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeQueryListDirectorsArgs = {
  id: Scalars['ID'];
};

export type KymCooperativeUnionPersonnelDetails = {
  personnelDetails?: Maybe<Array<Maybe<CoopUnionPersonnelDetails>>>;
};

export type KymCooperativeUnionPersonnelDetailsResult = {
  data?: Maybe<KymCooperativeUnionPersonnelDetails>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<Array<Maybe<KymFormStatus>>>;
};

export type KymDocuments = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsType = {
  documentsUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymFamilyDetails = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsFormState = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsType = {
  fullName?: Maybe<Scalars['String']>;
  relationshipId: Scalars['ID'];
};

export type KymFamilyMemberDetailsInThisCooperative = {
  memberId?: InputMaybe<Scalars['ID']>;
  relationshipId?: InputMaybe<Scalars['ID']>;
};

export type KymFamilyMemberDetailsInThisCooperativeFormState = {
  memberId?: Maybe<Scalars['ID']>;
  relationshipId?: Maybe<Scalars['ID']>;
};

export type KymFamilyMemberDetailsInThisCooperativeType = {
  fullName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  relationshipId: Scalars['ID'];
};

export type KymFormSectionStatus = {
  errors?: Maybe<Array<Scalars['String']>>;
  incomplete?: Maybe<Array<Scalars['String']>>;
};

export type KymFormStatus = {
  errors?: Maybe<Scalars['InvalidData']>;
  id?: Maybe<Scalars['ID']>;
  sectionStatus?: Maybe<KymFormSectionStatus>;
};

export type KymIdentification = {
  fields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymIdentificationFormState = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  id: Scalars['ID'];
};

export type KymIdentificationType = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsType>>>;
  id?: Maybe<Scalars['ID']>;
};

export type KymIncomeSourceDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['Float']>;
  source?: InputMaybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsFormState = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsType = {
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIndAddError = KymIndAddInvalidDataError;

export type KymIndAddFormStatus = {
  lastUpdated?: Maybe<KymIndAddLus>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndAddInvalidDataError = {
  error?: Maybe<Array<Maybe<SectionWiseError>>>;
};

export type KymIndAddLus =
  | KymIndCooperativeLus
  | KymIndDeclarationLus
  | KymIndPersonalLus
  | KymIndProfessionalLus;

export type KymIndAddLastUpdated = {
  cooperativeMembership?: Maybe<KymIndCooperativeMemberStatus>;
  declaration?: Maybe<KymIndDeclarationStatus>;
  personal?: Maybe<KymIndPersonalStatus>;
  professional?: Maybe<KymIndProfessionalStatus>;
};

export type KymIndAddResult = {
  error?: Maybe<KymIndAddError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndGetResult>;
  recordId: Scalars['ID'];
};

export type KymIndCooperativeLus = {
  name: KymIndPersonalSection;
};

export enum KymIndCooperativeMemberSection {
  EstimatedAmount = 'ESTIMATED_AMOUNT',
  IsFamilyAMember = 'IS_FAMILY_A_MEMBER',
  MemberOfAnotherCooperative = 'MEMBER_OF_ANOTHER_COOPERATIVE',
  Purpose = 'PURPOSE',
  TransactionDetails = 'TRANSACTION_DETAILS',
}

export type KymIndCooperativeMemberStatus = {
  completed?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
  error?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
};

export type KymIndDeclarationLus = {
  name: KymIndPersonalSection;
};

export enum KymIndDeclarationSection {
  BeneficialOwner = 'BENEFICIAL_OWNER',
  Conviction = 'CONVICTION',
  FamilyMemberInPolitics = 'FAMILY_MEMBER_IN_POLITICS',
  ForeignResidentialPermit = 'FOREIGN_RESIDENTIAL_PERMIT',
}

export type KymIndDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
};

export type KymIndDeclarations = {
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['ID']>;
  convictionDetails?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<KymDocumentsType>>>;
  foreignResidentialPermitDetails?: Maybe<Array<Maybe<KymIdentificationType>>>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  localKinAddress?: Maybe<Scalars['String']>;
  localKinContact?: Maybe<Scalars['String']>;
  localKinName?: Maybe<Scalars['String']>;
  localKinRelationshipId?: Maybe<Scalars['ID']>;
};

export type KymIndFormData = {
  annualIncomeSourceId?: Maybe<Scalars['String']>;
  basicInformation?: Maybe<KymIndBasicInformation>;
  contactDetails?: Maybe<KymIndContactDetails>;
  declaration?: Maybe<KymIndDeclaration>;
  estimatedTransactions?: Maybe<KymIndEstimatedTransactions>;
  foreignEmployment?: Maybe<KymIndForeignEmployment>;
  identificationSelection?: Maybe<Array<Maybe<Scalars['String']>>>;
  initialTransactionDetails?: Maybe<KymIndInitialTransactionDetails>;
  introducers?: Maybe<KymIndIntroducers>;
  isFamilyAMember?: Maybe<Scalars['Boolean']>;
  maritalStatus?: Maybe<Scalars['Localized']>;
  maritalStatusId?: Maybe<Scalars['String']>;
  membershipDetails?: Maybe<KymIndMembershipDetails>;
  permanentAddress?: Maybe<KymAddress>;
  profession?: Maybe<KymIndProfession>;
  rentedHouse?: Maybe<KymIndRentedHouse>;
  temporaryAddress?: Maybe<KymIndTemporaryAddress>;
};

export type KymIndFormState = {
  formData?: Maybe<KymIndFormData>;
};

export type KymIndFormStateQuery = {
  data?: Maybe<KymIndFormState>;
  error?: Maybe<QueryError>;
  sectionStatus?: Maybe<KymFormStatus>;
};

export type KymIndGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymIndAddFormStatus>;
};

export type KymIndMemberInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['String']>;
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['String']>;
  convictedDetails?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['String']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  educationQualificationId?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['String']>;
  firstIntroducerId?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  foreignEmpCountryId?: InputMaybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  foreignResidentialPermitTypeId?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['String']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  identificationSelection?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  initialLoan?: InputMaybe<Scalars['String']>;
  initialSaving?: InputMaybe<Scalars['String']>;
  initialShare?: InputMaybe<Scalars['Int']>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isFamilyAMember?: InputMaybe<Scalars['Boolean']>;
  isForeignEmployment?: InputMaybe<Scalars['Boolean']>;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  maritalStatusId?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  nationalityId?: InputMaybe<Scalars['String']>;
  otherCoopBranchId?: InputMaybe<Scalars['String']>;
  otherCoopMemberId?: InputMaybe<Scalars['String']>;
  otherCoopName?: InputMaybe<Scalars['String']>;
  otherFinancialAmount?: InputMaybe<Scalars['String']>;
  otherProfession?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  politicallyExposedDetails?: InputMaybe<Scalars['String']>;
  professionId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purposeId?: InputMaybe<Scalars['String']>;
  religionId?: InputMaybe<Scalars['String']>;
  sameTempAsPermanentAddress?: InputMaybe<Scalars['Boolean']>;
  secondIntroducerId?: InputMaybe<Scalars['String']>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  typeOfVisaId?: InputMaybe<Scalars['String']>;
};

export type KymIndMutation = {
  add?: Maybe<KymIndAddResult>;
  familyMember: KymIndFamilyMemberMutation;
  identification: KymIndIdentificationMutation;
  incomeSource: KymIndIncomeSourceMutation;
  occupation: KymIndOccupationMutation;
};

export type KymIndMutationAddArgs = {
  data: KymIndMemberInput;
};

export type KymIndPersonalInformation = {
  contact?: Maybe<Contact>;
  dateOfBirth?: Maybe<Scalars['String']>;
  educationQualificationId?: Maybe<Scalars['ID']>;
  ethnicityId?: Maybe<Scalars['ID']>;
  familyDetails?: Maybe<Array<Maybe<KymFamilyDetailsType>>>;
  firstName: Scalars['String'];
  genderId?: Maybe<Scalars['ID']>;
  identification?: Maybe<Array<Maybe<KymIdentificationType>>>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['ID']>;
  middleName?: Maybe<Scalars['String']>;
  nationalityId?: Maybe<Scalars['ID']>;
  permanentAddress?: Maybe<Address>;
  religionId?: Maybe<Scalars['ID']>;
  temporaryAddress?: Maybe<Address>;
};

export type KymIndPersonalLus = {
  name: KymIndPersonalSection;
};

export enum KymIndPersonalSection {
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  FamilyDetails = 'FAMILY_DETAILS',
  IdentificationDetails = 'IDENTIFICATION_DETAILS',
  PermanentAddress = 'PERMANENT_ADDRESS',
  RentedHouse = 'RENTED_HOUSE',
  TemporaryAddress = 'TEMPORARY_ADDRESS',
}

export type KymIndPersonalStatus = {
  completed?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
  error?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
};

export type KymIndProfessionalInformation = {
  annualIncomeSourceId?: Maybe<Scalars['ID']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymIncomeSourceDetailsType>>>;
  mainOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
  occupationId?: Maybe<Scalars['ID']>;
  spouseOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
};

export type KymIndProfessionalLus = {
  name: KymIndPersonalSection;
};

export enum KymIndProfessionalSection {
  IncomeSource = 'INCOME_SOURCE',
  MainProfession = 'MAIN_PROFESSION',
  Profession = 'PROFESSION',
  SpouseOccupation = 'SPOUSE_OCCUPATION',
}

export type KymIndProfessionalStatus = {
  completed?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
  error?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
};

export type KymIndQuery = {
  formState?: Maybe<KymIndFormStateQuery>;
  listFamilyMember?: Maybe<KymIndFamilyMemberQueryResult>;
  listIdentification?: Maybe<KymIndIdentificationQueryResult>;
  listIncomeSource?: Maybe<KymIndIncomeSourceQueryResult>;
  listOccupation?: Maybe<KymIndOccupationQueryResult>;
};

export type KymIndQueryListFamilyMemberArgs = {
  isMember?: InputMaybe<Scalars['Boolean']>;
};

export type KymIndQueryListOccupationArgs = {
  isSpouse: Scalars['Boolean'];
};

export type KymInsAccountLus = {
  name: KymInsAccountSection;
};

export type KymInsAccountOperator = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsAccountOperatorDeleteArgs = {
  operatorId: Scalars['ID'];
};

export type KymInsAccountOperatorUpsertArgs = {
  data: KymInsAccountOperatorInput;
  operatorId: Scalars['ID'];
};

export type KymInsAccountOperatorInput = {
  contact?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export enum KymInsAccountSection {
  AccountOperationInstruction = 'ACCOUNT_OPERATION_INSTRUCTION',
  DetailsOfAccountOperators = 'DETAILS_OF_ACCOUNT_OPERATORS',
}

export type KymInsAccountStatus = {
  completed?: Maybe<Array<Maybe<KymInsAccountSection>>>;
  error?: Maybe<Array<Maybe<KymInsAccountSection>>>;
};

export type KymInsAddLus =
  | KymInsAccountLus
  | KymInsDeclarationLus
  | KymInsDirectorDetailsLus
  | KymInsInformationLus
  | KymInsTransactionLus;

export type KymInsAddResult = {
  error?: Maybe<KymIndAddError>;
  query?: Maybe<KymInsQuery>;
  record?: Maybe<KymInsRecord>;
  recordId: Scalars['ID'];
};

export type KymInsAddSectionStatus = {
  account?: Maybe<KymInsAccountStatus>;
  declaration?: Maybe<KymInsDeclarationStatus>;
  directorDetails?: Maybe<KymInsDirectorDetailsStatus>;
  information?: Maybe<KymInsInformationStatus>;
  transaction?: Maybe<KymInsTransactionStatus>;
};

export type KymInsDeclarationLus = {
  name: KymInsDeclarationSection;
};

export enum KymInsDeclarationSection {
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  DocumentsDeclaration = 'DOCUMENTS_DECLARATION',
}

export type KymInsDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
};

export type KymInsDirector = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsDirectorDeleteArgs = {
  directorId: Scalars['ID'];
};

export type KymInsDirectorUpsertArgs = {
  data: KymInsDirectorInput;
  directorId: Scalars['ID'];
};

export type KymInsDirectorAffiliatedFirmInput = {
  address?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  directorName?: InputMaybe<Scalars['String']>;
  institutionName?: InputMaybe<Scalars['String']>;
  yearlyIncome?: InputMaybe<Scalars['Float']>;
};

export type KymInsDirectorDetailsLus = {
  name: KymInsDirectorDetailsSection;
};

export enum KymInsDirectorDetailsSection {
  DetailsOfDirectors = 'DETAILS_OF_DIRECTORS',
  DetailsOfDirectorsAffiliated = 'DETAILS_OF_DIRECTORS_AFFILIATED',
}

export type KymInsDirectorDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
};

export type KymInsDirectorInput = {
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firmDetails?: InputMaybe<KymInsDirectorAffiliatedFirmInput>;
  highestQualification?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  isAffiliatedWithOtherFirms?: InputMaybe<Scalars['Boolean']>;
  isHeadOfOrganization?: InputMaybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type KymInsFormData = {
  accountHolderAddress?: Maybe<KymAddress>;
  accountHolderEmail?: Maybe<Scalars['String']>;
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderPhone?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountOperatorsDetails?: Maybe<Array<Maybe<AccountOperatorDetailsFormState>>>;
  accountType?: Maybe<AccountOperationType>;
  annualTurnover?: Maybe<Scalars['Float']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<KymAddress>;
  companyStamp?: Maybe<Scalars['String']>;
  dateOfLastAGM?: Maybe<Scalars['String']>;
  detailsOfDirectors?: Maybe<Array<Maybe<DirectorDetailsFormState>>>;
  documents?: Maybe<Array<Maybe<KymFieldData>>>;
  email?: Maybe<Scalars['String']>;
  expectedMonthlyTransaction?: Maybe<Scalars['String']>;
  expectedMonthlyTurnover?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionTypeId?: Maybe<Scalars['String']>;
  isCompanyStampCompulsory?: Maybe<Scalars['Boolean']>;
  issuingOffice?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<KymAddress>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<KymAddress>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['String']>;
  sisterConcernDetails?: Maybe<Array<Maybe<SisterConcernDetailsFormState>>>;
  specialInstruction?: Maybe<Scalars['String']>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type KymInsFormStateQuery = {
  data?: Maybe<KymInsFormStatus>;
};

export type KymInsFormStatus = {
  formData?: Maybe<KymInsFormData>;
  lastUpdated: KymInsAddLus;
  sectionStatus?: Maybe<KymInsAddSectionStatus>;
};

export type KymInsInformationLus = {
  name: KymInsInformationSection;
};

export enum KymInsInformationSection {
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  DetailsOfSisterConcern = 'DETAILS_OF_SISTER_CONCERN',
  RegisteredDetails = 'REGISTERED_DETAILS',
}

export type KymInsInformationStatus = {
  completed?: Maybe<Array<Maybe<KymInsInformationSection>>>;
  error?: Maybe<Array<Maybe<KymInsInformationSection>>>;
};

export type KymInsInput = {
  accountHolderAddress?: InputMaybe<KymAddressInput>;
  accountHolderEmail?: InputMaybe<Scalars['String']>;
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderPhone?: InputMaybe<Scalars['String']>;
  accountHolderSignature?: InputMaybe<Scalars['String']>;
  accountHolderStamp?: InputMaybe<Scalars['String']>;
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<AccountOperationType>;
  annualTurnover?: InputMaybe<Scalars['Float']>;
  bank?: InputMaybe<Scalars['ID']>;
  branchOfficeAddress?: InputMaybe<KymAddressInput>;
  companyStamp?: InputMaybe<Scalars['String']>;
  dateOfLastAGM?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  expectedMonthlyTransaction?: InputMaybe<Scalars['String']>;
  expectedMonthlyTurnover?: InputMaybe<Scalars['String']>;
  fax?: InputMaybe<Scalars['String']>;
  initialDepositAmount?: InputMaybe<Scalars['Float']>;
  institutionName?: InputMaybe<Scalars['String']>;
  institutionTypeId?: InputMaybe<Scalars['String']>;
  isCompanyStampCompulsory?: InputMaybe<Scalars['Boolean']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  natureOfTransaction?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  numberOfEmployee?: InputMaybe<Scalars['Int']>;
  operatingOfficeAddress?: InputMaybe<KymAddressInput>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<KymAddressInput>;
  registeredNumber?: InputMaybe<Scalars['String']>;
  registrationDate?: InputMaybe<Scalars['String']>;
  specialInstruction?: InputMaybe<Scalars['String']>;
  vatOrPanNo?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymInsListAccountOperatorsQuery = {
  data?: Maybe<Array<Maybe<AccountOperatorDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymInsListDirectorsQuery = {
  data?: Maybe<Array<Maybe<DirectorDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymInsListSisterConcernQuery = {
  data?: Maybe<Array<Maybe<SisterConcernDetailsFormState>>>;
  error?: Maybe<QueryError>;
};

export type KymInsMutation = {
  accountOperator?: Maybe<KymInsAccountOperator>;
  add?: Maybe<KymInsAddResult>;
  director?: Maybe<KymInsDirector>;
  sisterConcern?: Maybe<KymInsSisterConcern>;
};

export type KymInsMutationAddArgs = {
  data: KymInsInput;
};

export type KymInsQuery = {
  formState?: Maybe<KymInsFormStateQuery>;
  listAccountOperators?: Maybe<KymInsListAccountOperatorsQuery>;
  listDirectors?: Maybe<KymInsListDirectorsQuery>;
  listSisterConcerns?: Maybe<KymInsListSisterConcernQuery>;
};

export type KymInsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListAccountOperatorsArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListDirectorsArgs = {
  id: Scalars['ID'];
};

export type KymInsQueryListSisterConcernsArgs = {
  id: Scalars['ID'];
};

export type KymInsRecord = {
  member: Member;
  sectionStatus?: Maybe<KymInsFormStatus>;
};

export type KymInsSisterConcern = {
  Delete?: Maybe<KymInsAddResult>;
  Upsert?: Maybe<KymInsAddResult>;
};

export type KymInsSisterConcernDeleteArgs = {
  sisterConcernId: Scalars['ID'];
};

export type KymInsSisterConcernUpsertArgs = {
  data: KymInsSisterConcernInput;
  sisterConcernId: Scalars['ID'];
};

export type KymInsSisterConcernInput = {
  address?: InputMaybe<Scalars['String']>;
  institutionId?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type KymInsTransactionLus = {
  name: KymInsTransactionSection;
};

export enum KymInsTransactionSection {
  TransactionDetails = 'TRANSACTION_DETAILS',
}

export type KymInsTransactionStatus = {
  completed?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
  error?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
};

export type KymInstitutionDocumentsFormState = {
  agmBODDecisionDocument?: Maybe<Scalars['String']>;
  latestAuditReport?: Maybe<Scalars['String']>;
  moaAOA?: Maybe<Scalars['String']>;
  panCertificate?: Maybe<Scalars['String']>;
  registeredCertificate?: Maybe<Scalars['String']>;
  taxClearance?: Maybe<Scalars['String']>;
};

export type KymInstitutionDocumentsType = {
  agmBodDecisionDocument?: Maybe<Scalars['String']>;
  latestAuditReport?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  minuteOfCentralRep?: Maybe<Scalars['String']>;
  moaAOA?: Maybe<Scalars['String']>;
  panCertificate?: Maybe<Scalars['String']>;
  registeredCertificate?: Maybe<Scalars['String']>;
  taxClearance?: Maybe<Scalars['String']>;
};

export type KymMemberDataFilter = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  memberType?: InputMaybe<KymMemberTypesEnum>;
  objState?: InputMaybe<ObjState>;
  query?: InputMaybe<Scalars['String']>;
};

export type KymMemberListConnection = {
  edges?: Maybe<Array<Maybe<KymMemberListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type KymMemberListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Member>;
};

export type KymMemberTypes = {
  id: Scalars['ID'];
  type?: Maybe<Array<Maybe<KymMemberTypesEnum>>>;
};

export enum KymMemberTypesEnum {
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
  Individual = 'INDIVIDUAL',
  Institution = 'INSTITUTION',
}

export type KymOccupationDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['Float']>;
  idNumber?: InputMaybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: InputMaybe<Scalars['String']>;
};

export type KymOccupationDetailsFormState = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type KymOccupationDetailsType = {
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type LadderRate = {
  amount: Scalars['Amount'];
  rate: Scalars['Float'];
  type: Scalars['String'];
};

export type LadderRateFormState = {
  amount: Scalars['Amount'];
  rate: Scalars['Float'];
  type: Scalars['String'];
};

export enum Language {
  English = 'ENGLISH',
  Nepali = 'NEPALI',
}

export type LedgerMapping = {
  interestAccuredDaily?: InputMaybe<Scalars['String']>;
  interestIncome?: InputMaybe<Scalars['String']>;
  principal?: InputMaybe<Scalars['String']>;
};

export type LedgerMappingFormState = {
  interestAccuredDaily?: Maybe<Scalars['String']>;
  interestIncome?: Maybe<Scalars['String']>;
  principal?: Maybe<Scalars['String']>;
};

export type Level1 = {
  level2: Level2;
};

export type Level1Level2Args = {
  id: Scalars['String'];
};

export type Level2 = {
  add: Example;
  hello: Example;
};

export type Level2AddArgs = {
  data: ExampleInput;
};

export type Level2HelloArgs = {
  data: ExampleInput;
};

export type LoanAccount = {
  LoanAccountName?: Maybe<Scalars['String']>;
  appliedLoanAmount: Scalars['String'];
  approvedDate?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  intrestRate?: Maybe<Scalars['Float']>;
  isBoardAuthority?: Maybe<Scalars['Boolean']>;
  isCeoAuthority?: Maybe<Scalars['Boolean']>;
  justifySanction?: Maybe<Scalars['String']>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  member: Member;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  note?: Maybe<Scalars['String']>;
  objState: LoanObjState;
  product: LoanProduct;
  productSubType: LoanSettingsProductSubTypeData;
  productType: Scalars['ID'];
  repaymentScheme?: Maybe<LoanRepaymentScheme>;
  tenure?: Maybe<Scalars['Int']>;
  tenureType?: Maybe<FrequencyTenure>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
  totalValuation?: Maybe<Scalars['String']>;
};

export type LoanAccountCollateral = {
  area?: Maybe<Scalars['Float']>;
  buildingType?: Maybe<BuildingType>;
  collateralDescription?: Maybe<Scalars['String']>;
  collateralFiles?: Maybe<Array<Maybe<Scalars['String']>>>;
  collateralType?: Maybe<Scalars['String']>;
  collaterallValuation?: Maybe<Scalars['Amount']>;
  constructionType?: Maybe<ConstructionType>;
  description?: Maybe<Scalars['String']>;
  documentName?: Maybe<Scalars['String']>;
  dvMinAmount?: Maybe<Scalars['String']>;
  fmvMaxAmount?: Maybe<Scalars['Amount']>;
  kittaNo?: Maybe<Scalars['Int']>;
  noOfStorey?: Maybe<Scalars['Int']>;
  ownerName?: Maybe<Scalars['String']>;
  plotNo?: Maybe<Scalars['Int']>;
  relation?: Maybe<Scalars['String']>;
  sheetNo?: Maybe<Scalars['Int']>;
  valuationAmount?: Maybe<Scalars['String']>;
  valuationFiles?: Maybe<Array<Maybe<Scalars['String']>>>;
  valuationMethod?: Maybe<ValuationMethod>;
  valuationPercent?: Maybe<Scalars['Float']>;
  valuatorId?: Maybe<Scalars['String']>;
  vehicleCapacity?: Maybe<Scalars['String']>;
  vehicleFuelType?: Maybe<Scalars['String']>;
  vehicleModelNo?: Maybe<Scalars['String']>;
  vehicleName?: Maybe<Scalars['String']>;
  vehicleNo?: Maybe<Scalars['String']>;
  vehicleRegistrationNo?: Maybe<Scalars['String']>;
  vehicleSeatCapacity?: Maybe<Scalars['Int']>;
  vehicleType?: Maybe<Scalars['String']>;
};

export type LoanAccountCollateralData = {
  area?: InputMaybe<Scalars['Float']>;
  buildingType?: InputMaybe<BuildingType>;
  collateralDescription?: InputMaybe<Scalars['String']>;
  collateralFiles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  collateralType?: InputMaybe<Scalars['String']>;
  collaterallValuation?: InputMaybe<Scalars['Amount']>;
  constructionType?: InputMaybe<ConstructionType>;
  description?: InputMaybe<Scalars['String']>;
  documentName?: InputMaybe<Scalars['String']>;
  dvMinAmount?: InputMaybe<Scalars['String']>;
  fmvMaxAmount?: InputMaybe<Scalars['Amount']>;
  kittaNo?: InputMaybe<Scalars['Int']>;
  noOfStorey?: InputMaybe<Scalars['Int']>;
  ownerName?: InputMaybe<Scalars['String']>;
  plotNo?: InputMaybe<Scalars['Int']>;
  relation?: InputMaybe<Scalars['String']>;
  sheetNo?: InputMaybe<Scalars['Int']>;
  valuationAmount?: InputMaybe<Scalars['String']>;
  valuationFiles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  valuationMethod?: InputMaybe<ValuationMethod>;
  valuationPercent?: InputMaybe<Scalars['Float']>;
  valuatorId?: InputMaybe<Scalars['String']>;
  vehicleCapacity?: InputMaybe<Scalars['String']>;
  vehicleFuelType?: InputMaybe<Scalars['String']>;
  vehicleModelNo?: InputMaybe<Scalars['String']>;
  vehicleName?: InputMaybe<Scalars['String']>;
  vehicleNo?: InputMaybe<Scalars['String']>;
  vehicleRegistrationNo?: InputMaybe<Scalars['String']>;
  vehicleSeatCapacity?: InputMaybe<Scalars['Int']>;
  vehicleType?: InputMaybe<Scalars['String']>;
};

export type LoanAccountCollateralResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId: Scalars['ID'];
};

export type LoanAccountConnection = {
  edges?: Maybe<Array<LoanAccountEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type LoanAccountDisbursement = {
  destinationAccount: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanAccountEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<LoanAccount>;
};

export type LoanAccountFormState = {
  LoanAccountName?: Maybe<Scalars['String']>;
  appliedLoanAmount?: Maybe<Scalars['String']>;
  collateralData?: Maybe<Array<Maybe<LoanAccountCollateral>>>;
  gracePeriod?: Maybe<LoanAccountGrace>;
  gurantee_details?: Maybe<Array<Maybe<LoanAccountGurantee>>>;
  intrestRate?: Maybe<Scalars['Float']>;
  isBoardAuthority?: Maybe<Scalars['Boolean']>;
  isCeoAuthority?: Maybe<Scalars['Boolean']>;
  justifySanction?: Maybe<Scalars['String']>;
  linkedAccountId?: Maybe<Scalars['String']>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  memberId?: Maybe<Scalars['ID']>;
  note?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['ID']>;
  productSubType?: Maybe<Scalars['ID']>;
  productType: Scalars['ID'];
  repaymentScheme?: Maybe<LoanRepaymentScheme>;
  tenure?: Maybe<Scalars['Int']>;
  tenureType?: Maybe<FrequencyTenure>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
  totalValuation?: Maybe<Scalars['String']>;
};

export type LoanAccountFormStateResult = {
  data?: Maybe<LoanAccountFormState>;
  error?: Maybe<QueryError>;
};

export type LoanAccountGrace = {
  gracePeriod?: Maybe<GracePeriod>;
  installmentNo?: Maybe<Scalars['Int']>;
  interestGracePeriod?: Maybe<Scalars['Int']>;
  principalGracePeriod?: Maybe<Scalars['Int']>;
};

export type LoanAccountGraceInput = {
  gracePeriod?: InputMaybe<GracePeriod>;
  installmentNo?: InputMaybe<Scalars['Int']>;
  interestGracePeriod?: InputMaybe<Scalars['Int']>;
  principalGracePeriod?: InputMaybe<Scalars['Int']>;
};

export type LoanAccountGracePeriodResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccountGrace>;
  recordId: Scalars['ID'];
};

export type LoanAccountGurantee = {
  accountId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  guranteeAmount?: Maybe<Scalars['Amount']>;
  maxGuranteeAmountLimit?: Maybe<Scalars['Amount']>;
  memberId?: Maybe<Scalars['String']>;
  totalAmount?: Maybe<Scalars['Amount']>;
};

export type LoanAccountGuranteeInput = {
  accountId?: InputMaybe<Scalars['String']>;
  accountName?: InputMaybe<Scalars['String']>;
  guranteeAmount?: InputMaybe<Scalars['Amount']>;
  maxGuranteeAmountLimit?: InputMaybe<Scalars['Amount']>;
  memberId?: InputMaybe<Scalars['String']>;
  totalAmount?: InputMaybe<Scalars['Amount']>;
};

export type LoanAccountGuranteeResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccountGurantee>;
  recordId: Scalars['ID'];
};

export type LoanAccountInput = {
  LoanAccountName?: InputMaybe<Scalars['String']>;
  appliedLoanAmount?: InputMaybe<Scalars['String']>;
  collateralData?: InputMaybe<Array<InputMaybe<LoanAccountCollateralData>>>;
  fingerprintDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  gurantee_details?: InputMaybe<Array<InputMaybe<LoanAccountGuranteeInput>>>;
  intrestRate?: InputMaybe<Scalars['Float']>;
  isBoardAuthority?: InputMaybe<Scalars['Boolean']>;
  isCeoAuthority?: InputMaybe<Scalars['Boolean']>;
  justifySanction?: InputMaybe<Scalars['String']>;
  linkedAccountId?: InputMaybe<Scalars['String']>;
  loanProcessingCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  memberId?: InputMaybe<Scalars['ID']>;
  nomineeDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  note?: InputMaybe<Scalars['String']>;
  photoDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  productId?: InputMaybe<Scalars['ID']>;
  productSubType?: InputMaybe<Scalars['ID']>;
  productType?: InputMaybe<Scalars['ID']>;
  repaymentScheme?: InputMaybe<LoanRepaymentScheme>;
  signatureDoc?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tenure?: InputMaybe<Scalars['Int']>;
  tenureType?: InputMaybe<FrequencyTenure>;
  totalSanctionedAmount?: InputMaybe<Scalars['String']>;
  totalValuation?: InputMaybe<Scalars['String']>;
};

export type LoanAccountMinimal = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type LoanAccountMutation = {
  add?: Maybe<LoanAccountResult>;
  approveOrCancel?: Maybe<LoanAccountResult>;
  disburse?: Maybe<LoanDisbursementResult>;
  repayment?: Maybe<LoanRepaymentResult>;
};

export type LoanAccountMutationAddArgs = {
  data?: InputMaybe<LoanAccountInput>;
  id: Scalars['ID'];
};

export type LoanAccountMutationApproveOrCancelArgs = {
  action: LoanApproveOrCancel;
  loanAccountId: Scalars['String'];
  remarks?: InputMaybe<Scalars['String']>;
};

export type LoanAccountMutationDisburseArgs = {
  data: LoanDisbursementInput;
  loanAccount: Scalars['ID'];
};

export type LoanAccountMutationRepaymentArgs = {
  data?: InputMaybe<LoanRepaymentInput>;
};

export type LoanAccountPaymentScheduleResult = {
  data?: Maybe<LoanInstallments>;
  error?: Maybe<QueryError>;
};

export type LoanAccountPreview = {
  accountId?: Maybe<Scalars['String']>;
  additionalFeatures?: Maybe<LoanPreviewAdditionalFeatures>;
  collateralAndGuarantees?: Maybe<Array<Maybe<LoanCollateralAndGuarantees>>>;
  criteria?: Maybe<LoanProductCriteria>;
  generalInformation?: Maybe<LoanPreviewGeneralInformation>;
  loanDetails?: Maybe<LoanPreviewLoanDetails>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['String']>;
  paymentSchedule?: Maybe<LoanInstallments>;
  productId?: Maybe<Scalars['String']>;
  repaymentDetails?: Maybe<LoanPreviewRepaymentDetails>;
  statistics?: Maybe<LoanPreviewStatistics>;
};

export type LoanAccountPreviewResult = {
  data?: Maybe<LoanAccountPreview>;
  error?: Maybe<QueryError>;
};

export type LoanAccountQuery = {
  formState?: Maybe<LoanAccountFormStateResult>;
  getLoanInstallments?: Maybe<LoanInstallmentResult>;
  getProductCriteria?: Maybe<LoanProductCriteriaResult>;
  getProductList?: Maybe<LoanProductList>;
  list?: Maybe<LoanAccountConnection>;
  loanPreview?: Maybe<LoanAccountPreviewResult>;
  memberDisbursedLoanAccounts?: Maybe<Array<Maybe<LoanAccountMinimal>>>;
  paymentSchedule?: Maybe<LoanAccountPaymentScheduleResult>;
};

export type LoanAccountQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type LoanAccountQueryGetLoanInstallmentsArgs = {
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  interest: Scalars['Float'];
  productId: Scalars['ID'];
  repaymentScheme: LoanRepaymentScheme;
  sanctionAmount: Scalars['Int'];
  tenure: Scalars['Int'];
};

export type LoanAccountQueryGetProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type LoanAccountQueryGetProductListArgs = {
  memberId: Scalars['ID'];
  productSubTypeId: Scalars['ID'];
  productType: Scalars['ID'];
};

export type LoanAccountQueryListArgs = {
  filter?: InputMaybe<LoanAccountSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanAccountQueryLoanPreviewArgs = {
  loanAccountId: Scalars['String'];
};

export type LoanAccountQueryMemberDisbursedLoanAccountsArgs = {
  memberId: Scalars['ID'];
};

export type LoanAccountQueryPaymentScheduleArgs = {
  loanAccountId: Scalars['ID'];
};

export type LoanAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId: Scalars['ID'];
};

export type LoanAccountSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  objectState?: InputMaybe<LoanObjState>;
  query?: InputMaybe<Scalars['String']>;
};

export enum LoanApproveOrCancel {
  Approve = 'APPROVE',
  Cancel = 'CANCEL',
}

export type LoanBankDisbursement = {
  bankAccountId: Scalars['ID'];
  chequeNo: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanCollateralAndGuarantees = {
  name?: Maybe<Scalars['String']>;
  valuation?: Maybe<Scalars['String']>;
};

export type LoanDisbursementInput = {
  accountPayment?: InputMaybe<LoanAccountDisbursement>;
  amount: Scalars['String'];
  bankChequePayment?: InputMaybe<LoanBankDisbursement>;
  method: LoanDisbursementMethod;
};

export enum LoanDisbursementMethod {
  Account = 'ACCOUNT',
  BankCheque = 'BANK_CHEQUE',
}

export type LoanDisbursementResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanGeneralSettings = {
  /** accepted collateral list */
  collateralList?: Maybe<Array<Maybe<CollateralListData>>>;
  /**  loan repayment  */
  emi?: Maybe<Scalars['Boolean']>;
  epi?: Maybe<Scalars['Boolean']>;
  flat?: Maybe<Scalars['Boolean']>;
};

export type LoanGeneralSettingsInput = {
  /** accepted collateral list */
  collateralList?: InputMaybe<Array<InputMaybe<CollateralListInputData>>>;
  /**  loan repayment  */
  emi?: InputMaybe<Scalars['Boolean']>;
  epi?: InputMaybe<Scalars['Boolean']>;
  flat?: InputMaybe<Scalars['Boolean']>;
};

export type LoanInstallment = {
  dueAmount?: Maybe<Scalars['String']>;
  installmentDate: Scalars['String'];
  installmentNo: Scalars['Int'];
  interest: Scalars['String'];
  payment: Scalars['String'];
  principal: Scalars['String'];
  remainingPrincipal: Scalars['String'];
};

export type LoanInstallmentResult = {
  data?: Maybe<LoanInstallments>;
  error?: Maybe<QueryError>;
};

export type LoanInstallments = {
  installments?: Maybe<Array<Maybe<LoanInstallment>>>;
  total: Scalars['String'];
};

export enum LoanInsurancePaymentType {
  Amount = 'AMOUNT',
  Percentage = 'PERCENTAGE',
}

export type LoanInsuranceScheme = {
  id: Scalars['ID'];
  insuranceCompany?: Maybe<Scalars['String']>;
  insurancePremiumPercent?: Maybe<Scalars['Float']>;
  maxAmount?: Maybe<Scalars['String']>;
  maxPercent?: Maybe<Scalars['Float']>;
  minAmount?: Maybe<Scalars['String']>;
  minPercent?: Maybe<Scalars['Float']>;
  paymentFrequency?: Maybe<Frequency>;
  paymentType?: Maybe<LoanInsurancePaymentType>;
  schemeName?: Maybe<Scalars['String']>;
};

export type LoanInsuranceSchemeInput = {
  id?: InputMaybe<Scalars['String']>;
  insuranceCompany?: InputMaybe<Scalars['String']>;
  insurancePremiumPercent?: InputMaybe<Scalars['Float']>;
  maxAmount?: InputMaybe<Scalars['String']>;
  maxPercent?: InputMaybe<Scalars['Float']>;
  minAmount?: InputMaybe<Scalars['String']>;
  minPercent?: InputMaybe<Scalars['Float']>;
  paymentFrequency?: InputMaybe<Frequency>;
  paymentType?: InputMaybe<LoanInsurancePaymentType>;
  schemeName?: InputMaybe<Scalars['String']>;
};

export enum LoanInterestMethod {
  Diminishing = 'DIMINISHING',
  Straight = 'STRAIGHT',
}

export type LoanNatureOfProductInput = {
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  natureOfProduct?: InputMaybe<Scalars['String']>;
};

export enum LoanObjState {
  Approved = 'APPROVED',
  Cancelled = 'CANCELLED',
  Completed = 'COMPLETED',
  Disbursed = 'DISBURSED',
  Submitted = 'SUBMITTED',
}

export enum LoanPaymentInstallmentType {
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
}

export enum LoanPaymentMode {
  Installment = 'INSTALLMENT',
}

export type LoanPreviewAdditionalFeatures = {
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  collateral?: Maybe<Scalars['Boolean']>;
  insurance?: Maybe<Scalars['Boolean']>;
  isMonthlyInterestCompulsory?: Maybe<Scalars['Boolean']>;
  loanScheduleChangeOverride?: Maybe<Scalars['Boolean']>;
  overrideInterest?: Maybe<Scalars['Boolean']>;
  staffProduct?: Maybe<Scalars['Boolean']>;
  supportMultipleAccount?: Maybe<Scalars['Boolean']>;
};

export type LoanPreviewGeneralInformation = {
  loanName?: Maybe<Scalars['String']>;
  loanProduct?: Maybe<Scalars['String']>;
  loanSubType?: Maybe<Scalars['String']>;
  loanType?: Maybe<Scalars['String']>;
  natureOfLoanProduct?: Maybe<NatureOfLoanProduct>;
  productCode?: Maybe<Scalars['String']>;
};

export type LoanPreviewInstallment = {
  fine?: Maybe<Scalars['String']>;
  installmentNo?: Maybe<Scalars['Int']>;
  interestAmount?: Maybe<Scalars['String']>;
  principal?: Maybe<Scalars['String']>;
};

export type LoanPreviewLoanDetails = {
  appliedLoanAmount?: Maybe<Scalars['String']>;
  disburseDate?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Scalars['String']>;
  /**  Extra fields for repayment page */
  interestAmount?: Maybe<Scalars['String']>;
  interestGracePeriod?: Maybe<Scalars['Int']>;
  interestMethod?: Maybe<LoanInterestMethod>;
  interestRate?: Maybe<Scalars['Float']>;
  loanRepaymentScheme?: Maybe<LoanRepaymentScheme>;
  paymentFrequency?: Maybe<LoanProductInstallment>;
  principalGracePeriod?: Maybe<Scalars['Int']>;
  processingCharges?: Maybe<Array<Maybe<ServiceCharge>>>;
  tenure?: Maybe<Scalars['Int']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  totalCollateralValuation?: Maybe<Scalars['String']>;
  totalDisbursedAmount?: Maybe<Scalars['String']>;
  totalGuaranteeValuation?: Maybe<Scalars['String']>;
  totalProcessingChargesValuation?: Maybe<Scalars['String']>;
  totalSanctionedAmount?: Maybe<Scalars['String']>;
};

export type LoanPreviewRepaymentDetails = {
  lastPaymentDate?: Maybe<Scalars['String']>;
  remainingInstallments?: Maybe<Array<Maybe<LoanPreviewInstallment>>>;
  remainingInterest?: Maybe<Scalars['String']>;
  remainingPrincipal?: Maybe<Scalars['String']>;
  remainingTotal?: Maybe<Scalars['String']>;
  totalInstallmentAmount?: Maybe<Scalars['String']>;
};

export type LoanPreviewStatistics = {
  remainingPayableAmount?: Maybe<Scalars['String']>;
  totalPaidAmount?: Maybe<Scalars['String']>;
  totalPayableAmount?: Maybe<Scalars['String']>;
};

export type LoanProduct = Base & {
  allowGurantee?: Maybe<Scalars['Boolean']>;
  allowPartialInstallment?: Maybe<Scalars['Boolean']>;
  collateralTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  collateralValue?: Maybe<Array<Maybe<CollateralFormState>>>;
  cooperativeType?: Maybe<Array<Maybe<Scalars['ID']>>>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  createdDate: Scalars['String'];
  criteria?: Maybe<Array<Maybe<CriteriaSection>>>;
  description?: Maybe<Scalars['String']>;
  educationQualification?: Maybe<Array<Maybe<Scalars['ID']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['ID']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  genderId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id: Scalars['ID'];
  installmentFrequency?: Maybe<LoanProductInstallment>;
  insuranceType?: Maybe<Insurance>;
  interest?: Maybe<InterestRateType>;
  interestMethod?: Maybe<LoanInterestMethod>;
  isCollateralRequired?: Maybe<Scalars['Boolean']>;
  isInsuranceApplicable?: Maybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: Maybe<Scalars['Boolean']>;
  isPenaltyApplicable?: Maybe<Scalars['Boolean']>;
  isRebateApplicable?: Maybe<Scalars['Boolean']>;
  isStaffProduct?: Maybe<Scalars['Boolean']>;
  isTenureApplicable?: Maybe<Scalars['Boolean']>;
  ledgerMapping?: Maybe<LedgerMappingFormState>;
  loanProcessingCharge?: Maybe<Array<Maybe<ServiceTypeFormState>>>;
  loanScheduleChangeOverride?: Maybe<Scalars['Boolean']>;
  maritalStatusId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  maxGraceDurationUnit?: Maybe<FrequencyTenure>;
  maxGraceDurationUnitNumber?: Maybe<Scalars['Int']>;
  maxLoanAmount?: Maybe<Scalars['Amount']>;
  maxPercentOfGurantee?: Maybe<Scalars['Float']>;
  maxTenureUnitNumber?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minGraceDurationUnit?: Maybe<FrequencyTenure>;
  minGraceDurationUnitNumber?: Maybe<Scalars['Int']>;
  minTenureUnitNumber?: Maybe<Scalars['Int']>;
  minimumLoanAmount?: Maybe<Scalars['Amount']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  natureOFBusinessCoop?: Maybe<Array<Maybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: Maybe<Array<Maybe<Scalars['ID']>>>;
  objState: ObjState;
  occupation?: Maybe<Array<Maybe<Scalars['ID']>>>;
  penaltyOnInstallment?: Maybe<Penalty>;
  penaltyOnInterest?: Maybe<Penalty>;
  penaltyOnPrincipal?: Maybe<Penalty>;
  penaltyType?: Maybe<PenaltyType>;
  postingFrequency?: Maybe<LoanProductInstallment>;
  prematurePenaltySetup?: Maybe<PrematurePenaltyFormState>;
  productCode?: Maybe<ProductCodeType>;
  productCodeString?: Maybe<Scalars['String']>;
  productName: Scalars['String'];
  productNature: NatureOfLoanProduct;
  productSubType: Scalars['String'];
  productType: Scalars['ID'];
  rebate?: Maybe<Rebate>;
  repaymentScheme?: Maybe<Array<Maybe<LoanRepaymentScheme>>>;
  requiredDocuments?: Maybe<Array<Maybe<LoanRequiredDocuments>>>;
  supportMultipleAccounts?: Maybe<Scalars['Boolean']>;
  tenureUnit?: Maybe<FrequencyTenure>;
  typeOfMember: Array<Maybe<KymMemberTypesEnum>>;
  updateInterest?: Maybe<Scalars['Boolean']>;
  waiveInterest?: Maybe<Scalars['Boolean']>;
};

export type LoanProductConnection = {
  edges: Array<LoanProductEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type LoanProductCriteria = {
  cooperativeType?: Maybe<Array<Maybe<Scalars['String']>>>;
  cooperativeUnion?: Maybe<Array<Maybe<Scalars['String']>>>;
  educationQualification?: Maybe<Array<Maybe<Scalars['String']>>>;
  ethnicity?: Maybe<Array<Maybe<Scalars['String']>>>;
  foreignEmployment?: Maybe<Scalars['Boolean']>;
  gender?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionType?: Maybe<Array<Maybe<Scalars['String']>>>;
  maritalStatus?: Maybe<Array<Maybe<Scalars['String']>>>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  occupation?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LoanProductCriteriaResult = {
  data?: Maybe<LoanProductCriteria>;
  error?: Maybe<QueryError>;
};

export type LoanProductData = {
  data?: Maybe<LoanProduct>;
  error?: Maybe<QueryError>;
};

export type LoanProductEdge = {
  cursor: Scalars['Cursor'];
  node: LoanProduct;
};

export type LoanProductInput = {
  allowGurantee?: InputMaybe<Scalars['Boolean']>;
  allowPartialInstallment?: InputMaybe<Scalars['Boolean']>;
  collateralTypes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  collateralValue?: InputMaybe<Array<InputMaybe<CollateralInput>>>;
  cooperativeType?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  criteria?: InputMaybe<Array<InputMaybe<CriteriaSection>>>;
  description?: InputMaybe<Scalars['String']>;
  educationQualification?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  ethnicity?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  foreignEmployment?: InputMaybe<Scalars['Boolean']>;
  genderId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  installmentFrequency?: InputMaybe<LoanProductInstallment>;
  insuranceType?: InputMaybe<InsuranceType>;
  interest?: InputMaybe<InterestRate>;
  interestMethod?: InputMaybe<LoanInterestMethod>;
  isCollateralRequired?: InputMaybe<Scalars['Boolean']>;
  isInsuranceApplicable?: InputMaybe<Scalars['Boolean']>;
  isMonthlyInstallmentCompulsory?: InputMaybe<Scalars['Boolean']>;
  isPenaltyApplicable?: InputMaybe<Scalars['Boolean']>;
  isRebateApplicable?: InputMaybe<Scalars['Boolean']>;
  isStaffProduct?: InputMaybe<Scalars['Boolean']>;
  isTenureApplicable?: InputMaybe<Scalars['Boolean']>;
  ledgerMapping?: InputMaybe<LedgerMapping>;
  loanProcessingCharge?: InputMaybe<Array<InputMaybe<ServiceType>>>;
  loanScheduleChangeOverride?: InputMaybe<Scalars['Boolean']>;
  maritalStatusId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  maxAge?: InputMaybe<Scalars['Int']>;
  maxGraceDurationUnit?: InputMaybe<FrequencyTenure>;
  maxGraceDurationUnitNumber?: InputMaybe<Scalars['Int']>;
  maxLoanAmount?: InputMaybe<Scalars['Amount']>;
  maxPercentOfGurantee?: InputMaybe<Scalars['Float']>;
  maxTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minGraceDurationUnit?: InputMaybe<FrequencyTenure>;
  minGraceDurationUnitNumber?: InputMaybe<Scalars['Int']>;
  minTenureUnitNumber?: InputMaybe<Scalars['Int']>;
  minimumLoanAmount?: InputMaybe<Scalars['Amount']>;
  natureOFBusinessCoop?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  natureOfBusinessInstitution?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  occupation?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  penaltyOnInstallment?: InputMaybe<PenaltyTypeInput>;
  penaltyOnInterest?: InputMaybe<PenaltyTypeInput>;
  penaltyOnPrincipal?: InputMaybe<PenaltyTypeInput>;
  penaltyType?: InputMaybe<PenaltyType>;
  postingFrequency?: InputMaybe<LoanProductInstallment>;
  prematurePenaltySetup?: InputMaybe<PrematurePenalty>;
  productCode?: InputMaybe<ProductCode>;
  productName?: InputMaybe<Scalars['String']>;
  productNature?: InputMaybe<NatureOfLoanProduct>;
  productSubType?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['ID']>;
  rebate?: InputMaybe<RebateTypeInput>;
  repaymentScheme?: InputMaybe<Array<InputMaybe<LoanRepaymentScheme>>>;
  requiredDocuments?: InputMaybe<Array<InputMaybe<LoanRequiredDocuments>>>;
  supportMultipleAccounts?: InputMaybe<Scalars['Boolean']>;
  tenureUnit?: InputMaybe<FrequencyTenure>;
  typeOfMember?: InputMaybe<Array<InputMaybe<KymMemberTypesEnum>>>;
  updateInterest?: InputMaybe<Scalars['Boolean']>;
  waiveInterest?: InputMaybe<Scalars['Boolean']>;
};

export enum LoanProductInstallment {
  Daily = 'DAILY',
  HalfYearly = 'HALF_YEARLY',
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY',
}

export type LoanProductList = {
  allowed?: Maybe<Array<Maybe<LoanProduct>>>;
  error?: Maybe<QueryError>;
  notAllowed?: Maybe<Array<Maybe<LoanProductListData>>>;
};

export type LoanProductListData = {
  data?: Maybe<LoanProduct>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type LoanProductLists = {
  data?: Maybe<Array<Maybe<LoanProduct>>>;
  error?: Maybe<QueryError>;
};

export type LoanProductSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export enum LoanProductSubType {
  AgricultureBusiness = 'AGRICULTURE_BUSINESS',
  BigIndustrial = 'BIG_INDUSTRIAL',
  BioGas = 'BIO_GAS',
  BusinessLineOfCredit = 'BUSINESS_LINE_OF_CREDIT',
  CashCropsFraming = 'CASH_CROPS_FRAMING',
  ConstructionEquipmentBusiness = 'CONSTRUCTION_EQUIPMENT_BUSINESS',
  ConsumerGoodsBusiness = 'CONSUMER_GOODS_BUSINESS',
  CooperativePromotion = 'COOPERATIVE_PROMOTION',
  Emergency = 'EMERGENCY',
  ForeignEducation = 'FOREIGN_EDUCATION',
  ForeignEmployeeDependentVisa = 'FOREIGN_EMPLOYEE_DEPENDENT_VISA',
  ForeignEmployeeWorkingVisa = 'FOREIGN_EMPLOYEE_WORKING_VISA',
  FruitsAndHorticulture = 'FRUITS_AND_HORTICULTURE',
  HandicraftPromotional = 'HANDICRAFT_PROMOTIONAL',
  HigherEducation = 'HIGHER_EDUCATION',
  HirePurchaseLoan_2Wheeler = 'HIRE_PURCHASE_LOAN_2_WHEELER',
  HirePurchaseLoan_4Wheeler = 'HIRE_PURCHASE_LOAN_4_WHEELER',
  HirePurchaseLoanHeavyEquipment = 'HIRE_PURCHASE_LOAN_HEAVY_EQUIPMENT',
  HomeAppliance = 'HOME_APPLIANCE',
  HomeConstructionAndMaintenance = 'HOME_CONSTRUCTION_AND_MAINTENANCE',
  HomeExpenses = 'HOME_EXPENSES',
  HoneyBeeFarming = 'HONEY_BEE_FARMING',
  HousePurchase = 'HOUSE_PURCHASE',
  LandAndBuildingBusiness = 'LAND_AND_BUILDING_BUSINESS',
  LandPurchase = 'LAND_PURCHASE',
  LineOfCredit = 'LINE_OF_CREDIT',
  LiquidityManagement = 'LIQUIDITY_MANAGEMENT',
  Livestock = 'LIVESTOCK',
  LivestockBusiness = 'LIVESTOCK_BUSINESS',
  MicroEnterprisePromotion = 'MICRO_ENTERPRISE_PROMOTION',
  MicroEntrepreneur = 'MICRO_ENTREPRENEUR',
  MicroEntrepreneurGroup = 'MICRO_ENTREPRENEUR_GROUP',
  PoultryFarming = 'POULTRY_FARMING',
  ReligiousWork = 'RELIGIOUS_WORK',
  ServiceBusiness = 'SERVICE_BUSINESS',
  ShortTerm = 'SHORT_TERM',
  SmallAndMediumEnterprises = 'SMALL_AND_MEDIUM_ENTERPRISES',
  SmallIndustrial = 'SMALL_INDUSTRIAL',
  SocialWork = 'SOCIAL_WORK',
  SolarEnergy = 'SOLAR_ENERGY',
  SpiceProduction = 'SPICE_PRODUCTION',
  StaffHirepurchase = 'STAFF_HIREPURCHASE',
  StaffLandAndBuilding = 'STAFF_LAND_AND_BUILDING',
  StaffPersonal = 'STAFF_PERSONAL',
  StationaryBusiness = 'STATIONARY_BUSINESS',
  TechnicalEducation = 'TECHNICAL_EDUCATION',
  VegetableAndSeasonalFarming = 'VEGETABLE_AND_SEASONAL_FARMING',
  YouthSelfEmployment = 'YOUTH_SELF__EMPLOYMENT',
}

export type LoanProductSubTypeInput = {
  id?: InputMaybe<Scalars['ID']>;
  productSubType?: InputMaybe<Scalars['String']>;
  productTypeID?: InputMaybe<Scalars['ID']>;
};

export enum LoanProductType {
  InvestmentInAgriculturalSector = 'INVESTMENT_IN_AGRICULTURAL_SECTOR',
  InvestmentInIndustrialSector = 'INVESTMENT_IN_INDUSTRIAL_SECTOR',
  InvestmentInOtherSector = 'INVESTMENT_IN_OTHER_SECTOR',
}

export type LoanProductTypeInput = {
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  productType?: InputMaybe<Scalars['String']>;
};

export type LoanProductsMutation = {
  upsert?: Maybe<LoanProductsResult>;
};

export type LoanProductsMutationUpsertArgs = {
  data?: InputMaybe<LoanProductInput>;
  id?: InputMaybe<Scalars['ID']>;
};

export type LoanProductsQuery = {
  formState?: Maybe<LoanProductData>;
  list?: Maybe<LoanProductConnection>;
};

export type LoanProductsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type LoanProductsQueryListArgs = {
  filter?: InputMaybe<LoanProductSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type LoanProductsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanProductsQuery>;
  record?: Maybe<LoanProduct>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LoanRepaymentAccountMode = {
  destination_account: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type LoanRepaymentBankVoucher = {
  bank: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
  voucher_no: Scalars['String'];
};

export type LoanRepaymentInput = {
  account?: InputMaybe<LoanRepaymentAccountMode>;
  amountPaid: Scalars['String'];
  bankVoucher?: InputMaybe<LoanRepaymentBankVoucher>;
  cash?: InputMaybe<DepositCash>;
  loanAccountId: Scalars['ID'];
  memberId: Scalars['ID'];
  paymentMethod: LoanRepaymentMethod;
};

export enum LoanRepaymentMethod {
  Account = 'ACCOUNT',
  BankVoucher = 'BANK_VOUCHER',
  Cash = 'CASH',
}

export type LoanRepaymentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanAccountQuery>;
  record?: Maybe<LoanAccount>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum LoanRepaymentScheme {
  Emi = 'EMI',
  Epi = 'EPI',
  Flat = 'FLAT',
}

export enum LoanRequiredDocuments {
  Citizenship = 'CITIZENSHIP',
  Form = 'FORM',
  LoanChangeDocument = 'LOAN_CHANGE_DOCUMENT',
  PolicyDocument = 'POLICY_DOCUMENT',
}

export type LoanSettingsMutation = {
  general?: Maybe<LoanSettingsResult>;
  insuranceScheme?: Maybe<LoanSettingsResult>;
  productType?: Maybe<LoanSettingsResult>;
};

export type LoanSettingsMutationGeneralArgs = {
  data?: InputMaybe<LoanGeneralSettingsInput>;
};

export type LoanSettingsMutationInsuranceSchemeArgs = {
  data?: InputMaybe<Array<InputMaybe<LoanInsuranceSchemeInput>>>;
};

export type LoanSettingsMutationProductTypeArgs = {
  data?: InputMaybe<LoanSettingsProductTypeInput>;
};

export type LoanSettingsNatureOfProductData = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  natureOfProduct?: Maybe<Scalars['String']>;
};

export type LoanSettingsProductSubTypeData = {
  id?: Maybe<Scalars['ID']>;
  productSubType?: Maybe<Scalars['String']>;
  productTypeID?: Maybe<Scalars['ID']>;
};

export type LoanSettingsProductType = {
  natureOfProduct?: Maybe<Array<Maybe<LoanSettingsNatureOfProductData>>>;
  productSubTypes?: Maybe<Array<Maybe<LoanSettingsProductSubTypeData>>>;
  productTypes?: Maybe<Array<Maybe<LoanSettingsProductTypeData>>>;
};

export type LoanSettingsProductTypeProductSubTypesArgs = {
  productTypeID?: InputMaybe<Scalars['String']>;
};

export type LoanSettingsProductTypeData = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  productType?: Maybe<Scalars['String']>;
};

export type LoanSettingsProductTypeInput = {
  natureOfProduct?: InputMaybe<Array<InputMaybe<LoanNatureOfProductInput>>>;
  productSubTypes?: InputMaybe<Array<InputMaybe<LoanProductSubTypeInput>>>;
  productTypes?: InputMaybe<Array<InputMaybe<LoanProductTypeInput>>>;
};

export type LoanSettingsQuery = {
  general?: Maybe<LoanGeneralSettings>;
  insuranceSchemes?: Maybe<Array<Maybe<LoanInsuranceScheme>>>;
  productType?: Maybe<LoanSettingsProductType>;
};

export type LoanSettingsResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<LoanSettingsQuery>;
  record?: Maybe<LoanSettingsQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type LocalizationExample = {
  name?: Maybe<Scalars['Localized']>;
};

export type LocationCoordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type LocationCoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type LoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type LoginRecord = {
  data: UserData;
  token: AuthToken;
};

export type LoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<LoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MeCooperativeUserResult = {
  data?: Maybe<EbankingCooperative>;
  error?: Maybe<QueryError>;
};

export type MeMyraUserResult = {
  data?: Maybe<EbankingUser>;
  error?: Maybe<QueryError>;
};

export type MeResult = {
  data?: Maybe<UserData>;
  error?: Maybe<QueryError>;
};

export type Member = Base & {
  address?: Maybe<Address>;
  code: Scalars['String'];
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dateJoined?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['Localized']>;
  objState: ObjState;
  profile?: Maybe<MemberProfile>;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  share?: Maybe<MemberShare>;
  signaturePicUrl?: Maybe<Scalars['String']>;
  signaturepic?: Maybe<Scalars['String']>;
  type: KymMemberTypesEnum;
};

export type MemberActiveData = {
  cooperative?: Maybe<Scalars['Boolean']>;
  cooperativeUnion?: Maybe<Scalars['Boolean']>;
  individual?: Maybe<Scalars['Boolean']>;
  institution?: Maybe<Scalars['Boolean']>;
};

export type MemberActiveInput = {
  cooperative?: InputMaybe<Scalars['Boolean']>;
  cooperativeUnion?: InputMaybe<Scalars['Boolean']>;
  individual?: InputMaybe<Scalars['Boolean']>;
  institution?: InputMaybe<Scalars['Boolean']>;
};

export type MemberBasicInfoView = {
  address?: Maybe<Scalars['Localized']>;
  addressId?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fathersName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['Localized']>;
  genderId?: Maybe<Scalars['String']>;
  grandFathersName?: Maybe<Scalars['String']>;
  maritalStatus?: Maybe<Scalars['Localized']>;
  maritalStatusId?: Maybe<Scalars['String']>;
  memberCode?: Maybe<Scalars['String']>;
  memberJoined?: Maybe<Scalars['String']>;
  mothersName?: Maybe<Scalars['String']>;
  profilePic?: Maybe<Scalars['String']>;
};

export type MemberChargeData = {
  charge: Scalars['Int'];
  ledgerId: Scalars['ID'];
  memberType: KymMemberTypesEnum;
};

export type MemberChargeInput = {
  charge: Scalars['Int'];
  ledgerId: Scalars['ID'];
  memberType: KymMemberTypesEnum;
};

export type MemberDetailsResult = {
  data?: Maybe<Member>;
};

export enum MemberIdentityLevel {
  General = 'GENERAL',
  Mid = 'MID',
  Vip = 'VIP',
}

export type MemberMutation = {
  cooperative?: Maybe<KymCooperativeMutation>;
  cooperativeUnion?: Maybe<KymCoopUnionMutation>;
  entry: KymEntryMutation;
  generateExcel: Scalars['String'];
  individual?: Maybe<KymIndMutation>;
  institution?: Maybe<KymInsMutation>;
  officialUse?: Maybe<OfficialUseResult>;
  /**  id is the ID of member  */
  translate?: Maybe<TranslateData>;
};

export type MemberMutationCooperativeArgs = {
  id: Scalars['ID'];
};

export type MemberMutationEntryArgs = {
  memberId: Scalars['String'];
};

export type MemberMutationGenerateExcelArgs = {
  filename: Scalars['String'];
  id: Scalars['ID'];
};

export type MemberMutationIndividualArgs = {
  id: Scalars['ID'];
};

export type MemberMutationInstitutionArgs = {
  id: Scalars['ID'];
};

export type MemberMutationOfficialUseArgs = {
  data: OfficialUseInputData;
};

export type MemberMutationTranslateArgs = {
  data: TranslateInput;
  memberId: Scalars['ID'];
};

export type MemberOverviewData = {
  accounts?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  overview?: Maybe<OverviewView>;
  reports?: Maybe<Scalars['String']>;
  share?: Maybe<Scalars['String']>;
  transactions?: Maybe<Scalars['String']>;
};

export type MemberOverviewResult = {
  data?: Maybe<MemberOverviewData>;
  error?: Maybe<QueryError>;
};

export type MemberPaymentView = {
  accountName?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
};

export type MemberProfile =
  | CooperativeUnionMember
  | KymCooperativeFormStateQuery
  | KymIndFormStateQuery
  | KymInsFormStateQuery;

export type MemberQuery = {
  cooperative?: Maybe<KymCooperativeQuery>;
  cooperativeUnion?: Maybe<KymCoopUnionQuery>;
  details: MemberDetailsResult;
  entry?: Maybe<KymEntryQuery>;
  individual?: Maybe<KymIndQuery>;
  institution?: Maybe<KymInsQuery>;
  list: KymMemberListConnection;
  memberOverview?: Maybe<MemberOverviewResult>;
  memberPDF: Scalars['String'];
  memberTypes: MemberTypeResult;
  officialUse?: Maybe<OfficialUseResult>;
  translate: TranslateQueryResult;
};

export type MemberQueryDetailsArgs = {
  id: Scalars['ID'];
};

export type MemberQueryEntryArgs = {
  membeId: Scalars['String'];
};

export type MemberQueryIndividualArgs = {
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['String'];
};

export type MemberQueryListArgs = {
  filter?: InputMaybe<KymMemberDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type MemberQueryMemberOverviewArgs = {
  id: Scalars['ID'];
};

export type MemberQueryMemberPdfArgs = {
  id: Scalars['ID'];
};

export type MemberQueryOfficialUseArgs = {
  id: Scalars['ID'];
};

export type MemberQueryTranslateArgs = {
  id: Scalars['ID'];
};

export type MemberRecentTransactionView = {
  amount?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  noOfShares?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  txnType?: Maybe<Scalars['String']>;
};

export type MemberRiskData = {
  generalRisk?: Maybe<Scalars['Int']>;
  highRisk?: Maybe<Scalars['Int']>;
  mediumRisk?: Maybe<Scalars['Int']>;
};

export type MemberRiskInput = {
  generalRisk?: InputMaybe<Scalars['Int']>;
  highRisk?: InputMaybe<Scalars['Int']>;
  mediumRisk?: InputMaybe<Scalars['Int']>;
};

export type MemberShare = {
  history?: Maybe<Array<Maybe<ShareRegister>>>;
  summary?: Maybe<ShareBalance>;
};

export type MemberStatisticsView = {
  accountBalance?: Maybe<Scalars['String']>;
  loanBalance?: Maybe<Scalars['String']>;
  totalShareValue?: Maybe<Scalars['String']>;
};

export type MemberTypeResult = {
  data?: Maybe<Array<Maybe<KymMemberTypes>>>;
  error?: Maybe<QueryError>;
};

export type MonthlyDividendRate = {
  eightMonth?: Maybe<Scalars['Float']>;
  eleventhMonth?: Maybe<Scalars['Float']>;
  fifthMonth?: Maybe<Scalars['Float']>;
  firstMonth?: Maybe<Scalars['Float']>;
  fourthMonth?: Maybe<Scalars['Float']>;
  ninthMonth?: Maybe<Scalars['Float']>;
  secondMonth?: Maybe<Scalars['Float']>;
  seventhMonth?: Maybe<Scalars['Float']>;
  sixthMonth?: Maybe<Scalars['Float']>;
  tenthMonth?: Maybe<Scalars['Float']>;
  thirdMonth?: Maybe<Scalars['Float']>;
  twelfthMonth?: Maybe<Scalars['Float']>;
};

export type MonthlyDividendRateInput = {
  eightMonth?: InputMaybe<Scalars['Float']>;
  eleventhMonth?: InputMaybe<Scalars['Float']>;
  fifthMonth?: InputMaybe<Scalars['Float']>;
  firstMonth?: InputMaybe<Scalars['Float']>;
  fourthMonth?: InputMaybe<Scalars['Float']>;
  ninthMonth?: InputMaybe<Scalars['Float']>;
  secondMonth?: InputMaybe<Scalars['Float']>;
  seventhMonth?: InputMaybe<Scalars['Float']>;
  sixthMonth?: InputMaybe<Scalars['Float']>;
  tenthMonth?: InputMaybe<Scalars['Float']>;
  thirdMonth?: InputMaybe<Scalars['Float']>;
  twelfthMonth?: InputMaybe<Scalars['Float']>;
};

export type MonthlyTransactions = {
  closingBalance?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  month: Scalars['String'];
  transactions: Array<Maybe<Transactions>>;
};

export enum Months {
  April = 'APRIL',
  August = 'AUGUST',
  December = 'DECEMBER',
  February = 'FEBRUARY',
  January = 'JANUARY',
  July = 'JULY',
  June = 'JUNE',
  March = 'MARCH',
  May = 'MAY',
  November = 'NOVEMBER',
  October = 'OCTOBER',
  September = 'SEPTEMBER',
}

export type Municipality = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
  wards: Array<Scalars['Int']>;
};

export type Mutation = {
  account: DepositLoanAccountMutation;
  alternativeChannel?: Maybe<AlternativeChannelMutation>;
  auth: AuthMutation;
  bank: BankMutation;
  document: DocumentMutation;
  eBanking: EBankingMutation;
  example: ExampleMutation;
  inventory: InventoryMutation;
  loanAccount: LoanAccountMutation;
  members: MemberMutation;
  neosys: NeosysMutation;
  newId: Scalars['String'];
  presignedUrl: PresignedUrlMutation;
  report: ReportMutation;
  seed: Scalars['Boolean'];
  settings: SettingsMutation;
  share: ShareMutation;
  transaction: TransactionMutation;
  user: UserMutation;
};

export type MutationNewIdArgs = {
  idType?: InputMaybe<Id_Type>;
};

export type MutationError =
  | AuthorizationError
  | BadRequestError
  | NotFoundError
  | ServerError
  | ValidationError;

export type MyraUser = Base & {
  branch?: Maybe<Branch>;
  contactNo?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['String']>;
  objState: ObjState;
  profilePic?: Maybe<Scalars['String']>;
  profilePicUrl?: Maybe<Scalars['String']>;
  role?: Maybe<Roles>;
};

export type MyraUserConnection = {
  edges?: Maybe<Array<MyraUserEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type MyraUserData = {
  data?: Maybe<Array<Maybe<MyraUserFormStateData>>>;
  error?: Maybe<QueryError>;
};

export type MyraUserEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<MyraUser>;
};

export type MyraUserFormStateData = {
  branch?: Maybe<Scalars['String']>;
  contactNo?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  gender?: Maybe<UserGender>;
  id?: Maybe<Scalars['String']>;
  identificationDetails?: Maybe<Array<Maybe<MyraUserIdentification>>>;
  identificationSelection?: Maybe<Array<Maybe<Scalars['String']>>>;
  isTempAsPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<KymAddress>;
  profilePicture?: Maybe<Array<Maybe<PictureData>>>;
  role?: Maybe<Roles>;
  temporaryAddress?: Maybe<KymAddress>;
};

export type MyraUserFormStateResult = {
  data?: Maybe<MyraUserFormStateData>;
  error?: Maybe<QueryError>;
};

export type MyraUserIdentification = {
  date?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  idNo?: Maybe<Scalars['String']>;
  idType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
};

export type MyraUserIdentificationInput = {
  date?: InputMaybe<Scalars['String']>;
  idNo?: InputMaybe<Scalars['String']>;
  idType?: InputMaybe<Scalars['String']>;
  place?: InputMaybe<Scalars['String']>;
};

export type MyraUserIdentificationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<MyraUserQuery>;
  record?: Maybe<MyraUserIdentification>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MyraUserInput = {
  branch?: InputMaybe<Scalars['String']>;
  contactNo: Scalars['String'];
  dob: Scalars['String'];
  email: Scalars['String'];
  gender: UserGender;
  identificationDetails?: InputMaybe<Array<InputMaybe<MyraUserIdentificationInput>>>;
  identificationSelection?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  isTempAsPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  permanentAddress?: InputMaybe<KymAddressInput>;
  profilePicture?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  role: Roles;
  temporaryAddress?: InputMaybe<KymAddressInput>;
};

export type MyraUserMutation = {
  add?: Maybe<MyraUserResult>;
};

export type MyraUserMutationAddArgs = {
  data?: InputMaybe<MyraUserInput>;
  id: Scalars['ID'];
};

export type MyraUserQuery = {
  formState?: Maybe<MyraUserFormStateResult>;
  list?: Maybe<MyraUserConnection>;
};

export type MyraUserQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type MyraUserQueryListArgs = {
  filter?: InputMaybe<MyraUserSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type MyraUserResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<MyraUserQuery>;
  record?: Maybe<MyraUser>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MyraUserSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Roles>;
};

export type Name = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
};

export enum NatureOfCooperative {
  AgricultureCooperative = 'AGRICULTURE_COOPERATIVE',
  HealthCooperative = 'HEALTH_COOPERATIVE',
  MultipurposeCooperative = 'MULTIPURPOSE_COOPERATIVE',
  Others = 'OTHERS',
  SavingAndCredit = 'SAVING_AND_CREDIT',
}

export enum NatureOfDepositProduct {
  Current = 'CURRENT',
  RecurringSaving = 'RECURRING_SAVING',
  Saving = 'SAVING',
  TermSavingOrFd = 'TERM_SAVING_OR_FD',
}

export enum NatureOfLoanProduct {
  Progressive = 'PROGRESSIVE',
  Unprogressive = 'UNPROGRESSIVE',
}

export type NeosysAuthMutation = {
  login?: Maybe<NeosysLoginResult>;
  token?: Maybe<NeosysAuthTokenResult>;
};

export type NeosysAuthMutationLoginArgs = {
  data: NeosysLoginInput;
};

export type NeosysAuthMutationTokenArgs = {
  refreshToken: Scalars['String'];
};

export type NeosysAuthQuery = {
  me: NeosysMeResult;
};

export type NeosysAuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type NeosysAuthTokenResult = {
  error?: Maybe<MutationError>;
  token?: Maybe<NeosysAuthToken>;
};

export type NeosysClientFilter = {
  dateFrom?: InputMaybe<Scalars['String']>;
  dateTo?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<ObjState>;
};

export type NeosysClientMinimalInfo = {
  clientName?: Maybe<Scalars['String']>;
  dateJoined?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['String']>;
  houseNo?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['String']>;
  locality?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type NeosysClientMutation = {
  add?: Maybe<OrganizationClientAddResult>;
};

export type NeosysClientMutationAddArgs = {
  data?: InputMaybe<OrganizationClientInput>;
};

export type NeosysClientQuery = {
  list?: Maybe<Array<Maybe<NeosysClientMinimalInfo>>>;
};

export type NeosysClientQueryListArgs = {
  filter?: InputMaybe<NeosysClientFilter>;
};

export type NeosysLoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type NeosysLoginRecord = {
  token: NeosysAuthToken;
  user: NeosysUser;
};

export type NeosysLoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<NeosysLoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type NeosysMeResult = {
  data?: Maybe<NeosysUser>;
  error?: Maybe<QueryError>;
};

export type NeosysMutation = {
  auth?: Maybe<NeosysAuthMutation>;
  client?: Maybe<NeosysClientMutation>;
};

export type NeosysQuery = {
  auth?: Maybe<NeosysAuthQuery>;
  client?: Maybe<NeosysClientQuery>;
};

export type NeosysUser = Base & {
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['Localized'];
  id: Scalars['ID'];
  lastName: Scalars['Localized'];
  middleName: Scalars['Localized'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  username: Scalars['String'];
};

export type Nominee = {
  address?: Maybe<Address>;
  citizenship?: Maybe<Citizenship>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NomineeInNepali = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NotFoundError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type NotificationFilter = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum ObjState {
  Approved = 'APPROVED',
  Draft = 'DRAFT',
  Inactive = 'INACTIVE',
  Validated = 'VALIDATED',
}

export type OfficialUseData = {
  acceptableAddressDoc?: Maybe<Scalars['Boolean']>;
  checkNegative?: Maybe<Scalars['Boolean']>;
  checkSanction?: Maybe<Scalars['Boolean']>;
  docCollectedAndVerified?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  isStaff?: Maybe<Scalars['Boolean']>;
  riskCategory?: Maybe<OfficialUseRiskCategory>;
};

export type OfficialUseInputData = {
  acceptableAddressDoc?: InputMaybe<Scalars['Boolean']>;
  checkNegative?: InputMaybe<Scalars['Boolean']>;
  checkSanction?: InputMaybe<Scalars['Boolean']>;
  docCollectedAndVerified?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isStaff?: InputMaybe<Scalars['Boolean']>;
  riskCategory?: InputMaybe<OfficialUseRiskCategory>;
};

export type OfficialUseResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<OfficialUseData>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum OfficialUseRiskCategory {
  High = 'HIGH',
  Low = 'LOW',
  Medium = 'MEDIUM',
  Pep = 'PEP',
}

export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export type Organization = Base & {
  address?: Maybe<Address>;
  basicDetails?: Maybe<OrganizationBasicDetails>;
  contactDetails?: Maybe<OrganizationContactDetails>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  location?: Maybe<LocationCoordinate>;
  mainContactPerson?: Maybe<OrganizationMainContactPerson>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  registrationDetails?: Maybe<OrganizationRegistrationDetails>;
  statistics?: Maybe<OrganizationStatistics>;
};

export type OrganizationAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  record?: Maybe<Organization>;
  recordId: Scalars['ID'];
};

export type OrganizationAddressDetails = {
  coordinates?: Maybe<Coordinate>;
  districtId?: Maybe<Scalars['Int']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type OrganizationAddressDetailsInput = {
  coordinates?: InputMaybe<CoordinateInput>;
  districtId?: InputMaybe<Scalars['Int']>;
  houseNo?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type OrganizationBasicDetails = {
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  typeOfOrganization?: Maybe<TypeOfOrganization>;
};

export type OrganizationClient = {
  addressDetails?: Maybe<OrganizationAddressDetails>;
  contactDetails?: Maybe<OrganizationClientContactDetails>;
  documents?: Maybe<OrganizationClientDocuments>;
  license?: Maybe<OrganizationInstallmentLicense>;
  mainContactPerson?: Maybe<ContactPerson>;
  modules?: Maybe<Array<Maybe<AllModules>>>;
  natureOfCoop?: Maybe<NatureOfCooperative>;
  organizationCode?: Maybe<Scalars['String']>;
  organizationLogo?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
  organizationType?: Maybe<OrganizationType>;
  registrationDetails?: Maybe<Array<Maybe<OrganizationRegistrationDetails>>>;
  securitySetup?: Maybe<OrganizationSecuritySetup>;
  technicalContactPerson?: Maybe<ContactPerson>;
  urlSlug?: Maybe<Scalars['String']>;
  workingArea?: Maybe<Array<Maybe<OrganizationAddressDetails>>>;
};

export type OrganizationClientAddResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<OrganizationClient>;
  recordId?: Maybe<Scalars['ID']>;
};

export type OrganizationClientContactDetails = {
  email?: Maybe<Scalars['String']>;
  officePhone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationClientDocuments = {
  agmOrBodDocument?: Maybe<Array<Maybe<Scalars['String']>>>;
  latestAuditReport?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Array<Maybe<Scalars['String']>>>;
  minuteOfCentralRep?: Maybe<Array<Maybe<Scalars['String']>>>;
  moaOrAoa?: Maybe<Array<Maybe<Scalars['String']>>>;
  panCertificate?: Maybe<Array<Maybe<Scalars['String']>>>;
  registeredCertificate?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxClearance?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationClientDocumentsInput = {
  agmOrBodDocument?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  latestAuditReport?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  logo?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  minuteOfCentralRep?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  moaOrAoa?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  panCertificate?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  registeredCertificate?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  taxClearance?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type OrganizationClientInput = {
  addressDetails?: InputMaybe<OrganizationAddressDetailsInput>;
  contactDetails?: InputMaybe<OrganizationContactDetailsInput>;
  documents?: InputMaybe<OrganizationClientDocumentsInput>;
  license?: InputMaybe<OrganizationInstallmentLicense>;
  mainContactPerson?: InputMaybe<ContactPersonInput>;
  modules?: InputMaybe<Array<InputMaybe<AllModules>>>;
  natureOfCoop?: InputMaybe<NatureOfCooperative>;
  organizationCode?: InputMaybe<Scalars['String']>;
  organizationLogo?: InputMaybe<Scalars['String']>;
  organizationName?: InputMaybe<Scalars['String']>;
  organizationType?: InputMaybe<OrganizationType>;
  registrationDetails?: InputMaybe<Array<InputMaybe<OrganizationRegistrationDetailsInput>>>;
  securitySetup?: InputMaybe<OrganizationSecuritySetup>;
  technicalContactPerson?: InputMaybe<ContactPersonInput>;
  urlSlug?: InputMaybe<Scalars['String']>;
  workingArea?: InputMaybe<Array<InputMaybe<OrganizationAddressDetailsInput>>>;
};

export type OrganizationClientRegistrationDetails = {
  panOrVatNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<Scalars['String']>;
  registeredDate?: Maybe<Scalars['String']>;
  registeredNo?: Maybe<Scalars['String']>;
  registeredOffice?: Maybe<Scalars['String']>;
};

export type OrganizationContactDetails = {
  email?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationContactDetailsInput = {
  email?: InputMaybe<Scalars['String']>;
  officePhone?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type OrganizationDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  recordId: Scalars['ID'];
};

export type OrganizationDocument = {
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type OrganizationFormData = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  location?: Maybe<LocationCoordinate>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  panOrVat?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  totalCapital?: Maybe<Scalars['Float']>;
  totalMembers?: Maybe<Scalars['Int']>;
  typeOfOrganization?: Maybe<TypeOfOrganization>;
  wardNo?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationFormStateResult = {
  data?: Maybe<OrganizationFormData>;
  error?: Maybe<QueryError>;
};

export type OrganizationGetResult = {
  data?: Maybe<Organization>;
  error?: Maybe<QueryError>;
};

export type OrganizationInput = {
  contactPersonContactNumber?: InputMaybe<Scalars['String']>;
  contactPersonName?: InputMaybe<Scalars['String']>;
  districtId?: InputMaybe<Scalars['Int']>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  email?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationCoordinateInput>;
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  panOrVat?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  regdAddress?: InputMaybe<Scalars['String']>;
  regdNo?: InputMaybe<Scalars['String']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  totalCapital?: InputMaybe<Scalars['Float']>;
  totalMembers?: InputMaybe<Scalars['Int']>;
  typeOfOrganization?: InputMaybe<TypeOfOrganization>;
  wardNo?: InputMaybe<Scalars['Int']>;
  website?: InputMaybe<Scalars['String']>;
};

export enum OrganizationInstallmentLicense {
  Basic = 'BASIC',
  Professional = 'PROFESSIONAL',
  Standard = 'STANDARD',
}

export type OrganizationListResult = {
  data?: Maybe<Array<Maybe<Organization>>>;
  error?: Maybe<QueryError>;
};

export type OrganizationMainContactPerson = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type OrganizationRegistrationDetails = {
  panOrVat?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
};

export type OrganizationRegistrationDetailsInput = {
  panOrVatNo?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<Scalars['String']>;
  registeredDate?: InputMaybe<Scalars['String']>;
  registeredNo?: InputMaybe<Scalars['String']>;
  registeredOffice?: InputMaybe<Scalars['String']>;
};

export enum OrganizationSecuritySetup {
  PureSass = 'PURE_SASS',
  Vpn = 'VPN',
}

export type OrganizationSettingsMutation = {
  initialSetup?: Maybe<OrganizationAddResult>;
};

export type OrganizationSettingsMutationInitialSetupArgs = {
  data: OrganizationInput;
};

export type OrganizationSettingsQuery = {
  formState?: Maybe<OrganizationFormStateResult>;
  /** This is to get organization details of a logged in employee. id of that email will be extracted from the employee who sends the request */
  mine?: Maybe<OrganizationGetResult>;
};

export type OrganizationStatistics = {
  totalCapital: Scalars['Float'];
  totalMembers: Scalars['Int'];
};

export enum OrganizationType {
  CooperativeUnion = 'COOPERATIVE_UNION',
  DistrictUnion = 'DISTRICT_UNION',
  Preliminary = 'PRELIMINARY',
  ProvinceUnion = 'PROVINCE_UNION',
}

export type OverviewView = {
  basicInformation?: Maybe<MemberBasicInfoView>;
  payments?: Maybe<Array<Maybe<MemberPaymentView>>>;
  recentTransactions?: Maybe<Array<Maybe<MemberRecentTransactionView>>>;
  statistics?: Maybe<MemberStatisticsView>;
};

export type PageInfo = {
  endCursor?: Maybe<Scalars['Cursor']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Pagination = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<Order>;
};

export type Penalty = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PenaltyFormState = {
  dayAfterInstallmentDate?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PenaltyInput = {
  dayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  flatRatePenalty?: InputMaybe<Scalars['Float']>;
  minimumAmount?: InputMaybe<Scalars['Amount']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
  rateType?: InputMaybe<PenaltyRateType>;
};

export enum PenaltyRateType {
  FlatRate = 'FLAT_RATE',
  RelativeRate = 'RELATIVE_RATE',
}

export type PenaltyRebate = {
  penalty?: Maybe<PenaltyFormState>;
  prematurePenalty?: Maybe<PrematurePenaltyFormState>;
  rebate?: Maybe<RebateFormState>;
  withdrawPenalty?: Maybe<WithdrawPenaltyFormState>;
};

export type PenaltyRebateResult = {
  data?: Maybe<PenaltyRebate>;
  error?: Maybe<QueryError>;
};

export enum PenaltyType {
  Installment = 'INSTALLMENT',
  Interest = 'INTEREST',
  Principal = 'PRINCIPAL',
}

export type PenaltyTypeInput = {
  dayAfterInstallmentDate?: InputMaybe<Scalars['Int']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export type PersonalInformation = {
  citizenship?: Maybe<Citizenship>;
  dateOfBirth?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  inNepali?: Maybe<PersonalInformationInNepali>;
  name?: Maybe<Name>;
  nationality?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
  panNumber?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type PersonalInformationInNepali = {
  name?: Maybe<Name>;
  occupation?: Maybe<Scalars['String']>;
};

export type PictureData = {
  identifier?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type PredefinedElementFilter = {
  category: FormCategory;
  searchTerm: FormSearchTerm;
};

export type PredefinedElementListFilter = {
  category?: InputMaybe<FormCategory>;
};

export type PredefinedElementListQueryResult = {
  data?: Maybe<Array<Maybe<FormElement>>>;
  error?: Maybe<QueryError>;
};

export type PredefinedElementQueryResult = {
  data?: Maybe<FormElement>;
  error?: Maybe<QueryError>;
};

export type PredefinedFormQuery = {
  details: PredefinedElementQueryResult;
  list: PredefinedElementListQueryResult;
};

export type PredefinedFormQueryDetailsArgs = {
  filter: PredefinedElementFilter;
};

export type PredefinedFormQueryListArgs = {
  filter: PredefinedElementListFilter;
};

export type PrematurePenalty = {
  noOfDays?: InputMaybe<Scalars['Int']>;
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyDateType?: InputMaybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export enum PrematurePenaltyDateType {
  EffectiveDaysFromStart = 'EFFECTIVE_DAYS_FROM_START',
  RemainingDaysToGetMatured = 'REMAINING_DAYS_TO_GET_MATURED',
}

export type PrematurePenaltyFormState = {
  noOfDays?: Maybe<Scalars['Int']>;
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyDateType?: Maybe<PrematurePenaltyDateType>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type PresignedUrlMutation = {
  upload: PresignedUrlOutput;
};

export type PresignedUrlMutationUploadArgs = {
  contentType?: InputMaybe<Scalars['String']>;
};

export type PresignedUrlOutput = {
  filename?: Maybe<Scalars['String']>;
  getUrl?: Maybe<Scalars['String']>;
  putUrl?: Maybe<Scalars['String']>;
};

export type ProductCode = {
  initialNo: Scalars['String'];
  prefix: Scalars['String'];
};

export type ProductCodeFormState = {
  initialNo: Scalars['String'];
  prefix: Scalars['String'];
};

export type ProductCodeType = {
  initialNo: Scalars['String'];
  prefix: Scalars['String'];
};

export type ProductsQuery = {
  depositProduct?: Maybe<DepositProductCategoryList>;
  getDepositProductCriteria?: Maybe<DepositProductCriteriaResult>;
  getLoanProductCriteria?: Maybe<LoanProductCriteriaResult>;
  getLoanProductType?: Maybe<LoanSettingsProductTypeData>;
  loanProductSubTypes?: Maybe<Array<Maybe<LoanSettingsProductSubTypeData>>>;
  loanProducts?: Maybe<LoanProductLists>;
};

export type ProductsQueryDepositProductArgs = {
  filter: NatureOfDepositProduct;
};

export type ProductsQueryGetDepositProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type ProductsQueryGetLoanProductCriteriaArgs = {
  productId: Scalars['ID'];
};

export type ProductsQueryGetLoanProductTypeArgs = {
  id: Scalars['ID'];
};

export type ProductsQueryLoanProductsArgs = {
  productSubTypeId: Scalars['ID'];
};

export type Province = {
  districts: Array<District>;
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type QuarterlyDividendRate = {
  firstQuarter?: Maybe<Scalars['Float']>;
  fourthQuarter?: Maybe<Scalars['Float']>;
  secondQuarter?: Maybe<Scalars['Float']>;
  thirdQuarter?: Maybe<Scalars['Float']>;
};

export type QuarterlyDividendRateInput = {
  firstQuarter?: InputMaybe<Scalars['Float']>;
  fourthQuarter?: InputMaybe<Scalars['Float']>;
  secondQuarter?: InputMaybe<Scalars['Float']>;
  thirdQuarter?: InputMaybe<Scalars['Float']>;
};

export type Query = {
  account: DepositLoanAccountQuery;
  administration: AdministrationQuery;
  alternativeChannel: AlternativeChannelQuery;
  auditLog: AuditLogQuery;
  auth: AuthQuery;
  bank: BankQuery;
  config: ConfigQuery;
  dashboard: DashboardQuery;
  document: DocumentQuery;
  eBanking: EBankingQuery;
  example: ExampleQuery;
  form: FormQuery;
  inventory: InventoryQuery;
  loanAccount: LoanAccountQuery;
  members: MemberQuery;
  neosys: NeosysQuery;
  report: ReportQuery;
  routesAndCodes: RoutesAndCodesQuery;
  search: SearchQuery;
  settings: SettingsQuery;
  share: ShareQuery;
  transaction: TransactionQuery;
  user: UserQuery;
};

export type QueryError = AuthorizationError | BadRequestError | NotFoundError | ServerError;

export type RawAuditLog = {
  data?: Maybe<Array<Maybe<AuditLog>>>;
  error?: Maybe<QueryError>;
};

export type Rebate = {
  dayBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
  rebateLedgerMapping?: Maybe<Scalars['String']>;
  rebateRate?: Maybe<Scalars['Float']>;
};

export type RebateFormState = {
  dayBeforeInstallmentDate?: Maybe<Scalars['Int']>;
  noOfInstallment?: Maybe<Scalars['Int']>;
  rebateAmount?: Maybe<Scalars['Amount']>;
  rebateLedgerMapping?: Maybe<Scalars['String']>;
  rebateRate?: Maybe<Scalars['Float']>;
};

export type RebateInput = {
  daysBeforeInstallmentDate?: InputMaybe<Scalars['Int']>;
  noOfInstallment?: InputMaybe<Scalars['Int']>;
  percentage?: InputMaybe<Scalars['Float']>;
  rebateAmount?: InputMaybe<Scalars['Amount']>;
};

export type RebateTypeInput = {
  dayBeforeInstallmentDate?: InputMaybe<Scalars['Int']>;
  noOfInstallment?: InputMaybe<Scalars['Int']>;
  rebateAmount?: InputMaybe<Scalars['Amount']>;
  rebateLedgerMapping?: InputMaybe<Scalars['String']>;
  rebateRate?: InputMaybe<Scalars['Float']>;
};

export type RecentTransactionFilter = {
  limit: Scalars['Int'];
};

export type ReportDetail = {
  id: Scalars['ID'];
  lastModifiedDate: Scalars['String'];
  name: Scalars['String'];
  reportType: Scalars['String'];
  savedBy: Scalars['String'];
};

export type ReportListConnection = {
  edges?: Maybe<Array<Maybe<ReportListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ReportListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<ReportDetail>;
};

export type ReportListFilter = {
  name?: InputMaybe<Scalars['String']>;
  reportType?: InputMaybe<Scalars['String']>;
  savedBy?: InputMaybe<Scalars['String']>;
};

export type ReportMutation = {
  statementReport?: Maybe<ReportResult>;
};

export type ReportMutationStatementReportArgs = {
  data: StatementReportInput;
};

export enum ReportPeriodType {
  CustomPeriod = 'CUSTOM_PERIOD',
  Last_7Days = 'LAST_7_DAYS',
  Last_14Days = 'LAST_14_DAYS',
  Last_30Days = 'LAST_30_DAYS',
  Lifetime = 'LIFETIME',
  ThisFiscalYearToDate = 'THIS_FISCAL_YEAR_TO_DATE',
  Today = 'TODAY',
  Yesterday = 'YESTERDAY',
}

export type ReportQuery = {
  getReport?: Maybe<SavedReportResponse>;
  listReports: ReportListConnection;
  savingStatementReport?: Maybe<ReportResult>;
  shareStatementReport?: Maybe<ReportResult>;
};

export type ReportQueryGetReportArgs = {
  reportId: Scalars['ID'];
};

export type ReportQueryListReportsArgs = {
  filter?: InputMaybe<ReportListFilter>;
  organizationId?: InputMaybe<Scalars['ID']>;
  pagination?: InputMaybe<Pagination>;
};

export type ReportQuerySavingStatementReportArgs = {
  data: SavingStatementReportSettings;
};

export type ReportQueryShareStatementReportArgs = {
  data: ShareStatementReportSettings;
};

export type ReportResult = {
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['ID']>;
  statement?: Maybe<StatementReport>;
};

export enum RequestSource {
  Ebanking = 'EBANKING',
  MobileBanking = 'MOBILE_BANKING',
}

export type ResetPasswordData = {
  newPassword: Scalars['String'];
  userId: Scalars['String'];
};

export type ResetPasswordResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type Result = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export enum Roles {
  Agent = 'AGENT',
  BranchManager = 'BRANCH_MANAGER',
  HeadTeller = 'HEAD_TELLER',
  Superadmin = 'SUPERADMIN',
  Teller = 'TELLER',
}

export type RoutesAndCodes = {
  code?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type RoutesAndCodesFilter = {
  code?: InputMaybe<Scalars['Int']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type RoutesAndCodesQuery = {
  list: Array<RoutesAndCodes>;
};

export type RoutesAndCodesQueryListArgs = {
  filter?: InputMaybe<RoutesAndCodesFilter>;
};

export enum Share_Status {
  Active = 'ACTIVE',
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED',
}

export enum Share_Transaction_Direction {
  Purchase = 'PURCHASE',
  Return = 'RETURN',
}

export type SavedReportResponse = {
  name?: Maybe<Scalars['String']>;
  settings?: Maybe<SavedReportSettings>;
};

export type SavedReportSettings = ShareStatementReportSettingsType;

export type SavingAmountRange = {
  max?: InputMaybe<Scalars['Int']>;
  min?: InputMaybe<Scalars['Int']>;
};

export type SavingFilters = {
  amountRange?: InputMaybe<SavingAmountRange>;
  service?: InputMaybe<SavingServiceType>;
  transactionType?: InputMaybe<SavingTransactionType>;
};

export enum SavingServiceType {
  Charges = 'CHARGES',
  CustomerInitiated = 'CUSTOMER_INITIATED',
  Interest = 'INTEREST',
}

export type SavingStatement = {
  balanceAmount: Scalars['Float'];
  chequeOrVoucherNo: Scalars['String'];
  date: Scalars['String'];
  depositCr: Scalars['Float'];
  particular: Scalars['String'];
  withdrawDr: Scalars['Float'];
};

export type SavingStatementReport = {
  savingStatement?: Maybe<Array<Maybe<SavingStatement>>>;
  totals?: Maybe<SavingTotalReport>;
};

export type SavingStatementReportSettings = {
  accountId: Scalars['ID'];
  customPeriod?: InputMaybe<CustomPeriodInput>;
  filter?: InputMaybe<SavingFilters>;
  memberId: Scalars['ID'];
  periodType: ReportPeriodType;
};

export type SavingTotalReport = {
  totalBalance: Scalars['Float'];
  totalDeposit: Scalars['Float'];
  totalWithdraw: Scalars['Float'];
};

export enum SavingTransactionType {
  All = 'ALL',
  Deposit = 'DEPOSIT',
  Withdraw = 'WITHDRAW',
}

export type SearchFilterData = {
  filterMode?: InputMaybe<Filter_Mode>;
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<ObjState>;
  page?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
};

export type SearchListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<SearchResultNode>;
};

export type SearchQuery = {
  globalPages: SearchQueryResult;
};

export type SearchQueryGlobalPagesArgs = {
  filter?: InputMaybe<SearchFilterData>;
  pagination?: InputMaybe<Pagination>;
};

export type SearchQueryResult = {
  data?: Maybe<SearchQueryResultData>;
  error?: Maybe<QueryError>;
};

export type SearchQueryResultData = {
  edges?: Maybe<Array<Maybe<SearchListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type SearchResultNode = GlobalPagesResultNode;

export type SectionDetailsFilter = {
  id: Scalars['ID'];
};

export type SectionDetailsQueryResult = {
  data?: Maybe<FormSection>;
  error?: Maybe<QueryError>;
};

export type SectionWiseError = {
  errors?: Maybe<Scalars['InvalidData']>;
  sectionName?: Maybe<Scalars['String']>;
};

export type ServerError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type ServiceCharge = {
  amount?: Maybe<Scalars['Amount']>;
  name?: Maybe<Scalars['String']>;
};

export type ServiceChargeInput = {
  amount?: InputMaybe<Scalars['Amount']>;
  name?: InputMaybe<Scalars['String']>;
};

export type ServiceType = {
  amount?: InputMaybe<Scalars['Amount']>;
  ledgerName?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
};

export type ServiceTypeFormState = {
  amount?: Maybe<Scalars['Amount']>;
  ledgerName?: Maybe<Scalars['String']>;
  serviceName?: Maybe<Scalars['String']>;
};

export type Services = {
  enabled: Scalars['Boolean'];
  icon: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  service_id: Scalars['String'];
};

export type SettingsMutation = {
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  declaration: DeclarationMutation;
  form?: Maybe<FormSettingMutation>;
  general?: Maybe<GeneralSettingsMutation>;
  myraUser?: Maybe<MyraUserMutation>;
};

export type SettingsQuery = {
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  declaration: DeclarationQuery;
  form?: Maybe<FormSettingQuery>;
  general?: Maybe<GeneralSettingsQuery>;
  myraUser?: Maybe<MyraUserQuery>;
};

export type ShareBalance = {
  amount: Scalars['Int'];
  count: Scalars['Int'];
  member: Member;
  memberId?: Maybe<Scalars['ID']>;
};

export type ShareBalanceConnection = {
  edges: Array<ShareBalanceEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ShareBalanceEdge = {
  cursor: Scalars['String'];
  node: ShareBalance;
};

export type ShareBalanceFilter = {
  id?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  memberSearchText?: InputMaybe<Scalars['String']>;
};

export type ShareBonusSettingsBonusResult = {
  accountMapping?: Maybe<Scalars['ID']>;
  taxPayer?: Maybe<TaxPayerOptions>;
  taxRate?: Maybe<Scalars['Float']>;
};

export type ShareBonusSettingsInput = {
  accountMapping?: InputMaybe<Scalars['ID']>;
  taxPayer?: InputMaybe<TaxPayerOptions>;
  taxRate?: InputMaybe<Scalars['Float']>;
};

export type ShareCharge = {
  charge?: Maybe<Scalars['String']>;
  ledgerMapping?: Maybe<Scalars['ID']>;
  maxShare?: Maybe<Scalars['Int']>;
  minShare?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<ShareChargeType>;
};

export type ShareChargeInput = {
  charge?: InputMaybe<Scalars['String']>;
  ledgerMapping?: InputMaybe<Scalars['ID']>;
  maxShare?: InputMaybe<Scalars['Int']>;
  minShare?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ShareChargeType>;
};

export enum ShareChargeType {
  FixedAmount = 'FIXED_AMOUNT',
  Percentage = 'PERCENTAGE',
}

export type ShareCharges = {
  charge?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type ShareDividendSettingsInput = {
  accountForFractionalDividends?: InputMaybe<Scalars['ID']>;
  accountForShareDividends?: InputMaybe<Scalars['ID']>;
  distributionCondition?: InputMaybe<DividendDistributionCondition>;
  dividendRate?: InputMaybe<DividendRateInput>;
  dividendTransferTreatment?: InputMaybe<DividendTransferTreatment>;
  organizationFundForDividends?: InputMaybe<Scalars['ID']>;
};

export type ShareDividendSettingsResult = {
  accountForFractionalDividends?: Maybe<Scalars['ID']>;
  accountForShareDividends?: Maybe<Scalars['ID']>;
  distributionCondition?: Maybe<DividendDistributionCondition>;
  dividendRate?: Maybe<DividendRate>;
  dividendTransferTreatment?: Maybe<DividendTransferTreatment>;
  organizationFundForDividends?: Maybe<Scalars['ID']>;
};

export type ShareExtraCharges = {
  name: Scalars['String'];
  value: Scalars['Float'];
};

export type ShareExtraChargesInput = {
  Id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type ShareHistory = {
  balance?: Maybe<ShareBalance>;
  history?: Maybe<Array<Maybe<ShareRegister>>>;
};

export type ShareIssueChargesInput = {
  other?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
  shareCertificate?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
};

export type ShareIssueChargesResult = {
  other?: Maybe<Array<Maybe<ShareCharge>>>;
  shareCertificate?: Maybe<Array<Maybe<ShareCharge>>>;
};

export type ShareMutation = {
  purchase: SharePurchaseResult;
  return: ShareReturnResult;
};

export type ShareMutationPurchaseArgs = {
  data: SharePurchaseInput;
};

export type ShareMutationReturnArgs = {
  data: ShareReturnInput;
};

export type ShareNumber = {
  end?: Maybe<Scalars['Int']>;
  start?: Maybe<Scalars['Int']>;
};

export enum SharePaymentMode {
  Account = 'ACCOUNT',
  BankVoucherOrCheque = 'BANK_VOUCHER_OR_CHEQUE',
  Cash = 'CASH',
}

export type SharePurchaseError = InvalidDataError;

export type SharePurchaseInput = {
  account?: InputMaybe<ShareTransactionAccountPayment>;
  bankVoucher?: InputMaybe<ShareTransactionVoucherPayment>;
  cash?: InputMaybe<ShareTransactionCash>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId: Scalars['String'];
  paymentMode?: InputMaybe<SharePaymentMode>;
  shareCount: Scalars['Int'];
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type SharePurchaseResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type ShareQuery = {
  balance?: Maybe<ShareBalanceConnection>;
  charges?: Maybe<Array<Maybe<ShareCharges>>>;
  history?: Maybe<ShareHistory>;
  register?: Maybe<ShareRegisterConnection>;
};

export type ShareQueryBalanceArgs = {
  filter?: InputMaybe<ShareBalanceFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type ShareQueryChargesArgs = {
  shareCount: Scalars['Int'];
  transactionType: Share_Transaction_Direction;
};

export type ShareQueryHistoryArgs = {
  memberId: Scalars['ID'];
};

export type ShareQueryRegisterArgs = {
  filter?: InputMaybe<ShareRegisterFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type ShareRegister = {
  accountId?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['Int']>;
  bankId?: Maybe<Scalars['String']>;
  credit?: Maybe<Scalars['Int']>;
  debit?: Maybe<Scalars['Int']>;
  endNumber: Scalars['Int'];
  extraFee?: Maybe<Array<Maybe<ShareExtraCharges>>>;
  id?: Maybe<Scalars['ID']>;
  member?: Maybe<Member>;
  memberId?: Maybe<Scalars['String']>;
  paymentMode?: Maybe<SharePaymentMode>;
  shareAmount?: Maybe<Scalars['Float']>;
  startNumber: Scalars['Int'];
  status?: Maybe<Share_Status>;
  totalAmount?: Maybe<Scalars['Float']>;
  transactionDate?: Maybe<Scalars['String']>;
  transactionDirection: Share_Transaction_Direction;
  voucherNumber?: Maybe<Scalars['String']>;
};

export type ShareRegisterConnection = {
  edges: Array<ShareRegisterEdge>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ShareRegisterEdge = {
  cursor: Scalars['String'];
  node: ShareRegister;
};

export type ShareRegisterFilter = {
  dateFrom?: InputMaybe<Scalars['String']>;
  dateTo?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  memberSearchText?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Share_Status>;
  transactionDirection?: InputMaybe<Share_Transaction_Direction>;
};

export type ShareReturnChargesInput = {
  other?: InputMaybe<Array<InputMaybe<ShareChargeInput>>>;
};

export type ShareReturnChargesResult = {
  other?: Maybe<Array<Maybe<ShareCharge>>>;
};

export type ShareReturnError = InvalidDataError;

export type ShareReturnInput = {
  account?: InputMaybe<ShareTransactionAccountPayment>;
  bankCheque?: InputMaybe<ShareTransactionChequePayment>;
  cash?: InputMaybe<ShareTransactionCash>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId: Scalars['String'];
  noOfReturnedShares: Scalars['Int'];
  paymentMode?: InputMaybe<SharePaymentMode>;
  totalAmount?: InputMaybe<Scalars['String']>;
};

export type ShareReturnResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type ShareSettingsAddMutation = {
  bonus?: Maybe<ShareSettingsQuery>;
  dividend?: Maybe<ShareSettingsQuery>;
  general?: Maybe<ShareSettingsQuery>;
  shareIssueCharges?: Maybe<ShareSettingsQuery>;
  shareReturnCharges?: Maybe<ShareSettingsQuery>;
  transfer?: Maybe<ShareSettingsQuery>;
};

export type ShareSettingsAddMutationBonusArgs = {
  data?: InputMaybe<ShareBonusSettingsInput>;
};

export type ShareSettingsAddMutationDividendArgs = {
  data?: InputMaybe<ShareDividendSettingsInput>;
};

export type ShareSettingsAddMutationGeneralArgs = {
  data?: InputMaybe<ShareSettingsGeneralInput>;
};

export type ShareSettingsAddMutationShareIssueChargesArgs = {
  data?: InputMaybe<ShareIssueChargesInput>;
};

export type ShareSettingsAddMutationShareReturnChargesArgs = {
  data?: InputMaybe<ShareReturnChargesInput>;
};

export type ShareSettingsAddMutationTransferArgs = {
  data?: InputMaybe<ShareTransferSettingsInput>;
};

export type ShareSettingsGeneralInput = {
  endNumber?: InputMaybe<Scalars['Int']>;
  incrementor?: InputMaybe<Scalars['Int']>;
  maximumQuantityOfShare?: InputMaybe<Scalars['Int']>;
  minimumQuantityOfShare?: InputMaybe<Scalars['Int']>;
  multiplicityFactor?: InputMaybe<Scalars['Int']>;
  noOfAuthorisedPaidUpShare?: InputMaybe<Scalars['Int']>;
  noOfDigits?: InputMaybe<Scalars['Int']>;
  noOfIssuedShare?: InputMaybe<Scalars['Int']>;
  paidUpShareRate?: InputMaybe<Scalars['Int']>;
  shareIssueAuthority?: InputMaybe<Array<InputMaybe<BranchCategory>>>;
  startNumber?: InputMaybe<Scalars['Int']>;
  typeOfShare?: InputMaybe<TypeOfShare>;
  typeOfShareKitta?: InputMaybe<TypeOfShare>;
};

export type ShareSettingsGeneralResult = {
  endNumber?: Maybe<Scalars['Int']>;
  incrementor?: Maybe<Scalars['Int']>;
  maximumQuantityOfShare?: Maybe<Scalars['Int']>;
  minimumQuantityOfShare?: Maybe<Scalars['Int']>;
  multiplicityFactor?: Maybe<Scalars['Int']>;
  noOfAuthorisedPaidUpShare?: Maybe<Scalars['Int']>;
  noOfDigits?: Maybe<Scalars['Int']>;
  noOfIssuedShare?: Maybe<Scalars['Int']>;
  paidUpShareRate?: Maybe<Scalars['Int']>;
  shareIssueAuthority?: Maybe<Array<Maybe<BranchCategory>>>;
  startNumber?: Maybe<Scalars['Int']>;
  typeOfShare?: Maybe<TypeOfShare>;
  typeOfShareKitta?: Maybe<TypeOfShare>;
};

export type ShareSettingsMutation = {
  add?: Maybe<ShareSettingsAddMutation>;
};

export type ShareSettingsQuery = {
  bonus?: Maybe<ShareBonusSettingsBonusResult>;
  dividend?: Maybe<ShareDividendSettingsResult>;
  general?: Maybe<ShareSettingsGeneralResult>;
  shareIssueCharges?: Maybe<ShareIssueChargesResult>;
  shareReturnCharges?: Maybe<ShareReturnChargesResult>;
  transfer?: Maybe<ShareTransferSettingsResult>;
};

export type ShareStatement = {
  balanceSheet: Scalars['Int'];
  date: Scalars['String'];
  noOfShares: Scalars['Int'];
  particular: Scalars['String'];
  purchaseAmountCr: Scalars['Int'];
  returnAmountDr: Scalars['Int'];
};

export type ShareStatementReport = {
  shareStatement?: Maybe<Array<Maybe<ShareStatement>>>;
  totals?: Maybe<TotalReport>;
};

export type ShareStatementReportSettings = {
  customPeriod?: InputMaybe<CustomPeriodInput>;
  filter?: InputMaybe<ShareTransactionType>;
  memberId: Scalars['ID'];
  periodType: ReportPeriodType;
};

export type ShareStatementReportSettingsType = {
  customPeriod?: Maybe<CustomPeriodType>;
  filter?: Maybe<ShareTransactionType>;
  memberId: Scalars['ID'];
  periodType: ReportPeriodType;
};

export type ShareTransactionAccountPayment = {
  accountId: Scalars['ID'];
  note?: InputMaybe<Scalars['String']>;
};

export type ShareTransactionCash = {
  cashPaid: Scalars['String'];
  denominations?: InputMaybe<Array<Denomination>>;
  disableDenomination: Scalars['Boolean'];
  fileUpload?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  returned_amount: Scalars['String'];
  sourceOfFund?: InputMaybe<Scalars['String']>;
  total: Scalars['String'];
};

export type ShareTransactionChequePayment = {
  bankId: Scalars['ID'];
  chequeNo: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
};

export enum ShareTransactionType {
  All = 'ALL',
  Issue = 'ISSUE',
  Return = 'RETURN',
}

export type ShareTransactionVoucherPayment = {
  bankId: Scalars['ID'];
  citizenshipDocument?: InputMaybe<Scalars['String']>;
  depositedBy: ShareVoucherDepositedBy;
  depositedByOtherName?: InputMaybe<Scalars['String']>;
  depositedDate: Scalars['String'];
  fileUpload?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  voucherId: Scalars['String'];
};

export type ShareTransferSettingsInput = {
  accountForShareFund?: InputMaybe<Scalars['ID']>;
  mappedShareLedger?: InputMaybe<Scalars['ID']>;
  type?: InputMaybe<ShareTransferType>;
};

export type ShareTransferSettingsResult = {
  accountForShareFund?: Maybe<Scalars['ID']>;
  mappedShareLedger?: Maybe<Scalars['ID']>;
  type?: Maybe<ShareTransferType>;
};

export enum ShareTransferType {
  MemberToMember = 'MEMBER_TO_MEMBER',
  ShareRefund = 'SHARE_REFUND',
}

export enum ShareVoucherDepositedBy {
  Other = 'OTHER',
  Self = 'SELF',
}

export type SisterConcernDetails = {
  address?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
};

export type SisterConcernDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type SisterConcernDetailsType = {
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type StatementReport = SavingStatementReport | ShareStatementReport;

export type StatementReportInput = {
  data?: InputMaybe<ShareStatementReportSettings>;
  id: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
  reportType?: InputMaybe<Scalars['String']>;
};

export type SubscriptionMutation = {
  ReferenceKYM: DocumentMutationResult;
  Upsert: DocumentMutationResult;
};

export type SubscriptionMutationReferenceKymArgs = {
  deference?: InputMaybe<Scalars['Boolean']>;
  fieldId: Scalars['String'];
  memberId: Scalars['String'];
};

export type SubscriptionMutationUpsertArgs = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
};

export enum Transaction_Direction {
  Purchased = 'PURCHASED',
  Sold = 'SOLD',
}

export enum Transaction_Type {
  Deposit = 'DEPOSIT',
  SharePurchase = 'SHARE_PURCHASE',
  Transfer = 'TRANSFER',
  Withdraw = 'WITHDRAW',
}

export enum TaxPayerOptions {
  Cooperative = 'COOPERATIVE',
  Member = 'MEMBER',
}

export type TestDbResult = {
  name: Scalars['String'];
};

export enum TextFormat {
  Email = 'EMAIL',
  IPv4 = 'IPv4',
  IPv6 = 'IPv6',
}

export enum TimePeriod {
  Day = 'DAY',
  Fortnight = 'FORTNIGHT',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR',
}

export type TodayTrend = {
  trendData?: Maybe<Array<Maybe<Scalars['Float']>>>;
  type: DashboardTodayType;
  value: Scalars['Float'];
  yesterdayValue: Scalars['Float'];
};

export type TodayTrendTrendDataArgs = {
  filter: TrendDataFilter;
};

export type TotalReport = {
  totalBalanceSheet?: Maybe<Scalars['Int']>;
  totalCr?: Maybe<Scalars['Int']>;
  totalDr?: Maybe<Scalars['Int']>;
  totalShares?: Maybe<Scalars['Int']>;
};

export type TransactionFilter = {
  fromDate?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  toDate?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<TranslateInput>;
};

export enum TransactionMode {
  Ebanking = 'EBANKING',
  Mobile = 'MOBILE',
  MyraErp = 'MYRA_ERP',
}

export type TransactionMutation = {
  addMemberToAgent?: Maybe<DepositLoanAccountData>;
  agentTodayDeposit?: Maybe<AgentTodayListResult>;
  agentTodayList?: Maybe<AgentTodayListResult>;
  bulkDeposit: BulkDepositResult;
  deposit: DepositResult;
  endOfDay?: Maybe<Scalars['String']>;
  transfer: TransferResult;
  withdraw: WithdrawResult;
};

export type TransactionMutationAddMemberToAgentArgs = {
  agentId: Scalars['String'];
  data?: InputMaybe<AssignMembersInput>;
  override?: InputMaybe<Scalars['Boolean']>;
};

export type TransactionMutationAgentTodayDepositArgs = {
  agentID: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>>>;
};

export type TransactionMutationAgentTodayListArgs = {
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>>>;
  id: Scalars['ID'];
};

export type TransactionMutationBulkDepositArgs = {
  data?: InputMaybe<BulkDepositInput>;
};

export type TransactionMutationDepositArgs = {
  data: DepositInput;
};

export type TransactionMutationTransferArgs = {
  data: TransferInput;
};

export type TransactionMutationWithdrawArgs = {
  data: WithdrawInput;
};

export type TransactionQuery = {
  agentDetail?: Maybe<AgentRecord>;
  assignedMemberList: AssignedMembersListConnection;
  endOfDayDate: Scalars['String'];
  listAgent: AccountAgentListConnection;
  listAgentTask?: Maybe<AgentTodayListData>;
  listDeposit: AccountActivityListConnection;
  listTransfer: AccountTransferListConnection;
  listWithdraw: AccountActivityListConnection;
};

export type TransactionQueryAgentDetailArgs = {
  id: Scalars['ID'];
};

export type TransactionQueryAssignedMemberListArgs = {
  filter?: InputMaybe<AssignedMemberListFiler>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListAgentArgs = {
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListAgentTaskArgs = {
  id: Scalars['ID'];
};

export type TransactionQueryListDepositArgs = {
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListTransferArgs = {
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type TransactionQueryListWithdrawArgs = {
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
};

export enum TransactionState {
  Active = 'ACTIVE',
  Submitted = 'SUBMITTED',
}

export type Transactions = {
  amount: Scalars['Float'];
  date: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  transactionDirection: Transaction_Direction;
  transactionType: Transaction_Type;
};

export type TransferData = {
  id?: Maybe<Scalars['ID']>;
  payeeNumber?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  transactionAccount?: Maybe<Scalars['String']>;
  transactionMode?: Maybe<TransactionMode>;
};

export type TransferInput = {
  amount: Scalars['String'];
  chequeNo?: InputMaybe<Scalars['String']>;
  destAccountId: Scalars['String'];
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  pin?: InputMaybe<Scalars['Int']>;
  srcAccountId: Scalars['String'];
  transferMode?: InputMaybe<TransactionMode>;
  transferType?: InputMaybe<TransferType>;
  withdrawSlipNo?: InputMaybe<Scalars['String']>;
  withdrawWith?: InputMaybe<WithdrawWith>;
};

export type TransferResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  record?: Maybe<TransferData>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum TransferType {
  Member = 'MEMBER',
  Self = 'SELF',
}

export type TranslateData = {
  data?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: Maybe<Scalars['String']>;
};

export type TranslateInput = {
  data?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: InputMaybe<Scalars['String']>;
};

export type TranslateQueryResult = {
  data?: Maybe<Array<Maybe<TranslateData>>>;
  error?: Maybe<QueryError>;
};

export type TrendDataFilter = {
  fromDate?: InputMaybe<Scalars['String']>;
  period?: InputMaybe<TimePeriod>;
  toDate?: InputMaybe<Scalars['String']>;
};

export enum TypeOfOrganization {
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
}

export enum TypeOfShare {
  PaidUp = 'PAID_UP',
}

export type UploadedDocument = {
  docData: Array<Maybe<UploadedDocumentData>>;
  fieldId?: Maybe<Scalars['String']>;
};

export type UploadedDocumentData = {
  identifier: Scalars['String'];
  url: Scalars['String'];
};

export type User = Base & {
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['Localized'];
  id: Scalars['ID'];
  lastName: Scalars['Localized'];
  middleName: Scalars['Localized'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  organization: Organization;
  username: Scalars['String'];
};

export type UserData = {
  preference?: Maybe<UserPreference>;
  user?: Maybe<User>;
};

export enum UserGender {
  Female = 'FEMALE',
  Male = 'MALE',
  Other = 'OTHER',
}

export type UserMutation = {
  preference?: Maybe<UserPreferenceMutation>;
  resetPassword?: Maybe<ResetPasswordResult>;
};

export type UserMutationResetPasswordArgs = {
  data: ResetPasswordData;
};

export type UserPreference = {
  date?: Maybe<DateType>;
  id?: Maybe<Scalars['ID']>;
  language?: Maybe<Language>;
  languageCode?: Maybe<Scalars['String']>;
};

export type UserPreferenceInput = {
  date?: InputMaybe<DateType>;
  language?: InputMaybe<Language>;
};

export type UserPreferenceMutation = {
  update?: Maybe<UserPreferenceResult>;
};

export type UserPreferenceMutationUpdateArgs = {
  data: UserPreferenceInput;
  id: Scalars['ID'];
};

export type UserPreferenceQuery = {
  get?: Maybe<UserPreference>;
};

export type UserPreferenceQueryGetArgs = {
  id: Scalars['ID'];
};

export type UserPreferenceResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<UserPreference>;
  recordId?: Maybe<Scalars['ID']>;
};

export type UserQuery = {
  preference?: Maybe<UserPreferenceQuery>;
};

export enum UserType {
  Human = 'HUMAN',
  System = 'SYSTEM',
}

export type UtilityPayemntMutation = {
  post?: Maybe<UtilityPaymentResult>;
};

export type UtilityPayemntMutationPostArgs = {
  serviceID: Scalars['ID'];
  state?: InputMaybe<Scalars['Map']>;
  type?: InputMaybe<Scalars['String']>;
};

export type UtilityPaymentError = UtilityPaymentInvalidDataError;

export type UtilityPaymentInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type UtilityPaymentLayoutComponent = {
  contents?: Maybe<Scalars['Map']>;
  type?: Maybe<Scalars['String']>;
};

export type UtilityPaymentRecord = {
  components?: Maybe<Array<Maybe<UtilityPaymentLayoutComponent>>>;
  header_name?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Map']>;
  type?: Maybe<Scalars['String']>;
};

export type UtilityPaymentResult = {
  error?: Maybe<UtilityPaymentError>;
  record?: Maybe<UtilityPaymentRecord>;
  transactionID?: Maybe<Scalars['ID']>;
};

export type UtilityPayments = {
  enabled: Scalars['Boolean'];
  icon: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  service_id: Scalars['String'];
};

export type ValidationError = {
  code: Scalars['Int'];
  message: Scalars['InvalidData'];
};

export enum ValuationMethod {
  Dv = 'DV',
  Fmv = 'FMV',
}

export type Valuator = Base & {
  academicQualification?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  contractDate?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  insurancePremium?: Maybe<Scalars['Float']>;
  mobileNo?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  phoneNo?: Maybe<Scalars['String']>;
  renewalDate?: Maybe<Scalars['String']>;
  valuationLicenseNo?: Maybe<Scalars['String']>;
  valuatorId?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
  valuatorType?: Maybe<ValuatorType>;
};

export type ValuatorConnection = {
  edges?: Maybe<Array<ValuatorEdge>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ValuatorEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Valuator>;
};

export type ValuatorFormStateData = {
  academicQualification?: Maybe<Scalars['String']>;
  address?: Maybe<KymAddress>;
  contractDate?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  insurancePremium?: Maybe<Scalars['Float']>;
  mobileNo?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
  renewalDate?: Maybe<Scalars['String']>;
  valuationLicenseNo?: Maybe<Scalars['String']>;
  valuatorId?: Maybe<Scalars['String']>;
  valuatorName?: Maybe<Scalars['String']>;
  valuatorType?: Maybe<ValuatorType>;
};

export type ValuatorFormStateResult = {
  data?: Maybe<ValuatorFormStateData>;
  error?: Maybe<QueryError>;
};

export type ValuatorInput = {
  academicQualification?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<KymAddressInput>;
  contractDate?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  email?: InputMaybe<Scalars['String']>;
  insurancePremium?: InputMaybe<Scalars['Float']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
  renewalDate?: InputMaybe<Scalars['String']>;
  valuationLicenseNo?: InputMaybe<Scalars['String']>;
  valuatorId?: InputMaybe<Scalars['String']>;
  valuatorName?: InputMaybe<Scalars['String']>;
  valuatorType?: InputMaybe<ValuatorType>;
};

export type ValuatorResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ValuatorSettingsQuery>;
  record?: Maybe<Valuator>;
  recordId: Scalars['ID'];
};

export type ValuatorSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type ValuatorSettingsMutation = {
  add?: Maybe<ValuatorResult>;
};

export type ValuatorSettingsMutationAddArgs = {
  data?: InputMaybe<ValuatorInput>;
  id: Scalars['ID'];
};

export type ValuatorSettingsQuery = {
  formState?: Maybe<ValuatorFormStateResult>;
  list?: Maybe<ValuatorConnection>;
};

export type ValuatorSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type ValuatorSettingsQueryListArgs = {
  filter?: InputMaybe<ValuatorSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export enum ValuatorType {
  Individual = 'INDIVIDUAL',
  Organization = 'ORGANIZATION',
}

export enum Week {
  Friday = 'FRIDAY',
  Monday = 'MONDAY',
  Saturday = 'SATURDAY',
  Sunday = 'SUNDAY',
  Thursaday = 'THURSADAY',
  Tuesday = 'TUESDAY',
  Wednesday = 'WEDNESDAY',
}

export enum WeeklyFrequency {
  Day = 'DAY',
  DayOfTheWeek = 'DAY_OF_THE_WEEK',
}

export type WithdrawBankCheque = {
  amount: Scalars['String'];
  bankId: Scalars['String'];
  chequeNo: Scalars['String'];
};

export enum WithdrawBy {
  Agent = 'AGENT',
  Self = 'SELF',
}

export type WithdrawInput = {
  accountId: Scalars['String'];
  agentId?: InputMaybe<Scalars['String']>;
  amount: Scalars['String'];
  bankCheque?: InputMaybe<WithdrawBankCheque>;
  cash?: InputMaybe<DepositCash>;
  chequeNo?: InputMaybe<Scalars['String']>;
  doc_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  fine?: InputMaybe<Scalars['String']>;
  memberId: Scalars['String'];
  notes?: InputMaybe<Scalars['String']>;
  override?: InputMaybe<Scalars['Boolean']>;
  payment_type: WithdrawPaymentType;
  sourceOfFund?: InputMaybe<Scalars['String']>;
  withdrawSlipNo?: InputMaybe<Scalars['String']>;
  withdrawWith: WithdrawWith;
  withdrawnBy: WithdrawBy;
};

export enum WithdrawPaymentType {
  BankCheque = 'BANK_CHEQUE',
  Cash = 'CASH',
  WithdrawSlip = 'WITHDRAW_SLIP',
}

export type WithdrawPenalty = {
  penaltyAmount?: InputMaybe<Scalars['Amount']>;
  penaltyLedgerMapping?: InputMaybe<Scalars['String']>;
  penaltyRate?: InputMaybe<Scalars['Float']>;
};

export type WithdrawPenaltyFormState = {
  penaltyAmount?: Maybe<Scalars['Amount']>;
  penaltyLedgerMapping?: Maybe<Scalars['String']>;
  penaltyRate?: Maybe<Scalars['Float']>;
};

export type WithdrawResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<TransactionQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export enum WithdrawWith {
  Cheque = 'CHEQUE',
  WithdrawSlip = 'WITHDRAW_SLIP',
}

export type SetAccountCloseDataMutationVariables = Exact<{
  data?: InputMaybe<DepositAccountClose>;
}>;

export type SetAccountCloseDataMutation = {
  account: {
    close?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAccountOpenDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: DepositLoanAccountInput;
}>;

export type SetAccountOpenDataMutation = {
  account: {
    add?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAccountDocumentDataMutationVariables = Exact<{
  subscriptionId: Scalars['String'];
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetAccountDocumentDataMutation = {
  document: { Subscription: { Upsert: { recordId?: string | null } } };
};

export type SetAddMemberToAgentDataMutationVariables = Exact<{
  agentId: Scalars['String'];
  data?: InputMaybe<AssignMembersInput>;
  override?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetAddMemberToAgentDataMutation = {
  transaction: {
    addMemberToAgent?: {
      data?: { id: string } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAgentTodayListDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>> | InputMaybe<AgentTodayListInput>>;
}>;

export type SetAgentTodayListDataMutation = {
  transaction: {
    agentTodayList?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetAgentTodayDepositDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<Array<InputMaybe<AgentTodayListInput>> | InputMaybe<AgentTodayListInput>>;
}>;

export type SetAgentTodayDepositDataMutation = {
  transaction: {
    agentTodayDeposit?: {
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type LoginMutationVariables = Exact<{
  data: LoginInput;
}>;

export type LoginMutation = {
  auth: {
    login?: {
      recordId?: string | null;
      record?: {
        token: { access: string; refresh: string };
        data: {
          user?: {
            id: string;
            objState: ObjState;
            username: string;
            firstName: Record<'local' | 'en' | 'np', string>;
            middleName: Record<'local' | 'en' | 'np', string>;
            lastName: Record<'local' | 'en' | 'np', string>;
          } | null;
          preference?: {
            language?: Language | null;
            languageCode?: string | null;
            date?: DateType | null;
          } | null;
        };
      } | null;
    } | null;
  };
};

export type RefreshMutationVariables = Exact<{
  refreshToken: Scalars['String'];
}>;

export type RefreshMutation = {
  auth: {
    token?: {
      token?: { access: string; refresh: string } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ResetPasswordMutationVariables = Exact<{
  userId: Scalars['String'];
  newPassword: Scalars['String'];
}>;

export type ResetPasswordMutation = {
  user: {
    resetPassword?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type AddNewAccountInCoaMutationVariables = Exact<{
  data: AddCoaAccountInput;
}>;

export type AddNewAccountInCoaMutation = {
  settings: {
    chartsOfAccount?: {
      account?: {
        add: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type SetCooperativeDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymCooperativeFormInput;
}>;

export type SetCooperativeDataMutation = {
  members: { cooperative?: { add?: { recordId: string } | null } | null };
};

export type SetCoopAccOperatorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  accOperatorId: Scalars['ID'];
  data: KymCoopAccountOperatorDetailsFormInput;
}>;

export type SetCoopAccOperatorDataMutation = {
  members: {
    cooperative?: {
      accountOperatorDetail?: { Upsert?: { recordId: string } | null } | null;
    } | null;
  };
};

export type DeleteCoopAccOperatorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  accOperatorId: Scalars['ID'];
}>;

export type DeleteCoopAccOperatorDataMutation = {
  members: {
    cooperative?: {
      accountOperatorDetail?: { Delete?: { recordId: string } | null } | null;
    } | null;
  };
};

export type SetCooPdirectorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  dirId: Scalars['ID'];
  data: KymCoopDirectorDetailsFormInput;
}>;

export type SetCooPdirectorDataMutation = {
  members: {
    cooperative?: { directorDetails?: { Upsert?: { recordId: string } | null } | null } | null;
  };
};

export type DeleteCooPdirectorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  dirId: Scalars['ID'];
}>;

export type DeleteCooPdirectorDataMutation = {
  members: {
    cooperative?: { directorDetails?: { Delete?: { recordId: string } | null } | null } | null;
  };
};

export type SetCooperativeUnionInstitutionDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionInstitutionInformationInput>;
}>;

export type SetCooperativeUnionInstitutionDataMutation = {
  members: {
    cooperativeUnion?: {
      add?: { institutionInformation?: { recordId: string } | null } | null;
    } | null;
  };
};

export type SetPersonnelDetailsMutationVariables = Exact<{
  id: Scalars['ID'];
  personnelId?: InputMaybe<Scalars['String']>;
  sectionType: CooperativeUnionPersonnelSection;
  data?: InputMaybe<CoopUnionPersonnelInput>;
}>;

export type SetPersonnelDetailsMutation = {
  members: {
    cooperativeUnion?: {
      add?: { personnelDetails?: { recordId?: string | null } | null } | null;
    } | null;
  };
};

export type DeletePersonnelDetailsMutationVariables = Exact<{
  personnelId: Scalars['ID'];
}>;

export type DeletePersonnelDetailsMutation = {
  members: { cooperativeUnion?: { deletePersonnel?: { recordId: string } | null } | null };
};

export type SetEconomicDetailsDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionEconomicDetailsInput>;
}>;

export type SetEconomicDetailsDataMutation = {
  members: {
    cooperativeUnion?: { add?: { economicDetails?: { recordId: string } | null } | null } | null;
  };
};

export type SetDeclarationDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionDeclarationInput>;
}>;

export type SetDeclarationDataMutation = {
  members: {
    cooperativeUnion?: { add?: { declaration?: { recordId: string } | null } | null } | null;
  };
};

export type SendLoanApplicationForApprovalMutationVariables = Exact<{
  id: Scalars['ID'];
  data: LoanAccountInput;
}>;

export type SendLoanApplicationForApprovalMutation = {
  loanAccount: {
    add?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetDisburseLoanMutationVariables = Exact<{
  loanAccountId: Scalars['ID'];
  data: LoanDisbursementInput;
}>;

export type SetDisburseLoanMutation = {
  loanAccount: {
    disburse?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type ApproveLoanAccountMutationVariables = Exact<{
  id: Scalars['String'];
  action: LoanApproveOrCancel;
  remarks?: InputMaybe<Scalars['String']>;
}>;

export type ApproveLoanAccountMutation = {
  loanAccount: {
    approveOrCancel?: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetLoanRepaymentMutationVariables = Exact<{
  data?: InputMaybe<LoanRepaymentInput>;
}>;

export type SetLoanRepaymentMutation = {
  loanAccount: {
    repayment?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type GetNewIdMutationVariables = Exact<{
  idType?: InputMaybe<Id_Type>;
}>;

export type GetNewIdMutation = { newId: string };

export type SetMemberDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndMemberInput;
}>;

export type SetMemberDataMutation = {
  members: {
    individual?: {
      add?: {
        recordId: string;
        error?: {
          error?: Array<{
            sectionName?: string | null;
            errors?: Record<string, Array<string>> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetMemberFamilyDetailsMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndFamilyMemberInput;
}>;

export type SetMemberFamilyDetailsMutation = {
  members: { individual?: { familyMember: { upsert: { recordId?: string | null } } } | null };
};

export type DeleteMemberFamilyDetailsMutationVariables = Exact<{
  memberId: Scalars['ID'];
  id: Scalars['ID'];
}>;

export type DeleteMemberFamilyDetailsMutation = {
  members: { individual?: { familyMember: { delete: { recordId?: string | null } } } | null };
};

export type SetMemberOccupationMutationVariables = Exact<{
  id: Scalars['ID'];
  isSpouse: Scalars['Boolean'];
  data: KymIndOccupationInput;
}>;

export type SetMemberOccupationMutation = {
  members: { individual?: { occupation: { upsert: { recordId?: string | null } } } | null };
};

export type DeleteMemberOccupationMutationVariables = Exact<{
  memberId: Scalars['ID'];
  id: Scalars['ID'];
}>;

export type DeleteMemberOccupationMutation = {
  members: { individual?: { occupation: { delete: { recordId?: string | null } } } | null };
};

export type SetMemberIncomeSourceMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndIncomeSourceInput;
}>;

export type SetMemberIncomeSourceMutation = {
  members: { individual?: { incomeSource: { upsert: { recordId?: string | null } } } | null };
};

export type DeleteMemberIncomeSourceMutationVariables = Exact<{
  memberId: Scalars['ID'];
  id: Scalars['ID'];
}>;

export type DeleteMemberIncomeSourceMutation = {
  members: { individual?: { incomeSource: { delete: { recordId?: string | null } } } | null };
};

export type SetKymCooperativeDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymCooperativeFormInput;
}>;

export type SetKymCooperativeDataMutation = {
  members: { cooperative?: { add?: { recordId: string } | null } | null };
};

export type SetKymDocumentDataMutationVariables = Exact<{
  memberId: Scalars['String'];
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetKymDocumentDataMutation = { document: { KYMUpsert: { recordId?: string | null } } };

export type SetKymIndividualIdentificationDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndIdentificationInput;
}>;

export type SetKymIndividualIdentificationDataMutation = {
  members: { individual?: { identification: { upsert: { recordId?: string | null } } } | null };
};

export type SetOfficialUseMutationVariables = Exact<{
  id: Scalars['ID'];
  isStaff?: InputMaybe<Scalars['Boolean']>;
  checkSanction?: InputMaybe<Scalars['Boolean']>;
  checkNegative?: InputMaybe<Scalars['Boolean']>;
  riskCategory?: InputMaybe<OfficialUseRiskCategory>;
  docCollectedAndVerified?: InputMaybe<Scalars['Boolean']>;
  acceptableAddressDoc?: InputMaybe<Scalars['Boolean']>;
}>;

export type SetOfficialUseMutation = {
  members: {
    officialUse?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type SetInstitutionDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymInsInput;
}>;

export type SetInstitutionDataMutation = {
  members: {
    institution?: {
      add?: {
        recordId: string;
        error?: {
          error?: Array<{
            sectionName?: string | null;
            errors?: Record<string, Array<string>> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSisterConcernsMutationVariables = Exact<{
  id: Scalars['ID'];
  sis: Scalars['ID'];
  data: KymInsSisterConcernInput;
}>;

export type SetSisterConcernsMutation = {
  members: {
    institution?: { sisterConcern?: { Upsert?: { recordId: string } | null } | null } | null;
  };
};

export type DeleteSisterConcernsMutationVariables = Exact<{
  insId: Scalars['ID'];
  sis: Scalars['ID'];
}>;

export type DeleteSisterConcernsMutation = {
  members: {
    institution?: { sisterConcern?: { Delete?: { recordId: string } | null } | null } | null;
  };
};

export type SetAddDirectorInstitutionMutationVariables = Exact<{
  id: Scalars['ID'];
  dir: Scalars['ID'];
  data: KymInsDirectorInput;
}>;

export type SetAddDirectorInstitutionMutation = {
  members: { institution?: { director?: { Upsert?: { recordId: string } | null } | null } | null };
};

export type DeleteDirectorInstitutionMutationVariables = Exact<{
  insId: Scalars['ID'];
  dir: Scalars['ID'];
}>;

export type DeleteDirectorInstitutionMutation = {
  members: { institution?: { director?: { Delete?: { recordId: string } | null } | null } | null };
};

export type SetAddAccountOperatorInstitutionMutationVariables = Exact<{
  id: Scalars['ID'];
  acc: Scalars['ID'];
  data: KymInsAccountOperatorInput;
}>;

export type SetAddAccountOperatorInstitutionMutation = {
  members: {
    institution?: { accountOperator?: { Upsert?: { recordId: string } | null } | null } | null;
  };
};

export type DeleteAccountOperatorInstitutionMutationVariables = Exact<{
  insId: Scalars['ID'];
  acc: Scalars['ID'];
}>;

export type DeleteAccountOperatorInstitutionMutation = {
  members: {
    institution?: { accountOperator?: { Delete?: { recordId: string } | null } | null } | null;
  };
};

export type SetOrganizationDataMutationVariables = Exact<{
  data: OrganizationInput;
}>;

export type SetOrganizationDataMutation = {
  settings: {
    general?: {
      organization?: {
        initialSetup?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreSignedUrlMutationVariables = Exact<{
  contentType?: InputMaybe<Scalars['String']>;
}>;

export type GetPreSignedUrlMutation = {
  presignedUrl: {
    upload: { filename?: string | null; getUrl?: string | null; putUrl?: string | null };
  };
};

export type SaveNewReportMutationVariables = Exact<{
  data: StatementReportInput;
}>;

export type SaveNewReportMutation = {
  report: {
    statementReport?: {
      member?: {
        id: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
      } | null;
      statement?:
        | {
            shareStatement?: Array<{
              date: string;
              particular: string;
              noOfShares: number;
              returnAmountDr: number;
              purchaseAmountCr: number;
              balanceSheet: number;
            } | null> | null;
            totals?: {
              totalShares?: number | null;
              totalDr?: number | null;
              totalCr?: number | null;
              totalBalanceSheet?: number | null;
            } | null;
          }
        | {}
        | null;
    } | null;
  };
};

export type SaveAlternativeChargesMutationVariables = Exact<{
  data?: InputMaybe<
    Array<InputMaybe<AlternativeChannelChargesInput>> | InputMaybe<AlternativeChannelChargesInput>
  >;
}>;

export type SaveAlternativeChargesMutation = {
  settings: {
    general?: {
      alternativeChannel?: {
        feesAndCharges?: {
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: Array<{
            id?: string | null;
            amount?: string | null;
            ledgerId?: string | null;
            serviceType?: AlternativeChannelServiceType | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type ActivateServiceMutationVariables = Exact<{
  data?: InputMaybe<AlternativeChannelServiceActivationInput>;
}>;

export type ActivateServiceMutation = {
  alternativeChannel?: {
    serviceActivation?: {
      recordId?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  } | null;
};

export type SetBranchDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: BranchInput;
}>;

export type SetBranchDataMutation = {
  settings: {
    general?: {
      branch?: {
        add: {
          record?: { id: string } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type SetDepositProductMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<DepositProductInput>;
}>;

export type SetDepositProductMutation = {
  settings: {
    general?: {
      depositProduct?: {
        add?: {
          recordId: string;
          record?: {
            id: string;
            productCode: string;
            productName: string;
            createdDate?: string | null;
            interest?: number | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositIroMutationVariables = Exact<{
  data?: InputMaybe<DepositIroInput>;
}>;

export type SetDepositIroMutation = {
  settings: {
    general?: {
      deposit?: {
        iroSetup?: {
          recordId: string;
          record?: {
            id: string;
            iroName?: string | null;
            iroAddress?: string | null;
            iroCode?: string | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | { __typename: 'ValidationError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetDepositTdsMutationVariables = Exact<{
  data?: InputMaybe<DepositTdsInput>;
}>;

export type SetDepositTdsMutation = {
  settings: {
    general?: {
      deposit?: {
        tdsSetup?: {
          recordId: string;
          record?: {
            id: string;
            individual?: number | null;
            institution?: number | null;
            cooperative?: number | null;
            coopUnion?: number | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | { __typename: 'ValidationError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanProductMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<LoanProductInput>;
}>;

export type SetLoanProductMutation = {
  settings: {
    general?: {
      loanProducts?: {
        upsert?: {
          recordId?: string | null;
          record?: {
            id: string;
            objState: ObjState;
            productName: string;
            productType: string;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanGeneralSettingsMutationVariables = Exact<{
  emi?: InputMaybe<Scalars['Boolean']>;
  epi?: InputMaybe<Scalars['Boolean']>;
  flat?: InputMaybe<Scalars['Boolean']>;
  collateralList?: InputMaybe<
    Array<InputMaybe<CollateralListInputData>> | InputMaybe<CollateralListInputData>
  >;
}>;

export type SetLoanGeneralSettingsMutation = {
  settings: {
    general?: {
      loan?: {
        general?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetLoanInsuranceSchemeMutationVariables = Exact<{
  data?: InputMaybe<
    Array<InputMaybe<LoanInsuranceSchemeInput>> | InputMaybe<LoanInsuranceSchemeInput>
  >;
}>;

export type SetLoanInsuranceSchemeMutation = {
  settings: {
    general?: {
      loan?: {
        insuranceScheme?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetProductTypeMutationVariables = Exact<{
  productType?: InputMaybe<
    Array<InputMaybe<LoanProductTypeInput>> | InputMaybe<LoanProductTypeInput>
  >;
  productSubType?: InputMaybe<
    Array<InputMaybe<LoanProductSubTypeInput>> | InputMaybe<LoanProductSubTypeInput>
  >;
}>;

export type SetProductTypeMutation = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AddGeneralMemberMutationVariables = Exact<{
  data: GeneralMemberInput;
}>;

export type AddGeneralMemberMutation = {
  settings: {
    general?: {
      KYM?: {
        general?: {
          generalMember?: {
            recordId: string;
            error?:
              | MutationError_AuthorizationError_Fragment
              | MutationError_BadRequestError_Fragment
              | MutationError_NotFoundError_Fragment
              | MutationError_ServerError_Fragment
              | MutationError_ValidationError_Fragment
              | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpsertNewOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  data: FormOptionUpsertInput;
}>;

export type UpsertNewOptionMutation = {
  settings: {
    form?: {
      option: {
        upsert: {
          recordId?: string | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            enabled: boolean;
            order: number;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteOptionMutationVariables = Exact<{
  optionId: Scalars['ID'];
}>;

export type DeleteOptionMutation = {
  settings: { form?: { option: { delete: { recordId?: string | null } } } | null };
};

export type MoveOptionMutationVariables = Exact<{
  optionId: Scalars['ID'];
  to: Scalars['Int'];
}>;

export type MoveOptionMutation = {
  settings: {
    form?: {
      option: {
        move: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type ToggleFieldOtherOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  hasOtherField?: InputMaybe<Scalars['Boolean']>;
}>;

export type ToggleFieldOtherOptionMutation = {
  settings: {
    form?: {
      field: {
        update: {
          record?: { name: Record<'local' | 'en' | 'np', string>; hasOtherField: boolean } | null;
        };
      };
    } | null;
  };
};

export type UpsertSectionOptionMutationVariables = Exact<{
  sectionId: Scalars['ID'];
  data: FormFieldUpsertInput;
}>;

export type UpsertSectionOptionMutation = {
  settings: {
    form?: {
      field: {
        upsert: {
          recordId?: string | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            enabled: boolean;
            fieldType: FormFieldType;
            order: number;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteFieldMutationVariables = Exact<{
  fieldId: Scalars['ID'];
}>;

export type DeleteFieldMutation = {
  settings: {
    form?: {
      field: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type MoveFieldMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  to: Scalars['Int'];
}>;

export type MoveFieldMutation = {
  settings: {
    form?: {
      field: {
        move: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type AddConditionOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  dependsOn: Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>;
}>;

export type AddConditionOptionMutation = {
  settings: {
    form?: {
      field: {
        condition: {
          recordId?: string | null;
          record?: {
            id: string;
            dependsOn?: Array<string | null> | null;
            name: Record<'local' | 'en' | 'np', string>;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type AddFileSizeToSectionMutationVariables = Exact<{
  sectionId: Scalars['ID'];
  maxSize: Scalars['Int'];
}>;

export type AddFileSizeToSectionMutation = {
  settings: {
    form?: {
      maxSize: {
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
        record?:
          | { id: string; name: Record<'local' | 'en' | 'np', string>; maxSize?: number | null }
          | {}
          | null;
      };
    } | null;
  };
};

export type UpsertCustomSectionMutationVariables = Exact<{
  data: FormSectionUpsertInput;
}>;

export type UpsertCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        upsert: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            isCustom: boolean;
          } | null;
        };
      };
    } | null;
  };
};

export type UpsertCustomFieldMutationVariables = Exact<{
  data: FormFieldUpsertInput;
}>;

export type UpsertCustomFieldMutation = {
  settings: {
    form?: {
      field: {
        upsert: {
          record?: { id: string } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteCustomSectionMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type DeleteCustomSectionFieldMutationVariables = Exact<{
  id: Scalars['ID'];
}>;

export type DeleteCustomSectionFieldMutation = {
  settings: {
    form?: {
      field: {
        delete: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      };
    } | null;
  };
};

export type UpdateCustomSectionMutationVariables = Exact<{
  id: Scalars['ID'];
  data: FormSectionUpdateInput;
}>;

export type UpdateCustomSectionMutation = {
  settings: {
    form?: {
      section: {
        update: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
          record?: {
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            isCustom: boolean;
          } | null;
        };
      };
    } | null;
  };
};

export type UpdateCustomSectionFieldMutationVariables = Exact<{
  id: Scalars['ID'];
  data: FormFieldUpdateInput;
}>;

export type UpdateCustomSectionFieldMutation = {
  settings: { form?: { field: { update: { record?: { id: string } | null } } } | null };
};

export type UpdateDeclarationMutationVariables = Exact<{
  data: DeclarationInput;
}>;

export type UpdateDeclarationMutation = {
  settings: {
    declaration: { update: { record?: { content: Record<'local' | 'en' | 'np', string> } | null } };
  };
};

export type SetSettingsShareBonusMutationVariables = Exact<{
  data?: InputMaybe<ShareBonusSettingsInput>;
}>;

export type SetSettingsShareBonusMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          bonus?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareDividendMutationVariables = Exact<{
  data?: InputMaybe<ShareDividendSettingsInput>;
}>;

export type SetSettingsShareDividendMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          dividend?: {
            dividend?: {
              distributionCondition?: DividendDistributionCondition | null;
              dividendTransferTreatment?: DividendTransferTreatment | null;
              accountForFractionalDividends?: string | null;
              accountForShareDividends?: string | null;
              organizationFundForDividends?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareIssueChargesMutationVariables = Exact<{
  data?: InputMaybe<ShareIssueChargesInput>;
}>;

export type SetSettingsShareIssueChargesMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          shareIssueCharges?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareReturnChargesMutationVariables = Exact<{
  data?: InputMaybe<ShareReturnChargesInput>;
}>;

export type SetSettingsShareReturnChargesMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          shareReturnCharges?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareGeneralMutationVariables = Exact<{
  data?: InputMaybe<ShareSettingsGeneralInput>;
}>;

export type SetSettingsShareGeneralMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          general?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsShareTransferMutationVariables = Exact<{
  data?: InputMaybe<ShareTransferSettingsInput>;
}>;

export type SetSettingsShareTransferMutation = {
  settings: {
    general?: {
      share?: {
        add?: {
          transfer?: {
            bonus?: {
              taxPayer?: TaxPayerOptions | null;
              taxRate?: number | null;
              accountMapping?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SetSettingsUserDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<MyraUserInput>;
}>;

export type SetSettingsUserDataMutation = {
  settings: { myraUser?: { add?: { recordId?: string | null } | null } | null };
};

export type SetPreferenceMutationVariables = Exact<{
  id: Scalars['ID'];
  data: UserPreferenceInput;
}>;

export type SetPreferenceMutation = {
  user: {
    preference?: {
      update?: {
        recordId?: string | null;
        record?: {
          language?: Language | null;
          languageCode?: string | null;
          date?: DateType | null;
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type SetValuatorMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<ValuatorInput>;
}>;

export type SetValuatorMutation = {
  settings: {
    general?: {
      valuator?: {
        add?: {
          recordId: string;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type AddSharePurchaseMutationVariables = Exact<{
  data: SharePurchaseInput;
}>;

export type AddSharePurchaseMutation = {
  share: {
    purchase: {
      recordId: string;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    };
  };
};

export type AddShareReturnMutationVariables = Exact<{
  data: ShareReturnInput;
}>;

export type AddShareReturnMutation = { share: { return: { recordId: string } } };

export type SetDepositDataMutationVariables = Exact<{
  data: DepositInput;
}>;

export type SetDepositDataMutation = { transaction: { deposit: { recordId?: string | null } } };

export type SetWithdrawDataMutationVariables = Exact<{
  data: WithdrawInput;
}>;

export type SetWithdrawDataMutation = { transaction: { withdraw: { recordId?: string | null } } };

export type SetAccountTransferDataMutationVariables = Exact<{
  data: TransferInput;
}>;

export type SetAccountTransferDataMutation = {
  transaction: { transfer: { recordId?: string | null } };
};

export type SetAccountForgiveInstallmentDataMutationVariables = Exact<{
  id: Scalars['ID'];
  installmentDates: Array<Scalars['String']> | Scalars['String'];
}>;

export type SetAccountForgiveInstallmentDataMutation = {
  account: { forgiveInstallment?: { recordId: string } | null };
};

export type SetEndOfDayDataMutationVariables = Exact<{ [key: string]: never }>;

export type SetEndOfDayDataMutation = { transaction: { endOfDay?: string | null } };

export type GetAccountMemberListQueryVariables = Exact<{
  objState?: InputMaybe<ObjState>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountMemberListQuery = {
  members: {
    list: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          type: KymMemberTypesEnum;
          contact?: string | null;
          createdAt: string;
          dateJoined?: string | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
        } | null;
      } | null> | null;
      pageInfo?: { startCursor?: string | null; endCursor?: string | null } | null;
    };
  };
};

export type GetProductListQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetProductListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductList?: {
          allowed?: Array<{ id: string; productName: string } | null> | null;
          notAllowed?: Array<{
            error?: Array<string | null> | null;
            data?: { id: string; productName: string } | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenProductDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountOpenProductDetailsQuery = {
  settings: {
    general?: {
      depositProduct?: {
        formState?: {
          data?: {
            productName?: string | null;
            nature?: NatureOfDepositProduct | null;
            typeOfMember?: Array<KymMemberTypesEnum | null> | null;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            isMandatorySaving?: boolean | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            depositFrequency?: Frequency | null;
            penalty?: boolean | null;
            rebate?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            isTenureApplicable?: boolean | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            ladderRate?: boolean | null;
            postingFrequency?: DepositFrequency | null;
            maxPostingFreqDifference?: number | null;
            noOftransactionAllowed?: number | null;
            accountType?: DefaultAccountType | null;
            autoOpen?: boolean | null;
            allowLoan?: boolean | null;
            chequeIssue?: boolean | null;
            percentageOfDeposit?: number | null;
            alternativeChannels?: boolean | null;
            atmFacility?: boolean | null;
            isForMinors?: boolean | null;
            supportMultiple?: boolean | null;
            staffProduct?: boolean | null;
            withdrawRestricted?: boolean | null;
            specifyWithdrawRestriction?: string | null;
            wealthBuildingProduct?: boolean | null;
            individualDocuments?: Array<IndividualRequiredDocument | null> | null;
            institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
            productCode: { prefix: string; initialNo: string };
            depositAmount?: { minAmount?: any | null; maxAmount?: any | null } | null;
            penaltyData?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebateData?: {
              dayBeforeInstallmentDate?: number | null;
              noOfInstallment?: number | null;
              rebateAmount?: any | null;
              rebateRate?: number | null;
              rebateLedgerMapping?: string | null;
            } | null;
            balanceLimit?: {
              minAmount?: any | null;
              maxAmount?: any | null;
              avgAmount?: any | null;
            } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate?: number | null;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              additionalRate?: number | null;
            } | null;
            ladderRateData?: Array<{ type: string; amount: any; rate: number } | null> | null;
            serviceCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            accountCloseCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            alternativeChannelCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            atmCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            dormantSetup?: Array<{
              duration?: string | null;
              condition?: string | null;
            } | null> | null;
            withdrawAmountLimit?: {
              minAmount?: any | null;
              maxAmount?: any | null;
              avgAmount?: any | null;
            } | null;
            chequeCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountOpenEditDataQuery = {
  account: {
    formState?: {
      data?: {
        memberId: string;
        productId: string;
        accountName?: string | null;
        minor?: string | null;
        tenure?: FrequencyTenure | null;
        tenureNumber?: number | null;
        initialDepositAmount?: any | null;
        defaultAmountDepositAccountName?: string | null;
        interestRate?: number | null;
        ceoAuthority?: boolean | null;
        boardAuthority?: boolean | null;
        installmentAmount?: string | null;
        depositFrequencyWeekly?: Week | null;
        depositFrequencyMonthly?: WeeklyFrequency | null;
        depositFrequencyDay?: number | null;
        depositFrequencyFrequencyDay?: FrequencyDay | null;
        depositFrequencyDayOfWeek?: Week | null;
        depositFrequencyYearlyMonth?: Months | null;
        depositFrequencyYearlyDay?: number | null;
        mobileBanking?: boolean | null;
        eBanking?: boolean | null;
        atmFacility?: boolean | null;
        smsBanking?: boolean | null;
        chequeFacility?: boolean | null;
        agentId?: string | null;
        serviceCharge?: Array<{ name?: string | null; amount?: any | null } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAccountTableListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<DepositLoanAccountSearchFilter>;
}>;

export type GetAccountTableListQuery = {
  account: {
    list?: {
      totalCount: number;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
      edges?: Array<{
        node?: {
          id: string;
          objState: ObjState;
          createdAt: string;
          accountName?: string | null;
          modifiedAt: string;
          installmentAmount?: string | null;
          balance?: string | null;
          accountOpenedDate?: string | null;
          lastTransactionDate?: string | null;
          accountExpiryDate?: string | null;
          overDrawnBalance?: string | null;
          createdBy: { id: string };
          modifiedBy: { id: string };
          member?: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            contact?: string | null;
            dateJoined?: string | null;
            address?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
          product: {
            id: string;
            productCode: string;
            productName: string;
            nature: NatureOfDepositProduct;
            minimumBalance?: string | null;
            isMandatorySaving?: boolean | null;
            withdrawRestricted?: boolean | null;
          };
          dues?: {
            fine?: string | null;
            totalDue?: string | null;
            dueInstallments?: number | null;
          } | null;
        } | null;
      }> | null;
    } | null;
  };
};

export type GetAccountDocumentsListQueryVariables = Exact<{
  subscriptionId: Scalars['String'];
}>;

export type GetAccountDocumentsListQuery = {
  document: {
    listSubscriptionDocuments: {
      data?: Array<{
        fieldId?: string | null;
        docData: Array<{ identifier: string; url: string } | null>;
      } | null> | null;
    };
  };
};

export type GetAccountOpenProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetAccountOpenProductCriteriaQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getProductCriteria?: {
          data?: {
            gender?: Array<string | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            ethnicity?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            maritalStatus?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            occupation?: Array<string | null> | null;
            institutionType?: Array<string | null> | null;
            cooperativeUnion?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenProductPenaltyQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetAccountOpenProductPenaltyQuery = {
  settings: {
    general?: {
      depositProduct?: {
        getPenaltyRebateInfo?: {
          data?: {
            penalty?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebate?: {
              dayBeforeInstallmentDate?: number | null;
              rebateRate?: number | null;
              rebateAmount?: any | null;
              rebateLedgerMapping?: string | null;
              noOfInstallment?: number | null;
            } | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOpenMinorListQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetAccountOpenMinorListQuery = {
  account: {
    listMinors?: {
      data?: Array<{
        fullName?: Record<'local' | 'en' | 'np', string> | null;
        familyMemberId?: string | null;
      } | null> | null;
    } | null;
  };
};

export type AllAdministrationQueryVariables = Exact<{ [key: string]: never }>;

export type AllAdministrationQuery = {
  administration: {
    all: Array<{
      id: number;
      name: string;
      districts: Array<{
        id: number;
        name: string;
        municipalities: Array<{ id: number; name: string; wards: Array<number> }>;
      }>;
    }>;
  };
};

export type GetAgentListDataQueryVariables = Exact<{
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAgentListDataQuery = {
  transaction: {
    listAgent: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          agentName?: string | null;
          phoneNo?: string | null;
          assignedMember?: number | null;
          profilePicUrl?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAgentDetailDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAgentDetailDataQuery = {
  transaction: {
    agentDetail?: {
      data?: {
        id?: string | null;
        name?: string | null;
        branch?: string | null;
        totalMembers?: number | null;
        profilePicUrl?: string | null;
      } | null;
    } | null;
  };
};

export type GetAgentAssignedMemberListDataQueryVariables = Exact<{
  filter?: InputMaybe<AssignedMemberListFiler>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAgentAssignedMemberListDataQuery = {
  transaction: {
    assignedMemberList: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          assignedDate?: string | null;
          member?: { id: string; name?: Record<'local' | 'en' | 'np', string> | null } | null;
          account?: { id: string; dues?: { totalDue?: string | null } | null } | null;
          product?: { productName: string } | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAgentTodayListDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAgentTodayListDataQuery = {
  transaction: {
    listAgentTask?: {
      record?: Array<{
        amount?: any | null;
        paid?: boolean | null;
        member?: { id: string } | null;
        account?: { id: string } | null;
      } | null> | null;
    } | null;
  };
};

export type GetMeQueryVariables = Exact<{ [key: string]: never }>;

export type GetMeQuery = {
  auth: {
    me: {
      data?: {
        user?: { id: string; username: string; email?: string | null } | null;
        preference?: {
          language?: Language | null;
          languageCode?: string | null;
          date?: DateType | null;
        } | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | null;
    };
  };
};

export type GetBankListQueryVariables = Exact<{ [key: string]: never }>;

export type GetBankListQuery = {
  bank: { bank?: { list?: Array<{ id: string; name?: string | null } | null> | null } | null };
};

type MutationError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type MutationError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type MutationError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type MutationError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

type MutationError_ValidationError_Fragment = {
  __typename: 'ValidationError';
  code: number;
  validationErrorMsg: Record<string, Array<string>>;
};

export type MutationErrorFragment =
  | MutationError_AuthorizationError_Fragment
  | MutationError_BadRequestError_Fragment
  | MutationError_NotFoundError_Fragment
  | MutationError_ServerError_Fragment
  | MutationError_ValidationError_Fragment;

type QueryError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type QueryError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type QueryError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type QueryError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

export type QueryErrorFragment =
  | QueryError_AuthorizationError_Fragment
  | QueryError_BadRequestError_Fragment
  | QueryError_NotFoundError_Fragment
  | QueryError_ServerError_Fragment;

export type KymFieldDataFragment = {
  id?: string | null;
  options?: Array<{
    id?: string | null;
    value?: Record<'local' | 'en' | 'np', string> | null;
  } | null> | null;
};

export type PaginationFragment = {
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
};

export type GetConfigQueryVariables = Exact<{ [key: string]: never }>;

export type GetConfigQuery = {
  config: { countries?: Array<{ name?: string | null; code?: string | null } | null> | null };
};

export type GetCoOperativeKymEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetCoOperativeKymEditDataQuery = {
  members: {
    cooperative?: {
      formState?: {
        data?: {
          formData?: {
            nameOfOrganization?: string | null;
            regdNumber?: number | null;
            regdDate?: string | null;
            regdOffice?: string | null;
            email?: string | null;
            website?: string | null;
            contactNumber?: string | null;
            noOfMaleMembers?: number | null;
            noOfFemaleMembers?: number | null;
            noOfOtherMembers?: number | null;
            lastAuditDate?: string | null;
            lastAgmDate?: string | null;
            representativeFullName?: string | null;
            representativeDesignatiton?: string | null;
            representativeEmail?: string | null;
            representativeContactNumber?: string | null;
            representativePanNo?: string | null;
            isPermanentAndTemporaryAddressSame?: boolean | null;
            cooperativeTypeId?: string | null;
            mainServiceProduct?: string | null;
            noOfMaleEmployee?: number | null;
            noOfFemaleEmployee?: number | null;
            totalEmployee?: number | null;
            shareCapital?: number | null;
            reserveAndSurplus?: number | null;
            savingDeposit?: number | null;
            loanAccount?: number | null;
            capitalGrant?: number | null;
            currentLiabilities?: number | null;
            nonCurrentLiabilities?: number | null;
            cashAndCashEquivalent?: number | null;
            bank?: number | null;
            investments?: number | null;
            loan?: number | null;
            nonCurrentAssets?: number | null;
            otherNonCurrentAssets?: number | null;
            totalAssets?: number | null;
            accountHoldersName?: string | null;
            hasTCAccepted?: boolean | null;
            registeredAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            operatingAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            permanentRepresentativeAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryRepresentativeAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoOperativeDirectorEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetCoOperativeDirectorEditDataQuery = {
  members: {
    cooperative?: {
      listDirectors?: {
        data?: Array<{
          id?: string | null;
          fullName?: string | null;
          designation?: string | null;
          isPermanentAndTemporaryAddressSame?: boolean | null;
          dateOfMembership?: string | null;
          highestQualification?: string | null;
          contactNumber?: string | null;
          email?: string | null;
          citizenshipNo?: string | null;
          panNo?: string | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCoOperativeAccountOperatorEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetCoOperativeAccountOperatorEditDataQuery = {
  members: {
    cooperative?: {
      listAccountOperators?: {
        data?: Array<{
          id?: string | null;
          fullName?: string | null;
          designation?: string | null;
          isPermanentAndTemporaryAddressSame?: boolean | null;
          dateOfMembership?: string | null;
          highestQualification?: string | null;
          contactNumber?: string | null;
          email?: string | null;
          citizenshipNo?: string | null;
          panNo?: string | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          coopRelatedTraining?: Array<{
            subjectOfTraining?: string | null;
            dateOfTraining?: string | null;
            trainingOrganization?: string | null;
          } | null> | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetCooperativeUnionKymEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCooperativeUnionKymEditDataQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          institutionInformation?: {
            data?: {
              nameOfInstitutionEn?: string | null;
              nameOfInstitutionNp?: string | null;
              institutionType?: string | null;
              natureOfBusinessEn?: string | null;
              natureOfBusinessNp?: string | null;
              regdDate?: string | null;
              vatOrPan?: string | null;
              noOfBranches?: number | null;
              regdNo?: string | null;
              issuingOffice?: string | null;
              phone?: string | null;
              fax?: string | null;
              contactEmail?: string | null;
              website?: string | null;
              postBoxNo?: string | null;
              noOfEmployee?: number | null;
              lastAgmDate?: string | null;
              nameOfBank?: string | null;
              accountNumber?: string | null;
              accountName?: string | null;
              applicantName?: string | null;
              applicantNameNp?: string | null;
              applicantDesignationEn?: string | null;
              applicantDesignationNp?: string | null;
              applicantEmail?: string | null;
              applicantContactNo?: string | null;
              applicantPanNo?: string | null;
              applicantDateOfMembership?: string | null;
              applicantHighestQualification?: string | null;
              applicantIsPermanentAndTemporaryAddrSame?: boolean | null;
              noOfMaleMemberCurrent?: number | null;
              noOfMaleMemberTarget?: number | null;
              noOfFemaleMemberCurrent?: number | null;
              noOfFemaleMemberTarget?: number | null;
              noOfInstitutionalMemberCurrent?: number | null;
              noOfInstitutionalMemberTarget?: number | null;
              regdAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              operatingOfficeAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              branchOfficeAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              applicantPermanentAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              applicantTemporaryAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
            } | null;
            sectionStatus?: {
              id?: string | null;
              errors?: Record<string, Array<string>> | null;
              sectionStatus?: {
                errors?: Array<string> | null;
                incomplete?: Array<string> | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetEconimicDetailsEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetEconimicDetailsEditDataQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          economicDetails?: {
            data?: {
              cashAndCashEquivalentCurrent?: number | null;
              cashAndCashEquivalentTarget?: number | null;
              bankCurrent?: number | null;
              bankTarget?: number | null;
              investmentsCurrent?: number | null;
              investmentsTarget?: number | null;
              loanCurrent?: number | null;
              loanTarget?: number | null;
              nonCurrentAssetsCurrent?: number | null;
              nonCurrentAssetsTarget?: number | null;
              otherNonCurrentAssetsCurrent?: number | null;
              otherNonCurrentAssetsTarget?: number | null;
              shareCapitalCurrent?: number | null;
              shareCapitalTarget?: number | null;
              reserveAndSurplusCurrent?: number | null;
              reserveAndSurplusTarget?: number | null;
              savingDepositCurrent?: number | null;
              savingDepositTarget?: number | null;
              loanAccountCurrent?: number | null;
              loanAccountTarget?: number | null;
              capitalGrantCurrent?: number | null;
              capitalGrantTarget?: number | null;
              currentLiabilitiesCurrent?: number | null;
              currentLiabilitiesTarget?: number | null;
              nonCurrentLiabilitiesCurrent?: number | null;
              nonCurrentLiabilitiesTarget?: number | null;
              incomeFromFinancialInvestment?: number | null;
              incomeFromNonFinancialInvestment?: number | null;
              incomeFromInvestment?: number | null;
              incomeFromServiceOperation?: number | null;
              incomeFromSales?: number | null;
              otherIncome?: number | null;
              miscellaneousIncome?: number | null;
              purchase?: number | null;
              directExpense?: number | null;
              administrativeExpense?: number | null;
              financialCost?: number | null;
              riskManagementCost?: number | null;
              deferredTaxExpense?: number | null;
            } | null;
            sectionStatus?: { id?: string | null } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetBoardOfDirectorsDetailsListQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetBoardOfDirectorsDetailsListQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          boardOfDirectorsDetails?: {
            data?: {
              personnelDetails?: Array<{
                id?: string | null;
                cooperativeUnionId?: string | null;
                fullName?: string | null;
                fullNameNp?: string | null;
                designationEn?: string | null;
                designationNp?: string | null;
                isPermanentAndTemporaryAddressSame?: boolean | null;
                dateOfMembership?: string | null;
                highestQualification?: string | null;
                mobileNumber?: string | null;
                email?: string | null;
                citizenshipNo?: string | null;
                panNo?: string | null;
                permanentAddress?: {
                  provinceId?: number | null;
                  districtId?: number | null;
                  localGovernmentId?: number | null;
                  wardNo?: number | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                  coordinates?: { longitude?: number | null; latitude?: number | null } | null;
                } | null;
                temporaryAddress?: {
                  provinceId?: number | null;
                  districtId?: number | null;
                  localGovernmentId?: number | null;
                  wardNo?: number | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                  coordinates?: { longitude?: number | null; latitude?: number | null } | null;
                } | null;
                trainingAttended?: Array<{
                  subjectOfTraining?: string | null;
                  dateOfTraining?: string | null;
                  trainingOrganization?: string | null;
                } | null> | null;
              } | null> | null;
            } | null;
            sectionStatus?: Array<{
              id?: string | null;
              errors?: Record<string, Array<string>> | null;
              sectionStatus?: {
                errors?: Array<string> | null;
                incomplete?: Array<string> | null;
              } | null;
            } | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountOperatorDetailsListQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetAccountOperatorDetailsListQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          accountOperatorsDetails?: {
            data?: {
              personnelDetails?: Array<{
                id?: string | null;
                cooperativeUnionId?: string | null;
                fullName?: string | null;
                fullNameNp?: string | null;
                designationEn?: string | null;
                designationNp?: string | null;
                isPermanentAndTemporaryAddressSame?: boolean | null;
                dateOfMembership?: string | null;
                highestQualification?: string | null;
                mobileNumber?: string | null;
                email?: string | null;
                citizenshipNo?: string | null;
                panNo?: string | null;
                permanentAddress?: {
                  provinceId?: number | null;
                  districtId?: number | null;
                  localGovernmentId?: number | null;
                  wardNo?: number | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                  coordinates?: { longitude?: number | null; latitude?: number | null } | null;
                } | null;
                temporaryAddress?: {
                  provinceId?: number | null;
                  districtId?: number | null;
                  localGovernmentId?: number | null;
                  wardNo?: number | null;
                  locality?: Record<'local' | 'en' | 'np', string> | null;
                  houseNo?: string | null;
                  coordinates?: { longitude?: number | null; latitude?: number | null } | null;
                } | null;
                trainingAttended?: Array<{
                  subjectOfTraining?: string | null;
                  dateOfTraining?: string | null;
                  trainingOrganization?: string | null;
                } | null> | null;
              } | null> | null;
            } | null;
            sectionStatus?: Array<{
              id?: string | null;
              errors?: Record<string, Array<string>> | null;
              sectionStatus?: {
                errors?: Array<string> | null;
                incomplete?: Array<string> | null;
              } | null;
            } | null> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCentralRepresentativeDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
  includeRequiredErrors?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetCentralRepresentativeDetailsQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        formData?: {
          centralRepresentativeDetails?: {
            data?: {
              id?: string | null;
              cooperativeUnionId?: string | null;
              fullName?: string | null;
              fullNameNp?: string | null;
              designationEn?: string | null;
              designationNp?: string | null;
              isPermanentAndTemporaryAddressSame?: boolean | null;
              dateOfMembership?: string | null;
              highestQualification?: string | null;
              mobileNumber?: string | null;
              email?: string | null;
              citizenshipNo?: string | null;
              panNo?: string | null;
              notAmongDirectors?: boolean | null;
              centralRepID?: string | null;
              permanentAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              temporaryAddress?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
              trainingAttended?: Array<{
                subjectOfTraining?: string | null;
                dateOfTraining?: string | null;
                trainingOrganization?: string | null;
              } | null> | null;
            } | null;
            sectionStatus?: {
              id?: string | null;
              errors?: Record<string, Array<string>> | null;
              sectionStatus?: {
                errors?: Array<string> | null;
                incomplete?: Array<string> | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoopUnionSectionStatusQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetCoopUnionSectionStatusQuery = {
  members: {
    cooperativeUnion?: {
      formState?: {
        sectionStatus?: {
          institutionInformation?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
          bodDetails?: Array<{
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null> | null;
          accountOperatorDetails?: Array<{
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null> | null;
          centralRepresentativeDetails?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
          economicDetails?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
          declaration?: {
            id?: string | null;
            errors?: Record<string, Array<string>> | null;
            sectionStatus?: {
              errors?: Array<string> | null;
              incomplete?: Array<string> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccountListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAccountListQuery = {
  eBanking: {
    account?: {
      list?: {
        edges: Array<{
          node: {
            id: string;
            name: string;
            amount: number;
            isDefault: boolean;
            accountNumber: string;
            interestRate: number;
          };
        }>;
      } | null;
    } | null;
  };
};

export type GetAccountSummaryQueryVariables = Exact<{ [key: string]: never }>;

export type GetAccountSummaryQuery = {
  eBanking: { account?: { summary?: { totalSaving: number; totalLoan: number } | null } | null };
};

export type GetAccountDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetAccountDetailsQuery = {
  eBanking: {
    account?: {
      get?: {
        id: string;
        name: string;
        accountNumber: string;
        isDefault: boolean;
        amount: number;
        interestRate: number;
        accountType: Account_Type;
        interestBooked: number;
        interestEarned: number;
        subscribedDate: string;
        history?: Array<{ id: string; date: string; balance: number }> | null;
        transactions?: Array<{
          id: string;
          name: string;
          date: string;
          amount: number;
          transactionType: Transaction_Type;
          transactionDirection: Transaction_Direction;
        }> | null;
      } | null;
    } | null;
  };
};

export type GetCoopChequeServicesQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopChequeServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      cheque?: { options: Array<{ name: string; enabled: boolean }> } | null;
    } | null;
  };
};

export type GetCoopLoanServicesQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopLoanServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      loan?: {
        options: Array<{ name: string; enabled: boolean; requestType?: string | null }>;
      } | null;
    } | null;
  };
};

export type GetCoopComplaintServicesQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopComplaintServicesQuery = {
  eBanking: {
    cooperativeServices?: {
      complaint?: {
        options: Array<{ name: string; enabled: boolean; requestType?: string | null }>;
      } | null;
    } | null;
  };
};

export type GetCoopDownloadsQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoopDownloadsQuery = {
  eBanking: {
    cooperativeServices?: {
      downloads?: {
        options: Array<{ name: string; enabled: boolean; requestType?: string | null }>;
      } | null;
    } | null;
  };
};

export type GetAnnouncementListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAnnouncementListQuery = {
  eBanking: {
    notification?: {
      announcements?: {
        list: Array<{
          id: string;
          details: any;
          summary: string;
          title: string;
          date: string;
        } | null>;
      } | null;
    } | null;
  };
};

export type GetHomeServiceListQueryVariables = Exact<{ [key: string]: never }>;

export type GetHomeServiceListQuery = {
  eBanking: {
    services?: Array<{
      id: string;
      name: string;
      service_id: string;
      icon: string;
      enabled: boolean;
    } | null> | null;
  };
};

export type GetRecentTransactionsQueryVariables = Exact<{ [key: string]: never }>;

export type GetRecentTransactionsQuery = {
  eBanking: {
    transaction?: {
      recent?: Array<{
        id: string;
        name: string;
        transactionType: Transaction_Type;
        date: string;
        transactionDirection: Transaction_Direction;
        amount: number;
      } | null> | null;
    } | null;
  };
};

export type GetUtilityListQueryVariables = Exact<{ [key: string]: never }>;

export type GetUtilityListQuery = {
  eBanking: {
    utilityPayments?: Array<{
      id: string;
      name: string;
      enabled: boolean;
      icon: string;
      service_id: string;
    } | null> | null;
  };
};

export type GetKymFormStatusInstitutionQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetKymFormStatusInstitutionQuery = {
  members: {
    institution?: {
      formState?: {
        data?: {
          sectionStatus?: {
            information?: {
              completed?: Array<KymInsInformationSection | null> | null;
              error?: Array<KymInsInformationSection | null> | null;
            } | null;
            transaction?: {
              completed?: Array<KymInsTransactionSection | null> | null;
              error?: Array<KymInsTransactionSection | null> | null;
            } | null;
            directorDetails?: {
              completed?: Array<KymInsDirectorDetailsSection | null> | null;
              error?: Array<KymInsDirectorDetailsSection | null> | null;
            } | null;
            account?: {
              completed?: Array<KymInsAccountSection | null> | null;
              error?: Array<KymInsAccountSection | null> | null;
            } | null;
            declaration?: {
              completed?: Array<KymInsDeclarationSection | null> | null;
              error?: Array<KymInsDeclarationSection | null> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetInstitutionKymEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInstitutionKymEditDataQuery = {
  members: {
    institution?: {
      formState?: {
        data?: {
          lastUpdated:
            | { account: KymInsAccountSection }
            | { declaration: KymInsDeclarationSection }
            | { directorDetails: KymInsDirectorDetailsSection }
            | { information: KymInsInformationSection }
            | { transaction: KymInsTransactionSection };
          sectionStatus?: {
            information?: {
              completed?: Array<KymInsInformationSection | null> | null;
              error?: Array<KymInsInformationSection | null> | null;
            } | null;
            transaction?: {
              completed?: Array<KymInsTransactionSection | null> | null;
              error?: Array<KymInsTransactionSection | null> | null;
            } | null;
            directorDetails?: {
              completed?: Array<KymInsDirectorDetailsSection | null> | null;
              error?: Array<KymInsDirectorDetailsSection | null> | null;
            } | null;
          } | null;
          formData?: {
            institutionName?: string | null;
            institutionTypeId?: string | null;
            natureOfBusiness?: string | null;
            registrationDate?: string | null;
            vatOrPanNo?: string | null;
            noOfBranches?: number | null;
            registeredNumber?: string | null;
            issuingOffice?: string | null;
            phone?: string | null;
            fax?: string | null;
            email?: string | null;
            website?: string | null;
            postBoxNo?: string | null;
            numberOfEmployee?: number | null;
            dateOfLastAGM?: string | null;
            bank?: string | null;
            accountNumber?: string | null;
            accountName?: string | null;
            natureOfTransaction?: string | null;
            annualTurnover?: number | null;
            initialDepositAmount?: number | null;
            expectedMonthlyTurnover?: string | null;
            expectedMonthlyTransaction?: string | null;
            accountType?: AccountOperationType | null;
            isCompanyStampCompulsory?: boolean | null;
            specialInstruction?: string | null;
            companyStamp?: string | null;
            accountHolderName?: string | null;
            accountHolderPhone?: string | null;
            accountHolderEmail?: string | null;
            operatingOfficeAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            branchOfficeAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            registeredAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            accountHolderAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetInstitutionSisterDetailsEditListQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInstitutionSisterDetailsEditListQuery = {
  members: {
    institution?: {
      listSisterConcerns?: {
        data?: Array<{
          id?: string | null;
          name?: string | null;
          natureOfBusiness?: string | null;
          address?: string | null;
          phoneNo?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetInsBoardDirectorEditListQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInsBoardDirectorEditListQuery = {
  members: {
    institution?: {
      listDirectors?: {
        data?: Array<{
          id?: string | null;
          name?: string | null;
          designation?: string | null;
          isTemporaryAndPermanentAddressSame?: boolean | null;
          dateOfMembership?: string | null;
          highestQualification?: string | null;
          mobileNo?: string | null;
          emailAddress?: string | null;
          citizenshipNo?: string | null;
          panNo?: string | null;
          isHeadOfOrganization?: boolean | null;
          isAffiliatedWithOtherFirms?: boolean | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          firmDetails?: {
            directorName?: string | null;
            institutionName?: string | null;
            address?: string | null;
            designation?: string | null;
            yearlyIncome?: number | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetInsAccountOperatorEditListQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInsAccountOperatorEditListQuery = {
  members: {
    institution?: {
      listAccountOperators?: {
        data?: Array<{
          id?: string | null;
          name?: string | null;
          contact?: string | null;
          email?: string | null;
          isTemporaryAndPermanentAddressSame?: boolean | null;
          designation?: string | null;
          panNo?: string | null;
          permanenetAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetInventoryItemsQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryItemsQuery = {
  inventory: {
    items?: {
      list?: {
        edges: Array<{
          node: { id: string; name: string; type: string; unitPrice: number; itemQuantity: number };
        } | null>;
      } | null;
    } | null;
  };
};

export type GetInventoryItemGroupQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryItemGroupQuery = {
  inventory: {
    itemsGroup?: {
      list?: {
        edges: Array<{
          node: { name: string; id: string; description: string; parentCategory: string };
        } | null>;
      } | null;
    } | null;
  };
};

export type GetInventoryVendorQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryVendorQuery = {
  inventory: {
    vendors?: {
      list?: {
        edges: Array<{
          node: { name: string; location: string; email: string; phoneNumber: string };
        } | null>;
      } | null;
    } | null;
  };
};

export type GetInventoryUnitOfMeasureQueryVariables = Exact<{ [key: string]: never }>;

export type GetInventoryUnitOfMeasureQuery = {
  inventory: {
    unitOfMeasure?: {
      list?: {
        edges: Array<{ node: { name: string; shortName: string; acceptFraction: boolean } } | null>;
      } | null;
    } | null;
  };
};

export type GetIndividualKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetIndividualKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetInstitutionKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetInstitutionKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetCooperativeKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetCooperativeKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetCoopUnionKymOptionsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
}>;

export type GetCoopUnionKymOptionsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type LoanProductFragment = {
  id: string;
  objState: ObjState;
  createdAt: string;
  modifiedAt: string;
  createdDate: string;
  productName: string;
  productType: string;
  productSubType: string;
  productNature: NatureOfLoanProduct;
  description?: string | null;
  productCodeString?: string | null;
  typeOfMember: Array<KymMemberTypesEnum | null>;
  criteria?: Array<CriteriaSection | null> | null;
  minAge?: number | null;
  maxAge?: number | null;
  genderId?: Array<string | null> | null;
  maritalStatusId?: Array<string | null> | null;
  educationQualification?: Array<string | null> | null;
  ethnicity?: Array<string | null> | null;
  occupation?: Array<string | null> | null;
  foreignEmployment?: boolean | null;
  natureOfBusinessInstitution?: Array<string | null> | null;
  natureOFBusinessCoop?: Array<string | null> | null;
  cooperativeType?: Array<string | null> | null;
  tenureUnit?: FrequencyTenure | null;
  isTenureApplicable?: boolean | null;
  minTenureUnitNumber?: number | null;
  maxTenureUnitNumber?: number | null;
  minimumLoanAmount?: any | null;
  maxLoanAmount?: any | null;
  interestMethod?: LoanInterestMethod | null;
  repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
  allowPartialInstallment?: boolean | null;
  isMonthlyInstallmentCompulsory?: boolean | null;
  isPenaltyApplicable?: boolean | null;
  isRebateApplicable?: boolean | null;
  minGraceDurationUnit?: FrequencyTenure | null;
  minGraceDurationUnitNumber?: number | null;
  maxGraceDurationUnit?: FrequencyTenure | null;
  maxGraceDurationUnitNumber?: number | null;
  updateInterest?: boolean | null;
  waiveInterest?: boolean | null;
  postingFrequency?: LoanProductInstallment | null;
  isInsuranceApplicable?: boolean | null;
  isStaffProduct?: boolean | null;
  supportMultipleAccounts?: boolean | null;
  loanScheduleChangeOverride?: boolean | null;
  allowGurantee?: boolean | null;
  maxPercentOfGurantee?: number | null;
  isCollateralRequired?: boolean | null;
  collateralTypes?: Array<string | null> | null;
  requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
  productCode?: { prefix: string; initialNo: string } | null;
  penaltyOnPrincipal?: {
    dayAfterInstallmentDate?: number | null;
    penaltyRate?: number | null;
    penaltyAmount?: any | null;
    penaltyLedgerMapping?: string | null;
  } | null;
  penaltyOnInterest?: {
    dayAfterInstallmentDate?: number | null;
    penaltyRate?: number | null;
    penaltyAmount?: any | null;
    penaltyLedgerMapping?: string | null;
  } | null;
  penaltyOnInstallment?: {
    dayAfterInstallmentDate?: number | null;
    penaltyRate?: number | null;
    penaltyAmount?: any | null;
    penaltyLedgerMapping?: string | null;
  } | null;
  rebate?: {
    dayBeforeInstallmentDate?: number | null;
    rebateRate?: number | null;
    rebateAmount?: any | null;
    rebateLedgerMapping?: string | null;
  } | null;
  interest?: {
    minRate?: number | null;
    maxRate?: number | null;
    defaultRate: number;
    ceoAuthority?: number | null;
    boardAuthority?: number | null;
  } | null;
  loanProcessingCharge?: Array<{
    serviceName?: string | null;
    ledgerName?: string | null;
    amount?: any | null;
  } | null> | null;
  insuranceType?: { type?: string | null; amount?: any | null; rate?: number | null } | null;
  ledgerMapping?: {
    principal?: string | null;
    interestAccuredDaily?: string | null;
    interestIncome?: string | null;
  } | null;
  collateralValue?: Array<{
    type?: string | null;
    name?: string | null;
    minFMV?: number | null;
    maxFMV?: number | null;
    minDV?: number | null;
    maxDV?: number | null;
    minValue?: number | null;
    maxValue?: number | null;
  } | null> | null;
  prematurePenaltySetup?: {
    penaltyDateType?: PrematurePenaltyDateType | null;
    noOfDays?: number | null;
    penaltyLedgerMapping?: string | null;
    penaltyAmount?: any | null;
    penaltyRate?: number | null;
  } | null;
};

export type GetLoanProductDetailsDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductDetailsDataQuery = {
  settings: {
    general?: {
      loanProducts?: {
        formState?: {
          data?: LoanProductFragment | null;
          error?:
            | QueryError_AuthorizationError_Fragment
            | QueryError_BadRequestError_Fragment
            | QueryError_NotFoundError_Fragment
            | QueryError_ServerError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductsListQueryVariables = Exact<{
  memberId: Scalars['ID'];
  productTypeId: Scalars['ID'];
  productSubTypeId: Scalars['ID'];
}>;

export type GetLoanProductsListQuery = {
  loanAccount: {
    getProductList?: {
      allowed?: Array<{ id: string; productName: string } | null> | null;
      notAllowed?: Array<{
        error?: Array<string | null> | null;
        data?: { id: string; productName: string } | null;
      } | null> | null;
    } | null;
  };
};

export type GetProductCriteriaQueryVariables = Exact<{
  productId: Scalars['ID'];
}>;

export type GetProductCriteriaQuery = {
  loanAccount: {
    getProductCriteria?: {
      data?: {
        gender?: Array<string | null> | null;
        minAge?: number | null;
        maxAge?: number | null;
        ethnicity?: Array<string | null> | null;
        educationQualification?: Array<string | null> | null;
        occupation?: Array<string | null> | null;
        foreignEmployment?: boolean | null;
        institutionType?: Array<string | null> | null;
        cooperativeUnion?: Array<string | null> | null;
        cooperativeType?: Array<string | null> | null;
        maritalStatus?: Array<string | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetLoanAccountTypeQueryVariables = Exact<{
  productTypeId?: InputMaybe<Scalars['String']>;
}>;

export type GetLoanAccountTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{ id?: string | null; productType?: string | null } | null> | null;
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductTypesQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductTypesQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCollateralListQueryVariables = Exact<{ [key: string]: never }>;

export type GetCollateralListQuery = {
  settings: {
    general?: {
      loan?: {
        general?: {
          collateralList?: Array<{ id?: string | null; name?: string | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<LoanAccountSearchFilter>;
}>;

export type GetLoanListQuery = {
  loanAccount: {
    list?: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          LoanAccountName?: string | null;
          createdAt: string;
          member: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePicUrl?: string | null;
          };
          product: { productName: string };
        } | null;
      }> | null;
      pageInfo?: {
        endCursor?: string | null;
        startCursor?: string | null;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
      } | null;
    } | null;
  };
};

export type GetLoanInstallmentsQueryVariables = Exact<{
  productId: Scalars['ID'];
  gracePeriod?: InputMaybe<LoanAccountGraceInput>;
  sanctionAmount: Scalars['Int'];
  tenure: Scalars['Int'];
  interest: Scalars['Float'];
  repaymentScheme: LoanRepaymentScheme;
}>;

export type GetLoanInstallmentsQuery = {
  loanAccount: {
    getLoanInstallments?: {
      data?: {
        total: string;
        installments?: Array<{
          interest: string;
          installmentDate: string;
          installmentNo: number;
          payment: string;
          principal: string;
          remainingPrincipal: string;
        } | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetLoanApplicationDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanApplicationDetailsQuery = {
  loanAccount: {
    formState?: {
      data?: {
        memberId?: string | null;
        productType: string;
        productSubType?: string | null;
        productId?: string | null;
        LoanAccountName?: string | null;
        appliedLoanAmount?: string | null;
        linkedAccountId?: string | null;
        totalValuation?: string | null;
        totalSanctionedAmount?: string | null;
        justifySanction?: string | null;
        isCeoAuthority?: boolean | null;
        isBoardAuthority?: boolean | null;
        intrestRate?: number | null;
        tenure?: number | null;
        tenureType?: FrequencyTenure | null;
        repaymentScheme?: LoanRepaymentScheme | null;
        note?: string | null;
        collateralData?: Array<{
          collateralType?: string | null;
          ownerName?: string | null;
          relation?: string | null;
          sheetNo?: number | null;
          plotNo?: number | null;
          kittaNo?: number | null;
          area?: number | null;
          buildingType?: BuildingType | null;
          constructionType?: ConstructionType | null;
          valuatorId?: string | null;
          noOfStorey?: number | null;
          fmvMaxAmount?: any | null;
          dvMinAmount?: string | null;
          valuationMethod?: ValuationMethod | null;
          valuationPercent?: number | null;
          collaterallValuation?: any | null;
          collateralDescription?: string | null;
          collateralFiles?: Array<string | null> | null;
          valuationFiles?: Array<string | null> | null;
          vehicleName?: string | null;
          vehicleModelNo?: string | null;
          vehicleRegistrationNo?: string | null;
          vehicleNo?: string | null;
          vehicleSeatCapacity?: number | null;
          vehicleCapacity?: string | null;
          vehicleType?: string | null;
          vehicleFuelType?: string | null;
          documentName?: string | null;
          valuationAmount?: string | null;
          description?: string | null;
        } | null> | null;
        gurantee_details?: Array<{
          accountId?: string | null;
          guranteeAmount?: any | null;
          maxGuranteeAmountLimit?: any | null;
          memberId?: string | null;
          totalAmount?: any | null;
          accountName?: string | null;
        } | null> | null;
        gracePeriod?: {
          principalGracePeriod?: number | null;
          interestGracePeriod?: number | null;
        } | null;
        loanProcessingCharge?: Array<{
          amount?: any | null;
          ledgerName?: string | null;
          serviceName?: string | null;
        } | null> | null;
      } | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetMemberLoanAccountsQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetMemberLoanAccountsQuery = {
  loanAccount: {
    memberDisbursedLoanAccounts?: Array<{ id?: string | null; name?: string | null } | null> | null;
  };
};

export type GetLoanPreviewQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetLoanPreviewQuery = {
  loanAccount: {
    loanPreview?: {
      data?: {
        productId?: string | null;
        memberId?: string | null;
        additionalFeatures?: {
          allowPartialInstallment?: boolean | null;
          collateral?: boolean | null;
          insurance?: boolean | null;
          isMonthlyInterestCompulsory?: boolean | null;
          loanScheduleChangeOverride?: boolean | null;
          overrideInterest?: boolean | null;
          staffProduct?: boolean | null;
          supportMultipleAccount?: boolean | null;
        } | null;
        criteria?: {
          gender?: Array<string | null> | null;
          minAge?: number | null;
          maxAge?: number | null;
          ethnicity?: Array<string | null> | null;
          educationQualification?: Array<string | null> | null;
          maritalStatus?: Array<string | null> | null;
          foreignEmployment?: boolean | null;
          occupation?: Array<string | null> | null;
          institutionType?: Array<string | null> | null;
          cooperativeUnion?: Array<string | null> | null;
          cooperativeType?: Array<string | null> | null;
        } | null;
        collateralAndGuarantees?: Array<{
          name?: string | null;
          valuation?: string | null;
        } | null> | null;
        generalInformation?: {
          loanProduct?: string | null;
          loanSubType?: string | null;
          loanType?: string | null;
          natureOfLoanProduct?: NatureOfLoanProduct | null;
          loanName?: string | null;
          productCode?: string | null;
        } | null;
        loanDetails?: {
          appliedLoanAmount?: string | null;
          interestMethod?: LoanInterestMethod | null;
          interestRate?: number | null;
          loanRepaymentScheme?: LoanRepaymentScheme | null;
          tenure?: number | null;
          tenureUnit?: FrequencyTenure | null;
          totalCollateralValuation?: string | null;
          totalGuaranteeValuation?: string | null;
          totalProcessingChargesValuation?: string | null;
          totalSanctionedAmount?: string | null;
          totalDisbursedAmount?: string | null;
          principalGracePeriod?: number | null;
          interestGracePeriod?: number | null;
          interestAmount?: string | null;
          disburseDate?: string | null;
          expiryDate?: string | null;
          paymentFrequency?: LoanProductInstallment | null;
          processingCharges?: Array<{ name?: string | null; amount?: any | null } | null> | null;
        } | null;
        repaymentDetails?: {
          lastPaymentDate?: string | null;
          remainingPrincipal?: string | null;
          remainingInterest?: string | null;
          remainingTotal?: string | null;
          totalInstallmentAmount?: string | null;
          remainingInstallments?: Array<{
            installmentNo?: number | null;
            principal?: string | null;
            fine?: string | null;
            interestAmount?: string | null;
          } | null> | null;
        } | null;
        member?: {
          name?: Record<'local' | 'en' | 'np', string> | null;
          id: string;
          profilePicUrl?: string | null;
        } | null;
        paymentSchedule?: {
          total: string;
          installments?: Array<{
            installmentDate: string;
            installmentNo: number;
            interest: string;
            payment: string;
            principal: string;
            remainingPrincipal: string;
          } | null> | null;
        } | null;
        statistics?: {
          remainingPayableAmount?: string | null;
          totalPaidAmount?: string | null;
          totalPayableAmount?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberListQueryVariables = Exact<{
  pagination: Pagination;
  filter?: InputMaybe<KymMemberDataFilter>;
}>;

export type GetMemberListQuery = {
  members: {
    list: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          code: string;
          type: KymMemberTypesEnum;
          profilePicUrl?: string | null;
          signaturePicUrl?: string | null;
          contact?: string | null;
          createdAt: string;
          dateJoined?: string | null;
          address?: {
            state?: Record<'local' | 'en' | 'np', string> | null;
            district?: Record<'local' | 'en' | 'np', string> | null;
            localGovernment?: Record<'local' | 'en' | 'np', string> | null;
            wardNo?: string | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
          } | null;
          profile?:
            | {
                data?: {
                  formData?: {
                    maritalStatusId?: string | null;
                    maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
                    basicInformation?: {
                      genderId?: string | null;
                      gender?: Record<'local' | 'en' | 'np', string> | null;
                      age?: number | null;
                    } | null;
                    contactDetails?: {
                      mobileNumber?: string | null;
                      phoneNumber?: string | null;
                      email?: string | null;
                    } | null;
                  } | null;
                } | null;
              }
            | {}
            | null;
        } | null;
      } | null> | null;
      pageInfo?: PaginationFragment | null;
    };
  };
};

export type GetMemberTypesQueryVariables = Exact<{ [key: string]: never }>;

export type GetMemberTypesQuery = {
  members: {
    memberTypes: {
      data?: Array<{ id: string; type?: Array<KymMemberTypesEnum | null> | null } | null> | null;
    };
  };
};

export type GetMemberTranslationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberTranslationQuery = {
  members: {
    translate: {
      data?: Array<{
        id: string;
        data?: string | null;
        translatedValue?: string | null;
      } | null> | null;
    };
  };
};

export type GetKymFormStatusQueryVariables = Exact<{
  id: Scalars['String'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetKymFormStatusQuery = {
  members: {
    individual?: {
      formState?: {
        sectionStatus?: {
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberIndividualDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberIndividualDataQuery = {
  members: {
    details: {
      data?: {
        id: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        profilePicUrl?: string | null;
        profilePic?: string | null;
        contact?: string | null;
        dateJoined?: string | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          wardNo?: string | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
        profile?:
          | {
              id?: string | null;
              institutionInformation?: {
                data?: {
                  nameOfInstitutionEn?: string | null;
                  nameOfInstitutionNp?: string | null;
                } | null;
              } | null;
            }
          | {
              data?: {
                formData?: {
                  nameOfOrganization?: string | null;
                  regdNumber?: number | null;
                  regdDate?: string | null;
                } | null;
              } | null;
            }
          | {
              data?: {
                formData?: {
                  maritalStatus?: Record<'local' | 'en' | 'np', string> | null;
                  maritalStatusId?: string | null;
                  basicInformation?: {
                    dateOfBirth?: string | null;
                    age?: number | null;
                    gender?: Record<'local' | 'en' | 'np', string> | null;
                  } | null;
                  contactDetails?: { email?: string | null } | null;
                } | null;
              } | null;
            }
          | {
              data?: {
                formData?: {
                  institutionName?: string | null;
                  institutionTypeId?: string | null;
                  natureOfBusiness?: string | null;
                } | null;
              } | null;
            }
          | null;
      } | null;
    };
  };
};

export type GetIndividualKymEditDataQueryVariables = Exact<{
  id: Scalars['String'];
  hasPressedNext?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetIndividualKymEditDataQuery = {
  members: {
    individual?: {
      formState?: {
        sectionStatus?: {
          id?: string | null;
          errors?: Record<string, Array<string>> | null;
          sectionStatus?: {
            errors?: Array<string> | null;
            incomplete?: Array<string> | null;
          } | null;
        } | null;
        data?: {
          formData?: {
            maritalStatusId?: string | null;
            annualIncomeSourceId?: string | null;
            isFamilyAMember?: boolean | null;
            identificationSelection?: Array<string | null> | null;
            basicInformation?: {
              firstName?: Record<'local' | 'en' | 'np', string> | null;
              middleName?: Record<'local' | 'en' | 'np', string> | null;
              lastName?: Record<'local' | 'en' | 'np', string> | null;
              genderId?: string | null;
              dateOfBirth?: string | null;
              ethnicityId?: string | null;
              nationalityId?: string | null;
              educationQualificationId?: string | null;
              religionId?: string | null;
            } | null;
            contactDetails?: {
              mobileNumber?: string | null;
              phoneNumber?: string | null;
              email?: string | null;
            } | null;
            rentedHouse?: {
              landlordName?: Record<'local' | 'en' | 'np', string> | null;
              landlordContact?: string | null;
            } | null;
            profession?: {
              professionId?: Array<string | null> | null;
              otherProfession?: string | null;
            } | null;
            foreignEmployment?: {
              isForeignEmployment?: boolean | null;
              foreignEmpCountryId?: string | null;
              typeOfVisaId?: string | null;
              foreignEstimatedAnnualIncome?: string | null;
            } | null;
            membershipDetails?: {
              purposeId?: string | null;
              isMemberOfAnotherCooperative?: boolean | null;
              otherCoopName?: Record<'local' | 'en' | 'np', string> | null;
              otherCoopBranchId?: string | null;
              otherCoopMemberId?: string | null;
            } | null;
            introducers?: {
              firstIntroducerId?: string | null;
              secondIntroducerId?: string | null;
            } | null;
            initialTransactionDetails?: {
              initialShare?: number | null;
              initialSaving?: string | null;
              initialLoan?: string | null;
              otherFinancialAmount?: string | null;
            } | null;
            estimatedTransactions?: {
              estimatedAnnualTransactionAmount?: string | null;
              estimatedAnnualLoanAmount?: string | null;
              estimatedAnnualTransactionFrequencyId?: string | null;
              estimatedAnnualDepositAmount?: string | null;
            } | null;
            declaration?: {
              isPoliticallyExposed?: boolean | null;
              politicallyExposedDetails?: string | null;
              hasBeneficialOwner?: boolean | null;
              beneficialRelationshipId?: string | null;
              beneficialFullName?: Record<'local' | 'en' | 'np', string> | null;
              isConvicted?: boolean | null;
              convictedDetails?: string | null;
              hasForeignResidentialPermit?: boolean | null;
              foreignResidentialPermitTypeId?: string | null;
              declarationAgreement?: boolean | null;
            } | null;
            permanentAddress?: {
              provinceId?: number | null;
              districtId?: number | null;
              localGovernmentId?: number | null;
              wardNo?: number | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
            temporaryAddress?: {
              sameTempAsPermanentAddress?: boolean | null;
              address?: {
                provinceId?: number | null;
                districtId?: number | null;
                localGovernmentId?: number | null;
                wardNo?: number | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                coordinates?: { longitude?: number | null; latitude?: number | null } | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetIndividualKymFamilyMembersListQueryVariables = Exact<{
  id: Scalars['String'];
  isMember?: InputMaybe<Scalars['Boolean']>;
}>;

export type GetIndividualKymFamilyMembersListQuery = {
  members: {
    individual?: {
      listFamilyMember?: {
        data?: Array<{
          id: string;
          relationshipId?: string | null;
          fullName?: Record<'local' | 'en' | 'np', string> | null;
          familyMemberId?: string | null;
          dateOfBirth?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetIndividualKymFamilyOccupationListQueryVariables = Exact<{
  id: Scalars['String'];
  isSpouse: Scalars['Boolean'];
}>;

export type GetIndividualKymFamilyOccupationListQuery = {
  members: {
    individual?: {
      listOccupation?: {
        data?: Array<{
          id: string;
          occupationId?: string | null;
          orgName?: Record<'local' | 'en' | 'np', string> | null;
          panVatNo?: string | null;
          address?: Record<'local' | 'en' | 'np', string> | null;
          estimatedAnnualIncome?: string | null;
          establishedDate?: string | null;
          registrationNo?: string | null;
          contact?: string | null;
          isOwner?: boolean | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetIndividualKymIncomeSourceListQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetIndividualKymIncomeSourceListQuery = {
  members: {
    individual?: {
      listIncomeSource?: {
        data?: Array<{
          id: string;
          incomeSource?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetKymDocumentsListQueryVariables = Exact<{
  memberId: Scalars['String'];
}>;

export type GetKymDocumentsListQuery = {
  document: {
    listKYMDocuments: {
      data?: Array<{
        fieldId?: string | null;
        docData: Array<{ identifier: string; url: string } | null>;
      } | null> | null;
    };
  };
};

export type GetIndividualKymIdentificationListQueryVariables = Exact<{
  id: Scalars['String'];
}>;

export type GetIndividualKymIdentificationListQuery = {
  members: {
    individual?: {
      listIdentification?: {
        data?: Array<{
          id: string;
          idNo?: string | null;
          idType: string;
          place?: Record<'local' | 'en' | 'np', string> | null;
          date?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetMemberDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberDetailsQuery = {
  members: {
    details: {
      data?: {
        id: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        code: string;
        contact?: string | null;
        profilePicUrl?: string | null;
        signaturePicUrl?: string | null;
        address?: {
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
          wardNo?: string | null;
          locality?: Record<'local' | 'en' | 'np', string> | null;
          houseNo?: string | null;
        } | null;
        share?: {
          summary?: {
            memberId?: string | null;
            count: number;
            amount: number;
            member: { id: string; name?: Record<'local' | 'en' | 'np', string> | null };
          } | null;
        } | null;
        profile?:
          | {
              data?: {
                formData?: {
                  basicInformation?: {
                    gender?: Record<'local' | 'en' | 'np', string> | null;
                    dateOfBirth?: string | null;
                    age?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {}
          | null;
      } | null;
    };
  };
};

export type GetOfficialUseQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetOfficialUseQuery = {
  members: {
    officialUse?: {
      recordId?: string | null;
      record?: {
        id?: string | null;
        isStaff?: boolean | null;
        checkSanction?: boolean | null;
        checkNegative?: boolean | null;
        riskCategory?: OfficialUseRiskCategory | null;
        docCollectedAndVerified?: boolean | null;
        acceptableAddressDoc?: boolean | null;
      } | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type GetMemberPdfQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetMemberPdfQuery = { members: { memberPDF: string } };

export type GetAllSavedReportsQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAllSavedReportsQuery = {
  report: {
    listReports: {
      totalCount: number;
      pageInfo?: PaginationFragment | null;
      edges?: Array<{
        cursor: string;
        node?: {
          id: string;
          lastModifiedDate: string;
          name: string;
          reportType: string;
          savedBy: string;
        } | null;
      } | null> | null;
    };
  };
};

export type GetSavedReportQueryVariables = Exact<{
  reportId: Scalars['ID'];
}>;

export type GetSavedReportQuery = {
  report: {
    getReport?: {
      name?: string | null;
      settings?: {
        filter?: ShareTransactionType | null;
        memberId: string;
        periodType: ReportPeriodType;
        customPeriod?: { from: string; to: string } | null;
      } | null;
    } | null;
  };
};

export type GetShareStatementQueryVariables = Exact<{
  data: ShareStatementReportSettings;
}>;

export type GetShareStatementQuery = {
  report: {
    shareStatementReport?: {
      member?: {
        id: string;
        name?: Record<'local' | 'en' | 'np', string> | null;
        dateJoined?: string | null;
        address?: {
          wardNo?: string | null;
          state?: Record<'local' | 'en' | 'np', string> | null;
          district?: Record<'local' | 'en' | 'np', string> | null;
          houseNo?: string | null;
          localGovernment?: Record<'local' | 'en' | 'np', string> | null;
        } | null;
      } | null;
      statement?:
        | {
            shareStatement?: Array<{
              date: string;
              particular: string;
              noOfShares: number;
              returnAmountDr: number;
              purchaseAmountCr: number;
              balanceSheet: number;
            } | null> | null;
            totals?: {
              totalShares?: number | null;
              totalDr?: number | null;
              totalCr?: number | null;
              totalBalanceSheet?: number | null;
            } | null;
          }
        | {}
        | null;
    } | null;
  };
};

export type GetGlobalSearchQueryVariables = Exact<{
  filter?: InputMaybe<SearchFilterData>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetGlobalSearchQuery = {
  search: {
    globalPages: {
      data?: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            fullCode?: string | null;
            hasParam?: boolean | null;
            iconType?: GlobalPagesIconType | null;
            page?: string | null;
            url?: string | null;
          } | null;
        } | null> | null;
        pageInfo?: PaginationFragment | null;
      } | null;
    };
  };
};

export type GetAlternativeFeeAndChargesQueryVariables = Exact<{ [key: string]: never }>;

export type GetAlternativeFeeAndChargesQuery = {
  settings: {
    general?: {
      alternativeChannel?: {
        feesAndCharges?: {
          data?: Array<{
            id?: string | null;
            serviceType?: AlternativeChannelServiceType | null;
            ledgerId?: string | null;
            amount?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetActivatedServiceQueryVariables = Exact<{
  memberId: Scalars['String'];
}>;

export type GetActivatedServiceQuery = {
  alternativeChannel: {
    memberActivations?: {
      eBanking?: boolean | null;
      mobileBanking?: boolean | null;
      smsBanking?: boolean | null;
    } | null;
  };
};

export type GetAlternativeChannelListQueryVariables = Exact<{
  filter?: InputMaybe<AlternativeChannelFilter>;
  paginate?: InputMaybe<Pagination>;
}>;

export type GetAlternativeChannelListQuery = {
  alternativeChannel: {
    list?: {
      totalCount: number;
      pageInfo?: PaginationFragment | null;
      edges?: Array<{
        cursor: string;
        data?: {
          id?: string | null;
          name?: Record<'local' | 'en' | 'np', string> | null;
          memberId?: string | null;
          coopConnection?: boolean | null;
          lastActive?: string | null;
          phoneNumber?: string | null;
          serviceStatus?: AlternativeChannelStatus | null;
          serviceType?: AlternativeChannelServiceType | null;
        } | null;
      } | null> | null;
    } | null;
  };
};

export type GetAcFeeCoaQueryVariables = Exact<{ [key: string]: never }>;

export type GetAcFeeCoaQuery = {
  settings: {
    chartsOfAccount?: {
      accountsUnder?: {
        data?: Array<{
          id: string;
          accountCode: string;
          name: Record<'local' | 'en' | 'np', string>;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetAuditLogListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAuditLogListQuery = {
  auditLog: {
    humanize?:
      | {
          __typename: 'AuditLogHumanizeResult';
          data?: Array<{
            timestamp?: string | null;
            narration?: string | null;
            extraData?: Array<string | null> | null;
          } | null> | null;
        }
      | { __typename: 'RawAuditLog' }
      | null;
  };
};

export type GetBranchListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<BranchSearchFilter>;
}>;

export type GetBranchListQuery = {
  settings: {
    general?: {
      branch?: {
        list?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            node?: {
              id: string;
              branchCode?: string | null;
              name?: string | null;
              category?: BranchCategory | null;
              estDate?: string | null;
              managerName?: string | null;
              contactNumber?: string | null;
              email?: string | null;
              plTransferId?: string | null;
              tdsTransaferId?: string | null;
              branchStatus?: boolean | null;
              address?: {
                state?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              location?: { longitude?: number | null; latitude?: number | null } | null;
              abbsTransaction?: {
                abbsStatus?: boolean | null;
                receivableAccountId?: string | null;
                payableAccountId?: string | null;
              } | null;
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetBranchEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetBranchEditDataQuery = {
  settings: {
    general?: {
      branch?: {
        formState?: {
          data?: {
            branchCode?: string | null;
            name?: string | null;
            category?: BranchCategory | null;
            estDate?: string | null;
            managerName?: string | null;
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: string | null;
            phoneNumber?: string | null;
            email?: string | null;
            abbsStatus?: boolean | null;
            receivableAccountId?: string | null;
            payableAccountId?: string | null;
            plTransferId?: string | null;
            tdsTransaferId?: string | null;
            branchStatus?: boolean | null;
            location?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetCoaListQueryVariables = Exact<{
  filter: ChartsOfAccountFilter;
}>;

export type GetCoaListQuery = {
  settings: {
    general?: {
      chartsOfAccount?: {
        accounts: {
          data?: Array<{
            id: string;
            name: Record<'local' | 'en' | 'np', string>;
            under?: string | null;
            accountClass: string;
            accountCode: string;
            currency: string;
            accountType: CoaTypesOfAccount;
            openingBalance: number;
          }> | null;
        };
      } | null;
    } | null;
  };
};

export type GetCoaFullViewQueryVariables = Exact<{ [key: string]: never }>;

export type GetCoaFullViewQuery = {
  settings: {
    chartsOfAccount?: {
      fullView: {
        data?: Array<{
          id: string;
          name: Record<'local' | 'en' | 'np', string>;
          under?: string | null;
          accountType: CoaTypesOfAccount;
          accountClass: string;
          accountCode: string;
        } | null> | null;
      };
    } | null;
  };
};

export type GetCoaBankListQueryVariables = Exact<{
  accountCode?: InputMaybe<Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>;
}>;

export type GetCoaBankListQuery = {
  settings: {
    chartsOfAccount?: {
      accountsUnder?: {
        data?: Array<{
          id: string;
          accountCode: string;
          name: Record<'local' | 'en' | 'np', string>;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<LoanProductSearchFilter>;
}>;

export type GetLoanProductListQuery = {
  settings: {
    general?: {
      loanProducts?: {
        list?: {
          totalCount: number;
          pageInfo: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          };
          edges: Array<{
            node: {
              id: string;
              objState: ObjState;
              createdDate: string;
              productName: string;
              productCodeString?: string | null;
              productType: string;
              productSubType: string;
              createdBy: { id: string; name: string; username: string; userType: UserType };
              modifiedBy: { id: string; name: string; username: string; userType: UserType };
              productCode?: { prefix: string; initialNo: string } | null;
              interest?: {
                minRate?: number | null;
                maxRate?: number | null;
                defaultRate: number;
                ceoAuthority?: number | null;
                boardAuthority?: number | null;
              } | null;
            };
          }>;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetLoanProductEditDataQuery = {
  settings: {
    general?: {
      loanProducts?: {
        formState?: {
          data?: {
            id: string;
            objState: ObjState;
            createdAt: string;
            modifiedAt: string;
            productName: string;
            productType: string;
            productSubType: string;
            productNature: NatureOfLoanProduct;
            description?: string | null;
            typeOfMember: Array<KymMemberTypesEnum | null>;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            minimumLoanAmount?: any | null;
            maxLoanAmount?: any | null;
            repaymentScheme?: Array<LoanRepaymentScheme | null> | null;
            allowPartialInstallment?: boolean | null;
            installmentFrequency?: LoanProductInstallment | null;
            isMonthlyInstallmentCompulsory?: boolean | null;
            interestMethod?: LoanInterestMethod | null;
            isPenaltyApplicable?: boolean | null;
            penaltyType?: PenaltyType | null;
            isRebateApplicable?: boolean | null;
            minGraceDurationUnit?: FrequencyTenure | null;
            minGraceDurationUnitNumber?: number | null;
            maxGraceDurationUnit?: FrequencyTenure | null;
            maxGraceDurationUnitNumber?: number | null;
            updateInterest?: boolean | null;
            waiveInterest?: boolean | null;
            postingFrequency?: LoanProductInstallment | null;
            isInsuranceApplicable?: boolean | null;
            isStaffProduct?: boolean | null;
            supportMultipleAccounts?: boolean | null;
            loanScheduleChangeOverride?: boolean | null;
            requiredDocuments?: Array<LoanRequiredDocuments | null> | null;
            isCollateralRequired?: boolean | null;
            allowGurantee?: boolean | null;
            maxPercentOfGurantee?: number | null;
            collateralTypes?: Array<string | null> | null;
            productCode?: { prefix: string; initialNo: string } | null;
            penaltyOnPrincipal?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            penaltyOnInterest?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            penaltyOnInstallment?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebate?: {
              dayBeforeInstallmentDate?: number | null;
              rebateRate?: number | null;
              rebateAmount?: any | null;
              rebateLedgerMapping?: string | null;
            } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate: number;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
            } | null;
            loanProcessingCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            insuranceType?: {
              type?: string | null;
              amount?: any | null;
              rate?: number | null;
            } | null;
            ledgerMapping?: {
              principal?: string | null;
              interestAccuredDaily?: string | null;
              interestIncome?: string | null;
            } | null;
            collateralValue?: Array<{
              type?: string | null;
              minFMV?: number | null;
              maxFMV?: number | null;
              minDV?: number | null;
              maxDV?: number | null;
              minValue?: number | null;
              maxValue?: number | null;
            } | null> | null;
            prematurePenaltySetup?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanGeneralSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanGeneralSettingsQuery = {
  settings: {
    general?: {
      loan?: {
        general?: {
          emi?: boolean | null;
          epi?: boolean | null;
          flat?: boolean | null;
          collateralList?: Array<{
            id?: string | null;
            name?: string | null;
            enabled?: boolean | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductSettingsQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductSubTypeQueryVariables = Exact<{
  productTypeId?: InputMaybe<Scalars['String']>;
}>;

export type GetLoanProductSubTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
            productTypeID?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanInsuranceSchemeQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanInsuranceSchemeQuery = {
  settings: {
    general?: {
      loan?: {
        insuranceSchemes?: Array<{
          id: string;
          insuranceCompany?: string | null;
          insurancePremiumPercent?: number | null;
          maxAmount?: string | null;
          maxPercent?: number | null;
          minAmount?: string | null;
          paymentFrequency?: Frequency | null;
          minPercent?: number | null;
          paymentType?: LoanInsurancePaymentType | null;
          schemeName?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetLoanProductTypeQueryVariables = Exact<{ [key: string]: never }>;

export type GetLoanProductTypeQuery = {
  settings: {
    general?: {
      loan?: {
        productType?: {
          productTypes?: Array<{
            id?: string | null;
            productType?: string | null;
            description?: string | null;
          } | null> | null;
          productSubTypes?: Array<{
            id?: string | null;
            productSubType?: string | null;
            productTypeID?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetGeneralMemberSettingsDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetGeneralMemberSettingsDataQuery = {
  settings: {
    general?: {
      KYM?: {
        general?: {
          generalMember?: {
            record?: {
              memberType?: {
                individual?: boolean | null;
                institution?: boolean | null;
                cooperative?: boolean | null;
                cooperativeUnion?: boolean | null;
              } | null;
              risk?: {
                generalRisk?: number | null;
                mediumRisk?: number | null;
                highRisk?: number | null;
              } | null;
              charge?: Array<{
                memberType: KymMemberTypesEnum;
                ledgerId: string;
                charge: number;
              } | null> | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreDefinedFieldsQueryVariables = Exact<{
  filter: PredefinedElementFilter;
}>;

export type GetPreDefinedFieldsQuery = {
  settings: {
    form?: {
      predefined: {
        details: {
          data?:
            | {
                __typename: 'FormField';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                fieldType: FormFieldType;
                hasOtherField: boolean;
                order: number;
                dependsOn?: Array<string | null> | null;
                isDefault: boolean;
                options?: Array<{
                  order: number;
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  isDefault: boolean;
                }> | null;
              }
            | {
                __typename: 'FormSection';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                isDefault: boolean;
                sectionType: FormSectionType;
                maxSize?: number | null;
                fields?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  fieldType: FormFieldType;
                  isDefault: boolean;
                }> | null;
                subSections?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  search_term?: FormSectionSearchTerm | null;
                }> | null;
              }
            | null;
        };
      };
    } | null;
  };
};

export type GetCustomFieldsQueryVariables = Exact<{
  kymType: FormCategory;
}>;

export type GetCustomFieldsQuery = {
  settings: {
    form?: {
      custom: {
        list: {
          data?: Array<
            | {
                __typename: 'FormField';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                fieldType: FormFieldType;
                hasOtherField: boolean;
                order: number;
                dependsOn?: Array<string | null> | null;
                isDefault: boolean;
                options?: Array<{
                  order: number;
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  isDefault: boolean;
                }> | null;
              }
            | {
                __typename: 'FormSection';
                id: string;
                name: Record<'local' | 'en' | 'np', string>;
                isDefault: boolean;
                sectionType: FormSectionType;
                maxSize?: number | null;
                fields?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  enabled: boolean;
                  fieldType: FormFieldType;
                  isDefault: boolean;
                }> | null;
                subSections?: Array<{
                  id: string;
                  name: Record<'local' | 'en' | 'np', string>;
                  search_term?: FormSectionSearchTerm | null;
                }> | null;
              }
            | null
          > | null;
        };
      };
    } | null;
  };
};

export type GetDeclarationQueryVariables = Exact<{
  kymType: DeclarationFor;
}>;

export type GetDeclarationQuery = {
  settings: {
    declaration: {
      get?: { data?: { content: Record<'local' | 'en' | 'np', string> } | null } | null;
    };
  };
};

export type GetDepositSettingsIroQueryVariables = Exact<{ [key: string]: never }>;

export type GetDepositSettingsIroQuery = {
  settings: {
    general?: {
      deposit?: {
        iroFormState?: {
          data?: {
            iroName?: string | null;
            iroAddress?: string | null;
            iroCode?: string | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositSettingsTdsQueryVariables = Exact<{ [key: string]: never }>;

export type GetDepositSettingsTdsQuery = {
  settings: {
    general?: {
      deposit?: {
        tdsFormState?: {
          data?: {
            individual?: number | null;
            institution?: number | null;
            cooperative?: number | null;
            coopUnion?: number | null;
          } | null;
          error?:
            | { __typename: 'AuthorizationError' }
            | { __typename: 'BadRequestError' }
            | { __typename: 'NotFoundError' }
            | { __typename: 'ServerError' }
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositProductSettingsListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<DepositProductSearchFilter>;
}>;

export type GetDepositProductSettingsListQuery = {
  settings: {
    general?: {
      depositProduct?: {
        list?: {
          totalCount: number;
          pageInfo: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          };
          edges: Array<{
            node: {
              id: string;
              objState: ObjState;
              productCode: string;
              productName: string;
              nature: NatureOfDepositProduct;
              interest?: number | null;
              createdDate?: string | null;
              typeOfMember?: Array<KymMemberTypesEnum | null> | null;
              createdAt: string;
              modifiedAt: string;
              createdBy: { id: string; name: string; username: string; userType: UserType };
              modifiedBy: { id: string; name: string; username: string; userType: UserType };
            };
          }>;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDepositProductSettingsEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetDepositProductSettingsEditDataQuery = {
  settings: {
    general?: {
      depositProduct?: {
        formState?: {
          data?: {
            productName?: string | null;
            nature?: NatureOfDepositProduct | null;
            description?: string | null;
            typeOfMember?: Array<KymMemberTypesEnum | null> | null;
            criteria?: Array<CriteriaSection | null> | null;
            minAge?: number | null;
            maxAge?: number | null;
            genderId?: Array<string | null> | null;
            maritalStatusId?: Array<string | null> | null;
            educationQualification?: Array<string | null> | null;
            transactionAllowed?: DepositFrequency | null;
            noOftransactionAllowed?: number | null;
            ethnicity?: Array<string | null> | null;
            occupation?: Array<string | null> | null;
            foreignEmployment?: boolean | null;
            natureOfBusinessInstitution?: Array<string | null> | null;
            natureOFBusinessCoop?: Array<string | null> | null;
            cooperativeType?: Array<string | null> | null;
            isForMinors?: boolean | null;
            depositFrequency?: Frequency | null;
            penalty?: boolean | null;
            rebate?: boolean | null;
            isTenureApplicable?: boolean | null;
            tenureUnit?: FrequencyTenure | null;
            minTenureUnitNumber?: number | null;
            maxTenureUnitNumber?: number | null;
            ladderRate?: boolean | null;
            postingFrequency?: DepositFrequency | null;
            maxPostingFreqDifference?: number | null;
            accountType?: DefaultAccountType | null;
            isMandatorySaving?: boolean | null;
            autoOpen?: boolean | null;
            allowLoan?: boolean | null;
            percentageOfDeposit?: number | null;
            alternativeChannels?: boolean | null;
            atmFacility?: boolean | null;
            chequeIssue?: boolean | null;
            supportMultiple?: boolean | null;
            staffProduct?: boolean | null;
            withdrawRestricted?: boolean | null;
            specifyWithdrawRestriction?: string | null;
            wealthBuildingProduct?: boolean | null;
            individualDocuments?: Array<IndividualRequiredDocument | null> | null;
            institutionDocuments?: Array<InstitutionRequiredDocument | null> | null;
            productCode: { prefix: string; initialNo: string };
            depositAmount?: { minAmount?: any | null; maxAmount?: any | null } | null;
            withdrawAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            fixedDepositAmountLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            penaltyData?: {
              dayAfterInstallmentDate?: number | null;
              penaltyRate?: number | null;
              penaltyAmount?: any | null;
              penaltyLedgerMapping?: string | null;
            } | null;
            rebateData?: {
              dayBeforeInstallmentDate?: number | null;
              noOfInstallment?: number | null;
              rebateAmount?: any | null;
              rebateRate?: number | null;
              rebateLedgerMapping?: string | null;
            } | null;
            balanceLimit?: { minAmount?: any | null; maxAmount?: any | null } | null;
            interest?: {
              minRate?: number | null;
              maxRate?: number | null;
              defaultRate?: number | null;
              ceoAuthority?: number | null;
              boardAuthority?: number | null;
              additionalRate?: number | null;
            } | null;
            ladderRateData?: Array<{ type: string; amount: any; rate: number } | null> | null;
            serviceCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            accountCloseCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            chequeCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            atmCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            alternativeChannelCharge?: Array<{
              serviceName?: string | null;
              ledgerName?: string | null;
              amount?: any | null;
            } | null> | null;
            dormantSetup?: Array<{
              duration?: string | null;
              condition?: string | null;
            } | null> | null;
            withdrawPenalty?: {
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
            prematurePenalty?: {
              penaltyDateType?: PrematurePenaltyDateType | null;
              noOfDays?: number | null;
              penaltyLedgerMapping?: string | null;
              penaltyAmount?: any | null;
              penaltyRate?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsOptionsFieldsQueryVariables = Exact<{
  searchTerm: FormFieldSearchTerm;
  category: FormCategory;
}>;

export type GetSettingsOptionsFieldsQuery = {
  form: {
    options: {
      predefined?: {
        data?: Array<{ id: string; name: Record<'local' | 'en' | 'np', string> } | null> | null;
      } | null;
    };
  };
};

export type GetSettingsShareBonusDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareBonusDataQuery = {
  settings: {
    general?: {
      share?: {
        bonus?: {
          taxPayer?: TaxPayerOptions | null;
          taxRate?: number | null;
          accountMapping?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareDividendDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareDividendDataQuery = {
  settings: {
    general?: {
      share?: {
        dividend?: {
          distributionCondition?: DividendDistributionCondition | null;
          dividendTransferTreatment?: DividendTransferTreatment | null;
          accountForFractionalDividends?: string | null;
          accountForShareDividends?: string | null;
          organizationFundForDividends?: string | null;
          dividendRate?: {
            quarterly?: {
              firstQuarter?: number | null;
              secondQuarter?: number | null;
              thirdQuarter?: number | null;
              fourthQuarter?: number | null;
            } | null;
            monthly?: {
              firstMonth?: number | null;
              secondMonth?: number | null;
              thirdMonth?: number | null;
              fourthMonth?: number | null;
              fifthMonth?: number | null;
              sixthMonth?: number | null;
              seventhMonth?: number | null;
              eightMonth?: number | null;
              ninthMonth?: number | null;
              tenthMonth?: number | null;
              eleventhMonth?: number | null;
              twelfthMonth?: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareIssueChargesDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareIssueChargesDataQuery = {
  settings: {
    general?: {
      share?: {
        shareIssueCharges?: {
          shareCertificate?: Array<{
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
          other?: Array<{
            name?: string | null;
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLedgerMapingShareQueryVariables = Exact<{ [key: string]: never }>;

export type GetLedgerMapingShareQuery = {
  settings: {
    general?: {
      chartsOfAccount?: {
        accountsUnder?: {
          data?: Array<{
            id: string;
            accountCode: string;
            name: Record<'local' | 'en' | 'np', string>;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareReturnChargesDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareReturnChargesDataQuery = {
  settings: {
    general?: {
      share?: {
        shareReturnCharges?: {
          other?: Array<{
            name?: string | null;
            minShare?: number | null;
            maxShare?: number | null;
            type?: ShareChargeType | null;
            charge?: string | null;
            ledgerMapping?: string | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareGeneralDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareGeneralDataQuery = {
  settings: {
    general?: {
      share?: {
        general?: {
          typeOfShare?: TypeOfShare | null;
          multiplicityFactor?: number | null;
          minimumQuantityOfShare?: number | null;
          maximumQuantityOfShare?: number | null;
          paidUpShareRate?: number | null;
          shareIssueAuthority?: Array<BranchCategory | null> | null;
          typeOfShareKitta?: TypeOfShare | null;
          noOfAuthorisedPaidUpShare?: number | null;
          noOfIssuedShare?: number | null;
          startNumber?: number | null;
          endNumber?: number | null;
          incrementor?: number | null;
          noOfDigits?: number | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsShareTransferDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetSettingsShareTransferDataQuery = {
  settings: {
    general?: {
      share?: {
        transfer?: {
          type?: ShareTransferType | null;
          accountForShareFund?: string | null;
          mappedShareLedger?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSettingsUserListDataQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<MyraUserSearchFilter>;
}>;

export type GetSettingsUserListDataQuery = {
  settings: {
    myraUser?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node?: {
            id: string;
            objState: ObjState;
            createdAt: string;
            modifiedAt: string;
            name?: string | null;
            email?: string | null;
            contactNo?: string | null;
            gender?: UserGender | null;
            dob?: string | null;
            role?: Roles | null;
            profilePicUrl?: string | null;
            branch?: { id: string } | null;
          } | null;
        }> | null;
        pageInfo: PaginationFragment;
      } | null;
    } | null;
  };
};

export type GetSettingsUserEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetSettingsUserEditDataQuery = {
  settings: {
    myraUser?: {
      formState?: {
        data?: {
          name?: string | null;
          email?: string | null;
          contactNo?: string | null;
          gender?: UserGender | null;
          dob?: string | null;
          role?: Roles | null;
          branch?: string | null;
          identificationSelection?: Array<string | null> | null;
          isTempAsPermanentAddressSame?: boolean | null;
          landlordName?: string | null;
          landlordContact?: string | null;
          identificationDetails?: Array<{
            id?: string | null;
            idNo?: string | null;
            idType?: string | null;
            place?: string | null;
            date?: string | null;
          } | null> | null;
          permanentAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          temporaryAddress?: {
            provinceId?: number | null;
            districtId?: number | null;
            localGovernmentId?: number | null;
            wardNo?: number | null;
            locality?: Record<'local' | 'en' | 'np', string> | null;
            houseNo?: string | null;
            coordinates?: { longitude?: number | null; latitude?: number | null } | null;
          } | null;
          profilePicture?: Array<{ identifier?: string | null; url?: string | null } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetValuatorQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetValuatorQuery = {
  settings: {
    general?: {
      valuator?: {
        formState?: {
          data?: {
            valuatorName?: string | null;
            valuatorType?: ValuatorType | null;
            valuatorId?: string | null;
            academicQualification?: string | null;
            valuationLicenseNo?: string | null;
            renewalDate?: string | null;
            contractDate?: string | null;
            insurancePremium?: number | null;
            mobileNo?: string | null;
            phoneNo?: string | null;
            email?: string | null;
            documents?: Array<string | null> | null;
            address?: {
              localGovernmentId?: number | null;
              districtId?: number | null;
              provinceId?: number | null;
              houseNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: number | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetValuatorListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
}>;

export type GetValuatorListQuery = {
  settings: {
    general?: {
      valuator?: {
        list?: {
          totalCount: number;
          pageInfo?: {
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
          } | null;
          edges?: Array<{
            cursor: string;
            node?: {
              id: string;
              valuatorName?: string | null;
              valuatorType?: ValuatorType | null;
              phoneNo?: string | null;
              contractDate?: string | null;
              address?: {
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                district?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                state?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
              } | null;
            } | null;
          }> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetChartOfAccountsQueryVariables = Exact<{ [key: string]: never }>;

export type GetChartOfAccountsQuery = {
  settings: {
    general?: {
      chartsOfAccount?: { class?: { data: Array<{ id: string; name: string }> } | null } | null;
    } | null;
  };
};

export type GetShareBalanceListQueryVariables = Exact<{ [key: string]: never }>;

export type GetShareBalanceListQuery = {
  share: {
    balance?: {
      edges: Array<{
        node: {
          count: number;
          amount: number;
          member: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePic?: string | null;
            profilePicUrl?: string | null;
          };
        };
      }>;
    } | null;
  };
};

export type GetShareRegisterListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<ShareRegisterFilter>;
}>;

export type GetShareRegisterListQuery = {
  share: {
    register?: {
      totalCount: number;
      edges: Array<{
        cursor: string;
        node: {
          transactionDate?: string | null;
          transactionDirection: Share_Transaction_Direction;
          balance?: number | null;
          startNumber: number;
          shareAmount?: number | null;
          endNumber: number;
          credit?: number | null;
          debit?: number | null;
          member?: {
            id: string;
            name?: Record<'local' | 'en' | 'np', string> | null;
            profilePic?: string | null;
            profilePicUrl?: string | null;
          } | null;
        };
      }>;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    } | null;
  };
};

export type GetShareHistoryQueryVariables = Exact<{
  memberId: Scalars['ID'];
}>;

export type GetShareHistoryQuery = {
  share: {
    history?: {
      history?: Array<{
        id?: string | null;
        status?: Share_Status | null;
        transactionDate?: string | null;
        transactionDirection: Share_Transaction_Direction;
        credit?: number | null;
        debit?: number | null;
        startNumber: number;
        endNumber: number;
        balance?: number | null;
        shareAmount?: number | null;
        totalAmount?: number | null;
        paymentMode?: SharePaymentMode | null;
        bankId?: string | null;
        voucherNumber?: string | null;
        accountId?: string | null;
        member?: { id: string; name?: Record<'local' | 'en' | 'np', string> | null } | null;
        extraFee?: Array<{ name: string; value: number } | null> | null;
      } | null> | null;
      balance?: {
        count: number;
        amount: number;
        member: { id: string; name?: Record<'local' | 'en' | 'np', string> | null };
      } | null;
    } | null;
  };
};

export type GetShareChargesQueryVariables = Exact<{
  transactionType: Share_Transaction_Direction;
  shareCount: Scalars['Int'];
}>;

export type GetShareChargesQuery = {
  share: {
    charges?: Array<{
      id?: string | null;
      name?: string | null;
      charge?: string | null;
    } | null> | null;
  };
};

export type GetDepositListDataQueryVariables = Exact<{
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetDepositListDataQuery = {
  transaction: {
    listDeposit: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          state: TransactionState;
          paymentMode?: string | null;
          processedBy?: string | null;
          date?: string | null;
          agentName?: string | null;
          profilePicUrl?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetWithdrawListDataQueryVariables = Exact<{
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetWithdrawListDataQuery = {
  transaction: {
    listWithdraw: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          name?: Record<'local' | 'en' | 'np', string> | null;
          amount?: string | null;
          state: TransactionState;
          paymentMode?: string | null;
          processedBy?: string | null;
          date?: string | null;
          profilePicUrl?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetAccountTransferListDataQueryVariables = Exact<{
  filter?: InputMaybe<AccountTransactionFilter>;
  pagination?: InputMaybe<Pagination>;
}>;

export type GetAccountTransferListDataQuery = {
  transaction: {
    listTransfer: {
      totalCount: number;
      edges?: Array<{
        cursor: string;
        node?: {
          ID: string;
          amount?: string | null;
          state: TransactionState;
          transferType: TransferType;
          date?: string | null;
        } | null;
      } | null> | null;
      pageInfo?: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor?: string | null;
        endCursor?: string | null;
      } | null;
    };
  };
};

export type GetInstallmentsListDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetInstallmentsListDataQuery = {
  account: {
    getInstallments?: {
      data?: Array<{
        dueDate: string;
        status: InstallmentState;
        monthName?: string | null;
        fine?: string | null;
        rebate?: string | null;
      } | null> | null;
      error?:
        | QueryError_AuthorizationError_Fragment
        | QueryError_BadRequestError_Fragment
        | QueryError_NotFoundError_Fragment
        | QueryError_ServerError_Fragment
        | null;
    } | null;
  };
};

export type GetEndOfDayDateDataQueryVariables = Exact<{ [key: string]: never }>;

export type GetEndOfDayDateDataQuery = { transaction: { endOfDayDate: string } };

export const MutationErrorFragmentDoc = `
    fragment MutationError on MutationError {
  ... on BadRequestError {
    __typename
    badRequestErrorMessage: message
    code
  }
  ... on ServerError {
    __typename
    serverErrorMessage: message
    code
  }
  ... on AuthorizationError {
    __typename
    authorizationErrorMsg: message
    code
  }
  ... on ValidationError {
    __typename
    validationErrorMsg: message
    code
  }
  ... on NotFoundError {
    __typename
    notFoundErrorMsg: message
    code
  }
}
    `;
export const QueryErrorFragmentDoc = `
    fragment QueryError on QueryError {
  ... on BadRequestError {
    __typename
    badRequestErrorMessage: message
    code
  }
  ... on ServerError {
    __typename
    serverErrorMessage: message
    code
  }
  ... on AuthorizationError {
    __typename
    authorizationErrorMsg: message
    code
  }
  ... on NotFoundError {
    __typename
    notFoundErrorMsg: message
    code
  }
}
    `;
export const KymFieldDataFragmentDoc = `
    fragment KYMFieldData on KYMFieldData {
  id
  options {
    id
    value
  }
}
    `;
export const PaginationFragmentDoc = `
    fragment Pagination on PageInfo {
  startCursor
  endCursor
  hasNextPage
  hasPreviousPage
}
    `;
export const LoanProductFragmentDoc = `
    fragment LoanProduct on LoanProduct {
  id
  objState
  createdAt
  modifiedAt
  createdDate
  productName
  productType
  productSubType
  productNature
  description
  productCode {
    prefix
    initialNo
  }
  productCodeString
  typeOfMember
  criteria
  minAge
  maxAge
  genderId
  maritalStatusId
  educationQualification
  ethnicity
  occupation
  foreignEmployment
  natureOfBusinessInstitution
  natureOFBusinessCoop
  cooperativeType
  tenureUnit
  isTenureApplicable
  minTenureUnitNumber
  maxTenureUnitNumber
  minimumLoanAmount
  maxLoanAmount
  interestMethod
  repaymentScheme
  allowPartialInstallment
  isMonthlyInstallmentCompulsory
  isPenaltyApplicable
  penaltyOnPrincipal {
    dayAfterInstallmentDate
    penaltyRate
    penaltyAmount
    penaltyLedgerMapping
  }
  penaltyOnInterest {
    dayAfterInstallmentDate
    penaltyRate
    penaltyAmount
    penaltyLedgerMapping
  }
  penaltyOnInstallment {
    dayAfterInstallmentDate
    penaltyRate
    penaltyAmount
    penaltyLedgerMapping
  }
  isRebateApplicable
  rebate {
    dayBeforeInstallmentDate
    rebateRate
    rebateAmount
    rebateLedgerMapping
  }
  minGraceDurationUnit
  minGraceDurationUnitNumber
  maxGraceDurationUnit
  maxGraceDurationUnitNumber
  interest {
    minRate
    maxRate
    defaultRate
    ceoAuthority
    boardAuthority
  }
  updateInterest
  waiveInterest
  postingFrequency
  loanProcessingCharge {
    serviceName
    ledgerName
    amount
  }
  isInsuranceApplicable
  insuranceType {
    type
    amount
    rate
  }
  ledgerMapping {
    principal
    interestAccuredDaily
    interestIncome
  }
  isStaffProduct
  supportMultipleAccounts
  loanScheduleChangeOverride
  allowGurantee
  maxPercentOfGurantee
  isCollateralRequired
  collateralTypes
  collateralValue {
    type
    name
    minFMV
    maxFMV
    minDV
    maxDV
    minValue
    maxValue
  }
  prematurePenaltySetup {
    penaltyDateType
    noOfDays
    penaltyLedgerMapping
    penaltyAmount
    penaltyRate
  }
  requiredDocuments
}
    `;
export const SetAccountCloseDataDocument = `
    mutation setAccountCloseData($data: DepositAccountClose) {
  account {
    close(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountCloseDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountCloseDataMutation,
    TError,
    SetAccountCloseDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetAccountCloseDataMutation, TError, SetAccountCloseDataMutationVariables, TContext>(
    ['setAccountCloseData'],
    useAxios<SetAccountCloseDataMutation, SetAccountCloseDataMutationVariables>(
      SetAccountCloseDataDocument
    ),
    options
  );
export const SetAccountOpenDataDocument = `
    mutation setAccountOpenData($id: ID!, $data: DepositLoanAccountInput!) {
  account {
    add(id: $id, data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAccountOpenDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountOpenDataMutation,
    TError,
    SetAccountOpenDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetAccountOpenDataMutation, TError, SetAccountOpenDataMutationVariables, TContext>(
    ['setAccountOpenData'],
    useAxios<SetAccountOpenDataMutation, SetAccountOpenDataMutationVariables>(
      SetAccountOpenDataDocument
    ),
    options
  );
export const SetAccountDocumentDataDocument = `
    mutation setAccountDocumentData($subscriptionId: String!, $fieldId: String!, $identifiers: [String!]!) {
  document {
    Subscription(subscriptionId: $subscriptionId) {
      Upsert(fieldId: $fieldId, identifiers: $identifiers) {
        recordId
      }
    }
  }
}
    `;
export const useSetAccountDocumentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountDocumentDataMutation,
    TError,
    SetAccountDocumentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountDocumentDataMutation,
    TError,
    SetAccountDocumentDataMutationVariables,
    TContext
  >(
    ['setAccountDocumentData'],
    useAxios<SetAccountDocumentDataMutation, SetAccountDocumentDataMutationVariables>(
      SetAccountDocumentDataDocument
    ),
    options
  );
export const SetAddMemberToAgentDataDocument = `
    mutation setAddMemberToAgentData($agentId: String!, $data: AssignMembersInput, $override: Boolean) {
  transaction {
    addMemberToAgent(agentId: $agentId, data: $data, override: $override) {
      data {
        id
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAddMemberToAgentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAddMemberToAgentDataMutation,
    TError,
    SetAddMemberToAgentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAddMemberToAgentDataMutation,
    TError,
    SetAddMemberToAgentDataMutationVariables,
    TContext
  >(
    ['setAddMemberToAgentData'],
    useAxios<SetAddMemberToAgentDataMutation, SetAddMemberToAgentDataMutationVariables>(
      SetAddMemberToAgentDataDocument
    ),
    options
  );
export const SetAgentTodayListDataDocument = `
    mutation setAgentTodayListData($id: ID!, $data: [AgentTodayListInput]) {
  transaction {
    agentTodayList(id: $id, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAgentTodayListDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAgentTodayListDataMutation,
    TError,
    SetAgentTodayListDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAgentTodayListDataMutation,
    TError,
    SetAgentTodayListDataMutationVariables,
    TContext
  >(
    ['setAgentTodayListData'],
    useAxios<SetAgentTodayListDataMutation, SetAgentTodayListDataMutationVariables>(
      SetAgentTodayListDataDocument
    ),
    options
  );
export const SetAgentTodayDepositDataDocument = `
    mutation setAgentTodayDepositData($id: ID!, $data: [AgentTodayListInput]) {
  transaction {
    agentTodayDeposit(agentID: $id, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetAgentTodayDepositDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAgentTodayDepositDataMutation,
    TError,
    SetAgentTodayDepositDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAgentTodayDepositDataMutation,
    TError,
    SetAgentTodayDepositDataMutationVariables,
    TContext
  >(
    ['setAgentTodayDepositData'],
    useAxios<SetAgentTodayDepositDataMutation, SetAgentTodayDepositDataMutationVariables>(
      SetAgentTodayDepositDataDocument
    ),
    options
  );
export const LoginDocument = `
    mutation login($data: LoginInput!) {
  auth {
    login(data: $data) {
      recordId
      record {
        token {
          access
          refresh
        }
        data {
          user {
            id
            objState
            username
            firstName
            middleName
            lastName
          }
          preference {
            language
            languageCode
            date
          }
        }
      }
    }
  }
}
    `;
export const useLoginMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<LoginMutation, TError, LoginMutationVariables, TContext>
) =>
  useMutation<LoginMutation, TError, LoginMutationVariables, TContext>(
    ['login'],
    useAxios<LoginMutation, LoginMutationVariables>(LoginDocument),
    options
  );
export const RefreshDocument = `
    mutation refresh($refreshToken: String!) {
  auth {
    token(refreshToken: $refreshToken) {
      token {
        access
        refresh
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useRefreshMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<RefreshMutation, TError, RefreshMutationVariables, TContext>
) =>
  useMutation<RefreshMutation, TError, RefreshMutationVariables, TContext>(
    ['refresh'],
    useAxios<RefreshMutation, RefreshMutationVariables>(RefreshDocument),
    options
  );
export const ResetPasswordDocument = `
    mutation resetPassword($userId: String!, $newPassword: String!) {
  user {
    resetPassword(data: {userId: $userId, newPassword: $newPassword}) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useResetPasswordMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ResetPasswordMutation,
    TError,
    ResetPasswordMutationVariables,
    TContext
  >
) =>
  useMutation<ResetPasswordMutation, TError, ResetPasswordMutationVariables, TContext>(
    ['resetPassword'],
    useAxios<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument),
    options
  );
export const AddNewAccountInCoaDocument = `
    mutation addNewAccountInCOA($data: AddCOAAccountInput!) {
  settings {
    chartsOfAccount {
      account {
        add(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddNewAccountInCoaMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddNewAccountInCoaMutation,
    TError,
    AddNewAccountInCoaMutationVariables,
    TContext
  >
) =>
  useMutation<AddNewAccountInCoaMutation, TError, AddNewAccountInCoaMutationVariables, TContext>(
    ['addNewAccountInCOA'],
    useAxios<AddNewAccountInCoaMutation, AddNewAccountInCoaMutationVariables>(
      AddNewAccountInCoaDocument
    ),
    options
  );
export const SetCooperativeDataDocument = `
    mutation setCooperativeData($id: ID!, $data: KymCooperativeFormInput!) {
  members {
    cooperative(id: $id) {
      add(data: $data) {
        recordId
      }
    }
  }
}
    `;
export const useSetCooperativeDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCooperativeDataMutation,
    TError,
    SetCooperativeDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetCooperativeDataMutation, TError, SetCooperativeDataMutationVariables, TContext>(
    ['setCooperativeData'],
    useAxios<SetCooperativeDataMutation, SetCooperativeDataMutationVariables>(
      SetCooperativeDataDocument
    ),
    options
  );
export const SetCoopAccOperatorDataDocument = `
    mutation setCOOPAccOperatorData($id: ID!, $accOperatorId: ID!, $data: KymCoopAccountOperatorDetailsFormInput!) {
  members {
    cooperative(id: $id) {
      accountOperatorDetail {
        Upsert(accOperatorId: $accOperatorId, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCoopAccOperatorDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCoopAccOperatorDataMutation,
    TError,
    SetCoopAccOperatorDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetCoopAccOperatorDataMutation,
    TError,
    SetCoopAccOperatorDataMutationVariables,
    TContext
  >(
    ['setCOOPAccOperatorData'],
    useAxios<SetCoopAccOperatorDataMutation, SetCoopAccOperatorDataMutationVariables>(
      SetCoopAccOperatorDataDocument
    ),
    options
  );
export const DeleteCoopAccOperatorDataDocument = `
    mutation deleteCOOPAccOperatorData($id: ID!, $accOperatorId: ID!) {
  members {
    cooperative(id: $id) {
      accountOperatorDetail {
        Delete(accOperatorId: $accOperatorId) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteCoopAccOperatorDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCoopAccOperatorDataMutation,
    TError,
    DeleteCoopAccOperatorDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteCoopAccOperatorDataMutation,
    TError,
    DeleteCoopAccOperatorDataMutationVariables,
    TContext
  >(
    ['deleteCOOPAccOperatorData'],
    useAxios<DeleteCoopAccOperatorDataMutation, DeleteCoopAccOperatorDataMutationVariables>(
      DeleteCoopAccOperatorDataDocument
    ),
    options
  );
export const SetCooPdirectorDataDocument = `
    mutation setCOOPdirectorData($id: ID!, $dirId: ID!, $data: KymCoopDirectorDetailsFormInput!) {
  members {
    cooperative(id: $id) {
      directorDetails {
        Upsert(dirId: $dirId, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCooPdirectorDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCooPdirectorDataMutation,
    TError,
    SetCooPdirectorDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetCooPdirectorDataMutation, TError, SetCooPdirectorDataMutationVariables, TContext>(
    ['setCOOPdirectorData'],
    useAxios<SetCooPdirectorDataMutation, SetCooPdirectorDataMutationVariables>(
      SetCooPdirectorDataDocument
    ),
    options
  );
export const DeleteCooPdirectorDataDocument = `
    mutation deleteCOOPdirectorData($id: ID!, $dirId: ID!) {
  members {
    cooperative(id: $id) {
      directorDetails {
        Delete(dirId: $dirId) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteCooPdirectorDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCooPdirectorDataMutation,
    TError,
    DeleteCooPdirectorDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteCooPdirectorDataMutation,
    TError,
    DeleteCooPdirectorDataMutationVariables,
    TContext
  >(
    ['deleteCOOPdirectorData'],
    useAxios<DeleteCooPdirectorDataMutation, DeleteCooPdirectorDataMutationVariables>(
      DeleteCooPdirectorDataDocument
    ),
    options
  );
export const SetCooperativeUnionInstitutionDataDocument = `
    mutation setCooperativeUnionInstitutionData($id: ID!, $data: CoopUnionInstitutionInformationInput) {
  members {
    cooperativeUnion {
      add(id: $id) {
        institutionInformation(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCooperativeUnionInstitutionDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetCooperativeUnionInstitutionDataMutation,
    TError,
    SetCooperativeUnionInstitutionDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetCooperativeUnionInstitutionDataMutation,
    TError,
    SetCooperativeUnionInstitutionDataMutationVariables,
    TContext
  >(
    ['setCooperativeUnionInstitutionData'],
    useAxios<
      SetCooperativeUnionInstitutionDataMutation,
      SetCooperativeUnionInstitutionDataMutationVariables
    >(SetCooperativeUnionInstitutionDataDocument),
    options
  );
export const SetPersonnelDetailsDocument = `
    mutation setPersonnelDetails($id: ID!, $personnelId: String, $sectionType: CooperativeUnionPersonnelSection!, $data: CoopUnionPersonnelInput) {
  members {
    cooperativeUnion {
      add(id: $id) {
        personnelDetails(recordId: $personnelId, sectionType: $sectionType, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetPersonnelDetailsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetPersonnelDetailsMutation,
    TError,
    SetPersonnelDetailsMutationVariables,
    TContext
  >
) =>
  useMutation<SetPersonnelDetailsMutation, TError, SetPersonnelDetailsMutationVariables, TContext>(
    ['setPersonnelDetails'],
    useAxios<SetPersonnelDetailsMutation, SetPersonnelDetailsMutationVariables>(
      SetPersonnelDetailsDocument
    ),
    options
  );
export const DeletePersonnelDetailsDocument = `
    mutation deletePersonnelDetails($personnelId: ID!) {
  members {
    cooperativeUnion {
      deletePersonnel(id: $personnelId) {
        recordId
      }
    }
  }
}
    `;
export const useDeletePersonnelDetailsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeletePersonnelDetailsMutation,
    TError,
    DeletePersonnelDetailsMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeletePersonnelDetailsMutation,
    TError,
    DeletePersonnelDetailsMutationVariables,
    TContext
  >(
    ['deletePersonnelDetails'],
    useAxios<DeletePersonnelDetailsMutation, DeletePersonnelDetailsMutationVariables>(
      DeletePersonnelDetailsDocument
    ),
    options
  );
export const SetEconomicDetailsDataDocument = `
    mutation setEconomicDetailsData($id: ID!, $data: CoopUnionEconomicDetailsInput) {
  members {
    cooperativeUnion {
      add(id: $id) {
        economicDetails(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetEconomicDetailsDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEconomicDetailsDataMutation,
    TError,
    SetEconomicDetailsDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetEconomicDetailsDataMutation,
    TError,
    SetEconomicDetailsDataMutationVariables,
    TContext
  >(
    ['setEconomicDetailsData'],
    useAxios<SetEconomicDetailsDataMutation, SetEconomicDetailsDataMutationVariables>(
      SetEconomicDetailsDataDocument
    ),
    options
  );
export const SetDeclarationDataDocument = `
    mutation setDeclarationData($id: ID!, $data: CoopUnionDeclarationInput) {
  members {
    cooperativeUnion {
      add(id: $id) {
        declaration(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetDeclarationDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDeclarationDataMutation,
    TError,
    SetDeclarationDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetDeclarationDataMutation, TError, SetDeclarationDataMutationVariables, TContext>(
    ['setDeclarationData'],
    useAxios<SetDeclarationDataMutation, SetDeclarationDataMutationVariables>(
      SetDeclarationDataDocument
    ),
    options
  );
export const SendLoanApplicationForApprovalDocument = `
    mutation sendLoanApplicationForApproval($id: ID!, $data: LoanAccountInput!) {
  loanAccount {
    add(id: $id, data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSendLoanApplicationForApprovalMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SendLoanApplicationForApprovalMutation,
    TError,
    SendLoanApplicationForApprovalMutationVariables,
    TContext
  >
) =>
  useMutation<
    SendLoanApplicationForApprovalMutation,
    TError,
    SendLoanApplicationForApprovalMutationVariables,
    TContext
  >(
    ['sendLoanApplicationForApproval'],
    useAxios<
      SendLoanApplicationForApprovalMutation,
      SendLoanApplicationForApprovalMutationVariables
    >(SendLoanApplicationForApprovalDocument),
    options
  );
export const SetDisburseLoanDocument = `
    mutation setDisburseLoan($loanAccountId: ID!, $data: LoanDisbursementInput!) {
  loanAccount {
    disburse(loanAccount: $loanAccountId, data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDisburseLoanMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDisburseLoanMutation,
    TError,
    SetDisburseLoanMutationVariables,
    TContext
  >
) =>
  useMutation<SetDisburseLoanMutation, TError, SetDisburseLoanMutationVariables, TContext>(
    ['setDisburseLoan'],
    useAxios<SetDisburseLoanMutation, SetDisburseLoanMutationVariables>(SetDisburseLoanDocument),
    options
  );
export const ApproveLoanAccountDocument = `
    mutation approveLoanAccount($id: String!, $action: LoanApproveOrCancel!, $remarks: String) {
  loanAccount {
    approveOrCancel(loanAccountId: $id, action: $action, remarks: $remarks) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useApproveLoanAccountMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApproveLoanAccountMutation,
    TError,
    ApproveLoanAccountMutationVariables,
    TContext
  >
) =>
  useMutation<ApproveLoanAccountMutation, TError, ApproveLoanAccountMutationVariables, TContext>(
    ['approveLoanAccount'],
    useAxios<ApproveLoanAccountMutation, ApproveLoanAccountMutationVariables>(
      ApproveLoanAccountDocument
    ),
    options
  );
export const SetLoanRepaymentDocument = `
    mutation setLoanRepayment($data: LoanRepaymentInput) {
  loanAccount {
    repayment(data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanRepaymentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanRepaymentMutation,
    TError,
    SetLoanRepaymentMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanRepaymentMutation, TError, SetLoanRepaymentMutationVariables, TContext>(
    ['setLoanRepayment'],
    useAxios<SetLoanRepaymentMutation, SetLoanRepaymentMutationVariables>(SetLoanRepaymentDocument),
    options
  );
export const GetNewIdDocument = `
    mutation getNewId($idType: ID_TYPE) {
  newId(idType: $idType)
}
    `;
export const useGetNewIdMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>
) =>
  useMutation<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>(
    ['getNewId'],
    useAxios<GetNewIdMutation, GetNewIdMutationVariables>(GetNewIdDocument),
    options
  );
export const SetMemberDataDocument = `
    mutation setMemberData($id: ID!, $data: KymIndMemberInput!) {
  members {
    individual(id: $id) {
      add(data: $data) {
        recordId
        error {
          ... on KymIndAddInvalidDataError {
            error {
              sectionName
              errors
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetMemberDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMemberDataMutation,
    TError,
    SetMemberDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetMemberDataMutation, TError, SetMemberDataMutationVariables, TContext>(
    ['setMemberData'],
    useAxios<SetMemberDataMutation, SetMemberDataMutationVariables>(SetMemberDataDocument),
    options
  );
export const SetMemberFamilyDetailsDocument = `
    mutation setMemberFamilyDetails($id: ID!, $data: KYMIndFamilyMemberInput!) {
  members {
    individual(id: $id) {
      familyMember {
        upsert(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetMemberFamilyDetailsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMemberFamilyDetailsMutation,
    TError,
    SetMemberFamilyDetailsMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetMemberFamilyDetailsMutation,
    TError,
    SetMemberFamilyDetailsMutationVariables,
    TContext
  >(
    ['setMemberFamilyDetails'],
    useAxios<SetMemberFamilyDetailsMutation, SetMemberFamilyDetailsMutationVariables>(
      SetMemberFamilyDetailsDocument
    ),
    options
  );
export const DeleteMemberFamilyDetailsDocument = `
    mutation deleteMemberFamilyDetails($memberId: ID!, $id: ID!) {
  members {
    individual(id: $memberId) {
      familyMember {
        delete(id: $id) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteMemberFamilyDetailsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteMemberFamilyDetailsMutation,
    TError,
    DeleteMemberFamilyDetailsMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteMemberFamilyDetailsMutation,
    TError,
    DeleteMemberFamilyDetailsMutationVariables,
    TContext
  >(
    ['deleteMemberFamilyDetails'],
    useAxios<DeleteMemberFamilyDetailsMutation, DeleteMemberFamilyDetailsMutationVariables>(
      DeleteMemberFamilyDetailsDocument
    ),
    options
  );
export const SetMemberOccupationDocument = `
    mutation setMemberOccupation($id: ID!, $isSpouse: Boolean!, $data: KYMIndOccupationInput!) {
  members {
    individual(id: $id) {
      occupation {
        upsert(isSpouse: $isSpouse, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetMemberOccupationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMemberOccupationMutation,
    TError,
    SetMemberOccupationMutationVariables,
    TContext
  >
) =>
  useMutation<SetMemberOccupationMutation, TError, SetMemberOccupationMutationVariables, TContext>(
    ['setMemberOccupation'],
    useAxios<SetMemberOccupationMutation, SetMemberOccupationMutationVariables>(
      SetMemberOccupationDocument
    ),
    options
  );
export const DeleteMemberOccupationDocument = `
    mutation deleteMemberOccupation($memberId: ID!, $id: ID!) {
  members {
    individual(id: $memberId) {
      occupation {
        delete(id: $id) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteMemberOccupationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteMemberOccupationMutation,
    TError,
    DeleteMemberOccupationMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteMemberOccupationMutation,
    TError,
    DeleteMemberOccupationMutationVariables,
    TContext
  >(
    ['deleteMemberOccupation'],
    useAxios<DeleteMemberOccupationMutation, DeleteMemberOccupationMutationVariables>(
      DeleteMemberOccupationDocument
    ),
    options
  );
export const SetMemberIncomeSourceDocument = `
    mutation setMemberIncomeSource($id: ID!, $data: KYMIndIncomeSourceInput!) {
  members {
    individual(id: $id) {
      incomeSource {
        upsert(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetMemberIncomeSourceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetMemberIncomeSourceMutation,
    TError,
    SetMemberIncomeSourceMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetMemberIncomeSourceMutation,
    TError,
    SetMemberIncomeSourceMutationVariables,
    TContext
  >(
    ['setMemberIncomeSource'],
    useAxios<SetMemberIncomeSourceMutation, SetMemberIncomeSourceMutationVariables>(
      SetMemberIncomeSourceDocument
    ),
    options
  );
export const DeleteMemberIncomeSourceDocument = `
    mutation deleteMemberIncomeSource($memberId: ID!, $id: ID!) {
  members {
    individual(id: $memberId) {
      incomeSource {
        delete(id: $id) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteMemberIncomeSourceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteMemberIncomeSourceMutation,
    TError,
    DeleteMemberIncomeSourceMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteMemberIncomeSourceMutation,
    TError,
    DeleteMemberIncomeSourceMutationVariables,
    TContext
  >(
    ['deleteMemberIncomeSource'],
    useAxios<DeleteMemberIncomeSourceMutation, DeleteMemberIncomeSourceMutationVariables>(
      DeleteMemberIncomeSourceDocument
    ),
    options
  );
export const SetKymCooperativeDataDocument = `
    mutation setKymCooperativeData($id: ID!, $data: KymCooperativeFormInput!) {
  members {
    cooperative(id: $id) {
      add(data: $data) {
        recordId
      }
    }
  }
}
    `;
export const useSetKymCooperativeDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymCooperativeDataMutation,
    TError,
    SetKymCooperativeDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetKymCooperativeDataMutation,
    TError,
    SetKymCooperativeDataMutationVariables,
    TContext
  >(
    ['setKymCooperativeData'],
    useAxios<SetKymCooperativeDataMutation, SetKymCooperativeDataMutationVariables>(
      SetKymCooperativeDataDocument
    ),
    options
  );
export const SetKymDocumentDataDocument = `
    mutation setKYMDocumentData($memberId: String!, $fieldId: String!, $identifiers: [String!]!) {
  document {
    KYMUpsert(memberId: $memberId, fieldId: $fieldId, identifiers: $identifiers) {
      recordId
    }
  }
}
    `;
export const useSetKymDocumentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymDocumentDataMutation,
    TError,
    SetKymDocumentDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetKymDocumentDataMutation, TError, SetKymDocumentDataMutationVariables, TContext>(
    ['setKYMDocumentData'],
    useAxios<SetKymDocumentDataMutation, SetKymDocumentDataMutationVariables>(
      SetKymDocumentDataDocument
    ),
    options
  );
export const SetKymIndividualIdentificationDataDocument = `
    mutation setKymIndividualIdentificationData($id: ID!, $data: KYMIndIdentificationInput!) {
  members {
    individual(id: $id) {
      identification {
        upsert(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetKymIndividualIdentificationDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetKymIndividualIdentificationDataMutation,
    TError,
    SetKymIndividualIdentificationDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetKymIndividualIdentificationDataMutation,
    TError,
    SetKymIndividualIdentificationDataMutationVariables,
    TContext
  >(
    ['setKymIndividualIdentificationData'],
    useAxios<
      SetKymIndividualIdentificationDataMutation,
      SetKymIndividualIdentificationDataMutationVariables
    >(SetKymIndividualIdentificationDataDocument),
    options
  );
export const SetOfficialUseDocument = `
    mutation setOfficialUse($id: ID!, $isStaff: Boolean, $checkSanction: Boolean, $checkNegative: Boolean, $riskCategory: OfficialUseRiskCategory, $docCollectedAndVerified: Boolean, $acceptableAddressDoc: Boolean) {
  members {
    officialUse(
      data: {id: $id, isStaff: $isStaff, checkSanction: $checkSanction, checkNegative: $checkNegative, riskCategory: $riskCategory, docCollectedAndVerified: $docCollectedAndVerified, acceptableAddressDoc: $acceptableAddressDoc}
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetOfficialUseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetOfficialUseMutation,
    TError,
    SetOfficialUseMutationVariables,
    TContext
  >
) =>
  useMutation<SetOfficialUseMutation, TError, SetOfficialUseMutationVariables, TContext>(
    ['setOfficialUse'],
    useAxios<SetOfficialUseMutation, SetOfficialUseMutationVariables>(SetOfficialUseDocument),
    options
  );
export const SetInstitutionDataDocument = `
    mutation setInstitutionData($id: ID!, $data: KymInsInput!) {
  members {
    institution(id: $id) {
      add(data: $data) {
        recordId
        error {
          ... on KymIndAddInvalidDataError {
            error {
              sectionName
              errors
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetInstitutionDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetInstitutionDataMutation,
    TError,
    SetInstitutionDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetInstitutionDataMutation, TError, SetInstitutionDataMutationVariables, TContext>(
    ['setInstitutionData'],
    useAxios<SetInstitutionDataMutation, SetInstitutionDataMutationVariables>(
      SetInstitutionDataDocument
    ),
    options
  );
export const SetSisterConcernsDocument = `
    mutation setSisterConcerns($id: ID!, $sis: ID!, $data: KymInsSisterConcernInput!) {
  members {
    institution(id: $id) {
      sisterConcern {
        Upsert(sisterConcernId: $sis, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetSisterConcernsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSisterConcernsMutation,
    TError,
    SetSisterConcernsMutationVariables,
    TContext
  >
) =>
  useMutation<SetSisterConcernsMutation, TError, SetSisterConcernsMutationVariables, TContext>(
    ['setSisterConcerns'],
    useAxios<SetSisterConcernsMutation, SetSisterConcernsMutationVariables>(
      SetSisterConcernsDocument
    ),
    options
  );
export const DeleteSisterConcernsDocument = `
    mutation deleteSisterConcerns($insId: ID!, $sis: ID!) {
  members {
    institution(id: $insId) {
      sisterConcern {
        Delete(sisterConcernId: $sis) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteSisterConcernsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteSisterConcernsMutation,
    TError,
    DeleteSisterConcernsMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteSisterConcernsMutation,
    TError,
    DeleteSisterConcernsMutationVariables,
    TContext
  >(
    ['deleteSisterConcerns'],
    useAxios<DeleteSisterConcernsMutation, DeleteSisterConcernsMutationVariables>(
      DeleteSisterConcernsDocument
    ),
    options
  );
export const SetAddDirectorInstitutionDocument = `
    mutation setAddDirectorInstitution($id: ID!, $dir: ID!, $data: KymInsDirectorInput!) {
  members {
    institution(id: $id) {
      director {
        Upsert(directorId: $dir, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetAddDirectorInstitutionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAddDirectorInstitutionMutation,
    TError,
    SetAddDirectorInstitutionMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAddDirectorInstitutionMutation,
    TError,
    SetAddDirectorInstitutionMutationVariables,
    TContext
  >(
    ['setAddDirectorInstitution'],
    useAxios<SetAddDirectorInstitutionMutation, SetAddDirectorInstitutionMutationVariables>(
      SetAddDirectorInstitutionDocument
    ),
    options
  );
export const DeleteDirectorInstitutionDocument = `
    mutation deleteDirectorInstitution($insId: ID!, $dir: ID!) {
  members {
    institution(id: $insId) {
      director {
        Delete(directorId: $dir) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteDirectorInstitutionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteDirectorInstitutionMutation,
    TError,
    DeleteDirectorInstitutionMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteDirectorInstitutionMutation,
    TError,
    DeleteDirectorInstitutionMutationVariables,
    TContext
  >(
    ['deleteDirectorInstitution'],
    useAxios<DeleteDirectorInstitutionMutation, DeleteDirectorInstitutionMutationVariables>(
      DeleteDirectorInstitutionDocument
    ),
    options
  );
export const SetAddAccountOperatorInstitutionDocument = `
    mutation setAddAccountOperatorInstitution($id: ID!, $acc: ID!, $data: KymInsAccountOperatorInput!) {
  members {
    institution(id: $id) {
      accountOperator {
        Upsert(operatorId: $acc, data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetAddAccountOperatorInstitutionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAddAccountOperatorInstitutionMutation,
    TError,
    SetAddAccountOperatorInstitutionMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAddAccountOperatorInstitutionMutation,
    TError,
    SetAddAccountOperatorInstitutionMutationVariables,
    TContext
  >(
    ['setAddAccountOperatorInstitution'],
    useAxios<
      SetAddAccountOperatorInstitutionMutation,
      SetAddAccountOperatorInstitutionMutationVariables
    >(SetAddAccountOperatorInstitutionDocument),
    options
  );
export const DeleteAccountOperatorInstitutionDocument = `
    mutation deleteAccountOperatorInstitution($insId: ID!, $acc: ID!) {
  members {
    institution(id: $insId) {
      accountOperator {
        Delete(operatorId: $acc) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteAccountOperatorInstitutionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteAccountOperatorInstitutionMutation,
    TError,
    DeleteAccountOperatorInstitutionMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteAccountOperatorInstitutionMutation,
    TError,
    DeleteAccountOperatorInstitutionMutationVariables,
    TContext
  >(
    ['deleteAccountOperatorInstitution'],
    useAxios<
      DeleteAccountOperatorInstitutionMutation,
      DeleteAccountOperatorInstitutionMutationVariables
    >(DeleteAccountOperatorInstitutionDocument),
    options
  );
export const SetOrganizationDataDocument = `
    mutation setOrganizationData($data: OrganizationInput!) {
  settings {
    general {
      organization {
        initialSetup(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetOrganizationDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetOrganizationDataMutation,
    TError,
    SetOrganizationDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetOrganizationDataMutation, TError, SetOrganizationDataMutationVariables, TContext>(
    ['setOrganizationData'],
    useAxios<SetOrganizationDataMutation, SetOrganizationDataMutationVariables>(
      SetOrganizationDataDocument
    ),
    options
  );
export const GetPreSignedUrlDocument = `
    mutation getPreSignedUrl($contentType: String) {
  presignedUrl {
    upload(contentType: $contentType) {
      filename
      getUrl
      putUrl
    }
  }
}
    `;
export const useGetPreSignedUrlMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    GetPreSignedUrlMutation,
    TError,
    GetPreSignedUrlMutationVariables,
    TContext
  >
) =>
  useMutation<GetPreSignedUrlMutation, TError, GetPreSignedUrlMutationVariables, TContext>(
    ['getPreSignedUrl'],
    useAxios<GetPreSignedUrlMutation, GetPreSignedUrlMutationVariables>(GetPreSignedUrlDocument),
    options
  );
export const SaveNewReportDocument = `
    mutation saveNewReport($data: StatementReportInput!) {
  report {
    statementReport(data: $data) {
      member {
        id
        name
        address {
          state
          district
          locality
          localGovernment
        }
      }
      statement {
        ... on ShareStatementReport {
          shareStatement {
            date
            particular
            noOfShares
            returnAmountDr
            purchaseAmountCr
            balanceSheet
          }
          totals {
            totalShares
            totalDr
            totalCr
            totalBalanceSheet
          }
        }
      }
    }
  }
}
    `;
export const useSaveNewReportMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SaveNewReportMutation,
    TError,
    SaveNewReportMutationVariables,
    TContext
  >
) =>
  useMutation<SaveNewReportMutation, TError, SaveNewReportMutationVariables, TContext>(
    ['saveNewReport'],
    useAxios<SaveNewReportMutation, SaveNewReportMutationVariables>(SaveNewReportDocument),
    options
  );
export const SaveAlternativeChargesDocument = `
    mutation saveAlternativeCharges($data: [AlternativeChannelChargesInput]) {
  settings {
    general {
      alternativeChannel {
        feesAndCharges(data: $data) {
          error {
            ...MutationError
          }
          record {
            id
            amount
            ledgerId
            serviceType
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSaveAlternativeChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SaveAlternativeChargesMutation,
    TError,
    SaveAlternativeChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SaveAlternativeChargesMutation,
    TError,
    SaveAlternativeChargesMutationVariables,
    TContext
  >(
    ['saveAlternativeCharges'],
    useAxios<SaveAlternativeChargesMutation, SaveAlternativeChargesMutationVariables>(
      SaveAlternativeChargesDocument
    ),
    options
  );
export const ActivateServiceDocument = `
    mutation activateService($data: AlternativeChannelServiceActivationInput) {
  alternativeChannel {
    serviceActivation(data: $data) {
      error {
        ...MutationError
      }
      recordId
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useActivateServiceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ActivateServiceMutation,
    TError,
    ActivateServiceMutationVariables,
    TContext
  >
) =>
  useMutation<ActivateServiceMutation, TError, ActivateServiceMutationVariables, TContext>(
    ['activateService'],
    useAxios<ActivateServiceMutation, ActivateServiceMutationVariables>(ActivateServiceDocument),
    options
  );
export const SetBranchDataDocument = `
    mutation setBranchData($id: ID!, $data: BranchInput!) {
  settings {
    general {
      branch {
        add(id: $id, data: $data) {
          record {
            id
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetBranchDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetBranchDataMutation,
    TError,
    SetBranchDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetBranchDataMutation, TError, SetBranchDataMutationVariables, TContext>(
    ['setBranchData'],
    useAxios<SetBranchDataMutation, SetBranchDataMutationVariables>(SetBranchDataDocument),
    options
  );
export const SetDepositProductDocument = `
    mutation setDepositProduct($id: ID!, $data: DepositProductInput) {
  settings {
    general {
      depositProduct {
        add(id: $id, data: $data) {
          recordId
          record {
            id
            productCode
            productName
            createdDate
            interest
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetDepositProductMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositProductMutation,
    TError,
    SetDepositProductMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositProductMutation, TError, SetDepositProductMutationVariables, TContext>(
    ['setDepositProduct'],
    useAxios<SetDepositProductMutation, SetDepositProductMutationVariables>(
      SetDepositProductDocument
    ),
    options
  );
export const SetDepositIroDocument = `
    mutation setDepositIro($data: DepositIroInput) {
  settings {
    general {
      deposit {
        ... on DepositSettingsMutation {
          iroSetup(data: $data) {
            recordId
            record {
              id
              iroName
              iroAddress
              iroCode
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetDepositIroMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositIroMutation,
    TError,
    SetDepositIroMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositIroMutation, TError, SetDepositIroMutationVariables, TContext>(
    ['setDepositIro'],
    useAxios<SetDepositIroMutation, SetDepositIroMutationVariables>(SetDepositIroDocument),
    options
  );
export const SetDepositTdsDocument = `
    mutation setDepositTds($data: DepositTdsInput) {
  settings {
    general {
      deposit {
        ... on DepositSettingsMutation {
          tdsSetup(data: $data) {
            recordId
            record {
              id
              individual
              institution
              cooperative
              coopUnion
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetDepositTdsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositTdsMutation,
    TError,
    SetDepositTdsMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositTdsMutation, TError, SetDepositTdsMutationVariables, TContext>(
    ['setDepositTds'],
    useAxios<SetDepositTdsMutation, SetDepositTdsMutationVariables>(SetDepositTdsDocument),
    options
  );
export const SetLoanProductDocument = `
    mutation setLoanProduct($id: ID!, $data: LoanProductInput) {
  settings {
    general {
      loanProducts {
        upsert(id: $id, data: $data) {
          recordId
          record {
            id
            objState
            productName
            productType
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanProductMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanProductMutation,
    TError,
    SetLoanProductMutationVariables,
    TContext
  >
) =>
  useMutation<SetLoanProductMutation, TError, SetLoanProductMutationVariables, TContext>(
    ['setLoanProduct'],
    useAxios<SetLoanProductMutation, SetLoanProductMutationVariables>(SetLoanProductDocument),
    options
  );
export const SetLoanGeneralSettingsDocument = `
    mutation setLoanGeneralSettings($emi: Boolean, $epi: Boolean, $flat: Boolean, $collateralList: [CollateralListInputData]) {
  settings {
    general {
      loan {
        general(
          data: {emi: $emi, epi: $epi, flat: $flat, collateralList: $collateralList}
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanGeneralSettingsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanGeneralSettingsMutation,
    TError,
    SetLoanGeneralSettingsMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanGeneralSettingsMutation,
    TError,
    SetLoanGeneralSettingsMutationVariables,
    TContext
  >(
    ['setLoanGeneralSettings'],
    useAxios<SetLoanGeneralSettingsMutation, SetLoanGeneralSettingsMutationVariables>(
      SetLoanGeneralSettingsDocument
    ),
    options
  );
export const SetLoanInsuranceSchemeDocument = `
    mutation setLoanInsuranceScheme($data: [LoanInsuranceSchemeInput]) {
  settings {
    general {
      loan {
        insuranceScheme(data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetLoanInsuranceSchemeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetLoanInsuranceSchemeMutation,
    TError,
    SetLoanInsuranceSchemeMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetLoanInsuranceSchemeMutation,
    TError,
    SetLoanInsuranceSchemeMutationVariables,
    TContext
  >(
    ['setLoanInsuranceScheme'],
    useAxios<SetLoanInsuranceSchemeMutation, SetLoanInsuranceSchemeMutationVariables>(
      SetLoanInsuranceSchemeDocument
    ),
    options
  );
export const SetProductTypeDocument = `
    mutation setProductType($productType: [LoanProductTypeInput], $productSubType: [LoanProductSubTypeInput]) {
  settings {
    general {
      loan {
        productType(
          data: {productTypes: $productType, productSubTypes: $productSubType}
        ) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetProductTypeMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetProductTypeMutation,
    TError,
    SetProductTypeMutationVariables,
    TContext
  >
) =>
  useMutation<SetProductTypeMutation, TError, SetProductTypeMutationVariables, TContext>(
    ['setProductType'],
    useAxios<SetProductTypeMutation, SetProductTypeMutationVariables>(SetProductTypeDocument),
    options
  );
export const AddGeneralMemberDocument = `
    mutation addGeneralMember($data: GeneralMemberInput!) {
  settings {
    general {
      KYM {
        general {
          generalMember(data: $data) {
            recordId
            error {
              ...MutationError
            }
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddGeneralMemberMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddGeneralMemberMutation,
    TError,
    AddGeneralMemberMutationVariables,
    TContext
  >
) =>
  useMutation<AddGeneralMemberMutation, TError, AddGeneralMemberMutationVariables, TContext>(
    ['addGeneralMember'],
    useAxios<AddGeneralMemberMutation, AddGeneralMemberMutationVariables>(AddGeneralMemberDocument),
    options
  );
export const UpsertNewOptionDocument = `
    mutation upsertNewOption($fieldId: ID!, $data: FormOptionUpsertInput!) {
  settings {
    form {
      option {
        upsert(fieldId: $fieldId, data: $data) {
          recordId
          record {
            id
            name
            enabled
            order
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertNewOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertNewOptionMutation,
    TError,
    UpsertNewOptionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertNewOptionMutation, TError, UpsertNewOptionMutationVariables, TContext>(
    ['upsertNewOption'],
    useAxios<UpsertNewOptionMutation, UpsertNewOptionMutationVariables>(UpsertNewOptionDocument),
    options
  );
export const DeleteOptionDocument = `
    mutation deleteOption($optionId: ID!) {
  settings {
    form {
      option {
        delete(id: $optionId) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteOptionMutation,
    TError,
    DeleteOptionMutationVariables,
    TContext
  >
) =>
  useMutation<DeleteOptionMutation, TError, DeleteOptionMutationVariables, TContext>(
    ['deleteOption'],
    useAxios<DeleteOptionMutation, DeleteOptionMutationVariables>(DeleteOptionDocument),
    options
  );
export const MoveOptionDocument = `
    mutation moveOption($optionId: ID!, $to: Int!) {
  settings {
    form {
      option {
        move(id: $optionId, to: $to) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMoveOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<MoveOptionMutation, TError, MoveOptionMutationVariables, TContext>
) =>
  useMutation<MoveOptionMutation, TError, MoveOptionMutationVariables, TContext>(
    ['moveOption'],
    useAxios<MoveOptionMutation, MoveOptionMutationVariables>(MoveOptionDocument),
    options
  );
export const ToggleFieldOtherOptionDocument = `
    mutation toggleFieldOtherOption($fieldId: ID!, $hasOtherField: Boolean) {
  settings {
    form {
      field {
        update(id: $fieldId, data: {hasOtherField: $hasOtherField}) {
          record {
            name
            hasOtherField
          }
        }
      }
    }
  }
}
    `;
export const useToggleFieldOtherOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ToggleFieldOtherOptionMutation,
    TError,
    ToggleFieldOtherOptionMutationVariables,
    TContext
  >
) =>
  useMutation<
    ToggleFieldOtherOptionMutation,
    TError,
    ToggleFieldOtherOptionMutationVariables,
    TContext
  >(
    ['toggleFieldOtherOption'],
    useAxios<ToggleFieldOtherOptionMutation, ToggleFieldOtherOptionMutationVariables>(
      ToggleFieldOtherOptionDocument
    ),
    options
  );
export const UpsertSectionOptionDocument = `
    mutation upsertSectionOption($sectionId: ID!, $data: FormFieldUpsertInput!) {
  settings {
    form {
      field {
        upsert(sectionId: $sectionId, data: $data) {
          recordId
          record {
            id
            name
            enabled
            fieldType
            order
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertSectionOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertSectionOptionMutation,
    TError,
    UpsertSectionOptionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertSectionOptionMutation, TError, UpsertSectionOptionMutationVariables, TContext>(
    ['upsertSectionOption'],
    useAxios<UpsertSectionOptionMutation, UpsertSectionOptionMutationVariables>(
      UpsertSectionOptionDocument
    ),
    options
  );
export const DeleteFieldDocument = `
    mutation deleteField($fieldId: ID!) {
  settings {
    form {
      field {
        delete(id: $fieldId) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<DeleteFieldMutation, TError, DeleteFieldMutationVariables, TContext>
) =>
  useMutation<DeleteFieldMutation, TError, DeleteFieldMutationVariables, TContext>(
    ['deleteField'],
    useAxios<DeleteFieldMutation, DeleteFieldMutationVariables>(DeleteFieldDocument),
    options
  );
export const MoveFieldDocument = `
    mutation moveField($fieldId: ID!, $to: Int!) {
  settings {
    form {
      field {
        move(id: $fieldId, to: $to) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useMoveFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<MoveFieldMutation, TError, MoveFieldMutationVariables, TContext>
) =>
  useMutation<MoveFieldMutation, TError, MoveFieldMutationVariables, TContext>(
    ['moveField'],
    useAxios<MoveFieldMutation, MoveFieldMutationVariables>(MoveFieldDocument),
    options
  );
export const AddConditionOptionDocument = `
    mutation addConditionOption($fieldId: ID!, $dependsOn: [ID]!) {
  settings {
    form {
      field {
        condition(fieldId: $fieldId, dependsOn: $dependsOn) {
          recordId
          record {
            id
            dependsOn
            name
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddConditionOptionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddConditionOptionMutation,
    TError,
    AddConditionOptionMutationVariables,
    TContext
  >
) =>
  useMutation<AddConditionOptionMutation, TError, AddConditionOptionMutationVariables, TContext>(
    ['addConditionOption'],
    useAxios<AddConditionOptionMutation, AddConditionOptionMutationVariables>(
      AddConditionOptionDocument
    ),
    options
  );
export const AddFileSizeToSectionDocument = `
    mutation addFileSizeToSection($sectionId: ID!, $maxSize: Int!) {
  settings {
    form {
      maxSize(id: $sectionId, maxSize: $maxSize) {
        error {
          ...MutationError
        }
        record {
          ... on FormSection {
            id
            name
            maxSize
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddFileSizeToSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddFileSizeToSectionMutation,
    TError,
    AddFileSizeToSectionMutationVariables,
    TContext
  >
) =>
  useMutation<
    AddFileSizeToSectionMutation,
    TError,
    AddFileSizeToSectionMutationVariables,
    TContext
  >(
    ['addFileSizeToSection'],
    useAxios<AddFileSizeToSectionMutation, AddFileSizeToSectionMutationVariables>(
      AddFileSizeToSectionDocument
    ),
    options
  );
export const UpsertCustomSectionDocument = `
    mutation upsertCustomSection($data: FormSectionUpsertInput!) {
  settings {
    form {
      section {
        upsert(data: $data) {
          recordId
          error {
            ...MutationError
          }
          record {
            id
            name
            isCustom
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertCustomSectionMutation,
    TError,
    UpsertCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertCustomSectionMutation, TError, UpsertCustomSectionMutationVariables, TContext>(
    ['upsertCustomSection'],
    useAxios<UpsertCustomSectionMutation, UpsertCustomSectionMutationVariables>(
      UpsertCustomSectionDocument
    ),
    options
  );
export const UpsertCustomFieldDocument = `
    mutation upsertCustomField($data: FormFieldUpsertInput!) {
  settings {
    form {
      field {
        upsert(data: $data) {
          record {
            id
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpsertCustomFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpsertCustomFieldMutation,
    TError,
    UpsertCustomFieldMutationVariables,
    TContext
  >
) =>
  useMutation<UpsertCustomFieldMutation, TError, UpsertCustomFieldMutationVariables, TContext>(
    ['upsertCustomField'],
    useAxios<UpsertCustomFieldMutation, UpsertCustomFieldMutationVariables>(
      UpsertCustomFieldDocument
    ),
    options
  );
export const DeleteCustomSectionDocument = `
    mutation deleteCustomSection($id: ID!) {
  settings {
    form {
      section {
        delete(id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCustomSectionMutation,
    TError,
    DeleteCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<DeleteCustomSectionMutation, TError, DeleteCustomSectionMutationVariables, TContext>(
    ['deleteCustomSection'],
    useAxios<DeleteCustomSectionMutation, DeleteCustomSectionMutationVariables>(
      DeleteCustomSectionDocument
    ),
    options
  );
export const DeleteCustomSectionFieldDocument = `
    mutation deleteCustomSectionField($id: ID!) {
  settings {
    form {
      field {
        delete(id: $id) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteCustomSectionFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteCustomSectionFieldMutation,
    TError,
    DeleteCustomSectionFieldMutationVariables,
    TContext
  >
) =>
  useMutation<
    DeleteCustomSectionFieldMutation,
    TError,
    DeleteCustomSectionFieldMutationVariables,
    TContext
  >(
    ['deleteCustomSectionField'],
    useAxios<DeleteCustomSectionFieldMutation, DeleteCustomSectionFieldMutationVariables>(
      DeleteCustomSectionFieldDocument
    ),
    options
  );
export const UpdateCustomSectionDocument = `
    mutation updateCustomSection($id: ID!, $data: FormSectionUpdateInput!) {
  settings {
    form {
      section {
        update(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
          record {
            id
            name
            isCustom
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useUpdateCustomSectionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateCustomSectionMutation,
    TError,
    UpdateCustomSectionMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateCustomSectionMutation, TError, UpdateCustomSectionMutationVariables, TContext>(
    ['updateCustomSection'],
    useAxios<UpdateCustomSectionMutation, UpdateCustomSectionMutationVariables>(
      UpdateCustomSectionDocument
    ),
    options
  );
export const UpdateCustomSectionFieldDocument = `
    mutation updateCustomSectionField($id: ID!, $data: FormFieldUpdateInput!) {
  settings {
    form {
      field {
        update(id: $id, data: $data) {
          record {
            id
          }
        }
      }
    }
  }
}
    `;
export const useUpdateCustomSectionFieldMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateCustomSectionFieldMutation,
    TError,
    UpdateCustomSectionFieldMutationVariables,
    TContext
  >
) =>
  useMutation<
    UpdateCustomSectionFieldMutation,
    TError,
    UpdateCustomSectionFieldMutationVariables,
    TContext
  >(
    ['updateCustomSectionField'],
    useAxios<UpdateCustomSectionFieldMutation, UpdateCustomSectionFieldMutationVariables>(
      UpdateCustomSectionFieldDocument
    ),
    options
  );
export const UpdateDeclarationDocument = `
    mutation updateDeclaration($data: DeclarationInput!) {
  settings {
    declaration {
      update(data: $data) {
        record {
          content
        }
      }
    }
  }
}
    `;
export const useUpdateDeclarationMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateDeclarationMutation,
    TError,
    UpdateDeclarationMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateDeclarationMutation, TError, UpdateDeclarationMutationVariables, TContext>(
    ['updateDeclaration'],
    useAxios<UpdateDeclarationMutation, UpdateDeclarationMutationVariables>(
      UpdateDeclarationDocument
    ),
    options
  );
export const SetSettingsShareBonusDocument = `
    mutation setSettingsShareBonus($data: ShareBonusSettingsInput) {
  settings {
    general {
      share {
        add {
          bonus(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareBonusMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareBonusMutation,
    TError,
    SetSettingsShareBonusMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareBonusMutation,
    TError,
    SetSettingsShareBonusMutationVariables,
    TContext
  >(
    ['setSettingsShareBonus'],
    useAxios<SetSettingsShareBonusMutation, SetSettingsShareBonusMutationVariables>(
      SetSettingsShareBonusDocument
    ),
    options
  );
export const SetSettingsShareDividendDocument = `
    mutation setSettingsShareDividend($data: ShareDividendSettingsInput) {
  settings {
    general {
      share {
        add {
          dividend(data: $data) {
            dividend {
              distributionCondition
              dividendTransferTreatment
              accountForFractionalDividends
              accountForShareDividends
              organizationFundForDividends
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareDividendMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareDividendMutation,
    TError,
    SetSettingsShareDividendMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareDividendMutation,
    TError,
    SetSettingsShareDividendMutationVariables,
    TContext
  >(
    ['setSettingsShareDividend'],
    useAxios<SetSettingsShareDividendMutation, SetSettingsShareDividendMutationVariables>(
      SetSettingsShareDividendDocument
    ),
    options
  );
export const SetSettingsShareIssueChargesDocument = `
    mutation setSettingsShareIssueCharges($data: ShareIssueChargesInput) {
  settings {
    general {
      share {
        add {
          shareIssueCharges(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareIssueChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareIssueChargesMutation,
    TError,
    SetSettingsShareIssueChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareIssueChargesMutation,
    TError,
    SetSettingsShareIssueChargesMutationVariables,
    TContext
  >(
    ['setSettingsShareIssueCharges'],
    useAxios<SetSettingsShareIssueChargesMutation, SetSettingsShareIssueChargesMutationVariables>(
      SetSettingsShareIssueChargesDocument
    ),
    options
  );
export const SetSettingsShareReturnChargesDocument = `
    mutation setSettingsShareReturnCharges($data: ShareReturnChargesInput) {
  settings {
    general {
      share {
        add {
          shareReturnCharges(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareReturnChargesMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareReturnChargesMutation,
    TError,
    SetSettingsShareReturnChargesMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareReturnChargesMutation,
    TError,
    SetSettingsShareReturnChargesMutationVariables,
    TContext
  >(
    ['setSettingsShareReturnCharges'],
    useAxios<SetSettingsShareReturnChargesMutation, SetSettingsShareReturnChargesMutationVariables>(
      SetSettingsShareReturnChargesDocument
    ),
    options
  );
export const SetSettingsShareGeneralDocument = `
    mutation setSettingsShareGeneral($data: ShareSettingsGeneralInput) {
  settings {
    general {
      share {
        add {
          general(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareGeneralMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareGeneralMutation,
    TError,
    SetSettingsShareGeneralMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareGeneralMutation,
    TError,
    SetSettingsShareGeneralMutationVariables,
    TContext
  >(
    ['setSettingsShareGeneral'],
    useAxios<SetSettingsShareGeneralMutation, SetSettingsShareGeneralMutationVariables>(
      SetSettingsShareGeneralDocument
    ),
    options
  );
export const SetSettingsShareTransferDocument = `
    mutation setSettingsShareTransfer($data: ShareTransferSettingsInput) {
  settings {
    general {
      share {
        add {
          transfer(data: $data) {
            bonus {
              taxPayer
              taxRate
              accountMapping
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetSettingsShareTransferMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsShareTransferMutation,
    TError,
    SetSettingsShareTransferMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetSettingsShareTransferMutation,
    TError,
    SetSettingsShareTransferMutationVariables,
    TContext
  >(
    ['setSettingsShareTransfer'],
    useAxios<SetSettingsShareTransferMutation, SetSettingsShareTransferMutationVariables>(
      SetSettingsShareTransferDocument
    ),
    options
  );
export const SetSettingsUserDataDocument = `
    mutation setSettingsUserData($id: ID!, $data: MyraUserInput) {
  settings {
    myraUser {
      add(id: $id, data: $data) {
        recordId
      }
    }
  }
}
    `;
export const useSetSettingsUserDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetSettingsUserDataMutation,
    TError,
    SetSettingsUserDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetSettingsUserDataMutation, TError, SetSettingsUserDataMutationVariables, TContext>(
    ['setSettingsUserData'],
    useAxios<SetSettingsUserDataMutation, SetSettingsUserDataMutationVariables>(
      SetSettingsUserDataDocument
    ),
    options
  );
export const SetPreferenceDocument = `
    mutation setPreference($id: ID!, $data: UserPreferenceInput!) {
  user {
    preference {
      update(id: $id, data: $data) {
        recordId
        record {
          language
          languageCode
          date
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetPreferenceMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetPreferenceMutation,
    TError,
    SetPreferenceMutationVariables,
    TContext
  >
) =>
  useMutation<SetPreferenceMutation, TError, SetPreferenceMutationVariables, TContext>(
    ['setPreference'],
    useAxios<SetPreferenceMutation, SetPreferenceMutationVariables>(SetPreferenceDocument),
    options
  );
export const SetValuatorDocument = `
    mutation setValuator($id: ID!, $data: ValuatorInput) {
  settings {
    general {
      valuator {
        add(id: $id, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetValuatorMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetValuatorMutation, TError, SetValuatorMutationVariables, TContext>
) =>
  useMutation<SetValuatorMutation, TError, SetValuatorMutationVariables, TContext>(
    ['setValuator'],
    useAxios<SetValuatorMutation, SetValuatorMutationVariables>(SetValuatorDocument),
    options
  );
export const AddSharePurchaseDocument = `
    mutation addSharePurchase($data: SharePurchaseInput!) {
  share {
    purchase(data: $data) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddSharePurchaseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddSharePurchaseMutation,
    TError,
    AddSharePurchaseMutationVariables,
    TContext
  >
) =>
  useMutation<AddSharePurchaseMutation, TError, AddSharePurchaseMutationVariables, TContext>(
    ['addSharePurchase'],
    useAxios<AddSharePurchaseMutation, AddSharePurchaseMutationVariables>(AddSharePurchaseDocument),
    options
  );
export const AddShareReturnDocument = `
    mutation addShareReturn($data: ShareReturnInput!) {
  share {
    return(data: $data) {
      recordId
    }
  }
}
    `;
export const useAddShareReturnMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddShareReturnMutation,
    TError,
    AddShareReturnMutationVariables,
    TContext
  >
) =>
  useMutation<AddShareReturnMutation, TError, AddShareReturnMutationVariables, TContext>(
    ['addShareReturn'],
    useAxios<AddShareReturnMutation, AddShareReturnMutationVariables>(AddShareReturnDocument),
    options
  );
export const SetDepositDataDocument = `
    mutation setDepositData($data: DepositInput!) {
  transaction {
    deposit(data: $data) {
      recordId
    }
  }
}
    `;
export const useSetDepositDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetDepositDataMutation,
    TError,
    SetDepositDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetDepositDataMutation, TError, SetDepositDataMutationVariables, TContext>(
    ['setDepositData'],
    useAxios<SetDepositDataMutation, SetDepositDataMutationVariables>(SetDepositDataDocument),
    options
  );
export const SetWithdrawDataDocument = `
    mutation setWithdrawData($data: WithdrawInput!) {
  transaction {
    withdraw(data: $data) {
      recordId
    }
  }
}
    `;
export const useSetWithdrawDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetWithdrawDataMutation,
    TError,
    SetWithdrawDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetWithdrawDataMutation, TError, SetWithdrawDataMutationVariables, TContext>(
    ['setWithdrawData'],
    useAxios<SetWithdrawDataMutation, SetWithdrawDataMutationVariables>(SetWithdrawDataDocument),
    options
  );
export const SetAccountTransferDataDocument = `
    mutation setAccountTransferData($data: TransferInput!) {
  transaction {
    transfer(data: $data) {
      recordId
    }
  }
}
    `;
export const useSetAccountTransferDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountTransferDataMutation,
    TError,
    SetAccountTransferDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountTransferDataMutation,
    TError,
    SetAccountTransferDataMutationVariables,
    TContext
  >(
    ['setAccountTransferData'],
    useAxios<SetAccountTransferDataMutation, SetAccountTransferDataMutationVariables>(
      SetAccountTransferDataDocument
    ),
    options
  );
export const SetAccountForgiveInstallmentDataDocument = `
    mutation setAccountForgiveInstallmentData($id: ID!, $installmentDates: [String!]!) {
  account {
    forgiveInstallment(id: $id, installmentDate: $installmentDates) {
      recordId
    }
  }
}
    `;
export const useSetAccountForgiveInstallmentDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetAccountForgiveInstallmentDataMutation,
    TError,
    SetAccountForgiveInstallmentDataMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetAccountForgiveInstallmentDataMutation,
    TError,
    SetAccountForgiveInstallmentDataMutationVariables,
    TContext
  >(
    ['setAccountForgiveInstallmentData'],
    useAxios<
      SetAccountForgiveInstallmentDataMutation,
      SetAccountForgiveInstallmentDataMutationVariables
    >(SetAccountForgiveInstallmentDataDocument),
    options
  );
export const SetEndOfDayDataDocument = `
    mutation setEndOfDayData {
  transaction {
    endOfDay
  }
}
    `;
export const useSetEndOfDayDataMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEndOfDayDataMutation,
    TError,
    SetEndOfDayDataMutationVariables,
    TContext
  >
) =>
  useMutation<SetEndOfDayDataMutation, TError, SetEndOfDayDataMutationVariables, TContext>(
    ['setEndOfDayData'],
    useAxios<SetEndOfDayDataMutation, SetEndOfDayDataMutationVariables>(SetEndOfDayDataDocument),
    options
  );
export const GetAccountMemberListDocument = `
    query getAccountMemberList($objState: ObjState, $pagination: Pagination) {
  members {
    list(pagination: $pagination, filter: {objState: $objState}) {
      totalCount
      edges {
        node {
          id
          name
          code
          type
          address {
            state
            district
            localGovernment
            wardNo
            locality
          }
          contact
          createdAt
          dateJoined
        }
        cursor
      }
      pageInfo {
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAccountMemberListQuery = <TData = GetAccountMemberListQuery, TError = unknown>(
  variables?: GetAccountMemberListQueryVariables,
  options?: UseQueryOptions<GetAccountMemberListQuery, TError, TData>
) =>
  useQuery<GetAccountMemberListQuery, TError, TData>(
    variables === undefined ? ['getAccountMemberList'] : ['getAccountMemberList', variables],
    useAxios<GetAccountMemberListQuery, GetAccountMemberListQueryVariables>(
      GetAccountMemberListDocument
    ).bind(null, variables),
    options
  );
export const GetProductListDocument = `
    query getProductList($memberId: ID!) {
  settings {
    general {
      depositProduct {
        getProductList(memberId: $memberId) {
          allowed {
            id
            productName
          }
          notAllowed {
            data {
              id
              productName
            }
            error
          }
        }
      }
    }
  }
}
    `;
export const useGetProductListQuery = <TData = GetProductListQuery, TError = unknown>(
  variables: GetProductListQueryVariables,
  options?: UseQueryOptions<GetProductListQuery, TError, TData>
) =>
  useQuery<GetProductListQuery, TError, TData>(
    ['getProductList', variables],
    useAxios<GetProductListQuery, GetProductListQueryVariables>(GetProductListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAccountOpenProductDetailsDocument = `
    query getAccountOpenProductDetails($id: ID!) {
  settings {
    general {
      depositProduct {
        formState(id: $id) {
          data {
            productName
            nature
            productCode {
              prefix
              initialNo
            }
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            ethnicity
            occupation
            isMandatorySaving
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            depositAmount {
              minAmount
              maxAmount
            }
            depositFrequency
            penalty
            penaltyData {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate
            rebateData {
              dayBeforeInstallmentDate
              noOfInstallment
              rebateAmount
              rebateRate
              rebateLedgerMapping
            }
            tenureUnit
            isTenureApplicable
            minTenureUnitNumber
            maxTenureUnitNumber
            balanceLimit {
              minAmount
              maxAmount
              avgAmount
            }
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              additionalRate
            }
            ladderRate
            ladderRateData {
              type
              amount
              rate
            }
            postingFrequency
            maxPostingFreqDifference
            noOftransactionAllowed
            accountType
            serviceCharge {
              serviceName
              ledgerName
              amount
            }
            accountCloseCharge {
              serviceName
              ledgerName
              amount
            }
            alternativeChannelCharge {
              serviceName
              ledgerName
              amount
            }
            atmCharge {
              serviceName
              ledgerName
              amount
            }
            dormantSetup {
              duration
              condition
            }
            withdrawAmountLimit {
              minAmount
              maxAmount
              avgAmount
            }
            autoOpen
            allowLoan
            chequeIssue
            chequeCharge {
              serviceName
              ledgerName
              amount
            }
            percentageOfDeposit
            alternativeChannels
            atmFacility
            isForMinors
            supportMultiple
            staffProduct
            withdrawRestricted
            specifyWithdrawRestriction
            wealthBuildingProduct
            individualDocuments
            institutionDocuments
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductDetailsQuery = <
  TData = GetAccountOpenProductDetailsQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductDetailsQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductDetailsQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductDetailsQuery, TError, TData>(
    ['getAccountOpenProductDetails', variables],
    useAxios<GetAccountOpenProductDetailsQuery, GetAccountOpenProductDetailsQueryVariables>(
      GetAccountOpenProductDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenEditDataDocument = `
    query getAccountOpenEditData($id: ID!) {
  account {
    formState(id: $id) {
      data {
        memberId
        productId
        accountName
        minor
        tenure
        tenureNumber
        initialDepositAmount
        defaultAmountDepositAccountName
        interestRate
        ceoAuthority
        boardAuthority
        installmentAmount
        depositFrequencyWeekly
        depositFrequencyMonthly
        depositFrequencyDay
        depositFrequencyFrequencyDay
        depositFrequencyDayOfWeek
        serviceCharge {
          name
          amount
        }
        depositFrequencyYearlyMonth
        depositFrequencyYearlyDay
        mobileBanking
        eBanking
        atmFacility
        smsBanking
        chequeFacility
        agentId
      }
    }
  }
}
    `;
export const useGetAccountOpenEditDataQuery = <
  TData = GetAccountOpenEditDataQuery,
  TError = unknown
>(
  variables: GetAccountOpenEditDataQueryVariables,
  options?: UseQueryOptions<GetAccountOpenEditDataQuery, TError, TData>
) =>
  useQuery<GetAccountOpenEditDataQuery, TError, TData>(
    ['getAccountOpenEditData', variables],
    useAxios<GetAccountOpenEditDataQuery, GetAccountOpenEditDataQueryVariables>(
      GetAccountOpenEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTableListDocument = `
    query getAccountTableList($paginate: Pagination, $filter: DepositLoanAccountSearchFilter) {
  account {
    list(paginate: $paginate, filter: $filter) {
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      edges {
        node {
          id
          objState
          createdAt
          accountName
          createdBy {
            id
          }
          modifiedAt
          modifiedBy {
            id
          }
          installmentAmount
          balance
          accountOpenedDate
          lastTransactionDate
          accountExpiryDate
          member {
            id
            name
            address {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            contact
            dateJoined
          }
          overDrawnBalance
          product {
            id
            productCode
            productName
            nature
            minimumBalance
            isMandatorySaving
            withdrawRestricted
          }
          dues {
            fine
            totalDue
            dueInstallments
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountTableListQuery = <TData = GetAccountTableListQuery, TError = unknown>(
  variables?: GetAccountTableListQueryVariables,
  options?: UseQueryOptions<GetAccountTableListQuery, TError, TData>
) =>
  useQuery<GetAccountTableListQuery, TError, TData>(
    variables === undefined ? ['getAccountTableList'] : ['getAccountTableList', variables],
    useAxios<GetAccountTableListQuery, GetAccountTableListQueryVariables>(
      GetAccountTableListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountDocumentsListDocument = `
    query getAccountDocumentsList($subscriptionId: String!) {
  document {
    listSubscriptionDocuments(subscriptionId: $subscriptionId) {
      data {
        fieldId
        docData {
          identifier
          url
        }
      }
    }
  }
}
    `;
export const useGetAccountDocumentsListQuery = <
  TData = GetAccountDocumentsListQuery,
  TError = unknown
>(
  variables: GetAccountDocumentsListQueryVariables,
  options?: UseQueryOptions<GetAccountDocumentsListQuery, TError, TData>
) =>
  useQuery<GetAccountDocumentsListQuery, TError, TData>(
    ['getAccountDocumentsList', variables],
    useAxios<GetAccountDocumentsListQuery, GetAccountDocumentsListQueryVariables>(
      GetAccountDocumentsListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenProductCriteriaDocument = `
    query getAccountOpenProductCriteria($productId: ID!) {
  settings {
    general {
      depositProduct {
        getProductCriteria(productId: $productId) {
          data {
            gender
            minAge
            maxAge
            ethnicity
            educationQualification
            maritalStatus
            foreignEmployment
            occupation
            institutionType
            cooperativeUnion
            cooperativeType
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductCriteriaQuery = <
  TData = GetAccountOpenProductCriteriaQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductCriteriaQuery, TError, TData>(
    ['getAccountOpenProductCriteria', variables],
    useAxios<GetAccountOpenProductCriteriaQuery, GetAccountOpenProductCriteriaQueryVariables>(
      GetAccountOpenProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenProductPenaltyDocument = `
    query getAccountOpenProductPenalty($productId: ID!) {
  settings {
    general {
      depositProduct {
        getPenaltyRebateInfo(productId: $productId) {
          data {
            penalty {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate {
              dayBeforeInstallmentDate
              rebateRate
              rebateAmount
              rebateLedgerMapping
              noOfInstallment
            }
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOpenProductPenaltyQuery = <
  TData = GetAccountOpenProductPenaltyQuery,
  TError = unknown
>(
  variables: GetAccountOpenProductPenaltyQueryVariables,
  options?: UseQueryOptions<GetAccountOpenProductPenaltyQuery, TError, TData>
) =>
  useQuery<GetAccountOpenProductPenaltyQuery, TError, TData>(
    ['getAccountOpenProductPenalty', variables],
    useAxios<GetAccountOpenProductPenaltyQuery, GetAccountOpenProductPenaltyQueryVariables>(
      GetAccountOpenProductPenaltyDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOpenMinorListDocument = `
    query getAccountOpenMinorList($memberId: ID!) {
  account {
    listMinors(memberId: $memberId) {
      data {
        fullName
        familyMemberId
      }
    }
  }
}
    `;
export const useGetAccountOpenMinorListQuery = <
  TData = GetAccountOpenMinorListQuery,
  TError = unknown
>(
  variables: GetAccountOpenMinorListQueryVariables,
  options?: UseQueryOptions<GetAccountOpenMinorListQuery, TError, TData>
) =>
  useQuery<GetAccountOpenMinorListQuery, TError, TData>(
    ['getAccountOpenMinorList', variables],
    useAxios<GetAccountOpenMinorListQuery, GetAccountOpenMinorListQueryVariables>(
      GetAccountOpenMinorListDocument
    ).bind(null, variables),
    options
  );
export const AllAdministrationDocument = `
    query allAdministration {
  administration {
    all {
      id
      name
      districts {
        id
        name
        municipalities {
          id
          name
          wards
        }
      }
    }
  }
}
    `;
export const useAllAdministrationQuery = <TData = AllAdministrationQuery, TError = unknown>(
  variables?: AllAdministrationQueryVariables,
  options?: UseQueryOptions<AllAdministrationQuery, TError, TData>
) =>
  useQuery<AllAdministrationQuery, TError, TData>(
    variables === undefined ? ['allAdministration'] : ['allAdministration', variables],
    useAxios<AllAdministrationQuery, AllAdministrationQueryVariables>(
      AllAdministrationDocument
    ).bind(null, variables),
    options
  );
export const GetAgentListDataDocument = `
    query getAgentListData($filter: AccountTransactionFilter, $pagination: Pagination) {
  transaction {
    listAgent(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          agentName
          phoneNo
          assignedMember
          profilePicUrl
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAgentListDataQuery = <TData = GetAgentListDataQuery, TError = unknown>(
  variables?: GetAgentListDataQueryVariables,
  options?: UseQueryOptions<GetAgentListDataQuery, TError, TData>
) =>
  useQuery<GetAgentListDataQuery, TError, TData>(
    variables === undefined ? ['getAgentListData'] : ['getAgentListData', variables],
    useAxios<GetAgentListDataQuery, GetAgentListDataQueryVariables>(GetAgentListDataDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAgentDetailDataDocument = `
    query getAgentDetailData($id: ID!) {
  transaction {
    agentDetail(id: $id) {
      data {
        id
        name
        branch
        totalMembers
        profilePicUrl
      }
    }
  }
}
    `;
export const useGetAgentDetailDataQuery = <TData = GetAgentDetailDataQuery, TError = unknown>(
  variables: GetAgentDetailDataQueryVariables,
  options?: UseQueryOptions<GetAgentDetailDataQuery, TError, TData>
) =>
  useQuery<GetAgentDetailDataQuery, TError, TData>(
    ['getAgentDetailData', variables],
    useAxios<GetAgentDetailDataQuery, GetAgentDetailDataQueryVariables>(
      GetAgentDetailDataDocument
    ).bind(null, variables),
    options
  );
export const GetAgentAssignedMemberListDataDocument = `
    query getAgentAssignedMemberListData($filter: AssignedMemberListFiler, $pagination: Pagination) {
  transaction {
    assignedMemberList(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          id
          member {
            id
            name
          }
          account {
            id
            dues {
              totalDue
            }
          }
          product {
            productName
          }
          assignedDate
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAgentAssignedMemberListDataQuery = <
  TData = GetAgentAssignedMemberListDataQuery,
  TError = unknown
>(
  variables?: GetAgentAssignedMemberListDataQueryVariables,
  options?: UseQueryOptions<GetAgentAssignedMemberListDataQuery, TError, TData>
) =>
  useQuery<GetAgentAssignedMemberListDataQuery, TError, TData>(
    variables === undefined
      ? ['getAgentAssignedMemberListData']
      : ['getAgentAssignedMemberListData', variables],
    useAxios<GetAgentAssignedMemberListDataQuery, GetAgentAssignedMemberListDataQueryVariables>(
      GetAgentAssignedMemberListDataDocument
    ).bind(null, variables),
    options
  );
export const GetAgentTodayListDataDocument = `
    query getAgentTodayListData($id: ID!) {
  transaction {
    listAgentTask(id: $id) {
      record {
        member {
          id
        }
        account {
          id
        }
        amount
        paid
      }
    }
  }
}
    `;
export const useGetAgentTodayListDataQuery = <TData = GetAgentTodayListDataQuery, TError = unknown>(
  variables: GetAgentTodayListDataQueryVariables,
  options?: UseQueryOptions<GetAgentTodayListDataQuery, TError, TData>
) =>
  useQuery<GetAgentTodayListDataQuery, TError, TData>(
    ['getAgentTodayListData', variables],
    useAxios<GetAgentTodayListDataQuery, GetAgentTodayListDataQueryVariables>(
      GetAgentTodayListDataDocument
    ).bind(null, variables),
    options
  );
export const GetMeDocument = `
    query getMe {
  auth {
    me {
      data {
        user {
          id
          username
          email
        }
        preference {
          language
          languageCode
          date
        }
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetMeQuery = <TData = GetMeQuery, TError = unknown>(
  variables?: GetMeQueryVariables,
  options?: UseQueryOptions<GetMeQuery, TError, TData>
) =>
  useQuery<GetMeQuery, TError, TData>(
    variables === undefined ? ['getMe'] : ['getMe', variables],
    useAxios<GetMeQuery, GetMeQueryVariables>(GetMeDocument).bind(null, variables),
    options
  );
export const GetBankListDocument = `
    query getBankList {
  bank {
    bank {
      list {
        id
        name
      }
    }
  }
}
    `;
export const useGetBankListQuery = <TData = GetBankListQuery, TError = unknown>(
  variables?: GetBankListQueryVariables,
  options?: UseQueryOptions<GetBankListQuery, TError, TData>
) =>
  useQuery<GetBankListQuery, TError, TData>(
    variables === undefined ? ['getBankList'] : ['getBankList', variables],
    useAxios<GetBankListQuery, GetBankListQueryVariables>(GetBankListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetConfigDocument = `
    query getConfig {
  config {
    countries {
      name
      code
    }
  }
}
    `;
export const useGetConfigQuery = <TData = GetConfigQuery, TError = unknown>(
  variables?: GetConfigQueryVariables,
  options?: UseQueryOptions<GetConfigQuery, TError, TData>
) =>
  useQuery<GetConfigQuery, TError, TData>(
    variables === undefined ? ['getConfig'] : ['getConfig', variables],
    useAxios<GetConfigQuery, GetConfigQueryVariables>(GetConfigDocument).bind(null, variables),
    options
  );
export const GetCoOperativeKymEditDataDocument = `
    query getCoOperativeKymEditData($id: ID!) {
  members {
    cooperative {
      formState(id: $id) {
        data {
          formData {
            nameOfOrganization
            regdNumber
            regdDate
            regdOffice
            registeredAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            operatingAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            email
            website
            contactNumber
            noOfMaleMembers
            noOfFemaleMembers
            noOfOtherMembers
            lastAuditDate
            lastAgmDate
            representativeFullName
            representativeDesignatiton
            representativeEmail
            representativeContactNumber
            representativePanNo
            permanentRepresentativeAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            isPermanentAndTemporaryAddressSame
            temporaryRepresentativeAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            cooperativeTypeId
            mainServiceProduct
            noOfMaleEmployee
            noOfFemaleEmployee
            totalEmployee
            shareCapital
            reserveAndSurplus
            savingDeposit
            loanAccount
            capitalGrant
            currentLiabilities
            nonCurrentLiabilities
            cashAndCashEquivalent
            bank
            investments
            loan
            nonCurrentAssets
            otherNonCurrentAssets
            totalAssets
            accountHoldersName
            hasTCAccepted
          }
        }
      }
    }
  }
}
    `;
export const useGetCoOperativeKymEditDataQuery = <
  TData = GetCoOperativeKymEditDataQuery,
  TError = unknown
>(
  variables: GetCoOperativeKymEditDataQueryVariables,
  options?: UseQueryOptions<GetCoOperativeKymEditDataQuery, TError, TData>
) =>
  useQuery<GetCoOperativeKymEditDataQuery, TError, TData>(
    ['getCoOperativeKymEditData', variables],
    useAxios<GetCoOperativeKymEditDataQuery, GetCoOperativeKymEditDataQueryVariables>(
      GetCoOperativeKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetCoOperativeDirectorEditDataDocument = `
    query getCoOperativeDirectorEditData($id: ID!) {
  members {
    cooperative {
      listDirectors(id: $id) {
        data {
          id
          fullName
          designation
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isPermanentAndTemporaryAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          dateOfMembership
          highestQualification
          contactNumber
          email
          citizenshipNo
          panNo
        }
      }
    }
  }
}
    `;
export const useGetCoOperativeDirectorEditDataQuery = <
  TData = GetCoOperativeDirectorEditDataQuery,
  TError = unknown
>(
  variables: GetCoOperativeDirectorEditDataQueryVariables,
  options?: UseQueryOptions<GetCoOperativeDirectorEditDataQuery, TError, TData>
) =>
  useQuery<GetCoOperativeDirectorEditDataQuery, TError, TData>(
    ['getCoOperativeDirectorEditData', variables],
    useAxios<GetCoOperativeDirectorEditDataQuery, GetCoOperativeDirectorEditDataQueryVariables>(
      GetCoOperativeDirectorEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetCoOperativeAccountOperatorEditDataDocument = `
    query getCoOperativeAccountOperatorEditData($id: ID!) {
  members {
    cooperative {
      listAccountOperators(id: $id) {
        data {
          id
          fullName
          designation
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isPermanentAndTemporaryAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          dateOfMembership
          highestQualification
          contactNumber
          email
          citizenshipNo
          panNo
          coopRelatedTraining {
            subjectOfTraining
            dateOfTraining
            trainingOrganization
          }
        }
      }
    }
  }
}
    `;
export const useGetCoOperativeAccountOperatorEditDataQuery = <
  TData = GetCoOperativeAccountOperatorEditDataQuery,
  TError = unknown
>(
  variables: GetCoOperativeAccountOperatorEditDataQueryVariables,
  options?: UseQueryOptions<GetCoOperativeAccountOperatorEditDataQuery, TError, TData>
) =>
  useQuery<GetCoOperativeAccountOperatorEditDataQuery, TError, TData>(
    ['getCoOperativeAccountOperatorEditData', variables],
    useAxios<
      GetCoOperativeAccountOperatorEditDataQuery,
      GetCoOperativeAccountOperatorEditDataQueryVariables
    >(GetCoOperativeAccountOperatorEditDataDocument).bind(null, variables),
    options
  );
export const GetCooperativeUnionKymEditDataDocument = `
    query getCooperativeUnionKymEditData($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          institutionInformation {
            data {
              nameOfInstitutionEn
              nameOfInstitutionNp
              institutionType
              natureOfBusinessEn
              natureOfBusinessNp
              regdDate
              vatOrPan
              noOfBranches
              regdNo
              issuingOffice
              regdAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              operatingOfficeAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              branchOfficeAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              phone
              fax
              contactEmail
              website
              postBoxNo
              noOfEmployee
              lastAgmDate
              nameOfBank
              accountNumber
              accountName
              applicantName
              applicantNameNp
              applicantDesignationEn
              applicantDesignationNp
              applicantEmail
              applicantContactNo
              applicantPanNo
              applicantDateOfMembership
              applicantHighestQualification
              applicantPermanentAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              applicantIsPermanentAndTemporaryAddrSame
              applicantTemporaryAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              noOfMaleMemberCurrent
              noOfMaleMemberTarget
              noOfFemaleMemberCurrent
              noOfFemaleMemberTarget
              noOfInstitutionalMemberCurrent
              noOfInstitutionalMemberTarget
            }
            sectionStatus {
              id
              errors
              sectionStatus {
                errors
                incomplete
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCooperativeUnionKymEditDataQuery = <
  TData = GetCooperativeUnionKymEditDataQuery,
  TError = unknown
>(
  variables: GetCooperativeUnionKymEditDataQueryVariables,
  options?: UseQueryOptions<GetCooperativeUnionKymEditDataQuery, TError, TData>
) =>
  useQuery<GetCooperativeUnionKymEditDataQuery, TError, TData>(
    ['getCooperativeUnionKymEditData', variables],
    useAxios<GetCooperativeUnionKymEditDataQuery, GetCooperativeUnionKymEditDataQueryVariables>(
      GetCooperativeUnionKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetEconimicDetailsEditDataDocument = `
    query getEconimicDetailsEditData($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          economicDetails {
            data {
              cashAndCashEquivalentCurrent
              cashAndCashEquivalentTarget
              bankCurrent
              bankTarget
              investmentsCurrent
              investmentsTarget
              loanCurrent
              loanTarget
              nonCurrentAssetsCurrent
              nonCurrentAssetsTarget
              otherNonCurrentAssetsCurrent
              otherNonCurrentAssetsTarget
              shareCapitalCurrent
              shareCapitalTarget
              reserveAndSurplusCurrent
              reserveAndSurplusTarget
              savingDepositCurrent
              savingDepositTarget
              loanAccountCurrent
              loanAccountTarget
              capitalGrantCurrent
              capitalGrantTarget
              currentLiabilitiesCurrent
              currentLiabilitiesTarget
              nonCurrentLiabilitiesCurrent
              nonCurrentLiabilitiesTarget
              incomeFromFinancialInvestment
              incomeFromNonFinancialInvestment
              incomeFromInvestment
              incomeFromServiceOperation
              incomeFromSales
              otherIncome
              miscellaneousIncome
              purchase
              directExpense
              administrativeExpense
              financialCost
              riskManagementCost
              deferredTaxExpense
            }
            sectionStatus {
              id
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetEconimicDetailsEditDataQuery = <
  TData = GetEconimicDetailsEditDataQuery,
  TError = unknown
>(
  variables: GetEconimicDetailsEditDataQueryVariables,
  options?: UseQueryOptions<GetEconimicDetailsEditDataQuery, TError, TData>
) =>
  useQuery<GetEconimicDetailsEditDataQuery, TError, TData>(
    ['getEconimicDetailsEditData', variables],
    useAxios<GetEconimicDetailsEditDataQuery, GetEconimicDetailsEditDataQueryVariables>(
      GetEconimicDetailsEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetBoardOfDirectorsDetailsListDocument = `
    query getBoardOfDirectorsDetailsList($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          boardOfDirectorsDetails {
            data {
              personnelDetails {
                id
                cooperativeUnionId
                fullName
                fullNameNp
                designationEn
                designationNp
                permanentAddress {
                  provinceId
                  districtId
                  localGovernmentId
                  wardNo
                  locality
                  houseNo
                  coordinates {
                    longitude
                    latitude
                  }
                }
                isPermanentAndTemporaryAddressSame
                temporaryAddress {
                  provinceId
                  districtId
                  localGovernmentId
                  wardNo
                  locality
                  houseNo
                  coordinates {
                    longitude
                    latitude
                  }
                }
                dateOfMembership
                highestQualification
                mobileNumber
                email
                citizenshipNo
                trainingAttended {
                  subjectOfTraining
                  dateOfTraining
                  trainingOrganization
                }
                panNo
              }
            }
            sectionStatus {
              id
              errors
              sectionStatus {
                errors
                incomplete
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetBoardOfDirectorsDetailsListQuery = <
  TData = GetBoardOfDirectorsDetailsListQuery,
  TError = unknown
>(
  variables: GetBoardOfDirectorsDetailsListQueryVariables,
  options?: UseQueryOptions<GetBoardOfDirectorsDetailsListQuery, TError, TData>
) =>
  useQuery<GetBoardOfDirectorsDetailsListQuery, TError, TData>(
    ['getBoardOfDirectorsDetailsList', variables],
    useAxios<GetBoardOfDirectorsDetailsListQuery, GetBoardOfDirectorsDetailsListQueryVariables>(
      GetBoardOfDirectorsDetailsListDocument
    ).bind(null, variables),
    options
  );
export const GetAccountOperatorDetailsListDocument = `
    query getAccountOperatorDetailsList($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          accountOperatorsDetails {
            data {
              personnelDetails {
                id
                cooperativeUnionId
                fullName
                fullNameNp
                designationEn
                designationNp
                permanentAddress {
                  provinceId
                  districtId
                  localGovernmentId
                  wardNo
                  locality
                  houseNo
                  coordinates {
                    longitude
                    latitude
                  }
                }
                isPermanentAndTemporaryAddressSame
                temporaryAddress {
                  provinceId
                  districtId
                  localGovernmentId
                  wardNo
                  locality
                  houseNo
                  coordinates {
                    longitude
                    latitude
                  }
                }
                dateOfMembership
                highestQualification
                mobileNumber
                email
                citizenshipNo
                trainingAttended {
                  subjectOfTraining
                  dateOfTraining
                  trainingOrganization
                }
                panNo
              }
            }
            sectionStatus {
              id
              errors
              sectionStatus {
                errors
                incomplete
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountOperatorDetailsListQuery = <
  TData = GetAccountOperatorDetailsListQuery,
  TError = unknown
>(
  variables: GetAccountOperatorDetailsListQueryVariables,
  options?: UseQueryOptions<GetAccountOperatorDetailsListQuery, TError, TData>
) =>
  useQuery<GetAccountOperatorDetailsListQuery, TError, TData>(
    ['getAccountOperatorDetailsList', variables],
    useAxios<GetAccountOperatorDetailsListQuery, GetAccountOperatorDetailsListQueryVariables>(
      GetAccountOperatorDetailsListDocument
    ).bind(null, variables),
    options
  );
export const GetCentralRepresentativeDetailsDocument = `
    query getCentralRepresentativeDetails($id: ID!, $includeRequiredErrors: Boolean) {
  members {
    cooperativeUnion {
      formState(id: $id, includeRequiredErrors: $includeRequiredErrors) {
        formData {
          centralRepresentativeDetails {
            data {
              id
              cooperativeUnionId
              fullName
              fullNameNp
              designationEn
              designationNp
              permanentAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              isPermanentAndTemporaryAddressSame
              temporaryAddress {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              dateOfMembership
              highestQualification
              mobileNumber
              email
              citizenshipNo
              trainingAttended {
                subjectOfTraining
                dateOfTraining
                trainingOrganization
              }
              panNo
              notAmongDirectors
              centralRepID
            }
            sectionStatus {
              id
              errors
              sectionStatus {
                errors
                incomplete
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCentralRepresentativeDetailsQuery = <
  TData = GetCentralRepresentativeDetailsQuery,
  TError = unknown
>(
  variables: GetCentralRepresentativeDetailsQueryVariables,
  options?: UseQueryOptions<GetCentralRepresentativeDetailsQuery, TError, TData>
) =>
  useQuery<GetCentralRepresentativeDetailsQuery, TError, TData>(
    ['getCentralRepresentativeDetails', variables],
    useAxios<GetCentralRepresentativeDetailsQuery, GetCentralRepresentativeDetailsQueryVariables>(
      GetCentralRepresentativeDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetCoopUnionSectionStatusDocument = `
    query getCoopUnionSectionStatus($id: ID!) {
  members {
    cooperativeUnion {
      formState(id: $id) {
        sectionStatus {
          institutionInformation {
            id
            sectionStatus {
              errors
              incomplete
            }
            errors
          }
          bodDetails {
            id
            sectionStatus {
              errors
              incomplete
            }
            errors
          }
          accountOperatorDetails {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
          centralRepresentativeDetails {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
          economicDetails {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
          declaration {
            id
            errors
            sectionStatus {
              errors
              incomplete
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCoopUnionSectionStatusQuery = <
  TData = GetCoopUnionSectionStatusQuery,
  TError = unknown
>(
  variables: GetCoopUnionSectionStatusQueryVariables,
  options?: UseQueryOptions<GetCoopUnionSectionStatusQuery, TError, TData>
) =>
  useQuery<GetCoopUnionSectionStatusQuery, TError, TData>(
    ['getCoopUnionSectionStatus', variables],
    useAxios<GetCoopUnionSectionStatusQuery, GetCoopUnionSectionStatusQueryVariables>(
      GetCoopUnionSectionStatusDocument
    ).bind(null, variables),
    options
  );
export const GetAccountListDocument = `
    query getAccountList {
  eBanking {
    account {
      list(paginate: {first: 6}) {
        edges {
          node {
            id
            name
            amount
            isDefault
            accountNumber
            interestRate
          }
        }
      }
    }
  }
}
    `;
export const useGetAccountListQuery = <TData = GetAccountListQuery, TError = unknown>(
  variables?: GetAccountListQueryVariables,
  options?: UseQueryOptions<GetAccountListQuery, TError, TData>
) =>
  useQuery<GetAccountListQuery, TError, TData>(
    variables === undefined ? ['getAccountList'] : ['getAccountList', variables],
    useAxios<GetAccountListQuery, GetAccountListQueryVariables>(GetAccountListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAccountSummaryDocument = `
    query getAccountSummary {
  eBanking {
    account {
      summary {
        totalSaving
        totalLoan
      }
    }
  }
}
    `;
export const useGetAccountSummaryQuery = <TData = GetAccountSummaryQuery, TError = unknown>(
  variables?: GetAccountSummaryQueryVariables,
  options?: UseQueryOptions<GetAccountSummaryQuery, TError, TData>
) =>
  useQuery<GetAccountSummaryQuery, TError, TData>(
    variables === undefined ? ['getAccountSummary'] : ['getAccountSummary', variables],
    useAxios<GetAccountSummaryQuery, GetAccountSummaryQueryVariables>(
      GetAccountSummaryDocument
    ).bind(null, variables),
    options
  );
export const GetAccountDetailsDocument = `
    query getAccountDetails($id: ID!) {
  eBanking {
    account {
      get(id: $id) {
        id
        name
        accountNumber
        isDefault
        amount
        interestRate
        accountType
        interestBooked
        interestEarned
        subscribedDate
        history {
          id
          date
          balance
        }
        transactions {
          id
          name
          date
          amount
          transactionType
          transactionDirection
        }
      }
    }
  }
}
    `;
export const useGetAccountDetailsQuery = <TData = GetAccountDetailsQuery, TError = unknown>(
  variables: GetAccountDetailsQueryVariables,
  options?: UseQueryOptions<GetAccountDetailsQuery, TError, TData>
) =>
  useQuery<GetAccountDetailsQuery, TError, TData>(
    ['getAccountDetails', variables],
    useAxios<GetAccountDetailsQuery, GetAccountDetailsQueryVariables>(
      GetAccountDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetCoopChequeServicesDocument = `
    query getCoopChequeServices {
  eBanking {
    cooperativeServices {
      cheque {
        options {
          name
          enabled
        }
      }
    }
  }
}
    `;
export const useGetCoopChequeServicesQuery = <TData = GetCoopChequeServicesQuery, TError = unknown>(
  variables?: GetCoopChequeServicesQueryVariables,
  options?: UseQueryOptions<GetCoopChequeServicesQuery, TError, TData>
) =>
  useQuery<GetCoopChequeServicesQuery, TError, TData>(
    variables === undefined ? ['getCoopChequeServices'] : ['getCoopChequeServices', variables],
    useAxios<GetCoopChequeServicesQuery, GetCoopChequeServicesQueryVariables>(
      GetCoopChequeServicesDocument
    ).bind(null, variables),
    options
  );
export const GetCoopLoanServicesDocument = `
    query getCoopLoanServices {
  eBanking {
    cooperativeServices {
      loan {
        options {
          name
          enabled
          requestType
        }
      }
    }
  }
}
    `;
export const useGetCoopLoanServicesQuery = <TData = GetCoopLoanServicesQuery, TError = unknown>(
  variables?: GetCoopLoanServicesQueryVariables,
  options?: UseQueryOptions<GetCoopLoanServicesQuery, TError, TData>
) =>
  useQuery<GetCoopLoanServicesQuery, TError, TData>(
    variables === undefined ? ['getCoopLoanServices'] : ['getCoopLoanServices', variables],
    useAxios<GetCoopLoanServicesQuery, GetCoopLoanServicesQueryVariables>(
      GetCoopLoanServicesDocument
    ).bind(null, variables),
    options
  );
export const GetCoopComplaintServicesDocument = `
    query getCoopComplaintServices {
  eBanking {
    cooperativeServices {
      complaint {
        options {
          name
          enabled
          requestType
        }
      }
    }
  }
}
    `;
export const useGetCoopComplaintServicesQuery = <
  TData = GetCoopComplaintServicesQuery,
  TError = unknown
>(
  variables?: GetCoopComplaintServicesQueryVariables,
  options?: UseQueryOptions<GetCoopComplaintServicesQuery, TError, TData>
) =>
  useQuery<GetCoopComplaintServicesQuery, TError, TData>(
    variables === undefined
      ? ['getCoopComplaintServices']
      : ['getCoopComplaintServices', variables],
    useAxios<GetCoopComplaintServicesQuery, GetCoopComplaintServicesQueryVariables>(
      GetCoopComplaintServicesDocument
    ).bind(null, variables),
    options
  );
export const GetCoopDownloadsDocument = `
    query getCoopDownloads {
  eBanking {
    cooperativeServices {
      downloads {
        options {
          name
          enabled
          requestType
        }
      }
    }
  }
}
    `;
export const useGetCoopDownloadsQuery = <TData = GetCoopDownloadsQuery, TError = unknown>(
  variables?: GetCoopDownloadsQueryVariables,
  options?: UseQueryOptions<GetCoopDownloadsQuery, TError, TData>
) =>
  useQuery<GetCoopDownloadsQuery, TError, TData>(
    variables === undefined ? ['getCoopDownloads'] : ['getCoopDownloads', variables],
    useAxios<GetCoopDownloadsQuery, GetCoopDownloadsQueryVariables>(GetCoopDownloadsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAnnouncementListDocument = `
    query getAnnouncementList {
  eBanking {
    notification {
      announcements {
        list {
          id
          details
          summary
          title
          date
        }
      }
    }
  }
}
    `;
export const useGetAnnouncementListQuery = <TData = GetAnnouncementListQuery, TError = unknown>(
  variables?: GetAnnouncementListQueryVariables,
  options?: UseQueryOptions<GetAnnouncementListQuery, TError, TData>
) =>
  useQuery<GetAnnouncementListQuery, TError, TData>(
    variables === undefined ? ['getAnnouncementList'] : ['getAnnouncementList', variables],
    useAxios<GetAnnouncementListQuery, GetAnnouncementListQueryVariables>(
      GetAnnouncementListDocument
    ).bind(null, variables),
    options
  );
export const GetHomeServiceListDocument = `
    query getHomeServiceList {
  eBanking {
    services {
      id
      name
      service_id
      icon
      enabled
    }
  }
}
    `;
export const useGetHomeServiceListQuery = <TData = GetHomeServiceListQuery, TError = unknown>(
  variables?: GetHomeServiceListQueryVariables,
  options?: UseQueryOptions<GetHomeServiceListQuery, TError, TData>
) =>
  useQuery<GetHomeServiceListQuery, TError, TData>(
    variables === undefined ? ['getHomeServiceList'] : ['getHomeServiceList', variables],
    useAxios<GetHomeServiceListQuery, GetHomeServiceListQueryVariables>(
      GetHomeServiceListDocument
    ).bind(null, variables),
    options
  );
export const GetRecentTransactionsDocument = `
    query getRecentTransactions {
  eBanking {
    transaction {
      recent {
        id
        name
        transactionType
        date
        transactionDirection
        amount
      }
    }
  }
}
    `;
export const useGetRecentTransactionsQuery = <TData = GetRecentTransactionsQuery, TError = unknown>(
  variables?: GetRecentTransactionsQueryVariables,
  options?: UseQueryOptions<GetRecentTransactionsQuery, TError, TData>
) =>
  useQuery<GetRecentTransactionsQuery, TError, TData>(
    variables === undefined ? ['getRecentTransactions'] : ['getRecentTransactions', variables],
    useAxios<GetRecentTransactionsQuery, GetRecentTransactionsQueryVariables>(
      GetRecentTransactionsDocument
    ).bind(null, variables),
    options
  );
export const GetUtilityListDocument = `
    query getUtilityList {
  eBanking {
    utilityPayments {
      id
      name
      enabled
      icon
      service_id
    }
  }
}
    `;
export const useGetUtilityListQuery = <TData = GetUtilityListQuery, TError = unknown>(
  variables?: GetUtilityListQueryVariables,
  options?: UseQueryOptions<GetUtilityListQuery, TError, TData>
) =>
  useQuery<GetUtilityListQuery, TError, TData>(
    variables === undefined ? ['getUtilityList'] : ['getUtilityList', variables],
    useAxios<GetUtilityListQuery, GetUtilityListQueryVariables>(GetUtilityListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetKymFormStatusInstitutionDocument = `
    query getKymFormStatusInstitution($id: ID!) {
  members {
    institution {
      formState(id: $id) {
        data {
          sectionStatus {
            information {
              completed
              error
            }
            transaction {
              completed
              error
            }
            directorDetails {
              completed
              error
            }
            account {
              completed
              error
            }
            declaration {
              completed
              error
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetKymFormStatusInstitutionQuery = <
  TData = GetKymFormStatusInstitutionQuery,
  TError = unknown
>(
  variables: GetKymFormStatusInstitutionQueryVariables,
  options?: UseQueryOptions<GetKymFormStatusInstitutionQuery, TError, TData>
) =>
  useQuery<GetKymFormStatusInstitutionQuery, TError, TData>(
    ['getKymFormStatusInstitution', variables],
    useAxios<GetKymFormStatusInstitutionQuery, GetKymFormStatusInstitutionQueryVariables>(
      GetKymFormStatusInstitutionDocument
    ).bind(null, variables),
    options
  );
export const GetInstitutionKymEditDataDocument = `
    query getInstitutionKymEditData($id: ID!) {
  members {
    institution {
      formState(id: $id) {
        data {
          lastUpdated {
            ... on KymInsInformationLUS {
              information: name
            }
            ... on KymInsTransactionLUS {
              transaction: name
            }
            ... on KymInsDirectorDetailsLUS {
              directorDetails: name
            }
            ... on KymInsAccountLUS {
              account: name
            }
            ... on KymInsDeclarationLUS {
              declaration: name
            }
          }
          sectionStatus {
            information {
              completed
              error
            }
            transaction {
              completed
              error
            }
            directorDetails {
              completed
              error
            }
          }
          formData {
            institutionName
            institutionTypeId
            natureOfBusiness
            registrationDate
            vatOrPanNo
            operatingOfficeAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            noOfBranches
            branchOfficeAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            registeredAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            registeredNumber
            issuingOffice
            phone
            fax
            email
            website
            postBoxNo
            numberOfEmployee
            dateOfLastAGM
            bank
            accountNumber
            accountName
            natureOfTransaction
            annualTurnover
            initialDepositAmount
            expectedMonthlyTurnover
            expectedMonthlyTransaction
            accountType
            isCompanyStampCompulsory
            specialInstruction
            companyStamp
            accountHolderName
            accountHolderPhone
            accountHolderEmail
            accountHolderAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetInstitutionKymEditDataQuery = <
  TData = GetInstitutionKymEditDataQuery,
  TError = unknown
>(
  variables: GetInstitutionKymEditDataQueryVariables,
  options?: UseQueryOptions<GetInstitutionKymEditDataQuery, TError, TData>
) =>
  useQuery<GetInstitutionKymEditDataQuery, TError, TData>(
    ['getInstitutionKymEditData', variables],
    useAxios<GetInstitutionKymEditDataQuery, GetInstitutionKymEditDataQueryVariables>(
      GetInstitutionKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetInstitutionSisterDetailsEditListDocument = `
    query getInstitutionSisterDetailsEditList($id: ID!) {
  members {
    institution {
      listSisterConcerns(id: $id) {
        data {
          id
          name
          natureOfBusiness
          address
          phoneNo
        }
      }
    }
  }
}
    `;
export const useGetInstitutionSisterDetailsEditListQuery = <
  TData = GetInstitutionSisterDetailsEditListQuery,
  TError = unknown
>(
  variables: GetInstitutionSisterDetailsEditListQueryVariables,
  options?: UseQueryOptions<GetInstitutionSisterDetailsEditListQuery, TError, TData>
) =>
  useQuery<GetInstitutionSisterDetailsEditListQuery, TError, TData>(
    ['getInstitutionSisterDetailsEditList', variables],
    useAxios<
      GetInstitutionSisterDetailsEditListQuery,
      GetInstitutionSisterDetailsEditListQueryVariables
    >(GetInstitutionSisterDetailsEditListDocument).bind(null, variables),
    options
  );
export const GetInsBoardDirectorEditListDocument = `
    query getInsBoardDirectorEditList($id: ID!) {
  members {
    institution {
      listDirectors(id: $id) {
        data {
          id
          name
          designation
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isTemporaryAndPermanentAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          dateOfMembership
          highestQualification
          mobileNo
          emailAddress
          citizenshipNo
          panNo
          isHeadOfOrganization
          isAffiliatedWithOtherFirms
          firmDetails {
            directorName
            institutionName
            address
            designation
            yearlyIncome
          }
        }
      }
    }
  }
}
    `;
export const useGetInsBoardDirectorEditListQuery = <
  TData = GetInsBoardDirectorEditListQuery,
  TError = unknown
>(
  variables: GetInsBoardDirectorEditListQueryVariables,
  options?: UseQueryOptions<GetInsBoardDirectorEditListQuery, TError, TData>
) =>
  useQuery<GetInsBoardDirectorEditListQuery, TError, TData>(
    ['getInsBoardDirectorEditList', variables],
    useAxios<GetInsBoardDirectorEditListQuery, GetInsBoardDirectorEditListQueryVariables>(
      GetInsBoardDirectorEditListDocument
    ).bind(null, variables),
    options
  );
export const GetInsAccountOperatorEditListDocument = `
    query getInsAccountOperatorEditList($id: ID!) {
  members {
    institution {
      listAccountOperators(id: $id) {
        data {
          id
          name
          contact
          email
          permanenetAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isTemporaryAndPermanentAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          designation
          panNo
        }
      }
    }
  }
}
    `;
export const useGetInsAccountOperatorEditListQuery = <
  TData = GetInsAccountOperatorEditListQuery,
  TError = unknown
>(
  variables: GetInsAccountOperatorEditListQueryVariables,
  options?: UseQueryOptions<GetInsAccountOperatorEditListQuery, TError, TData>
) =>
  useQuery<GetInsAccountOperatorEditListQuery, TError, TData>(
    ['getInsAccountOperatorEditList', variables],
    useAxios<GetInsAccountOperatorEditListQuery, GetInsAccountOperatorEditListQueryVariables>(
      GetInsAccountOperatorEditListDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryItemsDocument = `
    query getInventoryItems {
  inventory {
    items {
      list {
        edges {
          node {
            id
            name
            type
            unitPrice
            itemQuantity
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryItemsQuery = <TData = GetInventoryItemsQuery, TError = unknown>(
  variables?: GetInventoryItemsQueryVariables,
  options?: UseQueryOptions<GetInventoryItemsQuery, TError, TData>
) =>
  useQuery<GetInventoryItemsQuery, TError, TData>(
    variables === undefined ? ['getInventoryItems'] : ['getInventoryItems', variables],
    useAxios<GetInventoryItemsQuery, GetInventoryItemsQueryVariables>(
      GetInventoryItemsDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryItemGroupDocument = `
    query getInventoryItemGroup {
  inventory {
    itemsGroup {
      list {
        edges {
          node {
            name
            id
            description
            parentCategory
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryItemGroupQuery = <TData = GetInventoryItemGroupQuery, TError = unknown>(
  variables?: GetInventoryItemGroupQueryVariables,
  options?: UseQueryOptions<GetInventoryItemGroupQuery, TError, TData>
) =>
  useQuery<GetInventoryItemGroupQuery, TError, TData>(
    variables === undefined ? ['getInventoryItemGroup'] : ['getInventoryItemGroup', variables],
    useAxios<GetInventoryItemGroupQuery, GetInventoryItemGroupQueryVariables>(
      GetInventoryItemGroupDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryVendorDocument = `
    query getInventoryVendor {
  inventory {
    vendors {
      list {
        edges {
          node {
            name
            location
            email
            phoneNumber
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryVendorQuery = <TData = GetInventoryVendorQuery, TError = unknown>(
  variables?: GetInventoryVendorQueryVariables,
  options?: UseQueryOptions<GetInventoryVendorQuery, TError, TData>
) =>
  useQuery<GetInventoryVendorQuery, TError, TData>(
    variables === undefined ? ['getInventoryVendor'] : ['getInventoryVendor', variables],
    useAxios<GetInventoryVendorQuery, GetInventoryVendorQueryVariables>(
      GetInventoryVendorDocument
    ).bind(null, variables),
    options
  );
export const GetInventoryUnitOfMeasureDocument = `
    query getInventoryUnitOfMeasure {
  inventory {
    unitOfMeasure {
      list {
        edges {
          node {
            name
            shortName
            acceptFraction
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryUnitOfMeasureQuery = <
  TData = GetInventoryUnitOfMeasureQuery,
  TError = unknown
>(
  variables?: GetInventoryUnitOfMeasureQueryVariables,
  options?: UseQueryOptions<GetInventoryUnitOfMeasureQuery, TError, TData>
) =>
  useQuery<GetInventoryUnitOfMeasureQuery, TError, TData>(
    variables === undefined
      ? ['getInventoryUnitOfMeasure']
      : ['getInventoryUnitOfMeasure', variables],
    useAxios<GetInventoryUnitOfMeasureQuery, GetInventoryUnitOfMeasureQueryVariables>(
      GetInventoryUnitOfMeasureDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymOptionsDocument = `
    query getIndividualKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_INDIVIDUAL}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymOptionsQuery = <
  TData = GetIndividualKymOptionsQuery,
  TError = unknown
>(
  variables: GetIndividualKymOptionsQueryVariables,
  options?: UseQueryOptions<GetIndividualKymOptionsQuery, TError, TData>
) =>
  useQuery<GetIndividualKymOptionsQuery, TError, TData>(
    ['getIndividualKYMOptions', variables],
    useAxios<GetIndividualKymOptionsQuery, GetIndividualKymOptionsQueryVariables>(
      GetIndividualKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetInstitutionKymOptionsDocument = `
    query getInstitutionKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_INSTITUTION}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetInstitutionKymOptionsQuery = <
  TData = GetInstitutionKymOptionsQuery,
  TError = unknown
>(
  variables: GetInstitutionKymOptionsQueryVariables,
  options?: UseQueryOptions<GetInstitutionKymOptionsQuery, TError, TData>
) =>
  useQuery<GetInstitutionKymOptionsQuery, TError, TData>(
    ['getInstitutionKYMOptions', variables],
    useAxios<GetInstitutionKymOptionsQuery, GetInstitutionKymOptionsQueryVariables>(
      GetInstitutionKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetCooperativeKymOptionsDocument = `
    query getCooperativeKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_COOP}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetCooperativeKymOptionsQuery = <
  TData = GetCooperativeKymOptionsQuery,
  TError = unknown
>(
  variables: GetCooperativeKymOptionsQueryVariables,
  options?: UseQueryOptions<GetCooperativeKymOptionsQuery, TError, TData>
) =>
  useQuery<GetCooperativeKymOptionsQuery, TError, TData>(
    ['getCooperativeKYMOptions', variables],
    useAxios<GetCooperativeKymOptionsQuery, GetCooperativeKymOptionsQueryVariables>(
      GetCooperativeKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetCoopUnionKymOptionsDocument = `
    query getCoopUnionKYMOptions($searchTerm: FormFieldSearchTerm!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: KYM_COOP_UNION}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetCoopUnionKymOptionsQuery = <
  TData = GetCoopUnionKymOptionsQuery,
  TError = unknown
>(
  variables: GetCoopUnionKymOptionsQueryVariables,
  options?: UseQueryOptions<GetCoopUnionKymOptionsQuery, TError, TData>
) =>
  useQuery<GetCoopUnionKymOptionsQuery, TError, TData>(
    ['getCoopUnionKYMOptions', variables],
    useAxios<GetCoopUnionKymOptionsQuery, GetCoopUnionKymOptionsQueryVariables>(
      GetCoopUnionKymOptionsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductDetailsDataDocument = `
    query getLoanProductDetailsData($id: ID!) {
  settings {
    general {
      loanProducts {
        formState(id: $id) {
          data {
            ...LoanProduct
          }
          error {
            ...QueryError
          }
        }
      }
    }
  }
}
    ${LoanProductFragmentDoc}
${QueryErrorFragmentDoc}`;
export const useGetLoanProductDetailsDataQuery = <
  TData = GetLoanProductDetailsDataQuery,
  TError = unknown
>(
  variables: GetLoanProductDetailsDataQueryVariables,
  options?: UseQueryOptions<GetLoanProductDetailsDataQuery, TError, TData>
) =>
  useQuery<GetLoanProductDetailsDataQuery, TError, TData>(
    ['getLoanProductDetailsData', variables],
    useAxios<GetLoanProductDetailsDataQuery, GetLoanProductDetailsDataQueryVariables>(
      GetLoanProductDetailsDataDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductsListDocument = `
    query getLoanProductsList($memberId: ID!, $productTypeId: ID!, $productSubTypeId: ID!) {
  loanAccount {
    getProductList(
      memberId: $memberId
      productSubTypeId: $productSubTypeId
      productType: $productTypeId
    ) {
      allowed {
        id
        productName
      }
      notAllowed {
        data {
          id
          productName
        }
        error
      }
    }
  }
}
    `;
export const useGetLoanProductsListQuery = <TData = GetLoanProductsListQuery, TError = unknown>(
  variables: GetLoanProductsListQueryVariables,
  options?: UseQueryOptions<GetLoanProductsListQuery, TError, TData>
) =>
  useQuery<GetLoanProductsListQuery, TError, TData>(
    ['getLoanProductsList', variables],
    useAxios<GetLoanProductsListQuery, GetLoanProductsListQueryVariables>(
      GetLoanProductsListDocument
    ).bind(null, variables),
    options
  );
export const GetProductCriteriaDocument = `
    query getProductCriteria($productId: ID!) {
  loanAccount {
    getProductCriteria(productId: $productId) {
      data {
        gender
        minAge
        maxAge
        ethnicity
        educationQualification
        occupation
        foreignEmployment
        institutionType
        cooperativeUnion
        cooperativeType
        maritalStatus
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetProductCriteriaQuery = <TData = GetProductCriteriaQuery, TError = unknown>(
  variables: GetProductCriteriaQueryVariables,
  options?: UseQueryOptions<GetProductCriteriaQuery, TError, TData>
) =>
  useQuery<GetProductCriteriaQuery, TError, TData>(
    ['getProductCriteria', variables],
    useAxios<GetProductCriteriaQuery, GetProductCriteriaQueryVariables>(
      GetProductCriteriaDocument
    ).bind(null, variables),
    options
  );
export const GetLoanAccountTypeDocument = `
    query getLoanAccountType($productTypeId: String) {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
          }
          productSubTypes(productTypeID: $productTypeId) {
            id
            productSubType
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanAccountTypeQuery = <TData = GetLoanAccountTypeQuery, TError = unknown>(
  variables?: GetLoanAccountTypeQueryVariables,
  options?: UseQueryOptions<GetLoanAccountTypeQuery, TError, TData>
) =>
  useQuery<GetLoanAccountTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanAccountType'] : ['getLoanAccountType', variables],
    useAxios<GetLoanAccountTypeQuery, GetLoanAccountTypeQueryVariables>(
      GetLoanAccountTypeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductTypesDocument = `
    query getLoanProductTypes {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductTypesQuery = <TData = GetLoanProductTypesQuery, TError = unknown>(
  variables?: GetLoanProductTypesQueryVariables,
  options?: UseQueryOptions<GetLoanProductTypesQuery, TError, TData>
) =>
  useQuery<GetLoanProductTypesQuery, TError, TData>(
    variables === undefined ? ['getLoanProductTypes'] : ['getLoanProductTypes', variables],
    useAxios<GetLoanProductTypesQuery, GetLoanProductTypesQueryVariables>(
      GetLoanProductTypesDocument
    ).bind(null, variables),
    options
  );
export const GetCollateralListDocument = `
    query getCollateralList {
  settings {
    general {
      loan {
        general {
          collateralList {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetCollateralListQuery = <TData = GetCollateralListQuery, TError = unknown>(
  variables?: GetCollateralListQueryVariables,
  options?: UseQueryOptions<GetCollateralListQuery, TError, TData>
) =>
  useQuery<GetCollateralListQuery, TError, TData>(
    variables === undefined ? ['getCollateralList'] : ['getCollateralList', variables],
    useAxios<GetCollateralListQuery, GetCollateralListQueryVariables>(
      GetCollateralListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanListDocument = `
    query getLoanList($paginate: Pagination, $filter: LoanAccountSearchFilter) {
  loanAccount {
    list(paginate: $paginate, filter: $filter) {
      totalCount
      edges {
        cursor
        node {
          id
          member {
            id
            name
            profilePicUrl
          }
          product {
            productName
          }
          LoanAccountName
          createdAt
        }
      }
      pageInfo {
        endCursor
        startCursor
        hasNextPage
        hasPreviousPage
      }
    }
  }
}
    `;
export const useGetLoanListQuery = <TData = GetLoanListQuery, TError = unknown>(
  variables?: GetLoanListQueryVariables,
  options?: UseQueryOptions<GetLoanListQuery, TError, TData>
) =>
  useQuery<GetLoanListQuery, TError, TData>(
    variables === undefined ? ['getLoanList'] : ['getLoanList', variables],
    useAxios<GetLoanListQuery, GetLoanListQueryVariables>(GetLoanListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanInstallmentsDocument = `
    query getLoanInstallments($productId: ID!, $gracePeriod: LoanAccountGraceInput, $sanctionAmount: Int!, $tenure: Int!, $interest: Float!, $repaymentScheme: LoanRepaymentScheme!) {
  loanAccount {
    getLoanInstallments(
      interest: $interest
      gracePeriod: $gracePeriod
      productId: $productId
      repaymentScheme: $repaymentScheme
      sanctionAmount: $sanctionAmount
      tenure: $tenure
    ) {
      data {
        total
        installments {
          interest
          installmentDate
          installmentNo
          payment
          principal
          remainingPrincipal
          interest
        }
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanInstallmentsQuery = <TData = GetLoanInstallmentsQuery, TError = unknown>(
  variables: GetLoanInstallmentsQueryVariables,
  options?: UseQueryOptions<GetLoanInstallmentsQuery, TError, TData>
) =>
  useQuery<GetLoanInstallmentsQuery, TError, TData>(
    ['getLoanInstallments', variables],
    useAxios<GetLoanInstallmentsQuery, GetLoanInstallmentsQueryVariables>(
      GetLoanInstallmentsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanApplicationDetailsDocument = `
    query getLoanApplicationDetails($id: ID!) {
  loanAccount {
    formState(id: $id) {
      data {
        memberId
        productType
        productSubType
        productId
        LoanAccountName
        appliedLoanAmount
        collateralData {
          collateralType
          ownerName
          relation
          sheetNo
          plotNo
          kittaNo
          area
          buildingType
          constructionType
          valuatorId
          noOfStorey
          fmvMaxAmount
          dvMinAmount
          valuationMethod
          valuationPercent
          collaterallValuation
          collateralDescription
          collateralFiles
          valuationFiles
          vehicleName
          vehicleModelNo
          vehicleRegistrationNo
          vehicleNo
          vehicleSeatCapacity
          vehicleCapacity
          vehicleType
          vehicleFuelType
          documentName
          valuationAmount
          description
        }
        gurantee_details {
          accountId
          guranteeAmount
          maxGuranteeAmountLimit
          memberId
          totalAmount
          accountName
        }
        gracePeriod {
          principalGracePeriod
          interestGracePeriod
        }
        linkedAccountId
        totalValuation
        totalSanctionedAmount
        justifySanction
        isCeoAuthority
        isBoardAuthority
        intrestRate
        tenure
        tenureType
        repaymentScheme
        loanProcessingCharge {
          amount
          ledgerName
          serviceName
        }
        note
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetLoanApplicationDetailsQuery = <
  TData = GetLoanApplicationDetailsQuery,
  TError = unknown
>(
  variables: GetLoanApplicationDetailsQueryVariables,
  options?: UseQueryOptions<GetLoanApplicationDetailsQuery, TError, TData>
) =>
  useQuery<GetLoanApplicationDetailsQuery, TError, TData>(
    ['getLoanApplicationDetails', variables],
    useAxios<GetLoanApplicationDetailsQuery, GetLoanApplicationDetailsQueryVariables>(
      GetLoanApplicationDetailsDocument
    ).bind(null, variables),
    options
  );
export const GetMemberLoanAccountsDocument = `
    query getMemberLoanAccounts($memberId: ID!) {
  loanAccount {
    memberDisbursedLoanAccounts(memberId: $memberId) {
      id
      name
    }
  }
}
    `;
export const useGetMemberLoanAccountsQuery = <TData = GetMemberLoanAccountsQuery, TError = unknown>(
  variables: GetMemberLoanAccountsQueryVariables,
  options?: UseQueryOptions<GetMemberLoanAccountsQuery, TError, TData>
) =>
  useQuery<GetMemberLoanAccountsQuery, TError, TData>(
    ['getMemberLoanAccounts', variables],
    useAxios<GetMemberLoanAccountsQuery, GetMemberLoanAccountsQueryVariables>(
      GetMemberLoanAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanPreviewDocument = `
    query getLoanPreview($id: String!) {
  loanAccount {
    loanPreview(loanAccountId: $id) {
      data {
        productId
        additionalFeatures {
          allowPartialInstallment
          collateral
          insurance
          isMonthlyInterestCompulsory
          loanScheduleChangeOverride
          overrideInterest
          staffProduct
          supportMultipleAccount
        }
        criteria {
          gender
          minAge
          maxAge
          ethnicity
          educationQualification
          maritalStatus
          foreignEmployment
          occupation
          institutionType
          cooperativeUnion
          cooperativeType
        }
        collateralAndGuarantees {
          name
          valuation
        }
        generalInformation {
          loanProduct
          loanSubType
          loanType
          natureOfLoanProduct
          loanName
          productCode
        }
        loanDetails {
          appliedLoanAmount
          interestMethod
          interestRate
          loanRepaymentScheme
          tenure
          tenureUnit
          totalCollateralValuation
          totalGuaranteeValuation
          totalProcessingChargesValuation
          totalSanctionedAmount
          totalDisbursedAmount
          principalGracePeriod
          interestGracePeriod
          interestAmount
          disburseDate
          expiryDate
          paymentFrequency
          processingCharges {
            name
            amount
          }
        }
        repaymentDetails {
          lastPaymentDate
          remainingPrincipal
          remainingInterest
          remainingTotal
          remainingInstallments {
            installmentNo
            principal
            fine
            interestAmount
          }
          totalInstallmentAmount
        }
        member {
          name
          id
          profilePicUrl
        }
        memberId
        productId
        paymentSchedule {
          total
          installments {
            installmentDate
            installmentNo
            interest
            payment
            principal
            remainingPrincipal
          }
        }
        statistics {
          remainingPayableAmount
          totalPaidAmount
          totalPayableAmount
        }
      }
    }
  }
}
    `;
export const useGetLoanPreviewQuery = <TData = GetLoanPreviewQuery, TError = unknown>(
  variables: GetLoanPreviewQueryVariables,
  options?: UseQueryOptions<GetLoanPreviewQuery, TError, TData>
) =>
  useQuery<GetLoanPreviewQuery, TError, TData>(
    ['getLoanPreview', variables],
    useAxios<GetLoanPreviewQuery, GetLoanPreviewQueryVariables>(GetLoanPreviewDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberListDocument = `
    query getMemberList($pagination: Pagination!, $filter: KymMemberDataFilter) {
  members {
    list(pagination: $pagination, filter: $filter) {
      totalCount
      edges {
        node {
          id
          name
          code
          type
          address {
            state
            district
            localGovernment
            wardNo
            locality
          }
          profilePicUrl
          signaturePicUrl
          contact
          createdAt
          dateJoined
          profile {
            ... on KymIndFormStateQuery {
              data {
                formData {
                  basicInformation {
                    genderId
                    gender
                    age
                  }
                  contactDetails {
                    mobileNumber
                    phoneNumber
                    email
                  }
                  maritalStatusId
                  maritalStatus
                }
              }
            }
          }
        }
        cursor
      }
      pageInfo {
        ...Pagination
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetMemberListQuery = <TData = GetMemberListQuery, TError = unknown>(
  variables: GetMemberListQueryVariables,
  options?: UseQueryOptions<GetMemberListQuery, TError, TData>
) =>
  useQuery<GetMemberListQuery, TError, TData>(
    ['getMemberList', variables],
    useAxios<GetMemberListQuery, GetMemberListQueryVariables>(GetMemberListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberTypesDocument = `
    query getMemberTypes {
  members {
    memberTypes {
      data {
        id
        type
      }
    }
  }
}
    `;
export const useGetMemberTypesQuery = <TData = GetMemberTypesQuery, TError = unknown>(
  variables?: GetMemberTypesQueryVariables,
  options?: UseQueryOptions<GetMemberTypesQuery, TError, TData>
) =>
  useQuery<GetMemberTypesQuery, TError, TData>(
    variables === undefined ? ['getMemberTypes'] : ['getMemberTypes', variables],
    useAxios<GetMemberTypesQuery, GetMemberTypesQueryVariables>(GetMemberTypesDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberTranslationDocument = `
    query getMemberTranslation($id: ID!) {
  members {
    translate(id: $id) {
      data {
        id
        data
        translatedValue
      }
    }
  }
}
    `;
export const useGetMemberTranslationQuery = <TData = GetMemberTranslationQuery, TError = unknown>(
  variables: GetMemberTranslationQueryVariables,
  options?: UseQueryOptions<GetMemberTranslationQuery, TError, TData>
) =>
  useQuery<GetMemberTranslationQuery, TError, TData>(
    ['getMemberTranslation', variables],
    useAxios<GetMemberTranslationQuery, GetMemberTranslationQueryVariables>(
      GetMemberTranslationDocument
    ).bind(null, variables),
    options
  );
export const GetKymFormStatusDocument = `
    query getKymFormStatus($id: String!, $hasPressedNext: Boolean) {
  members {
    individual(id: $id, hasPressedNext: $hasPressedNext) {
      formState {
        sectionStatus {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
      }
    }
  }
}
    `;
export const useGetKymFormStatusQuery = <TData = GetKymFormStatusQuery, TError = unknown>(
  variables: GetKymFormStatusQueryVariables,
  options?: UseQueryOptions<GetKymFormStatusQuery, TError, TData>
) =>
  useQuery<GetKymFormStatusQuery, TError, TData>(
    ['getKymFormStatus', variables],
    useAxios<GetKymFormStatusQuery, GetKymFormStatusQueryVariables>(GetKymFormStatusDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberIndividualDataDocument = `
    query getMemberIndividualData($id: ID!) {
  members {
    details(id: $id) {
      data {
        id
        name
        profilePicUrl
        profilePic
        address {
          state
          district
          localGovernment
          wardNo
          locality
        }
        contact
        dateJoined
        profile {
          ... on KymIndFormStateQuery {
            data {
              formData {
                basicInformation {
                  dateOfBirth
                  age
                  gender
                }
                contactDetails {
                  email
                }
                maritalStatus
                maritalStatusId
              }
            }
          }
          ... on KymInsFormStateQuery {
            data {
              formData {
                institutionName
                institutionTypeId
                natureOfBusiness
              }
            }
          }
          ... on KymCooperativeFormStateQuery {
            data {
              formData {
                nameOfOrganization
                regdNumber
                regdDate
              }
            }
          }
          ... on CooperativeUnionMember {
            id
            institutionInformation {
              data {
                nameOfInstitutionEn
                nameOfInstitutionNp
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberIndividualDataQuery = <
  TData = GetMemberIndividualDataQuery,
  TError = unknown
>(
  variables: GetMemberIndividualDataQueryVariables,
  options?: UseQueryOptions<GetMemberIndividualDataQuery, TError, TData>
) =>
  useQuery<GetMemberIndividualDataQuery, TError, TData>(
    ['getMemberIndividualData', variables],
    useAxios<GetMemberIndividualDataQuery, GetMemberIndividualDataQueryVariables>(
      GetMemberIndividualDataDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymEditDataDocument = `
    query getIndividualKymEditData($id: String!, $hasPressedNext: Boolean) {
  members {
    individual(id: $id, hasPressedNext: $hasPressedNext) {
      formState {
        sectionStatus {
          id
          errors
          sectionStatus {
            errors
            incomplete
          }
        }
        data {
          formData {
            basicInformation {
              firstName
              middleName
              lastName
              genderId
              dateOfBirth
              ethnicityId
              nationalityId
              educationQualificationId
              religionId
              educationQualificationId
              religionId
            }
            contactDetails {
              mobileNumber
              phoneNumber
              email
            }
            rentedHouse {
              landlordName
              landlordContact
            }
            maritalStatusId
            profession {
              professionId
              otherProfession
            }
            foreignEmployment {
              isForeignEmployment
              foreignEmpCountryId
              typeOfVisaId
              foreignEstimatedAnnualIncome
            }
            annualIncomeSourceId
            membershipDetails {
              purposeId
              isMemberOfAnotherCooperative
              otherCoopName
              otherCoopBranchId
              otherCoopMemberId
            }
            introducers {
              firstIntroducerId
              secondIntroducerId
            }
            isFamilyAMember
            initialTransactionDetails {
              initialShare
              initialSaving
              initialLoan
              otherFinancialAmount
            }
            estimatedTransactions {
              estimatedAnnualTransactionAmount
              estimatedAnnualLoanAmount
              estimatedAnnualTransactionFrequencyId
              estimatedAnnualDepositAmount
            }
            declaration {
              isPoliticallyExposed
              politicallyExposedDetails
              hasBeneficialOwner
              beneficialRelationshipId
              beneficialFullName
              isConvicted
              convictedDetails
              hasForeignResidentialPermit
              foreignResidentialPermitTypeId
              declarationAgreement
            }
            permanentAddress {
              provinceId
              districtId
              localGovernmentId
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            temporaryAddress {
              address {
                provinceId
                districtId
                localGovernmentId
                wardNo
                locality
                houseNo
                coordinates {
                  longitude
                  latitude
                }
              }
              sameTempAsPermanentAddress
            }
            identificationSelection
          }
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymEditDataQuery = <
  TData = GetIndividualKymEditDataQuery,
  TError = unknown
>(
  variables: GetIndividualKymEditDataQueryVariables,
  options?: UseQueryOptions<GetIndividualKymEditDataQuery, TError, TData>
) =>
  useQuery<GetIndividualKymEditDataQuery, TError, TData>(
    ['getIndividualKymEditData', variables],
    useAxios<GetIndividualKymEditDataQuery, GetIndividualKymEditDataQueryVariables>(
      GetIndividualKymEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymFamilyMembersListDocument = `
    query getIndividualKymFamilyMembersList($id: String!, $isMember: Boolean) {
  members {
    individual(id: $id) {
      listFamilyMember(isMember: $isMember) {
        data {
          id
          relationshipId
          fullName
          familyMemberId
          dateOfBirth
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymFamilyMembersListQuery = <
  TData = GetIndividualKymFamilyMembersListQuery,
  TError = unknown
>(
  variables: GetIndividualKymFamilyMembersListQueryVariables,
  options?: UseQueryOptions<GetIndividualKymFamilyMembersListQuery, TError, TData>
) =>
  useQuery<GetIndividualKymFamilyMembersListQuery, TError, TData>(
    ['getIndividualKymFamilyMembersList', variables],
    useAxios<
      GetIndividualKymFamilyMembersListQuery,
      GetIndividualKymFamilyMembersListQueryVariables
    >(GetIndividualKymFamilyMembersListDocument).bind(null, variables),
    options
  );
export const GetIndividualKymFamilyOccupationListDocument = `
    query getIndividualKymFamilyOccupationList($id: String!, $isSpouse: Boolean!) {
  members {
    individual(id: $id) {
      listOccupation(isSpouse: $isSpouse) {
        data {
          id
          occupationId
          orgName
          panVatNo
          address
          estimatedAnnualIncome
          establishedDate
          registrationNo
          contact
          isOwner
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymFamilyOccupationListQuery = <
  TData = GetIndividualKymFamilyOccupationListQuery,
  TError = unknown
>(
  variables: GetIndividualKymFamilyOccupationListQueryVariables,
  options?: UseQueryOptions<GetIndividualKymFamilyOccupationListQuery, TError, TData>
) =>
  useQuery<GetIndividualKymFamilyOccupationListQuery, TError, TData>(
    ['getIndividualKymFamilyOccupationList', variables],
    useAxios<
      GetIndividualKymFamilyOccupationListQuery,
      GetIndividualKymFamilyOccupationListQueryVariables
    >(GetIndividualKymFamilyOccupationListDocument).bind(null, variables),
    options
  );
export const GetIndividualKymIncomeSourceListDocument = `
    query getIndividualKymIncomeSourceList($id: String!) {
  members {
    individual(id: $id) {
      listIncomeSource {
        data {
          id
          incomeSource
          amount
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymIncomeSourceListQuery = <
  TData = GetIndividualKymIncomeSourceListQuery,
  TError = unknown
>(
  variables: GetIndividualKymIncomeSourceListQueryVariables,
  options?: UseQueryOptions<GetIndividualKymIncomeSourceListQuery, TError, TData>
) =>
  useQuery<GetIndividualKymIncomeSourceListQuery, TError, TData>(
    ['getIndividualKymIncomeSourceList', variables],
    useAxios<GetIndividualKymIncomeSourceListQuery, GetIndividualKymIncomeSourceListQueryVariables>(
      GetIndividualKymIncomeSourceListDocument
    ).bind(null, variables),
    options
  );
export const GetKymDocumentsListDocument = `
    query getKYMDocumentsList($memberId: String!) {
  document {
    listKYMDocuments(memberId: $memberId) {
      data {
        fieldId
        docData {
          identifier
          url
        }
      }
    }
  }
}
    `;
export const useGetKymDocumentsListQuery = <TData = GetKymDocumentsListQuery, TError = unknown>(
  variables: GetKymDocumentsListQueryVariables,
  options?: UseQueryOptions<GetKymDocumentsListQuery, TError, TData>
) =>
  useQuery<GetKymDocumentsListQuery, TError, TData>(
    ['getKYMDocumentsList', variables],
    useAxios<GetKymDocumentsListQuery, GetKymDocumentsListQueryVariables>(
      GetKymDocumentsListDocument
    ).bind(null, variables),
    options
  );
export const GetIndividualKymIdentificationListDocument = `
    query getIndividualKymIdentificationList($id: String!) {
  members {
    individual(id: $id) {
      listIdentification {
        data {
          id
          idNo
          idType
          place
          date
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymIdentificationListQuery = <
  TData = GetIndividualKymIdentificationListQuery,
  TError = unknown
>(
  variables: GetIndividualKymIdentificationListQueryVariables,
  options?: UseQueryOptions<GetIndividualKymIdentificationListQuery, TError, TData>
) =>
  useQuery<GetIndividualKymIdentificationListQuery, TError, TData>(
    ['getIndividualKymIdentificationList', variables],
    useAxios<
      GetIndividualKymIdentificationListQuery,
      GetIndividualKymIdentificationListQueryVariables
    >(GetIndividualKymIdentificationListDocument).bind(null, variables),
    options
  );
export const GetMemberDetailsDocument = `
    query getMemberDetails($id: ID!) {
  members {
    details(id: $id) {
      data {
        id
        name
        code
        address {
          state
          district
          localGovernment
          wardNo
          locality
          houseNo
        }
        contact
        share {
          summary {
            memberId
            member {
              id
              name
            }
            count
            amount
          }
        }
        profilePicUrl
        signaturePicUrl
        profile {
          ... on KymIndFormStateQuery {
            data {
              formData {
                basicInformation {
                  gender
                  dateOfBirth
                  age
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberDetailsQuery = <TData = GetMemberDetailsQuery, TError = unknown>(
  variables: GetMemberDetailsQueryVariables,
  options?: UseQueryOptions<GetMemberDetailsQuery, TError, TData>
) =>
  useQuery<GetMemberDetailsQuery, TError, TData>(
    ['getMemberDetails', variables],
    useAxios<GetMemberDetailsQuery, GetMemberDetailsQueryVariables>(GetMemberDetailsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetOfficialUseDocument = `
    query getOfficialUse($id: ID!) {
  members {
    officialUse(id: $id) {
      recordId
      record {
        id
        isStaff
        checkSanction
        checkNegative
        riskCategory
        docCollectedAndVerified
        acceptableAddressDoc
      }
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetOfficialUseQuery = <TData = GetOfficialUseQuery, TError = unknown>(
  variables: GetOfficialUseQueryVariables,
  options?: UseQueryOptions<GetOfficialUseQuery, TError, TData>
) =>
  useQuery<GetOfficialUseQuery, TError, TData>(
    ['getOfficialUse', variables],
    useAxios<GetOfficialUseQuery, GetOfficialUseQueryVariables>(GetOfficialUseDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMemberPdfDocument = `
    query getMemberPDF($id: ID!) {
  members {
    memberPDF(id: $id)
  }
}
    `;
export const useGetMemberPdfQuery = <TData = GetMemberPdfQuery, TError = unknown>(
  variables: GetMemberPdfQueryVariables,
  options?: UseQueryOptions<GetMemberPdfQuery, TError, TData>
) =>
  useQuery<GetMemberPdfQuery, TError, TData>(
    ['getMemberPDF', variables],
    useAxios<GetMemberPdfQuery, GetMemberPdfQueryVariables>(GetMemberPdfDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllSavedReportsDocument = `
    query getAllSavedReports($pagination: Pagination) {
  report {
    listReports(pagination: $pagination) {
      totalCount
      pageInfo {
        ...Pagination
      }
      edges {
        cursor
        node {
          id
          lastModifiedDate
          name
          reportType
          savedBy
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAllSavedReportsQuery = <TData = GetAllSavedReportsQuery, TError = unknown>(
  variables?: GetAllSavedReportsQueryVariables,
  options?: UseQueryOptions<GetAllSavedReportsQuery, TError, TData>
) =>
  useQuery<GetAllSavedReportsQuery, TError, TData>(
    variables === undefined ? ['getAllSavedReports'] : ['getAllSavedReports', variables],
    useAxios<GetAllSavedReportsQuery, GetAllSavedReportsQueryVariables>(
      GetAllSavedReportsDocument
    ).bind(null, variables),
    options
  );
export const GetSavedReportDocument = `
    query getSavedReport($reportId: ID!) {
  report {
    getReport(reportId: $reportId) {
      name
      settings {
        ... on ShareStatementReportSettingsType {
          filter
          memberId
          periodType
          customPeriod {
            from
            to
          }
        }
      }
    }
  }
}
    `;
export const useGetSavedReportQuery = <TData = GetSavedReportQuery, TError = unknown>(
  variables: GetSavedReportQueryVariables,
  options?: UseQueryOptions<GetSavedReportQuery, TError, TData>
) =>
  useQuery<GetSavedReportQuery, TError, TData>(
    ['getSavedReport', variables],
    useAxios<GetSavedReportQuery, GetSavedReportQueryVariables>(GetSavedReportDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareStatementDocument = `
    query getShareStatement($data: ShareStatementReportSettings!) {
  report {
    shareStatementReport(data: $data) {
      member {
        id
        name
        address {
          wardNo
          state
          district
          houseNo
          localGovernment
        }
        dateJoined
      }
      statement {
        ... on ShareStatementReport {
          shareStatement {
            date
            particular
            noOfShares
            returnAmountDr
            purchaseAmountCr
            balanceSheet
          }
          totals {
            totalShares
            totalDr
            totalCr
            totalBalanceSheet
          }
        }
      }
    }
  }
}
    `;
export const useGetShareStatementQuery = <TData = GetShareStatementQuery, TError = unknown>(
  variables: GetShareStatementQueryVariables,
  options?: UseQueryOptions<GetShareStatementQuery, TError, TData>
) =>
  useQuery<GetShareStatementQuery, TError, TData>(
    ['getShareStatement', variables],
    useAxios<GetShareStatementQuery, GetShareStatementQueryVariables>(
      GetShareStatementDocument
    ).bind(null, variables),
    options
  );
export const GetGlobalSearchDocument = `
    query getGlobalSearch($filter: SearchFilterData, $pagination: Pagination) {
  search {
    globalPages(filter: $filter, pagination: $pagination) {
      data {
        edges {
          cursor
          node {
            ... on GlobalPagesResultNode {
              fullCode
              hasParam
              iconType
              page
              url
            }
          }
        }
        totalCount
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetGlobalSearchQuery = <TData = GetGlobalSearchQuery, TError = unknown>(
  variables?: GetGlobalSearchQueryVariables,
  options?: UseQueryOptions<GetGlobalSearchQuery, TError, TData>
) =>
  useQuery<GetGlobalSearchQuery, TError, TData>(
    variables === undefined ? ['getGlobalSearch'] : ['getGlobalSearch', variables],
    useAxios<GetGlobalSearchQuery, GetGlobalSearchQueryVariables>(GetGlobalSearchDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAlternativeFeeAndChargesDocument = `
    query getAlternativeFeeAndCharges {
  settings {
    general {
      alternativeChannel {
        feesAndCharges {
          data {
            id
            serviceType
            ledgerId
            amount
          }
        }
      }
    }
  }
}
    `;
export const useGetAlternativeFeeAndChargesQuery = <
  TData = GetAlternativeFeeAndChargesQuery,
  TError = unknown
>(
  variables?: GetAlternativeFeeAndChargesQueryVariables,
  options?: UseQueryOptions<GetAlternativeFeeAndChargesQuery, TError, TData>
) =>
  useQuery<GetAlternativeFeeAndChargesQuery, TError, TData>(
    variables === undefined
      ? ['getAlternativeFeeAndCharges']
      : ['getAlternativeFeeAndCharges', variables],
    useAxios<GetAlternativeFeeAndChargesQuery, GetAlternativeFeeAndChargesQueryVariables>(
      GetAlternativeFeeAndChargesDocument
    ).bind(null, variables),
    options
  );
export const GetActivatedServiceDocument = `
    query getActivatedService($memberId: String!) {
  alternativeChannel {
    memberActivations(memberId: $memberId) {
      eBanking
      mobileBanking
      smsBanking
    }
  }
}
    `;
export const useGetActivatedServiceQuery = <TData = GetActivatedServiceQuery, TError = unknown>(
  variables: GetActivatedServiceQueryVariables,
  options?: UseQueryOptions<GetActivatedServiceQuery, TError, TData>
) =>
  useQuery<GetActivatedServiceQuery, TError, TData>(
    ['getActivatedService', variables],
    useAxios<GetActivatedServiceQuery, GetActivatedServiceQueryVariables>(
      GetActivatedServiceDocument
    ).bind(null, variables),
    options
  );
export const GetAlternativeChannelListDocument = `
    query getAlternativeChannelList($filter: AlternativeChannelFilter, $paginate: Pagination) {
  alternativeChannel {
    list(filter: $filter, paginate: $paginate) {
      totalCount
      pageInfo {
        ...Pagination
      }
      edges {
        cursor
        data {
          id
          name
          memberId
          coopConnection
          lastActive
          phoneNumber
          serviceStatus
          serviceType
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAlternativeChannelListQuery = <
  TData = GetAlternativeChannelListQuery,
  TError = unknown
>(
  variables?: GetAlternativeChannelListQueryVariables,
  options?: UseQueryOptions<GetAlternativeChannelListQuery, TError, TData>
) =>
  useQuery<GetAlternativeChannelListQuery, TError, TData>(
    variables === undefined
      ? ['getAlternativeChannelList']
      : ['getAlternativeChannelList', variables],
    useAxios<GetAlternativeChannelListQuery, GetAlternativeChannelListQueryVariables>(
      GetAlternativeChannelListDocument
    ).bind(null, variables),
    options
  );
export const GetAcFeeCoaDocument = `
    query getACFeeCOA {
  settings {
    chartsOfAccount {
      accountsUnder(accountCode: ["160.6", "160.8"]) {
        data {
          id
          accountCode
          name
        }
      }
    }
  }
}
    `;
export const useGetAcFeeCoaQuery = <TData = GetAcFeeCoaQuery, TError = unknown>(
  variables?: GetAcFeeCoaQueryVariables,
  options?: UseQueryOptions<GetAcFeeCoaQuery, TError, TData>
) =>
  useQuery<GetAcFeeCoaQuery, TError, TData>(
    variables === undefined ? ['getACFeeCOA'] : ['getACFeeCOA', variables],
    useAxios<GetAcFeeCoaQuery, GetAcFeeCoaQueryVariables>(GetAcFeeCoaDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAuditLogListDocument = `
    query getAuditLogList {
  auditLog {
    humanize {
      __typename
      ... on AuditLogHumanizeResult {
        data {
          timestamp
          narration
          extraData
        }
      }
    }
  }
}
    `;
export const useGetAuditLogListQuery = <TData = GetAuditLogListQuery, TError = unknown>(
  variables?: GetAuditLogListQueryVariables,
  options?: UseQueryOptions<GetAuditLogListQuery, TError, TData>
) =>
  useQuery<GetAuditLogListQuery, TError, TData>(
    variables === undefined ? ['getAuditLogList'] : ['getAuditLogList', variables],
    useAxios<GetAuditLogListQuery, GetAuditLogListQueryVariables>(GetAuditLogListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBranchListDocument = `
    query getBranchList($paginate: Pagination, $filter: BranchSearchFilter) {
  settings {
    general {
      branch {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              branchCode
              name
              category
              estDate
              managerName
              address {
                state
                district
                localGovernment
                wardNo
                locality
                houseNo
              }
              location {
                longitude
                latitude
              }
              contactNumber
              email
              abbsTransaction {
                abbsStatus
                receivableAccountId
                payableAccountId
              }
              plTransferId
              tdsTransaferId
              branchStatus
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetBranchListQuery = <TData = GetBranchListQuery, TError = unknown>(
  variables?: GetBranchListQueryVariables,
  options?: UseQueryOptions<GetBranchListQuery, TError, TData>
) =>
  useQuery<GetBranchListQuery, TError, TData>(
    variables === undefined ? ['getBranchList'] : ['getBranchList', variables],
    useAxios<GetBranchListQuery, GetBranchListQueryVariables>(GetBranchListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetBranchEditDataDocument = `
    query getBranchEditData($id: ID!) {
  settings {
    general {
      branch {
        formState(id: $id) {
          data {
            branchCode
            name
            category
            estDate
            managerName
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            location {
              longitude
              latitude
            }
            phoneNumber
            email
            abbsStatus
            receivableAccountId
            payableAccountId
            plTransferId
            tdsTransaferId
            branchStatus
          }
          error {
            __typename
          }
        }
      }
    }
  }
}
    `;
export const useGetBranchEditDataQuery = <TData = GetBranchEditDataQuery, TError = unknown>(
  variables: GetBranchEditDataQueryVariables,
  options?: UseQueryOptions<GetBranchEditDataQuery, TError, TData>
) =>
  useQuery<GetBranchEditDataQuery, TError, TData>(
    ['getBranchEditData', variables],
    useAxios<GetBranchEditDataQuery, GetBranchEditDataQueryVariables>(
      GetBranchEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetCoaListDocument = `
    query getCOAList($filter: ChartsOfAccountFilter!) {
  settings {
    general {
      chartsOfAccount {
        accounts(filter: $filter) {
          data {
            id
            name
            under
            accountClass
            accountCode
            currency
            accountType
            openingBalance
          }
        }
      }
    }
  }
}
    `;
export const useGetCoaListQuery = <TData = GetCoaListQuery, TError = unknown>(
  variables: GetCoaListQueryVariables,
  options?: UseQueryOptions<GetCoaListQuery, TError, TData>
) =>
  useQuery<GetCoaListQuery, TError, TData>(
    ['getCOAList', variables],
    useAxios<GetCoaListQuery, GetCoaListQueryVariables>(GetCoaListDocument).bind(null, variables),
    options
  );
export const GetCoaFullViewDocument = `
    query getCoaFullView {
  settings {
    chartsOfAccount {
      fullView {
        data {
          id
          name
          under
          accountType
          accountClass
          accountCode
        }
      }
    }
  }
}
    `;
export const useGetCoaFullViewQuery = <TData = GetCoaFullViewQuery, TError = unknown>(
  variables?: GetCoaFullViewQueryVariables,
  options?: UseQueryOptions<GetCoaFullViewQuery, TError, TData>
) =>
  useQuery<GetCoaFullViewQuery, TError, TData>(
    variables === undefined ? ['getCoaFullView'] : ['getCoaFullView', variables],
    useAxios<GetCoaFullViewQuery, GetCoaFullViewQueryVariables>(GetCoaFullViewDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetCoaBankListDocument = `
    query getCOABankList($accountCode: [String]) {
  settings {
    chartsOfAccount {
      accountsUnder(accountCode: $accountCode) {
        data {
          id
          accountCode
          name
        }
      }
    }
  }
}
    `;
export const useGetCoaBankListQuery = <TData = GetCoaBankListQuery, TError = unknown>(
  variables?: GetCoaBankListQueryVariables,
  options?: UseQueryOptions<GetCoaBankListQuery, TError, TData>
) =>
  useQuery<GetCoaBankListQuery, TError, TData>(
    variables === undefined ? ['getCOABankList'] : ['getCOABankList', variables],
    useAxios<GetCoaBankListQuery, GetCoaBankListQueryVariables>(GetCoaBankListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanProductListDocument = `
    query getLoanProductList($paginate: Pagination, $filter: LoanProductSearchFilter) {
  settings {
    general {
      loanProducts {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              createdBy {
                id
                name
                username
                userType
              }
              createdDate
              modifiedBy {
                id
                name
                username
                userType
              }
              productName
              productCodeString
              productCode {
                prefix
                initialNo
              }
              productType
              productSubType
              interest {
                minRate
                maxRate
                defaultRate
                ceoAuthority
                boardAuthority
              }
            }
          }
          totalCount
        }
      }
    }
  }
}
    `;
export const useGetLoanProductListQuery = <TData = GetLoanProductListQuery, TError = unknown>(
  variables?: GetLoanProductListQueryVariables,
  options?: UseQueryOptions<GetLoanProductListQuery, TError, TData>
) =>
  useQuery<GetLoanProductListQuery, TError, TData>(
    variables === undefined ? ['getLoanProductList'] : ['getLoanProductList', variables],
    useAxios<GetLoanProductListQuery, GetLoanProductListQueryVariables>(
      GetLoanProductListDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductEditDataDocument = `
    query getLoanProductEditData($id: ID!) {
  settings {
    general {
      loanProducts {
        formState(id: $id) {
          data {
            id
            objState
            createdAt
            modifiedAt
            productName
            productType
            productSubType
            productNature
            productCode {
              prefix
              initialNo
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            minimumLoanAmount
            maxLoanAmount
            repaymentScheme
            allowPartialInstallment
            installmentFrequency
            isMonthlyInstallmentCompulsory
            interestMethod
            isPenaltyApplicable
            penaltyType
            penaltyOnPrincipal {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            penaltyOnInterest {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            penaltyOnInstallment {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            isRebateApplicable
            rebate {
              dayBeforeInstallmentDate
              rebateRate
              rebateAmount
              rebateLedgerMapping
            }
            minGraceDurationUnit
            minGraceDurationUnitNumber
            maxGraceDurationUnit
            maxGraceDurationUnitNumber
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
            }
            updateInterest
            waiveInterest
            postingFrequency
            loanProcessingCharge {
              serviceName
              ledgerName
              amount
            }
            isInsuranceApplicable
            insuranceType {
              type
              amount
              rate
            }
            ledgerMapping {
              principal
              interestAccuredDaily
              interestIncome
            }
            isStaffProduct
            supportMultipleAccounts
            loanScheduleChangeOverride
            requiredDocuments
            isCollateralRequired
            allowGurantee
            maxPercentOfGurantee
            collateralTypes
            collateralValue {
              type
              minFMV
              maxFMV
              minDV
              maxDV
              minValue
              maxValue
            }
            prematurePenaltySetup {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductEditDataQuery = <
  TData = GetLoanProductEditDataQuery,
  TError = unknown
>(
  variables: GetLoanProductEditDataQueryVariables,
  options?: UseQueryOptions<GetLoanProductEditDataQuery, TError, TData>
) =>
  useQuery<GetLoanProductEditDataQuery, TError, TData>(
    ['getLoanProductEditData', variables],
    useAxios<GetLoanProductEditDataQuery, GetLoanProductEditDataQueryVariables>(
      GetLoanProductEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetLoanGeneralSettingsDocument = `
    query getLoanGeneralSettings {
  settings {
    general {
      loan {
        general {
          emi
          epi
          flat
          collateralList {
            id
            name
            enabled
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanGeneralSettingsQuery = <
  TData = GetLoanGeneralSettingsQuery,
  TError = unknown
>(
  variables?: GetLoanGeneralSettingsQueryVariables,
  options?: UseQueryOptions<GetLoanGeneralSettingsQuery, TError, TData>
) =>
  useQuery<GetLoanGeneralSettingsQuery, TError, TData>(
    variables === undefined ? ['getLoanGeneralSettings'] : ['getLoanGeneralSettings', variables],
    useAxios<GetLoanGeneralSettingsQuery, GetLoanGeneralSettingsQueryVariables>(
      GetLoanGeneralSettingsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductSettingsDocument = `
    query getLoanProductSettings {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductSettingsQuery = <
  TData = GetLoanProductSettingsQuery,
  TError = unknown
>(
  variables?: GetLoanProductSettingsQueryVariables,
  options?: UseQueryOptions<GetLoanProductSettingsQuery, TError, TData>
) =>
  useQuery<GetLoanProductSettingsQuery, TError, TData>(
    variables === undefined ? ['getLoanProductSettings'] : ['getLoanProductSettings', variables],
    useAxios<GetLoanProductSettingsQuery, GetLoanProductSettingsQueryVariables>(
      GetLoanProductSettingsDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductSubTypeDocument = `
    query getLoanProductSubType($productTypeId: String) {
  settings {
    general {
      loan {
        productType {
          productSubTypes(productTypeID: $productTypeId) {
            id
            productSubType
            productTypeID
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductSubTypeQuery = <TData = GetLoanProductSubTypeQuery, TError = unknown>(
  variables?: GetLoanProductSubTypeQueryVariables,
  options?: UseQueryOptions<GetLoanProductSubTypeQuery, TError, TData>
) =>
  useQuery<GetLoanProductSubTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanProductSubType'] : ['getLoanProductSubType', variables],
    useAxios<GetLoanProductSubTypeQuery, GetLoanProductSubTypeQueryVariables>(
      GetLoanProductSubTypeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanInsuranceSchemeDocument = `
    query getLoanInsuranceScheme {
  settings {
    general {
      loan {
        insuranceSchemes {
          id
          insuranceCompany
          insurancePremiumPercent
          maxAmount
          maxPercent
          minAmount
          paymentFrequency
          minPercent
          paymentType
          schemeName
        }
      }
    }
  }
}
    `;
export const useGetLoanInsuranceSchemeQuery = <
  TData = GetLoanInsuranceSchemeQuery,
  TError = unknown
>(
  variables?: GetLoanInsuranceSchemeQueryVariables,
  options?: UseQueryOptions<GetLoanInsuranceSchemeQuery, TError, TData>
) =>
  useQuery<GetLoanInsuranceSchemeQuery, TError, TData>(
    variables === undefined ? ['getLoanInsuranceScheme'] : ['getLoanInsuranceScheme', variables],
    useAxios<GetLoanInsuranceSchemeQuery, GetLoanInsuranceSchemeQueryVariables>(
      GetLoanInsuranceSchemeDocument
    ).bind(null, variables),
    options
  );
export const GetLoanProductTypeDocument = `
    query getLoanProductType {
  settings {
    general {
      loan {
        productType {
          productTypes {
            id
            productType
            description
          }
          productSubTypes {
            id
            productSubType
            productTypeID
          }
        }
      }
    }
  }
}
    `;
export const useGetLoanProductTypeQuery = <TData = GetLoanProductTypeQuery, TError = unknown>(
  variables?: GetLoanProductTypeQueryVariables,
  options?: UseQueryOptions<GetLoanProductTypeQuery, TError, TData>
) =>
  useQuery<GetLoanProductTypeQuery, TError, TData>(
    variables === undefined ? ['getLoanProductType'] : ['getLoanProductType', variables],
    useAxios<GetLoanProductTypeQuery, GetLoanProductTypeQueryVariables>(
      GetLoanProductTypeDocument
    ).bind(null, variables),
    options
  );
export const GetGeneralMemberSettingsDataDocument = `
    query getGeneralMemberSettingsData {
  settings {
    general {
      KYM {
        general {
          generalMember {
            record {
              memberType {
                individual
                institution
                cooperative
                cooperativeUnion
              }
              risk {
                generalRisk
                mediumRisk
                highRisk
              }
              charge {
                memberType
                ledgerId
                charge
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetGeneralMemberSettingsDataQuery = <
  TData = GetGeneralMemberSettingsDataQuery,
  TError = unknown
>(
  variables?: GetGeneralMemberSettingsDataQueryVariables,
  options?: UseQueryOptions<GetGeneralMemberSettingsDataQuery, TError, TData>
) =>
  useQuery<GetGeneralMemberSettingsDataQuery, TError, TData>(
    variables === undefined
      ? ['getGeneralMemberSettingsData']
      : ['getGeneralMemberSettingsData', variables],
    useAxios<GetGeneralMemberSettingsDataQuery, GetGeneralMemberSettingsDataQueryVariables>(
      GetGeneralMemberSettingsDataDocument
    ).bind(null, variables),
    options
  );
export const GetPreDefinedFieldsDocument = `
    query getPreDefinedFields($filter: PredefinedElementFilter!) {
  settings {
    form {
      predefined {
        details(filter: $filter) {
          data {
            ... on FormField {
              __typename
              id
              name
              fieldType
              hasOtherField
              order
              dependsOn
              isDefault
              options {
                order
                id
                name
                enabled
                isDefault
              }
            }
            ... on FormSection {
              __typename
              id
              name
              isDefault
              sectionType
              maxSize
              fields {
                id
                name
                enabled
                fieldType
                isDefault
              }
              subSections {
                id
                name
                search_term
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetPreDefinedFieldsQuery = <TData = GetPreDefinedFieldsQuery, TError = unknown>(
  variables: GetPreDefinedFieldsQueryVariables,
  options?: UseQueryOptions<GetPreDefinedFieldsQuery, TError, TData>
) =>
  useQuery<GetPreDefinedFieldsQuery, TError, TData>(
    ['getPreDefinedFields', variables],
    useAxios<GetPreDefinedFieldsQuery, GetPreDefinedFieldsQueryVariables>(
      GetPreDefinedFieldsDocument
    ).bind(null, variables),
    options
  );
export const GetCustomFieldsDocument = `
    query getCustomFields($kymType: FormCategory!) {
  settings {
    form {
      custom {
        list(filter: {category: $kymType}) {
          data {
            ... on FormField {
              __typename
              id
              name
              fieldType
              hasOtherField
              order
              dependsOn
              isDefault
              options {
                order
                id
                name
                enabled
                isDefault
              }
            }
            ... on FormSection {
              __typename
              id
              name
              isDefault
              sectionType
              maxSize
              fields {
                id
                name
                enabled
                fieldType
                isDefault
              }
              subSections {
                id
                name
                search_term
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCustomFieldsQuery = <TData = GetCustomFieldsQuery, TError = unknown>(
  variables: GetCustomFieldsQueryVariables,
  options?: UseQueryOptions<GetCustomFieldsQuery, TError, TData>
) =>
  useQuery<GetCustomFieldsQuery, TError, TData>(
    ['getCustomFields', variables],
    useAxios<GetCustomFieldsQuery, GetCustomFieldsQueryVariables>(GetCustomFieldsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetDeclarationDocument = `
    query getDeclaration($kymType: DeclarationFor!) {
  settings {
    declaration {
      get(for: $kymType) {
        data {
          content
        }
      }
    }
  }
}
    `;
export const useGetDeclarationQuery = <TData = GetDeclarationQuery, TError = unknown>(
  variables: GetDeclarationQueryVariables,
  options?: UseQueryOptions<GetDeclarationQuery, TError, TData>
) =>
  useQuery<GetDeclarationQuery, TError, TData>(
    ['getDeclaration', variables],
    useAxios<GetDeclarationQuery, GetDeclarationQueryVariables>(GetDeclarationDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetDepositSettingsIroDocument = `
    query getDepositSettingsIro {
  settings {
    general {
      deposit {
        ... on DepositSettingsQuery {
          iroFormState {
            data {
              iroName
              iroAddress
              iroCode
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositSettingsIroQuery = <TData = GetDepositSettingsIroQuery, TError = unknown>(
  variables?: GetDepositSettingsIroQueryVariables,
  options?: UseQueryOptions<GetDepositSettingsIroQuery, TError, TData>
) =>
  useQuery<GetDepositSettingsIroQuery, TError, TData>(
    variables === undefined ? ['getDepositSettingsIro'] : ['getDepositSettingsIro', variables],
    useAxios<GetDepositSettingsIroQuery, GetDepositSettingsIroQueryVariables>(
      GetDepositSettingsIroDocument
    ).bind(null, variables),
    options
  );
export const GetDepositSettingsTdsDocument = `
    query getDepositSettingsTds {
  settings {
    general {
      deposit {
        ... on DepositSettingsQuery {
          tdsFormState {
            data {
              individual
              institution
              cooperative
              coopUnion
            }
            error {
              __typename
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositSettingsTdsQuery = <TData = GetDepositSettingsTdsQuery, TError = unknown>(
  variables?: GetDepositSettingsTdsQueryVariables,
  options?: UseQueryOptions<GetDepositSettingsTdsQuery, TError, TData>
) =>
  useQuery<GetDepositSettingsTdsQuery, TError, TData>(
    variables === undefined ? ['getDepositSettingsTds'] : ['getDepositSettingsTds', variables],
    useAxios<GetDepositSettingsTdsQuery, GetDepositSettingsTdsQueryVariables>(
      GetDepositSettingsTdsDocument
    ).bind(null, variables),
    options
  );
export const GetDepositProductSettingsListDocument = `
    query getDepositProductSettingsList($paginate: Pagination, $filter: DepositProductSearchFilter) {
  settings {
    general {
      depositProduct {
        list(paginate: $paginate, filter: $filter) {
          totalCount
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              objState
              productCode
              productName
              nature
              interest
              interest
              createdDate
              typeOfMember
              createdAt
              createdBy {
                id
                name
                username
                userType
              }
              modifiedAt
              modifiedBy {
                id
                name
                username
                userType
              }
            }
          }
          totalCount
        }
      }
    }
  }
}
    `;
export const useGetDepositProductSettingsListQuery = <
  TData = GetDepositProductSettingsListQuery,
  TError = unknown
>(
  variables?: GetDepositProductSettingsListQueryVariables,
  options?: UseQueryOptions<GetDepositProductSettingsListQuery, TError, TData>
) =>
  useQuery<GetDepositProductSettingsListQuery, TError, TData>(
    variables === undefined
      ? ['getDepositProductSettingsList']
      : ['getDepositProductSettingsList', variables],
    useAxios<GetDepositProductSettingsListQuery, GetDepositProductSettingsListQueryVariables>(
      GetDepositProductSettingsListDocument
    ).bind(null, variables),
    options
  );
export const GetDepositProductSettingsEditDataDocument = `
    query getDepositProductSettingsEditData($id: ID!) {
  settings {
    general {
      depositProduct {
        formState(id: $id) {
          data {
            productName
            nature
            productCode {
              prefix
              initialNo
            }
            description
            typeOfMember
            criteria
            minAge
            maxAge
            genderId
            maritalStatusId
            educationQualification
            transactionAllowed
            noOftransactionAllowed
            ethnicity
            occupation
            foreignEmployment
            natureOfBusinessInstitution
            natureOFBusinessCoop
            cooperativeType
            isForMinors
            depositAmount {
              minAmount
              maxAmount
            }
            withdrawAmountLimit {
              minAmount
              maxAmount
            }
            fixedDepositAmountLimit {
              minAmount
              maxAmount
            }
            depositFrequency
            penalty
            penaltyData {
              dayAfterInstallmentDate
              penaltyRate
              penaltyAmount
              penaltyLedgerMapping
            }
            rebate
            rebateData {
              dayBeforeInstallmentDate
              noOfInstallment
              rebateAmount
              rebateRate
              rebateLedgerMapping
            }
            isTenureApplicable
            tenureUnit
            minTenureUnitNumber
            maxTenureUnitNumber
            balanceLimit {
              minAmount
              maxAmount
            }
            interest {
              minRate
              maxRate
              defaultRate
              ceoAuthority
              boardAuthority
              additionalRate
            }
            ladderRate
            ladderRateData {
              type
              amount
              rate
            }
            postingFrequency
            maxPostingFreqDifference
            accountType
            serviceCharge {
              serviceName
              ledgerName
              amount
            }
            accountCloseCharge {
              serviceName
              ledgerName
              amount
            }
            chequeCharge {
              serviceName
              ledgerName
              amount
            }
            atmCharge {
              serviceName
              ledgerName
              amount
            }
            alternativeChannelCharge {
              serviceName
              ledgerName
              amount
            }
            dormantSetup {
              duration
              condition
            }
            withdrawPenalty {
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
            isMandatorySaving
            autoOpen
            allowLoan
            percentageOfDeposit
            alternativeChannels
            atmFacility
            chequeIssue
            supportMultiple
            staffProduct
            withdrawRestricted
            specifyWithdrawRestriction
            wealthBuildingProduct
            individualDocuments
            institutionDocuments
            prematurePenalty {
              penaltyDateType
              noOfDays
              penaltyLedgerMapping
              penaltyAmount
              penaltyRate
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetDepositProductSettingsEditDataQuery = <
  TData = GetDepositProductSettingsEditDataQuery,
  TError = unknown
>(
  variables: GetDepositProductSettingsEditDataQueryVariables,
  options?: UseQueryOptions<GetDepositProductSettingsEditDataQuery, TError, TData>
) =>
  useQuery<GetDepositProductSettingsEditDataQuery, TError, TData>(
    ['getDepositProductSettingsEditData', variables],
    useAxios<
      GetDepositProductSettingsEditDataQuery,
      GetDepositProductSettingsEditDataQueryVariables
    >(GetDepositProductSettingsEditDataDocument).bind(null, variables),
    options
  );
export const GetSettingsOptionsFieldsDocument = `
    query getSettingsOptionsFields($searchTerm: FormFieldSearchTerm!, $category: FormCategory!) {
  form {
    options {
      predefined(filter: {searchTerm: $searchTerm, category: $category}) {
        data {
          id
          name
        }
      }
    }
  }
}
    `;
export const useGetSettingsOptionsFieldsQuery = <
  TData = GetSettingsOptionsFieldsQuery,
  TError = unknown
>(
  variables: GetSettingsOptionsFieldsQueryVariables,
  options?: UseQueryOptions<GetSettingsOptionsFieldsQuery, TError, TData>
) =>
  useQuery<GetSettingsOptionsFieldsQuery, TError, TData>(
    ['getSettingsOptionsFields', variables],
    useAxios<GetSettingsOptionsFieldsQuery, GetSettingsOptionsFieldsQueryVariables>(
      GetSettingsOptionsFieldsDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareBonusDataDocument = `
    query getSettingsShareBonusData {
  settings {
    general {
      share {
        bonus {
          taxPayer
          taxRate
          accountMapping
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareBonusDataQuery = <
  TData = GetSettingsShareBonusDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareBonusDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareBonusDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareBonusDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareBonusData']
      : ['getSettingsShareBonusData', variables],
    useAxios<GetSettingsShareBonusDataQuery, GetSettingsShareBonusDataQueryVariables>(
      GetSettingsShareBonusDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareDividendDataDocument = `
    query getSettingsShareDividendData {
  settings {
    general {
      share {
        dividend {
          distributionCondition
          dividendRate {
            quarterly {
              firstQuarter
              secondQuarter
              thirdQuarter
              fourthQuarter
            }
            monthly {
              firstMonth
              secondMonth
              thirdMonth
              fourthMonth
              fifthMonth
              sixthMonth
              seventhMonth
              eightMonth
              ninthMonth
              tenthMonth
              eleventhMonth
              twelfthMonth
            }
          }
          dividendTransferTreatment
          accountForFractionalDividends
          accountForShareDividends
          organizationFundForDividends
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareDividendDataQuery = <
  TData = GetSettingsShareDividendDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareDividendDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareDividendDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareDividendDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareDividendData']
      : ['getSettingsShareDividendData', variables],
    useAxios<GetSettingsShareDividendDataQuery, GetSettingsShareDividendDataQueryVariables>(
      GetSettingsShareDividendDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareIssueChargesDataDocument = `
    query getSettingsShareIssueChargesData {
  settings {
    general {
      share {
        shareIssueCharges {
          shareCertificate {
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
          other {
            name
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareIssueChargesDataQuery = <
  TData = GetSettingsShareIssueChargesDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareIssueChargesDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareIssueChargesDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareIssueChargesDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareIssueChargesData']
      : ['getSettingsShareIssueChargesData', variables],
    useAxios<GetSettingsShareIssueChargesDataQuery, GetSettingsShareIssueChargesDataQueryVariables>(
      GetSettingsShareIssueChargesDataDocument
    ).bind(null, variables),
    options
  );
export const GetLedgerMapingShareDocument = `
    query getLedgerMapingShare {
  settings {
    general {
      chartsOfAccount {
        accountsUnder(accountCode: "160.8") {
          data {
            id
            accountCode
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetLedgerMapingShareQuery = <TData = GetLedgerMapingShareQuery, TError = unknown>(
  variables?: GetLedgerMapingShareQueryVariables,
  options?: UseQueryOptions<GetLedgerMapingShareQuery, TError, TData>
) =>
  useQuery<GetLedgerMapingShareQuery, TError, TData>(
    variables === undefined ? ['getLedgerMapingShare'] : ['getLedgerMapingShare', variables],
    useAxios<GetLedgerMapingShareQuery, GetLedgerMapingShareQueryVariables>(
      GetLedgerMapingShareDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareReturnChargesDataDocument = `
    query getSettingsShareReturnChargesData {
  settings {
    general {
      share {
        shareReturnCharges {
          other {
            name
            minShare
            maxShare
            type
            charge
            ledgerMapping
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareReturnChargesDataQuery = <
  TData = GetSettingsShareReturnChargesDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareReturnChargesDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareReturnChargesDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareReturnChargesDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareReturnChargesData']
      : ['getSettingsShareReturnChargesData', variables],
    useAxios<
      GetSettingsShareReturnChargesDataQuery,
      GetSettingsShareReturnChargesDataQueryVariables
    >(GetSettingsShareReturnChargesDataDocument).bind(null, variables),
    options
  );
export const GetSettingsShareGeneralDataDocument = `
    query getSettingsShareGeneralData {
  settings {
    general {
      share {
        general {
          typeOfShare
          multiplicityFactor
          minimumQuantityOfShare
          maximumQuantityOfShare
          paidUpShareRate
          shareIssueAuthority
          typeOfShareKitta
          noOfAuthorisedPaidUpShare
          noOfIssuedShare
          startNumber
          endNumber
          incrementor
          noOfDigits
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareGeneralDataQuery = <
  TData = GetSettingsShareGeneralDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareGeneralDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareGeneralDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareGeneralDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareGeneralData']
      : ['getSettingsShareGeneralData', variables],
    useAxios<GetSettingsShareGeneralDataQuery, GetSettingsShareGeneralDataQueryVariables>(
      GetSettingsShareGeneralDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsShareTransferDataDocument = `
    query getSettingsShareTransferData {
  settings {
    general {
      share {
        transfer {
          type
          accountForShareFund
          mappedShareLedger
        }
      }
    }
  }
}
    `;
export const useGetSettingsShareTransferDataQuery = <
  TData = GetSettingsShareTransferDataQuery,
  TError = unknown
>(
  variables?: GetSettingsShareTransferDataQueryVariables,
  options?: UseQueryOptions<GetSettingsShareTransferDataQuery, TError, TData>
) =>
  useQuery<GetSettingsShareTransferDataQuery, TError, TData>(
    variables === undefined
      ? ['getSettingsShareTransferData']
      : ['getSettingsShareTransferData', variables],
    useAxios<GetSettingsShareTransferDataQuery, GetSettingsShareTransferDataQueryVariables>(
      GetSettingsShareTransferDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsUserListDataDocument = `
    query getSettingsUserListData($paginate: Pagination, $filter: MyraUserSearchFilter) {
  settings {
    myraUser {
      list(paginate: $paginate, filter: $filter) {
        totalCount
        edges {
          node {
            id
            objState
            createdAt
            modifiedAt
            name
            email
            contactNo
            gender
            dob
            role
            branch {
              id
            }
            profilePicUrl
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetSettingsUserListDataQuery = <
  TData = GetSettingsUserListDataQuery,
  TError = unknown
>(
  variables?: GetSettingsUserListDataQueryVariables,
  options?: UseQueryOptions<GetSettingsUserListDataQuery, TError, TData>
) =>
  useQuery<GetSettingsUserListDataQuery, TError, TData>(
    variables === undefined ? ['getSettingsUserListData'] : ['getSettingsUserListData', variables],
    useAxios<GetSettingsUserListDataQuery, GetSettingsUserListDataQueryVariables>(
      GetSettingsUserListDataDocument
    ).bind(null, variables),
    options
  );
export const GetSettingsUserEditDataDocument = `
    query getSettingsUserEditData($id: ID!) {
  settings {
    myraUser {
      formState(id: $id) {
        data {
          name
          email
          contactNo
          gender
          dob
          role
          branch
          identificationSelection
          identificationDetails {
            id
            idNo
            idType
            place
            date
          }
          permanentAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          isTempAsPermanentAddressSame
          temporaryAddress {
            provinceId
            districtId
            localGovernmentId
            wardNo
            locality
            houseNo
            coordinates {
              longitude
              latitude
            }
          }
          landlordName
          landlordContact
          profilePicture {
            identifier
            url
          }
        }
      }
    }
  }
}
    `;
export const useGetSettingsUserEditDataQuery = <
  TData = GetSettingsUserEditDataQuery,
  TError = unknown
>(
  variables: GetSettingsUserEditDataQueryVariables,
  options?: UseQueryOptions<GetSettingsUserEditDataQuery, TError, TData>
) =>
  useQuery<GetSettingsUserEditDataQuery, TError, TData>(
    ['getSettingsUserEditData', variables],
    useAxios<GetSettingsUserEditDataQuery, GetSettingsUserEditDataQueryVariables>(
      GetSettingsUserEditDataDocument
    ).bind(null, variables),
    options
  );
export const GetValuatorDocument = `
    query getValuator($id: ID!) {
  settings {
    general {
      valuator {
        formState(id: $id) {
          data {
            valuatorName
            valuatorType
            valuatorId
            academicQualification
            valuationLicenseNo
            renewalDate
            contractDate
            insurancePremium
            mobileNo
            phoneNo
            email
            documents
            address {
              localGovernmentId
              districtId
              provinceId
              houseNo
              locality
              wardNo
              coordinates {
                longitude
                latitude
              }
            }
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetValuatorQuery = <TData = GetValuatorQuery, TError = unknown>(
  variables: GetValuatorQueryVariables,
  options?: UseQueryOptions<GetValuatorQuery, TError, TData>
) =>
  useQuery<GetValuatorQuery, TError, TData>(
    ['getValuator', variables],
    useAxios<GetValuatorQuery, GetValuatorQueryVariables>(GetValuatorDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetValuatorListDocument = `
    query getValuatorList($paginate: Pagination) {
  settings {
    general {
      valuator {
        list(paginate: $paginate) {
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          totalCount
          edges {
            node {
              id
              valuatorName
              valuatorType
              address {
                localGovernment
                district
                houseNo
                locality
                state
                wardNo
              }
              phoneNo
              contractDate
            }
            cursor
          }
        }
      }
    }
  }
}
    `;
export const useGetValuatorListQuery = <TData = GetValuatorListQuery, TError = unknown>(
  variables?: GetValuatorListQueryVariables,
  options?: UseQueryOptions<GetValuatorListQuery, TError, TData>
) =>
  useQuery<GetValuatorListQuery, TError, TData>(
    variables === undefined ? ['getValuatorList'] : ['getValuatorList', variables],
    useAxios<GetValuatorListQuery, GetValuatorListQueryVariables>(GetValuatorListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetChartOfAccountsDocument = `
    query getChartOfAccounts {
  settings {
    general {
      chartsOfAccount {
        class {
          data {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetChartOfAccountsQuery = <TData = GetChartOfAccountsQuery, TError = unknown>(
  variables?: GetChartOfAccountsQueryVariables,
  options?: UseQueryOptions<GetChartOfAccountsQuery, TError, TData>
) =>
  useQuery<GetChartOfAccountsQuery, TError, TData>(
    variables === undefined ? ['getChartOfAccounts'] : ['getChartOfAccounts', variables],
    useAxios<GetChartOfAccountsQuery, GetChartOfAccountsQueryVariables>(
      GetChartOfAccountsDocument
    ).bind(null, variables),
    options
  );
export const GetShareBalanceListDocument = `
    query getShareBalanceList {
  share {
    balance {
      edges {
        node {
          member {
            id
            name
            profilePic
            profilePicUrl
          }
          count
          amount
        }
      }
    }
  }
}
    `;
export const useGetShareBalanceListQuery = <TData = GetShareBalanceListQuery, TError = unknown>(
  variables?: GetShareBalanceListQueryVariables,
  options?: UseQueryOptions<GetShareBalanceListQuery, TError, TData>
) =>
  useQuery<GetShareBalanceListQuery, TError, TData>(
    variables === undefined ? ['getShareBalanceList'] : ['getShareBalanceList', variables],
    useAxios<GetShareBalanceListQuery, GetShareBalanceListQueryVariables>(
      GetShareBalanceListDocument
    ).bind(null, variables),
    options
  );
export const GetShareRegisterListDocument = `
    query getShareRegisterList($pagination: Pagination, $filter: ShareRegisterFilter) {
  share {
    register(pagination: $pagination, filter: $filter) {
      edges {
        node {
          transactionDate
          transactionDirection
          member {
            id
            name
            profilePic
            profilePicUrl
          }
          balance
          startNumber
          shareAmount
          endNumber
          credit
          debit
        }
        cursor
      }
      totalCount
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetShareRegisterListQuery = <TData = GetShareRegisterListQuery, TError = unknown>(
  variables?: GetShareRegisterListQueryVariables,
  options?: UseQueryOptions<GetShareRegisterListQuery, TError, TData>
) =>
  useQuery<GetShareRegisterListQuery, TError, TData>(
    variables === undefined ? ['getShareRegisterList'] : ['getShareRegisterList', variables],
    useAxios<GetShareRegisterListQuery, GetShareRegisterListQueryVariables>(
      GetShareRegisterListDocument
    ).bind(null, variables),
    options
  );
export const GetShareHistoryDocument = `
    query getShareHistory($memberId: ID!) {
  share {
    history(memberId: $memberId) {
      history {
        id
        member {
          id
          name
        }
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        balance
        shareAmount
        extraFee {
          name
          value
        }
        totalAmount
        paymentMode
        bankId
        voucherNumber
        accountId
      }
      balance {
        member {
          id
          name
        }
        count
        amount
      }
    }
  }
}
    `;
export const useGetShareHistoryQuery = <TData = GetShareHistoryQuery, TError = unknown>(
  variables: GetShareHistoryQueryVariables,
  options?: UseQueryOptions<GetShareHistoryQuery, TError, TData>
) =>
  useQuery<GetShareHistoryQuery, TError, TData>(
    ['getShareHistory', variables],
    useAxios<GetShareHistoryQuery, GetShareHistoryQueryVariables>(GetShareHistoryDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetShareChargesDocument = `
    query getShareCharges($transactionType: SHARE_TRANSACTION_DIRECTION!, $shareCount: Int!) {
  share {
    charges(transactionType: $transactionType, shareCount: $shareCount) {
      id
      name
      charge
    }
  }
}
    `;
export const useGetShareChargesQuery = <TData = GetShareChargesQuery, TError = unknown>(
  variables: GetShareChargesQueryVariables,
  options?: UseQueryOptions<GetShareChargesQuery, TError, TData>
) =>
  useQuery<GetShareChargesQuery, TError, TData>(
    ['getShareCharges', variables],
    useAxios<GetShareChargesQuery, GetShareChargesQueryVariables>(GetShareChargesDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetDepositListDataDocument = `
    query getDepositListData($filter: AccountTransactionFilter, $pagination: Pagination) {
  transaction {
    listDeposit(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          name
          amount
          state
          paymentMode
          processedBy
          date
          agentName
          profilePicUrl
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetDepositListDataQuery = <TData = GetDepositListDataQuery, TError = unknown>(
  variables?: GetDepositListDataQueryVariables,
  options?: UseQueryOptions<GetDepositListDataQuery, TError, TData>
) =>
  useQuery<GetDepositListDataQuery, TError, TData>(
    variables === undefined ? ['getDepositListData'] : ['getDepositListData', variables],
    useAxios<GetDepositListDataQuery, GetDepositListDataQueryVariables>(
      GetDepositListDataDocument
    ).bind(null, variables),
    options
  );
export const GetWithdrawListDataDocument = `
    query getWithdrawListData($filter: AccountTransactionFilter, $pagination: Pagination) {
  transaction {
    listWithdraw(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          name
          amount
          state
          paymentMode
          processedBy
          date
          profilePicUrl
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetWithdrawListDataQuery = <TData = GetWithdrawListDataQuery, TError = unknown>(
  variables?: GetWithdrawListDataQueryVariables,
  options?: UseQueryOptions<GetWithdrawListDataQuery, TError, TData>
) =>
  useQuery<GetWithdrawListDataQuery, TError, TData>(
    variables === undefined ? ['getWithdrawListData'] : ['getWithdrawListData', variables],
    useAxios<GetWithdrawListDataQuery, GetWithdrawListDataQueryVariables>(
      GetWithdrawListDataDocument
    ).bind(null, variables),
    options
  );
export const GetAccountTransferListDataDocument = `
    query getAccountTransferListData($filter: AccountTransactionFilter, $pagination: Pagination) {
  transaction {
    listTransfer(filter: $filter, pagination: $pagination) {
      totalCount
      edges {
        node {
          ID
          amount
          state
          transferType
          date
        }
        cursor
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetAccountTransferListDataQuery = <
  TData = GetAccountTransferListDataQuery,
  TError = unknown
>(
  variables?: GetAccountTransferListDataQueryVariables,
  options?: UseQueryOptions<GetAccountTransferListDataQuery, TError, TData>
) =>
  useQuery<GetAccountTransferListDataQuery, TError, TData>(
    variables === undefined
      ? ['getAccountTransferListData']
      : ['getAccountTransferListData', variables],
    useAxios<GetAccountTransferListDataQuery, GetAccountTransferListDataQueryVariables>(
      GetAccountTransferListDataDocument
    ).bind(null, variables),
    options
  );
export const GetInstallmentsListDataDocument = `
    query getInstallmentsListData($id: ID!) {
  account {
    getInstallments(id: $id) {
      data {
        dueDate
        status
        monthName
        fine
        rebate
      }
      error {
        ...QueryError
      }
    }
  }
}
    ${QueryErrorFragmentDoc}`;
export const useGetInstallmentsListDataQuery = <
  TData = GetInstallmentsListDataQuery,
  TError = unknown
>(
  variables: GetInstallmentsListDataQueryVariables,
  options?: UseQueryOptions<GetInstallmentsListDataQuery, TError, TData>
) =>
  useQuery<GetInstallmentsListDataQuery, TError, TData>(
    ['getInstallmentsListData', variables],
    useAxios<GetInstallmentsListDataQuery, GetInstallmentsListDataQueryVariables>(
      GetInstallmentsListDataDocument
    ).bind(null, variables),
    options
  );
export const GetEndOfDayDateDataDocument = `
    query getEndOfDayDateData {
  transaction {
    endOfDayDate
  }
}
    `;
export const useGetEndOfDayDateDataQuery = <TData = GetEndOfDayDateDataQuery, TError = unknown>(
  variables?: GetEndOfDayDateDataQueryVariables,
  options?: UseQueryOptions<GetEndOfDayDateDataQuery, TError, TData>
) =>
  useQuery<GetEndOfDayDateDataQuery, TError, TData>(
    variables === undefined ? ['getEndOfDayDateData'] : ['getEndOfDayDateData', variables],
    useAxios<GetEndOfDayDateDataQuery, GetEndOfDayDateDataQueryVariables>(
      GetEndOfDayDateDataDocument
    ).bind(null, variables),
    options
  );
