mutation getNewId($idType: ID_TYPE) {
  newId(idType: $idType)
}

mutation setOfficialUse(
  $id: ID!
  $isStaff: Boolean
  $checkSanction: Boolean
  $checkNegative: Boolean
  $riskCategory: OfficialUseRiskCategory
  $docCollectedAndVerified: Boolean
  $acceptableAddressDoc: Boolean
) {
  members {
    officialUse(
      data: {
        id: $id
        isStaff: $isStaff
        checkSanction: $checkSanction
        checkNegative: $checkNegative
        riskCategory: $riskCategory
        docCollectedAndVerified: $docCollectedAndVerified
        acceptableAddressDoc: $acceptableAddressDoc
      }
    ) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}

mutation deleteDraft($memberId: ID!) {
  members {
    deleteDraft(memberId: $memberId) {
      recordId
      error {
        ...MutationError
      }
    }
  }
}

mutation issueCertificate($id: ID!) {
  members {
    issueCertificate(id: $id)
  }
}

mutation updateKym($date: Localized!, $id: ID!) {
  members {
    updateKym(date: $date, id: $id) {
      error {
        ...MutationError
      }
    }
  }
}

mutation makeMemberDormant($memberId: ID!, $data: MemberDormancyInput!) {
  members {
    makeDormant(memberId: $memberId, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}

mutation revokeMemberDormancy($memberId: ID!, $data: RevokeDormancyInput!) {
  members {
    revokeDormancy(memberId: $memberId, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}

mutation updateMemberDormancy($memberId: ID!, $data: UpdateDormancyInput!) {
  members {
    updateDormancy(memberId: $memberId, data: $data) {
      error {
        ...MutationError
      }
    }
  }
}

mutation memberTransferInitiate($memberId: ID!, $data: MemberTransferInput!) {
  members {
    transfer {
      initiate(memberId: $memberId, data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}

mutation memberTransferAction($requestId: ID!, $state: MemberTransferState!, $notes: String) {
  members {
    transfer {
      action(requestId: $requestId, state: $state, notes: $notes) {
        record {
          recordId
          memberName
          valueDate
          oldBranch
          newBranch
          state
          savingAccountList
          loanAccountList
        }
        error {
          ...MutationError
        }
      }
    }
  }
}

mutation balanceCertificate($id: ID!, $date: Localized!) {
  members {
    balanceCertificate(id: $id, date: $date)
  }
}

mutation updateBranchDuringActivation($memberId: ID!, $branchId: ID!) {
  members {
    transfer {
      beforeactivation(memberId: $memberId, branchId: $branchId) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
