/* eslint-disable */
//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from '@tanstack/react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Amount: any;
  Any: unknown;
  Cursor: string;
  Date: string;
  Email: any;
  InvalidData: Record<string, Array<string>>;
  Localized: Record<'local' | 'en' | 'np', string>;
  Map: Record<string, string>;
  Time: string;
};

export type Address = {
  coordinates?: Maybe<Coordinate>;
  district?: Maybe<Scalars['Localized']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernment?: Maybe<Scalars['Localized']>;
  locality?: Maybe<Scalars['Localized']>;
  state?: Maybe<Scalars['Localized']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AdministrationQuery = {
  all: Array<Province>;
  districts: Array<Result>;
  municipalities: Array<Result>;
  provinces: Array<Result>;
  wards: Array<Scalars['Int']>;
};

export type AdministrationQueryDistrictsArgs = {
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryMunicipalitiesArgs = {
  districtId?: InputMaybe<Scalars['Int']>;
  provinceId?: InputMaybe<Scalars['Int']>;
};

export type AdministrationQueryWardsArgs = {
  districtId: Scalars['Int'];
  municipalityId: Scalars['Int'];
  provinceId: Scalars['Int'];
};

export type AdministrativeAddress = {
  district: District;
  locality?: Maybe<Scalars['String']>;
  municipality: Municipality;
  province: Province;
  wardNo: Scalars['Int'];
};

export const AllModules = {
  AccountingSystem: 'ACCOUNTING_SYSTEM',
  AlternativeChannels: 'ALTERNATIVE_CHANNELS',
  BusinessIntelligenceAndReporting: 'BUSINESS_INTELLIGENCE_AND_REPORTING',
  BusinessProcessManagement: 'BUSINESS_PROCESS_MANAGEMENT',
  CapacityAndTrainingManagement: 'CAPACITY_AND_TRAINING_MANAGEMENT',
  ComplianceManagement: 'COMPLIANCE_MANAGEMENT',
  CoreBankingSystem: 'CORE_BANKING_SYSTEM',
  DocumentManagement: 'DOCUMENT_MANAGEMENT',
  FixedAssetManagement: 'FIXED_ASSET_MANAGEMENT',
  HrManagement: 'HR_MANAGEMENT',
  InventoryManagement: 'INVENTORY_MANAGEMENT',
  MemberAndShareManagement: 'MEMBER_AND_SHARE_MANAGEMENT',
  QualityAssuranceForNefscun: 'QUALITY_ASSURANCE_FOR_NEFSCUN',
} as const;

export type AllModules = typeof AllModules[keyof typeof AllModules];
export type ApplicationVersion = {
  description: Scalars['ID'];
  id: Scalars['ID'];
};

export const Arrange = {
  Asc: 'ASC',
  Desc: 'DESC',
} as const;

export type Arrange = typeof Arrange[keyof typeof Arrange];
export type AuthorizationError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type BadRequestError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export const BranchCategory = {
  BranchOffice: 'BRANCH_OFFICE',
  ContactOffice: 'CONTACT_OFFICE',
  ExtensionCounter: 'EXTENSION_COUNTER',
  HeadOffice: 'HEAD_OFFICE',
  RegionalOffice: 'REGIONAL_OFFICE',
  ServiceCenter: 'SERVICE_CENTER',
} as const;

export type BranchCategory = typeof BranchCategory[keyof typeof BranchCategory];
export type ClientEnvironment = {
  description?: Maybe<Scalars['String']>;
  environmentName: Scalars['String'];
  environmentSlug: Scalars['String'];
  id: Scalars['ID'];
  isForProduction?: Maybe<Scalars['Boolean']>;
  otpToken?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

export type ClientEnvironmentMutation = {
  clone: NewClientEnvironmentResult;
  cloneFromDev: NewClientEnvironmentResult;
  createDB?: Maybe<DbCreateResult>;
  delete: DeleteClientEnvironmentResult;
  deleteVersion: DbCreateResult;
  insertVersion: DbCreateResult;
  new: NewClientEnvironmentResult;
  seedDBWithCSV?: Maybe<EnvSeedResult>;
  updateVersion?: Maybe<ClientEnvironment>;
};

export type ClientEnvironmentMutationCloneArgs = {
  clientId: Scalars['ID'];
  data: CloneClientEnvironmentInput;
};

export type ClientEnvironmentMutationCloneFromDevArgs = {
  clientId: Scalars['ID'];
  data: CloneEnvironmentFromDevInput;
};

export type ClientEnvironmentMutationCreateDbArgs = {
  clientId: Scalars['ID'];
  environmentId: Scalars['ID'];
};

export type ClientEnvironmentMutationDeleteArgs = {
  environmentId: Scalars['String'];
};

export type ClientEnvironmentMutationDeleteVersionArgs = {
  version: Scalars['String'];
};

export type ClientEnvironmentMutationInsertVersionArgs = {
  data: VersionInput;
};

export type ClientEnvironmentMutationNewArgs = {
  clientId: Scalars['ID'];
  data: NewClientEnvironmentInput;
};

export type ClientEnvironmentMutationSeedDbWithCsvArgs = {
  environmentId: Scalars['String'];
  fileURL: Scalars['String'];
};

export type ClientEnvironmentMutationUpdateVersionArgs = {
  environmentId: Scalars['String'];
  version: Scalars['String'];
};

export type CloneClientEnvironmentInput = {
  description?: InputMaybe<Scalars['String']>;
  destinationEnvironmentName?: InputMaybe<Scalars['String']>;
  isForProduction?: InputMaybe<Scalars['Boolean']>;
  otpToken?: InputMaybe<Scalars['String']>;
  sourceEnvironmentId?: InputMaybe<Scalars['String']>;
};

export type CloneEnvironmentFromDevInput = {
  description?: InputMaybe<Scalars['String']>;
  destinationEnvironmentName?: InputMaybe<Scalars['String']>;
  isForProduction?: InputMaybe<Scalars['Boolean']>;
  otpToken?: InputMaybe<Scalars['String']>;
  sourceEnvironmentName?: InputMaybe<Scalars['String']>;
};

export const ComparatorType = {
  Between: 'BETWEEN',
  Contains: 'CONTAINS',
  EqualTo: 'EqualTo',
  GreaterThan: 'GreaterThan',
  HasNoValue: 'HasNoValue',
  HasValue: 'HasValue',
  In: 'IN',
  LessThan: 'LessThan',
} as const;

export type ComparatorType = typeof ComparatorType[keyof typeof ComparatorType];
export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type ContactPerson = {
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type ContactPersonInput = {
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
};

export type Coordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type CoordinateInput = {
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
};

export type DbCreateResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type DeleteClientEnvironmentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<NeosysClientQuery>;
  success: Scalars['Boolean'];
};

export type District = {
  id: Scalars['Int'];
  municipalities: Array<Municipality>;
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type DocumentInfo = {
  id: Scalars['String'];
  url: Scalars['String'];
};

export type DocumentInsertInput = {
  fieldId: Scalars['String'];
  identifiers: Array<Scalars['String']>;
};

export type EnvSeedResult = {
  error?: Maybe<MutationError>;
  recordId?: Maybe<Scalars['ID']>;
};

export type Filter = {
  orConditions: Array<OrConditions>;
};

export const Gender = {
  Female: 'FEMALE',
  Male: 'MALE',
  Other: 'OTHER',
} as const;

export type Gender = typeof Gender[keyof typeof Gender];
export type HeadOfficeDetailsInput = {
  emailAddress?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['Localized']>;
  headOfficeAddress?: InputMaybe<OrganizationAddressDetailsInput>;
  headOfficeName?: InputMaybe<Scalars['String']>;
  managerContactNo?: InputMaybe<Scalars['String']>;
  managerEmail?: InputMaybe<Scalars['String']>;
  managerName?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
  serviceCentreCode?: InputMaybe<Scalars['String']>;
};

export const Id_Type = {
  Account: 'ACCOUNT',
  Address: 'ADDRESS',
  Bank: 'BANK',
  Bankbranch: 'BANKBRANCH',
  Branch: 'BRANCH',
  Chartsofaccount: 'CHARTSOFACCOUNT',
  Customfield: 'CUSTOMFIELD',
  Declaration: 'DECLARATION',
  Depositiro: 'DEPOSITIRO',
  Depositproduct: 'DEPOSITPRODUCT',
  Depositproductcriteria: 'DEPOSITPRODUCTCRITERIA',
  Deposittds: 'DEPOSITTDS',
  Document: 'DOCUMENT',
  Documentreference: 'DOCUMENTREFERENCE',
  Dynamicentry: 'DYNAMICENTRY',
  Formfield: 'FORMFIELD',
  Formoption: 'FORMOPTION',
  Formsection: 'FORMSECTION',
  Kymaccountoperatordetails: 'KYMACCOUNTOPERATORDETAILS',
  Kymcoopaccountoperatordetails: 'KYMCOOPACCOUNTOPERATORDETAILS',
  Kymcoopdirectordetails: 'KYMCOOPDIRECTORDETAILS',
  Kymcooperative: 'KYMCOOPERATIVE',
  Kymcooperativeunion: 'KYMCOOPERATIVEUNION',
  Kymcooperativeunionpers: 'KYMCOOPERATIVEUNIONPERS',
  Kymdocument: 'KYMDOCUMENT',
  Kymfield: 'KYMFIELD',
  Kymfieldoption: 'KYMFIELDOPTION',
  Kymidentification: 'KYMIDENTIFICATION',
  Kymindividual: 'KYMINDIVIDUAL',
  Kymindividualfamilymembers: 'KYMINDIVIDUALFAMILYMEMBERS',
  Kymindividualincomesource: 'KYMINDIVIDUALINCOMESOURCE',
  Kymindividualoccupation: 'KYMINDIVIDUALOCCUPATION',
  Kyminstitutions: 'KYMINSTITUTIONS',
  Kymsisterconcerndetails: 'KYMSISTERCONCERNDETAILS',
  Loanproduct: 'LOANPRODUCT',
  Loanproductcriteria: 'LOANPRODUCTCRITERIA',
  Member: 'MEMBER',
  Myrauser: 'MYRAUSER',
  Myrauseridetification: 'MYRAUSERIDETIFICATION',
  Organization: 'ORGANIZATION',
  Productdocument: 'PRODUCTDOCUMENT',
  Sharebalance: 'SHAREBALANCE',
  Shareextracharges: 'SHAREEXTRACHARGES',
  Sharenumbers: 'SHARENUMBERS',
  Shareregister: 'SHAREREGISTER',
  User: 'USER',
  Userpreference: 'USERPREFERENCE',
} as const;

export type Id_Type = typeof Id_Type[keyof typeof Id_Type];
export type Identity = {
  id: Scalars['ID'];
  name: Scalars['String'];
  userType: UserType;
  username: Scalars['String'];
};

export type KymAddressInput = {
  coordinates?: InputMaybe<CoordinateInput>;
  districtId?: InputMaybe<Scalars['Int']>;
  houseNo?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type KymIndFamilyMemberInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  dateOfBirth?: InputMaybe<Scalars['Localized']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  familyMemberId?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  relationshipId?: InputMaybe<Scalars['String']>;
};

export type KymIndIdentificationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  date?: InputMaybe<Scalars['Localized']>;
  id?: InputMaybe<Scalars['String']>;
  idType: Scalars['String'];
  identificationNo?: InputMaybe<Scalars['String']>;
  place?: InputMaybe<Scalars['String']>;
};

export type KymIndIncomeSourceInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  incomeSource?: InputMaybe<Scalars['String']>;
};

export type KymIndOccupationInput = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['Localized']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  isOwner?: InputMaybe<Scalars['Boolean']>;
  occupationId?: InputMaybe<Scalars['String']>;
  orgName?: InputMaybe<Scalars['String']>;
  panVatNo?: InputMaybe<Scalars['String']>;
  registrationNo?: InputMaybe<Scalars['String']>;
};

export type KymAdditionalFields = {
  fieldId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type KymIncomeSourceDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['Float']>;
  source?: InputMaybe<Scalars['String']>;
};

export type KymIndMemberInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['String']>;
  bankAccountId?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['String']>;
  convictedDetails?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['Localized']>;
  declarationAgreement?: InputMaybe<Scalars['Boolean']>;
  documents?: InputMaybe<Array<InputMaybe<DocumentInsertInput>>>;
  educationQualificationId?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['String']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['String']>;
  familyCoopMembers?: InputMaybe<Array<InputMaybe<KymIndFamilyMemberInput>>>;
  familyMembers?: InputMaybe<Array<InputMaybe<KymIndFamilyMemberInput>>>;
  firstIntroducerId?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  foreignEmpCountryId?: InputMaybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: InputMaybe<Scalars['String']>;
  foreignResidentialPermitTypeId?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['String']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  identification?: InputMaybe<Array<InputMaybe<KymIndIdentificationInput>>>;
  identificationSelection?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  incomeSource?: InputMaybe<Array<InputMaybe<KymIndIncomeSourceInput>>>;
  initialLoan?: InputMaybe<Scalars['String']>;
  initialSaving?: InputMaybe<Scalars['String']>;
  initialShare?: InputMaybe<Scalars['Int']>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isFamilyAMember?: InputMaybe<Scalars['Boolean']>;
  isForeignEmployment?: InputMaybe<Scalars['Boolean']>;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  mainOccupation?: InputMaybe<KymIndOccupationInput>;
  maritalStatusId?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  nationalityId?: InputMaybe<Scalars['String']>;
  otherCoopBranchId?: InputMaybe<Scalars['String']>;
  otherCoopMemberId?: InputMaybe<Scalars['String']>;
  otherCoopName?: InputMaybe<Scalars['String']>;
  otherFinancialAmount?: InputMaybe<Scalars['String']>;
  otherProfession?: InputMaybe<Scalars['String']>;
  panNo?: InputMaybe<Scalars['String']>;
  permanentAddress?: InputMaybe<KymAddressInput>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  politicallyExposedDetails?: InputMaybe<Scalars['String']>;
  professionId?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purposeId?: InputMaybe<Scalars['String']>;
  religionId?: InputMaybe<Scalars['String']>;
  sameTempAsPermanentAddress?: InputMaybe<Scalars['Boolean']>;
  secondIntroducerId?: InputMaybe<Scalars['String']>;
  spouseOccupation?: InputMaybe<KymIndOccupationInput>;
  temporaryAddress?: InputMaybe<KymAddressInput>;
  typeOfVisaId?: InputMaybe<Scalars['String']>;
};

export type Municipality = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
  wards: Array<Scalars['Int']>;
};

export type Mutation = {
  neosys: NeosysMutation;
  presignedUrl: PresignedUrlMutation;
  utility: UtilityMutation;
};

export type MutationError =
  | AuthorizationError
  | BadRequestError
  | NotFoundError
  | ServerError
  | ValidationError;

export const NatureOfCooperative = {
  AgricultureCooperative: 'AGRICULTURE_COOPERATIVE',
  HealthCooperative: 'HEALTH_COOPERATIVE',
  MultipurposeCooperative: 'MULTIPURPOSE_COOPERATIVE',
  Others: 'OTHERS',
  SavingAndCredit: 'SAVING_AND_CREDIT',
} as const;

export type NatureOfCooperative = typeof NatureOfCooperative[keyof typeof NatureOfCooperative];
export type NeosysAuthMutation = {
  login?: Maybe<NeosysLoginResult>;
  token?: Maybe<NeosysAuthTokenResult>;
};

export type NeosysAuthMutationLoginArgs = {
  data: NeosysLoginInput;
};

export type NeosysAuthMutationTokenArgs = {
  refreshToken: Scalars['String'];
};

export type NeosysAuthQuery = {
  me: NeosysMeResult;
};

export type NeosysAuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type NeosysAuthTokenResult = {
  error?: Maybe<MutationError>;
  token?: Maybe<NeosysAuthToken>;
};

export type NeosysClientDetails = {
  address?: Maybe<Address>;
  clientId: Scalars['String'];
  environments?: Maybe<Array<Maybe<ClientEnvironment>>>;
  logoId?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  organizationCode: Scalars['String'];
  organizationName: Scalars['String'];
  organizationType?: Maybe<OrganizationType>;
};

export type NeosysClientFilter = {
  dateFrom?: InputMaybe<Scalars['String']>;
  dateTo?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<ObjState>;
};

export type NeosysClientMinimalInfo = {
  clientName?: Maybe<Scalars['String']>;
  dateJoined?: Maybe<Scalars['String']>;
  dbCreated?: Maybe<Scalars['Boolean']>;
  districtId?: Maybe<Scalars['String']>;
  houseNo?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['String']>;
  locality?: Maybe<Scalars['String']>;
  organizationCode?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type NeosysClientMutation = {
  add?: Maybe<OrganizationClientAddResult>;
  createDB?: Maybe<DbCreateResult>;
  environment?: Maybe<ClientEnvironmentMutation>;
};

export type NeosysClientMutationAddArgs = {
  data?: InputMaybe<OrganizationClientInput>;
};

export type NeosysClientMutationCreateDbArgs = {
  saccosId: Scalars['ID'];
};

export type NeosysClientQuery = {
  details?: Maybe<NeosysClientDetails>;
  list?: Maybe<Array<Maybe<NeosysClientMinimalInfo>>>;
};

export type NeosysClientQueryDetailsArgs = {
  clientId: Scalars['ID'];
};

export type NeosysClientQueryListArgs = {
  filter?: InputMaybe<NeosysClientFilter>;
};

export type NeosysLoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type NeosysLoginRecord = {
  token: NeosysAuthToken;
  user: NeosysUser;
};

export type NeosysLoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<NeosysLoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type NeosysMeResult = {
  data?: Maybe<NeosysUser>;
  error?: Maybe<QueryError>;
};

export type NeosysMutation = {
  auth?: Maybe<NeosysAuthMutation>;
  client?: Maybe<NeosysClientMutation>;
  user?: Maybe<NeosysUserMutation>;
};

export type NeosysQuery = {
  auth?: Maybe<NeosysAuthQuery>;
  client?: Maybe<NeosysClientQuery>;
  tasks?: Maybe<Array<Maybe<Task>>>;
  thread?: Maybe<NeosysThreadQuery>;
  user?: Maybe<NeosysUserQuery>;
  versions?: Maybe<Array<Maybe<ApplicationVersion>>>;
};

export type NeosysThreadQuery = {
  accessLogCounter?: Maybe<ThreadAccessLogCounterQuery>;
  closingDay?: Maybe<ThreadClosingDayQuery>;
  databaseSize?: Maybe<ThreadDatabaseSizeQuery>;
  errorLog?: Maybe<ThreadErrorLogQuery>;
  loanAccountCounter?: Maybe<ThreadLoanAccountCounterQuery>;
  memberCounter?: Maybe<ThreadMemberCounterQuery>;
  moneyLedgerCounter?: Maybe<ThreadMoneyLedgerCounterQuery>;
  savingAccountCounter?: Maybe<ThreadSavingAccountCounterQuery>;
  transactionCounter?: Maybe<ThreadTransactionCounterQuery>;
  userCounter?: Maybe<ThreadUserCounterQuery>;
};

export type NeosysUser = Base & {
  contactNo?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dob?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['Localized'];
  gender?: Maybe<Gender>;
  id: Scalars['ID'];
  lastLoggedIn?: Maybe<Scalars['Time']>;
  lastName: Scalars['Localized'];
  middleName: Scalars['Localized'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['String'];
  objState: ObjState;
  role?: Maybe<Role>;
  username: Scalars['String'];
};

export type NeosysUserConnection = {
  edges?: Maybe<Array<NeosysUserEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type NeosysUserEdge = {
  cursor: Scalars['Cursor'];
  node: NeosysUser;
};

export type NeosysUserInput = {
  contactNo?: InputMaybe<Scalars['String']>;
  dob?: InputMaybe<Scalars['Localized']>;
  email?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  name?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Role>;
};

export type NeosysUserMutation = {
  add?: Maybe<NeosysUserMutationResult>;
  changePassword?: Maybe<NeosysUserMutationResult>;
};

export type NeosysUserMutationAddArgs = {
  data?: InputMaybe<NeosysUserInput>;
  id?: InputMaybe<Scalars['ID']>;
};

export type NeosysUserMutationChangePasswordArgs = {
  data?: InputMaybe<NeosysUserPasswordInput>;
};

export type NeosysUserMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<NeosysUserQuery>;
  record?: Maybe<NeosysUser>;
  recordId?: Maybe<Scalars['ID']>;
};

export type NeosysUserPasswordInput = {
  newPassword: Scalars['String'];
  oldPassword: Scalars['String'];
  userId: Scalars['ID'];
};

export type NeosysUserQuery = {
  get?: Maybe<NeosysUserQueryResult>;
  list?: Maybe<NeosysUserConnection>;
};

export type NeosysUserQueryGetArgs = {
  id: Scalars['ID'];
};

export type NeosysUserQueryListArgs = {
  filter?: InputMaybe<NeosysUserSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type NeosysUserQueryResult = {
  data?: Maybe<NeosysUser>;
  error?: Maybe<QueryError>;
};

export type NeosysUserSearchFilter = {
  contact?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Role>;
};

export type NewClientEnvironmentInput = {
  description?: InputMaybe<Scalars['String']>;
  environmentName?: InputMaybe<Scalars['String']>;
  isForProduction?: InputMaybe<Scalars['Boolean']>;
  otpToken?: InputMaybe<Scalars['String']>;
  version?: InputMaybe<Scalars['String']>;
};

export type NewClientEnvironmentResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<NeosysClientQuery>;
  recordId?: Maybe<Scalars['String']>;
};

export type NotFoundError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export const ObjState = {
  Active: 'ACTIVE',
  Approved: 'APPROVED',
  Dormant: 'DORMANT',
  Draft: 'DRAFT',
  Inactive: 'INACTIVE',
  Submitted: 'SUBMITTED',
  Validated: 'VALIDATED',
} as const;

export type ObjState = typeof ObjState[keyof typeof ObjState];
export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export type OrganizationAddressDetails = {
  coordinates?: Maybe<Coordinate>;
  districtId?: Maybe<Scalars['Int']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernmentId?: Maybe<Scalars['Int']>;
  locality?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['Int']>;
  wardNo?: Maybe<Scalars['Int']>;
};

export type OrganizationAddressDetailsInput = {
  coordinates?: InputMaybe<CoordinateInput>;
  districtId?: InputMaybe<Scalars['Int']>;
  houseNo?: InputMaybe<Scalars['String']>;
  localGovernmentId?: InputMaybe<Scalars['Int']>;
  locality?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['Int']>;
  wardNo?: InputMaybe<Scalars['Int']>;
};

export type OrganizationClient = {
  addressDetails?: Maybe<OrganizationAddressDetails>;
  contactDetails?: Maybe<OrganizationClientContactDetails>;
  documents?: Maybe<OrganizationClientDocuments>;
  license?: Maybe<OrganizationInstallmentLicense>;
  mainContactPerson?: Maybe<ContactPerson>;
  modules?: Maybe<Array<Maybe<AllModules>>>;
  natureOfCoop?: Maybe<NatureOfCooperative>;
  organizationCode?: Maybe<Scalars['String']>;
  organizationLogo?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
  organizationType?: Maybe<OrganizationType>;
  registrationDetails?: Maybe<Array<Maybe<OrganizationRegistrationDetails>>>;
  securitySetup?: Maybe<OrganizationSecuritySetup>;
  technicalContactPerson?: Maybe<ContactPerson>;
  urlSlug?: Maybe<Scalars['String']>;
  workingArea?: Maybe<Array<Maybe<OrganizationAddressDetails>>>;
};

export type OrganizationClientAddResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<OrganizationClient>;
  recordId?: Maybe<Scalars['ID']>;
};

export type OrganizationClientContactDetails = {
  email?: Maybe<Scalars['String']>;
  officePhone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationClientDocuments = {
  agmOrBodDocument?: Maybe<Array<Maybe<Scalars['String']>>>;
  latestAuditReport?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Array<Maybe<Scalars['String']>>>;
  minuteOfCentralRep?: Maybe<Array<Maybe<Scalars['String']>>>;
  moaOrAoa?: Maybe<Array<Maybe<Scalars['String']>>>;
  panCertificate?: Maybe<Array<Maybe<Scalars['String']>>>;
  registeredCertificate?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxClearance?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationClientDocumentsInput = {
  agmOrBodDocument?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  latestAuditReport?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  logo?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  minuteOfCentralRep?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  moaOrAoa?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  panCertificate?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  registeredCertificate?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  taxClearance?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type OrganizationClientInput = {
  addressDetails?: InputMaybe<OrganizationAddressDetailsInput>;
  contactDetails?: InputMaybe<OrganizationContactDetailsInput>;
  documents?: InputMaybe<OrganizationClientDocumentsInput>;
  headOfficeDetails?: InputMaybe<HeadOfficeDetailsInput>;
  license?: InputMaybe<OrganizationInstallmentLicense>;
  mainContactPerson?: InputMaybe<ContactPersonInput>;
  modules?: InputMaybe<Array<InputMaybe<AllModules>>>;
  natureOfCoop?: InputMaybe<NatureOfCooperative>;
  organizationCode?: InputMaybe<Scalars['String']>;
  organizationLogo?: InputMaybe<Scalars['String']>;
  organizationName?: InputMaybe<Scalars['String']>;
  organizationType?: InputMaybe<OrganizationType>;
  registrationDetails?: InputMaybe<Array<InputMaybe<OrganizationRegistrationDetailsInput>>>;
  securitySetup?: InputMaybe<OrganizationSecuritySetup>;
  technicalContactPerson?: InputMaybe<ContactPersonInput>;
  urlSlug?: InputMaybe<Scalars['String']>;
  workingArea?: InputMaybe<Array<InputMaybe<OrganizationAddressDetailsInput>>>;
};

export type OrganizationClientRegistrationDetails = {
  panOrVatNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<Scalars['String']>;
  registeredDate?: Maybe<Scalars['String']>;
  registeredNo?: Maybe<Scalars['String']>;
  registeredOffice?: Maybe<Scalars['String']>;
};

export type OrganizationContactDetailsInput = {
  email?: InputMaybe<Scalars['String']>;
  officePhone?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export const OrganizationInstallmentLicense = {
  Basic: 'BASIC',
  Professional: 'PROFESSIONAL',
  Standard: 'STANDARD',
} as const;

export type OrganizationInstallmentLicense =
  typeof OrganizationInstallmentLicense[keyof typeof OrganizationInstallmentLicense];
export type OrganizationRegistrationDetails = {
  panOrVat?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
};

export type OrganizationRegistrationDetailsInput = {
  panOrVatNo?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<Scalars['String']>;
  registeredDate?: InputMaybe<Scalars['String']>;
  registeredNo?: InputMaybe<Scalars['String']>;
  registeredOffice?: InputMaybe<Scalars['String']>;
};

export const OrganizationSecuritySetup = {
  PureSass: 'PURE_SASS',
  Vpn: 'VPN',
} as const;

export type OrganizationSecuritySetup =
  typeof OrganizationSecuritySetup[keyof typeof OrganizationSecuritySetup];
export const OrganizationType = {
  CooperativeUnion: 'COOPERATIVE_UNION',
  DistrictUnion: 'DISTRICT_UNION',
  Preliminary: 'PRELIMINARY',
  ProvinceUnion: 'PROVINCE_UNION',
} as const;

export type OrganizationType = typeof OrganizationType[keyof typeof OrganizationType];
export type PageInfo = {
  endCursor?: Maybe<Scalars['Cursor']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Pagination = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<Order>;
};

export type PresignedUrlMutation = {
  upload?: Maybe<PresignedUrlOutput>;
};

export type PresignedUrlMutationUploadArgs = {
  contentType?: InputMaybe<Scalars['String']>;
};

export type PresignedUrlOutput = {
  filename?: Maybe<Scalars['String']>;
  getUrl?: Maybe<Scalars['String']>;
  putUrl?: Maybe<Scalars['String']>;
};

export type Province = {
  districts: Array<District>;
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type Query = {
  administration: AdministrationQuery;
  neosys: NeosysQuery;
  utility: UtilityQuery;
};

export type QueryError = AuthorizationError | BadRequestError | NotFoundError | ServerError;

export type Result = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export const Role = {
  Superadmin: 'SUPERADMIN',
} as const;

export type Role = typeof Role[keyof typeof Role];
export type SaccosAmountSetupResult = {
  ID?: Maybe<Scalars['ID']>;
  error?: Maybe<MutationError>;
};

export type SaccosSetup = {
  amount: Scalars['String'];
  slug: Scalars['String'];
  txnType: UtilityTxnTypeAtNeosys;
};

export type ServerError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export const Transaction_Direction = {
  Purchased: 'PURCHASED',
  Sold: 'SOLD',
} as const;

export type Transaction_Direction =
  typeof Transaction_Direction[keyof typeof Transaction_Direction];
export type Task = {
  id: Scalars['ID'];
  message: Scalars['String'];
  slug: Scalars['String'];
  status: TaskStatus;
  type: TaskType;
};

export const TaskStatus = {
  Completed: 'COMPLETED',
  Failed: 'FAILED',
  Running: 'RUNNING',
} as const;

export type TaskStatus = typeof TaskStatus[keyof typeof TaskStatus];
export const TaskType = {
  CloneEnv: 'CLONE_ENV',
  CreateDatabase: 'CREATE_DATABASE',
  DeleteEnv: 'DELETE_ENV',
  UpgradeEnvVersion: 'UPGRADE_ENV_VERSION',
} as const;

export type TaskType = typeof TaskType[keyof typeof TaskType];
export const TextFormat = {
  Email: 'EMAIL',
  IPv4: 'IPv4',
  IPv6: 'IPv6',
} as const;

export type TextFormat = typeof TextFormat[keyof typeof TextFormat];
export type ThreadAccessLogCounterListConnection = {
  edges?: Maybe<Array<Maybe<ThreadAccessLogCounterListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadAccessLogCounterListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadAccessLogCounterNode;
};

export type ThreadAccessLogCounterNode = {
  createdAt?: Maybe<Scalars['Time']>;
  id?: Maybe<Scalars['Int']>;
  mutationFailed?: Maybe<Scalars['String']>;
  mutationSuccess?: Maybe<Scalars['String']>;
  otherFailed?: Maybe<Scalars['String']>;
  otherSuccess?: Maybe<Scalars['String']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryFailed?: Maybe<Scalars['String']>;
  queryID?: Maybe<Scalars['Int']>;
  querySuccess?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

export type ThreadAccessLogCounterNodeAll = {
  records?: Maybe<Array<Maybe<ThreadAccessLogCounterNode>>>;
};

export type ThreadAccessLogCounterQuery = {
  fetchAccessLogCounter?: Maybe<ThreadAccessLogCounterNodeAll>;
  listAccessLogCounter?: Maybe<ThreadAccessLogCounterListConnection>;
};

export type ThreadAccessLogCounterQueryListAccessLogCounterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadClosingDayListConnection = {
  edges?: Maybe<Array<Maybe<ThreadClosingDayListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadClosingDayListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadClosingDayNode;
};

export type ThreadClosingDayNode = {
  createdAt?: Maybe<Scalars['Time']>;
  id?: Maybe<Scalars['Int']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['Localized']>;
};

export type ThreadClosingDayNodeAll = {
  records?: Maybe<Array<Maybe<ThreadClosingDayNode>>>;
};

export type ThreadClosingDayQuery = {
  fetchClosingDay?: Maybe<ThreadClosingDayNodeAll>;
  listClosingDay?: Maybe<ThreadClosingDayListConnection>;
};

export type ThreadClosingDayQueryListClosingDayArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadClosingDaySearchFilter = {
  id?: InputMaybe<Scalars['String']>;
  queryDate?: InputMaybe<Scalars['Time']>;
  slug?: InputMaybe<Scalars['String']>;
  transactionDate?: InputMaybe<Scalars['Time']>;
};

export type ThreadDatabaseSizeNodeAll = {
  records?: Maybe<Array<Maybe<ThreadDbSizeNode>>>;
};

export type ThreadDatabaseSizeQuery = {
  fetchDatabaseSize?: Maybe<ThreadDatabaseSizeNodeAll>;
  listDBSize?: Maybe<ThreadDbSizeListConnection>;
};

export type ThreadDatabaseSizeQueryListDbSizeArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadDbSizeListConnection = {
  edges?: Maybe<Array<Maybe<ThreadDbSizeListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadDbSizeListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadDbSizeNode;
};

export type ThreadDbSizeNode = {
  createdAt?: Maybe<Scalars['Time']>;
  databaseSize?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type ThreadErrorLogListConnection = {
  edges?: Maybe<Array<Maybe<ThreadErrorLogListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadErrorLogListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadErrorLogNode;
};

export type ThreadErrorLogNode = {
  createdAt?: Maybe<Scalars['Time']>;
  id?: Maybe<Scalars['Int']>;
  logMessage?: Maybe<Scalars['String']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  saccosName?: Maybe<Scalars['String']>;
};

export type ThreadErrorLogNodeAll = {
  records?: Maybe<Array<Maybe<ThreadErrorLogNode>>>;
};

export type ThreadErrorLogQuery = {
  fetchErrorLog?: Maybe<ThreadErrorLogNodeAll>;
  listErrorLog?: Maybe<ThreadErrorLogListConnection>;
};

export type ThreadErrorLogQueryListErrorLogArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadLoanAccountCounterListConnection = {
  edges?: Maybe<Array<Maybe<ThreadLoanAccountCounterListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadLoanAccountCounterListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadLoanAccountCounterNode;
};

export type ThreadLoanAccountCounterNode = {
  approvedAccount?: Maybe<Scalars['Int']>;
  canceledAccount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Time']>;
  disbursedAccount?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type ThreadLoanAccountCounterNodeAll = {
  records?: Maybe<Array<Maybe<ThreadLoanAccountCounterNode>>>;
};

export type ThreadLoanAccountCounterQuery = {
  fetchLoanAccountCounter?: Maybe<ThreadLoanAccountCounterNodeAll>;
  listLoanAccountCounter?: Maybe<ThreadLoanAccountCounterListConnection>;
};

export type ThreadLoanAccountCounterQueryListLoanAccountCounterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadMemberCounterListConnection = {
  edges?: Maybe<Array<Maybe<ThreadMemberCounterListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadMemberCounterListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadMemberCounterNode;
};

export type ThreadMemberCounterNode = {
  approvedMember?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Time']>;
  id?: Maybe<Scalars['Int']>;
  inactiveMember?: Maybe<Scalars['Int']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type ThreadMemberCounterNodeAll = {
  records?: Maybe<Array<Maybe<ThreadMemberCounterNode>>>;
};

export type ThreadMemberCounterQuery = {
  fetchMemberCounter?: Maybe<ThreadMemberCounterNodeAll>;
  listMemberCounter?: Maybe<ThreadMemberCounterListConnection>;
};

export type ThreadMemberCounterQueryListMemberCounterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadMoneyLedgerCounterListConnection = {
  edges?: Maybe<Array<Maybe<ThreadMoneyLedgerCounterListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadMoneyLedgerCounterListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadMoneyLedgerCounterNode;
};

export type ThreadMoneyLedgerCounterNode = {
  createdAt?: Maybe<Scalars['Time']>;
  id?: Maybe<Scalars['Int']>;
  moneyLedgerCount?: Maybe<Scalars['Int']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type ThreadMoneyLedgerCounterNodeAll = {
  records?: Maybe<Array<Maybe<ThreadMoneyLedgerCounterNode>>>;
};

export type ThreadMoneyLedgerCounterQuery = {
  fetchMoneyLedgerCounter?: Maybe<ThreadMoneyLedgerCounterNodeAll>;
  listMoneyLedgerCounter?: Maybe<ThreadMoneyLedgerCounterListConnection>;
};

export type ThreadMoneyLedgerCounterQueryListMoneyLedgerCounterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadSavingAccountCounterListConnection = {
  edges?: Maybe<Array<Maybe<ThreadSavingAccountCounterListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadSavingAccountCounterListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadSavingAccountCounterNode;
};

export type ThreadSavingAccountCounterNode = {
  activeAccount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Time']>;
  id?: Maybe<Scalars['Int']>;
  inactiveAccount?: Maybe<Scalars['Int']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type ThreadSavingAccountCounterNodeAll = {
  records?: Maybe<Array<Maybe<ThreadSavingAccountCounterNode>>>;
};

export type ThreadSavingAccountCounterQuery = {
  fetchSavingAccountCounter?: Maybe<ThreadSavingAccountCounterNodeAll>;
  listSavingAccountCounter?: Maybe<ThreadSavingAccountCounterListConnection>;
};

export type ThreadSavingAccountCounterQueryListSavingAccountCounterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadTransactionCounterListConnection = {
  edges?: Maybe<Array<Maybe<ThreadTransactionCounterListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadTransactionCounterListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadTransactionCounterNode;
};

export type ThreadTransactionCounterNode = {
  createdAt?: Maybe<Scalars['Time']>;
  id?: Maybe<Scalars['Int']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  txnCount?: Maybe<Scalars['Int']>;
  txnTypeCount?: Maybe<Scalars['Any']>;
};

export type ThreadTransactionCounterNodeAll = {
  records?: Maybe<Array<Maybe<ThreadTransactionCounterNode>>>;
};

export type ThreadTransactionCounterQuery = {
  fetchTransactionCounter?: Maybe<ThreadTransactionCounterNodeAll>;
  listTransactionCounter?: Maybe<ThreadTransactionCounterListConnection>;
};

export type ThreadTransactionCounterQueryListTransactionCounterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type ThreadUserCounterListConnection = {
  edges?: Maybe<Array<Maybe<ThreadUserCounterListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type ThreadUserCounterListEdges = {
  cursor: Scalars['Cursor'];
  node: ThreadUserCounterNode;
};

export type ThreadUserCounterNode = {
  approvedUser?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Time']>;
  id?: Maybe<Scalars['Int']>;
  inactiveUser?: Maybe<Scalars['Int']>;
  queryDate?: Maybe<Scalars['Localized']>;
  queryID?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type ThreadUserCounterNodeAll = {
  records?: Maybe<Array<Maybe<ThreadUserCounterNode>>>;
};

export type ThreadUserCounterQuery = {
  fetchUserCounter?: Maybe<ThreadUserCounterNodeAll>;
  listUserCounter?: Maybe<ThreadUserCounterListConnection>;
};

export type ThreadUserCounterQueryListUserCounterArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type UploadedDocument = {
  docData: Array<Maybe<UploadedDocumentData>>;
  fieldId?: Maybe<Scalars['String']>;
};

export type UploadedDocumentData = {
  identifier: Scalars['String'];
  url: Scalars['String'];
};

export const UserType = {
  Human: 'HUMAN',
  System: 'SYSTEM',
} as const;

export type UserType = typeof UserType[keyof typeof UserType];
export type UtilityRecordsConnection = {
  edges?: Maybe<Array<Maybe<UtilityRecordsEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type UtilityRecordsEdges = {
  cursor?: Maybe<Scalars['Cursor']>;
  node?: Maybe<UtilityRecordsInfo>;
};

export type UtilityRecordsInfo = {
  amount: Scalars['String'];
  count?: Maybe<Scalars['String']>;
  crAmount: Scalars['String'];
  drAmount: Scalars['String'];
  id: Scalars['String'];
  saccossName: Scalars['String'];
  slug: Scalars['String'];
  txnStatus: UtilityUsageObjStateType;
  utility: Scalars['String'];
};

export const UtilityTxnTypeAtNeosys = {
  Credit: 'CREDIT',
  Debit: 'DEBIT',
} as const;

export type UtilityTxnTypeAtNeosys =
  typeof UtilityTxnTypeAtNeosys[keyof typeof UtilityTxnTypeAtNeosys];
export const UtilityUsageObjStateType = {
  Cancelled: 'CANCELLED',
  Pending: 'PENDING',
  Success: 'SUCCESS',
} as const;

export type UtilityUsageObjStateType =
  typeof UtilityUsageObjStateType[keyof typeof UtilityUsageObjStateType];
export type ValidationError = {
  code: Scalars['Int'];
  message: Scalars['InvalidData'];
};

export type VersionInput = {
  description?: InputMaybe<Scalars['String']>;
  version: Scalars['String'];
};

export type UtilityMutation = {
  addSaccosAmount?: Maybe<SaccosAmountSetupResult>;
};

export type UtilityMutationAddSaccosAmountArgs = {
  input: Array<SaccosSetup>;
};

export type UtilityQuery = {
  listUtilityRecords?: Maybe<UtilityRecordsConnection>;
};

export type UtilityQueryListUtilityRecordsArgs = {
  filter?: InputMaybe<Filter>;
  paginate: Pagination;
};

export type LoginMutationVariables = Exact<{
  data: NeosysLoginInput;
}>;

export type LoginMutation = {
  neosys: {
    auth?: {
      login?: {
        recordId?: string | null;
        record?: {
          token: { access: string; refresh: string };
          user: {
            id: string;
            objState: ObjState;
            username: string;
            firstName: Record<'local' | 'en' | 'np', string>;
            middleName: Record<'local' | 'en' | 'np', string>;
            lastName: Record<'local' | 'en' | 'np', string>;
          };
        } | null;
      } | null;
    } | null;
  };
};

export type RefreshMutationVariables = Exact<{
  refreshToken: Scalars['String'];
}>;

export type RefreshMutation = {
  neosys: {
    auth?: {
      token?: {
        token?: { access: string; refresh: string } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type ChangePasswordMutationVariables = Exact<{
  data?: InputMaybe<NeosysUserPasswordInput>;
}>;

export type ChangePasswordMutation = {
  neosys: {
    user?: {
      changePassword?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type AddNewClientMutationVariables = Exact<{
  data?: InputMaybe<OrganizationClientInput>;
}>;

export type AddNewClientMutation = {
  neosys: {
    client?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type CreateDbMutationVariables = Exact<{
  saccosID: Scalars['ID'];
}>;

export type CreateDbMutation = {
  neosys: {
    client?: {
      createDB?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type CloneEnvironmentMutationVariables = Exact<{
  clientId: Scalars['ID'];
  data: CloneClientEnvironmentInput;
}>;

export type CloneEnvironmentMutation = {
  neosys: {
    client?: {
      environment?: {
        clone: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type CloneEnvFromDevMutationVariables = Exact<{
  clientId: Scalars['ID'];
  data: CloneEnvironmentFromDevInput;
}>;

export type CloneEnvFromDevMutation = {
  neosys: {
    client?: {
      environment?: {
        cloneFromDev: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type SetEnvironementMutationVariables = Exact<{
  clientId: Scalars['ID'];
  data: NewClientEnvironmentInput;
}>;

export type SetEnvironementMutation = {
  neosys: {
    client?: {
      environment?: {
        new: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type DeleteEnvironementMutationVariables = Exact<{
  environmentId: Scalars['String'];
}>;

export type DeleteEnvironementMutation = {
  neosys: {
    client?: {
      environment?: {
        delete: {
          success: boolean;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        };
      } | null;
    } | null;
  };
};

export type SetUpEnvironmentDatabaseMutationVariables = Exact<{
  environmentId: Scalars['ID'];
  clientId: Scalars['ID'];
}>;

export type SetUpEnvironmentDatabaseMutation = {
  neosys: {
    client?: {
      environment?: {
        createDB?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type UpdateVersionMutationVariables = Exact<{
  environmentId: Scalars['String'];
  version: Scalars['String'];
}>;

export type UpdateVersionMutation = {
  neosys: {
    client?: {
      environment?: {
        updateVersion?: {
          id: string;
          environmentName: string;
          environmentSlug: string;
          otpToken?: string | null;
          description?: string | null;
          isForProduction?: boolean | null;
          version?: string | null;
        } | null;
      } | null;
    } | null;
  };
};

export type SeedDbWithCsvMutationVariables = Exact<{
  environmentId: Scalars['String'];
  fileURL: Scalars['String'];
}>;

export type SeedDbWithCsvMutation = {
  neosys: {
    client?: {
      environment?: {
        seedDBWithCSV?: {
          recordId?: string | null;
          error?:
            | MutationError_AuthorizationError_Fragment
            | MutationError_BadRequestError_Fragment
            | MutationError_NotFoundError_Fragment
            | MutationError_ServerError_Fragment
            | MutationError_ValidationError_Fragment
            | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetPreSignedUrlMutationVariables = Exact<{
  contentType?: InputMaybe<Scalars['String']>;
}>;

export type GetPreSignedUrlMutation = {
  presignedUrl: {
    upload?: { filename?: string | null; getUrl?: string | null; putUrl?: string | null } | null;
  };
};

export type SetUserMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  data?: InputMaybe<NeosysUserInput>;
}>;

export type SetUserMutation = {
  neosys: {
    user?: {
      add?: {
        recordId?: string | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | MutationError_ValidationError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type AddSaccosAmountMutationVariables = Exact<{
  input: Array<SaccosSetup> | SaccosSetup;
}>;

export type AddSaccosAmountMutation = {
  utility: {
    addSaccosAmount?: {
      ID?: string | null;
      error?:
        | MutationError_AuthorizationError_Fragment
        | MutationError_BadRequestError_Fragment
        | MutationError_NotFoundError_Fragment
        | MutationError_ServerError_Fragment
        | MutationError_ValidationError_Fragment
        | null;
    } | null;
  };
};

export type AllAdministrationQueryVariables = Exact<{ [key: string]: never }>;

export type AllAdministrationQuery = {
  administration: {
    all: Array<{
      id: number;
      name: string;
      districts: Array<{
        id: number;
        name: string;
        municipalities: Array<{ id: number; name: string; wards: Array<number> }>;
      }>;
    }>;
  };
};

export type GetAllProvinceQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllProvinceQuery = {
  administration: { provinces: Array<{ id: number; name: string }> };
};

export type GetAllDistrictsQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllDistrictsQuery = {
  administration: { districts: Array<{ id: number; name: string }> };
};

export type GetAllLocalGovernmentQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllLocalGovernmentQuery = {
  administration: { municipalities: Array<{ id: number; name: string }> };
};

export type GetClosingDayListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetClosingDayListQuery = {
  neosys: {
    thread?: {
      closingDay?: {
        listClosingDay?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              transactionDate?: Record<'local' | 'en' | 'np', string> | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetDatabaseSizeListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetDatabaseSizeListQuery = {
  neosys: {
    thread?: {
      databaseSize?: {
        listDBSize?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              databaseSize?: string | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAccessLogCounterListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetAccessLogCounterListQuery = {
  neosys: {
    thread?: {
      accessLogCounter?: {
        listAccessLogCounter?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              querySuccess?: string | null;
              queryFailed?: string | null;
              mutationSuccess?: string | null;
              mutationFailed?: string | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GeterrorLogListQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GeterrorLogListQuery = {
  neosys: {
    thread?: {
      errorLog?: {
        listErrorLog?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              saccosName?: string | null;
              logMessage?: string | null;
              queryID?: number | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetLoanAccountCounterQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetLoanAccountCounterQuery = {
  neosys: {
    thread?: {
      loanAccountCounter?: {
        listLoanAccountCounter?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              approvedAccount?: number | null;
              disbursedAccount?: number | null;
              canceledAccount?: number | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMemberCounterQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetMemberCounterQuery = {
  neosys: {
    thread?: {
      memberCounter?: {
        listMemberCounter?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              approvedMember?: number | null;
              inactiveMember?: number | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMoneyLedgerCounterQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetMoneyLedgerCounterQuery = {
  neosys: {
    thread?: {
      moneyLedgerCounter?: {
        listMoneyLedgerCounter?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              moneyLedgerCount?: number | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetSavingAccountCounterQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetSavingAccountCounterQuery = {
  neosys: {
    thread?: {
      savingAccountCounter?: {
        listSavingAccountCounter?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              activeAccount?: number | null;
              inactiveAccount?: number | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetTransactionCounterQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetTransactionCounterQuery = {
  neosys: {
    thread?: {
      transactionCounter?: {
        listTransactionCounter?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              txnCount?: number | null;
              txnTypeCount?: unknown | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetUserCounterQueryVariables = Exact<{
  pagination?: InputMaybe<Pagination>;
  filter?: InputMaybe<Filter>;
}>;

export type GetUserCounterQuery = {
  neosys: {
    thread?: {
      userCounter?: {
        listUserCounter?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node: {
              id?: number | null;
              createdAt?: string | null;
              approvedUser?: number | null;
              inactiveUser?: number | null;
              slug?: string | null;
              queryID?: number | null;
              queryDate?: Record<'local' | 'en' | 'np', string> | null;
            };
          } | null> | null;
          pageInfo?: PaginationFragment | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllClosingDayListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllClosingDayListQuery = {
  neosys: {
    thread?: {
      closingDay?: {
        fetchClosingDay?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            transactionDate?: Record<'local' | 'en' | 'np', string> | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllMemberCounterQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllMemberCounterQuery = {
  neosys: {
    thread?: {
      memberCounter?: {
        fetchMemberCounter?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            approvedMember?: number | null;
            inactiveMember?: number | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllMoneyLedgerCounterQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllMoneyLedgerCounterQuery = {
  neosys: {
    thread?: {
      moneyLedgerCounter?: {
        fetchMoneyLedgerCounter?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            moneyLedgerCount?: number | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllLoanAccountCounterQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllLoanAccountCounterQuery = {
  neosys: {
    thread?: {
      loanAccountCounter?: {
        fetchLoanAccountCounter?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            approvedAccount?: number | null;
            disbursedAccount?: number | null;
            canceledAccount?: number | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllSavingAccountCounterQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllSavingAccountCounterQuery = {
  neosys: {
    thread?: {
      savingAccountCounter?: {
        fetchSavingAccountCounter?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            activeAccount?: number | null;
            inactiveAccount?: number | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllDatabaseSizeListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllDatabaseSizeListQuery = {
  neosys: {
    thread?: {
      databaseSize?: {
        fetchDatabaseSize?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            databaseSize?: string | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllAccessLogCounterListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllAccessLogCounterListQuery = {
  neosys: {
    thread?: {
      accessLogCounter?: {
        fetchAccessLogCounter?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            querySuccess?: string | null;
            queryFailed?: string | null;
            mutationSuccess?: string | null;
            mutationFailed?: string | null;
            otherSuccess?: string | null;
            otherFailed?: string | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllErrorLogListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllErrorLogListQuery = {
  neosys: {
    thread?: {
      errorLog?: {
        fetchErrorLog?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            saccosName?: string | null;
            logMessage?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllTransactionCounterQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllTransactionCounterQuery = {
  neosys: {
    thread?: {
      transactionCounter?: {
        fetchTransactionCounter?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            txnCount?: number | null;
            txnTypeCount?: unknown | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetAllUserCounterQueryVariables = Exact<{ [key: string]: never }>;

export type GetAllUserCounterQuery = {
  neosys: {
    thread?: {
      userCounter?: {
        fetchUserCounter?: {
          records?: Array<{
            id?: number | null;
            createdAt?: string | null;
            approvedUser?: number | null;
            inactiveUser?: number | null;
            slug?: string | null;
            queryID?: number | null;
            queryDate?: Record<'local' | 'en' | 'np', string> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };
};

export type GetMeQueryVariables = Exact<{ [key: string]: never }>;

export type GetMeQuery = {
  neosys: {
    auth?: {
      me: {
        data?: { id: string; username: string; email?: string | null } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | null;
      };
    } | null;
  };
};

export type GetClientsListQueryVariables = Exact<{ [key: string]: never }>;

export type GetClientsListQuery = {
  neosys: {
    client?: {
      list?: Array<{
        id?: string | null;
        clientName?: string | null;
        provinceId?: string | null;
        districtId?: string | null;
        localGovernmentId?: string | null;
        locality?: string | null;
        houseNo?: string | null;
        wardNo?: number | null;
        dateJoined?: string | null;
        dbCreated?: boolean | null;
        slug?: string | null;
      } | null> | null;
    } | null;
  };
};

export type GetClientDetailsQueryVariables = Exact<{
  clientId: Scalars['ID'];
}>;

export type GetClientDetailsQuery = {
  neosys: {
    client?: {
      details?: {
        organizationName: string;
        environments?: Array<{
          id: string;
          environmentName: string;
          environmentSlug: string;
          otpToken?: string | null;
          description?: string | null;
          isForProduction?: boolean | null;
          version?: string | null;
        } | null> | null;
      } | null;
    } | null;
  };
};

export type GetVersionQueryVariables = Exact<{ [key: string]: never }>;

export type GetVersionQuery = { neosys: { versions?: Array<{ id: string } | null> | null } };

type MutationError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type MutationError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type MutationError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type MutationError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

type MutationError_ValidationError_Fragment = {
  __typename: 'ValidationError';
  code: number;
  validationErrorMsg: Record<string, Array<string>>;
};

export type MutationErrorFragment =
  | MutationError_AuthorizationError_Fragment
  | MutationError_BadRequestError_Fragment
  | MutationError_NotFoundError_Fragment
  | MutationError_ServerError_Fragment
  | MutationError_ValidationError_Fragment;

type QueryError_AuthorizationError_Fragment = {
  __typename: 'AuthorizationError';
  code: number;
  authorizationErrorMsg: string;
};

type QueryError_BadRequestError_Fragment = {
  __typename: 'BadRequestError';
  code: number;
  badRequestErrorMessage: string;
};

type QueryError_NotFoundError_Fragment = {
  __typename: 'NotFoundError';
  code: number;
  notFoundErrorMsg: string;
};

type QueryError_ServerError_Fragment = {
  __typename: 'ServerError';
  code: number;
  serverErrorMessage: string;
};

export type QueryErrorFragment =
  | QueryError_AuthorizationError_Fragment
  | QueryError_BadRequestError_Fragment
  | QueryError_NotFoundError_Fragment
  | QueryError_ServerError_Fragment;

export type PaginationFragment = {
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
};

export type GetTasksQueryVariables = Exact<{ [key: string]: never }>;

export type GetTasksQuery = {
  neosys: {
    tasks?: Array<{
      id: string;
      type: TaskType;
      slug: string;
      status: TaskStatus;
      message: string;
    } | null> | null;
  };
};

export type GetUserListQueryVariables = Exact<{
  paginate?: InputMaybe<Pagination>;
  filter?: InputMaybe<NeosysUserSearchFilter>;
}>;

export type GetUserListQuery = {
  neosys: {
    user?: {
      list?: {
        totalCount: number;
        edges?: Array<{
          cursor: string;
          node: { id: string; username: string; role?: Role | null; contactNo?: string | null };
        }> | null;
        pageInfo: PaginationFragment;
      } | null;
    } | null;
  };
};

export type GetUserEditDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;

export type GetUserEditDataQuery = {
  neosys: {
    user?: {
      get?: {
        data?: {
          name: string;
          gender?: Gender | null;
          dob?: Record<'local' | 'en' | 'np', string> | null;
          contactNo?: string | null;
          email?: string | null;
          role?: Role | null;
        } | null;
        error?:
          | MutationError_AuthorizationError_Fragment
          | MutationError_BadRequestError_Fragment
          | MutationError_NotFoundError_Fragment
          | MutationError_ServerError_Fragment
          | null;
      } | null;
    } | null;
  };
};

export type GetUtilityTransactionListQueryVariables = Exact<{
  paginate: Pagination;
  filter?: InputMaybe<Filter>;
}>;

export type GetUtilityTransactionListQuery = {
  utility: {
    listUtilityRecords?: {
      totalCount: number;
      edges?: Array<{
        cursor?: string | null;
        node?: {
          id: string;
          slug: string;
          saccossName: string;
          drAmount: string;
          crAmount: string;
          utility: string;
          txnStatus: UtilityUsageObjStateType;
          amount: string;
        } | null;
      } | null> | null;
      pageInfo?: PaginationFragment | null;
    } | null;
  };
};

export const MutationErrorFragmentDoc = `
    fragment MutationError on MutationError {
  ... on BadRequestError {
    __typename
    badRequestErrorMessage: message
    code
  }
  ... on ServerError {
    __typename
    serverErrorMessage: message
    code
  }
  ... on AuthorizationError {
    __typename
    authorizationErrorMsg: message
    code
  }
  ... on ValidationError {
    __typename
    validationErrorMsg: message
    code
  }
  ... on NotFoundError {
    __typename
    notFoundErrorMsg: message
    code
  }
}
    `;
export const QueryErrorFragmentDoc = `
    fragment QueryError on QueryError {
  ... on BadRequestError {
    __typename
    badRequestErrorMessage: message
    code
  }
  ... on ServerError {
    __typename
    serverErrorMessage: message
    code
  }
  ... on AuthorizationError {
    __typename
    authorizationErrorMsg: message
    code
  }
  ... on NotFoundError {
    __typename
    notFoundErrorMsg: message
    code
  }
}
    `;
export const PaginationFragmentDoc = `
    fragment Pagination on PageInfo {
  startCursor
  endCursor
  hasNextPage
  hasPreviousPage
}
    `;
export const LoginDocument = `
    mutation login($data: NeosysLoginInput!) {
  neosys {
    auth {
      login(data: $data) {
        recordId
        record {
          token {
            access
            refresh
          }
          user {
            id
            objState
            username
            firstName
            middleName
            lastName
          }
        }
      }
    }
  }
}
    `;
export const useLoginMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<LoginMutation, TError, LoginMutationVariables, TContext>
) =>
  useMutation<LoginMutation, TError, LoginMutationVariables, TContext>(
    ['login'],
    useAxios<LoginMutation, LoginMutationVariables>(LoginDocument),
    options
  );
export const RefreshDocument = `
    mutation refresh($refreshToken: String!) {
  neosys {
    auth {
      token(refreshToken: $refreshToken) {
        token {
          access
          refresh
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useRefreshMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<RefreshMutation, TError, RefreshMutationVariables, TContext>
) =>
  useMutation<RefreshMutation, TError, RefreshMutationVariables, TContext>(
    ['refresh'],
    useAxios<RefreshMutation, RefreshMutationVariables>(RefreshDocument),
    options
  );
export const ChangePasswordDocument = `
    mutation changePassword($data: NeosysUserPasswordInput) {
  neosys {
    user {
      changePassword(data: $data) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useChangePasswordMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ChangePasswordMutation,
    TError,
    ChangePasswordMutationVariables,
    TContext
  >
) =>
  useMutation<ChangePasswordMutation, TError, ChangePasswordMutationVariables, TContext>(
    ['changePassword'],
    useAxios<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument),
    options
  );
export const AddNewClientDocument = `
    mutation addNewClient($data: OrganizationClientInput) {
  neosys {
    client {
      add(data: $data) {
        error {
          ...MutationError
        }
        recordId
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddNewClientMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddNewClientMutation,
    TError,
    AddNewClientMutationVariables,
    TContext
  >
) =>
  useMutation<AddNewClientMutation, TError, AddNewClientMutationVariables, TContext>(
    ['addNewClient'],
    useAxios<AddNewClientMutation, AddNewClientMutationVariables>(AddNewClientDocument),
    options
  );
export const CreateDbDocument = `
    mutation createDB($saccosID: ID!) {
  neosys {
    client {
      createDB(saccosId: $saccosID) {
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useCreateDbMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<CreateDbMutation, TError, CreateDbMutationVariables, TContext>
) =>
  useMutation<CreateDbMutation, TError, CreateDbMutationVariables, TContext>(
    ['createDB'],
    useAxios<CreateDbMutation, CreateDbMutationVariables>(CreateDbDocument),
    options
  );
export const CloneEnvironmentDocument = `
    mutation cloneEnvironment($clientId: ID!, $data: CloneClientEnvironmentInput!) {
  neosys {
    client {
      environment {
        clone(clientId: $clientId, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useCloneEnvironmentMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    CloneEnvironmentMutation,
    TError,
    CloneEnvironmentMutationVariables,
    TContext
  >
) =>
  useMutation<CloneEnvironmentMutation, TError, CloneEnvironmentMutationVariables, TContext>(
    ['cloneEnvironment'],
    useAxios<CloneEnvironmentMutation, CloneEnvironmentMutationVariables>(CloneEnvironmentDocument),
    options
  );
export const CloneEnvFromDevDocument = `
    mutation cloneEnvFromDev($clientId: ID!, $data: CloneEnvironmentFromDevInput!) {
  neosys {
    client {
      environment {
        cloneFromDev(clientId: $clientId, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useCloneEnvFromDevMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    CloneEnvFromDevMutation,
    TError,
    CloneEnvFromDevMutationVariables,
    TContext
  >
) =>
  useMutation<CloneEnvFromDevMutation, TError, CloneEnvFromDevMutationVariables, TContext>(
    ['cloneEnvFromDev'],
    useAxios<CloneEnvFromDevMutation, CloneEnvFromDevMutationVariables>(CloneEnvFromDevDocument),
    options
  );
export const SetEnvironementDocument = `
    mutation setEnvironement($clientId: ID!, $data: NewClientEnvironmentInput!) {
  neosys {
    client {
      environment {
        new(clientId: $clientId, data: $data) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetEnvironementMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetEnvironementMutation,
    TError,
    SetEnvironementMutationVariables,
    TContext
  >
) =>
  useMutation<SetEnvironementMutation, TError, SetEnvironementMutationVariables, TContext>(
    ['setEnvironement'],
    useAxios<SetEnvironementMutation, SetEnvironementMutationVariables>(SetEnvironementDocument),
    options
  );
export const DeleteEnvironementDocument = `
    mutation deleteEnvironement($environmentId: String!) {
  neosys {
    client {
      environment {
        delete(environmentId: $environmentId) {
          success
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useDeleteEnvironementMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    DeleteEnvironementMutation,
    TError,
    DeleteEnvironementMutationVariables,
    TContext
  >
) =>
  useMutation<DeleteEnvironementMutation, TError, DeleteEnvironementMutationVariables, TContext>(
    ['deleteEnvironement'],
    useAxios<DeleteEnvironementMutation, DeleteEnvironementMutationVariables>(
      DeleteEnvironementDocument
    ),
    options
  );
export const SetUpEnvironmentDatabaseDocument = `
    mutation setUpEnvironmentDatabase($environmentId: ID!, $clientId: ID!) {
  neosys {
    client {
      environment {
        createDB(environmentId: $environmentId, clientId: $clientId) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetUpEnvironmentDatabaseMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SetUpEnvironmentDatabaseMutation,
    TError,
    SetUpEnvironmentDatabaseMutationVariables,
    TContext
  >
) =>
  useMutation<
    SetUpEnvironmentDatabaseMutation,
    TError,
    SetUpEnvironmentDatabaseMutationVariables,
    TContext
  >(
    ['setUpEnvironmentDatabase'],
    useAxios<SetUpEnvironmentDatabaseMutation, SetUpEnvironmentDatabaseMutationVariables>(
      SetUpEnvironmentDatabaseDocument
    ),
    options
  );
export const UpdateVersionDocument = `
    mutation updateVersion($environmentId: String!, $version: String!) {
  neosys {
    client {
      environment {
        updateVersion(environmentId: $environmentId, version: $version) {
          id
          environmentName
          environmentSlug
          otpToken
          description
          isForProduction
          version
        }
      }
    }
  }
}
    `;
export const useUpdateVersionMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    UpdateVersionMutation,
    TError,
    UpdateVersionMutationVariables,
    TContext
  >
) =>
  useMutation<UpdateVersionMutation, TError, UpdateVersionMutationVariables, TContext>(
    ['updateVersion'],
    useAxios<UpdateVersionMutation, UpdateVersionMutationVariables>(UpdateVersionDocument),
    options
  );
export const SeedDbWithCsvDocument = `
    mutation seedDBWithCSV($environmentId: String!, $fileURL: String!) {
  neosys {
    client {
      environment {
        seedDBWithCSV(environmentId: $environmentId, fileURL: $fileURL) {
          recordId
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSeedDbWithCsvMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    SeedDbWithCsvMutation,
    TError,
    SeedDbWithCsvMutationVariables,
    TContext
  >
) =>
  useMutation<SeedDbWithCsvMutation, TError, SeedDbWithCsvMutationVariables, TContext>(
    ['seedDBWithCSV'],
    useAxios<SeedDbWithCsvMutation, SeedDbWithCsvMutationVariables>(SeedDbWithCsvDocument),
    options
  );
export const GetPreSignedUrlDocument = `
    mutation getPreSignedUrl($contentType: String) {
  presignedUrl {
    upload(contentType: $contentType) {
      filename
      getUrl
      putUrl
    }
  }
}
    `;
export const useGetPreSignedUrlMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    GetPreSignedUrlMutation,
    TError,
    GetPreSignedUrlMutationVariables,
    TContext
  >
) =>
  useMutation<GetPreSignedUrlMutation, TError, GetPreSignedUrlMutationVariables, TContext>(
    ['getPreSignedUrl'],
    useAxios<GetPreSignedUrlMutation, GetPreSignedUrlMutationVariables>(GetPreSignedUrlDocument),
    options
  );
export const SetUserDocument = `
    mutation setUser($id: ID, $data: NeosysUserInput) {
  neosys {
    user {
      add(id: $id, data: $data) {
        recordId
        recordId
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useSetUserMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SetUserMutation, TError, SetUserMutationVariables, TContext>
) =>
  useMutation<SetUserMutation, TError, SetUserMutationVariables, TContext>(
    ['setUser'],
    useAxios<SetUserMutation, SetUserMutationVariables>(SetUserDocument),
    options
  );
export const AddSaccosAmountDocument = `
    mutation addSaccosAmount($input: [SaccosSetup!]!) {
  utility {
    addSaccosAmount(input: $input) {
      ID
      error {
        ...MutationError
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddSaccosAmountMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddSaccosAmountMutation,
    TError,
    AddSaccosAmountMutationVariables,
    TContext
  >
) =>
  useMutation<AddSaccosAmountMutation, TError, AddSaccosAmountMutationVariables, TContext>(
    ['addSaccosAmount'],
    useAxios<AddSaccosAmountMutation, AddSaccosAmountMutationVariables>(AddSaccosAmountDocument),
    options
  );
export const AllAdministrationDocument = `
    query allAdministration {
  administration {
    all {
      id
      name
      districts {
        id
        name
        municipalities {
          id
          name
          wards
        }
      }
    }
  }
}
    `;
export const useAllAdministrationQuery = <TData = AllAdministrationQuery, TError = unknown>(
  variables?: AllAdministrationQueryVariables,
  options?: UseQueryOptions<AllAdministrationQuery, TError, TData>
) =>
  useQuery<AllAdministrationQuery, TError, TData>(
    variables === undefined ? ['allAdministration'] : ['allAdministration', variables],
    useAxios<AllAdministrationQuery, AllAdministrationQueryVariables>(
      AllAdministrationDocument
    ).bind(null, variables),
    options
  );
export const GetAllProvinceDocument = `
    query getAllProvince {
  administration {
    provinces {
      id
      name
    }
  }
}
    `;
export const useGetAllProvinceQuery = <TData = GetAllProvinceQuery, TError = unknown>(
  variables?: GetAllProvinceQueryVariables,
  options?: UseQueryOptions<GetAllProvinceQuery, TError, TData>
) =>
  useQuery<GetAllProvinceQuery, TError, TData>(
    variables === undefined ? ['getAllProvince'] : ['getAllProvince', variables],
    useAxios<GetAllProvinceQuery, GetAllProvinceQueryVariables>(GetAllProvinceDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllDistrictsDocument = `
    query getAllDistricts {
  administration {
    districts {
      id
      name
    }
  }
}
    `;
export const useGetAllDistrictsQuery = <TData = GetAllDistrictsQuery, TError = unknown>(
  variables?: GetAllDistrictsQueryVariables,
  options?: UseQueryOptions<GetAllDistrictsQuery, TError, TData>
) =>
  useQuery<GetAllDistrictsQuery, TError, TData>(
    variables === undefined ? ['getAllDistricts'] : ['getAllDistricts', variables],
    useAxios<GetAllDistrictsQuery, GetAllDistrictsQueryVariables>(GetAllDistrictsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllLocalGovernmentDocument = `
    query getAllLocalGovernment {
  administration {
    municipalities {
      id
      name
    }
  }
}
    `;
export const useGetAllLocalGovernmentQuery = <TData = GetAllLocalGovernmentQuery, TError = unknown>(
  variables?: GetAllLocalGovernmentQueryVariables,
  options?: UseQueryOptions<GetAllLocalGovernmentQuery, TError, TData>
) =>
  useQuery<GetAllLocalGovernmentQuery, TError, TData>(
    variables === undefined ? ['getAllLocalGovernment'] : ['getAllLocalGovernment', variables],
    useAxios<GetAllLocalGovernmentQuery, GetAllLocalGovernmentQueryVariables>(
      GetAllLocalGovernmentDocument
    ).bind(null, variables),
    options
  );
export const GetClosingDayListDocument = `
    query getClosingDayList($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      closingDay {
        listClosingDay(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              transactionDate
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetClosingDayListQuery = <TData = GetClosingDayListQuery, TError = unknown>(
  variables?: GetClosingDayListQueryVariables,
  options?: UseQueryOptions<GetClosingDayListQuery, TError, TData>
) =>
  useQuery<GetClosingDayListQuery, TError, TData>(
    variables === undefined ? ['getClosingDayList'] : ['getClosingDayList', variables],
    useAxios<GetClosingDayListQuery, GetClosingDayListQueryVariables>(
      GetClosingDayListDocument
    ).bind(null, variables),
    options
  );
export const GetDatabaseSizeListDocument = `
    query getDatabaseSizeList($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      databaseSize {
        listDBSize(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              databaseSize
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetDatabaseSizeListQuery = <TData = GetDatabaseSizeListQuery, TError = unknown>(
  variables?: GetDatabaseSizeListQueryVariables,
  options?: UseQueryOptions<GetDatabaseSizeListQuery, TError, TData>
) =>
  useQuery<GetDatabaseSizeListQuery, TError, TData>(
    variables === undefined ? ['getDatabaseSizeList'] : ['getDatabaseSizeList', variables],
    useAxios<GetDatabaseSizeListQuery, GetDatabaseSizeListQueryVariables>(
      GetDatabaseSizeListDocument
    ).bind(null, variables),
    options
  );
export const GetAccessLogCounterListDocument = `
    query getAccessLogCounterList($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      accessLogCounter {
        listAccessLogCounter(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              querySuccess
              queryFailed
              mutationSuccess
              mutationFailed
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetAccessLogCounterListQuery = <
  TData = GetAccessLogCounterListQuery,
  TError = unknown
>(
  variables?: GetAccessLogCounterListQueryVariables,
  options?: UseQueryOptions<GetAccessLogCounterListQuery, TError, TData>
) =>
  useQuery<GetAccessLogCounterListQuery, TError, TData>(
    variables === undefined ? ['getAccessLogCounterList'] : ['getAccessLogCounterList', variables],
    useAxios<GetAccessLogCounterListQuery, GetAccessLogCounterListQueryVariables>(
      GetAccessLogCounterListDocument
    ).bind(null, variables),
    options
  );
export const GeterrorLogListDocument = `
    query geterrorLogList($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      errorLog {
        listErrorLog(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              saccosName
              logMessage
              queryID
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGeterrorLogListQuery = <TData = GeterrorLogListQuery, TError = unknown>(
  variables?: GeterrorLogListQueryVariables,
  options?: UseQueryOptions<GeterrorLogListQuery, TError, TData>
) =>
  useQuery<GeterrorLogListQuery, TError, TData>(
    variables === undefined ? ['geterrorLogList'] : ['geterrorLogList', variables],
    useAxios<GeterrorLogListQuery, GeterrorLogListQueryVariables>(GeterrorLogListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLoanAccountCounterDocument = `
    query getLoanAccountCounter($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      loanAccountCounter {
        listLoanAccountCounter(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              approvedAccount
              disbursedAccount
              canceledAccount
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetLoanAccountCounterQuery = <TData = GetLoanAccountCounterQuery, TError = unknown>(
  variables?: GetLoanAccountCounterQueryVariables,
  options?: UseQueryOptions<GetLoanAccountCounterQuery, TError, TData>
) =>
  useQuery<GetLoanAccountCounterQuery, TError, TData>(
    variables === undefined ? ['getLoanAccountCounter'] : ['getLoanAccountCounter', variables],
    useAxios<GetLoanAccountCounterQuery, GetLoanAccountCounterQueryVariables>(
      GetLoanAccountCounterDocument
    ).bind(null, variables),
    options
  );
export const GetMemberCounterDocument = `
    query getMemberCounter($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      memberCounter {
        listMemberCounter(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              approvedMember
              inactiveMember
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetMemberCounterQuery = <TData = GetMemberCounterQuery, TError = unknown>(
  variables?: GetMemberCounterQueryVariables,
  options?: UseQueryOptions<GetMemberCounterQuery, TError, TData>
) =>
  useQuery<GetMemberCounterQuery, TError, TData>(
    variables === undefined ? ['getMemberCounter'] : ['getMemberCounter', variables],
    useAxios<GetMemberCounterQuery, GetMemberCounterQueryVariables>(GetMemberCounterDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetMoneyLedgerCounterDocument = `
    query getMoneyLedgerCounter($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      moneyLedgerCounter {
        listMoneyLedgerCounter(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              moneyLedgerCount
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetMoneyLedgerCounterQuery = <TData = GetMoneyLedgerCounterQuery, TError = unknown>(
  variables?: GetMoneyLedgerCounterQueryVariables,
  options?: UseQueryOptions<GetMoneyLedgerCounterQuery, TError, TData>
) =>
  useQuery<GetMoneyLedgerCounterQuery, TError, TData>(
    variables === undefined ? ['getMoneyLedgerCounter'] : ['getMoneyLedgerCounter', variables],
    useAxios<GetMoneyLedgerCounterQuery, GetMoneyLedgerCounterQueryVariables>(
      GetMoneyLedgerCounterDocument
    ).bind(null, variables),
    options
  );
export const GetSavingAccountCounterDocument = `
    query getSavingAccountCounter($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      savingAccountCounter {
        listSavingAccountCounter(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              activeAccount
              inactiveAccount
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetSavingAccountCounterQuery = <
  TData = GetSavingAccountCounterQuery,
  TError = unknown
>(
  variables?: GetSavingAccountCounterQueryVariables,
  options?: UseQueryOptions<GetSavingAccountCounterQuery, TError, TData>
) =>
  useQuery<GetSavingAccountCounterQuery, TError, TData>(
    variables === undefined ? ['getSavingAccountCounter'] : ['getSavingAccountCounter', variables],
    useAxios<GetSavingAccountCounterQuery, GetSavingAccountCounterQueryVariables>(
      GetSavingAccountCounterDocument
    ).bind(null, variables),
    options
  );
export const GetTransactionCounterDocument = `
    query getTransactionCounter($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      transactionCounter {
        listTransactionCounter(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              txnCount
              txnTypeCount
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetTransactionCounterQuery = <TData = GetTransactionCounterQuery, TError = unknown>(
  variables?: GetTransactionCounterQueryVariables,
  options?: UseQueryOptions<GetTransactionCounterQuery, TError, TData>
) =>
  useQuery<GetTransactionCounterQuery, TError, TData>(
    variables === undefined ? ['getTransactionCounter'] : ['getTransactionCounter', variables],
    useAxios<GetTransactionCounterQuery, GetTransactionCounterQueryVariables>(
      GetTransactionCounterDocument
    ).bind(null, variables),
    options
  );
export const GetUserCounterDocument = `
    query getUserCounter($pagination: Pagination, $filter: Filter) {
  neosys {
    thread {
      userCounter {
        listUserCounter(pagination: $pagination, filter: $filter) {
          totalCount
          edges {
            node {
              id
              createdAt
              approvedUser
              inactiveUser
              slug
              queryID
              queryDate
            }
            cursor
          }
          pageInfo {
            ...Pagination
          }
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetUserCounterQuery = <TData = GetUserCounterQuery, TError = unknown>(
  variables?: GetUserCounterQueryVariables,
  options?: UseQueryOptions<GetUserCounterQuery, TError, TData>
) =>
  useQuery<GetUserCounterQuery, TError, TData>(
    variables === undefined ? ['getUserCounter'] : ['getUserCounter', variables],
    useAxios<GetUserCounterQuery, GetUserCounterQueryVariables>(GetUserCounterDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetAllClosingDayListDocument = `
    query getAllClosingDayList {
  neosys {
    thread {
      closingDay {
        fetchClosingDay {
          records {
            id
            createdAt
            transactionDate
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllClosingDayListQuery = <TData = GetAllClosingDayListQuery, TError = unknown>(
  variables?: GetAllClosingDayListQueryVariables,
  options?: UseQueryOptions<GetAllClosingDayListQuery, TError, TData>
) =>
  useQuery<GetAllClosingDayListQuery, TError, TData>(
    variables === undefined ? ['getAllClosingDayList'] : ['getAllClosingDayList', variables],
    useAxios<GetAllClosingDayListQuery, GetAllClosingDayListQueryVariables>(
      GetAllClosingDayListDocument
    ).bind(null, variables),
    options
  );
export const GetAllMemberCounterDocument = `
    query getAllMemberCounter {
  neosys {
    thread {
      memberCounter {
        fetchMemberCounter {
          records {
            id
            createdAt
            approvedMember
            inactiveMember
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllMemberCounterQuery = <TData = GetAllMemberCounterQuery, TError = unknown>(
  variables?: GetAllMemberCounterQueryVariables,
  options?: UseQueryOptions<GetAllMemberCounterQuery, TError, TData>
) =>
  useQuery<GetAllMemberCounterQuery, TError, TData>(
    variables === undefined ? ['getAllMemberCounter'] : ['getAllMemberCounter', variables],
    useAxios<GetAllMemberCounterQuery, GetAllMemberCounterQueryVariables>(
      GetAllMemberCounterDocument
    ).bind(null, variables),
    options
  );
export const GetAllMoneyLedgerCounterDocument = `
    query getAllMoneyLedgerCounter {
  neosys {
    thread {
      moneyLedgerCounter {
        fetchMoneyLedgerCounter {
          records {
            id
            createdAt
            moneyLedgerCount
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllMoneyLedgerCounterQuery = <
  TData = GetAllMoneyLedgerCounterQuery,
  TError = unknown
>(
  variables?: GetAllMoneyLedgerCounterQueryVariables,
  options?: UseQueryOptions<GetAllMoneyLedgerCounterQuery, TError, TData>
) =>
  useQuery<GetAllMoneyLedgerCounterQuery, TError, TData>(
    variables === undefined
      ? ['getAllMoneyLedgerCounter']
      : ['getAllMoneyLedgerCounter', variables],
    useAxios<GetAllMoneyLedgerCounterQuery, GetAllMoneyLedgerCounterQueryVariables>(
      GetAllMoneyLedgerCounterDocument
    ).bind(null, variables),
    options
  );
export const GetAllLoanAccountCounterDocument = `
    query getAllLoanAccountCounter {
  neosys {
    thread {
      loanAccountCounter {
        fetchLoanAccountCounter {
          records {
            id
            createdAt
            approvedAccount
            disbursedAccount
            canceledAccount
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllLoanAccountCounterQuery = <
  TData = GetAllLoanAccountCounterQuery,
  TError = unknown
>(
  variables?: GetAllLoanAccountCounterQueryVariables,
  options?: UseQueryOptions<GetAllLoanAccountCounterQuery, TError, TData>
) =>
  useQuery<GetAllLoanAccountCounterQuery, TError, TData>(
    variables === undefined
      ? ['getAllLoanAccountCounter']
      : ['getAllLoanAccountCounter', variables],
    useAxios<GetAllLoanAccountCounterQuery, GetAllLoanAccountCounterQueryVariables>(
      GetAllLoanAccountCounterDocument
    ).bind(null, variables),
    options
  );
export const GetAllSavingAccountCounterDocument = `
    query getAllSavingAccountCounter {
  neosys {
    thread {
      savingAccountCounter {
        fetchSavingAccountCounter {
          records {
            id
            createdAt
            activeAccount
            inactiveAccount
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllSavingAccountCounterQuery = <
  TData = GetAllSavingAccountCounterQuery,
  TError = unknown
>(
  variables?: GetAllSavingAccountCounterQueryVariables,
  options?: UseQueryOptions<GetAllSavingAccountCounterQuery, TError, TData>
) =>
  useQuery<GetAllSavingAccountCounterQuery, TError, TData>(
    variables === undefined
      ? ['getAllSavingAccountCounter']
      : ['getAllSavingAccountCounter', variables],
    useAxios<GetAllSavingAccountCounterQuery, GetAllSavingAccountCounterQueryVariables>(
      GetAllSavingAccountCounterDocument
    ).bind(null, variables),
    options
  );
export const GetAllDatabaseSizeListDocument = `
    query getAllDatabaseSizeList {
  neosys {
    thread {
      databaseSize {
        fetchDatabaseSize {
          records {
            id
            createdAt
            databaseSize
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllDatabaseSizeListQuery = <
  TData = GetAllDatabaseSizeListQuery,
  TError = unknown
>(
  variables?: GetAllDatabaseSizeListQueryVariables,
  options?: UseQueryOptions<GetAllDatabaseSizeListQuery, TError, TData>
) =>
  useQuery<GetAllDatabaseSizeListQuery, TError, TData>(
    variables === undefined ? ['getAllDatabaseSizeList'] : ['getAllDatabaseSizeList', variables],
    useAxios<GetAllDatabaseSizeListQuery, GetAllDatabaseSizeListQueryVariables>(
      GetAllDatabaseSizeListDocument
    ).bind(null, variables),
    options
  );
export const GetAllAccessLogCounterListDocument = `
    query getAllAccessLogCounterList {
  neosys {
    thread {
      accessLogCounter {
        fetchAccessLogCounter {
          records {
            id
            createdAt
            querySuccess
            queryFailed
            mutationSuccess
            mutationFailed
            otherSuccess
            otherFailed
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllAccessLogCounterListQuery = <
  TData = GetAllAccessLogCounterListQuery,
  TError = unknown
>(
  variables?: GetAllAccessLogCounterListQueryVariables,
  options?: UseQueryOptions<GetAllAccessLogCounterListQuery, TError, TData>
) =>
  useQuery<GetAllAccessLogCounterListQuery, TError, TData>(
    variables === undefined
      ? ['getAllAccessLogCounterList']
      : ['getAllAccessLogCounterList', variables],
    useAxios<GetAllAccessLogCounterListQuery, GetAllAccessLogCounterListQueryVariables>(
      GetAllAccessLogCounterListDocument
    ).bind(null, variables),
    options
  );
export const GetAllErrorLogListDocument = `
    query getAllErrorLogList {
  neosys {
    thread {
      errorLog {
        fetchErrorLog {
          records {
            id
            createdAt
            saccosName
            logMessage
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllErrorLogListQuery = <TData = GetAllErrorLogListQuery, TError = unknown>(
  variables?: GetAllErrorLogListQueryVariables,
  options?: UseQueryOptions<GetAllErrorLogListQuery, TError, TData>
) =>
  useQuery<GetAllErrorLogListQuery, TError, TData>(
    variables === undefined ? ['getAllErrorLogList'] : ['getAllErrorLogList', variables],
    useAxios<GetAllErrorLogListQuery, GetAllErrorLogListQueryVariables>(
      GetAllErrorLogListDocument
    ).bind(null, variables),
    options
  );
export const GetAllTransactionCounterDocument = `
    query getAllTransactionCounter {
  neosys {
    thread {
      transactionCounter {
        fetchTransactionCounter {
          records {
            id
            createdAt
            txnCount
            txnTypeCount
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllTransactionCounterQuery = <
  TData = GetAllTransactionCounterQuery,
  TError = unknown
>(
  variables?: GetAllTransactionCounterQueryVariables,
  options?: UseQueryOptions<GetAllTransactionCounterQuery, TError, TData>
) =>
  useQuery<GetAllTransactionCounterQuery, TError, TData>(
    variables === undefined
      ? ['getAllTransactionCounter']
      : ['getAllTransactionCounter', variables],
    useAxios<GetAllTransactionCounterQuery, GetAllTransactionCounterQueryVariables>(
      GetAllTransactionCounterDocument
    ).bind(null, variables),
    options
  );
export const GetAllUserCounterDocument = `
    query getAllUserCounter {
  neosys {
    thread {
      userCounter {
        fetchUserCounter {
          records {
            id
            createdAt
            approvedUser
            inactiveUser
            slug
            queryID
            queryDate
          }
        }
      }
    }
  }
}
    `;
export const useGetAllUserCounterQuery = <TData = GetAllUserCounterQuery, TError = unknown>(
  variables?: GetAllUserCounterQueryVariables,
  options?: UseQueryOptions<GetAllUserCounterQuery, TError, TData>
) =>
  useQuery<GetAllUserCounterQuery, TError, TData>(
    variables === undefined ? ['getAllUserCounter'] : ['getAllUserCounter', variables],
    useAxios<GetAllUserCounterQuery, GetAllUserCounterQueryVariables>(
      GetAllUserCounterDocument
    ).bind(null, variables),
    options
  );
export const GetMeDocument = `
    query getMe {
  neosys {
    auth {
      me {
        data {
          id
          username
          email
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetMeQuery = <TData = GetMeQuery, TError = unknown>(
  variables?: GetMeQueryVariables,
  options?: UseQueryOptions<GetMeQuery, TError, TData>
) =>
  useQuery<GetMeQuery, TError, TData>(
    variables === undefined ? ['getMe'] : ['getMe', variables],
    useAxios<GetMeQuery, GetMeQueryVariables>(GetMeDocument).bind(null, variables),
    options
  );
export const GetClientsListDocument = `
    query getClientsList {
  neosys {
    client {
      list {
        id
        clientName
        provinceId
        districtId
        localGovernmentId
        locality
        houseNo
        wardNo
        dateJoined
        dbCreated
        slug
      }
    }
  }
}
    `;
export const useGetClientsListQuery = <TData = GetClientsListQuery, TError = unknown>(
  variables?: GetClientsListQueryVariables,
  options?: UseQueryOptions<GetClientsListQuery, TError, TData>
) =>
  useQuery<GetClientsListQuery, TError, TData>(
    variables === undefined ? ['getClientsList'] : ['getClientsList', variables],
    useAxios<GetClientsListQuery, GetClientsListQueryVariables>(GetClientsListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetClientDetailsDocument = `
    query getClientDetails($clientId: ID!) {
  neosys {
    client {
      details(clientId: $clientId) {
        organizationName
        environments {
          id
          environmentName
          environmentSlug
          otpToken
          description
          isForProduction
          version
        }
      }
    }
  }
}
    `;
export const useGetClientDetailsQuery = <TData = GetClientDetailsQuery, TError = unknown>(
  variables: GetClientDetailsQueryVariables,
  options?: UseQueryOptions<GetClientDetailsQuery, TError, TData>
) =>
  useQuery<GetClientDetailsQuery, TError, TData>(
    ['getClientDetails', variables],
    useAxios<GetClientDetailsQuery, GetClientDetailsQueryVariables>(GetClientDetailsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetVersionDocument = `
    query getVersion {
  neosys {
    versions {
      id
    }
  }
}
    `;
export const useGetVersionQuery = <TData = GetVersionQuery, TError = unknown>(
  variables?: GetVersionQueryVariables,
  options?: UseQueryOptions<GetVersionQuery, TError, TData>
) =>
  useQuery<GetVersionQuery, TError, TData>(
    variables === undefined ? ['getVersion'] : ['getVersion', variables],
    useAxios<GetVersionQuery, GetVersionQueryVariables>(GetVersionDocument).bind(null, variables),
    options
  );
export const GetTasksDocument = `
    query getTasks {
  neosys {
    tasks {
      id
      type
      slug
      status
      message
    }
  }
}
    `;
export const useGetTasksQuery = <TData = GetTasksQuery, TError = unknown>(
  variables?: GetTasksQueryVariables,
  options?: UseQueryOptions<GetTasksQuery, TError, TData>
) =>
  useQuery<GetTasksQuery, TError, TData>(
    variables === undefined ? ['getTasks'] : ['getTasks', variables],
    useAxios<GetTasksQuery, GetTasksQueryVariables>(GetTasksDocument).bind(null, variables),
    options
  );
export const GetUserListDocument = `
    query getUserList($paginate: Pagination, $filter: NeosysUserSearchFilter) {
  neosys {
    user {
      list(paginate: $paginate, filter: $filter) {
        totalCount
        edges {
          node {
            id
            username
            role
            contactNo
          }
          cursor
        }
        pageInfo {
          ...Pagination
        }
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetUserListQuery = <TData = GetUserListQuery, TError = unknown>(
  variables?: GetUserListQueryVariables,
  options?: UseQueryOptions<GetUserListQuery, TError, TData>
) =>
  useQuery<GetUserListQuery, TError, TData>(
    variables === undefined ? ['getUserList'] : ['getUserList', variables],
    useAxios<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetUserEditDataDocument = `
    query getUserEditData($id: ID!) {
  neosys {
    user {
      get(id: $id) {
        data {
          name
          gender
          dob
          contactNo
          email
          role
        }
        error {
          ...MutationError
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useGetUserEditDataQuery = <TData = GetUserEditDataQuery, TError = unknown>(
  variables: GetUserEditDataQueryVariables,
  options?: UseQueryOptions<GetUserEditDataQuery, TError, TData>
) =>
  useQuery<GetUserEditDataQuery, TError, TData>(
    ['getUserEditData', variables],
    useAxios<GetUserEditDataQuery, GetUserEditDataQueryVariables>(GetUserEditDataDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetUtilityTransactionListDocument = `
    query getUtilityTransactionList($paginate: Pagination!, $filter: Filter) {
  utility {
    listUtilityRecords(paginate: $paginate, filter: $filter) {
      totalCount
      edges {
        node {
          id
          slug
          saccossName
          drAmount
          crAmount
          utility
          txnStatus
          amount
        }
        cursor
      }
      pageInfo {
        ...Pagination
      }
    }
  }
}
    ${PaginationFragmentDoc}`;
export const useGetUtilityTransactionListQuery = <
  TData = GetUtilityTransactionListQuery,
  TError = unknown
>(
  variables: GetUtilityTransactionListQueryVariables,
  options?: UseQueryOptions<GetUtilityTransactionListQuery, TError, TData>
) =>
  useQuery<GetUtilityTransactionListQuery, TError, TData>(
    ['getUtilityTransactionList', variables],
    useAxios<GetUtilityTransactionListQuery, GetUtilityTransactionListQueryVariables>(
      GetUtilityTransactionListDocument
    ).bind(null, variables),
    options
  );
