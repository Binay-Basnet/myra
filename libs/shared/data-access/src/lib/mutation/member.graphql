mutation getNewId {
  newId
}

mutation setMemberData($id: ID!, $data: KymIndMemberInput!) {
  members {
    individual(id: $id) {
      add(data: $data) {
        recordId
        error {
          ... on KymIndAddInvalidDataError {
            error
          }
        }
      }
    }
  }
}

mutation setMemberFamilyDetails($id: ID!, $data: KYMIndFamilyMemberInput!) {
  members {
    individual(id: $id) {
      familyMember {
        upsert(data: $data) {
          recordId
        }
      }
    }
  }
}

mutation deleteMemberFamilyDetails($memberId: ID!, $id: ID!) {
  members {
    individual(id: $memberId) {
      familyMember {
        delete(id: $id) {
          recordId
        }
      }
    }
  }
}

mutation setMemberOccupation(
  $id: ID!
  $isSpouse: Boolean!
  $data: KYMIndOccupationInput!
) {
  members {
    individual(id: $id) {
      occupation {
        upsert(isSpouse: $isSpouse, data: $data) {
          recordId
        }
      }
    }
  }
}

mutation deleteMemberOccupation($memberId: ID!, $id: ID!) {
  members {
    individual(id: $memberId) {
      occupation {
        delete(id: $id) {
          recordId
        }
      }
    }
  }
}

mutation updateKYMField($id: ID!, $enabled: Boolean, $name: String) {
  settings {
    kymForm {
      field {
        update(id: $id, data: { enabled: $enabled, name: $name }) {
          record {
            id
            enabled
            name
          }
        }
      }
    }
  }
}

mutation deleteKYMField($optionId: ID!) {
  settings {
    kymForm {
      option {
        delete(optionId: $optionId) {
          recordId
        }
      }
    }
  }
}

#mutation addKYMField(
#    $name: String!
#    $enabled: Boolean!
#    $hasOtherField: Boolean!
#    $fieldType: KYM_FIELD_TYPE!
#) {
#    settings {
#        kymForm {
#            field {
#                [action](
#                    data: {
#                        kymType: INDIVIDUAL
#                        name: $name
#                        enabled: $enabled
#                        hasOtherField: $hasOtherField
#                        fieldType: $fieldType
#                        options: { name: $name, enabled: $enabled, fieldType: $fieldType }
#                    }
#                ) {
#                    record {
#                        id
#                        options {
#                            id
#                            name
#                            enabled
#                            variant
#                            optionType
#                        }
#                    }
#                }
#            }
#        }
#    }
#}

mutation setKymCooperativeData($id: ID!, $data: KymCooperativeFormInput!) {
  members {
    cooperative(id: $id) {
      add(data: $data) {
        recordId
      }
    }
  }
}
