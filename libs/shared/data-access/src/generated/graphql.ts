//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from 'react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Any: unknown;
  Cursor: string;
  Date: string;
  Email: any;
  HTML: any;
  InvalidData: Record<string, Array<string>>;
  /**
   * # For Localization of every data from backend
   * ```javascript
   * {
   *    local: "localized data based on user lang setting",
   *    en: "data in english",
   *    np: "data in nepali"
   * }
   * ```
   */
  Localized: Record<"local"|"en"|"np",string>;
  Map: Record<string, string>;
  Time: string;
};

export enum Account_Type {
  Loan = 'LOAN',
  Saving = 'SAVING'
}

export type AbbsTransaction = {
  abbsStatus?: Maybe<Scalars['Boolean']>;
  payableAccountId?: Maybe<Account>;
  receivableAccountId?: Maybe<Account>;
};

export type Account = {
  accountNumber: Scalars['String'];
  accountType: Account_Type;
  amount: Scalars['Float'];
  history?: Maybe<Array<AccountHistory>>;
  id: Scalars['String'];
  interestBooked: Scalars['Float'];
  interestEarned: Scalars['Float'];
  interestRate: Scalars['Float'];
  isDefault: Scalars['Boolean'];
  name: Scalars['String'];
  subscribedDate: Scalars['Date'];
  transactions?: Maybe<Array<Transactions>>;
};

export type AccountConnection = {
  edges: Array<AccountEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type AccountEdge = {
  cursor: Scalars['Cursor'];
  node: Account;
};

export type AccountFilter = {
  id?: InputMaybe<Scalars['String']>;
};

export type AccountHistory = {
  balance: Scalars['Float'];
  date: Scalars['Date'];
  id: Scalars['String'];
};

export enum AccountOperationType {
  Joint = 'Joint',
  Single = 'Single'
}

export type AccountOperatorDetails = {
  designation?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  specimenSignature?: InputMaybe<Scalars['String']>;
};

export type AccountOperatorDetailsFormState = {
  designation?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  specimenSignature?: Maybe<Scalars['String']>;
};

export type AccountOperatorDetailsType = {
  designation?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  specimenSignature?: Maybe<Scalars['String']>;
};

export type AccountSummary = {
  totalLoan: Scalars['Float'];
  totalSaving: Scalars['Float'];
};

export type AccountTypeDetailsUnion = BankChartsOfAccount | JournalChartsOfAccount;

export type AddCoaAccountInput = {
  accountType: CoaTypesOfAccount;
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  balanceSheetAccount: Scalars['Boolean'];
  bankAccountNumber?: InputMaybe<Scalars['Int']>;
  bankGLCode?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['ID']>;
  classId: Scalars['ID'];
  code: Scalars['String'];
  currency: Scalars['String'];
  ibtAccount: Scalars['Boolean'];
  inTransitAccount: Scalars['Boolean'];
  journalCode?: InputMaybe<Scalars['String']>;
  ledgerAccount: Scalars['Boolean'];
  name: Scalars['String'];
  openingBalance: Scalars['Float'];
  parentId: Scalars['ID'];
  profitAndLossAccount: Scalars['Boolean'];
  summationAccount: Scalars['Boolean'];
};

export type AddChartsOfAccountResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<ChartsOfAccountSettingsQuery>;
  record?: Maybe<ChartsOfAccount>;
  recordId: Scalars['ID'];
};

export type Address = {
  district?: Maybe<Scalars['Localized']>;
  localLevel?: Maybe<Scalars['Localized']>;
  locality?: Maybe<Scalars['Localized']>;
  state?: Maybe<Scalars['Localized']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type AddressType = {
  permanent?: Maybe<Address>;
  temporary?: Maybe<Address>;
};

export type AdministrationQuery = {
  all: Array<Province>;
  districts: Array<Result>;
  municipalities: Array<Result>;
  provinces: Array<Result>;
  wards: Array<Scalars['Int']>;
};


export type AdministrationQueryDistrictsArgs = {
  provinceId?: InputMaybe<Scalars['Int']>;
};


export type AdministrationQueryMunicipalitiesArgs = {
  districtId: Scalars['Int'];
  provinceId: Scalars['Int'];
};


export type AdministrationQueryWardsArgs = {
  districtId: Scalars['Int'];
  municipalityId: Scalars['Int'];
  provinceId: Scalars['Int'];
};

export type AdministrativeAddress = {
  district: District;
  locality?: Maybe<Scalars['String']>;
  municipality: Municipality;
  province: Province;
  wardNo: Scalars['Int'];
};

export type AffiliatedDirectorDetails = {
  addressOfInstitution?: InputMaybe<Scalars['String']>;
  designation?: InputMaybe<Scalars['String']>;
  nameOfDirector?: InputMaybe<Scalars['String']>;
  nameOfInstitution?: InputMaybe<Scalars['String']>;
  yearlyIncome?: InputMaybe<Scalars['Float']>;
};

export type AffiliatedDirectorDetailsFormState = {
  addressOfInstitution?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  nameOfDirector?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export type AffiliatedDirectorDetailsType = {
  addressOfInstitution?: Maybe<Scalars['String']>;
  designation?: Maybe<Scalars['String']>;
  nameOfDirector?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  yearlyIncome?: Maybe<Scalars['Float']>;
};

export enum AllowedFileExtension {
  Docx = 'docx',
  Jpg = 'jpg',
  Pdf = 'pdf',
  Png = 'png'
}

export enum Arrange {
  Ascending = 'ASCENDING',
  Descending = 'DESCENDING'
}

export type AuthMutation = {
  login?: Maybe<LoginResult>;
};


export type AuthMutationLoginArgs = {
  data: LoginInput;
};

export type AuthQuery = {
  me: MeResult;
};

export type AuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type AuthorizationError = {
  code: Scalars['String'];
  message: Scalars['InvalidData'];
};

export type BadRequestError = {
  code: Scalars['String'];
  message: Scalars['String'];
};

export type BankChartsOfAccount = {
  bankAccountNumber: Scalars['Int'];
  bankGLCode: Scalars['String'];
  bankId: Scalars['ID'];
};

export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type Branch = {
  abbsTransaction?: Maybe<AbbsTransaction>;
  address: BranchAddress;
  branchCode: Scalars['Int'];
  branchStatus?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BranchCategory>;
  contactNumber: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  estDate?: Maybe<Scalars['Date']>;
  id: Scalars['ID'];
  manager: Member;
  name?: Maybe<Scalars['String']>;
  plTransferId?: Maybe<Account>;
  tdsTransaferId?: Maybe<Account>;
};

export type BranchAddError = BranchAddInvalidDataError;

export type BranchAddInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type BranchAddResult = {
  error?: Maybe<BranchAddError>;
  query?: Maybe<GeneralBranchSettingsQuery>;
  record: Branch;
  recordId: Scalars['ID'];
};

export type BranchAddress = {
  districtId?: Maybe<Scalars['ID']>;
  latitude?: Maybe<Scalars['String']>;
  locality?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['ID']>;
  vdcId?: Maybe<Scalars['ID']>;
  wardNo?: Maybe<Scalars['String']>;
};

export enum BranchCategory {
  BranchOffice = 'BRANCH_OFFICE',
  ContactOffice = 'CONTACT_OFFICE',
  HeadOffice = 'HEAD_OFFICE',
  RegionalOffice = 'REGIONAL_OFFICE',
  ServiceCenter = 'SERVICE_CENTER'
}

export type BranchConnection = {
  edges: Array<BranchEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type BranchEdge = {
  cursor: Scalars['Cursor'];
  node: Branch;
};

export type BranchInput = {
  abbsStatus?: InputMaybe<Scalars['Boolean']>;
  branchCode?: InputMaybe<Scalars['Int']>;
  branchStatus?: InputMaybe<Scalars['Boolean']>;
  category?: InputMaybe<BranchCategory>;
  districtId?: InputMaybe<Scalars['ID']>;
  email?: InputMaybe<Scalars['String']>;
  estDate?: InputMaybe<Scalars['Date']>;
  latitude?: InputMaybe<Scalars['String']>;
  locality?: InputMaybe<Scalars['String']>;
  longitude?: InputMaybe<Scalars['String']>;
  managerId?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  payableAccountId?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  plTransferId?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['ID']>;
  receivableAccountId?: InputMaybe<Scalars['String']>;
  tdsTransaferId?: InputMaybe<Scalars['String']>;
  vdcId?: InputMaybe<Scalars['ID']>;
  wardNo?: InputMaybe<Scalars['String']>;
};

export type BranchSearchFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export enum CoaTypesOfAccount {
  Bank = 'BANK',
  Cash = 'CASH',
  Journal = 'JOURNAL'
}

export type ChartsOfAccount = Base & {
  accountType: CoaTypesOfAccount;
  accountTypeDetails?: Maybe<AccountTypeDetailsUnion>;
  active: Scalars['Boolean'];
  allowFreeEntry: Scalars['Boolean'];
  allowTransaction: Scalars['Boolean'];
  classId: Scalars['ID'];
  code: Scalars['String'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  currency: Scalars['String'];
  hasSubAccounts: Scalars['Boolean'];
  id: Scalars['ID'];
  isBalanceSheetAccount: Scalars['Boolean'];
  isIbtAccount: Scalars['Boolean'];
  isInTransitAccount: Scalars['Boolean'];
  /**  can be either account or a group */
  isLedgerAccount: Scalars['Boolean'];
  isProfitAndLossAccount: Scalars['Boolean'];
  isSummationAccount: Scalars['Boolean'];
  level: Scalars['Int'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['String'];
  objState: ObjState;
  openingBalance: Scalars['Float'];
  parent?: Maybe<Account>;
};

export type ChartsOfAccountClass = {
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ChartsOfAccountClassResult = {
  data: Array<ChartsOfAccountClass>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountFilter = {
  active?: InputMaybe<Scalars['Boolean']>;
  classId?: InputMaybe<Scalars['ID']>;
  hasSubAccounts?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  isLedgerAccount?: InputMaybe<Scalars['Boolean']>;
  parentId?: InputMaybe<Scalars['ID']>;
};

export type ChartsOfAccountMutation = {
  add: AddChartsOfAccountResult;
};


export type ChartsOfAccountMutationAddArgs = {
  data: AddCoaAccountInput;
};

export type ChartsOfAccountResult = {
  data?: Maybe<Array<ChartsOfAccount>>;
  error?: Maybe<QueryError>;
};

export type ChartsOfAccountSettingsMutation = {
  account?: Maybe<ChartsOfAccountMutation>;
};

export type ChartsOfAccountSettingsQuery = {
  accounts: ChartsOfAccountResult;
  class?: Maybe<ChartsOfAccountClassResult>;
};


export type ChartsOfAccountSettingsQueryAccountsArgs = {
  filter: ChartsOfAccountFilter;
};

export type ChequePastRequest = {
  account: Account;
  branch: Branch;
  id: Scalars['ID'];
  requestNumber: Scalars['Int'];
  requestType: Scalars['String'];
  status: EBankingServiceStatus;
};

export type Citizenship = {
  inNepali?: Maybe<CitizenshipInNepali>;
  issueDate?: Maybe<Scalars['String']>;
  issuePlace?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type CitizenshipInNepali = {
  issuePlace?: Maybe<Scalars['String']>;
};

export enum ComparatorType {
  EqualTo = 'EqualTo',
  GreaterThan = 'GreaterThan',
  LessThan = 'LessThan'
}

export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type Contact = {
  mobile?: Maybe<Scalars['String']>;
  office?: Maybe<Scalars['String']>;
  residence?: Maybe<Scalars['String']>;
};

export type CoopUnionAccountOperatorDetailsInput = {
  accountOperatorsDetails?: InputMaybe<Array<InputMaybe<KymCoopUnionAccountOperatorDetailsInput>>>;
};

export type CoopUnionAccountOperatorDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionAccountOperatorDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCoopUnionAccountOperatorStatus>;
  bodDetails?: Maybe<KymCoopUnionBodDetailsStatus>;
  centralRepresentativeDetails?: Maybe<KymCoopUnionCentralRepresentativeStatus>;
  declaration?: Maybe<KymCoopUnionDeclarationStatus>;
  economicDetails?: Maybe<KymCoopUnionEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCoopUnionInstitutionalInformationStatus>;
  memberDetails?: Maybe<KymCoopUnionMemberDetailsStatus>;
};

export type CoopUnionBodDetailsInput = {
  boardOfDirectorsDetails?: InputMaybe<Array<InputMaybe<KymCoopUnionBodDetailsInput>>>;
};

export type CoopUnionBodDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionBodDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionCentralRepresentativeDetailsInput = {
  centralRepresentativeDetails?: InputMaybe<KymCoopUnionCentralRepresentativeDetailsInput>;
};

export type CoopUnionCentralRepresentativeDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionCentralRepresentativeDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionDeclarationInput = {
  documents?: InputMaybe<Array<InputMaybe<KymCoopUnionDocumentsInput>>>;
};

export type CoopUnionDeclarationResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionDeclaration>;
  recordId: Scalars['ID'];
};

export type CoopUnionEconomicDetailsInput = {
  administrativeExpense?: InputMaybe<Scalars['Float']>;
  bankCurrent?: InputMaybe<Scalars['Float']>;
  bankTarget?: InputMaybe<Scalars['Float']>;
  capitalGrantCurrent?: InputMaybe<Scalars['Float']>;
  capitalGrantTarget?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  currentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  deferredTaxExpense?: InputMaybe<Scalars['Float']>;
  directExpense?: InputMaybe<Scalars['Float']>;
  financialCost?: InputMaybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: InputMaybe<Scalars['Float']>;
  incomeFromSales?: InputMaybe<Scalars['Float']>;
  incomeFromServiceOperation?: InputMaybe<Scalars['Float']>;
  investmentsCurrent?: InputMaybe<Scalars['Float']>;
  investmentsTarget?: InputMaybe<Scalars['Float']>;
  loanAccountCurrent?: InputMaybe<Scalars['Float']>;
  loanAccountTarget?: InputMaybe<Scalars['Float']>;
  loanCurrent?: InputMaybe<Scalars['Float']>;
  loanTarget?: InputMaybe<Scalars['Float']>;
  miscellnousIncome?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: InputMaybe<Scalars['Float']>;
  otherIncome?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: InputMaybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: InputMaybe<Scalars['Float']>;
  purchase?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: InputMaybe<Scalars['Float']>;
  reserveAndSurplusTarget?: InputMaybe<Scalars['Float']>;
  riskManangementCost?: InputMaybe<Scalars['Float']>;
  savingDepositCurrent?: InputMaybe<Scalars['Float']>;
  savingDepositTarget?: InputMaybe<Scalars['Float']>;
  shareCapitalCurrent?: InputMaybe<Scalars['Float']>;
  shareCapitalTarget?: InputMaybe<Scalars['Float']>;
};

export type CoopUnionEconomicDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionEconomicDetails>;
  recordId: Scalars['ID'];
};

export type CoopUnionInstitutionInformationInput = {
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  applicantDesignation?: InputMaybe<Scalars['String']>;
  applicantName?: InputMaybe<Scalars['String']>;
  applicantSign?: InputMaybe<Scalars['String']>;
  applicantStamp?: InputMaybe<Scalars['String']>;
  branchOfficeAddress?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  fax?: InputMaybe<Scalars['String']>;
  institutionType?: InputMaybe<CoopUnionInstitutionType>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  lastAgmDate?: InputMaybe<Scalars['Date']>;
  nameOfBank?: InputMaybe<Scalars['String']>;
  nameOfInstitution?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  noOfEmployee?: InputMaybe<Scalars['Int']>;
  oprOfficeAddress?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  regdAddress?: InputMaybe<Scalars['String']>;
  regdAddressChanged?: InputMaybe<Scalars['String']>;
  regdDate?: InputMaybe<Scalars['Date']>;
  regdLatitude?: InputMaybe<Scalars['String']>;
  regdLongitude?: InputMaybe<Scalars['String']>;
  regdNo?: InputMaybe<Scalars['String']>;
  vatOrPan?: InputMaybe<Scalars['Int']>;
  website?: InputMaybe<Scalars['String']>;
};

export type CoopUnionInstitutionInformationResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionInstitutionInformation>;
  recordId: Scalars['ID'];
};

export enum CoopUnionInstitutionType {
  DistrictUnion = 'DISTRICT_UNION',
  ProvinceUnion = 'PROVINCE_UNION',
  Saccos = 'SACCOS'
}

export type CoopUnionMemberDetailsInput = {
  detailsOfMember?: InputMaybe<KymCoopUnionDetailsOfMembers>;
};

export type CoopUnionMemberDetailsResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<CooperativeUnionMemberDetails>;
  recordId: Scalars['ID'];
};

export enum CoopUnionSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS',
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS',
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS',
  Declaration = 'DECLARATION',
  EconomicDetails = 'ECONOMIC_DETAILS',
  InstitutionInformation = 'INSTITUTION_INFORMATION',
  MemberDetails = 'MEMBER_DETAILS'
}

export type CooperativeAccountOperatorDetails = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateofTrainig?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<Address>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CooperativeAddLastUpdated = {
  accountOperatorDetails?: Maybe<KymCooperativeAccountOperatorStatus>;
  bodDetails?: Maybe<KymCooperativeBodDetailsStatus>;
  declaration?: Maybe<KymCooperativeDeclarationStatus>;
  economicDetails?: Maybe<KymCooperativeEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCooperativeInstitutionalInformationStatus>;
};

export type CooperativeBodDetails = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Address>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryAddress?: Maybe<Address>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
};

export type CooperativeDeclaration = {
  accountHolderdocuments?: Maybe<Array<Maybe<CooperativeDocuments>>>;
  accountHoldersName?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<CooperativeDocuments>>>;
};

export type CooperativeDocuments = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type CooperativeEconomicDetails = {
  bank?: Maybe<Scalars['Float']>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  investments?: Maybe<Scalars['Float']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
};

export type CooperativeMember = {
  accountOperatorsDetails?: Maybe<CooperativeAccountOperatorDetails>;
  boardOfDirectorsDetails?: Maybe<CooperativeBodDetails>;
  declaration?: Maybe<CooperativeDeclaration>;
  economicDetails?: Maybe<CooperativeEconomicDetails>;
  organizationInformation?: Maybe<CooperativeOrganizationInformation>;
};

export type CooperativeOrganizationInformation = {
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeType?: Maybe<CooperativeType>;
  email?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['Date']>;
  lastAuditDate?: Maybe<Scalars['Date']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmloyee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  operatingAddress?: Maybe<Address>;
  oprLatitude?: Maybe<Scalars['String']>;
  oprLongitude?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Address>;
  regdDate?: Maybe<Scalars['Date']>;
  regdLatitude?: Maybe<Scalars['String']>;
  regdLongitude?: Maybe<Scalars['String']>;
  regdNumber?: Maybe<Scalars['Int']>;
  regdOffice?: Maybe<Scalars['String']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export enum CooperativeType {
  Agricultural = 'AGRICULTURAL',
  Business = 'BUSINESS',
  Dairy = 'DAIRY',
  Industrial = 'INDUSTRIAL',
  Multipurpose = 'MULTIPURPOSE',
  Others = 'OTHERS',
  SavingAndLoan = 'SAVING_AND_LOAN'
}

export type CooperativeUnionAccountOperatorDetails = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['Int']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateOfTraining?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentVdcOrMunicId?: Maybe<Scalars['ID']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: Maybe<Scalars['ID']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CooperativeUnionBodDetails = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['Int']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateOfTraining?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentVdcOrMunicId?: Maybe<Scalars['ID']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: Maybe<Scalars['ID']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CooperativeUnionCentralRepresentativeDetails = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['Int']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateOfTraining?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentVdcOrMunicId?: Maybe<Scalars['ID']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: Maybe<Scalars['ID']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type CooperativeUnionDeclaration = {
  documents?: Maybe<Array<Maybe<KymCoopUnionDocuments>>>;
};

export type CooperativeUnionEconomicDetails = {
  administrativeExpense?: Maybe<Scalars['Float']>;
  bankCurrent?: Maybe<Scalars['Float']>;
  bankTarget?: Maybe<Scalars['Float']>;
  capitalGrantCurrent?: Maybe<Scalars['Float']>;
  capitalGrantTarget?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: Maybe<Scalars['Float']>;
  currentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  currentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  deferredTaxExpense?: Maybe<Scalars['Float']>;
  directExpense?: Maybe<Scalars['Float']>;
  financialCost?: Maybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromInvestment?: Maybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromSales?: Maybe<Scalars['Float']>;
  incomeFromServiceOperation?: Maybe<Scalars['Float']>;
  investmentsCurrent?: Maybe<Scalars['Float']>;
  investmentsTarget?: Maybe<Scalars['Float']>;
  loanAccountCurrent?: Maybe<Scalars['Float']>;
  loanAccountTarget?: Maybe<Scalars['Float']>;
  loanCurrent?: Maybe<Scalars['Float']>;
  loanTarget?: Maybe<Scalars['Float']>;
  miscellnousIncome?: Maybe<Scalars['Float']>;
  nonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  otherIncome?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  purchase?: Maybe<Scalars['Float']>;
  reserveAndSurplusCurrent?: Maybe<Scalars['Float']>;
  reserveAndSurplusTarget?: Maybe<Scalars['Float']>;
  riskManangementCost?: Maybe<Scalars['Float']>;
  savingDepositCurrent?: Maybe<Scalars['Float']>;
  savingDepositTarget?: Maybe<Scalars['Float']>;
  shareCapitalCurrent?: Maybe<Scalars['Float']>;
  shareCapitalTarget?: Maybe<Scalars['Float']>;
};

export type CooperativeUnionInstitutionInformation = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['Int']>;
  applicantDesignation?: Maybe<Scalars['String']>;
  applicantName?: Maybe<Scalars['String']>;
  applicantSign?: Maybe<Scalars['String']>;
  applicantStamp?: Maybe<Scalars['String']>;
  branchOfficeAddress?: Maybe<Scalars['String']>;
  contactEmail?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['Int']>;
  institutionType?: Maybe<CoopUnionInstitutionType>;
  issuingOffice?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['Date']>;
  nameOfBank?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  noOfEmployee?: Maybe<Scalars['Int']>;
  oprOfficeAddress?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['Int']>;
  postBoxNo?: Maybe<Scalars['Int']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdAddressChanged?: Maybe<Scalars['String']>;
  regdDate?: Maybe<Scalars['Date']>;
  regdLatitude?: Maybe<Scalars['String']>;
  regdLongitude?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  vatOrPan?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export type CooperativeUnionMember = {
  accountOperatorsDetails?: Maybe<CooperativeUnionAccountOperatorDetails>;
  boardOfDirectorsDetails?: Maybe<CooperativeUnionBodDetails>;
  centralRepresentativeDetails?: Maybe<CooperativeUnionCentralRepresentativeDetails>;
  declaration?: Maybe<CooperativeUnionDeclaration>;
  economicDetails?: Maybe<CooperativeUnionEconomicDetails>;
  institutionInformation?: Maybe<CooperativeUnionInstitutionInformation>;
  memberDetails?: Maybe<CooperativeUnionMemberDetails>;
};

export type CooperativeUnionMemberDetails = {
  noOfFemaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: Maybe<Scalars['Int']>;
  noOfInstituionalMemberCurrent?: Maybe<Scalars['Int']>;
  noOfInstituionalMemberTarget?: Maybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: Maybe<Scalars['Int']>;
  noOfMaleMemberTarget?: Maybe<Scalars['Int']>;
};

export enum CustomIdEnum {
  Certificate = 'CERTIFICATE',
  ContactDetails = 'CONTACT_DETAILS',
  DrivingLicense = 'DRIVING_LICENSE',
  EducationQualification = 'EDUCATION_QUALIFICATION',
  EstimatedAnnualTransaction = 'ESTIMATED_ANNUAL_TRANSACTION',
  Ethnicity = 'ETHNICITY',
  FamilyIncomeSource = 'FAMILY_INCOME_SOURCE',
  FileUploads = 'FILE_UPLOADS',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS',
  ForeignEmploymentOptions = 'FOREIGN_EMPLOYMENT_OPTIONS',
  Gender = 'GENDER',
  IncomeSourceDetails = 'INCOME_SOURCE_DETAILS',
  MaritalStatus = 'MARITAL_STATUS',
  Nationality = 'NATIONALITY',
  NextToKinInformation = 'NEXT_TO_KIN_INFORMATION',
  Occupation = 'OCCUPATION',
  OccupationDetails = 'OCCUPATION_DETAILS',
  OtherCooperativeDetails = 'OTHER_COOPERATIVE_DETAILS',
  Passport = 'PASSPORT',
  Purpose = 'PURPOSE',
  Religion = 'RELIGION',
  VoterId = 'VOTER_ID'
}

export type DashboardData = {
  listDashboardTask?: Maybe<Array<Maybe<DashboardTask>>>;
  listTodayTrend?: Maybe<Array<Maybe<TodayTrend>>>;
};

export type DashboardEmployee = {
  id: Scalars['ID'];
  image: Scalars['String'];
  name?: Maybe<Scalars['String']>;
};

export type DashboardQuery = {
  dashboardData?: Maybe<DashboardData>;
};

export type DashboardTask = {
  createdBy?: Maybe<DashboardEmployee>;
  createdFor?: Maybe<DashboardEmployee>;
  description?: Maybe<Scalars['String']>;
  due?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  title?: Maybe<Scalars['String']>;
};

export enum DashboardTodayType {
  Deposits = 'DEPOSITS',
  Loan = 'LOAN',
  Transaction = 'TRANSACTION',
  Withdraws = 'WITHDRAWS'
}

export type DirectorDetails = {
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  documentNo?: InputMaybe<Scalars['String']>;
  documentPhotograph?: InputMaybe<Scalars['String']>;
  emailAddress?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  isHeadOfOrganization?: InputMaybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: InputMaybe<Scalars['Boolean']>;
  mobileNo?: InputMaybe<Scalars['String']>;
  permanentDistrict?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['Float']>;
  permanentLocality?: InputMaybe<Scalars['String']>;
  permanentLongitude?: InputMaybe<Scalars['Float']>;
  permanentMunicipality?: InputMaybe<Scalars['ID']>;
  permanentState?: InputMaybe<Scalars['ID']>;
  permanentWardNo?: InputMaybe<Scalars['Int']>;
  photograph?: InputMaybe<Scalars['String']>;
  temporaryDistrict?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['Float']>;
  temporaryLocality?: InputMaybe<Scalars['String']>;
  temporaryLongitude?: InputMaybe<Scalars['Float']>;
  temporaryMunicipality?: InputMaybe<Scalars['ID']>;
  temporaryState?: InputMaybe<Scalars['ID']>;
  temporaryWardNo?: InputMaybe<Scalars['Int']>;
};

export type DirectorDetailsFormState = {
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  documentNo?: Maybe<Scalars['String']>;
  documentPhotograph?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  permanentDistrict?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentMunicipality?: Maybe<Scalars['ID']>;
  permanentState?: Maybe<Scalars['ID']>;
  permanentWardNo?: Maybe<Scalars['Int']>;
  photograph?: Maybe<Scalars['String']>;
  temporaryDistrict?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryMunicipality?: Maybe<Scalars['ID']>;
  temporaryState?: Maybe<Scalars['ID']>;
  temporaryWardNo?: Maybe<Scalars['Int']>;
};

export type DirectorDetailsType = {
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  documentNo?: Maybe<Scalars['String']>;
  documentPhotograph?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  isHeadOfOrganization?: Maybe<Scalars['Boolean']>;
  isTemporaryAndPermanentAddressSame?: Maybe<Scalars['Boolean']>;
  mobileNo?: Maybe<Scalars['String']>;
  permanentDistrict?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentMunicipality?: Maybe<Scalars['ID']>;
  permanentState?: Maybe<Scalars['ID']>;
  permanentWardNo?: Maybe<Scalars['Int']>;
  photograph?: Maybe<Scalars['String']>;
  temporaryDistrict?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryMunicipality?: Maybe<Scalars['ID']>;
  temporaryState?: Maybe<Scalars['ID']>;
  temporaryWardNo?: Maybe<Scalars['Int']>;
};

export type District = {
  id: Scalars['Int'];
  municipalities: Array<Municipality>;
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type Document = {
  photo?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
};

export type EBankingAccountQuery = {
  get?: Maybe<Account>;
  list?: Maybe<AccountConnection>;
  summary?: Maybe<AccountSummary>;
};


export type EBankingAccountQueryGetArgs = {
  id: Scalars['ID'];
};


export type EBankingAccountQueryListArgs = {
  paginate?: InputMaybe<Pagination>;
};

export enum EBankingActiveLoanStatus {
  Pending = 'Pending',
  Processing = 'Processing',
  Scheduled = 'Scheduled'
}

export type EBankingAnnouncementQuery = {
  list: Array<Maybe<EBankingAppAnnouncement>>;
};


export type EBankingAnnouncementQueryListArgs = {
  filter?: InputMaybe<NotificationFilter>;
};

export type EBankingAppAnnouncement = {
  date: Scalars['Date'];
  details: Scalars['HTML'];
  id: Scalars['ID'];
  summary: Scalars['String'];
  title: Scalars['String'];
};

export type EBankingAppNotification = {
  date: Scalars['Date'];
  description: Scalars['String'];
  id: Scalars['ID'];
  parameters: Scalars['Map'];
  subject: Scalars['String'];
};

export type EBankingAppNotificationQuery = {
  list: Array<Maybe<EBankingAppNotification>>;
};


export type EBankingAppNotificationQueryListArgs = {
  filter?: InputMaybe<NotificationFilter>;
};

export type EBankingApplyLoanInput = {
  amount?: InputMaybe<Scalars['Float']>;
  branch?: InputMaybe<BranchInput>;
  purpose?: InputMaybe<Scalars['String']>;
};

export type EBankingApplyLoanResult = {
  error?: Maybe<EBankingCooperativeServiceError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<EBankingLoanHistory>;
  recordID: Scalars['ID'];
};

export type EBankingChequeBlockInput = {
  chequeNumber?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<Scalars['String']>;
};

export type EBankingChequeMutation = {
  block?: Maybe<EBankingChequeResult>;
  request?: Maybe<EBankingChequeResult>;
  withdrawViaCollector?: Maybe<EBankingChequeResult>;
};


export type EBankingChequeMutationBlockArgs = {
  data?: InputMaybe<EBankingChequeBlockInput>;
  memberID: Scalars['String'];
};


export type EBankingChequeMutationRequestArgs = {
  data?: InputMaybe<EBankingChequeRequestInput>;
  memberID: Scalars['String'];
};


export type EBankingChequeMutationWithdrawViaCollectorArgs = {
  data?: InputMaybe<EBankingChequeWithdrawViaCollectorInput>;
  memberID: Scalars['String'];
};

export type EBankingChequeQuery = {
  options: Array<EBankingCooperativeServiceOption>;
  pastRequests: Array<ChequePastRequest>;
};


export type EBankingChequeQueryPastRequestsArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
};

export type EBankingChequeRequestInput = {
  branch?: InputMaybe<BranchInput>;
  collector?: InputMaybe<Scalars['ID']>;
  type: EBankingChequeRequestType;
};

export enum EBankingChequeRequestType {
  SelfPickup = 'Self_Pickup',
  ThroughAgent = 'Through_agent'
}

export type EBankingChequeResult = {
  error?: Maybe<EBankingCooperativeServiceError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<ChequePastRequest>;
  recordID: Scalars['ID'];
};

export type EBankingChequeWithdrawViaCollectorInput = {
  amount?: InputMaybe<Scalars['Float']>;
  branch?: InputMaybe<Scalars['ID']>;
  collector?: InputMaybe<Scalars['ID']>;
};

export type EBankingCombined = {
  accounts: Array<Maybe<Account>>;
  recentTransactions: Array<Maybe<Transactions>>;
  services: Array<Maybe<Services>>;
  share: EbankingShare;
};

export type EBankingComplaintHistory = {
  applicationNumber: Scalars['Int'];
  detailedAccount?: Maybe<Scalars['String']>;
  feedbackDate: Scalars['Date'];
  id: Scalars['ID'];
  peopleInvolved?: Maybe<Scalars['String']>;
  proposedSolution?: Maybe<Scalars['String']>;
  status: EBankingServiceStatus;
  violatedPolicies?: Maybe<Scalars['String']>;
};

export type EBankingComplaintMutation = {
  register?: Maybe<EBankingComplaintRegisterResult>;
};


export type EBankingComplaintMutationRegisterArgs = {
  data?: InputMaybe<EBankingRegisterComplaintInput>;
  memberID: Scalars['String'];
};

export type EBankingComplaintQuery = {
  history: Array<EBankingComplaintHistory>;
  options: Array<EBankingCooperativeServiceOption>;
};


export type EBankingComplaintQueryHistoryArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
};

export type EBankingComplaintRegisterResult = {
  error?: Maybe<EBankingCooperativeServiceError>;
  query?: Maybe<EBankingCooperativeServiceQuery>;
  record?: Maybe<EBankingComplaintHistory>;
  recordID: Scalars['ID'];
};

export type EBankingCooperativeServiceError = EBankingCooperativeServiceInvalidDataError;

export type EBankingCooperativeServiceFilter = {
  status?: InputMaybe<EBankingServiceStatus>;
};

export type EBankingCooperativeServiceInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type EBankingCooperativeServiceMutation = {
  cheque?: Maybe<EBankingChequeMutation>;
  complaint?: Maybe<EBankingComplaintMutation>;
  loan?: Maybe<EBankingLoanMutation>;
};

export type EBankingCooperativeServiceOption = {
  enabled: Scalars['Boolean'];
  name: Scalars['String'];
  requestType?: Maybe<Scalars['String']>;
};

export type EBankingCooperativeServiceQuery = {
  cheque?: Maybe<EBankingChequeQuery>;
  complaint?: Maybe<EBankingComplaintQuery>;
  downloads?: Maybe<EBankingDownloadsQuery>;
  loan?: Maybe<EBankingLoanQuery>;
  organizationInfo: Organization;
};


export type EBankingCooperativeServiceQueryOrganizationInfoArgs = {
  id: Scalars['ID'];
};

export type EBankingDownloadFile = {
  category: Scalars['String'];
  extension: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  size: Scalars['String'];
  url: Scalars['String'];
};

export type EBankingDownloadsFilter = {
  category?: InputMaybe<Scalars['String']>;
};

export type EBankingDownloadsQuery = {
  files: Array<EBankingDownloadFile>;
  options: Array<EBankingCooperativeServiceOption>;
};


export type EBankingDownloadsQueryFilesArgs = {
  filter?: InputMaybe<EBankingDownloadsFilter>;
};

export type EBankingKymAddFormStatus = {
  lastUpdated: EBankingKymAddLus;
  sectionStatus?: Maybe<EBankingKymAddSectionStatus>;
};

export type EBankingKymAddLus = EBankingKymCooperativeLus | EBankingKymDeclarationLus | EBankingKymPersonalLus | EBankingKymProfessionalLus;

export type EBankingKymAddLastUpdated = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMemberStatus>;
  declaration?: Maybe<EBankingKymDeclarationStatus>;
  personal?: Maybe<EBankingKymPersonalStatus>;
  professional?: Maybe<EBankingKymProfessionalStatus>;
};

export type EBankingKymAddSectionStatus = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMemberStatus>;
  declaration?: Maybe<EBankingKymDeclarationStatus>;
  personal?: Maybe<EBankingKymPersonalStatus>;
  professional?: Maybe<EBankingKymProfessionalStatus>;
};

export type EBankingKymCooperativeLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymCooperativeMemberSection {
  BackgroundInformation = 'BACKGROUND_INFORMATION',
  EstimatedTransactions = 'ESTIMATED_TRANSACTIONS',
  FinancialTransactionDetails = 'FINANCIAL_TRANSACTION_DETAILS'
}

export type EBankingKymCooperativeMemberStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymCooperativeMemberSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymCooperativeMemberSection>>>;
};

export type EBankingKymCooperativeMembership = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['ID']>;
  familyMemberInThisCooperative?: Maybe<Array<Maybe<KymFamilyMemberDetailsInThisCooperativeFormState>>>;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  loan?: Maybe<Scalars['Float']>;
  memberNumberInAnotherCooperative?: Maybe<Scalars['String']>;
  nameAndAddressOfAnotherCooperative?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['Float']>;
  purposeId?: Maybe<Scalars['ID']>;
  savings?: Maybe<Scalars['Float']>;
  share?: Maybe<Scalars['Int']>;
};

export type EBankingKymCooperativeMembershipInput = {
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['ID']>;
  familyMemberInThisCooperative?: InputMaybe<Array<InputMaybe<KymFamilyMemberDetailsInThisCooperative>>>;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  loan?: InputMaybe<Scalars['Float']>;
  memberNumberInAnotherCooperative?: InputMaybe<Scalars['String']>;
  nameAndAddressOfAnotherCooperative?: InputMaybe<Scalars['String']>;
  other?: InputMaybe<Scalars['Float']>;
  purposeId?: InputMaybe<Scalars['ID']>;
  savings?: InputMaybe<Scalars['Float']>;
  share?: InputMaybe<Scalars['Int']>;
};

export type EBankingKymCooperativeMembershipResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymDeclaration = {
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['ID']>;
  convictionDetails?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<KymDocumentsFormState>>>;
  foreignResidencyType?: Maybe<Scalars['ID']>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  localKinAddress?: Maybe<Scalars['String']>;
  localKinContact?: Maybe<Scalars['String']>;
  localKinName?: Maybe<Scalars['String']>;
  localKinRelationshipId?: Maybe<Scalars['ID']>;
};

export type EBankingKymDeclarationInput = {
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['ID']>;
  convictionDetails?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<KymDocuments>>>;
  foreignResidencyType?: InputMaybe<Scalars['ID']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  localKinAddress?: InputMaybe<Scalars['String']>;
  localKinContact?: InputMaybe<Scalars['String']>;
  localKinName?: InputMaybe<Scalars['String']>;
  localKinRelationshipId?: InputMaybe<Scalars['ID']>;
};

export type EBankingKymDeclarationLus = {
  name: EBankingKymPersonalSection;
};

export type EBankingKymDeclarationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export enum EBankingKymDeclarationSection {
  DeclarationInformation = 'DECLARATION_INFORMATION'
}

export type EBankingKymDeclarationStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymDeclarationSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymDeclarationSection>>>;
};

export type EBankingKymFormData = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMembership>;
  declaration?: Maybe<EBankingKymDeclaration>;
  personalInformation?: Maybe<EBankingKymPersonalInformation>;
  professionalInformation?: Maybe<EBankingKymProfessionalInformation>;
};

export type EBankingKymFormState = {
  formData?: Maybe<EBankingKymFormData>;
  lastUpdated: EBankingKymAddLus;
  sectionStatus?: Maybe<EBankingKymAddSectionStatus>;
};

export type EBankingKymFormStateQuery = {
  data?: Maybe<EBankingKymFormState>;
};

export type EBankingKymIndAddError = EBankingKymInvalidDataError;

export type EBankingKymInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type EBankingKymMutation = {
  add?: Maybe<EBankingKymSectionMutation>;
  newKymId: Scalars['ID'];
};


export type EBankingKymMutationAddArgs = {
  id: Scalars['ID'];
};


export type EBankingKymMutationNewKymIdArgs = {
  cooperativeId: Scalars['ID'];
  memberId: Scalars['ID'];
};

export type EBankingKymPersonalInformation = {
  dateOfBirth?: Maybe<Scalars['String']>;
  educationQualificationId?: Maybe<Scalars['ID']>;
  email?: Maybe<Scalars['String']>;
  ethnicityId?: Maybe<Scalars['ID']>;
  familyDetails?: Maybe<Array<Maybe<KymFamilyDetailsFormState>>>;
  firstName?: Maybe<Scalars['String']>;
  genderId?: Maybe<Scalars['ID']>;
  identification?: Maybe<Array<Maybe<KymIdentificationFormState>>>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['String']>;
  livingInRentedHouse?: Maybe<Scalars['Boolean']>;
  longitude?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['ID']>;
  middleName?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['Int']>;
  nationalityId?: Maybe<Scalars['ID']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLocalityId?: Maybe<Scalars['ID']>;
  permanentMunicipalityId?: Maybe<Scalars['ID']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentTole?: Maybe<Scalars['String']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  phoneNumber?: Maybe<Scalars['Int']>;
  religionId?: Maybe<Scalars['ID']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLocalityId?: Maybe<Scalars['ID']>;
  temporaryMunicipalityId?: Maybe<Scalars['ID']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryTole?: Maybe<Scalars['String']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
};

export type EBankingKymPersonalInformationInput = {
  dateOfBirth?: InputMaybe<Scalars['String']>;
  educationQualificationId?: InputMaybe<Scalars['ID']>;
  email?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['ID']>;
  familyDetails?: InputMaybe<Array<InputMaybe<KymFamilyDetails>>>;
  firstName?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['ID']>;
  identification?: InputMaybe<Array<InputMaybe<KymIdentification>>>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  latitude?: InputMaybe<Scalars['String']>;
  livingInRentedHouse?: InputMaybe<Scalars['Boolean']>;
  longitude?: InputMaybe<Scalars['String']>;
  maritalStatusId?: InputMaybe<Scalars['ID']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['Int']>;
  nationalityId?: InputMaybe<Scalars['ID']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentMunicipalityId?: InputMaybe<Scalars['ID']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  phoneNumber?: InputMaybe<Scalars['Int']>;
  religionId?: InputMaybe<Scalars['ID']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryMunicipalityId?: InputMaybe<Scalars['ID']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
};

export type EBankingKymPersonalInformationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymPersonalLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymPersonalSection {
  Address = 'ADDRESS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  FamilyDetails = 'FAMILY_DETAILS',
  IdentificationDetails = 'IDENTIFICATION_DETAILS'
}

export type EBankingKymPersonalStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymPersonalSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymPersonalSection>>>;
};

export type EBankingKymProfessionalInformation = {
  annualIncomeSourceId?: Maybe<Scalars['ID']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymIncomeSourceDetailsFormState>>>;
  mainOccupation?: Maybe<Array<Maybe<KymOccupationDetailsFormState>>>;
  spouseOccupation?: Maybe<Array<Maybe<KymOccupationDetailsFormState>>>;
};

export type EBankingKymProfessionalInformationInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['ID']>;
  incomeSourceDetails?: InputMaybe<Array<InputMaybe<KymIncomeSourceDetails>>>;
  mainOccupation?: InputMaybe<Array<InputMaybe<KymOccupationDetails>>>;
  spouseOccupation?: InputMaybe<Array<InputMaybe<KymOccupationDetails>>>;
};

export type EBankingKymProfessionalInformationResult = {
  error?: Maybe<EBankingKymIndAddError>;
  query?: Maybe<EBankingQuery>;
  record?: Maybe<EBankingKymFormState>;
  recordId: Scalars['ID'];
};

export type EBankingKymProfessionalLus = {
  name: EBankingKymPersonalSection;
};

export enum EBankingKymProfessionalSection {
  IncomeSource = 'INCOME_SOURCE',
  MainProfession = 'MAIN_PROFESSION',
  Profession = 'PROFESSION',
  SpouseOccupation = 'SPOUSE_OCCUPATION'
}

export type EBankingKymProfessionalStatus = {
  completed?: Maybe<Array<Maybe<EBankingKymProfessionalSection>>>;
  error?: Maybe<Array<Maybe<EBankingKymProfessionalSection>>>;
};

export type EBankingKymQuery = {
  formState: EBankingKymFormStateQuery;
};


export type EBankingKymQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type EBankingKymSectionMutation = {
  cooperativeMembership?: Maybe<EBankingKymCooperativeMembershipResult>;
  declaration?: Maybe<EBankingKymDeclarationResult>;
  personalInformation?: Maybe<EBankingKymPersonalInformationResult>;
  professionalInformation?: Maybe<EBankingKymProfessionalInformationResult>;
};


export type EBankingKymSectionMutationCooperativeMembershipArgs = {
  data?: InputMaybe<EBankingKymCooperativeMembershipInput>;
};


export type EBankingKymSectionMutationDeclarationArgs = {
  data?: InputMaybe<EBankingKymDeclarationInput>;
};


export type EBankingKymSectionMutationPersonalInformationArgs = {
  data?: InputMaybe<EBankingKymPersonalInformationInput>;
};


export type EBankingKymSectionMutationProfessionalInformationArgs = {
  data?: InputMaybe<EBankingKymProfessionalInformationInput>;
};

export type EBankingLoanHistory = {
  activeLoanStatus?: Maybe<EBankingActiveLoanStatus>;
  amount: Scalars['Float'];
  appliedDate: Scalars['Date'];
  branch: Branch;
  id: Scalars['String'];
  scheduledDate?: Maybe<Scalars['Date']>;
  status: EBankingServiceStatus;
  type: Scalars['String'];
};

export type EBankingLoanMutation = {
  apply?: Maybe<EBankingApplyLoanResult>;
};


export type EBankingLoanMutationApplyArgs = {
  data?: InputMaybe<EBankingApplyLoanInput>;
  memberID: Scalars['String'];
};

export type EBankingLoanQuery = {
  history: Array<EBankingLoanHistory>;
  options: Array<EBankingCooperativeServiceOption>;
};


export type EBankingLoanQueryHistoryArgs = {
  filter?: InputMaybe<EBankingCooperativeServiceFilter>;
};

export type EBankingMutation = {
  cooperativeServices?: Maybe<EBankingCooperativeServiceMutation>;
  kym?: Maybe<EBankingKymMutation>;
};

export type EBankingNotificationQuery = {
  announcements?: Maybe<EBankingAnnouncementQuery>;
  appNotifications?: Maybe<EBankingAppNotificationQuery>;
};

export type EBankingQuery = {
  account?: Maybe<EBankingAccountQuery>;
  cooperativeServices?: Maybe<EBankingCooperativeServiceQuery>;
  home: EBankingCombined;
  kym?: Maybe<EBankingKymQuery>;
  me?: Maybe<Member>;
  notification?: Maybe<EBankingNotificationQuery>;
  services?: Maybe<Array<Maybe<Services>>>;
  share?: Maybe<EBankingShareQuery>;
  transaction?: Maybe<EBankingTransactionQuery>;
};

export type EBankingRegisterComplaintInput = {
  date?: InputMaybe<Scalars['Date']>;
  detailedAccount?: InputMaybe<Scalars['String']>;
  peopleInvolved?: InputMaybe<Scalars['String']>;
  policiesViolated?: InputMaybe<Scalars['String']>;
  proposedSolution?: InputMaybe<Scalars['String']>;
};

export enum EBankingServiceStatus {
  Active = 'Active',
  Completed = 'Completed',
  Declined = 'Declined'
}

export type EBankingShareQuery = {
  history?: Maybe<Array<Maybe<EbankingShareHistory>>>;
  summary: EbankingShare;
};


export type EBankingShareQueryHistoryArgs = {
  filter?: InputMaybe<EbankingShareFilter>;
};

export type EBankingTransactionQuery = {
  monthly: Array<Maybe<MonthlyTransactions>>;
  recent?: Maybe<Array<Maybe<Transactions>>>;
};


export type EBankingTransactionQueryMonthlyArgs = {
  filter?: InputMaybe<Filter>;
};


export type EBankingTransactionQueryRecentArgs = {
  filter?: InputMaybe<RecentTransactionFilter>;
};

export type EbankingShare = {
  totalShare: Scalars['Int'];
  value: Scalars['Float'];
};

export type EbankingShareFilter = {
  page: Scalars['String'];
};

export type EbankingShareHistory = {
  amount: Scalars['Float'];
  date: Scalars['Date'];
  id: Scalars['String'];
  numberOfShares: Scalars['Int'];
  title: Scalars['String'];
  transactionDirection: Transaction_Direction;
};

export type Errors = Invalid_Data;

export type Example = {
  age: Scalars['Int'];
  enrolledAt: Scalars['Time'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ExampleInput = {
  age?: InputMaybe<Scalars['Int']>;
  enrolledAt?: InputMaybe<Scalars['Time']>;
  name: Scalars['String'];
};

export type ExampleMutation = {
  level1: Level1;
};

export type ExampleQuery = {
  localization: LocalizationExample;
  testDb: TestDbResult;
};

export type FamilyDetails = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  inNepali?: Maybe<FamilyDetailsInNepali>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type FamilyDetailsInNepali = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type Filter = {
  orConditions: Array<OrConditions>;
};

export type GeneralBranchSettingsMutation = {
  add: BranchAddResult;
};


export type GeneralBranchSettingsMutationAddArgs = {
  data?: InputMaybe<BranchInput>;
};

export type GeneralBranchSettingsQuery = {
  getBranch: Branch;
  list?: Maybe<BranchConnection>;
};


export type GeneralBranchSettingsQueryGetBranchArgs = {
  id: Scalars['ID'];
};


export type GeneralBranchSettingsQueryListArgs = {
  filter?: InputMaybe<BranchSearchFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type GeneralSettingsMutation = {
  KYM?: Maybe<KymMutation>;
  branch?: Maybe<GeneralBranchSettingsMutation>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsMutation>;
  organization?: Maybe<OrganizationSettingsMutation>;
};

export type GeneralSettingsQuery = {
  KYM?: Maybe<KymQuery>;
  branch?: Maybe<GeneralBranchSettingsQuery>;
  chartsOfAccount?: Maybe<ChartsOfAccountSettingsQuery>;
  organization?: Maybe<OrganizationSettingsQuery>;
};

export type Invalid_Data = {
  code: Scalars['String'];
  message: Scalars['InvalidData'];
};

export type Identity = {
  id: Scalars['ID'];
  name: Scalars['String'];
  userType: UserType;
  username: Scalars['String'];
};

export type IndividualMember = {
  cooperativeMembership?: Maybe<KymCoopMembershipDetails>;
  declaration?: Maybe<KymIndDeclaration>;
  personalInformation?: Maybe<KymIndPersonalInformation>;
  professionalInformation?: Maybe<KymIndProfessionalInformation>;
};

export type InstitutionAccountOperatoionsDetails = {
  accountOperatorsDetails?: Maybe<Array<Maybe<AccountOperatorDetailsType>>>;
  accountType?: Maybe<AccountOperationType>;
  companyStamp?: Maybe<Scalars['String']>;
  specialInstruction?: Maybe<Scalars['String']>;
};

export type InstitutionDeclaration = {
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  cooperativeDocuments?: Maybe<Array<Maybe<KymInstitutionDocumentsType>>>;
};

export enum InstitutionExpectedMonthlyTransaction {
  Above_25Lakhs = 'Above_25_lakhs',
  LessThan_10Lakhs = 'Less_than_10_lakhs',
  LessThan_25Lakhs = 'Less_than_25_lakhs'
}

export enum InstitutionExpectedMonthlyTurnover {
  Above_10LakKymDocumentshs = 'Above_10_lakKymDocumentshs',
  LessThan_5Lakhs = 'Less_Than_5_lakhs',
  LessThan_10Lakhs = 'Less_Than_10_lakhs'
}

export type InstitutionMember = {
  accoountOperationsDetails?: Maybe<InstitutionAccountOperatoionsDetails>;
  declaration?: Maybe<InstitutionDeclaration>;
  organizationInformation?: Maybe<InstitutionOrganizationInformation>;
  propietorAndDirectorDetails?: Maybe<InstitutionPropietorAndDirectorDetails>;
  transactionProfile?: Maybe<InstitutionTransactionProfile>;
};

export type InstitutionOrganizationInformation = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<Scalars['String']>;
  dateOfLastAGM?: Maybe<Scalars['Date']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionType?: Maybe<InstitutionType>;
  issuingOffice?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<Scalars['String']>;
  registeredAddressIfChanged?: Maybe<Scalars['String']>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Date']>;
  sisterConcernDetails?: Maybe<Array<Maybe<SisterConcernDetailsType>>>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type InstitutionPropietorAndDirectorDetails = {
  detailsOfDirectors?: Maybe<Array<Maybe<DirectorDetailsType>>>;
  detailsOfDirectorsWithAffiliation?: Maybe<Array<Maybe<AffiliatedDirectorDetailsType>>>;
};

export type InstitutionTransactionProfile = {
  annualTurnover?: Maybe<Scalars['Float']>;
  expectedMonthlyTransaction?: Maybe<InstitutionExpectedMonthlyTransaction>;
  expectedMonthlyTurnover?: Maybe<InstitutionExpectedMonthlyTurnover>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
};

export enum InstitutionType {
  CommunitySchool = 'Community_School',
  GovernmentBody = 'Government_Body',
  LocalClubs = 'Local_Clubs',
  LocalConsumerGroup = 'Local_Consumer_Group',
  NonprofitOrganization = 'Nonprofit_Organization',
  Others = 'Others',
  ServiceProviderInstitution = 'Service_Provider_Institution'
}

export type InvItems = {
  id: Scalars['ID'];
  itemCode: Scalars['String'];
  itemQuantity: Scalars['Float'];
  name: Scalars['String'];
  type: Scalars['String'];
  unitPrice: Scalars['Float'];
};

export type InvItemsAddResult = {
  error?: Maybe<InvItemsError>;
  query?: Maybe<InvItemsQuery>;
  record?: Maybe<InvItems>;
  recordId: Scalars['ID'];
};

export type InvItemsConnection = {
  edges: Array<Maybe<InvItemsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvItemsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsEdge = {
  cursor: Scalars['Cursor'];
  node: InvItems;
};

export type InvItemsError = InvItemsInvalidDataError;

export type InvItemsGroup = {
  description: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupAddResult = {
  error?: Maybe<InvItemsGroupError>;
  query?: Maybe<InvItemsGroupQuery>;
  record?: Maybe<InvItemsGroup>;
  recordId: Scalars['ID'];
};

export type InvItemsGroupConnection = {
  edges: Array<Maybe<InvItemsGroupEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvItemsGroupDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvItemsGroupEdge = {
  cursor: Scalars['Cursor'];
  node: InvItemsGroup;
};

export type InvItemsGroupError = InvItemsGroupInvalidDataError;

export type InvItemsGroupInput = {
  description: Scalars['String'];
  name: Scalars['String'];
  parentCategory: Scalars['String'];
};

export type InvItemsGroupInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvItemsGroupMutation = {
  add: InvItemsGroupAddResult;
};


export type InvItemsGroupMutationAddArgs = {
  data: InvItemsGroupInput;
};

export type InvItemsGroupQuery = {
  get: InvItemsGroup;
  list?: Maybe<InvItemsGroupConnection>;
};


export type InvItemsGroupQueryGetArgs = {
  id: Scalars['ID'];
};


export type InvItemsGroupQueryListArgs = {
  filter?: InputMaybe<InvItemsGroupDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvItemsInput = {
  itemCode: Scalars['String'];
  itemGroup: Scalars['String'];
  itemQuantity: Scalars['Float'];
  name: Scalars['String'];
  primaryUnit: Scalars['String'];
  tax: Scalars['String'];
  type: Scalars['String'];
  unitPrice: Scalars['Float'];
};

export type InvItemsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvItemsMutation = {
  add: InvItemsAddResult;
};


export type InvItemsMutationAddArgs = {
  data: InvItemsInput;
};

export type InvItemsQuery = {
  get: InvItems;
  getNewItemCode: Scalars['String'];
  list?: Maybe<InvItemsConnection>;
};


export type InvItemsQueryGetArgs = {
  id: Scalars['ID'];
};


export type InvItemsQueryGetNewItemCodeArgs = {
  type?: InputMaybe<Scalars['String']>;
};


export type InvItemsQueryListArgs = {
  filter?: InputMaybe<InvItemsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvUnitOfMeasure = {
  acceptFraction: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureAddResult = {
  error?: Maybe<InvUnitOfMeasureError>;
  query?: Maybe<InvUnitOfMeasureQuery>;
  record?: Maybe<InvUnitOfMeasure>;
  recordId: Scalars['ID'];
};

export type InvUnitOfMeasureConnection = {
  edges: Array<Maybe<InvUnitOfMeasureEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvUnitOfMeasureDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvUnitOfMeasureEdge = {
  cursor: Scalars['Cursor'];
  node: InvUnitOfMeasure;
};

export type InvUnitOfMeasureError = InvUnitOfMeasureInvalidDataError;

export type InvUnitOfMeasureInput = {
  acceptFraction: Scalars['Boolean'];
  description: Scalars['String'];
  name: Scalars['String'];
  shortName: Scalars['String'];
};

export type InvUnitOfMeasureInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvUnitOfMeasureMutation = {
  add: InvUnitOfMeasureAddResult;
};


export type InvUnitOfMeasureMutationAddArgs = {
  data: InvUnitOfMeasureInput;
};

export type InvUnitOfMeasureQuery = {
  get: InvUnitOfMeasure;
  list?: Maybe<InvUnitOfMeasureConnection>;
};


export type InvUnitOfMeasureQueryGetArgs = {
  id: Scalars['ID'];
};


export type InvUnitOfMeasureQueryListArgs = {
  filter?: InputMaybe<InvUnitOfMeasureDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvVendors = {
  email: Scalars['String'];
  id: Scalars['ID'];
  location: Scalars['String'];
  name: Scalars['String'];
  phoneNumber: Scalars['String'];
};

export type InvVendorsAddResult = {
  error?: Maybe<InvVendorsError>;
  query?: Maybe<InvVendorsQuery>;
  record?: Maybe<InvVendors>;
  recordId: Scalars['ID'];
};

export type InvVendorsConnection = {
  edges: Array<Maybe<InvVendorsEdge>>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvVendorsDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type InvVendorsEdge = {
  cursor: Scalars['Cursor'];
  node: InvVendors;
};

export type InvVendorsError = InvVendorsInvalidDataError;

export type InvVendorsInput = {
  contactName: Scalars['String'];
  contactPhoneNo: Scalars['String'];
  creditLimit?: InputMaybe<Scalars['Float']>;
  creditTerms?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  location: Scalars['String'];
  name: Scalars['String'];
  openingBalance?: InputMaybe<Scalars['Float']>;
  panNo: Scalars['String'];
  phoneNumber: Scalars['String'];
  vendorCode: Scalars['String'];
};

export type InvVendorsInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InvVendorsMutation = {
  add: InvVendorsAddResult;
};


export type InvVendorsMutationAddArgs = {
  data: InvVendorsInput;
};

export type InvVendorsQuery = {
  get: InvVendors;
  list?: Maybe<InvVendorsConnection>;
};


export type InvVendorsQueryGetArgs = {
  id: Scalars['ID'];
};


export type InvVendorsQueryListArgs = {
  filter?: InputMaybe<InvVendorsDataFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type InvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type InventoryMutation = {
  items?: Maybe<InvItemsMutation>;
  itemsGroup?: Maybe<InvItemsGroupMutation>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureMutation>;
  vendors?: Maybe<InvVendorsMutation>;
};

export type InventoryQuery = {
  items?: Maybe<InvItemsQuery>;
  itemsGroup?: Maybe<InvItemsGroupQuery>;
  unitOfMeasure?: Maybe<InvUnitOfMeasureQuery>;
  vendors?: Maybe<InvVendorsQuery>;
};

export type JournalChartsOfAccount = {
  journalCode: Scalars['String'];
};

export type KymAllowed = {
  allowed: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type KymAllowedError = KymAllowedInvalidDataError;

export type KymAllowedInput = {
  allowed: Scalars['Boolean'];
  id: Scalars['ID'];
};

export type KymAllowedInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymAllowedResult = {
  error?: Maybe<KymAllowedError>;
  query?: Maybe<KymQuery>;
  record?: Maybe<KymAllowed>;
  recordId: Scalars['ID'];
};

export type KymConditionalOptionResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymGeneralSettingsQuery>;
  record?: Maybe<KymField>;
  recordId: Scalars['ID'];
};

export type KymCustomFieldResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymQuery>;
  record?: Maybe<KymField>;
  recordId: Scalars['ID'];
};

export type KymCustomOptionCategory = {
  custom: Kym_Option_Custom_Type;
};

export type KymDeclaration = {
  content: Scalars['String'];
  id: Scalars['ID'];
};

export type KymDeclarationInput = {
  content: Scalars['String'];
};

export type KymDeclarationMutation = {
  update: KymDeclarationResult;
};


export type KymDeclarationMutationUpdateArgs = {
  data: KymDeclarationInput;
};

export type KymDeclarationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymQuery>;
  record?: Maybe<KymDeclaration>;
  recordId: Scalars['ID'];
};

export type KymDisplayOptionCategory = {
  display: Kym_Option_Display_Type;
};

export type KymField = Base & {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dependsOn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  enabled: Scalars['Boolean'];
  fieldType: Kym_Field_Type;
  hasOtherField: Scalars['Boolean'];
  id: Scalars['ID'];
  isCustom: Scalars['Boolean'];
  kymType: KymMemberTypesEnum;
  maxSize?: Maybe<Scalars['Int']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  options?: Maybe<Array<KymOption>>;
  parent?: Maybe<Kym_Field_Parent>;
};

export type KymFieldData = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  id?: Maybe<Scalars['String']>;
};

export type KymFieldDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymFieldQuery>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymFieldInput = {
  enabled: Scalars['Boolean'];
  fieldType: Kym_Field_Type;
  hasOtherField: Scalars['Boolean'];
  kymType: KymMemberTypesEnum;
  name: Scalars['String'];
  options?: InputMaybe<Array<InputMaybe<KymOptionInput>>>;
  parent?: InputMaybe<Kym_Field_Parent>;
};

export type KymFieldInputData = {
  fields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  group?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
};

export type KymFieldMutation = {
  add: KymFieldMutationResult;
  delete: KymFieldDeleteResult;
  update: KymFieldMutationResult;
};


export type KymFieldMutationAddArgs = {
  data: KymFieldInput;
};


export type KymFieldMutationDeleteArgs = {
  id: Scalars['ID'];
};


export type KymFieldMutationUpdateArgs = {
  data: KymFieldUpdateInput;
  id: Scalars['ID'];
};

export type KymFieldMutationResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymFieldQuery>;
  record?: Maybe<KymField>;
  recordId?: Maybe<Scalars['ID']>;
};

export type KymFieldQuery = {
  list?: Maybe<KymListFieldResult>;
};


export type KymFieldQueryListArgs = {
  filter?: InputMaybe<ListKymFieldFilter>;
};

export type KymFieldResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymQuery>;
  record?: Maybe<KymField>;
  recordId: Scalars['ID'];
};

export type KymFieldUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  fieldType?: InputMaybe<Kym_Field_Type>;
  hasOtherField?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
};

export type KymFileOptionCategory = {
  file: Kym_Option_File_Type;
};

export type KymFormSettingMutation = {
  condition: KymConditionalOptionResult;
  declaration: KymDeclarationMutation;
  field: KymFieldMutation;
  maxSize: KymMaxSizeResult;
  option: KymOptionMutation;
  seed: Scalars['Boolean'];
};


export type KymFormSettingMutationConditionArgs = {
  dependsOn: Array<InputMaybe<Scalars['ID']>>;
  fieldId: Scalars['ID'];
};


export type KymFormSettingMutationMaxSizeArgs = {
  fieldId: Scalars['ID'];
  maxSize: Scalars['Int'];
};

export type KymFormSettingQuery = {
  declaration: KymDeclaration;
  field?: Maybe<KymFieldQuery>;
};

export type KymGeneralSettingsMutation = {
  addRiskLevel: KymMemberRiskResult;
  switchAllowed: KymAllowedResult;
  updateRiskLevel: KymMemberRiskResult;
};


export type KymGeneralSettingsMutationAddRiskLevelArgs = {
  data: KymMemberRiskInput;
};


export type KymGeneralSettingsMutationSwitchAllowedArgs = {
  input: KymAllowedInput;
};


export type KymGeneralSettingsMutationUpdateRiskLevelArgs = {
  data: KymMemberRiskInput;
};

export type KymGeneralSettingsQuery = {
  allowed: Array<KymAllowed>;
  riskLevel: Array<Maybe<KymMemberRisk>>;
};

export type KymIndividualSettingsQuery = {
  declaration: KymDeclaration;
  field?: Maybe<KymFieldQuery>;
};

export type KymInputOptionCategory = {
  input: Kym_Option_Input_Type;
};

export type KymListFieldResult = {
  data?: Maybe<Array<Maybe<KymField>>>;
  error?: Maybe<MutationError>;
};

export type KymMaxSizeResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymGeneralSettingsQuery>;
  record?: Maybe<KymField>;
  recordId: Scalars['ID'];
};

export type KymMemberRisk = {
  id: Scalars['ID'];
  name: Scalars['String'];
  years: Scalars['Float'];
};

export type KymMemberRiskError = KymMemberRiskInvalidDataError;

export type KymMemberRiskInput = {
  id: Scalars['ID'];
  name: Scalars['String'];
  years: Scalars['Float'];
};

export type KymMemberRiskInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymMemberRiskResult = {
  error?: Maybe<KymMemberRiskError>;
  query?: Maybe<KymQuery>;
  record?: Maybe<KymMemberRisk>;
  recordId: Scalars['ID'];
};

export type KymMutation = {
  general?: Maybe<KymGeneralSettingsMutation>;
};

export type KymOption = Base & {
  category: KymOptionCategory;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  enabled: Scalars['Boolean'];
  field?: Maybe<KymField>;
  /**  This fieldType is a combination of category field only to be used by frontend  */
  fieldType: Kym_Option_Field_Type;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name: Scalars['Localized'];
  objState: ObjState;
  order: Scalars['Int'];
};

export type KymOptionCategory = KymCustomOptionCategory | KymDisplayOptionCategory | KymFileOptionCategory | KymInputOptionCategory | KymSearchOptionCategory;

export type KymOptionDeleteResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymQuery>;
  recordId: Scalars['ID'];
};

export type KymOptionInput = {
  enabled: Scalars['Boolean'];
  /**  This type is to be used by frontend only. In backend this will be divided into variant and optionType  */
  fieldType?: InputMaybe<Kym_Option_Field_Type>;
  id?: InputMaybe<Scalars['ID']>;
  name: Scalars['String'];
};

export type KymOptionMutation = {
  delete: KymOptionDeleteResult;
  move: KymOptionResult;
  update: KymOptionResult;
  upsert: KymOptionResult;
};


export type KymOptionMutationDeleteArgs = {
  optionId: Scalars['ID'];
};


export type KymOptionMutationMoveArgs = {
  optionId: Scalars['ID'];
  to: Scalars['Int'];
};


export type KymOptionMutationUpdateArgs = {
  data: KymOptionUpdateInput;
  fieldId: Scalars['ID'];
};


export type KymOptionMutationUpsertArgs = {
  data: KymOptionInput;
  fieldId: Scalars['ID'];
};

export type KymOptionResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymQuery>;
  record?: Maybe<KymOption>;
  recordId: Scalars['ID'];
};

export type KymOptionUpdateInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  /**  This type is to be used by frontend only. In backend this will be divided into variant and optionType.if fieldType is absent it will default to DISPLAY. Only SINGLE_SELECT, MULTI_SELECT AND DECLARATION can have DISPLAY options   */
  fieldType?: InputMaybe<Kym_Option_Field_Type>;
  id: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
};

export type KymQuery = {
  general?: Maybe<KymGeneralSettingsQuery>;
};

export type KymSearchOptionCategory = {
  search: Kym_Option_Search_Type;
};

export enum Kym_Field_Type {
  Declaration = 'DECLARATION',
  Group = 'GROUP',
  MultiSelect = 'MULTI_SELECT',
  SingleSelect = 'SINGLE_SELECT',
  Upload = 'UPLOAD'
}

export enum Kym_Field_Parent {
  Identification = 'IDENTIFICATION'
}

export enum Kym_Option_Custom_Type {
  Address = 'ADDRESS'
}

export enum Kym_Option_Display_Type {
  Amount = 'AMOUNT',
  Date = 'DATE',
  Email = 'EMAIL',
  Fax = 'FAX',
  Number = 'NUMBER',
  Paragraph = 'PARAGRAPH',
  Phone = 'PHONE',
  PoBox = 'PO_BOX',
  Text = 'TEXT',
  Url = 'URL'
}

export enum Kym_Option_Field_Type {
  /**  For Custom Variant  */
  Address = 'ADDRESS',
  Amount = 'AMOUNT',
  Bank = 'BANK',
  Date = 'DATE',
  /**  These are for DECLARATION, SINGLE_SELECT, MULTI_SELECT  */
  Display = 'DISPLAY',
  District = 'DISTRICT',
  Email = 'EMAIL',
  Fax = 'FAX',
  /**  These are for SEARCH fields  */
  LocalLevel = 'LOCAL_LEVEL',
  MultipleFile = 'MULTIPLE_FILE',
  NumberInput = 'NUMBER_INPUT',
  Paragraph = 'PARAGRAPH',
  PhoneNumber = 'PHONE_NUMBER',
  PoBox = 'PO_BOX',
  Province = 'PROVINCE',
  /**  These are for file   */
  SingleFile = 'SINGLE_FILE',
  TextInput = 'TEXT_INPUT',
  Url = 'URL'
}

export enum Kym_Option_File_Type {
  Multiple = 'MULTIPLE',
  Single = 'SINGLE'
}

export enum Kym_Option_Input_Type {
  Amount = 'AMOUNT',
  Date = 'DATE',
  Email = 'EMAIL',
  Fax = 'FAX',
  Number = 'NUMBER',
  Paragraph = 'PARAGRAPH',
  Phone = 'PHONE',
  PoBox = 'PO_BOX',
  Text = 'TEXT',
  Url = 'URL'
}

export enum Kym_Option_Search_Type {
  Bank = 'BANK',
  District = 'DISTRICT',
  LocalLevel = 'LOCAL_LEVEL',
  Province = 'PROVINCE'
}

export enum Kym_Option_Variant {
  Custom = 'CUSTOM',
  Display = 'DISPLAY',
  File = 'FILE',
  Input = 'INPUT',
  Search = 'SEARCH'
}

export type KymAdditionalFields = {
  id?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type KymAdditionalFieldsFormState = {
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type KymAdditionalFieldsType = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type KymCoopMembershipDetails = {
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['ID']>;
  familyMemberInThisCooperative?: Maybe<Array<Maybe<KymFamilyMemberDetailsInThisCooperativeType>>>;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  loan?: Maybe<Scalars['Float']>;
  memberIdentityLevel?: Maybe<MemberIdentityLevel>;
  other?: Maybe<Scalars['Float']>;
  purposeId?: Maybe<Scalars['ID']>;
  savings?: Maybe<Scalars['Float']>;
  share?: Maybe<Scalars['Int']>;
};

export type KymCoopUnionAccountOperatorDetailsFormState = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateOfTraining?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentVdcOrMunicId?: Maybe<Scalars['ID']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: Maybe<Scalars['ID']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type KymCoopUnionAccountOperatorDetailsInput = {
  citizenshipOrPassportOrLisenceNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  dateOfTraining?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocality?: InputMaybe<Scalars['String']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentVdcOrMunicId?: InputMaybe<Scalars['ID']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocality?: InputMaybe<Scalars['String']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: InputMaybe<Scalars['ID']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type KymCoopUnionAccountOperatorLus = {
  name: KymCoopUnionAccountOperatorSection;
};

export enum KymCoopUnionAccountOperatorSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS'
}

export type KymCoopUnionAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorSection>>>;
};

export type KymCoopUnionAddError = KymCoopUnionAddInvalidDataError;

export type KymCoopUnionAddFormStatus = {
  formData?: Maybe<KymCoopUnionFormData>;
  lastUpdated?: Maybe<KymCoopUnionAddLus>;
  sectionStatus?: Maybe<KymCoopUnionAddSectionStatus>;
};

export type KymCoopUnionAddInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymCoopUnionAddLus = KymCoopUnionAccountOperatorLus | KymCoopUnionBodlus | KymCoopUnionCentralRepresentativeLus | KymCoopUnionDeclarationLus | KymCoopUnionEconomicDetailsLus | KymCoopUnionInstitutionInformationLus | KymCoopUnionMemberDetailsLus;

export type KymCoopUnionAddResult = {
  error?: Maybe<KymCoopUnionAddError>;
  query?: Maybe<KymCoopUnionQuery>;
  record?: Maybe<KymCoopUnionGetResult>;
  recordId: Scalars['ID'];
};

export type KymCoopUnionAddSectionStatus = {
  accountOperatorDetails?: Maybe<KymCoopUnionAccountOperatorStatus>;
  bodDetails?: Maybe<KymCoopUnionBodDetailsStatus>;
  centralRepresentativeDetails?: Maybe<KymCoopUnionCentralRepresentativeStatus>;
  declaration?: Maybe<KymCoopUnionDeclarationStatus>;
  economicDetails?: Maybe<KymCoopUnionEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCoopUnionInstitutionalInformationStatus>;
  memberDetails?: Maybe<KymCoopUnionMemberDetailsStatus>;
};

export type KymCoopUnionBodDetailsFormState = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateOfTraining?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isCentralRepresentative?: Maybe<Scalars['Boolean']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentVdcOrMunicId?: Maybe<Scalars['ID']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: Maybe<Scalars['ID']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type KymCoopUnionBodDetailsInput = {
  citizenshipOrPassportOrLisenceNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  dateOfTraining?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isCentralRepresentative?: InputMaybe<Scalars['Boolean']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocality?: InputMaybe<Scalars['String']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentVdcOrMunicId?: InputMaybe<Scalars['ID']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocality?: InputMaybe<Scalars['String']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: InputMaybe<Scalars['ID']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type KymCoopUnionBodlus = {
  name: KymCoopUnionBodSection;
};

export enum KymCoopUnionBodSection {
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS'
}

export type KymCoopUnionBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionBodSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionBodSection>>>;
};

export type KymCoopUnionCentralRepresentativeDetailsFormState = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateOfTraining?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  notAmongDirectors?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLocality?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentVdcOrMunicId?: Maybe<Scalars['ID']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocality?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: Maybe<Scalars['ID']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type KymCoopUnionCentralRepresentativeDetailsInput = {
  citizenshipOrPassportOrLisenceNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  dateOfTraining?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  notAmongDirectors?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocality?: InputMaybe<Scalars['String']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentVdcOrMunicId?: InputMaybe<Scalars['ID']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocality?: InputMaybe<Scalars['String']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryVdcOrMunicId?: InputMaybe<Scalars['ID']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type KymCoopUnionCentralRepresentativeLus = {
  name: KymCoopUnionCentralRepresentativeSection;
};

export enum KymCoopUnionCentralRepresentativeSection {
  CentralRepresentativeDetails = 'CENTRAL_REPRESENTATIVE_DETAILS'
}

export type KymCoopUnionCentralRepresentativeStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionCentralRepresentativeSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionCentralRepresentativeSection>>>;
};

export type KymCoopUnionDeclarationLus = {
  name: KymCoopUnionDeclarationSection;
};

export enum KymCoopUnionDeclarationSection {
  DocumentDeclaration = 'DOCUMENT_DECLARATION'
}

export type KymCoopUnionDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionDeclarationSection>>>;
};

export type KymCoopUnionDetailsOfMembers = {
  noOfFemaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfFemaleMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfInstituionalMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfInstituionalMemberTarget?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberCurrent?: InputMaybe<Scalars['Int']>;
  noOfMaleMemberTarget?: InputMaybe<Scalars['Int']>;
};

export type KymCoopUnionDocumentFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionDocuments = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionDocumentsInput = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCoopUnionEconomicDetailsFormState = {
  currentValue?: Maybe<Scalars['Float']>;
  optionName?: Maybe<Scalars['String']>;
  targetValue?: Maybe<Scalars['Float']>;
};

export type KymCoopUnionEconomicDetailsLus = {
  name: KymCoopUnionEconomicDetailsSection;
};

export enum KymCoopUnionEconomicDetailsSection {
  Assets = 'ASSETS',
  EquityAndLiabilities = 'EQUITY_AND_LIABILITIES',
  ExpenseDetails = 'EXPENSE_DETAILS',
  IncomeDetails = 'INCOME_DETAILS'
}

export type KymCoopUnionEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionEconomicDetailsSection>>>;
};

export type KymCoopUnionFormData = {
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountOperatorsDetails?: Maybe<Array<Maybe<KymCoopUnionAccountOperatorDetailsFormState>>>;
  administrativeExpense?: Maybe<Scalars['Float']>;
  applicantDesignation?: Maybe<Scalars['String']>;
  applicantName?: Maybe<Scalars['String']>;
  applicantSign?: Maybe<Scalars['String']>;
  applicantStamp?: Maybe<Scalars['String']>;
  bankCurrent?: Maybe<Scalars['Float']>;
  bankTarget?: Maybe<Scalars['Float']>;
  boardOfDirectorsDetails?: Maybe<Array<Maybe<KymCoopUnionBodDetailsFormState>>>;
  branchOfficeAddress?: Maybe<Scalars['String']>;
  capitalGrantCurrent?: Maybe<Scalars['Float']>;
  capitalGrantTarget?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentCurrent?: Maybe<Scalars['Float']>;
  cashAndCashEquivalentTarget?: Maybe<Scalars['Float']>;
  centralRepresentativeDetails?: Maybe<KymCoopUnionCentralRepresentativeDetailsFormState>;
  contactEmail?: Maybe<Scalars['String']>;
  currentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  currentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  deferredTaxExpense?: Maybe<Scalars['Float']>;
  directExpense?: Maybe<Scalars['Float']>;
  documents?: Maybe<Array<Maybe<KymCoopUnionDocumentFormState>>>;
  fax?: Maybe<Scalars['String']>;
  financialCost?: Maybe<Scalars['Float']>;
  incomeFromFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromInvestment?: Maybe<Scalars['Float']>;
  incomeFromNonFinancialInvestment?: Maybe<Scalars['Float']>;
  incomeFromSales?: Maybe<Scalars['Float']>;
  incomeFromServiceOperation?: Maybe<Scalars['Float']>;
  institutionType?: Maybe<CoopUnionInstitutionType>;
  investmentsCurrent?: Maybe<Scalars['Float']>;
  investmentsTarget?: Maybe<Scalars['Float']>;
  issuingOffice?: Maybe<Scalars['String']>;
  lastAgmDate?: Maybe<Scalars['Date']>;
  loanAccountCurrent?: Maybe<Scalars['Float']>;
  loanAccountTarget?: Maybe<Scalars['Float']>;
  loanCurrent?: Maybe<Scalars['Float']>;
  loanTarget?: Maybe<Scalars['Float']>;
  miscellnousIncome?: Maybe<Scalars['Float']>;
  nameOfBank?: Maybe<Scalars['String']>;
  nameOfInstitution?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  noOfEmployee?: Maybe<Scalars['Int']>;
  noOfFemaleMember?: Maybe<Scalars['Int']>;
  noOfInstituionalMember?: Maybe<Scalars['Int']>;
  noOfMaleMember?: Maybe<Scalars['Int']>;
  nonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  nonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesCurrent?: Maybe<Scalars['Float']>;
  nonCurrentLiabilitiesTarget?: Maybe<Scalars['Float']>;
  oprOfficeAddress?: Maybe<Scalars['String']>;
  otherIncome?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsCurrent?: Maybe<Scalars['Float']>;
  otherNonCurrentAssetsTarget?: Maybe<Scalars['Float']>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  purchase?: Maybe<Scalars['Float']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdAddressChanged?: Maybe<Scalars['String']>;
  regdDate?: Maybe<Scalars['Date']>;
  regdLatitude?: Maybe<Scalars['Float']>;
  regdLongitude?: Maybe<Scalars['Float']>;
  regdNo?: Maybe<Scalars['String']>;
  reserveAndSurplusCurrent?: Maybe<Scalars['Float']>;
  reserveAndSurplusTarget?: Maybe<Scalars['Float']>;
  riskManangementCost?: Maybe<Scalars['Float']>;
  savingDepositCurrent?: Maybe<Scalars['Float']>;
  savingDepositTarget?: Maybe<Scalars['Float']>;
  shareCapitalCurrent?: Maybe<Scalars['Float']>;
  shareCapitalTarget?: Maybe<Scalars['Float']>;
  totalCurrentMmeber?: Maybe<Scalars['Int']>;
  vatOrPan?: Maybe<Scalars['Int']>;
  website?: Maybe<Scalars['String']>;
};

export type KymCoopUnionFormStateQuery = {
  data?: Maybe<KymCoopUnionAddFormStatus>;
};

export type KymCoopUnionGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymCoopUnionAddFormStatus>;
};

export type KymCoopUnionInstitutionInformationLus = {
  name: KymCoopUnionInstitutionInformationSection;
};

export enum KymCoopUnionInstitutionInformationSection {
  BankDetails = 'BANK_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  RegisteredDetails = 'REGISTERED_DETAILS'
}

export type KymCoopUnionInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionInstitutionInformationSection>>>;
};

export type KymCoopUnionMemberDetailsLus = {
  name?: Maybe<KymCoopUnionMemberDetailsSection>;
};

export enum KymCoopUnionMemberDetailsSection {
  CurrentMembers = 'CURRENT_MEMBERS',
  TargetForNextFiscalYear = 'TARGET_FOR_NEXT_FISCAL_YEAR'
}

export type KymCoopUnionMemberDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCoopUnionMemberDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCoopUnionMemberDetailsSection>>>;
};

export type KymCoopUnionMutation = {
  add?: Maybe<KymCoopUnionSectionMutation>;
};


export type KymCoopUnionMutationAddArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionQuery = {
  formState?: Maybe<KymCoopUnionFormStateQuery>;
};


export type KymCoopUnionQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymCoopUnionSectionMutation = {
  accountOperatorsDetails?: Maybe<CoopUnionAccountOperatorDetailsResult>;
  boardOfDirectorsDetails?: Maybe<CoopUnionBodDetailsResult>;
  centralRepresentativeDetails?: Maybe<CoopUnionCentralRepresentativeDetailsResult>;
  declaration?: Maybe<CoopUnionDeclarationResult>;
  economicDetails?: Maybe<CoopUnionEconomicDetailsResult>;
  institutionInformation?: Maybe<CoopUnionInstitutionInformationResult>;
  memberDetails?: Maybe<CoopUnionMemberDetailsResult>;
};


export type KymCoopUnionSectionMutationAccountOperatorsDetailsArgs = {
  data?: InputMaybe<CoopUnionAccountOperatorDetailsInput>;
};


export type KymCoopUnionSectionMutationBoardOfDirectorsDetailsArgs = {
  data?: InputMaybe<CoopUnionBodDetailsInput>;
};


export type KymCoopUnionSectionMutationCentralRepresentativeDetailsArgs = {
  data?: InputMaybe<CoopUnionCentralRepresentativeDetailsInput>;
};


export type KymCoopUnionSectionMutationDeclarationArgs = {
  data?: InputMaybe<CoopUnionDeclarationInput>;
};


export type KymCoopUnionSectionMutationEconomicDetailsArgs = {
  data?: InputMaybe<CoopUnionEconomicDetailsInput>;
};


export type KymCoopUnionSectionMutationInstitutionInformationArgs = {
  data?: InputMaybe<CoopUnionInstitutionInformationInput>;
};


export type KymCoopUnionSectionMutationMemberDetailsArgs = {
  data?: InputMaybe<CoopUnionMemberDetailsInput>;
};

export type KymCooperativeAccountOperatorDetailsFormState = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['Int']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  dateofTrainig?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLocalityId?: Maybe<Scalars['ID']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentTole?: Maybe<Scalars['String']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  subjectOfTraining?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLocalityId?: Maybe<Scalars['ID']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryTole?: Maybe<Scalars['String']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
  trainingOrganization?: Maybe<Scalars['String']>;
};

export type KymCooperativeAccountOperatorDetailsInput = {
  citizenshipOrPassportOrLisenceNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  dateofTrainig?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  subjectOfTraining?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
  trainingOrganization?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeAccountOperatorLus = {
  name: KymCooperativeAccountOperatorSection;
};

export enum KymCooperativeAccountOperatorSection {
  AccountOperatorsDetails = 'ACCOUNT_OPERATORS_DETAILS'
}

export type KymCooperativeAccountOperatorStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeAccountOperatorSection>>>;
};

export type KymCooperativeAddFormStatus = {
  formData?: Maybe<KymCooperativeFormData>;
  lastUpdated: KymCooperativeAddLus;
  sectionStatus?: Maybe<KymCooperativeAddSectionStatus>;
};

export type KymCooperativeAddLus = KymCooperativeAccountOperatorLus | KymCooperativeBodlus | KymCooperativeDeclarationLus | KymCooperativeEconomicDetailsLus | KymCooperativeInstitutionInformationLus;

export type KymCooperativeAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<KymCooperativeQuery>;
  record?: Maybe<KymCooperativeGetResult>;
  recordId: Scalars['ID'];
};

export type KymCooperativeAddSectionStatus = {
  accountOperatorDetails?: Maybe<KymCooperativeAccountOperatorStatus>;
  bodDetails?: Maybe<KymCooperativeBodDetailsStatus>;
  declaration?: Maybe<KymCooperativeDeclarationStatus>;
  economicDetails?: Maybe<KymCooperativeEconomicDetailsStatus>;
  institutionInformation?: Maybe<KymCooperativeInstitutionalInformationStatus>;
};

export type KymCooperativeBodDetailsFormState = {
  citizenshipOrPassportOrLisenceNo?: Maybe<Scalars['Int']>;
  contactNumber?: Maybe<Scalars['String']>;
  dateOfMembership?: Maybe<Scalars['Date']>;
  designation?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  highestQualification?: Maybe<Scalars['String']>;
  identityDocumentPhoto?: Maybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  permanentDistrictId?: Maybe<Scalars['ID']>;
  permanentLatitude?: Maybe<Scalars['String']>;
  permanentLocalityId?: Maybe<Scalars['ID']>;
  permanentLongitude?: Maybe<Scalars['String']>;
  permanentStateId?: Maybe<Scalars['ID']>;
  permanentTole?: Maybe<Scalars['String']>;
  permanentWardId?: Maybe<Scalars['ID']>;
  photograph?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  temporaryDistrictId?: Maybe<Scalars['ID']>;
  temporaryLatitude?: Maybe<Scalars['String']>;
  temporaryLocalityId?: Maybe<Scalars['ID']>;
  temporaryLongitude?: Maybe<Scalars['String']>;
  temporaryStateId?: Maybe<Scalars['ID']>;
  temporaryTole?: Maybe<Scalars['String']>;
  temporaryWardId?: Maybe<Scalars['ID']>;
};

export type KymCooperativeBodDetailsInput = {
  citizenshipOrPassportOrLisenceNo?: InputMaybe<Scalars['Int']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  dateOfMembership?: InputMaybe<Scalars['Date']>;
  designation?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fullName?: InputMaybe<Scalars['String']>;
  highestQualification?: InputMaybe<Scalars['String']>;
  identityDocumentPhoto?: InputMaybe<Scalars['String']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  permanentDistrictId?: InputMaybe<Scalars['ID']>;
  permanentLatitude?: InputMaybe<Scalars['String']>;
  permanentLocalityId?: InputMaybe<Scalars['ID']>;
  permanentLongitude?: InputMaybe<Scalars['String']>;
  permanentStateId?: InputMaybe<Scalars['ID']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['ID']>;
  photograph?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  temporaryDistrictId?: InputMaybe<Scalars['ID']>;
  temporaryLatitude?: InputMaybe<Scalars['String']>;
  temporaryLocalityId?: InputMaybe<Scalars['ID']>;
  temporaryLongitude?: InputMaybe<Scalars['String']>;
  temporaryStateId?: InputMaybe<Scalars['ID']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['ID']>;
};

export type KymCooperativeBodlus = {
  name: KymCooperativeBodSection;
};

export enum KymCooperativeBodSection {
  BoardOfDirectorsDetails = 'BOARD_OF_DIRECTORS_DETAILS'
}

export type KymCooperativeBodDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeBodSection>>>;
};

export type KymCooperativeDeclarationLus = {
  name: KymCooperativeDeclarationSection;
};

export enum KymCooperativeDeclarationSection {
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  DocumentDeclaration = 'DOCUMENT_DECLARATION'
}

export type KymCooperativeDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeDeclarationSection>>>;
};

export type KymCooperativeDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeDocumentsInput = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymCooperativeEconomicDetailsLus = {
  name: KymCooperativeEconomicDetailsSection;
};

export enum KymCooperativeEconomicDetailsSection {
  Assets = 'ASSETS',
  EquityAndLiabilities = 'EQUITY_AND_LIABILITIES'
}

export type KymCooperativeEconomicDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeEconomicDetailsSection>>>;
};

export type KymCooperativeFormData = {
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountHoldersName?: Maybe<Scalars['String']>;
  accountOperatorsDetails?: Maybe<Array<Maybe<KymCooperativeAccountOperatorDetailsFormState>>>;
  bank?: Maybe<Scalars['Float']>;
  boardOfDirectorsDetails?: Maybe<Array<Maybe<KymCooperativeBodDetailsFormState>>>;
  capitalGrant?: Maybe<Scalars['Float']>;
  cashAndCashEquivalent?: Maybe<Scalars['Float']>;
  contactNumber?: Maybe<Scalars['String']>;
  cooperativeType?: Maybe<CooperativeType>;
  currentLiabilities?: Maybe<Scalars['Float']>;
  documents?: Maybe<Array<Maybe<KymCooperativeDocumentsFormState>>>;
  email?: Maybe<Scalars['String']>;
  investments?: Maybe<Scalars['Float']>;
  lastAgmDate?: Maybe<Scalars['Date']>;
  lastAuditDate?: Maybe<Scalars['Date']>;
  loan?: Maybe<Scalars['Float']>;
  loanAccount?: Maybe<Scalars['Float']>;
  mainServiceProduct?: Maybe<Scalars['String']>;
  nameOfOrganization?: Maybe<Scalars['String']>;
  noOfFemaleEmloyee?: Maybe<Scalars['Int']>;
  noOfFemaleMembers?: Maybe<Scalars['Int']>;
  noOfMaleEmployee?: Maybe<Scalars['Int']>;
  noOfMaleMembers?: Maybe<Scalars['Int']>;
  noOfOtherMembers?: Maybe<Scalars['Int']>;
  nonCurrentAssets?: Maybe<Scalars['Float']>;
  nonCurrentLiabilities?: Maybe<Scalars['Float']>;
  oprDistrictId?: Maybe<Scalars['ID']>;
  oprLatitude?: Maybe<Scalars['Float']>;
  oprLocality?: Maybe<Scalars['String']>;
  oprLongitude?: Maybe<Scalars['Float']>;
  oprMunicipalityId?: Maybe<Scalars['ID']>;
  oprProvinceId?: Maybe<Scalars['ID']>;
  oprWardId?: Maybe<Scalars['ID']>;
  otherNonCurrentAssets?: Maybe<Scalars['Float']>;
  regdDate?: Maybe<Scalars['Date']>;
  regdDistrictId?: Maybe<Scalars['ID']>;
  regdLatitude?: Maybe<Scalars['Float']>;
  regdLocality?: Maybe<Scalars['String']>;
  regdLongitude?: Maybe<Scalars['Float']>;
  regdMunicipalityId?: Maybe<Scalars['ID']>;
  regdNumber?: Maybe<Scalars['Int']>;
  regdOffice?: Maybe<Scalars['String']>;
  regdProvinceId?: Maybe<Scalars['ID']>;
  regdWardId?: Maybe<Scalars['ID']>;
  representativeDesignatiton?: Maybe<Scalars['String']>;
  representativeFullName?: Maybe<Scalars['String']>;
  reserveAndSurplus?: Maybe<Scalars['Float']>;
  savingDeposit?: Maybe<Scalars['Float']>;
  shareCapital?: Maybe<Scalars['Float']>;
  totalAssets?: Maybe<Scalars['Float']>;
  totalEmployee?: Maybe<Scalars['Int']>;
  totalEquityAndLiabilities?: Maybe<Scalars['Float']>;
  website?: Maybe<Scalars['String']>;
};

export type KymCooperativeFormInput = {
  accountHolderSignature?: InputMaybe<Scalars['String']>;
  accountHolderStamp?: InputMaybe<Scalars['String']>;
  accountHoldersName?: InputMaybe<Scalars['String']>;
  accountOperatorsDetails?: InputMaybe<Array<InputMaybe<KymCooperativeAccountOperatorDetailsInput>>>;
  bank?: InputMaybe<Scalars['Float']>;
  boardOfDirectorsDetails?: InputMaybe<Array<InputMaybe<KymCooperativeBodDetailsInput>>>;
  capitalGrant?: InputMaybe<Scalars['Float']>;
  cashAndCashEquivalent?: InputMaybe<Scalars['Float']>;
  contactNumber?: InputMaybe<Scalars['String']>;
  cooperativeType?: InputMaybe<CooperativeType>;
  currentLiabilities?: InputMaybe<Scalars['Float']>;
  documents?: InputMaybe<Array<InputMaybe<KymCooperativeDocumentsInput>>>;
  email?: InputMaybe<Scalars['String']>;
  investments?: InputMaybe<Scalars['Float']>;
  lastAgmDate?: InputMaybe<Scalars['Date']>;
  lastAuditDate?: InputMaybe<Scalars['Date']>;
  loan?: InputMaybe<Scalars['Float']>;
  loanAccount?: InputMaybe<Scalars['Float']>;
  mainServiceProduct?: InputMaybe<Scalars['String']>;
  nameOfOrganization?: InputMaybe<Scalars['String']>;
  noOfFemaleEmloyee?: InputMaybe<Scalars['Int']>;
  noOfFemaleMembers?: InputMaybe<Scalars['Int']>;
  noOfMaleEmployee?: InputMaybe<Scalars['Int']>;
  noOfMaleMembers?: InputMaybe<Scalars['Int']>;
  noOfOtherMembers?: InputMaybe<Scalars['Int']>;
  nonCurrentAssets?: InputMaybe<Scalars['Float']>;
  nonCurrentLiabilities?: InputMaybe<Scalars['Float']>;
  oprDistrictId?: InputMaybe<Scalars['ID']>;
  oprLatitude?: InputMaybe<Scalars['Float']>;
  oprLocality?: InputMaybe<Scalars['String']>;
  oprLongitude?: InputMaybe<Scalars['Float']>;
  oprMunicipalityId?: InputMaybe<Scalars['ID']>;
  oprProvinceId?: InputMaybe<Scalars['ID']>;
  oprWardId?: InputMaybe<Scalars['ID']>;
  otherNonCurrentAssets?: InputMaybe<Scalars['Float']>;
  regdDate?: InputMaybe<Scalars['Date']>;
  regdDistrictId?: InputMaybe<Scalars['ID']>;
  regdLatitude?: InputMaybe<Scalars['Float']>;
  regdLocality?: InputMaybe<Scalars['String']>;
  regdLongitude?: InputMaybe<Scalars['Float']>;
  regdMunicipalityId?: InputMaybe<Scalars['ID']>;
  regdNumber?: InputMaybe<Scalars['Int']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  regdProvinceId?: InputMaybe<Scalars['ID']>;
  regdWardId?: InputMaybe<Scalars['ID']>;
  representativeDesignatiton?: InputMaybe<Scalars['String']>;
  representativeFullName?: InputMaybe<Scalars['String']>;
  reserveAndSurplus?: InputMaybe<Scalars['Float']>;
  savingDeposit?: InputMaybe<Scalars['Float']>;
  shareCapital?: InputMaybe<Scalars['Float']>;
  totalEmployee?: InputMaybe<Scalars['Int']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymCooperativeFormStateQuery = {
  data?: Maybe<KymCooperativeAddFormStatus>;
  error?: Maybe<QueryError>;
};

export type KymCooperativeGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymCooperativeAddFormStatus>;
};

export type KymCooperativeInstitutionInformationLus = {
  name: KymCooperativeInstitutionInformationSection;
};

export enum KymCooperativeInstitutionInformationSection {
  AdditionalCooperativeDetails = 'ADDITIONAL_COOPERATIVE_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  CurrentMembers = 'CURRENT_MEMBERS',
  NumberOfEmployee = 'NUMBER_OF_EMPLOYEE',
  OperatingAddress = 'OPERATING_ADDRESS',
  RegisteredAddress = 'REGISTERED_ADDRESS',
  Representative = 'REPRESENTATIVE'
}

export type KymCooperativeInstitutionalInformationStatus = {
  completed?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
  error?: Maybe<Array<Maybe<KymCooperativeInstitutionInformationSection>>>;
};

export type KymCooperativeMutation = {
  add?: Maybe<KymCooperativeAddResult>;
};


export type KymCooperativeMutationAddArgs = {
  data: KymCooperativeFormInput;
};

export type KymCooperativeQuery = {
  formState?: Maybe<KymCooperativeFormStateQuery>;
};


export type KymCooperativeQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymDocuments = {
  documentUrl?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsFormState = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymDocumentsType = {
  documentsUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
};

export type KymFamilyDetails = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsFormState = {
  fullName: Scalars['String'];
  relationshipId: Scalars['ID'];
};

export type KymFamilyDetailsType = {
  fullName?: Maybe<Scalars['String']>;
  relationshipId: Scalars['ID'];
};

export type KymFamilyMemberDetailsInThisCooperative = {
  memberId?: InputMaybe<Scalars['ID']>;
  relationshipId?: InputMaybe<Scalars['ID']>;
};

export type KymFamilyMemberDetailsInThisCooperativeFormState = {
  memberId?: Maybe<Scalars['ID']>;
  relationshipId?: Maybe<Scalars['ID']>;
};

export type KymFamilyMemberDetailsInThisCooperativeType = {
  fullName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['ID']>;
  relationshipId: Scalars['ID'];
};

export type KymIdentification = {
  fields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  id?: InputMaybe<Scalars['ID']>;
};

export type KymIdentificationFormState = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  id: Scalars['ID'];
};

export type KymIdentificationType = {
  fields?: Maybe<Array<Maybe<KymAdditionalFieldsType>>>;
  id?: Maybe<Scalars['ID']>;
};

export type KymIncomeSourceDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  amount?: InputMaybe<Scalars['Float']>;
  source?: InputMaybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsFormState = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIncomeSourceDetailsType = {
  amount?: Maybe<Scalars['Float']>;
  source?: Maybe<Scalars['String']>;
};

export type KymIndAddError = KymIndAddInvalidDataError;

export type KymIndAddFormStatus = {
  lastUpdated?: Maybe<KymIndAddLus>;
  sectionStatus?: Maybe<KymIndAddSectionStatus>;
};

export type KymIndAddInvalidDataError = {
  error?: Maybe<Scalars['InvalidData']>;
};

export type KymIndAddLus = KymIndCooperativeLus | KymIndDeclarationLus | KymIndPersonalLus | KymIndProfessionalLus;

export type KymIndAddLastUpdated = {
  cooperativeMembership?: Maybe<KymIndCooperativeMemberStatus>;
  declaration?: Maybe<KymIndDeclarationStatus>;
  personal?: Maybe<KymIndPersonalStatus>;
  professional?: Maybe<KymIndProfessionalStatus>;
};

export type KymIndAddResult = {
  error?: Maybe<KymIndAddError>;
  query?: Maybe<KymIndQuery>;
  record?: Maybe<KymIndGetResult>;
  recordId: Scalars['ID'];
};

export type KymIndAddSectionStatus = {
  cooperativeMembership?: Maybe<KymIndCooperativeMemberStatus>;
  declaration?: Maybe<KymIndDeclarationStatus>;
  personal?: Maybe<KymIndPersonalStatus>;
  professional?: Maybe<KymIndProfessionalStatus>;
};

export type KymIndCooperativeLus = {
  name: KymIndPersonalSection;
};

export enum KymIndCooperativeMemberSection {
  EstimatedAmount = 'ESTIMATED_AMOUNT',
  IsFamilyAMember = 'IS_FAMILY_A_MEMBER',
  MemberOfAnotherCooperative = 'MEMBER_OF_ANOTHER_COOPERATIVE',
  Purpose = 'PURPOSE',
  TransactionDetails = 'TRANSACTION_DETAILS'
}

export type KymIndCooperativeMemberStatus = {
  completed?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
  error?: Maybe<Array<Maybe<KymIndCooperativeMemberSection>>>;
};

export type KymIndDeclaration = {
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['ID']>;
  convictionDetails?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<KymDocumentsType>>>;
  foreignResidentialPermitDetails?: Maybe<Array<Maybe<KymIdentificationType>>>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  localKinAddress?: Maybe<Scalars['String']>;
  localKinContact?: Maybe<Scalars['String']>;
  localKinName?: Maybe<Scalars['String']>;
  localKinRelationshipId?: Maybe<Scalars['ID']>;
};

export type KymIndDeclarationLus = {
  name: KymIndPersonalSection;
};

export enum KymIndDeclarationSection {
  Declaration = 'DECLARATION'
}

export type KymIndDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymIndDeclarationSection>>>;
};

export type KymIndFormData = {
  annualIncomeSourceId?: Maybe<Scalars['String']>;
  beneficialFullName?: Maybe<Scalars['String']>;
  beneficialRelationshipId?: Maybe<Scalars['String']>;
  convictedDetails?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['String']>;
  declarationAgree?: Maybe<Scalars['Boolean']>;
  documents?: Maybe<Array<Maybe<KymFieldData>>>;
  educationQualificationId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  enableForeignEmployee?: Maybe<Scalars['Boolean']>;
  estimatedAnnualDepositAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: Maybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: Maybe<Scalars['String']>;
  ethnicityId?: Maybe<Scalars['String']>;
  familyDetails?: Maybe<Array<Maybe<KymFieldData>>>;
  familyMemberInThisCooperative?: Maybe<Scalars['Boolean']>;
  familyMembershipDetails?: Maybe<Array<Maybe<KymFieldData>>>;
  firstName?: Maybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: Maybe<Scalars['Float']>;
  foreignResidentialPermitDetails?: Maybe<Scalars['String']>;
  genderId?: Maybe<Scalars['String']>;
  hasBeneficialOwner?: Maybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: Maybe<Scalars['Boolean']>;
  identification?: Maybe<Array<Maybe<KymFieldData>>>;
  identityLevel?: Maybe<Scalars['String']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymFieldData>>>;
  isConvicted?: Maybe<Scalars['Boolean']>;
  isMemberOfAnotherCooperative?: Maybe<Scalars['Boolean']>;
  isPermanentAndTemporaryAddressSame?: Maybe<Scalars['Boolean']>;
  isPoliticallyExposed?: Maybe<Scalars['Boolean']>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  loan?: Maybe<Scalars['Float']>;
  mainOccupation?: Maybe<Array<Maybe<KymFieldData>>>;
  maritalStatusId?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['String']>;
  nationalityId?: Maybe<Scalars['String']>;
  ordinary?: Maybe<Scalars['Float']>;
  other?: Maybe<Scalars['Float']>;
  otherMembershipDetails?: Maybe<Array<Maybe<KymFieldData>>>;
  otherProfession?: Maybe<Scalars['String']>;
  permanentDistrictId?: Maybe<Scalars['String']>;
  permanentLatitude?: Maybe<Scalars['Float']>;
  permanentLocalityId?: Maybe<Scalars['String']>;
  permanentLongitude?: Maybe<Scalars['Float']>;
  permanentStateId?: Maybe<Scalars['String']>;
  permanentTole?: Maybe<Scalars['String']>;
  permanentWardId?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  politicallyExposedDetails?: Maybe<Scalars['String']>;
  professional?: Maybe<Array<Maybe<Scalars['String']>>>;
  purposeId?: Maybe<Scalars['String']>;
  religionId?: Maybe<Scalars['String']>;
  savings?: Maybe<Scalars['Float']>;
  spouseOccupation?: Maybe<Array<Maybe<KymFieldData>>>;
  temporaryDistrictId?: Maybe<Scalars['String']>;
  temporaryLatitude?: Maybe<Scalars['Float']>;
  temporaryLocalityId?: Maybe<Scalars['String']>;
  temporaryLongitude?: Maybe<Scalars['Float']>;
  temporaryStateId?: Maybe<Scalars['String']>;
  temporaryTole?: Maybe<Scalars['String']>;
  temporaryWardId?: Maybe<Scalars['String']>;
  typeOfVisa?: Maybe<Scalars['String']>;
};

export type KymIndFormState = {
  formData?: Maybe<KymIndFormData>;
  lastUpdated: KymIndAddLus;
  sectionStatus?: Maybe<KymIndAddSectionStatus>;
};

export type KymIndGetResult = {
  member?: Maybe<Member>;
  sectionStatus?: Maybe<KymIndAddFormStatus>;
};

export type KymIndMemberInput = {
  annualIncomeSourceId?: InputMaybe<Scalars['String']>;
  beneficialFullName?: InputMaybe<Scalars['String']>;
  beneficialRelationshipId?: InputMaybe<Scalars['String']>;
  convictionDetails?: InputMaybe<Scalars['String']>;
  countryId?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['String']>;
  declarationAgree?: InputMaybe<Scalars['Boolean']>;
  documents?: InputMaybe<Array<InputMaybe<KymFieldInputData>>>;
  educationQualificationId?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  enableForeignEmployee?: InputMaybe<Scalars['Boolean']>;
  estimatedAnnualDepositAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualLoanAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualTransactionAmount?: InputMaybe<Scalars['Float']>;
  estimatedAnnualTransactionFrequencyId?: InputMaybe<Scalars['String']>;
  ethnicityId?: InputMaybe<Scalars['String']>;
  familyDetails?: InputMaybe<Array<InputMaybe<KymFieldInputData>>>;
  familyMemberInThisCooperative?: InputMaybe<Scalars['Boolean']>;
  familyMembershipDetails?: InputMaybe<Array<InputMaybe<KymFieldInputData>>>;
  firstName?: InputMaybe<Scalars['String']>;
  foreignEstimatedAnnualIncome?: InputMaybe<Scalars['Float']>;
  foreignResidentialPermitTypeId?: InputMaybe<Scalars['String']>;
  genderId?: InputMaybe<Scalars['String']>;
  hasBeneficialOwner?: InputMaybe<Scalars['Boolean']>;
  hasForeignResidentialPermit?: InputMaybe<Scalars['Boolean']>;
  identification?: InputMaybe<Array<InputMaybe<KymFieldInputData>>>;
  identityLevel?: InputMaybe<Scalars['String']>;
  incomeSourceDetails?: InputMaybe<Array<InputMaybe<KymFieldInputData>>>;
  isConvicted?: InputMaybe<Scalars['Boolean']>;
  isMemberOfAnotherCooperative?: InputMaybe<Scalars['Boolean']>;
  isPermanentAndTemporaryAddressSame?: InputMaybe<Scalars['Boolean']>;
  isPoliticallyExposed?: InputMaybe<Scalars['Boolean']>;
  landlordContact?: InputMaybe<Scalars['String']>;
  landlordName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  loan?: InputMaybe<Scalars['Float']>;
  mainOccupation?: InputMaybe<Array<InputMaybe<KymFieldInputData>>>;
  maritalStatusId?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  nationalityId?: InputMaybe<Scalars['String']>;
  ordinary?: InputMaybe<Scalars['Float']>;
  other?: InputMaybe<Scalars['Float']>;
  otherMembershipDetails?: InputMaybe<Array<InputMaybe<KymFieldInputData>>>;
  otherProfession?: InputMaybe<Scalars['String']>;
  permanentDistrictId?: InputMaybe<Scalars['String']>;
  permanentLatitude?: InputMaybe<Scalars['Float']>;
  permanentLocalityId?: InputMaybe<Scalars['String']>;
  permanentLongitude?: InputMaybe<Scalars['Float']>;
  permanentStateId?: InputMaybe<Scalars['String']>;
  permanentTole?: InputMaybe<Scalars['String']>;
  permanentWardId?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  politicallyExposedDetails?: InputMaybe<Scalars['String']>;
  professional?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purposeId?: InputMaybe<Scalars['String']>;
  religionId?: InputMaybe<Scalars['String']>;
  savings?: InputMaybe<Scalars['Float']>;
  spouseOccupation?: InputMaybe<Array<InputMaybe<KymFieldInputData>>>;
  temporaryDistrictId?: InputMaybe<Scalars['String']>;
  temporaryLatitude?: InputMaybe<Scalars['Float']>;
  temporaryLocalityId?: InputMaybe<Scalars['String']>;
  temporaryLongitude?: InputMaybe<Scalars['Float']>;
  temporaryStateId?: InputMaybe<Scalars['String']>;
  temporaryTole?: InputMaybe<Scalars['String']>;
  temporaryWardId?: InputMaybe<Scalars['String']>;
  typeOfVisa?: InputMaybe<Scalars['String']>;
};

export type KymIndMutation = {
  add?: Maybe<KymIndAddResult>;
};


export type KymIndMutationAddArgs = {
  data: KymIndMemberInput;
};

export type KymIndPersonalInformation = {
  contact?: Maybe<Contact>;
  dateOfBirth?: Maybe<Scalars['String']>;
  educationQualificationId?: Maybe<Scalars['ID']>;
  ethnicityId?: Maybe<Scalars['ID']>;
  familyDetails?: Maybe<Array<Maybe<KymFamilyDetailsType>>>;
  firstName: Scalars['String'];
  genderId?: Maybe<Scalars['ID']>;
  identification?: Maybe<Array<Maybe<KymIdentificationType>>>;
  landlordContact?: Maybe<Scalars['String']>;
  landlordName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  maritalStatusId?: Maybe<Scalars['ID']>;
  middleName?: Maybe<Scalars['String']>;
  nationalityId?: Maybe<Scalars['ID']>;
  permanentAddress?: Maybe<Address>;
  religionId?: Maybe<Scalars['ID']>;
  temporaryAddress?: Maybe<Address>;
};

export type KymIndPersonalLus = {
  name: KymIndPersonalSection;
};

export enum KymIndPersonalSection {
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  FamilyDetails = 'FAMILY_DETAILS',
  IdentificationDetails = 'IDENTIFICATION_DETAILS',
  PermanentAddress = 'PERMANENT_ADDRESS',
  RentedHouse = 'RENTED_HOUSE',
  TemporaryAddress = 'TEMPORARY_ADDRESS'
}

export type KymIndPersonalStatus = {
  completed?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
  error?: Maybe<Array<Maybe<KymIndPersonalSection>>>;
};

export type KymIndProfessionalInformation = {
  annualIncomeSourceId?: Maybe<Scalars['ID']>;
  incomeSourceDetails?: Maybe<Array<Maybe<KymIncomeSourceDetailsType>>>;
  mainOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
  occupationId?: Maybe<Scalars['ID']>;
  spouseOccupation?: Maybe<Array<Maybe<KymOccupationDetailsType>>>;
};

export type KymIndProfessionalLus = {
  name: KymIndPersonalSection;
};

export enum KymIndProfessionalSection {
  IncomeSource = 'INCOME_SOURCE',
  MainProfession = 'MAIN_PROFESSION',
  Profession = 'PROFESSION',
  SpouseOccupation = 'SPOUSE_OCCUPATION'
}

export type KymIndProfessionalStatus = {
  completed?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
  error?: Maybe<Array<Maybe<KymIndProfessionalSection>>>;
};

export type KymIndQuery = {
  formState?: Maybe<KymIndFormStateQuery>;
  options: KymFieldQuery;
};


export type KymIndQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymInsAccountLus = {
  name: KymInsAccountSection;
};

export enum KymInsAccountSection {
  AccountOperationInstruction = 'ACCOUNT_OPERATION_INSTRUCTION',
  DetailsOfAccountOperators = 'DETAILS_OF_ACCOUNT_OPERATORS'
}

export type KymInsAccountStatus = {
  completed?: Maybe<Array<Maybe<KymInsAccountSection>>>;
  error?: Maybe<Array<Maybe<KymInsAccountSection>>>;
};

export type KymInsAddLus = KymInsAccountLus | KymInsDeclarationLus | KymInsDirectorDetailsLus | KymInsInformationLus | KymInsTransactionLus;

export type KymInsAddResult = {
  error?: Maybe<KymIndAddError>;
  query?: Maybe<KymInsQuery>;
  record?: Maybe<KymInsRecord>;
  recordId: Scalars['ID'];
};

export type KymInsAddSectionStatus = {
  account?: Maybe<KymInsAccountStatus>;
  declaration?: Maybe<KymInsDeclarationStatus>;
  directorDetails?: Maybe<KymInsDirectorDetailsStatus>;
  information?: Maybe<KymInsInformationStatus>;
  transaction?: Maybe<KymInsTransactionStatus>;
};

export type KymInsDeclarationLus = {
  name: KymInsDeclarationSection;
};

export enum KymInsDeclarationSection {
  AccountHolderDeclaration = 'ACCOUNT_HOLDER_DECLARATION',
  DocumentsDeclaration = 'DOCUMENTS_DECLARATION'
}

export type KymInsDeclarationStatus = {
  completed?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
  error?: Maybe<Array<Maybe<KymInsDeclarationSection>>>;
};

export type KymInsDirectorDetailsLus = {
  name: KymInsDirectorDetailsSection;
};

export enum KymInsDirectorDetailsSection {
  DetailsOfDirectors = 'DETAILS_OF_DIRECTORS',
  DetailsOfDirectorsAffiliated = 'DETAILS_OF_DIRECTORS_AFFILIATED'
}

export type KymInsDirectorDetailsStatus = {
  completed?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
  error?: Maybe<Array<Maybe<KymInsDirectorDetailsSection>>>;
};

export type KymInsFormData = {
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderSignature?: Maybe<Scalars['String']>;
  accountHolderStamp?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountOperatorsDetails?: Maybe<Array<Maybe<AccountOperatorDetailsFormState>>>;
  accountType?: Maybe<AccountOperationType>;
  annualTurnover?: Maybe<Scalars['Float']>;
  bank?: Maybe<Scalars['ID']>;
  branchOfficeAddress?: Maybe<Scalars['String']>;
  companyStamp?: Maybe<Scalars['String']>;
  dateOfLastAGM?: Maybe<Scalars['Date']>;
  detailsOfDirectors?: Maybe<Array<Maybe<DirectorDetailsFormState>>>;
  detailsOfDirectorsWithAffiliation?: Maybe<Array<Maybe<AffiliatedDirectorDetailsFormState>>>;
  documents?: Maybe<Array<Maybe<KymDocumentsFormState>>>;
  email?: Maybe<Scalars['String']>;
  expectedMonthlyTransaction?: Maybe<InstitutionExpectedMonthlyTransaction>;
  expectedMonthlyTurnover?: Maybe<InstitutionExpectedMonthlyTurnover>;
  fax?: Maybe<Scalars['String']>;
  initialDepositAmount?: Maybe<Scalars['Float']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionType?: Maybe<InstitutionType>;
  isCompanyStampCompulsory?: Maybe<Scalars['Boolean']>;
  issuingOffice?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  natureOfTransaction?: Maybe<Scalars['String']>;
  noOfBranches?: Maybe<Scalars['Int']>;
  numberOfEmployee?: Maybe<Scalars['Int']>;
  operatingOfficeAddress?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  postBoxNo?: Maybe<Scalars['String']>;
  registeredAddress?: Maybe<Scalars['String']>;
  registeredAddressIfChanged?: Maybe<Scalars['String']>;
  registeredNumber?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Date']>;
  sisterConcernDetails?: Maybe<Array<Maybe<SisterConcernDetailsFormState>>>;
  specialInstruction?: Maybe<Scalars['String']>;
  vatOrPanNo?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type KymInsFormStateQuery = {
  data?: Maybe<KymInsFormStatus>;
};

export type KymInsFormStatus = {
  formData?: Maybe<KymInsFormData>;
  lastUpdated: KymInsAddLus;
  sectionStatus?: Maybe<KymInsAddSectionStatus>;
};

export type KymInsInformationLus = {
  name: KymInsInformationSection;
};

export enum KymInsInformationSection {
  BankAccountDetails = 'BANK_ACCOUNT_DETAILS',
  BasicInformation = 'BASIC_INFORMATION',
  ContactDetails = 'CONTACT_DETAILS',
  DetailsOfSisterConcern = 'DETAILS_OF_SISTER_CONCERN',
  RegisteredDetails = 'REGISTERED_DETAILS'
}

export type KymInsInformationStatus = {
  completed?: Maybe<Array<Maybe<KymInsInformationSection>>>;
  error?: Maybe<Array<Maybe<KymInsInformationSection>>>;
};

export type KymInsInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderSignature?: InputMaybe<Scalars['String']>;
  accountHolderStamp?: InputMaybe<Scalars['String']>;
  accountName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountOperatorsDetails?: InputMaybe<Array<InputMaybe<AccountOperatorDetails>>>;
  accountType?: InputMaybe<AccountOperationType>;
  annualTurnover?: InputMaybe<Scalars['Float']>;
  bank?: InputMaybe<Scalars['ID']>;
  branchOfficeAddress?: InputMaybe<Scalars['String']>;
  companyStamp?: InputMaybe<Scalars['String']>;
  cooperativeDocuments?: InputMaybe<Array<InputMaybe<KymDocuments>>>;
  dateOfLastAGM?: InputMaybe<Scalars['Date']>;
  detailsOfDirectors?: InputMaybe<Array<InputMaybe<DirectorDetails>>>;
  detailsOfDirectorsWithAffiliation?: InputMaybe<Array<InputMaybe<AffiliatedDirectorDetails>>>;
  email?: InputMaybe<Scalars['String']>;
  expectedMonthlyTransaction?: InputMaybe<InstitutionExpectedMonthlyTransaction>;
  expectedMonthlyTurnover?: InputMaybe<InstitutionExpectedMonthlyTurnover>;
  fax?: InputMaybe<Scalars['String']>;
  initialDepositAmount?: InputMaybe<Scalars['Float']>;
  institutionName?: InputMaybe<Scalars['String']>;
  institutionType?: InputMaybe<InstitutionType>;
  isCompanyStampCompulsory?: InputMaybe<Scalars['Boolean']>;
  issuingOffice?: InputMaybe<Scalars['String']>;
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  natureOfTransaction?: InputMaybe<Scalars['String']>;
  noOfBranches?: InputMaybe<Scalars['Int']>;
  numberOfEmployee?: InputMaybe<Scalars['Int']>;
  operatingOfficeAddress?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  postBoxNo?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<Scalars['String']>;
  registeredAddressIfChanged?: InputMaybe<Scalars['String']>;
  registeredNumber?: InputMaybe<Scalars['String']>;
  registrationDate?: InputMaybe<Scalars['Date']>;
  sisterConcernDetails?: InputMaybe<Array<InputMaybe<SisterConcernDetails>>>;
  specialInstruction?: InputMaybe<Scalars['String']>;
  vatOrPanNo?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export type KymInsMutation = {
  add?: Maybe<KymInsAddResult>;
};


export type KymInsMutationAddArgs = {
  data: KymInsInput;
};

export type KymInsQuery = {
  formState?: Maybe<KymInsFormStateQuery>;
};


export type KymInsQueryFormStateArgs = {
  id: Scalars['ID'];
};

export type KymInsRecord = {
  member: Member;
  sectionStatus?: Maybe<KymInsFormStatus>;
};

export type KymInsTransactionLus = {
  name: KymInsTransactionSection;
};

export enum KymInsTransactionSection {
  TransactionDetails = 'TRANSACTION_DETAILS'
}

export type KymInsTransactionStatus = {
  completed?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
  error?: Maybe<Array<Maybe<KymInsTransactionSection>>>;
};

export type KymInstitutionDocumentsType = {
  documentUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
};

export type KymMemberDataFilter = {
  id?: InputMaybe<Scalars['ID']>;
  objState?: InputMaybe<ObjState>;
  query?: InputMaybe<Scalars['String']>;
};

export type KymMemberListConnection = {
  edges?: Maybe<Array<Maybe<KymMemberListEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type KymMemberListEdges = {
  cursor: Scalars['Cursor'];
  node?: Maybe<Member>;
};

export type KymMemberTypes = {
  id: Scalars['ID'];
  type: KymMemberTypesEnum;
};

export enum KymMemberTypesEnum {
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
  Individual = 'INDIVIDUAL',
  Institution = 'INSTITUTION'
}

export type KymOccupationDetails = {
  additionalFields?: InputMaybe<Array<InputMaybe<KymAdditionalFields>>>;
  address?: InputMaybe<Scalars['String']>;
  estimatedAnnualIncome?: InputMaybe<Scalars['Float']>;
  idNumber?: InputMaybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: InputMaybe<Scalars['String']>;
};

export type KymOccupationDetailsFormState = {
  additionalFields?: Maybe<Array<Maybe<KymAdditionalFieldsFormState>>>;
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type KymOccupationDetailsType = {
  address?: Maybe<Scalars['String']>;
  estimatedAnnualIncome?: Maybe<Scalars['Float']>;
  idNumber?: Maybe<Scalars['String']>;
  occupation: Scalars['ID'];
  orgName?: Maybe<Scalars['String']>;
};

export type Level1 = {
  level2: Level2;
};


export type Level1Level2Args = {
  id: Scalars['String'];
};

export type Level2 = {
  add: Example;
  hello: Example;
};


export type Level2AddArgs = {
  data: ExampleInput;
};


export type Level2HelloArgs = {
  data: ExampleInput;
};

export type ListKymFieldFilter = {
  customId?: InputMaybe<CustomIdEnum>;
  id?: InputMaybe<Scalars['ID']>;
  isCustom?: InputMaybe<Scalars['Boolean']>;
  kymType?: InputMaybe<KymMemberTypesEnum>;
  name?: InputMaybe<Scalars['String']>;
  parent?: InputMaybe<Kym_Field_Parent>;
  query?: InputMaybe<Scalars['String']>;
};

export type LocalizationExample = {
  name?: Maybe<Scalars['Localized']>;
};

export type LoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type LoginRecord = {
  token: AuthToken;
  user: User;
};

export type LoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<LoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type MeResult = {
  data?: Maybe<User>;
  error?: Maybe<QueryError>;
};

export type Member = Base & {
  address?: Maybe<Address>;
  code: Scalars['String'];
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dateJoined?: Maybe<Scalars['Date']>;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  name?: Maybe<Scalars['Localized']>;
  objState: ObjState;
  profile?: Maybe<MemberProfile>;
  share?: Maybe<MemberShare>;
  type?: Maybe<KymMemberTypesEnum>;
};

export type MemberDetailsResult = {
  data?: Maybe<Member>;
  error?: Maybe<QueryError>;
};

export enum MemberIdentityLevel {
  General = 'GENERAL',
  Mid = 'MID',
  Vip = 'VIP'
}

export type MemberMutation = {
  cooperative?: Maybe<KymCooperativeMutation>;
  cooperativeUnion?: Maybe<KymCoopUnionMutation>;
  generateExcel: Scalars['String'];
  individual?: Maybe<KymIndMutation>;
  institution?: Maybe<KymInsMutation>;
  memberPDF: Scalars['String'];
  /**  id is the ID of member  */
  translate?: Maybe<TranslateData>;
};


export type MemberMutationCooperativeArgs = {
  id: Scalars['ID'];
};


export type MemberMutationCooperativeUnionArgs = {
  id: Scalars['ID'];
};


export type MemberMutationGenerateExcelArgs = {
  filename: Scalars['String'];
  id: Scalars['ID'];
};


export type MemberMutationIndividualArgs = {
  id: Scalars['ID'];
};


export type MemberMutationInstitutionArgs = {
  id: Scalars['ID'];
};


export type MemberMutationMemberPdfArgs = {
  id: Scalars['ID'];
};


export type MemberMutationTranslateArgs = {
  data: TranslateInput;
  memberId: Scalars['ID'];
};

export type MemberProfile = CooperativeMember | CooperativeUnionMember | IndividualMember | InstitutionMember;

export type MemberQuery = {
  cooperative?: Maybe<KymCooperativeQuery>;
  cooperativeUnion?: Maybe<KymCoopUnionQuery>;
  details: MemberDetailsResult;
  individual?: Maybe<KymIndQuery>;
  institution?: Maybe<KymInsQuery>;
  list: KymMemberListConnection;
  memberTypes: MemberTypeResult;
  translate: TranslateQueryResult;
};


export type MemberQueryDetailsArgs = {
  id: Scalars['ID'];
};


export type MemberQueryListArgs = {
  filter?: InputMaybe<KymMemberDataFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type MemberQueryTranslateArgs = {
  id: Scalars['ID'];
};

export type MemberShare = {
  history?: Maybe<Array<Maybe<ShareRegister>>>;
  summary?: Maybe<ShareBalance>;
};

export type MemberTypeResult = {
  data?: Maybe<Array<Maybe<KymMemberTypes>>>;
  error?: Maybe<QueryError>;
};

export type MonthlyTransactions = {
  closingBalance?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  month: Scalars['String'];
  transactions: Array<Maybe<Transactions>>;
};

export type Municipality = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
  wards: Array<Scalars['Int']>;
};

export type Mutation = {
  auth: AuthMutation;
  eBanking: EBankingMutation;
  example: ExampleMutation;
  inventory: InventoryMutation;
  members: MemberMutation;
  newId: Scalars['String'];
  presignedUrl: PresignedUrlMutation;
  settings: SettingsMutation;
  share: ShareMutation;
};

export type MutationError = AuthorizationError | BadRequestError | NotFoundError | ServerError | ValidationError;

export type Name = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
};

export type Nominee = {
  address?: Maybe<Address>;
  citizenship?: Maybe<Citizenship>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  memberId?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NomineeInNepali = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NotFoundError = {
  code: Scalars['String'];
  message: Scalars['String'];
};

export type NotificationFilter = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum ObjState {
  Approved = 'APPROVED',
  Draft = 'DRAFT',
  Inactive = 'INACTIVE',
  Validated = 'VALIDATED'
}

export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export type Organization = Base & {
  address?: Maybe<OrganizationAddress>;
  basicDetails?: Maybe<OrganizationBasicDetails>;
  contactDetails?: Maybe<OrganizationContactDetails>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  documents?: Maybe<OrganizationDocument>;
  id: Scalars['ID'];
  mainContactPerson?: Maybe<OrganizationMainContactPerson>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  registrationDetails?: Maybe<OrganizationRegistrationDetails>;
  statistics?: Maybe<OrganizationStatistics>;
};

export type OrganizationAddResult = {
  error?: Maybe<MutationError>;
  query?: Maybe<OrganizationSettingsQuery>;
  record?: Maybe<OrganizationFormData>;
  recordId: Scalars['ID'];
};

export type OrganizationAddress = {
  districtId?: Maybe<Scalars['ID']>;
  latitude?: Maybe<Scalars['String']>;
  localityId?: Maybe<Scalars['ID']>;
  longitude?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['ID']>;
  vdcId?: Maybe<Scalars['ID']>;
  wardNo?: Maybe<Scalars['ID']>;
};

export type OrganizationBasicDetails = {
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  typeOfMember?: Maybe<TypeOfMember>;
};

export type OrganizationContactDetails = {
  email?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationDocument = {
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationFilter = {
  id?: InputMaybe<Scalars['ID']>;
  query?: InputMaybe<Scalars['String']>;
};

export type OrganizationFormData = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['ID']>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['String']>;
  localityId?: Maybe<Scalars['ID']>;
  logo?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['String']>;
  municipalityId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  provinceId?: Maybe<Scalars['ID']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  typeOfMember?: Maybe<TypeOfMember>;
  wardNo?: Maybe<Scalars['ID']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationFormState = {
  formData?: Maybe<OrganizationFormData>;
};

export type OrganizationFormStateResult = {
  data?: Maybe<OrganizationFormState>;
  error?: Maybe<QueryError>;
};

export type OrganizationGetResult = {
  data?: Maybe<Organization>;
  error?: Maybe<QueryError>;
};

export type OrganizationInput = {
  contactPersonContactNumber?: InputMaybe<Scalars['String']>;
  contactPersonName?: InputMaybe<Scalars['String']>;
  districtId?: InputMaybe<Scalars['ID']>;
  documents?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  email?: InputMaybe<Scalars['String']>;
  latitude?: InputMaybe<Scalars['String']>;
  localityId?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<Scalars['String']>;
  longitude?: InputMaybe<Scalars['String']>;
  municipalityId?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  pan?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  provinceId?: InputMaybe<Scalars['ID']>;
  regdAddress?: InputMaybe<Scalars['String']>;
  regdNo?: InputMaybe<Scalars['String']>;
  regdOffice?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  typeOfMember?: InputMaybe<TypeOfMember>;
  wardNo?: InputMaybe<Scalars['ID']>;
  website?: InputMaybe<Scalars['String']>;
};

export type OrganizationListResult = {
  data?: Maybe<Array<Maybe<Organization>>>;
  error?: Maybe<QueryError>;
};

export type OrganizationMainContactPerson = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type OrganizationRegistrationDetails = {
  pan?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
};

export type OrganizationSettingsMutation = {
  initialSetup?: Maybe<OrganizationAddResult>;
};


export type OrganizationSettingsMutationInitialSetupArgs = {
  data: OrganizationInput;
};

export type OrganizationSettingsQuery = {
  formState?: Maybe<OrganizationFormStateResult>;
  list?: Maybe<OrganizationListResult>;
  /** This is to get organization details of a logged in employee. id of that email will be extracted from the employee who sends the request */
  mine?: Maybe<OrganizationGetResult>;
};


export type OrganizationSettingsQueryFormStateArgs = {
  id: Scalars['ID'];
};


export type OrganizationSettingsQueryListArgs = {
  filter?: InputMaybe<OrganizationFilter>;
};

export type OrganizationStatistics = {
  totalCapital: Scalars['Float'];
  totalMembers: Scalars['Int'];
};

export enum Payment_Mode {
  Account = 'ACCOUNT',
  BankVoucher = 'BANK_VOUCHER',
  Cash = 'CASH'
}

export type PageInfo = {
  endCursor?: Maybe<Scalars['Cursor']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Pagination = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Scalars['String']>;
};

export type PersonalInformation = {
  citizenship?: Maybe<Citizenship>;
  dateOfBirth?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  inNepali?: Maybe<PersonalInformationInNepali>;
  name?: Maybe<Name>;
  nationality?: Maybe<Scalars['String']>;
  occupation?: Maybe<Scalars['String']>;
  panNumber?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type PersonalInformationInNepali = {
  name?: Maybe<Name>;
  occupation?: Maybe<Scalars['String']>;
};

export type PresignedUrlMutation = {
  get: PresignedUrlOutput;
  upload: PresignedUrlOutput;
};


export type PresignedUrlMutationGetArgs = {
  objectName: Scalars['String'];
};


export type PresignedUrlMutationUploadArgs = {
  fileExtension: AllowedFileExtension;
};

export type PresignedUrlOutput = {
  filename?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type Province = {
  districts: Array<District>;
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type Query = {
  administration: AdministrationQuery;
  auth: AuthQuery;
  dashboard: DashboardQuery;
  eBanking: EBankingQuery;
  example: ExampleQuery;
  inventory: InventoryQuery;
  members: MemberQuery;
  routesAndCodes: RoutesAndCodesQuery;
  settings: SettingsQuery;
  share: ShareQuery;
};

export type QueryError = AuthorizationError | BadRequestError | NotFoundError | ServerError;

export type RecentTransactionFilter = {
  limit: Scalars['Int'];
};

export type Result = {
  id: Scalars['Int'];
  name: Scalars['String'];
  nameNp: Scalars['String'];
};

export type RoutesAndCodes = {
  code?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type RoutesAndCodesFilter = {
  code?: InputMaybe<Scalars['Int']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type RoutesAndCodesQuery = {
  list: Array<RoutesAndCodes>;
};


export type RoutesAndCodesQueryListArgs = {
  filter?: InputMaybe<RoutesAndCodesFilter>;
};

export enum Share_Status {
  Active = 'ACTIVE',
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED'
}

export enum Share_Transaction_Direction {
  Purchase = 'PURCHASE',
  Return = 'RETURN'
}

export type ServerError = {
  code: Scalars['String'];
  message: Scalars['String'];
};

export type Services = {
  icon: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
};

export type SettingsMutation = {
  general?: Maybe<GeneralSettingsMutation>;
  kymForm: KymFormSettingMutation;
};

export type SettingsQuery = {
  general?: Maybe<GeneralSettingsQuery>;
  kymForm: KymFormSettingQuery;
};

export type ShareBalance = Base & {
  balance: Scalars['Int'];
  count: Scalars['Int'];
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  member: Member;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  shareNumbers?: Maybe<Array<Maybe<ShareNumber>>>;
};

export type ShareBalanceConnection = {
  edges: Array<ShareBalanceEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ShareBalanceEdge = {
  cursor: Scalars['String'];
  node: ShareBalance;
};

export type ShareBalanceFilter = {
  id?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  memberSearchText?: InputMaybe<Scalars['String']>;
};

export type ShareExtraCharges = {
  name: Scalars['String'];
  value: Scalars['Float'];
};

export type ShareExtraChargesInput = {
  name: Scalars['String'];
  value: Scalars['Float'];
};

export type ShareMutation = {
  purchase: SharePurchaseResult;
  return: ShareReturnResult;
};


export type ShareMutationPurchaseArgs = {
  data: SharePurchaseInput;
  id: Scalars['ID'];
};


export type ShareMutationReturnArgs = {
  data: ShareReturnInput;
  id: Scalars['ID'];
};

export type ShareNumber = {
  end?: Maybe<Scalars['Int']>;
  start?: Maybe<Scalars['Int']>;
};

export type SharePurchaseError = InvalidDataError;

export type SharePurchaseInput = {
  accountId?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId?: InputMaybe<Scalars['String']>;
  paymentMode?: InputMaybe<Payment_Mode>;
  shareAmount?: InputMaybe<Scalars['Float']>;
  shareCount?: InputMaybe<Scalars['Int']>;
  totalAmount?: InputMaybe<Scalars['Float']>;
  voucherNumber?: InputMaybe<Scalars['String']>;
};

export type SharePurchaseResult = {
  error?: Maybe<SharePurchaseError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type ShareQuery = {
  balance?: Maybe<ShareBalanceConnection>;
  register?: Maybe<ShareRegisterConnection>;
};


export type ShareQueryBalanceArgs = {
  filter?: InputMaybe<ShareBalanceFilter>;
  paginate?: InputMaybe<Pagination>;
};


export type ShareQueryRegisterArgs = {
  filter?: InputMaybe<ShareRegisterFilter>;
  paginate?: InputMaybe<Pagination>;
};

export type ShareRegister = Base & {
  accountId?: Maybe<Scalars['String']>;
  balance: Scalars['Int'];
  bankId?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  credit?: Maybe<Scalars['Int']>;
  debit?: Maybe<Scalars['Int']>;
  endNumber: Scalars['Int'];
  extraFee?: Maybe<Array<Maybe<ShareExtraCharges>>>;
  id: Scalars['ID'];
  member: Member;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  paymentMode: Payment_Mode;
  shareAmount?: Maybe<Scalars['Float']>;
  startNumber: Scalars['Int'];
  status: Share_Status;
  totalAmount?: Maybe<Scalars['Float']>;
  transactionDate: Scalars['Date'];
  transactionDirection: Share_Transaction_Direction;
  voucherNumber?: Maybe<Scalars['String']>;
};

export type ShareRegisterConnection = {
  edges: Array<ShareRegisterEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ShareRegisterEdge = {
  cursor: Scalars['String'];
  node: ShareRegister;
};

export type ShareRegisterFilter = {
  dateFrom?: InputMaybe<Scalars['Date']>;
  dateTo?: InputMaybe<Scalars['Date']>;
  id?: InputMaybe<Scalars['String']>;
  memberId?: InputMaybe<Scalars['String']>;
  memberSearchText?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Share_Status>;
  transactionDirection?: InputMaybe<Share_Transaction_Direction>;
};

export type ShareReturnError = InvalidDataError;

export type ShareReturnInput = {
  accountId?: InputMaybe<Scalars['String']>;
  bankId?: InputMaybe<Scalars['String']>;
  extraFee?: InputMaybe<Array<InputMaybe<ShareExtraChargesInput>>>;
  memberId?: InputMaybe<Scalars['String']>;
  noOfReturnedShares?: InputMaybe<Scalars['Int']>;
  paymentMode?: InputMaybe<Payment_Mode>;
  remainingShare?: InputMaybe<Scalars['Int']>;
  remainingShareValue?: InputMaybe<Scalars['Float']>;
  selectAllShares?: InputMaybe<Scalars['Boolean']>;
  totalAmount?: InputMaybe<Scalars['Float']>;
  voucherNumber?: InputMaybe<Scalars['String']>;
  withdrawAmount?: InputMaybe<Scalars['Float']>;
};

export type ShareReturnResult = {
  error?: Maybe<ShareReturnError>;
  query?: Maybe<ShareQuery>;
  record?: Maybe<ShareRegister>;
  recordId: Scalars['ID'];
};

export type SisterConcernDetails = {
  address?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  natureOfBusiness?: InputMaybe<Scalars['String']>;
  phoneNo?: InputMaybe<Scalars['String']>;
};

export type SisterConcernDetailsFormState = {
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export type SisterConcernDetailsType = {
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  natureOfBusiness?: Maybe<Scalars['String']>;
  phoneNo?: Maybe<Scalars['String']>;
};

export enum Transaction_Direction {
  Purchased = 'PURCHASED',
  Sold = 'SOLD'
}

export enum Transaction_Type {
  Deposit = 'DEPOSIT',
  SharePurchase = 'SHARE_PURCHASE',
  Transfer = 'TRANSFER',
  Withdraw = 'WITHDRAW'
}

export type TestDbResult = {
  name: Scalars['String'];
};

export enum TextFormat {
  Email = 'EMAIL',
  IPv4 = 'IPv4',
  IPv6 = 'IPv6'
}

export enum TimePeriod {
  Day = 'DAY',
  Fortnight = 'FORTNIGHT',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type TodayTrend = {
  trendData?: Maybe<Array<Maybe<Scalars['Float']>>>;
  type: DashboardTodayType;
  value: Scalars['Float'];
  yesterdayValue: Scalars['Float'];
};


export type TodayTrendTrendDataArgs = {
  filter: TrendDataFilter;
};

export type TransactionFilter = {
  fromDate?: InputMaybe<Scalars['Date']>;
  id: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  query?: InputMaybe<Scalars['String']>;
  toDate?: InputMaybe<Scalars['Date']>;
  type?: InputMaybe<TranslateInput>;
};

export type Transactions = {
  amount: Scalars['Float'];
  date: Scalars['Date'];
  id: Scalars['String'];
  name: Scalars['String'];
  transactionDirection: Transaction_Direction;
  transactionType: Transaction_Type;
};

export type TranslateData = {
  data?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: Maybe<Scalars['String']>;
};

export type TranslateInput = {
  data?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  translatedValue?: InputMaybe<Scalars['String']>;
};

export type TranslateQueryResult = {
  data?: Maybe<Array<Maybe<TranslateData>>>;
  error?: Maybe<QueryError>;
};

export type TrendDataFilter = {
  fromDate?: InputMaybe<Scalars['Date']>;
  period?: InputMaybe<TimePeriod>;
  toDate?: InputMaybe<Scalars['Date']>;
};

export enum TypeOfMember {
  Cooperative = 'COOPERATIVE',
  CooperativeUnion = 'COOPERATIVE_UNION',
  Individual = 'INDIVIDUAL',
  Institutional = 'INSTITUTIONAL'
}

export type User = Base & {
  contact?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['Localized'];
  id: Scalars['ID'];
  lastName: Scalars['Localized'];
  middleName: Scalars['Localized'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
  organization: Organization;
  username: Scalars['String'];
};

export enum UserType {
  Human = 'HUMAN',
  System = 'SYSTEM'
}

export type ValidationError = {
  code: Scalars['String'];
  message: Scalars['InvalidData'];
};

export type KymIndFormStateQuery = {
  data?: Maybe<KymIndFormState>;
  error?: Maybe<QueryError>;
};

export type SetNewCoaMutationVariables = Exact<{
  data: AddCoaAccountInput;
}>;


export type SetNewCoaMutation = { settings: { general?: { chartsOfAccount?: { account?: { add: { record?: { id: string, name: string, level: number, code: string, currency: string, classId: string, hasSubAccounts: boolean, active: boolean, accountType: CoaTypesOfAccount, openingBalance: number, isLedgerAccount: boolean, isBalanceSheetAccount: boolean, isSummationAccount: boolean, isIbtAccount: boolean, isInTransitAccount: boolean, isProfitAndLossAccount: boolean, allowFreeEntry: boolean, allowTransaction: boolean, parent?: { id: string, name: string, accountNumber: string, isDefault: boolean, amount: number, interestRate: number, accountType: Account_Type, interestBooked: number, interestEarned: number, subscribedDate: string, history?: Array<{ date: string, balance: number }> | null, transactions?: Array<{ id: string, name: string, transactionType: Transaction_Type, date: string, transactionDirection: Transaction_Direction, amount: number }> | null } | null } | null } } | null } | null } | null } };

export type SetCooperativeDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymCooperativeFormInput;
}>;


export type SetCooperativeDataMutation = { members: { cooperative?: { add?: { recordId: string } | null } | null } };

export type SetCooperativeUnionInstitutionDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionInstitutionInformationInput>;
}>;


export type SetCooperativeUnionInstitutionDataMutation = { members: { cooperativeUnion?: { add?: { institutionInformation?: { recordId: string } | null } | null } | null } };

export type SetCooperativeUnionBoardOfDirectorDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionBodDetailsInput>;
}>;


export type SetCooperativeUnionBoardOfDirectorDataMutation = { members: { cooperativeUnion?: { add?: { boardOfDirectorsDetails?: { recordId: string } | null } | null } | null } };

export type SetAccountOperatorDetailsDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionAccountOperatorDetailsInput>;
}>;


export type SetAccountOperatorDetailsDataMutation = { members: { cooperativeUnion?: { add?: { accountOperatorsDetails?: { recordId: string } | null } | null } | null } };

export type SetCentralRepresentationDetailsDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionCentralRepresentativeDetailsInput>;
}>;


export type SetCentralRepresentationDetailsDataMutation = { members: { cooperativeUnion?: { add?: { centralRepresentativeDetails?: { recordId: string } | null } | null } | null } };

export type SetMemberDetailsDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionMemberDetailsInput>;
}>;


export type SetMemberDetailsDataMutation = { members: { cooperativeUnion?: { add?: { memberDetails?: { recordId: string } | null } | null } | null } };

export type SetEconomicDetailsDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionEconomicDetailsInput>;
}>;


export type SetEconomicDetailsDataMutation = { members: { cooperativeUnion?: { add?: { economicDetails?: { recordId: string } | null } | null } | null } };

export type SetDeclarationDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data?: InputMaybe<CoopUnionDeclarationInput>;
}>;


export type SetDeclarationDataMutation = { members: { cooperativeUnion?: { add?: { declaration?: { recordId: string } | null } | null } | null } };

export type GetNewIdMutationVariables = Exact<{ [key: string]: never; }>;


export type GetNewIdMutation = { newId: string };

export type SetMemberDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymIndMemberInput;
}>;


export type SetMemberDataMutation = { members: { individual?: { add?: { recordId: string, error?: { error?: Record<string, Array<string>> | null } | null } | null } | null } };

export type UpdateKymFieldMutationVariables = Exact<{
  id: Scalars['ID'];
  enabled?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
}>;


export type UpdateKymFieldMutation = { settings: { kymForm: { field: { update: { record?: { id: string, enabled: boolean, name: Record<"local"|"en"|"np",string> } | null } } } } };

export type DeleteKymFieldMutationVariables = Exact<{
  optionId: Scalars['ID'];
}>;


export type DeleteKymFieldMutation = { settings: { kymForm: { option: { delete: { recordId: string } } } } };

export type SetKymCooperativeDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymCooperativeFormInput;
}>;


export type SetKymCooperativeDataMutation = { members: { cooperative?: { add?: { recordId: string } | null } | null } };

export type SetInstitutionDataMutationVariables = Exact<{
  id: Scalars['ID'];
  data: KymInsInput;
}>;


export type SetInstitutionDataMutation = { members: { institution?: { add?: { recordId: string, error?: { error?: Record<string, Array<string>> | null } | null } | null } | null } };

export type AddKymOptionMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  data: KymOptionInput;
}>;


export type AddKymOptionMutation = { settings: { kymForm: { option: { upsert: { recordId: string, record?: { id: string, name: Record<"local"|"en"|"np",string>, fieldType: Kym_Option_Field_Type, enabled: boolean } | null, error?: MutationError_AuthorizationError_Fragment | MutationError_BadRequestError_Fragment | MutationError_NotFoundError_Fragment | MutationError_ServerError_Fragment | MutationError_ValidationError_Fragment | null } } } } };

export type ArrangeKymFieldMutationVariables = Exact<{
  optionId: Scalars['ID'];
  to: Scalars['Int'];
}>;


export type ArrangeKymFieldMutation = { settings: { kymForm: { option: { move: { recordId: string } } } } };

export type ToggleOtherOptionMutationVariables = Exact<{
  groupId: Scalars['ID'];
  hasOtherField: Scalars['Boolean'];
}>;


export type ToggleOtherOptionMutation = { settings: { kymForm: { field: { update: { record?: { name: Record<"local"|"en"|"np",string>, hasOtherField: boolean } | null } } } } };

export type AddConditionFieldMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  dependsOn: Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>;
}>;


export type AddConditionFieldMutation = { settings: { kymForm: { condition: { recordId: string } } } };

export type AddFileSizeMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  maxSize: Scalars['Int'];
}>;


export type AddFileSizeMutation = { settings: { kymForm: { maxSize: { recordId: string } } } };

export type AddCustomFieldMutationVariables = Exact<{ [key: string]: never; }>;


export type AddCustomFieldMutation = { settings: { kymForm: { field: { add: { record?: { id: string, name: Record<"local"|"en"|"np",string>, enabled: boolean, fieldType: Kym_Field_Type, isCustom: boolean, hasOtherField: boolean, options?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, fieldType: Kym_Option_Field_Type, enabled: boolean }> | null } | null } } } } };

export type UpdateCustomFieldMutationVariables = Exact<{
  fieldId: Scalars['ID'];
  fieldName?: InputMaybe<Scalars['String']>;
  fieldType?: InputMaybe<Kym_Field_Type>;
  fieldEnabled?: InputMaybe<Scalars['Boolean']>;
}>;


export type UpdateCustomFieldMutation = { settings: { kymForm: { field: { update: { recordId?: string | null, record?: { id: string, name: Record<"local"|"en"|"np",string>, enabled: boolean } | null } } } } };

export type AddSharePurchaseMutationVariables = Exact<{
  id: Scalars['ID'];
  data: SharePurchaseInput;
}>;


export type AddSharePurchaseMutation = { share: { purchase: { recordId: string, record?: { id: string, createdAt: string, modifiedAt: string, status: Share_Status, transactionDate: string, transactionDirection: Share_Transaction_Direction, credit?: number | null, debit?: number | null, startNumber: number, endNumber: number, balance: number, shareAmount?: number | null, totalAmount?: number | null, paymentMode: Payment_Mode, bankId?: string | null, voucherNumber?: string | null, accountId?: string | null, member: { id: string }, extraFee?: Array<{ name: string, value: number } | null> | null } | null } } };

export type AddShareReturnMutationVariables = Exact<{
  id: Scalars['ID'];
  data: ShareReturnInput;
}>;


export type AddShareReturnMutation = { share: { return: { recordId: string, record?: { id: string, createdAt: string, modifiedAt: string, status: Share_Status, transactionDate: string, transactionDirection: Share_Transaction_Direction, credit?: number | null, debit?: number | null, startNumber: number, endNumber: number, balance: number, shareAmount?: number | null, totalAmount?: number | null, paymentMode: Payment_Mode, bankId?: string | null, voucherNumber?: string | null, accountId?: string | null, member: { id: string } } | null } } };

export type AllAdministrationQueryVariables = Exact<{ [key: string]: never; }>;


export type AllAdministrationQuery = { administration: { all: Array<{ id: number, name: string, districts: Array<{ id: number, name: string, municipalities: Array<{ id: number, name: string }> }> }> } };

type MutationError_AuthorizationError_Fragment = {};

type MutationError_BadRequestError_Fragment = { __typename: 'BadRequestError', message: string, code: string };

type MutationError_NotFoundError_Fragment = {};

type MutationError_ServerError_Fragment = { __typename: 'ServerError', message: string, code: string };

type MutationError_ValidationError_Fragment = {};

export type MutationErrorFragment = MutationError_AuthorizationError_Fragment | MutationError_BadRequestError_Fragment | MutationError_NotFoundError_Fragment | MutationError_ServerError_Fragment | MutationError_ValidationError_Fragment;

export type GetKymFormStatusInstitutionQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetKymFormStatusInstitutionQuery = { members: { institution?: { formState?: { data?: { sectionStatus?: { information?: { completed?: Array<KymInsInformationSection | null> | null, error?: Array<KymInsInformationSection | null> | null } | null, transaction?: { completed?: Array<KymInsTransactionSection | null> | null, error?: Array<KymInsTransactionSection | null> | null } | null, directorDetails?: { completed?: Array<KymInsDirectorDetailsSection | null> | null, error?: Array<KymInsDirectorDetailsSection | null> | null } | null, account?: { completed?: Array<KymInsAccountSection | null> | null, error?: Array<KymInsAccountSection | null> | null } | null, declaration?: { completed?: Array<KymInsDeclarationSection | null> | null, error?: Array<KymInsDeclarationSection | null> | null } | null } | null } | null } | null } | null } };

export type GetInventoryItemsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetInventoryItemsQuery = { inventory: { items?: { list?: { edges: Array<{ node: { id: string, name: string, type: string, unitPrice: number, itemQuantity: number } } | null> } | null } | null } };

export type GetInventoryItemGroupQueryVariables = Exact<{ [key: string]: never; }>;


export type GetInventoryItemGroupQuery = { inventory: { itemsGroup?: { list?: { edges: Array<{ node: { name: string, id: string, description: string, parentCategory: string } } | null> } | null } | null } };

export type GetInventoryVendorQueryVariables = Exact<{ [key: string]: never; }>;


export type GetInventoryVendorQuery = { inventory: { vendors?: { list?: { edges: Array<{ node: { name: string, location: string, email: string, phoneNumber: string } } | null> } | null } | null } };

export type GetInventoryUnitOfMeasureQueryVariables = Exact<{ [key: string]: never; }>;


export type GetInventoryUnitOfMeasureQuery = { inventory: { unitOfMeasure?: { list?: { edges: Array<{ node: { name: string, shortName: string, acceptFraction: boolean } } | null> } | null } | null } };

export type GetIndividualKymOptionQueryVariables = Exact<{
  fieldName?: InputMaybe<Scalars['String']>;
}>;


export type GetIndividualKymOptionQuery = { members: { individual?: { options: { list?: { data?: Array<{ options?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, fieldType: Kym_Option_Field_Type, enabled: boolean }> | null } | null> | null } | null } } | null } };

export type GetIndividualKymOptionsQueryVariables = Exact<{
  filter?: InputMaybe<ListKymFieldFilter>;
}>;


export type GetIndividualKymOptionsQuery = { members: { individual?: { options: { list?: { data?: Array<{ options?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, fieldType: Kym_Option_Field_Type, enabled: boolean }> | null } | null> | null } | null } } | null } };

export type GetIndIdentificationDocOptionQueryVariables = Exact<{ [key: string]: never; }>;


export type GetIndIdentificationDocOptionQuery = { members: { individual?: { options: { list?: { data?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, options?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, fieldType: Kym_Option_Field_Type, enabled: boolean }> | null } | null> | null } | null } } | null } };

export type GetMemberListQueryVariables = Exact<{
  objState?: InputMaybe<ObjState>;
  first?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['Cursor']>;
  after?: InputMaybe<Scalars['Cursor']>;
  last?: InputMaybe<Scalars['Int']>;
}>;


export type GetMemberListQuery = { members: { list: { totalCount: number, edges?: Array<{ cursor: string, node?: { id: string, name?: Record<"local"|"en"|"np",string> | null, contact?: string | null, createdAt: string, address?: { state?: Record<"local"|"en"|"np",string> | null, district?: Record<"local"|"en"|"np",string> | null, localLevel?: Record<"local"|"en"|"np",string> | null, wardNo?: string | null, locality?: Record<"local"|"en"|"np",string> | null } | null } | null } | null> | null, pageInfo?: { startCursor?: string | null, endCursor?: string | null } | null } } };

export type GetMemberTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMemberTypesQuery = { members: { memberTypes: { data?: Array<{ id: string, type: KymMemberTypesEnum } | null> | null } } };

export type GetMemberTranslationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetMemberTranslationQuery = { members: { translate: { data?: Array<{ id: string, data?: string | null, translatedValue?: string | null } | null> | null } } };

export type GetKymFormStatusQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetKymFormStatusQuery = { members: { individual?: { formState?: { data?: { sectionStatus?: { personal?: { completed?: Array<KymIndPersonalSection | null> | null, error?: Array<KymIndPersonalSection | null> | null } | null, professional?: { completed?: Array<KymIndProfessionalSection | null> | null, error?: Array<KymIndProfessionalSection | null> | null } | null, cooperativeMembership?: { completed?: Array<KymIndCooperativeMemberSection | null> | null, error?: Array<KymIndCooperativeMemberSection | null> | null } | null, declaration?: { completed?: Array<KymIndDeclarationSection | null> | null, error?: Array<KymIndDeclarationSection | null> | null } | null } | null } | null } | null } | null } };

export type GetKymIndItemDetailsQueryVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  customId?: InputMaybe<CustomIdEnum>;
  isIdentificationDoc?: InputMaybe<Kym_Field_Parent>;
}>;


export type GetKymIndItemDetailsQuery = { settings: { kymForm: { field?: { list?: { data?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, enabled: boolean, hasOtherField: boolean, dependsOn?: Array<string | null> | null, isCustom: boolean, maxSize?: number | null, fieldType: Kym_Field_Type, options?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, fieldType: Kym_Option_Field_Type, enabled: boolean }> | null } | null> | null } | null } | null } } };

export type GetMemberIndividualDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetMemberIndividualDataQuery = { members: { details: { data?: { id: string, name?: Record<"local"|"en"|"np",string> | null, contact?: string | null, dateJoined?: string | null, address?: { state?: Record<"local"|"en"|"np",string> | null, district?: Record<"local"|"en"|"np",string> | null, localLevel?: Record<"local"|"en"|"np",string> | null, wardNo?: string | null, locality?: Record<"local"|"en"|"np",string> | null } | null, profile?: { personalInformation?: { firstName: string, middleName?: string | null, lastName?: string | null, genderId?: string | null, dateOfBirth?: string | null, ethnicityId?: string | null, nationalityId?: string | null, educationQualificationId?: string | null, religionId?: string | null, landlordName?: string | null, landlordContact?: string | null, maritalStatusId?: string | null, contact?: { mobile?: string | null, residence?: string | null, office?: string | null } | null, identification?: Array<{ id?: string | null, fields?: Array<{ name?: string | null, value?: string | null } | null> | null } | null> | null, permanentAddress?: { state?: Record<"local"|"en"|"np",string> | null, district?: Record<"local"|"en"|"np",string> | null, localLevel?: Record<"local"|"en"|"np",string> | null, wardNo?: string | null, locality?: Record<"local"|"en"|"np",string> | null } | null, temporaryAddress?: { state?: Record<"local"|"en"|"np",string> | null, district?: Record<"local"|"en"|"np",string> | null, localLevel?: Record<"local"|"en"|"np",string> | null, wardNo?: string | null, locality?: Record<"local"|"en"|"np",string> | null } | null, familyDetails?: Array<{ relationshipId: string, fullName?: string | null } | null> | null } | null } | {} | null } | null } } };

export type GetKymDeclarationQueryVariables = Exact<{ [key: string]: never; }>;


export type GetKymDeclarationQuery = { settings: { kymForm: { declaration: { id: string, content: string } } } };

export type GetCustomFieldsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCustomFieldsQuery = { settings: { kymForm: { field?: { list?: { data?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, enabled: boolean, fieldType: Kym_Field_Type, isCustom: boolean, hasOtherField: boolean, options?: Array<{ id: string, name: Record<"local"|"en"|"np",string>, fieldType: Kym_Option_Field_Type, enabled: boolean }> | null } | null> | null } | null } | null } } };

export type GetBranchesListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetBranchesListQuery = { settings: { general?: { branch?: { list?: { edges: Array<{ node: { branchCode: number, contactNumber: string, address: { provinceId?: string | null, districtId?: string | null, vdcId?: string | null, wardNo?: string | null, locality?: string | null, latitude?: string | null, longitude?: string | null }, manager: { id: string } } }> } | null } | null } | null } };

export type GetChartOfAccountsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetChartOfAccountsQuery = { settings: { general?: { chartsOfAccount?: { class?: { data: Array<{ id: string, name: string }> } | null } | null } | null } };

export type GetShareBalanceListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetShareBalanceListQuery = { share: { balance?: { edges: Array<{ node: { id: string, balance: number, count: number, member: { name?: Record<"local"|"en"|"np",string> | null } } }>, pageInfo: { endCursor?: string | null, startCursor?: string | null } } | null } };

export type GetShareRegisterListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetShareRegisterListQuery = { share: { register?: { edges: Array<{ node: { transactionDate: string, transactionDirection: Share_Transaction_Direction, id: string, balance: number, startNumber: number, shareAmount?: number | null, endNumber: number, credit?: number | null, debit?: number | null, member: { name?: Record<"local"|"en"|"np",string> | null } } }> } | null } };

export type GetShareHistoryQueryVariables = Exact<{
  memberId: Scalars['String'];
}>;


export type GetShareHistoryQuery = { share: { register?: { edges: Array<{ node: { id: string, transactionDate: string, transactionDirection: Share_Transaction_Direction, startNumber: number, endNumber: number, credit?: number | null, debit?: number | null, balance: number, member: { id: string } } }> } | null } };

export const MutationErrorFragmentDoc = `
    fragment MutationError on MutationError {
  ... on BadRequestError {
    __typename
    message
    code
  }
  ... on ServerError {
    __typename
    message
    code
  }
}
    `;
export const SetNewCoaDocument = `
    mutation setNewCOA($data: AddCOAAccountInput!) {
  settings {
    general {
      chartsOfAccount {
        account {
          add(data: $data) {
            record {
              id
              name
              level
              parent {
                id
                name
                accountNumber
                isDefault
                amount
                interestRate
                accountType
                interestBooked
                interestEarned
                subscribedDate
                history {
                  date
                  balance
                }
                transactions {
                  id
                  name
                  transactionType
                  date
                  transactionDirection
                  amount
                }
              }
              code
              currency
              classId
              hasSubAccounts
              active
              accountType
              openingBalance
              isLedgerAccount
              isBalanceSheetAccount
              isSummationAccount
              isIbtAccount
              isInTransitAccount
              isProfitAndLossAccount
              allowFreeEntry
              allowTransaction
            }
          }
        }
      }
    }
  }
}
    `;
export const useSetNewCoaMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetNewCoaMutation, TError, SetNewCoaMutationVariables, TContext>) =>
    useMutation<SetNewCoaMutation, TError, SetNewCoaMutationVariables, TContext>(
      ['setNewCOA'],
      useAxios<SetNewCoaMutation, SetNewCoaMutationVariables>(SetNewCoaDocument),
      options
    );
export const SetCooperativeDataDocument = `
    mutation setCooperativeData($id: ID!, $data: KymCooperativeFormInput!) {
  members {
    cooperative(id: $id) {
      add(data: $data) {
        recordId
      }
    }
  }
}
    `;
export const useSetCooperativeDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetCooperativeDataMutation, TError, SetCooperativeDataMutationVariables, TContext>) =>
    useMutation<SetCooperativeDataMutation, TError, SetCooperativeDataMutationVariables, TContext>(
      ['setCooperativeData'],
      useAxios<SetCooperativeDataMutation, SetCooperativeDataMutationVariables>(SetCooperativeDataDocument),
      options
    );
export const SetCooperativeUnionInstitutionDataDocument = `
    mutation setCooperativeUnionInstitutionData($id: ID!, $data: CoopUnionInstitutionInformationInput) {
  members {
    cooperativeUnion(id: $id) {
      add(id: $id) {
        institutionInformation(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCooperativeUnionInstitutionDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetCooperativeUnionInstitutionDataMutation, TError, SetCooperativeUnionInstitutionDataMutationVariables, TContext>) =>
    useMutation<SetCooperativeUnionInstitutionDataMutation, TError, SetCooperativeUnionInstitutionDataMutationVariables, TContext>(
      ['setCooperativeUnionInstitutionData'],
      useAxios<SetCooperativeUnionInstitutionDataMutation, SetCooperativeUnionInstitutionDataMutationVariables>(SetCooperativeUnionInstitutionDataDocument),
      options
    );
export const SetCooperativeUnionBoardOfDirectorDataDocument = `
    mutation setCooperativeUnionBoardOfDirectorData($id: ID!, $data: CoopUnionBODDetailsInput) {
  members {
    cooperativeUnion(id: $id) {
      add(id: $id) {
        boardOfDirectorsDetails(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCooperativeUnionBoardOfDirectorDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetCooperativeUnionBoardOfDirectorDataMutation, TError, SetCooperativeUnionBoardOfDirectorDataMutationVariables, TContext>) =>
    useMutation<SetCooperativeUnionBoardOfDirectorDataMutation, TError, SetCooperativeUnionBoardOfDirectorDataMutationVariables, TContext>(
      ['setCooperativeUnionBoardOfDirectorData'],
      useAxios<SetCooperativeUnionBoardOfDirectorDataMutation, SetCooperativeUnionBoardOfDirectorDataMutationVariables>(SetCooperativeUnionBoardOfDirectorDataDocument),
      options
    );
export const SetAccountOperatorDetailsDataDocument = `
    mutation setAccountOperatorDetailsData($id: ID!, $data: CoopUnionAccountOperatorDetailsInput) {
  members {
    cooperativeUnion(id: $id) {
      add(id: $id) {
        accountOperatorsDetails(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetAccountOperatorDetailsDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetAccountOperatorDetailsDataMutation, TError, SetAccountOperatorDetailsDataMutationVariables, TContext>) =>
    useMutation<SetAccountOperatorDetailsDataMutation, TError, SetAccountOperatorDetailsDataMutationVariables, TContext>(
      ['setAccountOperatorDetailsData'],
      useAxios<SetAccountOperatorDetailsDataMutation, SetAccountOperatorDetailsDataMutationVariables>(SetAccountOperatorDetailsDataDocument),
      options
    );
export const SetCentralRepresentationDetailsDataDocument = `
    mutation setCentralRepresentationDetailsData($id: ID!, $data: CoopUnionCentralRepresentativeDetailsInput) {
  members {
    cooperativeUnion(id: $id) {
      add(id: $id) {
        centralRepresentativeDetails(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetCentralRepresentationDetailsDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetCentralRepresentationDetailsDataMutation, TError, SetCentralRepresentationDetailsDataMutationVariables, TContext>) =>
    useMutation<SetCentralRepresentationDetailsDataMutation, TError, SetCentralRepresentationDetailsDataMutationVariables, TContext>(
      ['setCentralRepresentationDetailsData'],
      useAxios<SetCentralRepresentationDetailsDataMutation, SetCentralRepresentationDetailsDataMutationVariables>(SetCentralRepresentationDetailsDataDocument),
      options
    );
export const SetMemberDetailsDataDocument = `
    mutation setMemberDetailsData($id: ID!, $data: CoopUnionMemberDetailsInput) {
  members {
    cooperativeUnion(id: $id) {
      add(id: $id) {
        memberDetails(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetMemberDetailsDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetMemberDetailsDataMutation, TError, SetMemberDetailsDataMutationVariables, TContext>) =>
    useMutation<SetMemberDetailsDataMutation, TError, SetMemberDetailsDataMutationVariables, TContext>(
      ['setMemberDetailsData'],
      useAxios<SetMemberDetailsDataMutation, SetMemberDetailsDataMutationVariables>(SetMemberDetailsDataDocument),
      options
    );
export const SetEconomicDetailsDataDocument = `
    mutation setEconomicDetailsData($id: ID!, $data: CoopUnionEconomicDetailsInput) {
  members {
    cooperativeUnion(id: $id) {
      add(id: $id) {
        economicDetails(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetEconomicDetailsDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetEconomicDetailsDataMutation, TError, SetEconomicDetailsDataMutationVariables, TContext>) =>
    useMutation<SetEconomicDetailsDataMutation, TError, SetEconomicDetailsDataMutationVariables, TContext>(
      ['setEconomicDetailsData'],
      useAxios<SetEconomicDetailsDataMutation, SetEconomicDetailsDataMutationVariables>(SetEconomicDetailsDataDocument),
      options
    );
export const SetDeclarationDataDocument = `
    mutation setDeclarationData($id: ID!, $data: CoopUnionDeclarationInput) {
  members {
    cooperativeUnion(id: $id) {
      add(id: $id) {
        declaration(data: $data) {
          recordId
        }
      }
    }
  }
}
    `;
export const useSetDeclarationDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetDeclarationDataMutation, TError, SetDeclarationDataMutationVariables, TContext>) =>
    useMutation<SetDeclarationDataMutation, TError, SetDeclarationDataMutationVariables, TContext>(
      ['setDeclarationData'],
      useAxios<SetDeclarationDataMutation, SetDeclarationDataMutationVariables>(SetDeclarationDataDocument),
      options
    );
export const GetNewIdDocument = `
    mutation getNewId {
  newId
}
    `;
export const useGetNewIdMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>) =>
    useMutation<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>(
      ['getNewId'],
      useAxios<GetNewIdMutation, GetNewIdMutationVariables>(GetNewIdDocument),
      options
    );
export const SetMemberDataDocument = `
    mutation setMemberData($id: ID!, $data: KymIndMemberInput!) {
  members {
    individual(id: $id) {
      add(data: $data) {
        recordId
        error {
          ... on KymIndAddInvalidDataError {
            error
          }
        }
      }
    }
  }
}
    `;
export const useSetMemberDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetMemberDataMutation, TError, SetMemberDataMutationVariables, TContext>) =>
    useMutation<SetMemberDataMutation, TError, SetMemberDataMutationVariables, TContext>(
      ['setMemberData'],
      useAxios<SetMemberDataMutation, SetMemberDataMutationVariables>(SetMemberDataDocument),
      options
    );
export const UpdateKymFieldDocument = `
    mutation updateKYMField($id: ID!, $enabled: Boolean, $name: String) {
  settings {
    kymForm {
      field {
        update(id: $id, data: {enabled: $enabled, name: $name}) {
          record {
            id
            enabled
            name
          }
        }
      }
    }
  }
}
    `;
export const useUpdateKymFieldMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateKymFieldMutation, TError, UpdateKymFieldMutationVariables, TContext>) =>
    useMutation<UpdateKymFieldMutation, TError, UpdateKymFieldMutationVariables, TContext>(
      ['updateKYMField'],
      useAxios<UpdateKymFieldMutation, UpdateKymFieldMutationVariables>(UpdateKymFieldDocument),
      options
    );
export const DeleteKymFieldDocument = `
    mutation deleteKYMField($optionId: ID!) {
  settings {
    kymForm {
      option {
        delete(optionId: $optionId) {
          recordId
        }
      }
    }
  }
}
    `;
export const useDeleteKymFieldMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteKymFieldMutation, TError, DeleteKymFieldMutationVariables, TContext>) =>
    useMutation<DeleteKymFieldMutation, TError, DeleteKymFieldMutationVariables, TContext>(
      ['deleteKYMField'],
      useAxios<DeleteKymFieldMutation, DeleteKymFieldMutationVariables>(DeleteKymFieldDocument),
      options
    );
export const SetKymCooperativeDataDocument = `
    mutation setKymCooperativeData($id: ID!, $data: KymCooperativeFormInput!) {
  members {
    cooperative(id: $id) {
      add(data: $data) {
        recordId
      }
    }
  }
}
    `;
export const useSetKymCooperativeDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetKymCooperativeDataMutation, TError, SetKymCooperativeDataMutationVariables, TContext>) =>
    useMutation<SetKymCooperativeDataMutation, TError, SetKymCooperativeDataMutationVariables, TContext>(
      ['setKymCooperativeData'],
      useAxios<SetKymCooperativeDataMutation, SetKymCooperativeDataMutationVariables>(SetKymCooperativeDataDocument),
      options
    );
export const SetInstitutionDataDocument = `
    mutation setInstitutionData($id: ID!, $data: KymInsInput!) {
  members {
    institution(id: $id) {
      add(data: $data) {
        recordId
        error {
          ... on KymIndAddInvalidDataError {
            error
          }
        }
      }
    }
  }
}
    `;
export const useSetInstitutionDataMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetInstitutionDataMutation, TError, SetInstitutionDataMutationVariables, TContext>) =>
    useMutation<SetInstitutionDataMutation, TError, SetInstitutionDataMutationVariables, TContext>(
      ['setInstitutionData'],
      useAxios<SetInstitutionDataMutation, SetInstitutionDataMutationVariables>(SetInstitutionDataDocument),
      options
    );
export const AddKymOptionDocument = `
    mutation addKYMOption($fieldId: ID!, $data: KYMOptionInput!) {
  settings {
    kymForm {
      option {
        upsert(fieldId: $fieldId, data: $data) {
          recordId
          record {
            id
            name
            fieldType
            enabled
          }
          error {
            ...MutationError
          }
        }
      }
    }
  }
}
    ${MutationErrorFragmentDoc}`;
export const useAddKymOptionMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddKymOptionMutation, TError, AddKymOptionMutationVariables, TContext>) =>
    useMutation<AddKymOptionMutation, TError, AddKymOptionMutationVariables, TContext>(
      ['addKYMOption'],
      useAxios<AddKymOptionMutation, AddKymOptionMutationVariables>(AddKymOptionDocument),
      options
    );
export const ArrangeKymFieldDocument = `
    mutation arrangeKYMField($optionId: ID!, $to: Int!) {
  settings {
    kymForm {
      option {
        move(optionId: $optionId, to: $to) {
          recordId
        }
      }
    }
  }
}
    `;
export const useArrangeKymFieldMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ArrangeKymFieldMutation, TError, ArrangeKymFieldMutationVariables, TContext>) =>
    useMutation<ArrangeKymFieldMutation, TError, ArrangeKymFieldMutationVariables, TContext>(
      ['arrangeKYMField'],
      useAxios<ArrangeKymFieldMutation, ArrangeKymFieldMutationVariables>(ArrangeKymFieldDocument),
      options
    );
export const ToggleOtherOptionDocument = `
    mutation toggleOtherOption($groupId: ID!, $hasOtherField: Boolean!) {
  settings {
    kymForm {
      field {
        update(id: $groupId, data: {hasOtherField: $hasOtherField}) {
          record {
            name
            hasOtherField
          }
        }
      }
    }
  }
}
    `;
export const useToggleOtherOptionMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ToggleOtherOptionMutation, TError, ToggleOtherOptionMutationVariables, TContext>) =>
    useMutation<ToggleOtherOptionMutation, TError, ToggleOtherOptionMutationVariables, TContext>(
      ['toggleOtherOption'],
      useAxios<ToggleOtherOptionMutation, ToggleOtherOptionMutationVariables>(ToggleOtherOptionDocument),
      options
    );
export const AddConditionFieldDocument = `
    mutation addConditionField($fieldId: ID!, $dependsOn: [ID]!) {
  settings {
    kymForm {
      condition(fieldId: $fieldId, dependsOn: $dependsOn) {
        recordId
      }
    }
  }
}
    `;
export const useAddConditionFieldMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddConditionFieldMutation, TError, AddConditionFieldMutationVariables, TContext>) =>
    useMutation<AddConditionFieldMutation, TError, AddConditionFieldMutationVariables, TContext>(
      ['addConditionField'],
      useAxios<AddConditionFieldMutation, AddConditionFieldMutationVariables>(AddConditionFieldDocument),
      options
    );
export const AddFileSizeDocument = `
    mutation addFileSize($fieldId: ID!, $maxSize: Int!) {
  settings {
    kymForm {
      maxSize(fieldId: $fieldId, maxSize: $maxSize) {
        recordId
      }
    }
  }
}
    `;
export const useAddFileSizeMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddFileSizeMutation, TError, AddFileSizeMutationVariables, TContext>) =>
    useMutation<AddFileSizeMutation, TError, AddFileSizeMutationVariables, TContext>(
      ['addFileSize'],
      useAxios<AddFileSizeMutation, AddFileSizeMutationVariables>(AddFileSizeDocument),
      options
    );
export const AddCustomFieldDocument = `
    mutation addCustomField {
  settings {
    kymForm {
      field {
        add(
          data: {kymType: INDIVIDUAL, name: "121", fieldType: SINGLE_SELECT, hasOtherField: false, enabled: false}
        ) {
          record {
            id
            name
            enabled
            fieldType
            isCustom
            hasOtherField
            options {
              id
              name
              fieldType
              enabled
            }
          }
        }
      }
    }
  }
}
    `;
export const useAddCustomFieldMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddCustomFieldMutation, TError, AddCustomFieldMutationVariables, TContext>) =>
    useMutation<AddCustomFieldMutation, TError, AddCustomFieldMutationVariables, TContext>(
      ['addCustomField'],
      useAxios<AddCustomFieldMutation, AddCustomFieldMutationVariables>(AddCustomFieldDocument),
      options
    );
export const UpdateCustomFieldDocument = `
    mutation updateCustomField($fieldId: ID!, $fieldName: String, $fieldType: KYM_FIELD_TYPE, $fieldEnabled: Boolean) {
  settings {
    kymForm {
      field {
        update(
          id: $fieldId
          data: {name: $fieldName, fieldType: $fieldType, enabled: $fieldEnabled}
        ) {
          recordId
          record {
            id
            name
            enabled
          }
        }
      }
    }
  }
}
    `;
export const useUpdateCustomFieldMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateCustomFieldMutation, TError, UpdateCustomFieldMutationVariables, TContext>) =>
    useMutation<UpdateCustomFieldMutation, TError, UpdateCustomFieldMutationVariables, TContext>(
      ['updateCustomField'],
      useAxios<UpdateCustomFieldMutation, UpdateCustomFieldMutationVariables>(UpdateCustomFieldDocument),
      options
    );
export const AddSharePurchaseDocument = `
    mutation addSharePurchase($id: ID!, $data: SharePurchaseInput!) {
  share {
    purchase(id: $id, data: $data) {
      recordId
      record {
        id
        createdAt
        modifiedAt
        member {
          id
        }
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        balance
        shareAmount
        totalAmount
        extraFee {
          name
          value
        }
        paymentMode
        bankId
        voucherNumber
        accountId
      }
    }
  }
}
    `;
export const useAddSharePurchaseMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddSharePurchaseMutation, TError, AddSharePurchaseMutationVariables, TContext>) =>
    useMutation<AddSharePurchaseMutation, TError, AddSharePurchaseMutationVariables, TContext>(
      ['addSharePurchase'],
      useAxios<AddSharePurchaseMutation, AddSharePurchaseMutationVariables>(AddSharePurchaseDocument),
      options
    );
export const AddShareReturnDocument = `
    mutation addShareReturn($id: ID!, $data: ShareReturnInput!) {
  share {
    return(id: $id, data: $data) {
      recordId
      record {
        id
        createdAt
        modifiedAt
        member {
          id
        }
        status
        transactionDate
        transactionDirection
        credit
        debit
        startNumber
        endNumber
        balance
        shareAmount
        totalAmount
        paymentMode
        bankId
        voucherNumber
        accountId
      }
    }
  }
}
    `;
export const useAddShareReturnMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddShareReturnMutation, TError, AddShareReturnMutationVariables, TContext>) =>
    useMutation<AddShareReturnMutation, TError, AddShareReturnMutationVariables, TContext>(
      ['addShareReturn'],
      useAxios<AddShareReturnMutation, AddShareReturnMutationVariables>(AddShareReturnDocument),
      options
    );
export const AllAdministrationDocument = `
    query allAdministration {
  administration {
    all {
      id
      name
      districts {
        id
        name
        municipalities {
          id
          name
        }
      }
    }
  }
}
    `;
export const useAllAdministrationQuery = <
      TData = AllAdministrationQuery,
      TError = unknown
    >(
      variables?: AllAdministrationQueryVariables,
      options?: UseQueryOptions<AllAdministrationQuery, TError, TData>
    ) =>
    useQuery<AllAdministrationQuery, TError, TData>(
      variables === undefined ? ['allAdministration'] : ['allAdministration', variables],
      useAxios<AllAdministrationQuery, AllAdministrationQueryVariables>(AllAdministrationDocument).bind(null, variables),
      options
    );
export const GetKymFormStatusInstitutionDocument = `
    query getKymFormStatusInstitution($id: ID!) {
  members {
    institution {
      formState(id: $id) {
        data {
          sectionStatus {
            information {
              completed
              error
            }
            transaction {
              completed
              error
            }
            directorDetails {
              completed
              error
            }
            account {
              completed
              error
            }
            declaration {
              completed
              error
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetKymFormStatusInstitutionQuery = <
      TData = GetKymFormStatusInstitutionQuery,
      TError = unknown
    >(
      variables: GetKymFormStatusInstitutionQueryVariables,
      options?: UseQueryOptions<GetKymFormStatusInstitutionQuery, TError, TData>
    ) =>
    useQuery<GetKymFormStatusInstitutionQuery, TError, TData>(
      ['getKymFormStatusInstitution', variables],
      useAxios<GetKymFormStatusInstitutionQuery, GetKymFormStatusInstitutionQueryVariables>(GetKymFormStatusInstitutionDocument).bind(null, variables),
      options
    );
export const GetInventoryItemsDocument = `
    query getInventoryItems {
  inventory {
    items {
      list {
        edges {
          node {
            id
            name
            type
            unitPrice
            itemQuantity
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryItemsQuery = <
      TData = GetInventoryItemsQuery,
      TError = unknown
    >(
      variables?: GetInventoryItemsQueryVariables,
      options?: UseQueryOptions<GetInventoryItemsQuery, TError, TData>
    ) =>
    useQuery<GetInventoryItemsQuery, TError, TData>(
      variables === undefined ? ['getInventoryItems'] : ['getInventoryItems', variables],
      useAxios<GetInventoryItemsQuery, GetInventoryItemsQueryVariables>(GetInventoryItemsDocument).bind(null, variables),
      options
    );
export const GetInventoryItemGroupDocument = `
    query getInventoryItemGroup {
  inventory {
    itemsGroup {
      list {
        edges {
          node {
            name
            id
            description
            parentCategory
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryItemGroupQuery = <
      TData = GetInventoryItemGroupQuery,
      TError = unknown
    >(
      variables?: GetInventoryItemGroupQueryVariables,
      options?: UseQueryOptions<GetInventoryItemGroupQuery, TError, TData>
    ) =>
    useQuery<GetInventoryItemGroupQuery, TError, TData>(
      variables === undefined ? ['getInventoryItemGroup'] : ['getInventoryItemGroup', variables],
      useAxios<GetInventoryItemGroupQuery, GetInventoryItemGroupQueryVariables>(GetInventoryItemGroupDocument).bind(null, variables),
      options
    );
export const GetInventoryVendorDocument = `
    query getInventoryVendor {
  inventory {
    vendors {
      list {
        edges {
          node {
            name
            location
            email
            phoneNumber
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryVendorQuery = <
      TData = GetInventoryVendorQuery,
      TError = unknown
    >(
      variables?: GetInventoryVendorQueryVariables,
      options?: UseQueryOptions<GetInventoryVendorQuery, TError, TData>
    ) =>
    useQuery<GetInventoryVendorQuery, TError, TData>(
      variables === undefined ? ['getInventoryVendor'] : ['getInventoryVendor', variables],
      useAxios<GetInventoryVendorQuery, GetInventoryVendorQueryVariables>(GetInventoryVendorDocument).bind(null, variables),
      options
    );
export const GetInventoryUnitOfMeasureDocument = `
    query getInventoryUnitOfMeasure {
  inventory {
    unitOfMeasure {
      list {
        edges {
          node {
            name
            shortName
            acceptFraction
          }
        }
      }
    }
  }
}
    `;
export const useGetInventoryUnitOfMeasureQuery = <
      TData = GetInventoryUnitOfMeasureQuery,
      TError = unknown
    >(
      variables?: GetInventoryUnitOfMeasureQueryVariables,
      options?: UseQueryOptions<GetInventoryUnitOfMeasureQuery, TError, TData>
    ) =>
    useQuery<GetInventoryUnitOfMeasureQuery, TError, TData>(
      variables === undefined ? ['getInventoryUnitOfMeasure'] : ['getInventoryUnitOfMeasure', variables],
      useAxios<GetInventoryUnitOfMeasureQuery, GetInventoryUnitOfMeasureQueryVariables>(GetInventoryUnitOfMeasureDocument).bind(null, variables),
      options
    );
export const GetIndividualKymOptionDocument = `
    query getIndividualKYMOption($fieldName: String) {
  members {
    individual {
      options {
        list(filter: {name: $fieldName}) {
          data {
            options {
              id
              name
              fieldType
              enabled
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymOptionQuery = <
      TData = GetIndividualKymOptionQuery,
      TError = unknown
    >(
      variables?: GetIndividualKymOptionQueryVariables,
      options?: UseQueryOptions<GetIndividualKymOptionQuery, TError, TData>
    ) =>
    useQuery<GetIndividualKymOptionQuery, TError, TData>(
      variables === undefined ? ['getIndividualKYMOption'] : ['getIndividualKYMOption', variables],
      useAxios<GetIndividualKymOptionQuery, GetIndividualKymOptionQueryVariables>(GetIndividualKymOptionDocument).bind(null, variables),
      options
    );
export const GetIndividualKymOptionsDocument = `
    query getIndividualKYMOptions($filter: ListKYMFieldFilter) {
  members {
    individual {
      options {
        list(filter: $filter) {
          data {
            options {
              id
              name
              fieldType
              enabled
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetIndividualKymOptionsQuery = <
      TData = GetIndividualKymOptionsQuery,
      TError = unknown
    >(
      variables?: GetIndividualKymOptionsQueryVariables,
      options?: UseQueryOptions<GetIndividualKymOptionsQuery, TError, TData>
    ) =>
    useQuery<GetIndividualKymOptionsQuery, TError, TData>(
      variables === undefined ? ['getIndividualKYMOptions'] : ['getIndividualKYMOptions', variables],
      useAxios<GetIndividualKymOptionsQuery, GetIndividualKymOptionsQueryVariables>(GetIndividualKymOptionsDocument).bind(null, variables),
      options
    );
export const GetIndIdentificationDocOptionDocument = `
    query getIndIdentificationDocOption {
  members {
    individual {
      options {
        list(filter: {parent: IDENTIFICATION}) {
          data {
            id
            name
            options {
              id
              name
              fieldType
              enabled
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetIndIdentificationDocOptionQuery = <
      TData = GetIndIdentificationDocOptionQuery,
      TError = unknown
    >(
      variables?: GetIndIdentificationDocOptionQueryVariables,
      options?: UseQueryOptions<GetIndIdentificationDocOptionQuery, TError, TData>
    ) =>
    useQuery<GetIndIdentificationDocOptionQuery, TError, TData>(
      variables === undefined ? ['getIndIdentificationDocOption'] : ['getIndIdentificationDocOption', variables],
      useAxios<GetIndIdentificationDocOptionQuery, GetIndIdentificationDocOptionQueryVariables>(GetIndIdentificationDocOptionDocument).bind(null, variables),
      options
    );
export const GetMemberListDocument = `
    query getMemberList($objState: ObjState, $first: Int, $before: Cursor, $after: Cursor, $last: Int) {
  members {
    list(
      pagination: {first: $first, before: $before, after: $after, last: $last}
      filter: {objState: $objState}
    ) {
      totalCount
      edges {
        node {
          id
          name
          address {
            state
            district
            localLevel
            wardNo
            locality
          }
          contact
          createdAt
        }
        cursor
      }
      pageInfo {
        startCursor
        endCursor
      }
    }
  }
}
    `;
export const useGetMemberListQuery = <
      TData = GetMemberListQuery,
      TError = unknown
    >(
      variables?: GetMemberListQueryVariables,
      options?: UseQueryOptions<GetMemberListQuery, TError, TData>
    ) =>
    useQuery<GetMemberListQuery, TError, TData>(
      variables === undefined ? ['getMemberList'] : ['getMemberList', variables],
      useAxios<GetMemberListQuery, GetMemberListQueryVariables>(GetMemberListDocument).bind(null, variables),
      options
    );
export const GetMemberTypesDocument = `
    query getMemberTypes {
  members {
    memberTypes {
      data {
        id
        type
      }
    }
  }
}
    `;
export const useGetMemberTypesQuery = <
      TData = GetMemberTypesQuery,
      TError = unknown
    >(
      variables?: GetMemberTypesQueryVariables,
      options?: UseQueryOptions<GetMemberTypesQuery, TError, TData>
    ) =>
    useQuery<GetMemberTypesQuery, TError, TData>(
      variables === undefined ? ['getMemberTypes'] : ['getMemberTypes', variables],
      useAxios<GetMemberTypesQuery, GetMemberTypesQueryVariables>(GetMemberTypesDocument).bind(null, variables),
      options
    );
export const GetMemberTranslationDocument = `
    query getMemberTranslation($id: ID!) {
  members {
    translate(id: $id) {
      data {
        id
        data
        translatedValue
      }
    }
  }
}
    `;
export const useGetMemberTranslationQuery = <
      TData = GetMemberTranslationQuery,
      TError = unknown
    >(
      variables: GetMemberTranslationQueryVariables,
      options?: UseQueryOptions<GetMemberTranslationQuery, TError, TData>
    ) =>
    useQuery<GetMemberTranslationQuery, TError, TData>(
      ['getMemberTranslation', variables],
      useAxios<GetMemberTranslationQuery, GetMemberTranslationQueryVariables>(GetMemberTranslationDocument).bind(null, variables),
      options
    );
export const GetKymFormStatusDocument = `
    query getKymFormStatus($id: ID!) {
  members {
    individual {
      formState(id: $id) {
        data {
          sectionStatus {
            personal {
              completed
              error
            }
            professional {
              completed
              error
            }
            cooperativeMembership {
              completed
              error
            }
            declaration {
              completed
              error
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetKymFormStatusQuery = <
      TData = GetKymFormStatusQuery,
      TError = unknown
    >(
      variables: GetKymFormStatusQueryVariables,
      options?: UseQueryOptions<GetKymFormStatusQuery, TError, TData>
    ) =>
    useQuery<GetKymFormStatusQuery, TError, TData>(
      ['getKymFormStatus', variables],
      useAxios<GetKymFormStatusQuery, GetKymFormStatusQueryVariables>(GetKymFormStatusDocument).bind(null, variables),
      options
    );
export const GetKymIndItemDetailsDocument = `
    query getKYMIndItemDetails($id: ID, $name: String, $customId: CustomIdEnum, $isIdentificationDoc: KYM_Field_Parent) {
  settings {
    kymForm {
      field {
        list(
          filter: {id: $id, name: $name, kymType: INDIVIDUAL, customId: $customId, parent: $isIdentificationDoc}
        ) {
          data {
            id
            name
            enabled
            options {
              id
              name
              fieldType
              enabled
            }
            hasOtherField
            dependsOn
            isCustom
            maxSize
            fieldType
          }
        }
      }
    }
  }
}
    `;
export const useGetKymIndItemDetailsQuery = <
      TData = GetKymIndItemDetailsQuery,
      TError = unknown
    >(
      variables?: GetKymIndItemDetailsQueryVariables,
      options?: UseQueryOptions<GetKymIndItemDetailsQuery, TError, TData>
    ) =>
    useQuery<GetKymIndItemDetailsQuery, TError, TData>(
      variables === undefined ? ['getKYMIndItemDetails'] : ['getKYMIndItemDetails', variables],
      useAxios<GetKymIndItemDetailsQuery, GetKymIndItemDetailsQueryVariables>(GetKymIndItemDetailsDocument).bind(null, variables),
      options
    );
export const GetMemberIndividualDataDocument = `
    query getMemberIndividualData($id: ID!) {
  members {
    details(id: $id) {
      data {
        id
        name
        address {
          state
          district
          localLevel
          wardNo
          locality
        }
        contact
        dateJoined
        profile {
          ... on IndividualMember {
            personalInformation {
              firstName
              middleName
              lastName
              genderId
              dateOfBirth
              ethnicityId
              nationalityId
              educationQualificationId
              religionId
              contact {
                mobile
                residence
                office
              }
              identification {
                id
                fields {
                  name
                  value
                }
              }
              permanentAddress {
                state
                district
                localLevel
                wardNo
                locality
              }
              temporaryAddress {
                state
                district
                localLevel
                wardNo
                locality
              }
              landlordName
              landlordContact
              maritalStatusId
              familyDetails {
                relationshipId
                fullName
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMemberIndividualDataQuery = <
      TData = GetMemberIndividualDataQuery,
      TError = unknown
    >(
      variables: GetMemberIndividualDataQueryVariables,
      options?: UseQueryOptions<GetMemberIndividualDataQuery, TError, TData>
    ) =>
    useQuery<GetMemberIndividualDataQuery, TError, TData>(
      ['getMemberIndividualData', variables],
      useAxios<GetMemberIndividualDataQuery, GetMemberIndividualDataQueryVariables>(GetMemberIndividualDataDocument).bind(null, variables),
      options
    );
export const GetKymDeclarationDocument = `
    query getKYMDeclaration {
  settings {
    kymForm {
      declaration {
        id
        content
      }
    }
  }
}
    `;
export const useGetKymDeclarationQuery = <
      TData = GetKymDeclarationQuery,
      TError = unknown
    >(
      variables?: GetKymDeclarationQueryVariables,
      options?: UseQueryOptions<GetKymDeclarationQuery, TError, TData>
    ) =>
    useQuery<GetKymDeclarationQuery, TError, TData>(
      variables === undefined ? ['getKYMDeclaration'] : ['getKYMDeclaration', variables],
      useAxios<GetKymDeclarationQuery, GetKymDeclarationQueryVariables>(GetKymDeclarationDocument).bind(null, variables),
      options
    );
export const GetCustomFieldsDocument = `
    query getCustomFields {
  settings {
    kymForm {
      field {
        list(filter: {isCustom: true}) {
          data {
            id
            name
            enabled
            fieldType
            isCustom
            hasOtherField
            options {
              id
              name
              fieldType
              enabled
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetCustomFieldsQuery = <
      TData = GetCustomFieldsQuery,
      TError = unknown
    >(
      variables?: GetCustomFieldsQueryVariables,
      options?: UseQueryOptions<GetCustomFieldsQuery, TError, TData>
    ) =>
    useQuery<GetCustomFieldsQuery, TError, TData>(
      variables === undefined ? ['getCustomFields'] : ['getCustomFields', variables],
      useAxios<GetCustomFieldsQuery, GetCustomFieldsQueryVariables>(GetCustomFieldsDocument).bind(null, variables),
      options
    );
export const GetBranchesListDocument = `
    query getBranchesList {
  settings {
    general {
      branch {
        list {
          edges {
            node {
              branchCode
              address {
                provinceId
                districtId
                vdcId
                wardNo
                locality
                latitude
                longitude
              }
              manager {
                id
              }
              contactNumber
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetBranchesListQuery = <
      TData = GetBranchesListQuery,
      TError = unknown
    >(
      variables?: GetBranchesListQueryVariables,
      options?: UseQueryOptions<GetBranchesListQuery, TError, TData>
    ) =>
    useQuery<GetBranchesListQuery, TError, TData>(
      variables === undefined ? ['getBranchesList'] : ['getBranchesList', variables],
      useAxios<GetBranchesListQuery, GetBranchesListQueryVariables>(GetBranchesListDocument).bind(null, variables),
      options
    );
export const GetChartOfAccountsDocument = `
    query getChartOfAccounts {
  settings {
    general {
      chartsOfAccount {
        class {
          data {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetChartOfAccountsQuery = <
      TData = GetChartOfAccountsQuery,
      TError = unknown
    >(
      variables?: GetChartOfAccountsQueryVariables,
      options?: UseQueryOptions<GetChartOfAccountsQuery, TError, TData>
    ) =>
    useQuery<GetChartOfAccountsQuery, TError, TData>(
      variables === undefined ? ['getChartOfAccounts'] : ['getChartOfAccounts', variables],
      useAxios<GetChartOfAccountsQuery, GetChartOfAccountsQueryVariables>(GetChartOfAccountsDocument).bind(null, variables),
      options
    );
export const GetShareBalanceListDocument = `
    query getShareBalanceList {
  share {
    balance {
      edges {
        node {
          id
          balance
          count
          member {
            name
          }
        }
      }
      pageInfo {
        endCursor
        startCursor
      }
    }
  }
}
    `;
export const useGetShareBalanceListQuery = <
      TData = GetShareBalanceListQuery,
      TError = unknown
    >(
      variables?: GetShareBalanceListQueryVariables,
      options?: UseQueryOptions<GetShareBalanceListQuery, TError, TData>
    ) =>
    useQuery<GetShareBalanceListQuery, TError, TData>(
      variables === undefined ? ['getShareBalanceList'] : ['getShareBalanceList', variables],
      useAxios<GetShareBalanceListQuery, GetShareBalanceListQueryVariables>(GetShareBalanceListDocument).bind(null, variables),
      options
    );
export const GetShareRegisterListDocument = `
    query getShareRegisterList {
  share {
    register {
      edges {
        node {
          transactionDate
          transactionDirection
          id
          member {
            name
          }
          balance
          startNumber
          shareAmount
          endNumber
          credit
          debit
        }
      }
    }
  }
}
    `;
export const useGetShareRegisterListQuery = <
      TData = GetShareRegisterListQuery,
      TError = unknown
    >(
      variables?: GetShareRegisterListQueryVariables,
      options?: UseQueryOptions<GetShareRegisterListQuery, TError, TData>
    ) =>
    useQuery<GetShareRegisterListQuery, TError, TData>(
      variables === undefined ? ['getShareRegisterList'] : ['getShareRegisterList', variables],
      useAxios<GetShareRegisterListQuery, GetShareRegisterListQueryVariables>(GetShareRegisterListDocument).bind(null, variables),
      options
    );
export const GetShareHistoryDocument = `
    query getShareHistory($memberId: String!) {
  share {
    register(
      paginate: {first: 10, after: "dWduT1hYQWN2VVBHcGtmQ2RVd29JcktnZA"}
      filter: {memberId: $memberId}
    ) {
      edges {
        node {
          id
          member {
            id
          }
          transactionDate
          transactionDirection
          startNumber
          endNumber
          credit
          debit
          balance
        }
      }
    }
  }
}
    `;
export const useGetShareHistoryQuery = <
      TData = GetShareHistoryQuery,
      TError = unknown
    >(
      variables: GetShareHistoryQueryVariables,
      options?: UseQueryOptions<GetShareHistoryQuery, TError, TData>
    ) =>
    useQuery<GetShareHistoryQuery, TError, TData>(
      ['getShareHistory', variables],
      useAxios<GetShareHistoryQuery, GetShareHistoryQueryVariables>(GetShareHistoryDocument).bind(null, variables),
      options
    );