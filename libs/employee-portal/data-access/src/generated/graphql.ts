/* eslint-disable */
//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from '@tanstack/react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Amount: any;
  Any: unknown;
  Cursor: string;
  Date: string;
  Email: any;
  InvalidData: Record<string, Array<string>>;
  Localized: Record<'local' | 'en' | 'np', string>;
  Map: Record<string, unknown>;
  Time: string;
};

export type Address = {
  coordinates?: Maybe<Coordinate>;
  district?: Maybe<Scalars['Localized']>;
  houseNo?: Maybe<Scalars['String']>;
  localGovernment?: Maybe<Scalars['Localized']>;
  locality?: Maybe<Scalars['Localized']>;
  state?: Maybe<Scalars['Localized']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type ApplyForLeaveInput = {
  leaveApproverId?: InputMaybe<Scalars['String']>;
  leaveFromDate: Scalars['Localized'];
  leaveReason: Scalars['String'];
  leaveToDate: Scalars['Localized'];
  leaveTypeId: Scalars['String'];
};

export type ApplyForLeaveResult = {
  error?: Maybe<MutationError>;
  recordId: Scalars['ID'];
};

export const Arrange = {
  Asc: 'ASC',
  Desc: 'DESC',
} as const;

export type Arrange = typeof Arrange[keyof typeof Arrange];
export type AuthToken = {
  access: Scalars['String'];
  refresh: Scalars['String'];
};

export type AuthorizationError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type BadRequestError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export type Branch = {
  branchCode?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export const ComparatorType = {
  Between: 'BETWEEN',
  Contains: 'CONTAINS',
  EqualTo: 'EqualTo',
  GreaterThan: 'GreaterThan',
  HasNoValue: 'HasNoValue',
  HasValue: 'HasValue',
  In: 'IN',
  LessThan: 'LessThan',
} as const;

export type ComparatorType = typeof ComparatorType[keyof typeof ComparatorType];
export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type Coordinate = {
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type EmployeeAuthQuery = {
  me: EmployeeMeResult;
};

export type EmployeeHomeQuery = {
  profile: EmployeeProfileQuery;
};

export type EmployeeLeaveListConnection = {
  edges?: Maybe<Array<Maybe<EmployeeLeaveListEdge>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type EmployeeLeaveListData = {
  data?: Maybe<EmployeeLeaveListConnection>;
  error?: Maybe<QueryError>;
};

export type EmployeeLeaveListEdge = {
  cursor: Scalars['Cursor'];
  node?: Maybe<EmployeeLeaveListNode>;
};

export type EmployeeLeaveListNode = {
  leaveApprover?: Maybe<Scalars['String']>;
  leaveFrom?: Maybe<Scalars['Localized']>;
  leaveId?: Maybe<Scalars['String']>;
  leaveReason?: Maybe<Scalars['String']>;
  leaveStatus?: Maybe<LeaveStatusEnum>;
  leaveTo?: Maybe<Scalars['Localized']>;
  leaveType?: Maybe<Scalars['String']>;
};

export type EmployeeLeaveMutation = {
  applyForLeave?: Maybe<ApplyForLeaveResult>;
};

export type EmployeeLeaveMutationApplyForLeaveArgs = {
  data: ApplyForLeaveInput;
};

export type EmployeeLeaveQuery = {
  list: EmployeeLeaveListData;
  statistics?: Maybe<EmployeeLeaveStatisticsData>;
};

export type EmployeeLeaveQueryListArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type EmployeeLeaveStatistics = {
  leaveType?: Maybe<Scalars['String']>;
  takenLeave?: Maybe<Scalars['Int']>;
  totalLeave?: Maybe<Scalars['Int']>;
};

export type EmployeeLeaveStatisticsData = {
  data: Array<EmployeeLeaveStatistics>;
  error?: Maybe<QueryError>;
};

export type EmployeeMeResult = {
  data?: Maybe<EmployeeUserData>;
  error?: Maybe<QueryError>;
};

export type EmployeeMutation = {
  leave: EmployeeLeaveMutation;
};

export type EmployeeProfileData = {
  id?: Maybe<Scalars['String']>;
  overview?: Maybe<EmployeeProfileOverview>;
};

export type EmployeeProfileOverview = {
  address?: Maybe<Address>;
  dateOfBirth?: Maybe<Scalars['Localized']>;
  email?: Maybe<Scalars['String']>;
  fatherName?: Maybe<Scalars['Localized']>;
  firstName?: Maybe<Scalars['Localized']>;
  gender?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['Localized']>;
  joinedDate?: Maybe<Scalars['Localized']>;
  lastName?: Maybe<Scalars['Localized']>;
  middleName?: Maybe<Scalars['Localized']>;
  motherName?: Maybe<Scalars['Localized']>;
  personalEmailAddress?: Maybe<Scalars['String']>;
  personalPhoneNumber?: Maybe<Scalars['String']>;
  workEmailAddress?: Maybe<Scalars['String']>;
  workPhoneNumber?: Maybe<Scalars['String']>;
};

export type EmployeeProfileQuery = {
  data?: Maybe<EmployeeProfileData>;
  error?: Maybe<QueryError>;
};

export type EmployeeQuery = {
  auth: EmployeeAuthQuery;
  home: EmployeeHomeQuery;
  leave: EmployeeLeaveQuery;
  settings: EmployeeSettingsQuery;
};

export type EmployeeSettingsQuery = {
  listLeaveType: HcmEmployeeLeaveTypeConnection;
};

export type EmployeeSettingsQueryListLeaveTypeArgs = {
  filter?: InputMaybe<Filter>;
  pagination?: InputMaybe<Pagination>;
};

export type EmployeeUser = {
  contact?: Maybe<Scalars['String']>;
  currentBranch?: Maybe<Branch>;
  currentRole?: Maybe<RoleInfo>;
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['Localized'];
  id: Scalars['ID'];
  lastLoggedIn?: Maybe<Scalars['Time']>;
  lastName: Scalars['Localized'];
  middleName: Scalars['Localized'];
  organization?: Maybe<Organization>;
  profilePic?: Maybe<Scalars['String']>;
  username: Scalars['String'];
};

export type EmployeeUserData = {
  user?: Maybe<EmployeeUser>;
  userId?: Maybe<Scalars['String']>;
};

export type Filter = {
  orConditions?: InputMaybe<Array<OrConditions>>;
  query?: InputMaybe<Scalars['String']>;
};

export type HcmEmployeeLeaveTypeConnection = {
  edges?: Maybe<Array<Maybe<HcmEmployeeLeaveTypeEdges>>>;
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
};

export type HcmEmployeeLeaveTypeEdges = {
  cursor: Scalars['Cursor'];
  node: LeaveTypeNode;
};

export const LeaveStatusEnum = {
  Approved: 'APPROVED',
  Declined: 'DECLINED',
  Pending: 'PENDING',
} as const;

export type LeaveStatusEnum = typeof LeaveStatusEnum[keyof typeof LeaveStatusEnum];
export const LeaveTypeEnum = {
  Paid: 'PAID',
  Unpaid: 'UNPAID',
} as const;

export type LeaveTypeEnum = typeof LeaveTypeEnum[keyof typeof LeaveTypeEnum];
export type LeaveTypeGetOutput = {
  error?: Maybe<QueryError>;
  record?: Maybe<LeaveTypeNode>;
};

export type LeaveTypeNode = {
  applicableAfter?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  fractionOfDailySalaryPerLeave?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['String']>;
  includeHolidaysWithLeavesAsLeaves?: Maybe<Scalars['Boolean']>;
  isCarriedForward?: Maybe<Scalars['Boolean']>;
  isCompensatory?: Maybe<Scalars['Boolean']>;
  isOptionalLeave?: Maybe<Scalars['Boolean']>;
  isPartiallyPaid?: Maybe<Scalars['Boolean']>;
  maximumContinuousDaysApplicable?: Maybe<Scalars['Int']>;
  maximumLeaveAllowed?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  typeOfLeave?: Maybe<LeaveTypeEnum>;
};

export type LocalizedDate = {
  from: Scalars['Localized'];
  to: Scalars['Localized'];
};

export type LoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type LoginRecord = {
  data: EmployeeUserData;
  token: AuthToken;
};

export type LoginResult = {
  error?: Maybe<MutationError>;
  record?: Maybe<LoginRecord>;
  recordId?: Maybe<Scalars['ID']>;
};

export type Mutation = {
  employee?: Maybe<EmployeeMutation>;
};

export type MutationError =
  | AuthorizationError
  | BadRequestError
  | NotFoundError
  | ServerError
  | ValidationError;

export type NotFoundError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export const ObjState = {
  Active: 'ACTIVE',
  Approved: 'APPROVED',
  Dormant: 'DORMANT',
  Draft: 'DRAFT',
  Inactive: 'INACTIVE',
  Submitted: 'SUBMITTED',
  Validated: 'VALIDATED',
} as const;

export type ObjState = typeof ObjState[keyof typeof ObjState];
export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export type Organization = {
  aKey?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
  basicDetails?: Maybe<OrganizationBasicDetails>;
  contactDetails?: Maybe<OrganizationContactDetails>;
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  mainContactPerson?: Maybe<OrganizationMainContactPerson>;
  registrationDetails?: Maybe<OrganizationRegistrationDetails>;
  sKey?: Maybe<Scalars['String']>;
};

export type OrganizationBasicDetails = {
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  typeOfOrganization?: Maybe<TypeOfOrganization>;
};

export type OrganizationContactDetails = {
  email?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationDocument = {
  documents?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationMainContactPerson = {
  contactPersonContactNumber?: Maybe<Scalars['String']>;
  contactPersonName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type OrganizationRegistrationDetails = {
  panOrVat?: Maybe<Scalars['String']>;
  regdAddress?: Maybe<Scalars['String']>;
  regdNo?: Maybe<Scalars['String']>;
  regdOffice?: Maybe<Scalars['String']>;
};

export type PageInfo = {
  endCursor?: Maybe<Scalars['Cursor']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['Cursor']>;
};

export type Pagination = {
  after?: InputMaybe<Scalars['Cursor']>;
  before?: InputMaybe<Scalars['Cursor']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<Order>;
};

export type Query = {
  employee?: Maybe<EmployeeQuery>;
};

export type QueryError = AuthorizationError | BadRequestError | NotFoundError | ServerError;

export type RoleInfo = {
  id: Scalars['String'];
  name: Scalars['String'];
};

export type ServerError = {
  code: Scalars['Int'];
  message: Scalars['String'];
};

export const TextFormat = {
  Email: 'EMAIL',
  IPv4: 'IPv4',
  IPv6: 'IPv6',
} as const;

export type TextFormat = typeof TextFormat[keyof typeof TextFormat];
export const TypeOfOrganization = {
  Cooperative: 'COOPERATIVE',
  CooperativeUnion: 'COOPERATIVE_UNION',
} as const;

export type TypeOfOrganization = typeof TypeOfOrganization[keyof typeof TypeOfOrganization];
export const UserLoginType = {
  Employee: 'EMPLOYEE',
  Erp: 'ERP',
  MrUser: 'MR_USER',
} as const;

export type UserLoginType = typeof UserLoginType[keyof typeof UserLoginType];
export type ValidationError = {
  code: Scalars['Int'];
  message: Scalars['InvalidData'];
};

export type ApplyForLeaveMutationVariables = Exact<{
  data: ApplyForLeaveInput;
}>;

export type ApplyForLeaveMutation = {
  employee?: { leave: { applyForLeave?: { recordId: string } | null } } | null;
};

export type GetMeQueryVariables = Exact<{ [key: string]: never }>;

export type GetMeQuery = {
  employee?: {
    auth: {
      me: {
        data?: {
          userId?: string | null;
          user?: {
            id: string;
            username: string;
            profilePic?: string | null;
            firstName: Record<'local' | 'en' | 'np', string>;
            lastName: Record<'local' | 'en' | 'np', string>;
            middleName: Record<'local' | 'en' | 'np', string>;
            email?: string | null;
            contact?: string | null;
            lastLoggedIn?: string | null;
            organization?: {
              id: string;
              basicDetails?: { name?: string | null; logo?: string | null } | null;
              contactDetails?: {
                website?: string | null;
                phoneNumber?: string | null;
                email?: string | null;
              } | null;
              address?: {
                district?: Record<'local' | 'en' | 'np', string> | null;
                wardNo?: string | null;
                state?: Record<'local' | 'en' | 'np', string> | null;
                locality?: Record<'local' | 'en' | 'np', string> | null;
                localGovernment?: Record<'local' | 'en' | 'np', string> | null;
                houseNo?: string | null;
              } | null;
              registrationDetails?: { regdNo?: string | null; panOrVat?: string | null } | null;
            } | null;
          } | null;
        } | null;
      };
    };
  } | null;
};

export type GetProfileQueryVariables = Exact<{ [key: string]: never }>;

export type GetProfileQuery = {
  employee?: {
    home: {
      profile: {
        data?: {
          id?: string | null;
          overview?: {
            firstName?: Record<'local' | 'en' | 'np', string> | null;
            middleName?: Record<'local' | 'en' | 'np', string> | null;
            lastName?: Record<'local' | 'en' | 'np', string> | null;
            joinedDate?: Record<'local' | 'en' | 'np', string> | null;
            dateOfBirth?: Record<'local' | 'en' | 'np', string> | null;
            gender?: string | null;
            email?: string | null;
            fatherName?: Record<'local' | 'en' | 'np', string> | null;
            grandFatherName?: Record<'local' | 'en' | 'np', string> | null;
            motherName?: Record<'local' | 'en' | 'np', string> | null;
            workPhoneNumber?: string | null;
            workEmailAddress?: string | null;
            personalPhoneNumber?: string | null;
            personalEmailAddress?: string | null;
            address?: {
              state?: Record<'local' | 'en' | 'np', string> | null;
              district?: Record<'local' | 'en' | 'np', string> | null;
              localGovernment?: Record<'local' | 'en' | 'np', string> | null;
              wardNo?: string | null;
              locality?: Record<'local' | 'en' | 'np', string> | null;
              houseNo?: string | null;
              coordinates?: { longitude?: number | null; latitude?: number | null } | null;
            } | null;
          } | null;
        } | null;
      };
    };
  } | null;
};

export type GetLeaveStatsQueryVariables = Exact<{ [key: string]: never }>;

export type GetLeaveStatsQuery = {
  employee?: {
    leave: {
      statistics?: {
        data: Array<{
          leaveType?: string | null;
          takenLeave?: number | null;
          totalLeave?: number | null;
        }>;
      } | null;
    };
  } | null;
};

export type GetLeaveListQueryVariables = Exact<{
  filter: Filter;
  pagination: Pagination;
}>;

export type GetLeaveListQuery = {
  employee?: {
    leave: {
      list: {
        data?: {
          totalCount: number;
          edges?: Array<{
            cursor: string;
            node?: {
              leaveStatus?: LeaveStatusEnum | null;
              leaveId?: string | null;
              leaveFrom?: Record<'local' | 'en' | 'np', string> | null;
              leaveTo?: Record<'local' | 'en' | 'np', string> | null;
              leaveType?: string | null;
              leaveReason?: string | null;
              leaveApprover?: string | null;
            } | null;
          } | null> | null;
          pageInfo?: { hasNextPage: boolean; hasPreviousPage: boolean } | null;
        } | null;
      };
    };
  } | null;
};

export type GetLeaveTypeListQueryVariables = Exact<{
  filter: Filter;
  pagination: Pagination;
}>;

export type GetLeaveTypeListQuery = {
  employee?: {
    settings: {
      listLeaveType: {
        edges?: Array<{ node: { id?: string | null; name?: string | null } } | null> | null;
      };
    };
  } | null;
};

export const ApplyForLeaveDocument = `
    mutation applyForLeave($data: ApplyForLeaveInput!) {
  employee {
    leave {
      applyForLeave(data: $data) {
        recordId
      }
    }
  }
}
    `;
export const useApplyForLeaveMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ApplyForLeaveMutation,
    TError,
    ApplyForLeaveMutationVariables,
    TContext
  >
) =>
  useMutation<ApplyForLeaveMutation, TError, ApplyForLeaveMutationVariables, TContext>(
    ['applyForLeave'],
    useAxios<ApplyForLeaveMutation, ApplyForLeaveMutationVariables>(ApplyForLeaveDocument),
    options
  );
export const GetMeDocument = `
    query getMe {
  employee {
    auth {
      me {
        data {
          userId
          user {
            id
            username
            profilePic
            firstName
            lastName
            middleName
            email
            contact
            lastLoggedIn
            organization {
              id
              basicDetails {
                name
                logo
              }
              contactDetails {
                website
                phoneNumber
                email
              }
              address {
                district
                wardNo
                state
                locality
                localGovernment
                houseNo
              }
              registrationDetails {
                regdNo
                panOrVat
              }
            }
          }
        }
      }
    }
  }
}
    `;
export const useGetMeQuery = <TData = GetMeQuery, TError = unknown>(
  variables?: GetMeQueryVariables,
  options?: UseQueryOptions<GetMeQuery, TError, TData>
) =>
  useQuery<GetMeQuery, TError, TData>(
    variables === undefined ? ['getMe'] : ['getMe', variables],
    useAxios<GetMeQuery, GetMeQueryVariables>(GetMeDocument).bind(null, variables),
    options
  );
export const GetProfileDocument = `
    query getProfile {
  employee {
    home {
      profile {
        data {
          id
          overview {
            firstName
            middleName
            lastName
            joinedDate
            dateOfBirth
            gender
            email
            address {
              state
              district
              localGovernment
              wardNo
              locality
              houseNo
              coordinates {
                longitude
                latitude
              }
            }
            fatherName
            grandFatherName
            motherName
            workPhoneNumber
            workEmailAddress
            personalPhoneNumber
            personalEmailAddress
          }
        }
      }
    }
  }
}
    `;
export const useGetProfileQuery = <TData = GetProfileQuery, TError = unknown>(
  variables?: GetProfileQueryVariables,
  options?: UseQueryOptions<GetProfileQuery, TError, TData>
) =>
  useQuery<GetProfileQuery, TError, TData>(
    variables === undefined ? ['getProfile'] : ['getProfile', variables],
    useAxios<GetProfileQuery, GetProfileQueryVariables>(GetProfileDocument).bind(null, variables),
    options
  );
export const GetLeaveStatsDocument = `
    query getLeaveStats {
  employee {
    leave {
      statistics {
        data {
          leaveType
          takenLeave
          totalLeave
        }
      }
    }
  }
}
    `;
export const useGetLeaveStatsQuery = <TData = GetLeaveStatsQuery, TError = unknown>(
  variables?: GetLeaveStatsQueryVariables,
  options?: UseQueryOptions<GetLeaveStatsQuery, TError, TData>
) =>
  useQuery<GetLeaveStatsQuery, TError, TData>(
    variables === undefined ? ['getLeaveStats'] : ['getLeaveStats', variables],
    useAxios<GetLeaveStatsQuery, GetLeaveStatsQueryVariables>(GetLeaveStatsDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLeaveListDocument = `
    query getLeaveList($filter: Filter!, $pagination: Pagination!) {
  employee {
    leave {
      list(filter: $filter, pagination: $pagination) {
        data {
          totalCount
          edges {
            node {
              leaveStatus
              leaveId
              leaveFrom
              leaveTo
              leaveType
              leaveReason
              leaveStatus
              leaveApprover
            }
            cursor
          }
          pageInfo {
            hasNextPage
            hasPreviousPage
          }
        }
      }
    }
  }
}
    `;
export const useGetLeaveListQuery = <TData = GetLeaveListQuery, TError = unknown>(
  variables: GetLeaveListQueryVariables,
  options?: UseQueryOptions<GetLeaveListQuery, TError, TData>
) =>
  useQuery<GetLeaveListQuery, TError, TData>(
    ['getLeaveList', variables],
    useAxios<GetLeaveListQuery, GetLeaveListQueryVariables>(GetLeaveListDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetLeaveTypeListDocument = `
    query getLeaveTypeList($filter: Filter!, $pagination: Pagination!) {
  employee {
    settings {
      listLeaveType(filter: $filter, pagination: $pagination) {
        edges {
          node {
            id
            name
          }
        }
      }
    }
  }
}
    `;
export const useGetLeaveTypeListQuery = <TData = GetLeaveTypeListQuery, TError = unknown>(
  variables: GetLeaveTypeListQueryVariables,
  options?: UseQueryOptions<GetLeaveTypeListQuery, TError, TData>
) =>
  useQuery<GetLeaveTypeListQuery, TError, TData>(
    ['getLeaveTypeList', variables],
    useAxios<GetLeaveTypeListQuery, GetLeaveTypeListQueryVariables>(GetLeaveTypeListDocument).bind(
      null,
      variables
    ),
    options
  );
