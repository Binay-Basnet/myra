//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useQuery, UseQueryOptions } from 'react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Time: string;
};

export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Iam;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Iam;
  objectState?: Maybe<ObjectState>;
  searchText: Scalars['String'];
};

export type CreateMemberInput = {
  citizenshipIssueDate?: InputMaybe<Scalars['String']>;
  citizenshipIssuePlace?: InputMaybe<Scalars['String']>;
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['String']>;
  district?: InputMaybe<Scalars['String']>;
  fatherName?: InputMaybe<Scalars['String']>;
  firstName: Scalars['String'];
  gender: GenderEnum;
  grandFatherName?: InputMaybe<Scalars['String']>;
  grandMotherName?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locality?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  motherName?: InputMaybe<Scalars['String']>;
  nationality?: InputMaybe<Scalars['String']>;
  nomineeCitizenshipNumber?: InputMaybe<Scalars['String']>;
  nomineeContact?: InputMaybe<Scalars['String']>;
  nomineeFirstName?: InputMaybe<Scalars['String']>;
  nomineeIssuePlace?: InputMaybe<Scalars['String']>;
  nomineeLastName?: InputMaybe<Scalars['String']>;
  nomineeMiddleName?: InputMaybe<Scalars['String']>;
  nomineeRelation?: InputMaybe<Scalars['String']>;
  nomineeTitle?: InputMaybe<Scalars['String']>;
  occupation?: InputMaybe<Scalars['String']>;
  officeContact?: InputMaybe<Scalars['String']>;
  panNumber?: InputMaybe<Scalars['String']>;
  residenceContact?: InputMaybe<Scalars['String']>;
  spouseName?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  vdc?: InputMaybe<Scalars['String']>;
  wardNo?: InputMaybe<Scalars['String']>;
};

export enum GenderEnum {
  Female = 'FEMALE',
  Male = 'MALE',
  Other = 'OTHER'
}

export type Iam = {
  id: Scalars['ID'];
  name: Scalars['String'];
  userType: UserType;
};

export type Member = Base & {
  citizenshipIssueDate?: Maybe<Scalars['String']>;
  citizenshipIssuePlace?: Maybe<Scalars['String']>;
  citizenshipNo?: Maybe<Scalars['String']>;
  createdAt: Scalars['Time'];
  createdBy: Iam;
  dateOfBirth?: Maybe<Scalars['String']>;
  district?: Maybe<Scalars['String']>;
  fatherName?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  gender?: Maybe<GenderEnum>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName: Scalars['String'];
  locality?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  mobileNumber?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Iam;
  motherName?: Maybe<Scalars['String']>;
  nationality?: Maybe<Scalars['String']>;
  nomineeCitizenshipNumber?: Maybe<Scalars['String']>;
  nomineeContact?: Maybe<Scalars['String']>;
  nomineeFirstName?: Maybe<Scalars['String']>;
  nomineeIssuePlace?: Maybe<Scalars['String']>;
  nomineeLastName?: Maybe<Scalars['String']>;
  nomineeMiddleName?: Maybe<Scalars['String']>;
  nomineeRelation?: Maybe<Scalars['String']>;
  nomineeTitle?: Maybe<Scalars['String']>;
  objectState?: Maybe<ObjectState>;
  occupation?: Maybe<Scalars['String']>;
  officeContact?: Maybe<Scalars['String']>;
  panNumber?: Maybe<Scalars['String']>;
  residenceContact?: Maybe<Scalars['String']>;
  searchText: Scalars['String'];
  spouseName?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  vdc?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['String']>;
};

export type MemberMutationFunc = {
  add?: Maybe<Member>;
};


export type MemberMutationFuncAddArgs = {
  data?: InputMaybe<CreateMemberInput>;
};

export type MemberQueryFunc = {
  list: Array<Member>;
};

export type Mutation = {
  members?: Maybe<MemberMutationFunc>;
};

export enum ObjectState {
  Approved = 'APPROVED',
  Draft = 'DRAFT',
  Validated = 'VALIDATED'
}

export type Query = {
  members?: Maybe<MemberQueryFunc>;
};

export enum UserType {
  Human = 'HUMAN',
  System = 'SYSTEM'
}

export type MembersQueryVariables = Exact<{ [key: string]: never; }>;


export type MembersQuery = { members?: { list: Array<{ id: string, firstName: string, middleName?: string | null, lastName: string, gender?: GenderEnum | null, title?: string | null, dateOfBirth?: string | null }> } | null };


export const MembersDocument = `
    query members {
  members {
    list {
      id
      firstName
      middleName
      lastName
      gender
      title
      dateOfBirth
    }
  }
}
    `;
export const useMembersQuery = <
      TData = MembersQuery,
      TError = unknown
    >(
      variables?: MembersQueryVariables,
      options?: UseQueryOptions<MembersQuery, TError, TData>
    ) =>
    useQuery<MembersQuery, TError, TData>(
      variables === undefined ? ['members'] : ['members', variables],
      useAxios<MembersQuery, MembersQueryVariables>(MembersDocument).bind(null, variables),
      options
    );