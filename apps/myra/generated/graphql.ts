//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import {
  useMutation,
  UseMutationOptions,
  useQuery,
  UseQueryOptions,
} from 'react-query';

import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Any: any;
  Time: string;
};

export type Address = {
  district?: Maybe<Scalars['String']>;
  locality?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  vdc?: Maybe<Scalars['String']>;
  wardNo?: Maybe<Scalars['String']>;
};

export enum Arrange {
  Ascending = 'ASCENDING',
  Descending = 'DESCENDING',
}

export type Base = {
  createdAt: Scalars['Time'];
  createdBy: Identity;
  id: Scalars['ID'];
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  objState: ObjState;
};

export type Citizenship = {
  issueDate?: Maybe<Scalars['String']>;
  issuePlace?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export enum ComparatorType {
  EqualTo = 'EqualTo',
  GreaterThan = 'GreaterThan',
  LessThan = 'LessThan',
}

export type Condition = {
  column: Scalars['String'];
  comparator: ComparatorType;
  value: Scalars['Any'];
};

export type Contact = {
  mobile?: Maybe<Scalars['String']>;
  office?: Maybe<Scalars['String']>;
  residence?: Maybe<Scalars['String']>;
};

export type Family = {
  fatherName?: Maybe<Scalars['String']>;
  grandFatherName?: Maybe<Scalars['String']>;
  grandMotherName?: Maybe<Scalars['String']>;
  motherName?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
};

export type Filter = {
  orConditions: Array<OrConditions>;
};

export enum Gender {
  Female = 'FEMALE',
  Male = 'MALE',
  Other = 'OTHER',
}

export type Identity = {
  id: Scalars['ID'];
  name: Scalars['String'];
  password: Scalars['String'];
  userType: UserType;
  username: Scalars['String'];
};

export type Member = Base & {
  address?: Maybe<Address>;
  anotherStuff?: Maybe<Scalars['String']>;
  citizenship?: Maybe<Citizenship>;
  contact?: Maybe<Contact>;
  createdAt: Scalars['Time'];
  createdBy: Identity;
  dateOfBirth?: Maybe<Scalars['String']>;
  family?: Maybe<Family>;
  firstName: Scalars['String'];
  gender: Gender;
  id: Scalars['ID'];
  lastName: Scalars['String'];
  middleName?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['Time'];
  modifiedBy: Identity;
  nationality?: Maybe<Scalars['String']>;
  nominee?: Maybe<Nominee>;
  objState: ObjState;
  occupation?: Maybe<Scalars['String']>;
  panNumber?: Maybe<Scalars['String']>;
  searchText?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type MemberInput = {
  citizenshipIssueDate?: InputMaybe<Scalars['String']>;
  citizenshipIssuePlace?: InputMaybe<Scalars['String']>;
  citizenshipNo?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['String']>;
  district?: InputMaybe<Scalars['String']>;
  fatherName?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Gender>;
  grandFatherName?: InputMaybe<Scalars['String']>;
  grandMotherName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  locality?: InputMaybe<Scalars['String']>;
  middleName?: InputMaybe<Scalars['String']>;
  mobileNumber?: InputMaybe<Scalars['String']>;
  motherName?: InputMaybe<Scalars['String']>;
  nationality?: InputMaybe<Scalars['String']>;
  nomineeCitizenshipNumber?: InputMaybe<Scalars['String']>;
  nomineeContact?: InputMaybe<Scalars['String']>;
  nomineeFirstName?: InputMaybe<Scalars['String']>;
  nomineeIssuePlace?: InputMaybe<Scalars['String']>;
  nomineeLastName?: InputMaybe<Scalars['String']>;
  nomineeMiddleName?: InputMaybe<Scalars['String']>;
  nomineeRelation?: InputMaybe<Scalars['String']>;
  nomineeTitle?: InputMaybe<Scalars['String']>;
  occupation?: InputMaybe<Scalars['String']>;
  officeContact?: InputMaybe<Scalars['String']>;
  panNumber?: InputMaybe<Scalars['String']>;
  residenceContact?: InputMaybe<Scalars['String']>;
  spouseName?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  vdc?: InputMaybe<Scalars['String']>;
  wardNo?: InputMaybe<Scalars['String']>;
};

export type MemberMutation = {
  save: Member;
};

export type MemberMutationSaveArgs = {
  data: MemberInput;
  id: Scalars['ID'];
};

export type MemberQuery = {
  get: Member;
  list: Array<Member>;
};

export type MemberQueryGetArgs = {
  id: Scalars['String'];
};

export type MemberQueryListArgs = {
  filter?: InputMaybe<Filter>;
  order?: InputMaybe<Array<Order>>;
};

export type Mutation = {
  members?: Maybe<MemberMutation>;
  newId: Scalars['String'];
};

export type Nominee = {
  citizenship?: Maybe<Citizenship>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  relation?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export enum ObjState {
  Approved = 'APPROVED',
  Draft = 'DRAFT',
  Validated = 'VALIDATED',
}

export type OrConditions = {
  andConditions: Array<Condition>;
};

export type Order = {
  arrange: Arrange;
  column: Scalars['String'];
};

export type Query = {
  members?: Maybe<MemberQuery>;
};

export enum UserType {
  Human = 'HUMAN',
  System = 'SYSTEM',
}

export type MembersQueryVariables = Exact<{ [key: string]: never }>;

export type MembersQuery = {
  members?: {
    list: Array<{
      id: string;
      firstName: string;
      middleName?: string | null;
      lastName: string;
      gender: Gender;
      title?: string | null;
      dateOfBirth?: string | null;
    }>;
  } | null;
};

export type GetNewIdMutationVariables = Exact<{ [key: string]: never }>;

export type GetNewIdMutation = { newId: string };

export const MembersDocument = `
    query members {
  members {
    list {
      id
      firstName
      middleName
      lastName
      gender
      title
      dateOfBirth
    }
  }
}
    `;
export const useMembersQuery = <TData = MembersQuery, TError = unknown>(
  variables?: MembersQueryVariables,
  options?: UseQueryOptions<MembersQuery, TError, TData>
) =>
  useQuery<MembersQuery, TError, TData>(
    variables === undefined ? ['members'] : ['members', variables],
    useAxios<MembersQuery, MembersQueryVariables>(MembersDocument).bind(
      null,
      variables
    ),
    options
  );
export const GetNewIdDocument = `
    mutation getNewId {
  newId
}
    `;
export const useGetNewIdMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    GetNewIdMutation,
    TError,
    GetNewIdMutationVariables,
    TContext
  >
) =>
  useMutation<GetNewIdMutation, TError, GetNewIdMutationVariables, TContext>(
    ['getNewId'],
    useAxios<GetNewIdMutation, GetNewIdMutationVariables>(GetNewIdDocument),
    options
  );
