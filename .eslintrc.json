{
  "root": true,
  "ignorePatterns": [
    "**/*",
    "**/graphql.ts"
  ],
  "plugins": [
    "unused-imports",
    "@nrwl/nx",
    "@typescript-eslint",
    "simple-import-sort",
    "prettier"
  ],
  "extends": [
    "eslint:recommended",
    "airbnb",
    "airbnb-typescript",
    "airbnb/hooks",
    "prettier"
  ],
  "rules": {
    "require-jsdoc": "off",
    "valid-jsdoc": "off",
    "camelcase": "off",
    "no-console": "error",
    "react-hooks/exhaustive-deps": "warn",
    "@typescript-eslint/dot-notation": "off",
    "react/jsx-props-no-spreading": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "import/prefer-default-export": "off",
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "unused-imports/no-unused-imports-ts": "error",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "simple-import-sort/exports": "error",
    "simple-import-sort/imports": [
      "warn",
      {
        "groups": [
          // Packages 'react' related packages come first.
          [
            "^react",
            "^next",
            "^@?\\w"
          ],
          [
            "^@coop"
          ],
          [
            "^\\./?$",
            "^\\.(?!/?$)",
            "^\\.\\./?$",
            "^\\.\\.(?!/?$)",
            "^\\.\\./\\.\\./?$",
            "^\\.\\./\\.\\.(?!/?$)",
            "^\\.\\./\\.\\./\\.\\./?$",
            "^\\.\\./\\.\\./\\.\\.(?!/?$)"
          ]
          // relative paths up until 3 levels
        ]
      }
    ]
  },
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.tsx",
        "*.js",
        "*.jsx"
      ],
      "parser": "@typescript-eslint/parser",
      // We set parserOptions.project for the project to allow TypeScript to create the type-checker behind the scenes when we run linting
      "parserOptions": {
        "project": [
          "./tsconfig(.*)?.json"
        ]
      },
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "allowCircularSelfDependency": true,
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": [
                  "*"
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "files": [
        "*.ts",
        "*.tsx"
      ],
      "extends": [
        "plugin:@nrwl/nx/typescript"
      ],
      "rules": {}
    },
    {
      "files": [
        "*.js",
        "*.jsx"
      ],
      "extends": [
        "plugin:@nrwl/nx/javascript"
      ],
      "rules": {}
    }
  ]
}
