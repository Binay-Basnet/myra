{
  "root": true,
  "ignorePatterns": ["**/*", "next.config.js", "**/graphql.ts"],
  "plugins": ["unused-imports", "@nrwl/nx", "@typescript-eslint", "simple-import-sort", "prettier"],
  "extends": ["eslint:recommended", "google", "prettier"],
  "rules": {
    // UNICORN RELATED RULES & FILE NAMING CONVENTIONS
    "unicorn/no-array-for-each": "off",
    "unicorn/no-null": "off",
    "unicorn/prevent-abbreviations": "off",
    // REACT RELATED RULES
    "react/require-default-props": "off",
    "react/jsx-props-no-spreading": "off",
    "react/prop-types": "off",
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "react-hooks/exhaustive-deps": "warn",
    // MISC RULES
    "require-jsdoc": "off",
    "valid-jsdoc": "off",
    "camelcase": "off",
    "no-console": "error",
    "prefer-default-export": "off",
    // IMPORTS RELATED RULES
    "unused-imports/no-unused-imports-ts": "error",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "simple-import-sort/exports": "error",
    "simple-import-sort/imports": [
      "warn",
      {
        "groups": [
          // Packages 'react' related packages come first.
          ["^react", "^next", "^@?\\w"],
          ["^@coop"],
          [
            "^\\./?$",
            "^\\.(?!/?$)",
            "^\\.\\./?$",
            "^\\.\\.(?!/?$)",
            "^\\.\\./\\.\\./?$",
            "^\\.\\./\\.\\.(?!/?$)",
            "^\\.\\./\\.\\./\\.\\./?$",
            "^\\.\\./\\.\\./\\.\\.(?!/?$)"
          ]
          // relative paths up until 3 levels
        ]
      }
    ],
    // TYPESCRIPT RULES & VARIABLE NAMING CONVENTIONS
    "@typescript-eslint/no-misused-promises": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/dot-notation": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"]
      },
      {
        "selector": "variable",
        "types": ["function"],
        "format": ["PascalCase", "camelCase"]
      },
      {
        "selector": "function",
        "format": ["PascalCase", "camelCase"]
      },
      {
        "selector": "variable",
        "modifiers": ["const"],
        "format": ["camelCase", "UPPER_CASE"]
      },
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": ["is", "should", "has", "can", "did", "will"]
      }
    ]
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "parser": "@typescript-eslint/parser",
      // We set parserOptions.project for the project to allow TypeScript to create the type-checker behind the scenes when we run linting
      "parserOptions": {
        "project": ["./tsconfig(.*)?.json"]
      },
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "allowCircularSelfDependency": true,
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@nrwl/nx/typescript"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nrwl/nx/javascript"],
      "rules": {}
    }
  ]
}
